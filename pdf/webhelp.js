!function(e){var t={};function i(a){if(t[a])return t[a].exports;var o=t[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,i),o.l=!0,o.exports}i.m=e,i.c=t,i.d=function(e,t,a){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(i.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)i.d(a,o,function(t){return e[t]}.bind(null,o));return a},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=791)}({791:function(e,t,i){i(792),document.body.innerHTML=i(793).default},792:function(e,t,i){},793:function(e,t,i){"use strict";i.r(t),t.default='<section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="home.md"  >Kotlin docs</h1><div class="table-wrapper" ><table class=" no_header wide" id="home.md-d96b013b"  ><tbody ><tr class="" id="home.md-62f1f851" ><td id="home.md-69332baa"    width="50%"><p id="home.md-db358688" ><b id="home.md-1c3eea5c" class=""  >Get started with Kotlin</b></p><p id="home.md-1f02080b" >You can get started with Kotlin using an online editor. If you already have an IDE or you are ready to install one, here are also some ways to begin using Kotlin on your local machine.</p><ul class="list _ul" id="home.md-b8f34924"   ><li class="list__item" id="home.md-cfea19df" ><a href="#getting-started.md" id="home.md-31cbefe1"   >Get started with Kotlin</a></li><li class="list__item" id="home.md-ef8d5d97" ><a href="https://play.kotlinlang.org/" id="home.md-b4f098e1"   data-external="true" rel="noopener noreferrer" >Try Kotlin online</a></li><li class="list__item" id="home.md-69b66076" ><a href="https://kotlinlang.org/docs/mobile/getting-started.html" id="home.md-6a3068b0"   data-external="true" rel="noopener noreferrer" >Get started with KMM in Android Studio</a></li></ul><p id="home.md-f9f4955a" ><br/></p></td><td id="home.md-46433eb2"    ><p id="home.md-11b8dbcc" ><b id="home.md-f1bed2d5" class=""  >What\'s new in Kotlin</b></p><p id="home.md-ca4b9ea9" >Discover what features are available in the newest Kotlin release. You can try out upcoming features in the <a href="#eap.md" id="home.md-b972af6d"   >preview versions</a> before they are released.</p><ul class="list _ul" id="home.md-59fe045e"   ><li class="list__item" id="home.md-4295e4e0" ><a href="#whatsnew1430.md" id="home.md-850e34fa"   >What\'s new in Kotlin 1.4.30</a></li><li class="list__item" id="home.md-17a890d3" ><a href="#whatsnew-plugin-20211.md" id="home.md-fd28e6c8"   >What\'s new in Kotlin plugin 2021.1</a></li><li class="list__item" id="home.md-85a33737" ><a href="#roadmap.md" id="home.md-d0ed44"   >Kotlin public roadmap</a></li><li class="list__item" id="home.md-dbd8db8c" ><a href="https://kotlinlang.org/docs/mobile/kmm-plugin-releases.html" id="home.md-44baa2f9"   data-external="true" rel="noopener noreferrer" >KMM plugin releases for Android Studio</a></li></ul><p id="home.md-a90bd838" ><br/></p></td></tr><tr class="" id="home.md-55d501e" ><td id="home.md-ab1fa81f"    ><p id="home.md-d64e9802" ><b id="home.md-af0096ea" class=""  >Basics &amp; concepts</b></p><p id="home.md-de1dbeaa" >Acquaint yourself with some of the concepts and the basics of Kotlin.</p><ul class="list _ul" id="home.md-6509a695"   ><li class="list__item" id="home.md-4122ace9" ><a href="#basic-syntax.md" id="home.md-5da37d41"   >Basic syntax</a></li><li class="list__item" id="home.md-73097706" ><a href="#basic-types.md" id="home.md-e8f9ec5c"   >Basic types</a></li><li class="list__item" id="home.md-79ad2bd" ><a href="#control-flow.md" id="home.md-b5542a9f"   >Control flow</a></li><li class="list__item" id="home.md-d07bd904" ><a href="#null-safety.md" id="home.md-58843c6e"   >Null safety</a></li><li class="list__item" id="home.md-b5b213ea" ><a href="#coroutines-overview.md" id="home.md-c08d29e"   >Coroutines</a></li><li class="list__item" id="home.md-c283e65a" ><a href="#coding-conventions.md" id="home.md-22612db2"   >Coding conventions</a></li></ul><p id="home.md-19cc4ce" ><br/></p></td><td id="home.md-ff0b6132"    ><p id="home.md-6c13d3a2" ><b id="home.md-4c04a98b" class=""  >Ways to learn</b></p><p id="home.md-c7029c36" >Find a way to learn Kotlin that works for you. There are lots of learning materials available from our team and other authors.</p><ul class="list _ul" id="home.md-577c981d"   ><li class="list__item" id="home.md-c7aecd2d" ><a href="https://play.kotlinlang.org/byExample/overview" id="home.md-8281251e"   data-external="true" rel="noopener noreferrer" >Kotlin by example</a></li><li class="list__item" id="home.md-6bd90a69" ><a href="#koans.md" id="home.md-5647d46"   >Kotlin Koans</a></li><li class="list__item" id="home.md-f1a0ddde" ><a href="https://play.kotlinlang.org/hands-on/overview" id="home.md-267ac5b0"   data-external="true" rel="noopener noreferrer" >Hands-on tutorials</a></li><li class="list__item" id="home.md-4b2447b5" ><a href="#edu-tools-learner.md" id="home.md-10c27cea"   >EduTools in IntelliJ IDEA</a></li><li class="list__item" id="home.md-664f753c" ><a href="#books.md" id="home.md-5dcac22c"   >Books</a></li></ul><p id="home.md-9a4fe6f4" ><br/></p></td></tr><tr class="" id="home.md-19091b6c" ><td id="home.md-6ac7c874"    ><p id="home.md-9e5c3d11" ><b id="home.md-9b27e10a" class=""  >Kotlin videos</b></p><p id="home.md-3c770053" >Watch videos produced by our team and other authors. You can find all our Kotlin videos on YouTube.</p><ul class="list _ul" id="home.md-fd356235"   ><li class="list__item" id="home.md-f41e6089" ><a href="https://www.youtube.com/playlist?list=PLQ176FUIyIUankIQrXKNfXaOxOPx04D8V" id="home.md-2398816d"   data-external="true" rel="noopener noreferrer" >Kotlin Online Event 2020 playlist</a></li><li class="list__item" id="home.md-a8cc8e6f" ><a href="https://www.youtube.com/playlist?list=PLQ176FUIyIUY6SKGl3Cj9yeYibBuRr3Hl" id="home.md-83574cdb"   data-external="true" rel="noopener noreferrer" >KotlinConf 2019 playlist</a></li><li class="list__item" id="home.md-9df3a7b9" ><a href="https://www.youtube.com/watch?v=1KldcFc7HCY" id="home.md-dce216e7"   data-external="true" rel="noopener noreferrer" >Kotlin – Beyond the Basics</a></li><li class="list__item" id="home.md-dfef35c" ><a href="https://www.youtube.com/watch?v=eNe5Nokrjdg" id="home.md-d51b3acf"   data-external="true" rel="noopener noreferrer" >Functional Programming with Kotlin</a></li><li class="list__item" id="home.md-ec3be959" ><p><a href="https://www.youtube.com/watch?v=_hfBv0a09Jc" id="home.md-22506c9a"   data-external="true" rel="noopener noreferrer" >Introduction to Coroutines</a> and <a href="https://www.youtube.com/watch?v=BXwuYykIxbk" id="home.md-3aa7ec2e"   data-external="true" rel="noopener noreferrer" >one more intro</a></p></li><li class="list__item" id="home.md-f218512c" ><a href="https://www.youtube.com/watch?v=tYcqn48SMT8" id="home.md-df5bf787"   data-external="true" rel="noopener noreferrer" >Asynchronous Data Streams with Kotlin Flow</a></li><li class="list__item" id="home.md-8a024f45" ><a href="https://www.youtube.com/watch?v=DGquaQs-Lh0" id="home.md-d83646fe"   data-external="true" rel="noopener noreferrer" >Kotlin on the Server with Ktor</a></li><li class="list__item" id="home.md-b01978a6" ><a href="https://www.youtube.com/playlist?list=PL2o2UfaTu22qD93FyjqtQ0jTgPrtsJg1k" id="home.md-77ee8d8"   data-external="true" rel="noopener noreferrer" >Kotlin Vocabulary Series</a></li></ul><p id="home.md-884da2c4" ><br/></p></td><td id="home.md-898158a7"    ><p id="home.md-f5fa5eb0" ><b id="home.md-7c10cbdd" class=""  >Stay in touch and contribute</b></p><p id="home.md-237096a6" >If you are interested in what\'s going with Kotlin, join us on social media, and get involved.</p><ul class="list _ul" id="home.md-525060ba"   ><li class="list__item" id="home.md-1d805cd3" ><a href="#contribute.md" id="home.md-a7239"   >Contribute to Kotlin</a></li><li class="list__item" id="home.md-c2c9d7ea" ><a href="#eap.md" id="home.md-9437842c"   >Participate in Early Access Program</a></li><li class="list__item" id="home.md-dde863b" ><a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" id="home.md-175cdeaf"   data-external="true" rel="noopener noreferrer" >Join Kotlin Slack</a></li><li class="list__item" id="home.md-5e1082b3" ><a href="https://twitter.com/kotlin" id="home.md-1ba88bf0"   data-external="true" rel="noopener noreferrer" >Follow Kotlin on Twitter</a></li><li class="list__item" id="home.md-63b3d32b" ><a href="https://www.reddit.com/r/Kotlin/" id="home.md-b1f279c8"   data-external="true" rel="noopener noreferrer" >Chat on Reddit</a></li><li class="list__item" id="home.md-2b62894a" ><a href="https://stackoverflow.com/questions/tagged/kotlin" id="home.md-737f22c3"   data-external="true" rel="noopener noreferrer" >Participate in Stack Overflow discussions</a></li></ul></td></tr></tbody ></table ></div></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="getting-started.md"  >Get started with Kotlin</h1><p id="getting-started.md-7ac7147d" ><a href="https://kotlinlang.org" id="getting-started.md-80b98f1e"   data-external="true" rel="noopener noreferrer" >Kotlin</a> is a modern but already mature programming language aimed to make developers happier. It’s concise, safe, interoperable with Java and other languages, and provides many ways to reuse code between multiple platforms for productive programming.</p><p id="getting-started.md-58c521d6" >Pick it up to start building powerful applications!</p><section class="chapter"  ><h2 id="getting-started.md-learn-kotlin-fundamentals" data-toc="getting-started#getting-started.md-learn-kotlin-fundamentals"  >Learn Kotlin fundamentals</h2><ul class="list _ul" id="getting-started.md-2399c7f4"   ><li class="list__item" id="getting-started.md-c1412416" ><p>If you\'re already familiar with one or more programming languages and want to learn Kotlin, start with these <a href="#learning-materials-overview.md" id="getting-started.md-aaa20e16"   >Kotlin learning materials</a>.</p></li><li class="list__item" id="getting-started.md-d9e59314" ><p>If you are at the very beginning and Kotlin is your first programming language, you can start with reading the <a href="https://www.atomickotlin.com/atomickotlin/" id="getting-started.md-be7967c0"   data-external="true" rel="noopener noreferrer" >Atomic Kotlin book</a> or finding a Kotlin course.</p></li></ul></section><section class="chapter"  ><h2 id="getting-started.md-create-your-powerful-application-with-kotlin" data-toc="getting-started#getting-started.md-create-your-powerful-application-with-kotlin"  >Create your powerful application with Kotlin</h2><p><div class="tabs" id="getting-started.md-1075a6a2" ><div class="tabs__content" data-gtm="tab" id="getting-started.md-82a2b548"  data-title="Backend app" ><p id="getting-started.md-1328b128" >Here is how you can take the first steps in developing Kotlin server-side applications.</p><ol class="list _decimal" id="getting-started.md-2719d856"   ><li class="list__item" id="getting-started.md-6ec48f4a" ><p id="getting-started.md-177fd517" ><b id="getting-started.md-846a24f7" class=""  >Install the <a href="http://www.jetbrains.com/idea/download/index.html" id="getting-started.md-9772db39"   data-external="true" rel="noopener noreferrer" >latest version of IntelliJ IDEA</a>.</b></p></li><li class="list__item" id="getting-started.md-d6f66993" ><p id="getting-started.md-88b9e3e2" ><b id="getting-started.md-a3d35d49" class=""  >Choose one of the frameworks below and create a project:</b></p><div class="table-wrapper" ><table class=" wide" id="getting-started.md-c4ac1536"  ><thead><tr class="ijRowHead" id="getting-started.md-e15da8ae" ><th id="getting-started.md-1bebad4b"    >Spring</th><th id="getting-started.md-68ceb12e"    >Ktor</th></tr></thead><tbody ><tr class="" id="getting-started.md-833ab296" ><td id="getting-started.md-9a74245"    width="50%">A mature family of frameworks with an established ecosystem that is used by millions of developers worldwide. <br/><ul class="list _ul" id="getting-started.md-88071725"   ><li class="list__item" id="getting-started.md-49a6deae" ><p><a href="#jvm-spring-boot-restful.md" id="getting-started.md-d550dcb8"   >Create a RESTful web service with Spring Boot</a>.</p></li><li class="list__item" id="getting-started.md-2a4828af" ><p><a href="https://spring.io/guides/tutorials/spring-boot-kotlin/" id="getting-started.md-e43f0a1f"   data-external="true" rel="noopener noreferrer" >Build web applications with Spring Boot and Kotlin</a>.</p></li><li class="list__item" id="getting-started.md-409a3543" ><p><a href="https://spring.io/guides/tutorials/spring-webflux-kotlin-rsocket/" id="getting-started.md-cb01be20"   data-external="true" rel="noopener noreferrer" >Use Spring Boot with Kotlin and RSocket</a>.</p></li></ul></td><td id="getting-started.md-c37b875a"    width="50%">A lightweight framework for those who value freedom in making architectural decisions. <ul class="list _ul" id="getting-started.md-eca0ba1d"   ><li class="list__item" id="getting-started.md-85e7d061" ><p><a href="https://play.kotlinlang.org/hands-on/Creating%20HTTP%20APIs%20with%20Ktor/01_introduction" id="getting-started.md-d0d52790"   data-external="true" rel="noopener noreferrer" >Create HTTP APIs with Ktor</a>.</p></li><li class="list__item" id="getting-started.md-d05b4aab" ><p><a href="https://play.kotlinlang.org/hands-on/Creating%20a%20WebSocket%20Chat%20with%20Ktor/01_introduction" id="getting-started.md-3a4e2317"   data-external="true" rel="noopener noreferrer" >Create a WebSocket chat with Ktor</a>.</p></li><li class="list__item" id="getting-started.md-89a6df6a" ><p><a href="https://play.kotlinlang.org/hands-on/Creating%20a%20website%20with%20Ktor/01_introduction" id="getting-started.md-52d8a09d"   data-external="true" rel="noopener noreferrer" >Create an interactive website with Ktor</a>.</p></li><li class="list__item" id="getting-started.md-d5db4b75" ><p><a href="https://dev.to/kotlin/publishing-server-side-kotlin-applications-ktor-on-heroku-2ce4" id="getting-started.md-6aa12e20"   data-external="true" rel="noopener noreferrer" >Publish server-side Kotlin applications: Ktor on Heroku</a>.</p></li></ul></td></tr></tbody ></table ></div></li><li class="list__item" id="getting-started.md-5e771b71" ><p id="getting-started.md-624f720" ><b id="getting-started.md-ca489f1c" class=""  >Use Kotlin and third-party libraries in your application:</b></p><ul class="list _ul" id="getting-started.md-d7ea40c6"   ><li class="list__item" id="getting-started.md-7fa7acc8" ><p>The <a href="https://kotlinlang.org/api/latest/jvm/stdlib/" id="getting-started.md-3620f73a"   data-external="true" rel="noopener noreferrer" >Kotlin standard library</a> offers a lot of useful things such as <a href="#collections-overview.md" id="getting-started.md-7b58947"   >collections</a> or <span id="b67ddebe">${linkTitle}</span>.</p></li><li class="list__item" id="getting-started.md-aa6e55d7" ><p>Take a look at the following <a href="https://blog.jetbrains.com/kotlin/2020/11/server-side-development-with-kotlin-frameworks-and-libraries/" id="getting-started.md-24e91f97"   data-external="true" rel="noopener noreferrer" >third-party frameworks, libs and tools for Kotlin</a>.</p></li></ul><aside data-type="tip" class="prompt" data-title="" id="getting-started.md-aac654d3" ><p id="getting-started.md-15c841c1" >Learn how to <a href="#gradle.md-configuring-dependencies" id="getting-started.md-abe5f72f"   >add library and tool dependencies to your project</a>.</p></aside></li><li class="list__item" id="getting-started.md-85c7d5f7" ><p id="getting-started.md-98be480a" ><b id="getting-started.md-4f280bb0" class=""  >Learn more about Kotlin for server-side:</b></p><ul class="list _ul" id="getting-started.md-8168c0de"   ><li class="list__item" id="getting-started.md-9d5ddfea" ><p><a href="#jvm-test-using-junit.md" id="getting-started.md-d9eb2814"   >How to write your first unit test</a>.</p></li><li class="list__item" id="getting-started.md-e4bf76fe" ><p><a href="#mixing-java-kotlin-intellij.md" id="getting-started.md-7d4ba504"   >How to mix Kotlin and Java code in your application</a>.</p></li></ul></li><li class="list__item" id="getting-started.md-a8ebff90" ><p id="getting-started.md-46d323da" ><b id="getting-started.md-480ffad" class=""  >Join the Kotlin server-side community:</b></p><ul class="list _ul" id="getting-started.md-35bfdafb"   ><li class="list__item" id="getting-started.md-dccd2e7f" ><p><img alt="Slack" title="Slack" id="getting-started.md-b9831484" src="images/slack.svg"  class="inline-icon-25" width="25" height="25" /> Slack: <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" id="getting-started.md-bb7da94e"   data-external="true" rel="noopener noreferrer" >get an invite</a> and join the <a href="https://kotlinlang.slack.com/archives/C0B8MA7FA" id="getting-started.md-c445dfa6"   data-external="true" rel="noopener noreferrer" >#getting-started</a>, <a href="https://kotlinlang.slack.com/archives/C0B8RC352" id="getting-started.md-6c63f64e"   data-external="true" rel="noopener noreferrer" >#server</a>, <a href="https://kotlinlang.slack.com/archives/C0B8ZTWE4" id="getting-started.md-b6df1d18"   data-external="true" rel="noopener noreferrer" >#spring</a>, or <a href="https://kotlinlang.slack.com/archives/C0A974TJ9" id="getting-started.md-db980c5a"   data-external="true" rel="noopener noreferrer" >#ktor</a> channels.</p></li><li class="list__item" id="getting-started.md-57fdd214" ><p><img alt="StackOverflow" title="StackOverflow" id="getting-started.md-6aabecc3" src="images/stackoverflow.svg"  class="inline-icon-25" width="25" height="25" /> StackOverflow: subscribe to the <a href="https://stackoverflow.com/questions/tagged/kotlin" id="getting-started.md-f128a7c1"   data-external="true" rel="noopener noreferrer" >“kotlin”</a>, <a href="https://stackoverflow.com/questions/tagged/spring-kotlin" id="getting-started.md-5c1f776c"   data-external="true" rel="noopener noreferrer" >&quot;spring-kotlin&quot;</a>, or <a href="https://stackoverflow.com/questions/tagged/ktor" id="getting-started.md-62527b52"   data-external="true" rel="noopener noreferrer" >&quot;ktor&quot;</a> tags.</p></li></ul></li><li class="list__item" id="getting-started.md-9e929946" ><p id="getting-started.md-f6c40b53" ><b id="getting-started.md-83c5d117" class=""  >Follow Kotlin</b> on <img alt="Twitter" title="Twitter" id="getting-started.md-fba883b9" src="images/twitter.svg"  class="inline-icon-25" width="25" height="25" /> <a href="https://twitter.com/kotlin" id="getting-started.md-da385da2"   data-external="true" rel="noopener noreferrer" >Twitter</a>, <img alt="Reddit" title="Reddit" id="getting-started.md-38b9d5c5" src="images/reddit.svg"  class="inline-icon-25" width="25" height="25" /> <a href="https://www.reddit.com/r/Kotlin/" id="getting-started.md-7befc4c0"   data-external="true" rel="noopener noreferrer" >Reddit</a>, and <img alt="YouTube" title="YouTube" id="getting-started.md-761b5de" src="images/youtube.svg"  class="inline-icon-25" width="25" height="25" /> <a href="https://www.youtube.com/channel/UCP7uiEZIqci43m22KDl0sNw" id="getting-started.md-27f90a8b"   data-external="true" rel="noopener noreferrer" >Youtube</a>, and don\'t miss any important ecosystem updates.</p></li></ol><p id="getting-started.md-cc0e0116" >If you\'ve encountered any difficulties or problems, report an issue to our <a href="https://youtrack.jetbrains.com/issues/KT" id="getting-started.md-c6b9ca74"   data-external="true" rel="noopener noreferrer" >issue tracker</a>.</p></div><div class="tabs__content" data-gtm="tab" id="getting-started.md-2c9eabd2"  data-title="Cross-platform mobile app" ><p id="getting-started.md-f24d033b" >Here you\'ll learn how to develop and improve your cross-platform mobile application using <a href="https://kotlinlang.org/lp/mobile/" id="getting-started.md-3bac8bd1"   data-external="true" rel="noopener noreferrer" >Kotlin Multiplatform Mobile (KMM)</a>.</p><ol class="list _decimal" id="getting-started.md-e989d2f6"   ><li class="list__item" id="getting-started.md-671ac22d" ><p id="getting-started.md-215b451a" ><b id="getting-started.md-df88857d" class=""  ><a href="https://kotlinlang.org/docs/mobile/setup.html" id="getting-started.md-c12f40e"   data-external="true" rel="noopener noreferrer" >Set up your environment for cross-platform development</a>.</b></p></li><li class="list__item" id="getting-started.md-3b0ab056" ><p id="getting-started.md-364ad03f" ><b id="getting-started.md-3ead9256" class=""  >Create your first KMM application:</b></p><ul class="list _ul" id="getting-started.md-6e5d8a34"   ><li class="list__item" id="getting-started.md-a6e371d6" ><p>To start from scratch, <a href="https://kotlinlang.org/docs/mobile/create-first-app.html" id="getting-started.md-7f4785aa"   data-external="true" rel="noopener noreferrer" >create a basic KMM application with the project wizard</a>.</p></li><li class="list__item" id="getting-started.md-b8c98f8a" ><p>If you have an existing Android application and want to make it cross-platform, complete the <a href="https://kotlinlang.org/docs/mobile/integrate-in-existing-app.html" id="getting-started.md-cf1f34b6"   data-external="true" rel="noopener noreferrer" >Make your Android application work on iOS</a> tutorial.</p></li><li class="list__item" id="getting-started.md-d656e9a1" ><p>If you prefer real-life examples, clone and play with an existing project, for example the networking and data storage project from the <a href="https://play.kotlinlang.org/hands-on/Networking%20and%20Data%20Storage%20with%20Kotlin%20Multiplatfrom%20Mobile/01_Introduction" id="getting-started.md-a60de2d6"   data-external="true" rel="noopener noreferrer" >hands-on tutorial</a> or any <a href="https://kotlinlang.org/docs/mobile/samples.html" id="getting-started.md-ea4594d4"   data-external="true" rel="noopener noreferrer" >KMM sample</a>.</p></li></ul></li><li class="list__item" id="getting-started.md-3335aa39" ><p id="getting-started.md-a4beabfc" ><b id="getting-started.md-d363cac1" class=""  >Use a wide set of multiplatform libraries</b> to implement the required business logic only once in the shared module. Learn more about <a href="https://kotlinlang.org/docs/mobile/add-dependencies.html" id="getting-started.md-5c17ab2d"   data-external="true" rel="noopener noreferrer" >adding dependencies</a>.</p><div class="table-wrapper" ><table class=" wide" id="getting-started.md-db48798b"  ><thead><tr class="ijRowHead" id="getting-started.md-48479964" ><th id="getting-started.md-40025104"    >Library</th><th id="getting-started.md-d2323c4d"    >Details</th></tr></thead><tbody ><tr class="" id="getting-started.md-d1c1cd4" ><td id="getting-started.md-7981c3ae"    >Ktor</td><td id="getting-started.md-c9e8a223"    ><a href="https://ktor.io/" id="getting-started.md-61fc7671"   data-external="true" rel="noopener noreferrer" >Docs</a> and <a href="https://kotlinlang.org/docs/mobile/use-ktor-for-networking.html" id="getting-started.md-bf268c0a"   data-external="true" rel="noopener noreferrer" >sample</a>.</td></tr><tr class="" id="getting-started.md-9827016f" ><td id="getting-started.md-9d849d26"    >Serialization</td><td id="getting-started.md-df06a85f"    ><a href="#serialization.md" id="getting-started.md-37b602aa"   >Docs</a> and <a href="https://play.kotlinlang.org/hands-on/Networking%20and%20Data%20Storage%20with%20Kotlin%20Multiplatfrom%20Mobile/04_Creating_a_data_model" id="getting-started.md-9e2cd39d"   data-external="true" rel="noopener noreferrer" >sample</a>.</td></tr><tr class="" id="getting-started.md-b3d2f268" ><td id="getting-started.md-add9d9a7"    >Coroutines</td><td id="getting-started.md-a8d1eca4"    ><a href="https://kotlinlang.org/docs/mobile/concurrency-overview.html" id="getting-started.md-9c5c8176"   data-external="true" rel="noopener noreferrer" >Docs</a> and <a href="https://kotlinlang.org/docs/mobile/concurrency-and-coroutines.html" id="getting-started.md-f661dbae"   data-external="true" rel="noopener noreferrer" >sample</a>.</td></tr><tr class="" id="getting-started.md-94f2232a" ><td id="getting-started.md-28092e96"    >DateTime</td><td id="getting-started.md-39f68ea0"    ><a href="https://github.com/Kotlin/kotlinx-datetime#readme" id="getting-started.md-953ec17b"   data-external="true" rel="noopener noreferrer" >Docs</a>.</td></tr><tr class="" id="getting-started.md-16e78be0" ><td id="getting-started.md-44e03d3d"    >SQLDelight</td><td id="getting-started.md-e194ef91"    >Third-party library. <a href="https://cashapp.github.io/sqldelight/" id="getting-started.md-628861a1"   data-external="true" rel="noopener noreferrer" >Docs</a> and <a href="https://kotlinlang.org/docs/mobile/configure-sqldelight-for-data-storage.html" id="getting-started.md-a6c16dd5"   data-external="true" rel="noopener noreferrer" >sample</a>.</td></tr></tbody ></table ></div><aside data-type="tip" class="prompt" data-title="" id="getting-started.md-d4c4b827" ><p id="getting-started.md-2ad1a030" >You can also find a multiplatform library in the <a href="https://libs.kmp.icerock.dev/" id="getting-started.md-90e44b1b"   data-external="true" rel="noopener noreferrer" >community-driven list</a>.</p></aside></li><li class="list__item" id="getting-started.md-4caca773" ><p id="getting-started.md-27937bad" ><b id="getting-started.md-d06d80bc" class=""  >Learn more about KMM:</b></p><ul class="list _ul" id="getting-started.md-c6afc31a"   ><li class="list__item" id="getting-started.md-460d1d07" ><p>Learn more about <a href="#mpp-intro.md" id="getting-started.md-c7195e20"   >Kotlin Multiplatform</a>.</p></li><li class="list__item" id="getting-started.md-680d9ced" ><p>Look through <a href="https://kotlinlang.org/docs/mobile/samples.html" id="getting-started.md-34b1675d"   data-external="true" rel="noopener noreferrer" >KMM samples on GitHub</a>.</p></li><li class="list__item" id="getting-started.md-c4674e7d" ><p><a href="#mpp-create-lib.md" id="getting-started.md-a5c60c42"   >Create and publish a multiplatform library</a>.</p></li><li class="list__item" id="getting-started.md-c9634158" ><p>Learn how KMM is used at <a href="https://netflixtechblog.com/netflix-android-and-ios-studio-apps-kotlin-multiplatform-d6d4d8d25d23" id="getting-started.md-f59221c5"   data-external="true" rel="noopener noreferrer" >Netflix</a>, <a href="https://kotlinlang.org/lp/mobile/case-studies/vmware/" id="getting-started.md-2327056e"   data-external="true" rel="noopener noreferrer" >VWWare</a>, <a href="https://kotlinlang.org/lp/mobile/case-studies/yandex/" id="getting-started.md-684bb8f8"   data-external="true" rel="noopener noreferrer" >Yandex</a>, and <a href="https://kotlinlang.org/lp/mobile/case-studies/" id="getting-started.md-f0f58317"   data-external="true" rel="noopener noreferrer" >many other companies</a>.</p></li></ul></li><li class="list__item" id="getting-started.md-f8444860" ><p id="getting-started.md-f0b94128" ><b id="getting-started.md-f9145f5c" class=""  >Join the Kotlin Multiplatform community:</b></p><ul class="list _ul" id="getting-started.md-d7702ef0"   ><li class="list__item" id="getting-started.md-30868c06" ><p><img alt="Slack" title="Slack" id="getting-started.md-2f6e9a11" src="images/slack.svg"  class="inline-icon-25" width="25" height="25" /> Slack: <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" id="getting-started.md-6a5d943c"   data-external="true" rel="noopener noreferrer" >get an invite</a> and join the <a href="https://kotlinlang.slack.com/archives/C0B8MA7FA" id="getting-started.md-65091da8"   data-external="true" rel="noopener noreferrer" >#getting-started</a> and <a href="https://kotlinlang.slack.com/archives/C3PQML5NU" id="getting-started.md-6890cb64"   data-external="true" rel="noopener noreferrer" >#multiplatform</a> channels.</p></li><li class="list__item" id="getting-started.md-941480df" ><p><img alt="StackOverflow" title="StackOverflow" id="getting-started.md-df167620" src="images/stackoverflow.svg"  class="inline-icon-25" width="25" height="25" /> StackOverflow: Subscribe to the <a href="https://stackoverflow.com/questions/tagged/kotlin-multiplatform" id="getting-started.md-f98b83b"   data-external="true" rel="noopener noreferrer" >“kotlin-multiplatform” tag</a>.</p></li></ul></li><li class="list__item" id="getting-started.md-143515c6" ><p id="getting-started.md-769b387b" ><b id="getting-started.md-9b6a3d58" class=""  >Follow Kotlin</b> on <img alt="Twitter" title="Twitter" id="getting-started.md-46bc4381" src="images/twitter.svg"  class="inline-icon-25" width="25" height="25" /> <a href="https://twitter.com/kotlin" id="getting-started.md-138dcb15"   data-external="true" rel="noopener noreferrer" >Twitter</a>, <img alt="Reddit" title="Reddit" id="getting-started.md-5cbe47cf" src="images/reddit.svg"  class="inline-icon-25" width="25" height="25" /> <a href="https://www.reddit.com/r/Kotlin/" id="getting-started.md-2ef45cb7"   data-external="true" rel="noopener noreferrer" >Reddit</a>, and <img alt="YouTube" title="YouTube" id="getting-started.md-6bef6579" src="images/youtube.svg"  class="inline-icon-25" width="25" height="25" /> <a href="https://www.youtube.com/channel/UCP7uiEZIqci43m22KDl0sNw" id="getting-started.md-c093933"   data-external="true" rel="noopener noreferrer" >Youtube</a>, and don\'t miss any important ecosystem updates.</p></li></ol><p id="getting-started.md-244ea450" >If you\'ve encountered any difficulties or problems, report an issue to our <a href="https://youtrack.jetbrains.com/issues/KT" id="getting-started.md-4c67a55"   data-external="true" rel="noopener noreferrer" >issue tracker</a>.</p></div><div class="tabs__content" data-gtm="tab" id="getting-started.md-25d0732e"  data-title="Frontend web app" ><p id="getting-started.md-b3de284e" >Kotlin provides an ability to transpile your Kotlin code, the Kotlin standard library, and any compatible dependencies to JavaScript.</p><p id="getting-started.md-fe450fa4" >Here you\'ll learn how to develop and improve your frontend web application using <a href="#js-overview.md" id="getting-started.md-75d10e9f"   >Kotlin/JS</a>.</p><ol class="list _decimal" id="getting-started.md-46f0cdbd"   ><li class="list__item" id="getting-started.md-79d407f2" ><p id="getting-started.md-178aee1b" ><b id="getting-started.md-e051906a" class=""  >Install the <a href="http://www.jetbrains.com/idea/download/index.html" id="getting-started.md-607b3326"   data-external="true" rel="noopener noreferrer" >latest version of IntelliJ IDEA</a>.</b></p></li><li class="list__item" id="getting-started.md-66a05ceb" ><p id="getting-started.md-8386f9eb" ><b id="getting-started.md-ac7ecb61" class=""  >Create your first frontend web application:</b></p><ul class="list _ul" id="getting-started.md-d465a161"   ><li class="list__item" id="getting-started.md-162217db" ><p>To start from scratch, <a href="#js-project-setup.md" id="getting-started.md-aa37fb7"   >create a basic browser application with the IntelliJ IDEA project wizard</a>.</p></li><li class="list__item" id="getting-started.md-1f43532b" ><p>If you prefer more robust examples, complete the <a href="https://play.kotlinlang.org/hands-on/Building%20Web%20Applications%20with%20React%20and%20Kotlin%20JS/01_Introduction" id="getting-started.md-1f5e7db"   data-external="true" rel="noopener noreferrer" >Building Web Applications with React and Kotlin/JS</a> hands-on tutorial. It includes a sample project that can serve as a good starting point for your own projects, and contains useful snippets and templates.</p></li></ul></li><li class="list__item" id="getting-started.md-fccf245a" ><p id="getting-started.md-7ff4e939" ><b id="getting-started.md-97a63d30" class=""  >Use libraries in your application.</b> Learn more about <a href="#js-project-setup.md-dependencies" id="getting-started.md-9eb42de4"   >adding dependencies</a>.</p><div class="table-wrapper" ><table class=" wide" id="getting-started.md-b996e4a2"  ><thead><tr class="ijRowHead" id="getting-started.md-3defe8c2" ><th id="getting-started.md-30fa9de6"    >Library</th><th id="getting-started.md-d2743480"    >Details</th></tr></thead><tbody ><tr class="" id="getting-started.md-6022d175" ><td id="getting-started.md-f1c4654a"    ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/" id="getting-started.md-3200552"   data-external="true" rel="noopener noreferrer" >stdlib</a></td><td id="getting-started.md-c458f2a1"    >The Kotlin standard library included in all projects by default.</td></tr><tr class="" id="getting-started.md-d9a6b43e" ><td id="getting-started.md-b97293c8"    ><a href="#browser-api-dom.md" id="getting-started.md-17afbfcd"   >kotlinx.browser</a></td><td id="getting-started.md-53f94099"    >The Kotlin library for accessing browser-specific functionality, including typical top-level objects such as document and window.</td></tr><tr class="" id="getting-started.md-5277df76" ><td id="getting-started.md-5e07d1c4"    ><a href="#typesafe-html-dsl.md" id="getting-started.md-bab6df0b"   >kotlinx.html</a></td><td id="getting-started.md-645f46c9"    >The Kotlin library for generating DOM elements using statically-typed HTML builders.</td></tr><tr class="" id="getting-started.md-cc350949" ><td id="getting-started.md-24361529"    ><a href="https://ktor.io/" id="getting-started.md-49194f59"   data-external="true" rel="noopener noreferrer" >Ktor</a></td><td id="getting-started.md-5403a39e"    >The Kotlin multiplatform library for networking.</td></tr><tr class="" id="getting-started.md-6cbeac78" ><td id="getting-started.md-9d52055f"    ><a href="https://kvision.io/" id="getting-started.md-edba7d25"   data-external="true" rel="noopener noreferrer" >KVision</a></td><td id="getting-started.md-19807cbe"    >A third-party object-oriented web framework for Kotlin/JS.</td></tr><tr class="" id="getting-started.md-8bda1380" ><td id="getting-started.md-6ef11199"    ><a href="https://www.fritz2.dev/" id="getting-started.md-154c4ec3"   data-external="true" rel="noopener noreferrer" >fritz2</a></td><td id="getting-started.md-bfc7ef7d"    >A third-party lightweight, high-performance, independent library for building reactive web apps in Kotlin that are heavily dependent on coroutines and flows.</td></tr><tr class="" id="getting-started.md-c25771fc" ><td id="getting-started.md-2122186b"    ><a href="https://github.com/JetBrains/kotlin-wrappers" id="getting-started.md-f76d766e"   data-external="true" rel="noopener noreferrer" >kotlin-wrappers</a></td><td id="getting-started.md-196c9495"    >Provide convenient abstractions and deep integrations for one of the most popular JavaScript frameworks. Kotlin wrappers also provide support for a number of adjacent technologies like <code class="code " id="getting-started.md-e835b047"  >react-redux</code>, <code class="code " id="getting-started.md-6fd0749e"  >react-router</code>, or <code class="code " id="getting-started.md-e6cc608c"  >styled-components</code>.</td></tr></tbody ></table ></div></li><li class="list__item" id="getting-started.md-e0420b16" ><p id="getting-started.md-79c4cd65" ><b id="getting-started.md-348a8347" class=""  >Learn more about Kotlin for frontend web development:</b></p><ul class="list _ul" id="getting-started.md-29944235"   ><li class="list__item" id="getting-started.md-b086be9b" ><p>The <a href="#js-ir-compiler.md" id="getting-started.md-e071fb23"   >new Kotlin/JS IR compiler</a> (currently with <a href="#components-stability.md" id="getting-started.md-efe1f716"   >Alpha</a> stability).</p></li><li class="list__item" id="getting-started.md-abbe0bf6" ><p><a href="#using-packages-from-npm.md" id="getting-started.md-74275cbe"   >Using dependencies from npm</a>.</p></li><li class="list__item" id="getting-started.md-98f6d87c" ><p><a href="#js-to-kotlin-interop.md" id="getting-started.md-62d8ceb"   >Using Kotlin code from JavaScript</a>.</p></li></ul></li><li class="list__item" id="getting-started.md-5a09af78" ><p id="getting-started.md-b63744d1" ><b id="getting-started.md-a6bfadcd" class=""  >Join the Kotlin frontend web community:</b></p><ul class="list _ul" id="getting-started.md-e5a3788d"   ><li class="list__item" id="getting-started.md-689a5e16" ><p><img alt="Slack" title="Slack" id="getting-started.md-abd28fcd" src="images/slack.svg"  class="inline-icon-25" width="25" height="25" /> Slack: <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" id="getting-started.md-c8576e3d"   data-external="true" rel="noopener noreferrer" >get an invite</a> and join the <a href="https://kotlinlang.slack.com/archives/C0B8MA7FA" id="getting-started.md-7fd8f5ae"   data-external="true" rel="noopener noreferrer" >#getting-started</a> and <a href="https://kotlinlang.slack.com/archives/C0B8L3U69" id="getting-started.md-46d1188"   data-external="true" rel="noopener noreferrer" >#javascript</a> channels.</p></li><li class="list__item" id="getting-started.md-911aa9ac" ><p><img alt="StackOverflow" title="StackOverflow" id="getting-started.md-9cf69eb3" src="images/stackoverflow.svg"  class="inline-icon-25" width="25" height="25" /> StackOverflow: subscribe to the <a href="https://stackoverflow.com/questions/tagged/kotlin-js" id="getting-started.md-1503c4bd"   data-external="true" rel="noopener noreferrer" >“kotlin-js” tag</a>.</p></li></ul></li><li class="list__item" id="getting-started.md-6d73b4ac" ><p id="getting-started.md-2c81797d" ><b id="getting-started.md-9b0d1ec" class=""  >Follow Kotlin</b> on <img alt="Twitter" title="Twitter" id="getting-started.md-d114bbde" src="images/twitter.svg"  class="inline-icon-25" width="25" height="25" /> <a href="https://twitter.com/kotlin" id="getting-started.md-32e9095f"   data-external="true" rel="noopener noreferrer" >Twitter</a>, <img alt="Reddit" title="Reddit" id="getting-started.md-efad0adc" src="images/reddit.svg"  class="inline-icon-25" width="25" height="25" /> <a href="https://www.reddit.com/r/Kotlin/" id="getting-started.md-a5e9ec1a"   data-external="true" rel="noopener noreferrer" >Reddit</a>, and <img alt="YouTube" title="YouTube" id="getting-started.md-f587c41a" src="images/youtube.svg"  class="inline-icon-25" width="25" height="25" /> <a href="https://www.youtube.com/channel/UCP7uiEZIqci43m22KDl0sNw" id="getting-started.md-4577ba5e"   data-external="true" rel="noopener noreferrer" >Youtube</a>, and don\'t miss any important ecosystem updates.</p></li></ol><p id="getting-started.md-c29492e6" >If you\'ve encountered any difficulties or problems, report an issue to our <a href="https://youtrack.jetbrains.com/issues/KT" id="getting-started.md-a727976b"   data-external="true" rel="noopener noreferrer" >issue tracker</a>.</p></div><div class="tabs__content" data-gtm="tab" id="getting-started.md-d8af21a9"  data-title="Android app" ><ul class="list _ul" id="getting-started.md-6798cf8d"   ><li class="list__item" id="getting-started.md-f40b67d0" ><p id="getting-started.md-28cb55c6" >If you want to start using Kotlin for Android development, read <a href="https://developer.android.com/kotlin/get-started" id="getting-started.md-59cb6842"   data-external="true" rel="noopener noreferrer" >Google’s recommendation for getting started with Kotlin on Android</a>.</p></li><li class="list__item" id="getting-started.md-6028dbee" ><p id="getting-started.md-992d435" >If you\'re new to Android and want to learn to create applications with Kotlin, check out <a href="https://www.udacity.com/course/developing-android-apps-with-kotlin--ud9012" id="getting-started.md-d1b420d"   data-external="true" rel="noopener noreferrer" >this Udacity course</a>.</p></li></ul><p id="getting-started.md-97cdb78a" >Follow Kotlin on <img alt="Twitter" title="Twitter" id="getting-started.md-73c7a462" src="images/twitter.svg"  class="inline-icon-25" width="25" height="25" /> <a href="https://twitter.com/kotlin" id="getting-started.md-a5a64425"   data-external="true" rel="noopener noreferrer" >Twitter</a>, <img alt="Reddit" title="Reddit" id="getting-started.md-76f5da9d" src="images/reddit.svg"  class="inline-icon-25" width="25" height="25" /> <a href="https://www.reddit.com/r/Kotlin/" id="getting-started.md-4938b696"   data-external="true" rel="noopener noreferrer" >Reddit</a>, and <img alt="YouTube" title="YouTube" id="getting-started.md-f31d0b13" src="images/youtube.svg"  class="inline-icon-25" width="25" height="25" /> <a href="https://www.youtube.com/channel/UCP7uiEZIqci43m22KDl0sNw" id="getting-started.md-426b49a7"   data-external="true" rel="noopener noreferrer" >Youtube</a>, and don\'t miss any important ecosystem updates.</p></div></div></p></section><section class="chapter"  ><h2 id="getting-started.md-is-anything-missing" data-toc="getting-started#getting-started.md-is-anything-missing"  >Is anything missing?</h2><p id="getting-started.md-9f24bcd5" >If anything is missing or seems confusing on this page, please <a href="https://surveys.hotjar.com/d82e82b0-00d9-44a7-b793-0611bf6189df" id="getting-started.md-95525ff"   data-external="true" rel="noopener noreferrer" >share your feedback</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="multiplatform.md"  >Multiplatform programming</h1><aside data-type="note" class="prompt" data-title="" id="multiplatform.md-cae042e8" ><p id="multiplatform.md-9a25f29b" >Multiplatform projects are in <a href="#components-stability.md" id="multiplatform.md-d436b07"   >Alpha</a>. Language features and tooling may change in future Kotlin versions.</p></aside><p id="multiplatform.md-788557ec" >Support for multiplatform programming is one of Kotlin’s key benefits. It reduces time spent writing and maintaining the same code for <a href="#mpp-supported-platforms.md" id="multiplatform.md-8d4a19e6"   >different platforms</a> while retaining the flexibility and benefits of native programming.</p><p id="multiplatform.md-591e69d5" >This is how Kotlin Multiplatform works.</p><p id="multiplatform.md-4e4609f1" ><figure title="Kotlin Multiplatform"><img alt="Kotlin Multiplatform" title="Kotlin Multiplatform" id="multiplatform.md-8b929a70" src="images/kotlin-multiplatform.png"  class="" width="500" height="505" /></figure></p><ul class="list _ul" id="multiplatform.md-b02c147c"   ><li class="list__item" id="multiplatform.md-a4a4bc80" ><p><b id="multiplatform.md-74aacdf4" class=""  >Common Kotlin</b> includes the language, core libraries, and basic tools. Code written in common Kotlin works everywhere on all platforms.</p></li><li class="list__item" id="multiplatform.md-2c1e6200" ><p>With Kotlin Multiplatform libraries, you can reuse the multiplatform logic in common and platform-specific code. Common code can rely on a set of libraries that cover everyday tasks such as <a href="http://ktor.io/clients/http-client/multiplatform.html" id="multiplatform.md-8822b768"   data-external="true" rel="noopener noreferrer" >HTTP</a>, <a href="https://github.com/Kotlin/kotlinx.serialization" id="multiplatform.md-f2d482ee"   data-external="true" rel="noopener noreferrer" >serialization</a>, and <a href="https://github.com/Kotlin/kotlinx.coroutines" id="multiplatform.md-86011cab"   data-external="true" rel="noopener noreferrer" >managing coroutines</a>.</p></li><li class="list__item" id="multiplatform.md-cf16513e" ><p>To interop with platforms, use platform-specific versions of Kotlin. <b id="multiplatform.md-3472adbe" class=""  >Platform-specific versions of Kotlin</b> (Kotlin/JVM, Kotlin/JS, Kotlin/Native) include extensions to the Kotlin language, and platform-specific libraries and tools.</p></li><li class="list__item" id="multiplatform.md-7e5d0acd" ><p>Through these platforms you can access the <b id="multiplatform.md-af7844d2" class=""  >platform native code</b> (JVM, JS, and Native) and leverage all native capabilities.</p></li></ul><p id="multiplatform.md-24447df0" >With Kotlin Multiplatform, spend less time on writing and maintaining the same code for <a href="#mpp-supported-platforms.md" id="multiplatform.md-493548c1"   >different platforms</a> – just share it using the mechanisms Kotlin provides:</p><ul class="list _ul" id="multiplatform.md-8fdcbdc4"   ><li class="list__item" id="multiplatform.md-2e1a36b3" ><p id="multiplatform.md-5733a4d8" ><a href="#mpp-share-on-platforms.md-share-code-on-all-platforms" id="multiplatform.md-ee759911"   >Share code among all platforms used in your project</a>. Use it for sharing the common business logic that applies to all platforms.</p><p id="multiplatform.md-aba12aae" ><figure title="Code shared for all platforms"><img alt="Code shared for all platforms" title="Code shared for all platforms" id="multiplatform.md-fb2c1344" src="images/flat-structure.png"  class="" width="2322" height="992" /></figure></p></li><li class="list__item" id="multiplatform.md-fa085453" ><p id="multiplatform.md-377e483f" ><a href="#mpp-share-on-platforms.md-share-code-on-similar-platforms" id="multiplatform.md-c3af822a"   >Share code among some platforms</a> included in your project but not all. Do this when you can reuse much of the code in similar platforms.</p><p id="multiplatform.md-96b574cb" ><figure title="Hierarchical structure"><img alt="Hierarchical structure" title="Hierarchical structure" id="multiplatform.md-8828456c" src="images/hierarchical-structure.png"  class="" width="1328" height="796" /></figure></p></li></ul><p id="multiplatform.md-c2316dd1" >If you need to access platform-specific APIs from the shared code, use the Kotlin mechanism of <a href="#mpp-connect-to-apis.md" id="multiplatform.md-f335f73"   >expected and actual declarations</a>.</p><p id="multiplatform.md-8bf13e7b" >With this mechanism, a common source set defines an <em id="multiplatform.md-73416b45" class=""  >expected declaration</em>, and platform source sets must provide the <em id="multiplatform.md-9bea9164" class=""  >actual declaration</em> that corresponds to the expected declaration. This works for most Kotlin declarations, such as functions, classes, interfaces, enumerations, properties, and annotations.</p><p id="multiplatform.md-3522a9a2" ><figure title="Expect and actual declarations"><img alt="Expect and actual declarations" title="Expect and actual declarations" id="multiplatform.md-1ced7efd" src="images/expect-actual.png"  class="" width="1336" height="720" /></figure></p><div class="code-block" data-lang="kotlin" id="multiplatform.md-e8cdf652"         >//Common\nexpect fun randomUUID(): String\n</div><div class="code-block" data-lang="kotlin" id="multiplatform.md-6461ae79"         >//Android\nimport java.util.*\nactual fun randomUUID() = UUID.randomUUID().toString()\n</div><div class="code-block" data-lang="kotlin" id="multiplatform.md-ff2b3b3"         >//iOS\nimport platform.Foundation.NSUUID\nactual fun randomUUID(): String = NSUUID().UUIDString()\n</div><section class="chapter"  ><h2 id="multiplatform.md-use-cases" data-toc="multiplatform#multiplatform.md-use-cases"  >Use cases</h2><section class="chapter"  ><h3 id="multiplatform.md-android-ios" data-toc="multiplatform#multiplatform.md-android-ios"  >Android — iOS</h3><p id="multiplatform.md-882b13ce" >Sharing code between mobile platforms is one of the major Kotlin Multiplatform use cases. With Kotlin Multiplatform Mobile (KMM), you can build multiplatform mobile applications sharing code, such as business logic, connectivity, and more, between Android and iOS.</p><p id="multiplatform.md-ffcc3dd2" >See <a href="https://kotlinlang.org/lp/mobile/" id="multiplatform.md-96bf5608"   data-external="true" rel="noopener noreferrer" >KMM features, case studies and examples</a></p></section><section class="chapter"  ><h3 id="multiplatform.md-client-server" data-toc="multiplatform#multiplatform.md-client-server"  >Client — Server</h3><p id="multiplatform.md-5911586a" >Another scenario when code sharing may bring benefits is a connected application where the logic can be reused on both the server and the client side running in the browser. This is covered by Kotlin Multiplatform as well.</p><p id="multiplatform.md-edd6bd12" >The <a href="https://ktor.io/" id="multiplatform.md-2f69df96"   data-external="true" rel="noopener noreferrer" >Ktor framework</a> is suitable for building asynchronous servers and clients in connected systems.</p></section></section><section class="chapter"  ><h2 id="multiplatform.md-what-s-next" data-toc="multiplatform#multiplatform.md-what-s-next"  >What\'s next?</h2><p id="multiplatform.md-398762ec" >New to Kotlin? Visit <a href="#getting-started.md" id="multiplatform.md-ae4c27d1"   >Getting started with Kotlin</a>.</p><section class="chapter"  ><h3 id="multiplatform.md-documentation" data-toc="multiplatform#multiplatform.md-documentation"  >Documentation</h3><ul class="list _ul" id="multiplatform.md-6c17097b"   ><li class="list__item" id="multiplatform.md-72de5f42" ><a href="https://kotlinlang.org/docs/mobile/getting-started.html" id="multiplatform.md-24b925a6"   data-external="true" rel="noopener noreferrer" >Get started with Kotlin Multiplatform Mobile (KMM)</a></li><li class="list__item" id="multiplatform.md-a4199c7a" ><a href="#mpp-create-lib.md" id="multiplatform.md-154f87ea"   >Create a multiplatform project</a></li><li class="list__item" id="multiplatform.md-1bd799fd" ><a href="#mpp-share-on-platforms.md" id="multiplatform.md-eb288abe"   >Share code on multiple platforms</a></li><li class="list__item" id="multiplatform.md-814ff34c" ><a href="#mpp-connect-to-apis.md" id="multiplatform.md-561615db"   >Connect to platform-specific APIs</a></li></ul></section><section class="chapter"  ><h3 id="multiplatform.md-tutorials" data-toc="multiplatform#multiplatform.md-tutorials"  >Tutorials</h3><ul class="list _ul" id="multiplatform.md-64c6d3cc"   ><li class="list__item" id="multiplatform.md-36c71727" ><p id="multiplatform.md-1aa3fe83" ><a href="https://kotlinlang.org/docs/mobile/create-first-app.html" id="multiplatform.md-339f5f3d"   data-external="true" rel="noopener noreferrer" >Creating a KMM application</a> shows how to create a mobile application that works on Android and iOS with the help of the <a href="https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform-mobile" id="multiplatform.md-cb2e1a3e"   data-external="true" rel="noopener noreferrer" >KMM plugin for Android Studio</a>. Create, run, and test your first multiplatform mobile application.</p></li><li class="list__item" id="multiplatform.md-632a2805" ><p id="multiplatform.md-a2b27a10" ><a href="#multiplatform-library.md" id="multiplatform.md-c81833f"   >Creating a multiplatform Kotlin library</a> teaches how to create a multiplatform library available for JVM, JS, and Native and which can be used from any other common code (for example, shared with Android and iOS). It also shows how to write tests which will be executed on all platforms and use an efficient implementation provided by a specific platform.</p></li><li class="list__item" id="multiplatform.md-c0676054" ><p id="multiplatform.md-f417d7ed" ><a href="https://play.kotlinlang.org/hands-on/Full%20Stack%20Web%20App%20with%20Kotlin%20Multiplatform/01_Introduction" id="multiplatform.md-4cf38a9a"   data-external="true" rel="noopener noreferrer" >Building a full stack web app with Kotlin Multiplatform</a> teaches the concepts behind building an application that targets Kotlin/JVM and Kotlin/JS by building a client-server application that makes use of shared code, serialization, and other multiplatform paradigms. It also provides a brief introduction to working with Ktor both as a server- and client-side framework.</p></li></ul></section></section><section class="chapter"  ><h2 id="multiplatform.md-sample-projects" data-toc="multiplatform#multiplatform.md-sample-projects"  >Sample projects</h2><ul class="list _ul" id="multiplatform.md-98e6d7b9"   ><li class="list__item" id="multiplatform.md-4e2ec101" ><a href="https://kotlinlang.org/docs/mobile/samples.html" id="multiplatform.md-73f9bf1f"   data-external="true" rel="noopener noreferrer" >Kotlin Multiplatform Mobile samples</a></li><li class="list__item" id="multiplatform.md-2316dcba" ><a href="https://github.com/JetBrains/kotlinconf-app" id="multiplatform.md-2cb8a8c6"   data-external="true" rel="noopener noreferrer" >KotlinConf app</a></li><li class="list__item" id="multiplatform.md-6321bb8e" ><a href="https://github.com/jetbrains/kotlinconf-spinner" id="multiplatform.md-3e6f9ca7"   data-external="true" rel="noopener noreferrer" >KotlinConf Spinner app</a></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="server-overview.md"  >Kotlin for server side</h1><p id="server-overview.md-67d5144f" >Kotlin is a great fit for developing server-side applications, allowing you to write concise and expressive code while maintaining full compatibility with existing Java-based technology stacks and a smooth learning curve:</p><ul class="list _ul" id="server-overview.md-8b884773"   ><li class="list__item" id="server-overview.md-b7615b6f" ><p><b id="server-overview.md-55bdeea1" class=""  >Expressiveness</b>: Kotlin\'s innovative language features, such as its support for <a href="#type-safe-builders.md" id="server-overview.md-4a077cb7"   >type-safe builders</a> and <a href="#delegated-properties.md" id="server-overview.md-af5890a"   >delegated properties</a>, help build powerful and easy-to-use abstractions.</p></li><li class="list__item" id="server-overview.md-345a6f72" ><p><b id="server-overview.md-dd2ddd0f" class=""  >Scalability</b>: Kotlin\'s support for <a href="#coroutines-overview.md" id="server-overview.md-73aa0c81"   >coroutines</a> helps build server-side applications that scale to massive numbers of clients with modest hardware requirements.</p></li><li class="list__item" id="server-overview.md-f8782317" ><p><b id="server-overview.md-52486dd8" class=""  >Interoperability</b>: Kotlin is fully compatible with all Java-based frameworks, which lets you stay on your familiar technology stack while reaping the benefits of a more modern language.</p></li><li class="list__item" id="server-overview.md-1c19f1c6" ><p><b id="server-overview.md-ea930127" class=""  >Migration</b>: Kotlin supports gradual, step by step migration of large codebases from Java to Kotlin. You can start writing new code in Kotlin while keeping older parts of your system in Java.</p></li><li class="list__item" id="server-overview.md-d4834df0" ><p><b id="server-overview.md-752a81f6" class=""  >Tooling</b>: In addition to great IDE support in general, Kotlin offers framework-specific tooling (for example, for Spring) in the plugin for IntelliJ IDEA Ultimate.</p></li><li class="list__item" id="server-overview.md-82f6d672" ><p><b id="server-overview.md-c9a4317f" class=""  >Learning Curve</b>: For a Java developer, getting started with Kotlin is very easy. The automated Java to Kotlin converter included in the Kotlin plugin helps with the first steps. <a href="#koans.md" id="server-overview.md-ece7ead8"   >Kotlin Koans</a> offer a guide through the key features of the language with a series of interactive exercises.</p></li></ul><section class="chapter"  ><h2 id="server-overview.md-frameworks-for-server-side-development-with-kotlin" data-toc="server-overview#server-overview.md-frameworks-for-server-side-development-with-kotlin"  >Frameworks for server-side development with Kotlin</h2><ul class="list _ul" id="server-overview.md-7b9d9fea"   ><li class="list__item" id="server-overview.md-573ffedd" ><p id="server-overview.md-67635c1f" ><a href="https://spring.io" id="server-overview.md-1ef44fd2"   data-external="true" rel="noopener noreferrer" >Spring</a> makes use of Kotlin\'s language features to offer <a href="https://spring.io/blog/2017/01/04/introducing-kotlin-support-in-spring-framework-5-0" id="server-overview.md-7075adf6"   data-external="true" rel="noopener noreferrer" >more concise APIs</a>, starting with version 5.0. The <a href="https://start.spring.io/#!language=kotlin" id="server-overview.md-72f4895a"   data-external="true" rel="noopener noreferrer" >online project generator</a> allows you to quickly generate a new project in Kotlin.</p></li><li class="list__item" id="server-overview.md-3cdbb353" ><p id="server-overview.md-9368a4db" ><a href="http://vertx.io" id="server-overview.md-dbbd817e"   data-external="true" rel="noopener noreferrer" >Vert.x</a>, a framework for building reactive Web applications on the JVM, offers <a href="https://github.com/vert-x3/vertx-lang-kotlin" id="server-overview.md-1e251836"   data-external="true" rel="noopener noreferrer" >dedicated support</a> for Kotlin, including <a href="http://vertx.io/docs/vertx-core/kotlin/" id="server-overview.md-4af20885"   data-external="true" rel="noopener noreferrer" >full documentation</a>.</p></li><li class="list__item" id="server-overview.md-d575ba78" ><p id="server-overview.md-b4094892" ><a href="https://github.com/kotlin/ktor" id="server-overview.md-fa7066ea"   data-external="true" rel="noopener noreferrer" >Ktor</a> is a framework built by JetBrains for creating Web applications in Kotlin, making use of coroutines for high scalability and offering an easy-to-use and idiomatic API.</p></li><li class="list__item" id="server-overview.md-8a4d5637" ><p id="server-overview.md-e144a998" ><a href="https://github.com/kotlin/kotlinx.html" id="server-overview.md-e674502d"   data-external="true" rel="noopener noreferrer" >kotlinx.html</a> is a DSL that can be used to build HTML in a Web application. It serves as an alternative to traditional templating systems such as JSP and FreeMarker.</p></li><li class="list__item" id="server-overview.md-5d928b82" ><p id="server-overview.md-74b3731d" ><a href="https://micronaut.io/" id="server-overview.md-38ca7212"   data-external="true" rel="noopener noreferrer" >Micronaut</a> is a modern, JVM-based, full-stack framework for building modular, easily testable microservice and serverless applications. It comes with a lot of built-in, handy features.</p></li><li class="list__item" id="server-overview.md-72342c65" ><p id="server-overview.md-3be64492" ><a href="https://http4k.org/" id="server-overview.md-7f107aff"   data-external="true" rel="noopener noreferrer" >http4k</a> is the functional toolkit with a tiny footprint for Kotlin HTTP applications, written in pure Kotlin. The library is based on the &quot;Your Server as a Function&quot; paper from Twitter and represents modeling both HTTP Servers and Clients as simple Kotlin functions that can be composed together.</p></li><li class="list__item" id="server-overview.md-eb5c7bb2" ><p id="server-overview.md-653ba5ef" ><a href="https://javalin.io" id="server-overview.md-88d8b266"   data-external="true" rel="noopener noreferrer" >Javalin</a> is a very lightweight web framework for Kotlin and Java which supports WebSockets, HTTP2 and async requests.</p></li><li class="list__item" id="server-overview.md-f71161e3" ><p id="server-overview.md-ade39495" >The available options for persistence include direct JDBC access, JPA, as well as using NoSQL databases through their Java drivers. For JPA, the <a href="#no-arg-plugin.md-jpa-support" id="server-overview.md-47e07be8"   >kotlin-jpa compiler plugin</a> adapts Kotlin-compiled classes to the requirements of the framework.</p></li></ul></section><section class="chapter"  ><h2 id="server-overview.md-deploying-kotlin-server-side-applications" data-toc="server-overview#server-overview.md-deploying-kotlin-server-side-applications"  >Deploying Kotlin server-side applications</h2><p id="server-overview.md-5d92f983" >Kotlin applications can be deployed into any host that supports Java Web applications, including Amazon Web Services, Google Cloud Platform and more.</p><p id="server-overview.md-507e8b33" >To deploy Kotlin applications on <a href="https://www.heroku.com" id="server-overview.md-9142ef7c"   data-external="true" rel="noopener noreferrer" >Heroku</a>, you can follow the <a href="https://devcenter.heroku.com/articles/getting-started-with-kotlin" id="server-overview.md-1d32156a"   data-external="true" rel="noopener noreferrer" >official Heroku tutorial</a>.</p><p id="server-overview.md-86460a2d" >AWS Labs provides a <a href="https://github.com/awslabs/serverless-photo-recognition" id="server-overview.md-251000b6"   data-external="true" rel="noopener noreferrer" >sample project</a> showing the use of Kotlin for writing <a href="https://aws.amazon.com/lambda/" id="server-overview.md-2f74fdd2"   data-external="true" rel="noopener noreferrer" >AWS Lambda</a> functions.</p><p id="server-overview.md-d89ed3fd" >Google Cloud Platform offers a series of tutorials for deploying Kotlin applications to GCP, both for <a href="https://cloud.google.com/community/tutorials/kotlin-ktor-app-engine-java8" id="server-overview.md-5ae03c36"   data-external="true" rel="noopener noreferrer" >Ktor and App Engine</a> and <a href="https://cloud.google.com/community/tutorials/kotlin-springboot-app-engine-java8" id="server-overview.md-5741d07a"   data-external="true" rel="noopener noreferrer" >Spring and App engine</a>. In addition there is an <a href="https://codelabs.developers.google.com/codelabs/cloud-spring-cloud-gcp-kotlin" id="server-overview.md-9e066ec8"   data-external="true" rel="noopener noreferrer" >interactive code lab</a> for deploying a Kotlin Spring application.</p></section><section class="chapter"  ><h2 id="server-overview.md-users-of-kotlin-on-the-server-side" data-toc="server-overview#server-overview.md-users-of-kotlin-on-the-server-side"  >Users of Kotlin on the server side</h2><p id="server-overview.md-cdf4609c" ><a href="https://www.corda.net/" id="server-overview.md-4f52c1dc"   data-external="true" rel="noopener noreferrer" >Corda</a> is an open-source distributed ledger platform, supported by major banks, and built entirely in Kotlin.</p><p id="server-overview.md-33f1a3a9" ><a href="https://account.jetbrains.com/" id="server-overview.md-44eb1cb"   data-external="true" rel="noopener noreferrer" >JetBrains Account</a>, the system responsible for the entire license sales and validation process at JetBrains, is written in 100% Kotlin and has been running in production since 2015 with no major issues.</p></section><section class="chapter"  ><h2 id="server-overview.md-next-steps" data-toc="server-overview#server-overview.md-next-steps"  >Next steps</h2><ul class="list _ul" id="server-overview.md-72e2cc5c"   ><li class="list__item" id="server-overview.md-4266851d" ><p>For a more in-depth introduction to the language, check out the Kotlin documentation on this site and <a href="#koans.md" id="server-overview.md-2126e645"   >Kotlin Koans</a>.</p></li><li class="list__item" id="server-overview.md-83e3fb65" ><p>Micronaut also has a lot of well-detailed <a href="https://guides.micronaut.io/tags/kotlin.html" id="server-overview.md-9573b07e"   data-external="true" rel="noopener noreferrer" >guides</a>, showing how you can build microservices in Kotlin.</p></li><li class="list__item" id="server-overview.md-58d280a8" ><p>http4k provides the <a href="https://toolbox.http4k.org" id="server-overview.md-bb0c02c6"   data-external="true" rel="noopener noreferrer" >CLI</a> to generate fully formed projects, and a <a href="https://start.http4k.org" id="server-overview.md-400d35c2"   data-external="true" rel="noopener noreferrer" >starter</a> repo to generate an entire CD pipeline using GitHub, Travis, and Heroku with a single bash command.</p></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="android-overview.md"  >Kotlin for Android</h1><p id="android-overview.md-23b8eb12" >Android mobile development has been Kotlin-first since Google I/O in 2019.</p><p id="android-overview.md-1b625382" >Using Kotlin for Android development, you can benefit from:</p><ul class="list _ul" id="android-overview.md-8684ad05"   ><li class="list__item" id="android-overview.md-4fd53b00" ><p><b id="android-overview.md-37fc7d13" class=""  >Less code combined with greater readability</b>. Spend less time writing your code and working to understand the code of others.</p></li><li class="list__item" id="android-overview.md-44bd4531" ><p><b id="android-overview.md-4cedae1f" class=""  >Mature language and environment</b>. Since its creation in 2011, Kotlin has developed continuously, not only as a language but as a whole ecosystem with robust tooling. Now it\'s seamlessly integrated in Android Studio and is actively used by many companies for developing Android applications.</p></li><li class="list__item" id="android-overview.md-f08eaac7" ><p><b id="android-overview.md-4af21095" class=""  >Kotlin support in Android Jetpack and other libraries</b>. <a href="https://developer.android.com/kotlin/ktx" id="android-overview.md-c331773f"   data-external="true" rel="noopener noreferrer" >KTX extensions</a> add Kotlin language features, such as coroutines, extension functions, lambdas, and named parameters, to existing Android libraries.</p></li><li class="list__item" id="android-overview.md-c3ebcd0f" ><p><b id="android-overview.md-ae46c17d" class=""  >Interoperability with Java</b>. You can use Kotlin along with the Java programming language in your applications without needing to migrate all your code to Kotlin.</p></li><li class="list__item" id="android-overview.md-e4d264a6" ><p><b id="android-overview.md-4be61ad7" class=""  >Support for multiplatform development</b>. You can use Kotlin for developing not only Android but also <a href="https://kotlinlang.org/lp/mobile/" id="android-overview.md-309ade80"   data-external="true" rel="noopener noreferrer" >iOS</a>, backend, and web applications. Enjoy the benefits of sharing the common code among the platforms.</p></li><li class="list__item" id="android-overview.md-2e08af97" ><p><b id="android-overview.md-19271064" class=""  >Code safety</b>. Less code and better readability lead to fewer errors. The Kotlin compiler detects these remaining errors, making the code safe.</p></li><li class="list__item" id="android-overview.md-92176304" ><p><b id="android-overview.md-4b83e4db" class=""  >Easy learning</b>. Kotlin is very easy to learn, especially for Java developers.</p></li><li class="list__item" id="android-overview.md-fb071db9" ><p><b id="android-overview.md-12b1a15d" class=""  >Big community</b>. Kotlin has great support and many contributions from the community, which is growing all over the world. According to Google, over 60% of the top 1000 apps on the Play Store use Kotlin.</p></li></ul><p id="android-overview.md-3c2a5ceb" >Many startups and Fortune 500 companies have already developed Android applications using Kotlin – see the list at <a href="https://developer.android.com/kotlin" id="android-overview.md-7700b8ef"   data-external="true" rel="noopener noreferrer" >the Google website for Kotlin developers</a>.</p><p id="android-overview.md-f77a2efc" >If you want to start using Kotlin for Android development, read <a href="https://developer.android.com/kotlin/get-started" id="android-overview.md-34143e6f"   data-external="true" rel="noopener noreferrer" >Google’s recommendation for getting started with Kotlin on Android</a>.</p><p id="android-overview.md-7fe49542" >If you\'re new to Android and want to learn to create applications with Kotlin, check out <a href="https://www.udacity.com/course/developing-android-apps-with-kotlin--ud9012" id="android-overview.md-c59594bf"   data-external="true" rel="noopener noreferrer" >this Udacity course</a>.</p></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="js-overview.md"  >Kotlin for JavaScript</h1><p id="js-overview.md-b0ac8801" >Kotlin/JS provides the ability to transpile your Kotlin code, the Kotlin standard library, and any compatible dependencies to JavaScript. The current implementation of Kotlin/JS targets <a href="https://www.ecma-international.org/ecma-262/5.1/" id="js-overview.md-a55726b3"   data-external="true" rel="noopener noreferrer" >ES5</a>.</p><p id="js-overview.md-8b427df4" >The recommended way to use Kotlin/JS is via the <code class="code " id="js-overview.md-73a4224"  >kotlin.js</code> and <code class="code " id="js-overview.md-e079e096"  >kotlin.multiplatform</code> Gradle plugins. They provide a central and convenient way to set up and control Kotlin projects targeting JavaScript. This includes essential functionality such as controlling the bundling of your application, adding JavaScript dependencies directly from npm, and more. To get an overview of the available options, check out the <a href="#js-project-setup.md" id="js-overview.md-d5e50de8"   >Kotlin/JS project setup</a> documentation.</p><section class="chapter"  ><h2 id="js-overview.md-use-cases-for-kotlin-js" data-toc="js-overview#js-overview.md-use-cases-for-kotlin-js"  >Use cases for Kotlin/JS</h2><p id="js-overview.md-96dcb368" >There are numerous ways that Kotlin/JS can be used. To provide you some inspiration, here\'s a non-exhaustive list of scenarios in which you can use Kotlin/JS.</p><ul class="list _ul" id="js-overview.md-a2abe9c2"   ><li class="list__item" id="js-overview.md-ffbc58ef" ><p id="js-overview.md-2e139b78" ><b id="js-overview.md-15a56ea5" class=""  >Write frontend web applications using Kotlin/JS</b></p><ul class="list _ul" id="js-overview.md-4cc4de96"   ><li class="list__item" id="js-overview.md-69554239" ><p>Kotlin/JS allows you to <b id="js-overview.md-a89f04a" class=""  >leverage powerful browser and web APIs</b> in a type-safe fashion. Create, modify and interact with elements in the Document Object Model (DOM), use Kotlin code to control the rendering of <code class="code " id="js-overview.md-f7cfe922"  >canvas</code> or WebGL components, and enjoy access to many more of the features supported in modern browsers.</p></li><li class="list__item" id="js-overview.md-a161d527" ><p>Write <b id="js-overview.md-e5249c32" class=""  >full, type-safe React applications with Kotlin/JS</b> using the <a href="https://github.com/JetBrains/kotlin-wrappers" id="js-overview.md-f0ad102e"   data-external="true" rel="noopener noreferrer" ><code class="code " id="js-overview.md-95f4f71d"  >kotlin-wrappers</code></a> provided by JetBrains, which provide convenient abstractions and deep integrations for one of the most popular JavaScript frameworks. <code class="code " id="js-overview.md-55a2e316"  >kotlin-wrappers</code> also provides support for a select number of adjacent technologies like <code class="code " id="js-overview.md-34359708"  >react-redux</code>, <code class="code " id="js-overview.md-adc74e46"  >react-router</code>, or <code class="code " id="js-overview.md-ef0c90d7"  >styled-components</code>. Interoperability with the JavaScript ecosystem also means that you can also use third-party React components and component libraries.</p></li><li class="list__item" id="js-overview.md-948cedb1" ><p>Use <b id="js-overview.md-923b194f" class=""  >community-maintained Kotlin/JS frameworks</b> that take full advantage of Kotlin concepts, its expressive power and conciseness – like <a href="https://kvision.io/" id="js-overview.md-a4f53802"   data-external="true" rel="noopener noreferrer" >KVision</a> or <a href="https://www.fritz2.dev/" id="js-overview.md-46709c3f"   data-external="true" rel="noopener noreferrer" >fritz2</a>.</p></li></ul></li><li class="list__item" id="js-overview.md-7dbde7ae" ><p id="js-overview.md-a3933559" ><b id="js-overview.md-437801e9" class=""  >Write server-side and serverless applications using Kotlin/JS</b></p><ul class="list _ul" id="js-overview.md-f55d5460"   ><li class="list__item" id="js-overview.md-acfb1593" ><p>The Node.js target provided by Kotlin/JS enables you to create applications that <b id="js-overview.md-c27c1fcb" class=""  >run on a server</b> or get <b id="js-overview.md-1e3b7c98" class=""  >executed on serverless infrastructure</b>. You benefit from the same advantages as other applications executing in a JavaScript runtime, such as <b id="js-overview.md-aecc341a" class=""  >faster startup speed</b> and a <b id="js-overview.md-4334b458" class=""  >reduced memory footprint</b>. With <a href="https://github.com/Kotlin/kotlinx-nodejs" id="js-overview.md-f4897b6c"   data-external="true" rel="noopener noreferrer" ><code class="code " id="js-overview.md-9657d60b"  >kotlinx-nodejs</code></a>, you have typesafe access to the <a href="https://nodejs.org/docs/latest/api/" id="js-overview.md-41065814"   data-external="true" rel="noopener noreferrer" >Node.js API</a> directly from your Kotlin code.</p></li></ul></li><li class="list__item" id="js-overview.md-bacae64a" ><p id="js-overview.md-53020e40" ><b id="js-overview.md-c017ab1b" class=""  >Use Kotlin\'s <a href="#multiplatform.md" id="js-overview.md-4a68bf1"   >multiplatform</a> projects to share code with other Kotlin targets</b></p><ul class="list _ul" id="js-overview.md-473a0a31"   ><li class="list__item" id="js-overview.md-2abb33d5" ><p>All Kotlin/JS functionality can also be accessed when using the Kotlin <code class="code " id="js-overview.md-598f2d47"  >multiplatform</code> Gradle plugin.</p></li><li class="list__item" id="js-overview.md-6f9276c1" ><p>If you have a backend written in Kotlin, you can <b id="js-overview.md-da12e0b5" class=""  >share common code</b> such as data models or validation logic with a frontend written in Kotlin/JS, allowing you to <b id="js-overview.md-3b88a0db" class=""  >write and maintain full-stack web applications</b>.</p></li><li class="list__item" id="js-overview.md-db5960b6" ><p>You could also <b id="js-overview.md-def59ab9" class=""  >share business logic between your web interface and mobile apps</b> for Android and iOS, and avoid duplicating commonly used functionality like providing abstractions around REST API endpoints, user authentication, or your domain models.</p></li></ul></li><li class="list__item" id="js-overview.md-768523fd" ><p id="js-overview.md-d1ac4bfa" ><b id="js-overview.md-53dcb67c" class=""  >Create libraries for use with JavaScript and TypeScript</b></p><ul class="list _ul" id="js-overview.md-c4c01c27"   ><li class="list__item" id="js-overview.md-78097598" ><p>You don\'t have to write your whole application in Kotlin/JS, either – you can also <b id="js-overview.md-8e1b8fe0" class=""  >generate libraries from your Kotlin code</b> that can be consumed as modules from any code base written in JavaScript or TypeScript, regardless of other frameworks or technologies used. This approach of <b id="js-overview.md-8bc8871c" class=""  >creating hybrid applications</b> allows you to leverage the competencies that you and your team might already have around web development, while helping you <b id="js-overview.md-56d6839f" class=""  >reduce the amount of duplicated work</b>, and making it easier to keep your web target consistent with other targets of your application.</p></li></ul></li></ul><p id="js-overview.md-c1bfdd55" >Of course, this is not a complete list of how you can use Kotlin/JS to your advantage, but merely a selection of cherry-picked cases. We invite you to experiment with combinations of these use cases, and find out what works best for your project.</p><p id="js-overview.md-9d957c6d" >Regardless of your specific use case, Kotlin/JS projects can use compatible <b id="js-overview.md-3221c6a0" class=""  >libraries from the Kotlin ecosystem</b>, as well as third-party <b id="js-overview.md-822bda98" class=""  >libraries from the JavaScript and TypeScript ecosystems</b>. To use the latter from Kotlin code, you can either provide your own typesafe wrappers, use community-maintained wrappers, or let <a href="#js-external-declarations-with-dukat.md" id="js-overview.md-6d91314d"   >Dukat</a> automatically generate Kotlin declarations for you. Using the Kotlin/JS-exclusive <a href="#dynamic-type.md" id="js-overview.md-773eef7a"   >dynamic type</a> allows you to loosen the constraints of Kotlin\'s type system, allowing you to skip creating detailed library wrappers - at the expense of type safety.</p><p id="js-overview.md-de0f3ba4" >Kotlin/JS is also compatible with the most common module systems: UMD, CommonJS, and AMD. Being able to <a href="#js-modules.md" id="js-overview.md-94f59e1c"   >produce and consume modules</a> means that you can interact with the JavaScript ecosystem in a structured manner.</p></section><section class="chapter"  ><h2 id="js-overview.md-kotlin-js-today-and-tomorrow" data-toc="js-overview#js-overview.md-kotlin-js-today-and-tomorrow"  >Kotlin/JS, Today and Tomorrow</h2><p id="js-overview.md-53fca6f5" ><b id="js-overview.md-498a7e22" class=""  >Want to know more about Kotlin/JS?</b></p><p id="js-overview.md-9cbab813" >In <a href="https://www.youtube.com/watch?v=fZUL8_kgHXg" id="js-overview.md-59c8e101"   data-external="true" rel="noopener noreferrer" >this video</a>, Kotlin Developer Advocate Sebastian Aigner will explain the main Kotlin/JS benefits to you, share some tips and use cases, and also tell you about the plans and upcoming features for Kotlin/JS.</p><p id="js-overview.md-d4cad9ed" ><figure  title="" class="video"><img src="https://img.youtube.com/vi/fZUL8_kgHXg/0.jpg" width="560" height="315"/></figure><p ><a href="https://youtube.com/v/fZUL8_kgHXg">Watch video online.</a></p></p></section><section class="chapter"  ><h2 id="js-overview.md-get-started-with-kotlin-js" data-toc="js-overview#js-overview.md-get-started-with-kotlin-js"  >Get started with Kotlin/JS</h2><p id="js-overview.md-b4ad9813" >If you\'re new to Kotlin, a good first step would be to familiarize yourself with the <a href="#basic-syntax.md" id="js-overview.md-af01e1a6"   >basic syntax</a> of the language.</p><p id="js-overview.md-8ae5304b" >To start using Kotlin for JavaScript, please refer to the <a href="#js-project-setup.md" id="js-overview.md-5f88763f"   >Set up a Kotlin/JS project</a>, or pick a hands-on lab from the next section to work through.</p></section><section class="chapter"  ><h2 id="js-overview.md-hands-on-labs-for-kotlin-js" data-toc="js-overview#js-overview.md-hands-on-labs-for-kotlin-js"  >Hands-on labs for Kotlin/JS</h2><p id="js-overview.md-30123141" >Hands-on labs are long-form tutorials that help you get to know a technology by guiding you through a self-contained project related to a specific topic.</p><p id="js-overview.md-f0050cf4" >They include sample projects, which can serve as jumping-off points for your own projects, and contain useful snippets and patterns.</p><p id="js-overview.md-f43faf88" >For Kotlin/JS, the following hands-on labs are currently available:</p><ul class="list _ul" id="js-overview.md-dba41336"   ><li class="list__item" id="js-overview.md-c38f42a2" ><p id="js-overview.md-86884de4" ><a href="https://play.kotlinlang.org/hands-on/Building%20Web%20Applications%20with%20React%20and%20Kotlin%20JS/01_Introduction" id="js-overview.md-3d6a044d"   data-external="true" rel="noopener noreferrer" >Building Web Applications with React and Kotlin/JS</a> guides you through the process of building a simple web application using the React framework, shows how a typesafe Kotlin DSL for HTML makes it convenient to build reactive DOM elements, and illustrates how to use third-party React components, and how to obtain information from APIs, while writing the whole application logic in pure Kotlin/JS.</p></li><li class="list__item" id="js-overview.md-73fc378b" ><p id="js-overview.md-7332a69e" ><a href="https://play.kotlinlang.org/hands-on/Full%20Stack%20Web%20App%20with%20Kotlin%20Multiplatform/01_Introduction" id="js-overview.md-91b10c70"   data-external="true" rel="noopener noreferrer" >Building a Full Stack Web App with Kotlin Multiplatform</a> teaches the concepts behind building an application that targets Kotlin/JVM and Kotlin/JS by building a client-server application that makes use of common code, serialization, and other multiplatform paradigms. It also provides a brief introduction into working with Ktor both as a server- and client-side framework.</p></li></ul></section><section class="chapter"  ><h2 id="js-overview.md-new-kotlin-js-ir-compiler" data-toc="js-overview#js-overview.md-new-kotlin-js-ir-compiler"  >New Kotlin/JS IR compiler</h2><p id="js-overview.md-7179b395" >The <a href="#js-ir-compiler.md" id="js-overview.md-6cf2bfbc"   >new Kotlin/JS IR compiler</a> (currently with <a href="#components-stability.md" id="js-overview.md-bd88dbd1"   >Alpha</a> stability) comes with a number of improvements over the current default compiler. For example, it improves the size of generated executables via dead code elimination and makes it smoother to interoperate with the JavaScript ecosystem and its tooling. By generating TypeScript declaration files (d.ts) from Kotlin code, the new compiler makes it easier to create “hybrid” applications that mix TypeScript and Kotlin code, and leverage code-sharing functionality using Kotlin Multiplatform.</p><p id="js-overview.md-f745ffc6" >To learn more about the available features in the new Kotlin/JS IR compiler and how to try it for your project, visit the <a href="#js-ir-compiler.md" id="js-overview.md-35c15925"   >documentation</a>.</p></section><section class="chapter"  ><h2 id="js-overview.md-join-the-kotlin-js-community" data-toc="js-overview#js-overview.md-join-the-kotlin-js-community"  >Join the Kotlin/JS community</h2><p id="js-overview.md-ec94d482" >You can also join <a href="https://kotlinlang.slack.com/archives/C0B8L3U69" id="js-overview.md-f45c9500"   data-external="true" rel="noopener noreferrer" >#javascript</a> channel in the official <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" id="js-overview.md-438cbb9b"   data-external="true" rel="noopener noreferrer" >Kotlin Slack</a> and chat with the community and the team.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="native-overview.md"  >Kotlin Native</h1><p id="native-overview.md-43e876fd" >Kotlin/Native is a technology for compiling Kotlin code to native binaries, which can run without a virtual machine. It is an <a href="https://llvm.org/" id="native-overview.md-21bc8de8"   data-external="true" rel="noopener noreferrer" >LLVM</a> based backend for the Kotlin compiler and native implementation of the Kotlin standard library.</p><section class="chapter"  ><h2 id="native-overview.md-why-kotlin-native" data-toc="native-overview#native-overview.md-why-kotlin-native"  >Why Kotlin/Native?</h2><p id="native-overview.md-a1791e6c" >Kotlin/Native is primarily designed to allow compilation for platforms where <em id="native-overview.md-843b3f9a" class=""  >virtual machines</em> are not desirable or possible, for example, embedded devices or iOS. It solves the situations when a developer needs to produce a self-contained program that does not require an additional runtime or virtual machine.</p></section><section class="chapter"  ><h2 id="native-overview.md-target-platforms" data-toc="native-overview#native-overview.md-target-platforms"  >Target platforms</h2><p id="native-overview.md-9c8a6bb1" >Kotlin/Native supports the following platforms:</p><ul class="list _ul" id="native-overview.md-cab19af4"   ><li class="list__item" id="native-overview.md-a6f23231" ><p>macOS</p></li><li class="list__item" id="native-overview.md-60764634" ><p>iOS, tvOS, watchOS</p></li><li class="list__item" id="native-overview.md-57d7c734" ><p>Linux</p></li><li class="list__item" id="native-overview.md-8562e507" ><p>Windows (MinGW)</p></li><li class="list__item" id="native-overview.md-83b7a1c6" ><p>Android NDK</p></li></ul><p id="native-overview.md-1a396761" >The full list of supported targets is available <a href="#mpp-supported-platforms.md" id="native-overview.md-43af3d60"   >here</a>.</p></section><section class="chapter"  ><h2 id="native-overview.md-interoperability" data-toc="native-overview#native-overview.md-interoperability"  >Interoperability</h2><p id="native-overview.md-858c220e" >Kotlin/Native supports two-way interoperability with the Native world. On the one hand, the compiler creates:</p><ul class="list _ul" id="native-overview.md-29b7f6b9"   ><li class="list__item" id="native-overview.md-d76d8959" ><p>an executable for many <a href="#native-overview.md-target-platforms" id="native-overview.md-9995afe0"   >platforms</a></p></li><li class="list__item" id="native-overview.md-6f40bc7a" ><p>a static library or <a href="#native-dynamic-libraries.md" id="native-overview.md-9bdf42c7"   >dynamic</a> library with C headers for C/C++ projects</p></li><li class="list__item" id="native-overview.md-e04cca85" ><p>an <a href="#apple-framework.md" id="native-overview.md-bd2aceec"   >Apple framework</a> for Swift and Objective-C projects</p></li></ul><p id="native-overview.md-eaeb83ec" >On the other hand, Kotlin/Native supports interoperability to use existing libraries directly from Kotlin/Native:</p><ul class="list _ul" id="native-overview.md-f45e51d3"   ><li class="list__item" id="native-overview.md-ee600c38" ><p>static or dynamic <a href="#native-c-interop.md" id="native-overview.md-ce0bc509"   >C Libraries</a></p></li><li class="list__item" id="native-overview.md-bbacbd41" ><p>C, <a href="#native-objc-interop.md" id="native-overview.md-636a6682"   >Swift, and Objective-C</a> frameworks</p></li></ul><p id="native-overview.md-8ef8bd88" >It is easy to include a compiled Kotlin code into existing projects written in C, C++, Swift, Objective-C, and other languages. It is also easy to use existing native code, static or dynamic <a href="#native-c-interop.md" id="native-overview.md-3e882940"   >C libraries</a>, Swift/Objective-C <a href="#native-objc-interop.md" id="native-overview.md-a91e97d9"   >frameworks</a>, graphical engines, and anything else directly from Kotlin/Native.</p><p id="native-overview.md-a08a8735" >Kotlin/Native <a href="#native-platform-libs.md" id="native-overview.md-1b11e8c9"   >libraries</a> help to share Kotlin code between projects. POSIX, gzip, OpenGL, Metal, Foundation, and many other popular libraries and Apple frameworks are pre-imported and included as Kotlin/Native libraries into the compiler package.</p></section><section class="chapter"  ><h2 id="native-overview.md-sharing-code-between-platforms" data-toc="native-overview#native-overview.md-sharing-code-between-platforms"  >Sharing code between platforms</h2><p id="native-overview.md-88248cec" ><a href="#multiplatform.md" id="native-overview.md-ca74d060"   >Multiplatform projects</a> allow sharing common Kotlin code between multiple platforms, including Android, iOS, JVM, JavaScript, and native. Multiplatform libraries provide required APIs for the common Kotlin code and help develop shared parts of a project in Kotlin code in one place and share it with all or several target platforms.</p><p id="native-overview.md-d8e91e63" >You can use <a href="https://kotlinlang.org/lp/mobile/" id="native-overview.md-820a5f71"   data-external="true" rel="noopener noreferrer" >Kotlin Multiplatform Mobile (KMM)</a> to create multiplatform mobile applications with code shared between Android and iOS.</p></section><section class="chapter"  ><h2 id="native-overview.md-how-to-start" data-toc="native-overview#native-overview.md-how-to-start"  >How to start</h2><section class="chapter"  ><h3 id="native-overview.md-tutorials-and-documentation" data-toc="native-overview#native-overview.md-tutorials-and-documentation"  >Tutorials and documentation</h3><p id="native-overview.md-d7bd69f2" >New to Kotlin? Take a look at <a href="#getting-started.md" id="native-overview.md-79f499ef"   >Getting started with Kotlin</a>.</p><p id="native-overview.md-e2bd84ba" >Recommended documentation:</p><ul class="list _ul" id="native-overview.md-f343e3ca"   ><li class="list__item" id="native-overview.md-164e264b" ><a href="https://kotlinlang.org/docs/mobile/home.html" id="native-overview.md-c0e2fe3e"   data-external="true" rel="noopener noreferrer" >Kotlin Multiplatform Mobile documentation</a></li><li class="list__item" id="native-overview.md-a6230096" ><a href="#mpp-intro.md" id="native-overview.md-a02a5e2e"   >Multiplatform documentation</a></li><li class="list__item" id="native-overview.md-4a43b489" ><a href="#native-c-interop.md" id="native-overview.md-29074d61"   >C interop</a></li><li class="list__item" id="native-overview.md-616e3d56" ><a href="#native-objc-interop.md" id="native-overview.md-cf70cb67"   >Swift/Objective-C interop</a></li></ul><p id="native-overview.md-8991ccb4" >Recommended tutorials:</p><ul class="list _ul" id="native-overview.md-ba9ca4c6"   ><li class="list__item" id="native-overview.md-3c998d96" ><a href="#native-get-started.md" id="native-overview.md-1c89fb6c"   >Get started with Kotlin/Native</a></li><li class="list__item" id="native-overview.md-a3ddd22d" ><a href="https://kotlinlang.org/docs/mobile/create-first-app.html" id="native-overview.md-c63797e"   data-external="true" rel="noopener noreferrer" >Create your first KMM application</a></li><li class="list__item" id="native-overview.md-13e7f337" ><a href="#mapping-primitive-data-types-from-c.md" id="native-overview.md-905e2fe6"   >Types mapping between C and Kotlin/Native</a></li><li class="list__item" id="native-overview.md-6dede9df" ><a href="#native-dynamic-libraries.md" id="native-overview.md-bfd0c466"   >Kotlin/Native as a Dynamic Library</a></li><li class="list__item" id="native-overview.md-a2d342bc" ><a href="#apple-framework.md" id="native-overview.md-45dd9ef0"   >Kotlin/Native as an Apple Framework</a></li></ul></section></section><section class="chapter"  ><h2 id="native-overview.md-sample-projects" data-toc="native-overview#native-overview.md-sample-projects"  >Sample projects</h2><ul class="list _ul" id="native-overview.md-4763ff36"   ><li class="list__item" id="native-overview.md-fa36bfb5" ><a href="https://kotlinlang.org/docs/mobile/samples.html" id="native-overview.md-93c14c8b"   data-external="true" rel="noopener noreferrer" >Kotlin Multiplatform Mobile samples</a></li><li class="list__item" id="native-overview.md-db68a7d4" ><a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/samples" id="native-overview.md-4bf1de1e"   data-external="true" rel="noopener noreferrer" >Kotlin/Native sources and examples</a></li><li class="list__item" id="native-overview.md-d27baf4b" ><a href="https://github.com/JetBrains/kotlinconf-app" id="native-overview.md-702cb3ca"   data-external="true" rel="noopener noreferrer" >KotlinConf app</a></li><li class="list__item" id="native-overview.md-9e105f37" ><a href="https://github.com/jetbrains/kotlinconf-spinner" id="native-overview.md-7dec79c1"   data-external="true" rel="noopener noreferrer" >KotlinConf Spinner app</a></li><li class="list__item" id="native-overview.md-e57c43e7" ><a href="https://download.jetbrains.com/kotlin/native/kotlin-native-samples-1.0.1.tar.gz" id="native-overview.md-6ea29b7"   data-external="true" rel="noopener noreferrer" >Kotlin/Native sources and examples (.tgz)</a></li><li class="list__item" id="native-overview.md-8836b9b5" ><a href="https://download.jetbrains.com/kotlin/native/kotlin-native-samples-1.0.1.zip" id="native-overview.md-88b13c68"   data-external="true" rel="noopener noreferrer" >Kotlin/Native sources and examples (.zip)</a></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="data-science-overview.md"  >Kotlin for data science</h1><p id="data-science-overview.md-8675ddfe" >From building data pipelines to productionizing machine learning models, Kotlin can be a great choice for working with data:</p><ul class="list _ul" id="data-science-overview.md-1a3ecf20"   ><li class="list__item" id="data-science-overview.md-eac5d86e" ><p>Kotlin is concise, readable, and easy to learn.</p></li><li class="list__item" id="data-science-overview.md-3bf17c12" ><p>Static typing and null safety help create reliable, maintainable code that is easy to troubleshoot.</p></li><li class="list__item" id="data-science-overview.md-c581baac" ><p>Being a JVM language, Kotlin gives you great performance and an ability to leverage an entire ecosystem of tried and true Java libraries.</p></li></ul><section class="chapter"  ><h2 id="data-science-overview.md-interactive-editors" data-toc="data-science-overview#data-science-overview.md-interactive-editors"  >Interactive editors</h2><p id="data-science-overview.md-b3bb9511" >Notebooks such as <a href="https://jupyter.org/" id="data-science-overview.md-c86aba02"   data-external="true" rel="noopener noreferrer" >Jupyter Notebook</a> and <a href="https://zeppelin.apache.org/" id="data-science-overview.md-78ace191"   data-external="true" rel="noopener noreferrer" >Apache Zeppelin</a> provide convenient tools for data visualization and exploratory research. Kotlin integrates with these tools to help you explore data, share your findings with colleagues, or build up your data science and machine learning skills.</p><section class="chapter"  ><h3 id="data-science-overview.md-jupyter-kotlin-kernel" data-toc="data-science-overview#data-science-overview.md-jupyter-kotlin-kernel"  >Jupyter Kotlin kernel</h3><p id="data-science-overview.md-cc5ff2f8" >The Jupyter Notebook is an open-source web application that allows you to create and share documents (aka &quot;notebooks&quot;) that can contain code, visualizations, and markdown text. <a href="https://github.com/Kotlin/kotlin-jupyter" id="data-science-overview.md-9e217720"   data-external="true" rel="noopener noreferrer" >Kotlin-jupyter</a> is an open source project that brings Kotlin support to Jupyter Notebook.</p><p id="data-science-overview.md-3a52e8c0" ><figure title="Kotlin in Jupyter notebook"><img alt="Kotlin in Jupyter notebook" title="Kotlin in Jupyter notebook" id="data-science-overview.md-1be543aa" src="images/kotlin-jupyter-kernel.png"  class="" width="800" height="617" /></figure></p><p id="data-science-overview.md-7b53b562" >Check out Kotlin kernel\'s <a href="https://github.com/Kotlin/kotlin-jupyter" id="data-science-overview.md-550a38b8"   data-external="true" rel="noopener noreferrer" >GitHub repo</a> for installation instructions, documentation, and examples.</p></section><section class="chapter"  ><h3 id="data-science-overview.md-zeppelin-kotlin-interpreter" data-toc="data-science-overview#data-science-overview.md-zeppelin-kotlin-interpreter"  >Zeppelin Kotlin interpreter</h3><p id="data-science-overview.md-c752450f" >Apache Zeppelin is a popular web-based solution for interactive data analytics. It provides strong support for the Apache Spark cluster computing system, which is particularly useful for data engineering. Starting from <a href="https://zeppelin.apache.org/docs/0.9.0-preview1/" id="data-science-overview.md-1e84f2b7"   data-external="true" rel="noopener noreferrer" >version 0.9.0</a>, Apache Zeppelin comes with bundled Kotlin interpreter.</p><p id="data-science-overview.md-99beeaa8" ><figure title="Kotlin in Zeppelin notebook"><img alt="Kotlin in Zeppelin notebook" title="Kotlin in Zeppelin notebook" id="data-science-overview.md-3919bc8b" src="images/kotlin-zeppelin-interpreter.png"  class="" width="800" height="261" /></figure></p></section></section><section class="chapter"  ><h2 id="data-science-overview.md-libraries" data-toc="data-science-overview#data-science-overview.md-libraries"  >Libraries</h2><p id="data-science-overview.md-a9f8aa9" >The ecosystem of libraries for data-related tasks created by the Kotlin community is rapidly expanding. Here are some libraries that you may find useful:</p><section class="chapter"  ><h3 id="data-science-overview.md-kotlin-libraries" data-toc="data-science-overview#data-science-overview.md-kotlin-libraries"  >Kotlin libraries</h3><ul class="list _ul" id="data-science-overview.md-3117ac35"   ><li class="list__item" id="data-science-overview.md-71f07a8c" ><p id="data-science-overview.md-c8dbe7ce" ><a href="https://github.com/Kotlin/multik" id="data-science-overview.md-cb50bd27"   data-external="true" rel="noopener noreferrer" >Multik</a>: multidimensional arrays in Kotlin. The library provides Kotlin-idiomatic, type- and dimension-safe API for mathematical operations over multidimensional arrays. Multik offers swappable JVM and native computational engines, and a combination of the two for optimal performance.</p></li><li class="list__item" id="data-science-overview.md-9938bd0f" ><p id="data-science-overview.md-9e4a94b" ><a href="http://github.com/jetbrains/kotlindl" id="data-science-overview.md-c310ba70"   data-external="true" rel="noopener noreferrer" >KotlinDL</a> is a high-level Deep Learning API written in Kotlin and inspired by Keras. It offers simple APIs for training deep learning models from scratch, importing existing Keras models for inference, and leveraging transfer learning for tweaking existing pre-trained models to your tasks.</p></li><li class="list__item" id="data-science-overview.md-9426b9bf" ><p id="data-science-overview.md-fd853e25" ><a href="https://github.com/JetBrains/kotlin-spark-api" id="data-science-overview.md-24278982"   data-external="true" rel="noopener noreferrer" >Kotlin for Apache Spark</a> adds a missing layer of compatibility between Kotlin and Apache Spark. It allows Kotlin developers to use familiar language features such as data classes, and lambda expressions as simple expressions in curly braces or method references.</p></li><li class="list__item" id="data-science-overview.md-c02ba4ff" ><p id="data-science-overview.md-999a8c64" ><a href="https://github.com/thomasnield/kotlin-statistics" id="data-science-overview.md-859e4fff"   data-external="true" rel="noopener noreferrer" >kotlin-statistics</a> is a library providing extension functions for exploratory and production statistics. It supports basic numeric list/sequence/array functions (from <code class="code " id="data-science-overview.md-92bfd0b1"  >sum</code> to <code class="code " id="data-science-overview.md-69fbcc2c"  >skewness</code> ), slicing operators (such as <code class="code " id="data-science-overview.md-92b122d8"  >countBy</code>, <code class="code " id="data-science-overview.md-8648676b"  >simpleRegressionBy</code> ), binning operations, discrete PDF sampling, naive bayes classifier, clustering, linear regression, and much more.</p></li><li class="list__item" id="data-science-overview.md-d8a61a2e" ><p id="data-science-overview.md-2d0ae62" ><a href="https://github.com/mipt-npm/kmath" id="data-science-overview.md-11f90e3e"   data-external="true" rel="noopener noreferrer" >kmath</a> is a library inspired by <a href="https://numpy.org/" id="data-science-overview.md-cae602b4"   data-external="true" rel="noopener noreferrer" >NumPy</a>. This library supports algebraic structures and operations, array-like structures, math expressions, histograms, streaming operations, a wrapper around <a href="http://commons.apache.org/proper/commons-math/" id="data-science-overview.md-d5c0c649"   data-external="true" rel="noopener noreferrer" >commons-math</a> and <a href="https://github.com/kyonifer/koma" id="data-science-overview.md-d7627e18"   data-external="true" rel="noopener noreferrer" >koma</a>, and more.</p></li><li class="list__item" id="data-science-overview.md-e41070dd" ><p id="data-science-overview.md-50cbfe14" ><a href="https://github.com/holgerbrandl/krangl" id="data-science-overview.md-c09c27b0"   data-external="true" rel="noopener noreferrer" >krangl</a> is a library inspired by R\'s <a href="https://dplyr.tidyverse.org/" id="data-science-overview.md-9b354d66"   data-external="true" rel="noopener noreferrer" >dplyr</a> and Python\'s <a href="https://pandas.pydata.org/" id="data-science-overview.md-3758424"   data-external="true" rel="noopener noreferrer" >pandas</a>. This library provides functionality for data manipulation using a functional-style API; it also includes functions for filtering, transforming, aggregating, and reshaping tabular data.</p></li><li class="list__item" id="data-science-overview.md-73223b66" ><p id="data-science-overview.md-5dada315" ><a href="https://github.com/JetBrains/lets-plot" id="data-science-overview.md-a1cadedb"   data-external="true" rel="noopener noreferrer" >lets-plot</a> is a plotting library for statistical data written in Kotlin. Lets-Plot is multiplatform and can be used not only with JVM, but also with JS and Python.</p></li><li class="list__item" id="data-science-overview.md-fcafaed" ><p id="data-science-overview.md-b1fa911f" ><a href="https://github.com/holgerbrandl/kravis" id="data-science-overview.md-3fb6a50d"   data-external="true" rel="noopener noreferrer" >kravis</a> is another library for the visualization of tabular data inspired by Python\'s <a href="https://ggplot2.tidyverse.org/" id="data-science-overview.md-97e02f8d"   data-external="true" rel="noopener noreferrer" >ggplot</a>.</p></li></ul></section><section class="chapter"  ><h3 id="data-science-overview.md-java-libraries" data-toc="data-science-overview#data-science-overview.md-java-libraries"  >Java libraries</h3><p id="data-science-overview.md-1989c405" >Since Kotlin provides first-class interop with Java, you can also use Java libraries for data science in your Kotlin code. Here are some examples of such libraries:</p><ul class="list _ul" id="data-science-overview.md-eb73347e"   ><li class="list__item" id="data-science-overview.md-6c6923b" ><p id="data-science-overview.md-ae310e70" ><a href="https://deeplearning4j.org/" id="data-science-overview.md-eaadf0ec"   data-external="true" rel="noopener noreferrer" >DeepLearning4J</a>- a deep learning library for Java</p></li><li class="list__item" id="data-science-overview.md-59591302" ><p id="data-science-overview.md-49a915ad" ><a href="http://nd4j.org/" id="data-science-overview.md-140d54eb"   data-external="true" rel="noopener noreferrer" >ND4J</a>- an efficient matrix math library for JVM</p></li><li class="list__item" id="data-science-overview.md-c984c4d8" ><p id="data-science-overview.md-f411cf1c" ><a href="https://github.com/PatMartin/Dex" id="data-science-overview.md-fa807185"   data-external="true" rel="noopener noreferrer" >Dex</a>- a Java-based data visualization tool</p></li><li class="list__item" id="data-science-overview.md-b094a8" ><p id="data-science-overview.md-509e2fff" ><a href="https://github.com/haifengl/smile" id="data-science-overview.md-f3dc5426"   data-external="true" rel="noopener noreferrer" >Smile</a>- a comprehensive machine learning, natural language processing, linear algebra, graph, interpolation, and visualization system. Besides Java API, Smile also provides a functional <a href="http://haifengl.github.io/api/kotlin/smile-kotlin/index.html" id="data-science-overview.md-7121b5db"   data-external="true" rel="noopener noreferrer" >Kotlin API</a> along with Scala and Clojure API.</p><ul class="list _ul" id="data-science-overview.md-48064eab"   ><li class="list__item" id="data-science-overview.md-2e443b16" ><p><a href="https://github.com/londogard/smile-nlp-kt" id="data-science-overview.md-36f23593"   data-external="true" rel="noopener noreferrer" >Smile-NLP-kt</a>- a Kotlin rewrite of the Scala implicits for the natural language processing part of Smile in the format of extension functions and interfaces.</p></li></ul></li><li class="list__item" id="data-science-overview.md-bec301e2" ><p id="data-science-overview.md-cf9207a6" ><a href="http://commons.apache.org/proper/commons-math/" id="data-science-overview.md-2ff2714"   data-external="true" rel="noopener noreferrer" >Apache Commons Math</a>- a general math, statistics, and machine learning library for Java</p></li><li class="list__item" id="data-science-overview.md-f5034d66" ><p id="data-science-overview.md-d4ea3349" ><a href="https://www.optaplanner.org/" id="data-science-overview.md-fbd3cd8a"   data-external="true" rel="noopener noreferrer" >OptaPlanner</a>- a solver utility for optimization planning problems</p></li><li class="list__item" id="data-science-overview.md-c1d5453b" ><p id="data-science-overview.md-b2284de8" ><a href="https://github.com/HanSolo/charts" id="data-science-overview.md-4f8ca7e3"   data-external="true" rel="noopener noreferrer" >Charts</a>- a scientific JavaFX charting library in development</p></li><li class="list__item" id="data-science-overview.md-2f70261" ><p id="data-science-overview.md-c261cb58" ><a href="https://stanfordnlp.github.io/CoreNLP/" id="data-science-overview.md-1c003a94"   data-external="true" rel="noopener noreferrer" >CoreNLP</a>- a natural language processing toolkit</p></li><li class="list__item" id="data-science-overview.md-2e36f589" ><p id="data-science-overview.md-b022805a" ><a href="https://mahout.apache.org/" id="data-science-overview.md-84ce2848"   data-external="true" rel="noopener noreferrer" >Apache Mahout</a>- a distributed framework for regression, clustering and recommendation</p></li><li class="list__item" id="data-science-overview.md-de77fc56" ><p id="data-science-overview.md-741dbc3f" ><a href="https://www.cs.waikato.ac.nz/ml/index.html" id="data-science-overview.md-989e6b25"   data-external="true" rel="noopener noreferrer" >Weka</a>- a collection of machine learning algorithms for data mining tasks</p></li></ul><p id="data-science-overview.md-1e6d9cbe" >If this list doesn’t cover your needs, you can find more options in the <b id="data-science-overview.md-79fa84f4" class=""  ><a href="https://github.com/thomasnield/kotlin-data-science-resources" id="data-science-overview.md-e166f695"   data-external="true" rel="noopener noreferrer" >Kotlin Data Science Resources</a></b> digest from Thomas Nield.</p></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="competitive-programming.md"  >Kotlin for competitive programming</h1><p id="competitive-programming.md-48359801" >This tutorial is designed both for competitive programmers that did not use Kotlin before and for Kotlin developers that did not participate in any competitive programming events before. It assumes the corresponding programming skills.</p><p id="competitive-programming.md-c7de1f5c" ><a href="https://en.wikipedia.org/wiki/Competitive_programming" id="competitive-programming.md-656e4d16"   data-external="true" rel="noopener noreferrer" >Competitive programming</a> is a mind sport where contestants write programs to solve precisely specified algorithmic problems within strict constraints. Problems can range from simple ones that can be solved by any software developer and require little code to get a correct solution, to complex ones that require knowledge of special algorithms, data structures, and a lot of practice. While not being specifically designed for competitive programming, Kotlin incidentally fits well in this domain, reducing the typical amount of boilerplate that a programmer needs to write and read while working with the code almost to the level offered by dynamically-typed scripting languages, while having tooling and performance of a statically-typed language.</p><p id="competitive-programming.md-2ad5b289" >See <a href="#jvm-get-started.md" id="competitive-programming.md-f3937f69"   >Get started with Kotlin/JVM</a> on how to set up development environment for Kotlin. In competitive programming, a single project is usually created and each problem\'s solution is written in a single source file.</p><section class="chapter"  ><h2 id="competitive-programming.md-simple-example-reachable-numbers-problem" data-toc="competitive-programming#competitive-programming.md-simple-example-reachable-numbers-problem"  >Simple example: Reachable Numbers problem</h2><p id="competitive-programming.md-13918cb3" >Let\'s take a look at a concrete example.</p><p id="competitive-programming.md-dd47af0a" ><a href="http://codeforces.com/" id="competitive-programming.md-b2754281"   data-external="true" rel="noopener noreferrer" >Codeforces</a> Round 555 was held on April 26th for 3rd Division, which means it had problems fit for any developer to try. You can use <a href="http://codeforces.com/contest/1157" id="competitive-programming.md-8b731c44"   data-external="true" rel="noopener noreferrer" >this link</a> to read the problems. The simplest problem in the set is the <a href="http://codeforces.com/contest/1157/problem/A" id="competitive-programming.md-5dbb35cc"   data-external="true" rel="noopener noreferrer" >Problem A: Reachable Numbers</a>. It asks to implement a straightforward algorithm described in the problem statement.</p><p id="competitive-programming.md-49cb05e4" >We\'d start solving it by creating a Kotlin source file with an arbitrary name. <code class="code " id="competitive-programming.md-c30d6c4f"  >A.kt</code> will do well. First, we need to implement a function specified in the problem statement as:</p><p id="competitive-programming.md-3588a606" >Let\'s denote a function f(x) in such a way: we add 1 to x, then, while there is at least one trailing zero in the resulting number, we remove that zero.</p><p id="competitive-programming.md-76007a23" >Kotlin is a pragmatic and unopinionated language, supporting both imperative and function programming styles without pushing the developer towards either one. We can implement the function <code class="code " id="competitive-programming.md-187b0a12"  >f</code> in functional style, using such Kotlin features as <a href="#functions.md-tail-recursive-functions" id="competitive-programming.md-2335ba7f"   >tail recursion</a>:</p><div class="code-block" data-lang="kotlin" id="competitive-programming.md-7bc1093e"         >tailrec fun removeZeroes(x: Int): Int =\n    if (x % 10 == 0) removeZeroes(x / 10) else x\n    \nfun f(x: Int) = removeZeroes(x + 1)\n</div><p id="competitive-programming.md-80a86ed7" >Alternatively, we can write an imperative implementation of the function <code class="code " id="competitive-programming.md-95b37dbf"  >f</code> using the traditional <a href="#control-flow.md" id="competitive-programming.md-18b62b47"   >while loop</a> and mutable variables that are denoted in Kotlin with <a href="#basic-syntax.md-variables" id="competitive-programming.md-1afe9a77"   >var</a>:</p><div class="code-block" data-lang="kotlin" id="competitive-programming.md-db30defe"         >fun f(x: Int): Int {\n    var cur = x + 1\n    while (cur % 10 == 0) cur /= 10\n    return cur\n}\n</div><p id="competitive-programming.md-753d8e6c" >Types in Kotlin are optional in many places due to pervasive use of type-inference, but every declaration still has a well-defined static type that is known at compilation.</p><p id="competitive-programming.md-377ae8b1" >Now, all is left is to write the main function that reads the input and implements the rest of the algorithm that the problem statement asks for — to compute the number of different integers that are produced while repeatedly applying function <code class="code " id="competitive-programming.md-18f828b6"  >f</code> to the initial number <code class="code " id="competitive-programming.md-807e26d"  >n</code> that is given in the standard input.</p><p id="competitive-programming.md-a0f961ea" >By default, Kotlin runs on JVM and gives direct access to a rich and efficient collections library with general-purpose collections and data-structures like dynamically-sized arrays (<code class="code " id="competitive-programming.md-12ea2a92"  >ArrayList</code> ), hash-based maps and sets (<code class="code " id="competitive-programming.md-64166f9c"  >HashMap</code>/ <code class="code " id="competitive-programming.md-ff6c0794"  >HashSet</code> ), tree-based ordered maps and sets (<code class="code " id="competitive-programming.md-c817e8a2"  >TreeMap</code>/ <code class="code " id="competitive-programming.md-9ea47be2"  >TreeSet</code> ), etc. Using a hash-set of integers to track values that were already reached while applying function <code class="code " id="competitive-programming.md-63bb884b"  >f</code>, the straightforward imperative version of a solution to the problem can be written as shown below:</p><div class="code-block" data-lang="kotlin" id="competitive-programming.md-b96b6232"         >fun main() {\n    var n = readLine()!!.toInt() // read integer from the input\n    val reached = HashSet&lt;Int&gt;() // a mutable hash set \n    while (reached.add(n)) n = f(n) // iterate function f\n    println(reached.size) // print answer to the output\n}\n</div><p id="competitive-programming.md-ae065c66" >Note the use of Kotlin\'s <a href="#null-safety.md-the-operator" id="competitive-programming.md-6972112d"   >null-assertion operator</a> <code class="code " id="competitive-programming.md-61bf900f"  >!!</code> after the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/read-line.html" id="competitive-programming.md-6747af2a"   data-external="true" rel="noopener noreferrer" >readLine()</a> function call. Kotlin\'s <code class="code " id="competitive-programming.md-affa2b09"  >readLine()</code> function is defined to return a <a href="#null-safety.md-nullable-types-and-non-null-types" id="competitive-programming.md-fb245f3e"   >nullable type</a> <code class="code " id="competitive-programming.md-1488563c"  >String?</code> and returns <code class="code " id="competitive-programming.md-64134c87"  >null</code> on the end of the input, which explicitly forces the developer to handle the case of missing input.</p><p id="competitive-programming.md-b021907e" >There is no need to handle the case of misformatted input in competitive programming. In competitive programming, an input format is always precisely specified and the actual input cannot deviate from the input specification in the problem statement. That\'s what the null-assertion operator <code class="code " id="competitive-programming.md-e1a9a41f"  >!!</code> essentially does — it asserts that the input string is present and throws an exception otherwise. Likewise, the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-int.html" id="competitive-programming.md-b4851b8"   data-external="true" rel="noopener noreferrer" >String.toInt()</a> function throws an exception if the input string is not an integer.</p><p id="competitive-programming.md-3a34f272" >All online competitive programming events allow the use of pre-written code, so you can define your own library of utility functions that are geared towards competitive programming to make your actual solution code somewhat easier to read and write. You would then use this code as a template for your solutions. For example, you can define the following helper functions for reading inputs in competitive programming:</p><div class="code-block" data-lang="kotlin" id="competitive-programming.md-b4ba52d6"         >private fun readLn() = readLine()!!\nprivate fun readInt() = readLn().toInt()\n// etc for other types you\'d use in your solutions\n</div><p id="competitive-programming.md-6948a7fc" >Note the use of <code class="code " id="competitive-programming.md-dff2f4bd"  >private</code> <a href="#visibility-modifiers.md" id="competitive-programming.md-c45c885e"   >visibility modifier</a> here. While the concept of visibility modifier is not relevant for competitive programming at all, it allows you to place multiple solution files based on the same template without getting an error for conflicting public declarations in the same package.</p></section><section class="chapter"  ><h2 id="competitive-programming.md-functional-operators-example-long-number-problem" data-toc="competitive-programming#competitive-programming.md-functional-operators-example-long-number-problem"  >Functional operators example: Long Number problem</h2><p id="competitive-programming.md-abdcf495" >For more complicated problems, Kotlin\'s extensive library of functional operations on collections comes in handy to minimize the boilerplate and turn the code into a linear top-to-bottom and left-to-right fluent data transformation pipeline. For example, the <a href="http://codeforces.com/contest/1157/problem/B" id="competitive-programming.md-639950f6"   data-external="true" rel="noopener noreferrer" >Problem B: Long Number</a> problem takes a simple greedy algorithm to implement and it can be written using this style without a single mutable variable:</p><div class="code-block" data-lang="kotlin" id="competitive-programming.md-d3994936"         >fun main() {\n    // read input\n    val n = readLine()!!.toInt()\n    val s = readLine()!!\n    val fl = readLine()!!.split(&quot; &quot;).map { it.toInt() }\n    // define local function f\n    fun f(c: Char) = \'0\' + fl[c - \'1\']\n    // greedily find first and last indices\n    val i = s.indexOfFirst { c -&gt; f(c) &gt; c }\n        .takeIf { it &gt;= 0 } ?: s.length\n    val j = s.withIndex().indexOfFirst { (j, c) -&gt; j &gt; i &amp;&amp; f(c) &lt; c }\n        .takeIf { it &gt;= 0 } ?: s.length\n    // compose and write the answer\n    val ans =\n        s.substring(0, i) +\n        s.substring(i, j).map { c -&gt; f(c) }.joinToString(&quot;&quot;) +\n        s.substring(j)\n    println(ans)\n}\n</div><p id="competitive-programming.md-277b9b43" >In this dense code, in addition to collection transformations, you can see such handy Kotlin features as local functions and the <a href="#null-safety.md-elvis-operator" id="competitive-programming.md-9b19d97f"   >elvis operator</a> <code class="code " id="competitive-programming.md-8ee24ea3"  >?:</code> that allow to express <a href="#idioms.md" id="competitive-programming.md-5c5b95c1"   >idioms</a> like &quot;take the value if it is positive or else use length&quot; with a concise and readable expressions like <code class="code " id="competitive-programming.md-ea328ca8"  >.takeIf { it &gt;= 0 } ?: s.length</code>, yet it is perfectly fine with Kotlin to create additional mutable variables and express the same code in imperative style, too.</p><p id="competitive-programming.md-b748777b" >To make reading the input in competitive programming tasks like this more concise, you can have the following list of helper input-reading functions:</p><div class="code-block" data-lang="kotlin" id="competitive-programming.md-bcb92bad"         >private fun readLn() = readLine()!! // string line\nprivate fun readInt() = readLn().toInt() // single int\nprivate fun readStrings() = readLn().split(&quot; &quot;) // list of strings\nprivate fun readInts() = readStrings().map { it.toInt() } // list of ints\n</div><p id="competitive-programming.md-d4f56155" >With these helpers, the part of code for reading input becomes simpler, closely following the input specification in the problem statement line by line:</p><div class="code-block" data-lang="kotlin" id="competitive-programming.md-19b3320b"         >    // read input\n    val n = readInt()\n    val s = readLn()\n    val fl = readInts()\n</div><p id="competitive-programming.md-f13f750c" >Note that in competitive programming it is customary to give variables shorter names than it is typical in industrial programming practice, since the code is to be written just once and not supported thereafter. However, these names are usually still mnemonic — <code class="code " id="competitive-programming.md-313a2b6e"  >a</code> for arrays, <code class="code " id="competitive-programming.md-e3c34135"  >i</code>, <code class="code " id="competitive-programming.md-b5913b16"  >j</code>, etc for indices, <code class="code " id="competitive-programming.md-f17451d2"  >r</code>, and <code class="code " id="competitive-programming.md-98a81f9e"  >c</code> for row and column numbers in tables, <code class="code " id="competitive-programming.md-d8944be0"  >x</code> and <code class="code " id="competitive-programming.md-9fde8cfa"  >y</code> for coordinates, etc. It is easier to keep the same names for input data as it is given in the problem statement. However, more complex problems require more code which leads to using longer self-explanatory variable and function names.</p></section><section class="chapter"  ><h2 id="competitive-programming.md-more-tips-and-tricks" data-toc="competitive-programming#competitive-programming.md-more-tips-and-tricks"  >More tips and tricks</h2><p id="competitive-programming.md-cf8c79" >Competitive programming problems often have input like this:</p><p id="competitive-programming.md-4c572f66" >The first line of the input contains two integers <code class="code " id="competitive-programming.md-d826a5af"  >n</code> and <code class="code " id="competitive-programming.md-b648c0e8"  >k</code></p><p id="competitive-programming.md-308c1c4e" >In Kotlin this line can be concisely parsed with the following statement using <a href="#destructuring-declarations.md" id="competitive-programming.md-ab436b"   >destructuring declaration</a> from a list of integers:</p><div class="code-block" data-lang="kotlin" id="competitive-programming.md-98d2647f"         >val (n, k) = readInts() \n</div><p id="competitive-programming.md-57c7ea19" >It might be temping to use JVM\'s <code class="code " id="competitive-programming.md-bda2f362"  >java.util.Scanner</code> class to parse less structured input formats. Kotlin is designed to interoperate well with JVM libraries, so that their use feels quite natural in Kotlin. However, beware that <code class="code " id="competitive-programming.md-76712062"  >java.util.Scanner</code> is extremely slow. So slow, in fact, that parsing 10 <sup class="superscript" id="competitive-programming.md-6aead0a7" >5</sup> or more integers with it might not fit into a typical 2 second time-limit, which a simple Kotlin\'s <code class="code " id="competitive-programming.md-5d46846e"  >split(&quot; &quot;).map { it.toInt() }</code> would handle.</p><p id="competitive-programming.md-255296e1" >Writing output in Kotlin is usually straightforward with <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/println.html" id="competitive-programming.md-93d2dd03"   data-external="true" rel="noopener noreferrer" >println(...)</a> calls and using Kotlin\'s <a href="#basic-types.md-string-templates" id="competitive-programming.md-74e12692"   >string templates</a>. However, care must be taken when output contains on order of 10 <sup class="superscript" id="competitive-programming.md-a51842c2" >5</sup> lines or more. Issuing so many <code class="code " id="competitive-programming.md-f4da5904"  >println</code> calls is too slow, since the output in Kotlin is automatically flushed after each line. A faster way to write many lines from an array or a list is using <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/join-to-string.html" id="competitive-programming.md-593bc4f4"   data-external="true" rel="noopener noreferrer" >joinToString()</a> function with <code class="code " id="competitive-programming.md-14a1a83c"  >&quot;\\n&quot;</code> as the separator, like this:</p><div class="code-block" data-lang="kotlin" id="competitive-programming.md-e836c14b"         >println(a.joinToString(&quot;\\n&quot;)) // each element of array/list of a separate line\n</div></section><section class="chapter"  ><h2 id="competitive-programming.md-learning-kotlin" data-toc="competitive-programming#competitive-programming.md-learning-kotlin"  >Learning Kotlin</h2><p id="competitive-programming.md-1f41b149" >Kotlin is easy to learn, especially for those who already know Java. A short introduction to the basic syntax of Kotlin for software developers can be found directly in the reference section of the web site starting from <a href="#basic-syntax.md" id="competitive-programming.md-79b4f5e9"   >basic syntax</a>.</p><p id="competitive-programming.md-35cca3d3" >IDEA has built-in <a href="https://www.jetbrains.com/help/idea/converting-a-java-file-to-kotlin-file.html" id="competitive-programming.md-bee285bf"   data-external="true" rel="noopener noreferrer" >Java-to-Kotlin converter</a>. It can be used by people familiar with Java to learn the corresponding Kotlin syntactic constructions, but it is not perfect and it is still worth familiarizing yourself with Kotlin and learning the <a href="#idioms.md" id="competitive-programming.md-2c506e90"   >Kotlin idioms</a>.</p><p id="competitive-programming.md-d2f7d1bc" >A great resource to study Kotlin syntax and API of the Kotlin standard library are <a href="#koans.md" id="competitive-programming.md-836f78c3"   >Kotlin Koans</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="whatsnew1430.md"  >What\'s new in Kotlin 1.4.30</h1><p id="whatsnew1430.md-16206339" >Kotlin 1.4.30 offers preview versions of new language features, promotes the new IR backend of the Kotlin/JVM compiler to Beta, and ships various performance and functional improvements.</p><p id="whatsnew1430.md-690658cf" >You can also learn about new features in <a href="http://blog.jetbrains.com/kotlin/2021/01/kotlin-1-4-30-released/" id="whatsnew1430.md-96837c02"   data-external="true" rel="noopener noreferrer" >this blog post</a>.</p><section class="chapter"  ><h2 id="whatsnew1430.md-language-features" data-toc="whatsnew1430#whatsnew1430.md-language-features"  >Language features</h2><p id="whatsnew1430.md-15d62e59" >Kotlin 1.5.0 is going to deliver new language features – JVM records support, sealed interfaces, and Stable inline classes. In Kotlin 1.4.30, you can try these features and improvements in preview mode. We’d be very grateful if you share your feedback with us in the corresponding YouTrack tickets, as that will allow us to address it before the release of 1.5.0.</p><ul class="list _ul" id="whatsnew1430.md-74e8d157"   ><li class="list__item" id="whatsnew1430.md-f49a2c1e" ><a href="#whatsnew1430.md-jvm-records-support" id="whatsnew1430.md-b60b31dc"   >JVM records support</a></li><li class="list__item" id="whatsnew1430.md-b7227ba0" ><p><a href="#whatsnew1430.md-sealed-interfaces" id="whatsnew1430.md-8af2944b"   >Sealed interfaces</a> and <a href="#whatsnew1430.md-package-wide-sealed-class-hierarchies" id="whatsnew1430.md-b7528776"   >sealed class improvements</a></p></li><li class="list__item" id="whatsnew1430.md-50039eb7" ><a href="#whatsnew1430.md-improved-inline-classes" id="whatsnew1430.md-3bdcc0ba"   >Improved inline classes</a></li></ul><p id="whatsnew1430.md-a5dcb4e5" >To enable these language features and improvements in preview mode, you need to opt in by adding specific compiler options. See the sections below for details.</p><p id="whatsnew1430.md-d5486a4e" >Learn more about the new features preview in <a href="https://blog.jetbrains.com/kotlin/2021/01/new-language-features-preview-in-kotlin-1-4-30" id="whatsnew1430.md-4cd5e648"   data-external="true" rel="noopener noreferrer" >this blog post</a>.</p><section class="chapter"  ><h3 id="whatsnew1430.md-jvm-records-support" data-toc="whatsnew1430#whatsnew1430.md-jvm-records-support"  >JVM records support</h3><aside data-type="warning" class="prompt" data-title="" id="whatsnew1430.md-d4128f20"><p id="whatsnew1430.md-18806281" >The JVM records feature is <a href="#components-stability.md" id="whatsnew1430.md-cb63fbe3"   >Experimental</a>. It may be dropped or changed at any time. Opt-in is required (see the details below), and you should use it only for evaluation purposes. We would appreciate your feedback on it in <a href="https://youtrack.jetbrains.com/issue/KT-42430" id="whatsnew1430.md-807c6551"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="whatsnew1430.md-4a4600a6" >The <a href="https://openjdk.java.net/projects/jdk/16/" id="whatsnew1430.md-931a1a2f"   data-external="true" rel="noopener noreferrer" >JDK 16 release</a> includes plans to stabilize a new Java class type called <a href="https://openjdk.java.net/jeps/395" id="whatsnew1430.md-29f9d17b"   data-external="true" rel="noopener noreferrer" >record</a>. To provide all the benefits of Kotlin and maintain its interoperability with Java, Kotlin is introducing experimental record class support.</p><p id="whatsnew1430.md-15cb983a" >You can use record classes that are declared in Java just like classes with properties in Kotlin. No additional steps are required.</p><p id="whatsnew1430.md-50ca7173" >Starting with 1.4.30, you can declare the record class in Kotlin using the <code class="code " id="whatsnew1430.md-e110c6b5"  >@JvmRecord</code> annotation for a <a href="#data-classes.md" id="whatsnew1430.md-ed18335a"   >data class</a>:</p><div class="code-block" data-lang="kotlin" id="whatsnew1430.md-5770d860"         >@JvmRecord\ndata class User(val name: String, val age: Int)\n</div><p id="whatsnew1430.md-24740494" >To try the preview version of JVM records, add the compiler options <code class="code " id="whatsnew1430.md-73cb4973"  >-Xjvm-enable-preview</code> and <code class="code " id="whatsnew1430.md-58799635"  >-language-version 1.5</code>.</p><p id="whatsnew1430.md-5787e546" >We’re continuing to work on JVM records support and we’d be very grateful if you would share your feedback with us using this <a href="https://youtrack.jetbrains.com/issue/KT-42430" id="whatsnew1430.md-580138c2"   data-external="true" rel="noopener noreferrer" >YouTrack ticket</a>.</p><p id="whatsnew1430.md-866db3ef" >Learn more about implementation, restrictions, and the syntax in <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/jvm-records.md" id="whatsnew1430.md-c0a49946"   data-external="true" rel="noopener noreferrer" >KEEP</a>.</p></section><section class="chapter"  ><h3 id="whatsnew1430.md-sealed-interfaces" data-toc="whatsnew1430#whatsnew1430.md-sealed-interfaces"  >Sealed interfaces</h3><aside data-type="warning" class="prompt" data-title="" id="whatsnew1430.md-20de9d60"><p id="whatsnew1430.md-e16f129f" >Sealed interfaces are <a href="#components-stability.md" id="whatsnew1430.md-57585ec5"   >Experimental</a>. They may be dropped or changed at any time. Opt-in is required (see the details below), and you should use them only for evaluation purposes. We would appreciate your feedback on them in <a href="https://youtrack.jetbrains.com/issue/KT-42433" id="whatsnew1430.md-f598042c"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="whatsnew1430.md-6e7af02f" >In Kotlin 1.4.30, we’re shipping the prototype of <em id="whatsnew1430.md-17ef2740" class=""  >sealed interfaces</em>. They complement sealed classes and make it possible to build more flexible restricted class hierarchies.</p><p id="whatsnew1430.md-810cfbdb" >They can serve as “internal” interfaces that cannot be implemented outside the same module. You can rely on that fact, for example, to write exhaustive <code class="code " id="whatsnew1430.md-ca9e3f0f"  >when</code> expressions.</p><div class="code-block" data-lang="kotlin" id="whatsnew1430.md-77c55d8d"         >sealed interface Polygon\n\nclass Rectangle(): Polygon\nclass Triangle(): Polygon\n\n// when() is exhaustive: no other polygon implementations can appear\n// after the module is compiled\nfun draw(polygon: Polygon) = when (polygon) {\n    is Rectangle -&gt; // ...\n    is Triangle -&gt; // ...\n}\n\n</div><p id="whatsnew1430.md-9d54aeb" >Another use-case: with sealed interfaces, you can inherit a class from two or more sealed superclasses.</p><div class="code-block" data-lang="kotlin" id="whatsnew1430.md-301617d8"         >sealed interface Fillable {\n   fun fill()\n}\nsealed interface Polygon {\n   val vertices: List&lt;Point&gt;\n}\n\nclass Rectangle(override val vertices: List&lt;Point&gt;): Fillable, Polygon {\n   override fun fill() { /*...*/ }\n}\n</div><p id="whatsnew1430.md-f71da907" >To try the preview version of sealed interfaces, add the compiler option <code class="code " id="whatsnew1430.md-330b9649"  >-language-version 1.5</code>. Once you switch to this version, you’ll be able to use the <code class="code " id="whatsnew1430.md-8aeae821"  >sealed</code> modifier on interfaces. We’d be very grateful if you would share your feedback with us using this <a href="https://youtrack.jetbrains.com/issue/KT-42433" id="whatsnew1430.md-cc60bed6"   data-external="true" rel="noopener noreferrer" >YouTrack ticket</a>.</p><p id="whatsnew1430.md-a9ad70be" ><a href="#sealed-classes.md-sealed-interfaces" id="whatsnew1430.md-9f3411f6"   >Learn more about sealed interfaces</a>.</p></section><section class="chapter"  ><h3 id="whatsnew1430.md-package-wide-sealed-class-hierarchies" data-toc="whatsnew1430#whatsnew1430.md-package-wide-sealed-class-hierarchies"  >Package-wide sealed class hierarchies</h3><aside data-type="warning" class="prompt" data-title="" id="whatsnew1430.md-e5f242de"><p id="whatsnew1430.md-773f3855" >Package-wide hierarchies of sealed classes are <a href="#components-stability.md" id="whatsnew1430.md-810cd353"   >Experimental</a>. They may be dropped or changed at any time. Opt-in is required (see the details below), and you should use them only for evaluation purposes. We would appreciate your feedback on them in <a href="https://youtrack.jetbrains.com/issue/KT-42433" id="whatsnew1430.md-99b4ae00"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="whatsnew1430.md-88042c1e" >Sealed classes can now form more flexible hierarchies. They can have subclasses in all files of the same compilation unit and the same package. Previously, all subclasses had to appear in the same file.</p><p id="whatsnew1430.md-27470e73" >Direct subclasses may be top-level or nested inside any number of other named classes, named interfaces, or named objects. The subclasses of a sealed class must have a name that is properly qualified – they cannot be local nor anonymous objects.</p><p id="whatsnew1430.md-a014e581" >To try package-wide hierarchies of sealed classes, add the compiler option <code class="code " id="whatsnew1430.md-3c6ba9ff"  >-language-version 1.5</code>. We’d be very grateful if you would share your feedback with us using this <a href="https://youtrack.jetbrains.com/issue/KT-42433" id="whatsnew1430.md-5e16e9a3"   data-external="true" rel="noopener noreferrer" >YouTrack ticket</a>.</p><p id="whatsnew1430.md-4fabd459" ><a href="#sealed-classes.md-additional-location-the-same-package" id="whatsnew1430.md-89b4b00"   >Learn more about package-wide hierarchies of sealed classes</a>.</p></section><section class="chapter"  ><h3 id="whatsnew1430.md-improved-inline-classes" data-toc="whatsnew1430#whatsnew1430.md-improved-inline-classes"  >Improved inline classes</h3><aside data-type="warning" class="prompt" data-title="" id="whatsnew1430.md-91b954f"><p id="whatsnew1430.md-ca555f5" >Inline value classes are in <a href="#components-stability.md" id="whatsnew1430.md-b4db5ff8"   >Beta</a>. They are almost stable, but migration steps may be required in the future. We\'ll do our best to minimize any changes you have to make. We would appreciate your feedback on the inline classes feature in <a href="https://youtrack.jetbrains.com/issue/KT-42434" id="whatsnew1430.md-c7be802a"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="whatsnew1430.md-6b4001e0" >Kotlin 1.4.30 promotes <a href="#inline-classes.md" id="whatsnew1430.md-3597caa"   >inline classes</a> to <a href="#components-stability.md" id="whatsnew1430.md-1b376af5"   >Beta</a> and brings the following features and improvements to them:</p><ul class="list _ul" id="whatsnew1430.md-1a7a99e2"   ><li class="list__item" id="whatsnew1430.md-8dfa104a" ><p id="whatsnew1430.md-930e36e7" >Since inline classes are <a href="https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/doc-files/ValueBased.html" id="whatsnew1430.md-da13cee1"   data-external="true" rel="noopener noreferrer" >value-based</a>, you can define them using the <code class="code " id="whatsnew1430.md-5ef9fb1"  >value</code> modifier. The <code class="code " id="whatsnew1430.md-b8312923"  >inline</code> and <code class="code " id="whatsnew1430.md-3faf8c26"  >value</code> modifiers are now equivalent to each other. In future Kotlin versions, we’re planning to deprecate the <code class="code " id="whatsnew1430.md-7bdfd0ad"  >inline</code> modifier.</p><p id="whatsnew1430.md-c9b0e431" >From now on, Kotlin requires the <code class="code " id="whatsnew1430.md-75f57794"  >@JvmInline</code> annotation before a class declaration for the JVM backend:</p><div class="code-block" data-lang="kotlin" id="whatsnew1430.md-31b9db39"         >inline class Name(private val s: String)\n\nvalue class Name(private val s: String)\n\n// For JVM backends\n@JvmInline\nvalue class Name(private val s: String)\n</div></li><li class="list__item" id="whatsnew1430.md-97d42f5c" ><p id="whatsnew1430.md-9606ffae" >Inline classes can have <code class="code " id="whatsnew1430.md-c0f6f92a"  >init</code> blocks. You can add code to be executed right after the class is instantiated:</p><div class="code-block" data-lang="kotlin" id="whatsnew1430.md-d8940f8e"         >@JvmInline\nvalue class Negative(val x: Int) {\n  init {\n      require(x &lt; 0) { }\n  }\n}\n</div></li><li class="list__item" id="whatsnew1430.md-10e6e9fa" ><p id="whatsnew1430.md-72845109" >Calling functions with inline classes from Java code: before Kotlin 1.4.30, you couldn\'t call functions that accept inline classes from Java because of mangling. From now on, you can disable mangling manually. To call such functions from Java code, you should add the <code class="code " id="whatsnew1430.md-23bd36e9"  >@JvmName</code> annotation before the function declaration:</p><div class="code-block" data-lang="kotlin" id="whatsnew1430.md-f00166b3"         >inline class UInt(val x: Int)\n\nfun compute(x: Int) { }\n\n@JvmName(&quot;computeUInt&quot;)\nfun compute(x: UInt) { }\n</div></li><li class="list__item" id="whatsnew1430.md-2c60f0cc" ><p id="whatsnew1430.md-cce628df" >In this release, we’ve changed the mangling scheme for functions to fix the incorrect behavior. These changes led to ABI changes.</p><p id="whatsnew1430.md-d978fba6" >Starting with 1.4.30, the Kotlin compiler uses a new mangling scheme by default. Use the <code class="code " id="whatsnew1430.md-63ab8a1c"  >-Xuse-14-inline-classes-mangling-scheme</code> compiler flag to force the compiler to use the old 1.4.0 mangling scheme and preserve binary compatibility.</p></li></ul><p id="whatsnew1430.md-3f8135c8" >Kotlin 1.4.30 promotes inline classes to Beta and we are planning to make them Stable in future releases. We’d be very grateful if you would share your feedback with us using this <a href="https://youtrack.jetbrains.com/issue/KT-42434" id="whatsnew1430.md-ab3b02eb"   data-external="true" rel="noopener noreferrer" >YouTrack ticket</a>.</p><p id="whatsnew1430.md-200a9b96" >To try the preview version of inline classes, add the compiler option <code class="code " id="whatsnew1430.md-348e0124"  >-Xinline-classes</code> or <code class="code " id="whatsnew1430.md-7a5bd047"  >-language-version 1.5</code>.</p><p id="whatsnew1430.md-88e871a8" >Learn more about the mangling algorithm in <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/inline-classes.md" id="whatsnew1430.md-186ca121"   data-external="true" rel="noopener noreferrer" >KEEP</a>.</p><p id="whatsnew1430.md-9183f51" ><a href="#inline-classes.md" id="whatsnew1430.md-fddb27f8"   >Learn more about inline classes</a>.</p></section></section><section class="chapter"  ><h2 id="whatsnew1430.md-kotlin-jvm" data-toc="whatsnew1430#whatsnew1430.md-kotlin-jvm"  >Kotlin/JVM</h2><section class="chapter"  ><h3 id="whatsnew1430.md-jvm-ir-compiler-backend-reaches-beta" data-toc="whatsnew1430#whatsnew1430.md-jvm-ir-compiler-backend-reaches-beta"  >JVM IR compiler backend reaches Beta</h3><p id="whatsnew1430.md-f2b1a03a" >The <a href="#whatsnew14.md-unified-backends-and-extensibility" id="whatsnew1430.md-845bf2fc"   >IR-based compiler backend</a> for Kotlin/JVM, which was presented in 1.4.0 in <a href="#components-stability.md" id="whatsnew1430.md-726bd2db"   >Alpha</a>, has reached Beta. This is the last pre-stable level before the IR backend becomes the default for the Kotlin/JVM compiler.</p><p id="whatsnew1430.md-8eb45b18" >We’re now dropping the restriction on consuming binaries produced by the IR compiler. Previously, you could use code compiled by the new JVM IR backend only if you had enabled the new backend. Starting from 1.4.30, there is no such limitation, so you can use the new backend to build components for third-party use, such as libraries. Try the Beta version of the new backend and share your feedback in our <a href="https://kotl.in/issue" id="whatsnew1430.md-9c898e8e"   data-external="true" rel="noopener noreferrer" >issue tracker</a>.</p><p id="whatsnew1430.md-9c13c776" >To enable the new JVM IR backend, add the following lines to the project’s configuration file:</p><ul class="list _ul" id="whatsnew1430.md-f370776f"   ><li class="list__item" id="whatsnew1430.md-e67f53df" ><p id="whatsnew1430.md-eb0a6bbf" >In Gradle:</p><div class="tabs" id="whatsnew1430.md-dd84f911" ><div class="tabs__content" data-gtm="tab" id="whatsnew1430.md-41d01130"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="whatsnew1430.md-41d01130"   data-title="Groovy"      >tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile) {\n  kotlinOptions.useIR = true\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="whatsnew1430.md-a236413d"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="whatsnew1430.md-a236413d"   data-title="Kotlin"      >tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile::class) {\n  kotlinOptions.useIR = true\n}\n</div></div></div></li><li class="list__item" id="whatsnew1430.md-641db2bb" ><p id="whatsnew1430.md-acd59053" >In Maven:</p><div class="code-block" data-lang="markup" id="whatsnew1430.md-1988d3fd"         >&lt;configuration&gt;\n    &lt;args&gt;\n        &lt;arg&gt;-Xuse-ir&lt;/arg&gt;\n    &lt;/args&gt;\n&lt;/configuration&gt;\n</div></li></ul><p id="whatsnew1430.md-d16766c6" >Learn more about the changes that the JVM IR backend brings in <a href="https://blog.jetbrains.com/kotlin/2021/01/the-jvm-backend-is-in-beta-let-s-make-it-stable-together" id="whatsnew1430.md-b4f6ed26"   data-external="true" rel="noopener noreferrer" >this blog post</a>.</p></section></section><section class="chapter"  ><h2 id="whatsnew1430.md-kotlin-native" data-toc="whatsnew1430#whatsnew1430.md-kotlin-native"  >Kotlin/Native</h2><section class="chapter"  ><h3 id="whatsnew1430.md-performance-improvements" data-toc="whatsnew1430#whatsnew1430.md-performance-improvements"  >Performance improvements</h3><p id="whatsnew1430.md-8d6e96de" >Kotlin/Native has received a variety of performance improvements in 1.4.30, which has resulted in faster compilation times. For example, the time required to rebuild the framework in the <a href="https://github.com/kotlin-hands-on/kmm-networking-and-data-storage/tree/final" id="whatsnew1430.md-e1e41af9"   data-external="true" rel="noopener noreferrer" >KMM Networking and Data Storage sample</a> has decreased from 9.5 seconds (in 1.4.10) to 4.5 seconds (in 1.4.30).</p></section><section class="chapter"  ><h3 id="whatsnew1430.md-apple-watchos-64-bit-simulator-target" data-toc="whatsnew1430#whatsnew1430.md-apple-watchos-64-bit-simulator-target"  >Apple watchOS 64-bit simulator target</h3><p id="whatsnew1430.md-1e9f77e9" >The x86 simulator target has been deprecated for watchOS since version 7.0. To keep up with the latest watchOS versions, Kotlin/Native has the new target <code class="code " id="whatsnew1430.md-a13d407e"  >watchosX64</code> for running the simulator on 64-bit architecture.</p></section><section class="chapter"  ><h3 id="whatsnew1430.md-support-for-xcode-12-2-libraries" data-toc="whatsnew1430#whatsnew1430.md-support-for-xcode-12-2-libraries"  >Support for Xcode 12.2 libraries</h3><p id="whatsnew1430.md-a0ab87be" >We have added support for the new libraries delivered with Xcode 12.2. You can now use them from Kotlin code.</p></section></section><section class="chapter"  ><h2 id="whatsnew1430.md-kotlin-js" data-toc="whatsnew1430#whatsnew1430.md-kotlin-js"  >Kotlin/JS</h2><section class="chapter"  ><h3 id="whatsnew1430.md-lazy-initialization-of-top-level-properties" data-toc="whatsnew1430#whatsnew1430.md-lazy-initialization-of-top-level-properties"  >Lazy initialization of top-level properties</h3><aside data-type="warning" class="prompt" data-title="" id="whatsnew1430.md-a284b447"><p id="whatsnew1430.md-cf41f268" >Lazy initialization of top-level properties is <a href="#components-stability.md" id="whatsnew1430.md-4e5e297f"   >Experimental</a>. It may be dropped or changed at any time. Opt-in is required (see the details below), and you should use it only for evaluation purposes. We would appreciate your feedback on it in <a href="https://youtrack.jetbrains.com/issue/KT-44320" id="whatsnew1430.md-849ff102"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="whatsnew1430.md-b927a515" >The <a href="#js-ir-compiler.md" id="whatsnew1430.md-82682c03"   >IR backend</a> for Kotlin/JS is receiving a prototype implementation of lazy initialization for top-level properties. This reduces the need to initialize all top-level properties when the application starts, and it should significantly improve application start-up times.</p><p id="whatsnew1430.md-a8c609c8" >We’ll keep working on the lazy initialization, and we ask you to try the current prototype and share your thoughts and results in this <a href="https://youtrack.jetbrains.com/issue/KT-44320" id="whatsnew1430.md-79d1a8d"   data-external="true" rel="noopener noreferrer" >YouTrack ticket</a> or the <a href="https://kotlinlang.slack.com/archives/C0B8L3U69" id="whatsnew1430.md-dea9dc"   data-external="true" rel="noopener noreferrer" ><code class="code " id="whatsnew1430.md-aab70776"  >#javascript</code></a> channel in the official <a href="https://kotlinlang.slack.com" id="whatsnew1430.md-ad616bbd"   data-external="true" rel="noopener noreferrer" >Kotlin Slack</a> (get an invite <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" id="whatsnew1430.md-e56ac62d"   data-external="true" rel="noopener noreferrer" >here</a> ).</p><p id="whatsnew1430.md-ca3bf6e5" >To use the lazy initialization, add the <code class="code " id="whatsnew1430.md-79a684a6"  >-Xir-property-lazy-initialization</code> compiler option when compiling the code with the JS IR compiler.</p></section></section><section class="chapter"  ><h2 id="whatsnew1430.md-gradle-project-improvements" data-toc="whatsnew1430#whatsnew1430.md-gradle-project-improvements"  >Gradle project improvements</h2><section class="chapter"  ><h3 id="whatsnew1430.md-support-the-gradle-configuration-cache" data-toc="whatsnew1430#whatsnew1430.md-support-the-gradle-configuration-cache"  >Support the Gradle configuration cache</h3><p id="whatsnew1430.md-ea9420af" >Starting with 1.4.30, the Kotlin Gradle plugin supports the <a href="https://docs.gradle.org/current/userguide/configuration_cache.html" id="whatsnew1430.md-b6c35cec"   data-external="true" rel="noopener noreferrer" >configuration cache</a> feature. It speeds up the build process: once you run the command, Gradle executes the configuration phase and calculates the task graph. Gradle caches the result and reuses it for subsequent builds.</p><p id="whatsnew1430.md-55afd0e" >To start using this feature, you can <a href="https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:usage" id="whatsnew1430.md-2b5a016"   data-external="true" rel="noopener noreferrer" >use the Gradle command</a> or <a href="https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:ide:intellij" id="whatsnew1430.md-af019d3a"   data-external="true" rel="noopener noreferrer" >set up the IntelliJ based IDE</a>.</p></section></section><section class="chapter"  ><h2 id="whatsnew1430.md-standard-library" data-toc="whatsnew1430#whatsnew1430.md-standard-library"  >Standard library</h2><section class="chapter"  ><h3 id="whatsnew1430.md-locale-agnostic-api-for-upper-lowercasing-text" data-toc="whatsnew1430#whatsnew1430.md-locale-agnostic-api-for-upper-lowercasing-text"  >Locale-agnostic API for upper/lowercasing text</h3><aside data-type="warning" class="prompt" data-title="" id="whatsnew1430.md-c3d51da6"><p id="whatsnew1430.md-3b2a36cd" >The locale-agnostic API feature is <a href="#components-stability.md" id="whatsnew1430.md-25b8359f"   >Experimental</a>. It may be dropped or changed at any time. Use it only for evaluation purposes. We would appreciate your feedback on it in <a href="https://youtrack.jetbrains.com/issue/KT-42437" id="whatsnew1430.md-dc5437ee"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="whatsnew1430.md-bc8f20db" >This release introduces the experimental locale-agnostic API for changing the case of strings and characters. The current <code class="code " id="whatsnew1430.md-97164175"  >toLowerCase()</code>, <code class="code " id="whatsnew1430.md-a813da60"  >toUpperCase()</code>, <code class="code " id="whatsnew1430.md-d6e72e31"  >capitalize()</code>, <code class="code " id="whatsnew1430.md-be9a45c6"  >decapitalize()</code> API functions are locale-sensitive. This means that different platform locale settings can affect code behavior. For example, in the Turkish locale, when the string “kotlin” is converted using <code class="code " id="whatsnew1430.md-fd76c6b8"  >toUpperCase</code>, the result is &quot;KOTLİN&quot;, not &quot;KOTLIN&quot;.</p><div class="code-block" data-lang="kotlin" id="whatsnew1430.md-589be1f2"         >// current API\nprintln(&quot;Needs to be capitalized&quot;.toUpperCase()) // NEEDS TO BE CAPITALIZED\n\n// new API\nprintln(&quot;Needs to be capitalized&quot;.uppercase()) // NEEDS TO BE CAPITALIZED\n</div><p id="whatsnew1430.md-5b119363" >Kotlin 1.4.30 provides the following alternatives:</p><ul class="list _ul" id="whatsnew1430.md-264b5cae"   ><li class="list__item" id="whatsnew1430.md-7221fa6c" ><p id="whatsnew1430.md-280c02e0" >For <code class="code " id="whatsnew1430.md-4c0e8e43"  >String</code> functions:</p><div class="table-wrapper" ><table class=" wide" id="whatsnew1430.md-9edd227b"  ><thead><tr class="ijRowHead" id="whatsnew1430.md-5d93b092" ><th id="whatsnew1430.md-7c244e56"    ><b id="whatsnew1430.md-a9618891" class=""  >Earlier versions</b></th><th id="whatsnew1430.md-c415e18b"    ><b id="whatsnew1430.md-4a614f93" class=""  >1.4.30 alternative</b></th></tr></thead><tbody ><tr class="" id="whatsnew1430.md-54606f17" ><td id="whatsnew1430.md-745b34f3"    ><code class="code " id="whatsnew1430.md-8565cbc6"  >String.toUpperCase()</code></td><td id="whatsnew1430.md-c08422cb"    ><code class="code " id="whatsnew1430.md-f86f63b4"  >String.uppercase()</code></td></tr><tr class="" id="whatsnew1430.md-4a4e8f1c" ><td id="whatsnew1430.md-c5c861ef"    ><code class="code " id="whatsnew1430.md-f497d14b"  >String.toLowerCase()</code></td><td id="whatsnew1430.md-293027fa"    ><code class="code " id="whatsnew1430.md-f533a2a"  >String.lowercase()</code></td></tr><tr class="" id="whatsnew1430.md-6d847c3d" ><td id="whatsnew1430.md-1ec2fcda"    ><code class="code " id="whatsnew1430.md-304b01ac"  >String.capitalize()</code></td><td id="whatsnew1430.md-1b64e14f"    ><code class="code " id="whatsnew1430.md-208bc82a"  >String.replaceFirstChar { it.uppercase() }</code></td></tr><tr class="" id="whatsnew1430.md-c3dc4d3d" ><td id="whatsnew1430.md-a7c66471"    ><code class="code " id="whatsnew1430.md-b6857eb3"  >String.decapitalize()</code></td><td id="whatsnew1430.md-f6f3cf89"    ><code class="code " id="whatsnew1430.md-dbbe6bb8"  >String.replaceFirstChar { it.lowercase() }</code></td></tr></tbody ></table ></div></li><li class="list__item" id="whatsnew1430.md-9571a10f" ><p id="whatsnew1430.md-3a82ac99" >For <code class="code " id="whatsnew1430.md-2a0fdcde"  >Char</code> functions:</p><div class="table-wrapper" ><table class=" wide" id="whatsnew1430.md-1de1b2d4"  ><thead><tr class="ijRowHead" id="whatsnew1430.md-1ceed3d9" ><th id="whatsnew1430.md-385c64c0"    ><b id="whatsnew1430.md-795450e9" class=""  >Earlier versions</b></th><th id="whatsnew1430.md-717a9661"    ><b id="whatsnew1430.md-e9c8c666" class=""  >1.4.30 alternative</b></th></tr></thead><tbody ><tr class="" id="whatsnew1430.md-764dd20b" ><td id="whatsnew1430.md-bba13d84"    ><code class="code " id="whatsnew1430.md-64c807be"  >Char.toUpperCase()</code></td><td id="whatsnew1430.md-d098b883"    ><code class="code " id="whatsnew1430.md-585f1863"  >Char.uppercaseChar(): Char</code><br/><code class="code " id="whatsnew1430.md-82d5a57"  >Char.uppercase(): String</code></td></tr><tr class="" id="whatsnew1430.md-7e0b446a" ><td id="whatsnew1430.md-427136dc"    ><code class="code " id="whatsnew1430.md-7c97a2e6"  >Char.toLowerCase()</code></td><td id="whatsnew1430.md-b9676c6f"    ><code class="code " id="whatsnew1430.md-4bd2d233"  >Char.lowercaseChar(): Char</code><br/><code class="code " id="whatsnew1430.md-970f3fbd"  >Char.lowercase(): String</code></td></tr><tr class="" id="whatsnew1430.md-79e5181f" ><td id="whatsnew1430.md-21894e8a"    ><code class="code " id="whatsnew1430.md-6b03a4e5"  >Char.toTitleCase()</code></td><td id="whatsnew1430.md-a8d677a6"    ><code class="code " id="whatsnew1430.md-c547309d"  >Char.titlecaseChar(): Char</code><br/><code class="code " id="whatsnew1430.md-2722d34"  >Char.titlecase(): String</code></td></tr></tbody ></table ></div></li></ul><aside data-type="note" class="prompt" data-title="" id="whatsnew1430.md-ecaad410" ><p id="whatsnew1430.md-728c8fc1" >For Kotlin/JVM, there are also overloaded <code class="code " id="whatsnew1430.md-81e85b68"  >uppercase()</code>, <code class="code " id="whatsnew1430.md-cba3b26"  >lowercase()</code>, and <code class="code " id="whatsnew1430.md-c559beb6"  >titlecase()</code> functions with an explicit <code class="code " id="whatsnew1430.md-afb2f7c5"  >Locale</code> parameter.</p></aside><p id="whatsnew1430.md-64b545fb" >See the full list of changes to the text processing functions in <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/stdlib/locale-agnostic-string-conversions.md" id="whatsnew1430.md-f860447d"   data-external="true" rel="noopener noreferrer" >KEEP</a>.</p></section><section class="chapter"  ><h3 id="whatsnew1430.md-clear-char-to-code-and-char-to-digit-conversions" data-toc="whatsnew1430#whatsnew1430.md-clear-char-to-code-and-char-to-digit-conversions"  >Clear Char-to-code and Char-to-digit conversions</h3><aside data-type="warning" class="prompt" data-title="" id="whatsnew1430.md-59023135"><p id="whatsnew1430.md-54ddcd4c" >The unambiguous API for the <code class="code " id="whatsnew1430.md-ed0cd75c"  >Char</code> conversion feature is <a href="#components-stability.md" id="whatsnew1430.md-a9c86e3f"   >Experimental</a>. It may be dropped or changed at any time. Use it only for evaluation purposes. We would appreciate your feedback on it in <a href="https://youtrack.jetbrains.com/issue/KT-44333" id="whatsnew1430.md-3a0949de"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="whatsnew1430.md-9d9feda5" >The current <code class="code " id="whatsnew1430.md-81573161"  >Char</code> to numbers conversion functions, which return UTF-16 codes expressed in different numeric types, are often confused with the similar String-to-Int conversion, which returns the numeric value of a string:</p><div class="code-block" data-lang="kotlin" id="whatsnew1430.md-865e1696"         >&quot;4&quot;.toInt() // returns 4\n\'4\'.toInt() // returns 52\n// and there was no common function that would return the numeric value 4 for Char \'4\'\n</div><p id="whatsnew1430.md-8302d9cd" >To avoid this confusion we\'ve decided to separate <code class="code " id="whatsnew1430.md-4d162550"  >Char</code> conversions into two following sets of clearly named functions:</p><ul class="list _ul" id="whatsnew1430.md-c297a6ef"   ><li class="list__item" id="whatsnew1430.md-8d8f98f8" ><p id="whatsnew1430.md-b54c403a" >Functions to get the integer code of <code class="code " id="whatsnew1430.md-a0540ac0"  >Char</code> and to construct <code class="code " id="whatsnew1430.md-3601f968"  >Char</code> from the given code:</p><div class="code-block" data-lang="kotlin" id="whatsnew1430.md-e17fb087"         >fun Char(code: Int): Char\nfun Char(code: UShort): Char\nval Char.code: Int\n</div></li><li class="list__item" id="whatsnew1430.md-b729270e" ><p id="whatsnew1430.md-827d4162" >Functions to convert <code class="code " id="whatsnew1430.md-65a17961"  >Char</code> to the numeric value of the digit it represents:</p><div class="code-block" data-lang="kotlin" id="whatsnew1430.md-13801cb9"         >fun Char.digitToInt(radix: Int): Int\nfun Char.digitToIntOrNull(radix: Int): Int?\n</div></li><li class="list__item" id="whatsnew1430.md-9316f4b9" ><p id="whatsnew1430.md-c30168dd" >An extension function for <code class="code " id="whatsnew1430.md-5b84fe98"  >Int</code> to convert the non-negative single digit it represents to the corresponding <code class="code " id="whatsnew1430.md-437f6c3b"  >Char</code> representation:</p><div class="code-block" data-lang="kotlin" id="whatsnew1430.md-40050742"         >fun Int.digitToChar(radix: Int): Char\n</div></li></ul><p id="whatsnew1430.md-a9113c9b" >See more details in <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/stdlib/char-int-conversions.md" id="whatsnew1430.md-2a9deb25"   data-external="true" rel="noopener noreferrer" >KEEP</a>.</p></section></section><section class="chapter"  ><h2 id="whatsnew1430.md-serialization-updates" data-toc="whatsnew1430#whatsnew1430.md-serialization-updates"  >Serialization updates</h2><p id="whatsnew1430.md-c5d2479e" >Along with Kotlin 1.4.30, we are releasing <code class="code " id="whatsnew1430.md-cfce1212"  >kotlinx.serialization</code> <a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.1.0-RC" id="whatsnew1430.md-3e6d0c9f"   data-external="true" rel="noopener noreferrer" >1.1.0-RC</a>, which includes some new features:</p><ul class="list _ul" id="whatsnew1430.md-438a741"   ><li class="list__item" id="whatsnew1430.md-fbc7a788" ><p>Inline classes serialization support</p></li><li class="list__item" id="whatsnew1430.md-80afadee" ><p>Unsigned primitive type serialization support</p></li></ul><section class="chapter"  ><h3 id="whatsnew1430.md-inline-classes-serialization-support" data-toc="whatsnew1430#whatsnew1430.md-inline-classes-serialization-support"  >Inline classes serialization support</h3><p id="whatsnew1430.md-823d2903" >Starting with Kotlin 1.4.30, you can make inline classes <a href="#serialization.md" id="whatsnew1430.md-4a280c46"   >serializable</a>:</p><div class="code-block" data-lang="kotlin" id="whatsnew1430.md-4ce9d019"         >@Serializable\ninline class Color(val rgb: Int)\n</div><aside data-type="note" class="prompt" data-title="" id="whatsnew1430.md-90907860" ><p id="whatsnew1430.md-adb8935" >The feature requires the new 1.4.30 IR compiler.</p></aside><p id="whatsnew1430.md-a991f603" >The serialization framework does not box serializable inline classes when they are used in other serializable classes.</p><p id="whatsnew1430.md-20cd6090" >Learn more in the <code class="code " id="whatsnew1430.md-8ad31b5b"  >kotlinx.serialization</code> <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/inline-classes.md#serializable-inline-classes" id="whatsnew1430.md-45bc1414"   data-external="true" rel="noopener noreferrer" >docs</a>.</p></section><section class="chapter"  ><h3 id="whatsnew1430.md-unsigned-primitive-type-serialization-support" data-toc="whatsnew1430#whatsnew1430.md-unsigned-primitive-type-serialization-support"  >Unsigned primitive type serialization support</h3><p id="whatsnew1430.md-b956ca0c" >Starting from 1.4.30, you can use standard JSON serializers of <a href="https://github.com/Kotlin/kotlinx.serialization" id="whatsnew1430.md-11248f7d"   data-external="true" rel="noopener noreferrer" >kotlinx.serialization</a> for unsigned primitive types: <code class="code " id="whatsnew1430.md-ffd3f6d"  >UInt</code>, <code class="code " id="whatsnew1430.md-7a7a5a77"  >ULong</code>, <code class="code " id="whatsnew1430.md-8661ae52"  >UByte</code>, and <code class="code " id="whatsnew1430.md-a663ac87"  >UShort</code>:</p><div class="code-block" data-lang="kotlin" id="whatsnew1430.md-b9ec6c42"         >@Serializable\nclass Counter(val counted: UByte, val description: String)\nfun main() {\n   val counted = 239.toUByte()\n   println(Json.encodeToString(Counter(counted, &quot;tries&quot;)))\n}\n</div><p id="whatsnew1430.md-17e10104" >Learn more in the <code class="code " id="whatsnew1430.md-76178519"  >kotlinx.serialization</code> <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/inline-classes.md#unsigned-types-support-json-only" id="whatsnew1430.md-c46c356c"   data-external="true" rel="noopener noreferrer" >docs</a>.</p></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="whatsnew1420.md"  >What\'s new in Kotlin 1.4.20</h1><p id="whatsnew1420.md-d552ea90" >Kotlin 1.4.20 offers a number of new experimental features and provides fixes and improvements for existing features, including those added in 1.4.0.</p><p id="whatsnew1420.md-2a06dd1c" >You can also learn about new features with more examples in <a href="https://blog.jetbrains.com/kotlin/2020/11/kotlin-1-4-20-released/" id="whatsnew1420.md-1a651b65"   data-external="true" rel="noopener noreferrer" >this blog post</a>.</p><section class="chapter"  ><h2 id="whatsnew1420.md-kotlin-jvm" data-toc="whatsnew1420#whatsnew1420.md-kotlin-jvm"  >Kotlin/JVM</h2><p id="whatsnew1420.md-d5ebad85" >Improvements of Kotlin/JVM are intended to keep it up with the features of modern Java versions:</p><ul class="list _ul" id="whatsnew1420.md-95090113"   ><li class="list__item" id="whatsnew1420.md-ed3f935b" ><a href="#whatsnew1420.md-java-15-target" id="whatsnew1420.md-a66786d3"   >Java 15 target</a></li><li class="list__item" id="whatsnew1420.md-dd8bd8ca" ><a href="#whatsnew1420.md-invokedynamic-string-concatenation" id="whatsnew1420.md-d765b745"   >invokedynamic string concatenation</a></li></ul><section class="chapter"  ><h3 id="whatsnew1420.md-java-15-target" data-toc="whatsnew1420#whatsnew1420.md-java-15-target"  >Java 15 target</h3><p id="whatsnew1420.md-6ec211fe" >Now Java 15 is available as a Kotlin/JVM target.</p></section><section class="chapter"  ><h3 id="whatsnew1420.md-invokedynamic-string-concatenation" data-toc="whatsnew1420#whatsnew1420.md-invokedynamic-string-concatenation"  >invokedynamic string concatenation</h3><aside data-type="warning" class="prompt" data-title="" id="whatsnew1420.md-ef735251"><p id="whatsnew1420.md-c3f83108" ><code class="code " id="whatsnew1420.md-9d6d000e"  >invokedynamic</code> string concatenation is <a href="#components-stability.md" id="whatsnew1420.md-c7305e6d"   >Experimental</a>. It may be dropped or changed at any time. Opt-in is required (see details below). Use it only for evaluation purposes. We appreciate your feedback on it in <a href="https://youtrack.jetbrains.com/issues/KT" id="whatsnew1420.md-efa22866"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="whatsnew1420.md-ab2500" >Kotlin 1.4.20 can compile string concatenations into <a href="https://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html#invokedynamic" id="whatsnew1420.md-6d466466"   data-external="true" rel="noopener noreferrer" >dynamic invocations</a> on JVM 9+ targets, therefore improving the performance.</p><p id="whatsnew1420.md-d07dd45a" >Currently, this feature is experimental and covers the following cases:</p><ul class="list _ul" id="whatsnew1420.md-c62271da"   ><li class="list__item" id="whatsnew1420.md-2225bf05" ><p><code class="code " id="whatsnew1420.md-29c81d92"  >String.plus</code> in the operator (<code class="code " id="whatsnew1420.md-e465499"  >a + b</code> ), explicit (<code class="code " id="whatsnew1420.md-c47ff2f4"  >a.plus(b)</code> ), and reference (<code class="code " id="whatsnew1420.md-9873055b"  >(a::plus)(b)</code>) form.</p></li><li class="list__item" id="whatsnew1420.md-e97e03c7" ><p><code class="code " id="whatsnew1420.md-d68dac17"  >toString</code> on inline and data classes.</p></li><li class="list__item" id="whatsnew1420.md-3f91d963" ><p>string templates except for ones with a single non-constant argument (see <a href="https://youtrack.jetbrains.com/issue/KT-42457" id="whatsnew1420.md-112ebc52"   data-external="true" rel="noopener noreferrer" >KT-42457</a> ).</p></li></ul><p id="whatsnew1420.md-7a5828a8" >To enable <code class="code " id="whatsnew1420.md-2b99f60a"  >invokedynamic</code> string concatenation, add the <code class="code " id="whatsnew1420.md-25a14462"  >-Xstring-concat</code> compiler option with one of the following values:</p><ul class="list _ul" id="whatsnew1420.md-bd6db596"   ><li class="list__item" id="whatsnew1420.md-d64a160d" ><p><code class="code " id="whatsnew1420.md-4ad56d69"  >indy-with-constants</code> to perform <code class="code " id="whatsnew1420.md-65adab16"  >invokedynamic</code> concatenation on strings with <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/StringConcatFactory.html#makeConcatWithConstants-java.lang.invoke.MethodHandles.Lookup-java.lang.String-java.lang.invoke.MethodType-java.lang.String-java.lang.Object...-" id="whatsnew1420.md-da0b40c5"   data-external="true" rel="noopener noreferrer" >StringConcatFactory.makeConcatWithConstants()</a>.</p></li><li class="list__item" id="whatsnew1420.md-dfd8b505" ><p><code class="code " id="whatsnew1420.md-e277619f"  >indy</code> to perform <code class="code " id="whatsnew1420.md-4226c53a"  >invokedynamic</code> concatenation on strings with <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/StringConcatFactory.html#makeConcat-java.lang.invoke.MethodHandles.Lookup-java.lang.String-java.lang.invoke.MethodType-" id="whatsnew1420.md-9f049142"   data-external="true" rel="noopener noreferrer" >StringConcatFactory.makeConcat()</a>.</p></li><li class="list__item" id="whatsnew1420.md-20f1211e" ><p><code class="code " id="whatsnew1420.md-f7b427a"  >inline</code> to switch back to the classic concatenation via <code class="code " id="whatsnew1420.md-4c9d9fd"  >StringBuilder.append()</code>.</p></li></ul></section></section><section class="chapter"  ><h2 id="whatsnew1420.md-kotlin-js" data-toc="whatsnew1420#whatsnew1420.md-kotlin-js"  >Kotlin/JS</h2><p id="whatsnew1420.md-bee11e48" >Kotlin/JS keeps evolving fast, and in 1.4.20 you can find a number experimental features and improvements:</p><ul class="list _ul" id="whatsnew1420.md-354ba317"   ><li class="list__item" id="whatsnew1420.md-1bc42d48" ><a href="#whatsnew1420.md-gradle-dsl-changes" id="whatsnew1420.md-1b42ebe3"   >Gradle DSL changes</a></li><li class="list__item" id="whatsnew1420.md-6267f769" ><a href="#whatsnew1420.md-new-wizard-templates" id="whatsnew1420.md-9bca992a"   >New Wizard templates</a></li><li class="list__item" id="whatsnew1420.md-39ccba41" ><a href="#whatsnew1420.md-ignoring-compilation-errors-with-ir-compiler" id="whatsnew1420.md-13fc94a5"   >Ignoring compilation errors with IR compiler</a></li></ul><section class="chapter"  ><h3 id="whatsnew1420.md-gradle-dsl-changes" data-toc="whatsnew1420#whatsnew1420.md-gradle-dsl-changes"  >Gradle DSL changes</h3><p id="whatsnew1420.md-52d8f5e6" >The Gradle DSL for Kotlin/JS receives a number of updates which simplify project setup and customization. This includes webpack configuration adjustments, modifications to the auto-generated <code class="code " id="whatsnew1420.md-404de289"  >package.json</code> file, and improved control over transitive dependencies.</p><section class="chapter"  ><h4 id="whatsnew1420.md-single-point-for-webpack-configuration" data-toc="whatsnew1420#whatsnew1420.md-single-point-for-webpack-configuration"  >Single point for webpack configuration</h4><p id="whatsnew1420.md-7653ba58" >A new configuration block <code class="code " id="whatsnew1420.md-3d71387e"  >commonWebpackConfig</code> is available for the browser target. Inside it, you can adjust common settings from a single point, instead of having to duplicate configurations for the <code class="code " id="whatsnew1420.md-92ddcb31"  >webpackTask</code>, <code class="code " id="whatsnew1420.md-d5bf1f85"  >runTask</code>, and <code class="code " id="whatsnew1420.md-3520f4d"  >testTask</code>.</p><p id="whatsnew1420.md-141abe92" >To enable CSS support by default for all three tasks, add the following snippet in the <code class="code " id="whatsnew1420.md-635c0d3e"  >build.gradle(.kts)</code> of your project:</p><div class="code-block" data-lang="groovy" id="whatsnew1420.md-8eef130e"         >browser {\n    commonWebpackConfig {\n        cssSupport.enabled = true\n    }\n    binaries.executable()\n}\n</div><p id="whatsnew1420.md-22995687" >Learn more about <a href="#js-project-setup.md-webpack-bundling" id="whatsnew1420.md-91dc0498"   >configuring webpack bundling</a>.</p></section><section class="chapter"  ><h4 id="whatsnew1420.md-package-json-customization-from-gradle" data-toc="whatsnew1420#whatsnew1420.md-package-json-customization-from-gradle"  >package.json customization from Gradle</h4><p id="whatsnew1420.md-5ceae6ef" >For more control over your Kotlin/JS package management and distribution, you can now add properties to the project file <a href="https://nodejs.dev/learn/the-package-json-guide" id="whatsnew1420.md-b7543c0"   data-external="true" rel="noopener noreferrer" ><code class="code " id="whatsnew1420.md-3eda726f"  >package.json</code></a> via the Gradle DSL.</p><p id="whatsnew1420.md-269acf98" >To add custom fields to your <code class="code " id="whatsnew1420.md-845eb385"  >package.json</code>, use the <code class="code " id="whatsnew1420.md-6bbb6444"  >customField</code> function in the compilation\'s <code class="code " id="whatsnew1420.md-a87ad4fb"  >packageJson</code> block:</p><div class="code-block" data-lang="kotlin" id="whatsnew1420.md-d88184f5"         >kotlin {\n    js(BOTH) {\n        compilations[&quot;main&quot;].packageJson {\n            customField(&quot;hello&quot;, mapOf(&quot;one&quot; to 1, &quot;two&quot; to 2))\n        }\n    }\n}\n</div><p id="whatsnew1420.md-1aae5d54" >Learn more about <a href="#js-project-setup.md-package-json-customization" id="whatsnew1420.md-4eac5df6"   ><code class="code " id="whatsnew1420.md-e3db5f88"  >package.json</code> customization</a>.</p></section><section class="chapter"  ><h4 id="whatsnew1420.md-selective-yarn-dependency-resolutions" data-toc="whatsnew1420#whatsnew1420.md-selective-yarn-dependency-resolutions"  >Selective yarn dependency resolutions</h4><aside data-type="warning" class="prompt" data-title="" id="whatsnew1420.md-74b4efae"><p id="whatsnew1420.md-7c4373b6" >Support for selective yarn dependency resolutions is <a href="#components-stability.md" id="whatsnew1420.md-af76e1c8"   >Experimental</a>. It may be dropped or changed at any time. Use it only for evaluation purposes. We appreciate your feedback on it in <a href="https://youtrack.jetbrains.com/issues/KT" id="whatsnew1420.md-2d8cebec"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="whatsnew1420.md-c34a95e0" >Kotlin 1.4.20 provides a way of configuring Yarn\'s <a href="https://classic.yarnpkg.com/en/docs/selective-version-resolutions/" id="whatsnew1420.md-df612c41"   data-external="true" rel="noopener noreferrer" >selective dependency resolutions</a>- the mechanism for overriding dependencies of the packages you depend on.</p><p id="whatsnew1420.md-b66da365" >You can use it through the <code class="code " id="whatsnew1420.md-9c1bd2cb"  >YarnRootExtension</code> inside the <code class="code " id="whatsnew1420.md-7310628f"  >YarnPlugin</code> in Gradle. To affect the resolved version of a package for your project, use the <code class="code " id="whatsnew1420.md-935dc33c"  >resolution</code> function passing in the package name selector (as specified by Yarn) and the version to which it should resolve.</p><div class="code-block" data-lang="kotlin" id="whatsnew1420.md-b40da299"         >rootProject.plugins.withType&lt;YarnPlugin&gt; {\n    rootProject.the&lt;YarnRootExtension&gt;().apply {\n        resolution(&quot;react&quot;, &quot;16.0.0&quot;)\n        resolution(&quot;processor/decamelize&quot;, &quot;3.0.0&quot;)\n    }\n}\n</div><p id="whatsnew1420.md-7dd0329" >Here, <em id="whatsnew1420.md-237ea7a5" class=""  >all</em> of your npm dependencies which require <code class="code " id="whatsnew1420.md-fe2cef4e"  >react</code> will receive version <code class="code " id="whatsnew1420.md-3ad526ef"  >16.0.0</code>, and <code class="code " id="whatsnew1420.md-64bc7f41"  >processor</code> will receive its dependency <code class="code " id="whatsnew1420.md-1139bc3a"  >decamelize</code> as version <code class="code " id="whatsnew1420.md-62715c78"  >3.0.0</code>.</p></section><section class="chapter"  ><h4 id="whatsnew1420.md-disabling-granular-workspaces" data-toc="whatsnew1420#whatsnew1420.md-disabling-granular-workspaces"  >Disabling granular workspaces</h4><aside data-type="warning" class="prompt" data-title="" id="whatsnew1420.md-1a1c519b"><p id="whatsnew1420.md-59b65294" >Disabling granular workspaces is <a href="#components-stability.md" id="whatsnew1420.md-7418bb15"   >Experimental</a>. It may be dropped or changed at any time. Use it only for evaluation purposes. We appreciate your feedback on it in <a href="https://youtrack.jetbrains.com/issues/KT" id="whatsnew1420.md-11366244"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="whatsnew1420.md-73ca699a" >To speed up build times, the Kotlin/JS Gradle plugin only installs the dependencies which are required for a particular Gradle task. For example, the <code class="code " id="whatsnew1420.md-caa05544"  >webpack-dev-server</code> package is only installed when you execute one of the <code class="code " id="whatsnew1420.md-58fb2572"  >*Run</code> tasks, and not when you execute the assemble task. Such behavior can potentially bring problems when you run multiple Gradle processes in parallel. When the dependency requirements clash, the two installations of npm packages can cause errors.</p><p id="whatsnew1420.md-1ed2693e" >To resolve this issue, Kotlin 1.4.20 includes an option to disable these so-called <em id="whatsnew1420.md-46d14617" class=""  >granular workspaces</em>. This feature is currently available through the <code class="code " id="whatsnew1420.md-7c7c50a1"  >YarnRootExtension</code> inside the <code class="code " id="whatsnew1420.md-760f6e05"  >YarnPlugin</code> in Gradle. To use it, add the following snippet to your <code class="code " id="whatsnew1420.md-c585b3a3"  >build.gradle.kts</code> file:</p><div class="code-block" data-lang="kotlin" id="whatsnew1420.md-330a7b10"         >rootProject.plugins.withType&lt;YarnPlugin&gt; {\n    rootProject.the&lt;YarnRootExtension&gt;().disableGranularWorkspaces()\n}\n</div></section></section><section class="chapter"  ><h3 id="whatsnew1420.md-new-wizard-templates" data-toc="whatsnew1420#whatsnew1420.md-new-wizard-templates"  >New Wizard templates</h3><p id="whatsnew1420.md-8fef5904" >To give you more convenient ways to customize your project during creation, the project wizard for Kotlin comes with new templates for Kotlin/JS applications:</p><ul class="list _ul" id="whatsnew1420.md-31c8b03e"   ><li class="list__item" id="whatsnew1420.md-9707d58" ><p><b id="whatsnew1420.md-76a82c39" class=""  >Browser Application</b>- a minimal Kotlin/JS Gradle project that runs in the browser.</p></li><li class="list__item" id="whatsnew1420.md-e9f470db" ><p><b id="whatsnew1420.md-63e217ce" class=""  >React Application</b>- a React app that uses the appropriate <code class="code " id="whatsnew1420.md-dbb6a71d"  >kotlin-wrappers</code>. It provides options to enable integrations for style-sheets, navigational components, or state containers.</p></li><li class="list__item" id="whatsnew1420.md-dc25aa20" ><p><b id="whatsnew1420.md-c5adc905" class=""  >Node.js Application</b>- a minimal project for running in a Node.js runtime. It comes with the option to directly include the experimental <code class="code " id="whatsnew1420.md-90b2bc6a"  >kotlinx-nodejs</code> package.</p></li></ul><p id="whatsnew1420.md-45566102" >Learn how to <a href="#js-get-started.md" id="whatsnew1420.md-8fc23d91"   >create Kotlin/JS applications from templates</a>.</p></section><section class="chapter"  ><h3 id="whatsnew1420.md-ignoring-compilation-errors-with-ir-compiler" data-toc="whatsnew1420#whatsnew1420.md-ignoring-compilation-errors-with-ir-compiler"  >Ignoring compilation errors with IR compiler</h3><aside data-type="warning" class="prompt" data-title="" id="whatsnew1420.md-24993260"><p id="whatsnew1420.md-d9fcf5cf" ><em id="whatsnew1420.md-209a8819" class=""  >Ignore compilation errors</em> mode is <a href="#components-stability.md" id="whatsnew1420.md-4f52c53b"   >Experimental</a>. It may be dropped or changed at any time. Opt-in is required (see details below). Use it only for evaluation purposes. We appreciate your feedback on it in <a href="https://youtrack.jetbrains.com/issues/KT" id="whatsnew1420.md-9a1949f"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="whatsnew1420.md-39906c05" >The <a href="#js-ir-compiler.md" id="whatsnew1420.md-a168ab6c"   >IR compiler</a> for Kotlin/JS comes with a new experimental mode - <em id="whatsnew1420.md-b4dd0993" class=""  >compilation with errors</em>. In this mode, you can run you code even if it contains errors, for example, if you want to try certain things it when the whole application is not ready yet.</p><p id="whatsnew1420.md-d8d07e60" >There are two tolerance policies for this mode:</p><ul class="list _ul" id="whatsnew1420.md-f1c667e7"   ><li class="list__item" id="whatsnew1420.md-9c35ec31" ><p id="whatsnew1420.md-3639eaf7" ><code class="code " id="whatsnew1420.md-a600227d"  >SEMANTIC</code>: the compiler will accept code which is syntactically correct, but doesn\'t make sense semantically, such as <code class="code " id="whatsnew1420.md-5a5427e1"  >val x: String = 3</code>.</p></li><li class="list__item" id="whatsnew1420.md-d06d2d3c" ><p id="whatsnew1420.md-f829ce17" ><code class="code " id="whatsnew1420.md-121f56a1"  >SYNTAX</code>: the compiler will accept any code, even if it contains syntax errors.</p></li></ul><p id="whatsnew1420.md-35673cfb" >To allow compilation with errors, add the <code class="code " id="whatsnew1420.md-d8c445b4"  >-Xerror-tolerance-policy=</code> compiler option with one of the values listed above.</p><p id="whatsnew1420.md-8418ea90" >Learn more about <a href="#js-ir-compiler.md-ignoring-compilation-errors" id="whatsnew1420.md-c59e671e"   >ignoring compilation errors</a> with Kotlin/JS IR compiler.</p></section></section><section class="chapter"  ><h2 id="whatsnew1420.md-kotlin-native" data-toc="whatsnew1420#whatsnew1420.md-kotlin-native"  >Kotlin/Native</h2><p id="whatsnew1420.md-cd282f76" >Kotlin/Native\'s priorities in 1.4.20 are performance and polishing existing features. These are the notable improvements:</p><ul class="list _ul" id="whatsnew1420.md-6c2ce529"   ><li class="list__item" id="whatsnew1420.md-b5bc3417" ><a href="#whatsnew1420.md-escape-analysis" id="whatsnew1420.md-21a52b09"   >Escape analysis</a></li><li class="list__item" id="whatsnew1420.md-73875fd9" ><a href="#whatsnew1420.md-performance-improvements-and-bug-fixes" id="whatsnew1420.md-e8b4d3fe"   >Performance improvements and bug fixes</a></li><li class="list__item" id="whatsnew1420.md-2a00f76" ><a href="#whatsnew1420.md-opt-in-wrapping-of-objective-c-exceptions" id="whatsnew1420.md-eeab4625"   >Opt-in wrapping of Objective-C exceptions</a></li><li class="list__item" id="whatsnew1420.md-4e33462" ><a href="#whatsnew1420.md-cocoapods-plugin-improvements" id="whatsnew1420.md-cc9d4b57"   >CocoaPods plugin improvements</a></li><li class="list__item" id="whatsnew1420.md-c6d15480" ><a href="#whatsnew1420.md-support-for-xcode-12-libraries" id="whatsnew1420.md-b8467e1"   >Support for Xcode 12 libraries</a></li></ul><section class="chapter"  ><h3 id="whatsnew1420.md-escape-analysis" data-toc="whatsnew1420#whatsnew1420.md-escape-analysis"  >Escape analysis</h3><aside data-type="warning" class="prompt" data-title="" id="whatsnew1420.md-79e0a2fa"><p id="whatsnew1420.md-7ce674e3" >The escape analysis mechanism is <a href="#components-stability.md" id="whatsnew1420.md-ab3db1c4"   >Experimental</a>. It may be dropped or changed at any time. Use it only for evaluation purposes. We appreciate your feedback on it in <a href="https://youtrack.jetbrains.com/issues/KT" id="whatsnew1420.md-f58810ba"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="whatsnew1420.md-e93f5a70" >Kotlin/Native receives a prototype of the new <a href="https://en.wikipedia.org/wiki/Escape_analysis" id="whatsnew1420.md-2acc62cf"   data-external="true" rel="noopener noreferrer" >escape analysis</a> mechanism. It improves the runtime performance by allocating certain objects on the stack instead of the heap. This mechanism shows a 10% average performance increase on our benchmarks, and we continue improving it so that it speeds up the program even more.</p><p id="whatsnew1420.md-42e5813c" >The escape analysis runs in a separate compilation phase for the release builds (with the <code class="code " id="whatsnew1420.md-c14effc3"  >-opt</code> compiler option).</p><p id="whatsnew1420.md-8bb1937d" >If you want to disable the escape analysis phase, use the <code class="code " id="whatsnew1420.md-6f77bbd3"  >-Xdisable-phases=EscapeAnalysis</code> compiler option.</p></section><section class="chapter"  ><h3 id="whatsnew1420.md-performance-improvements-and-bug-fixes" data-toc="whatsnew1420#whatsnew1420.md-performance-improvements-and-bug-fixes"  >Performance improvements and bug fixes</h3><p id="whatsnew1420.md-21feaad6" >Kotlin/Native receives performance improvements and bug fixes in various components, including the ones added in 1.4.0, for example, the <a href="#mpp-share-on-platforms.md-share-code-on-similar-platforms" id="whatsnew1420.md-95c03cdd"   >code sharing mechanism</a>.</p></section><section class="chapter"  ><h3 id="whatsnew1420.md-opt-in-wrapping-of-objective-c-exceptions" data-toc="whatsnew1420#whatsnew1420.md-opt-in-wrapping-of-objective-c-exceptions"  >Opt-in wrapping of Objective-C exceptions</h3><aside data-type="warning" class="prompt" data-title="" id="whatsnew1420.md-578420e1"><p id="whatsnew1420.md-aa3cf282" >The Objective-C exception wrapping mechanism is <a href="#components-stability.md" id="whatsnew1420.md-a404ab2f"   >Experimental</a>. It may be dropped or changed at any time. Opt-in is required (see details below). Use it only for evaluation purposes. We appreciate your feedback on it in <a href="https://youtrack.jetbrains.com/issues/KT" id="whatsnew1420.md-9ba81226"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="whatsnew1420.md-36f4ddcb" >Kotlin/Native now can handle exceptions thrown from Objective-C code in runtime to avoid program crashes.</p><p id="whatsnew1420.md-46c71de3" >You can opt in to wrap <code class="code " id="whatsnew1420.md-4afbc2a1"  >NSException</code> ’s into Kotlin exceptions of type <code class="code " id="whatsnew1420.md-b940a8af"  >ForeignException</code>. They hold the references to the original <code class="code " id="whatsnew1420.md-2c171e7d"  >NSException</code> \'s. This lets you get the information about the root cause and handle it properly.</p><p id="whatsnew1420.md-51bf473f" >To enable wrapping of Objective-C exceptions, specify the <code class="code " id="whatsnew1420.md-f209907f"  >-Xforeign-exception-mode objc-wrap</code> option in the <code class="code " id="whatsnew1420.md-535b3c71"  >cinterop</code> call or add <code class="code " id="whatsnew1420.md-10fc072f"  >foreignExceptionMode = objc-wrap</code> property to <code class="code " id="whatsnew1420.md-5a3a413c"  >.def</code> file. If you use <a href="#native-cocoapods.md" id="whatsnew1420.md-16e59e9e"   >CocoaPods integration</a>, specify the option in the <code class="code " id="whatsnew1420.md-c5541b80"  >pod {}</code> build script block of a dependency like this:</p><div class="code-block" data-lang="kotlin" id="whatsnew1420.md-3dceed34"         >pod(&quot;foo&quot;) {\n   extraOpts = listOf(&quot;-Xforeign-exception-mode”, “objc-wrap&quot;)\n}\n</div><p id="whatsnew1420.md-70445c2a" >The default behavior remains unchanged: the program terminates when an exception is thrown from the Objective-C code.</p></section><section class="chapter"  ><h3 id="whatsnew1420.md-cocoapods-plugin-improvements" data-toc="whatsnew1420#whatsnew1420.md-cocoapods-plugin-improvements"  >CocoaPods plugin improvements</h3><p id="whatsnew1420.md-d4c8a118" >Kotlin 1.4.20 continues the set of improvements in CocoaPods integration. Namely, you can try the following new features:</p><ul class="list _ul" id="whatsnew1420.md-eceae480"   ><li class="list__item" id="whatsnew1420.md-86f4265b" ><a href="#whatsnew1420.md-improved-task-execution" id="whatsnew1420.md-ee838b9c"   >Improved task execution</a></li><li class="list__item" id="whatsnew1420.md-68a96e4c" ><a href="#whatsnew1420.md-extended-dsl" id="whatsnew1420.md-5abbb858"   >Extended DSL</a></li><li class="list__item" id="whatsnew1420.md-ad3aea97" ><a href="#whatsnew1420.md-updated-integration-with-xcode" id="whatsnew1420.md-4b5dd13a"   >Updated integration with Xcode</a></li></ul><section class="chapter"  ><h4 id="whatsnew1420.md-improved-task-execution" data-toc="whatsnew1420#whatsnew1420.md-improved-task-execution"  >Improved task execution</h4><p id="whatsnew1420.md-1602f328" >CocoaPods plugin gets an improved task execution flow. For example, if you add a new CocoaPods dependency, existing dependencies are not rebuilt. Adding an extra target also doesn\'t affect rebuilding dependencies for existing ones.</p></section><section class="chapter"  ><h4 id="whatsnew1420.md-extended-dsl" data-toc="whatsnew1420#whatsnew1420.md-extended-dsl"  >Extended DSL</h4><p id="whatsnew1420.md-baad5326" >The DSL of adding <a href="#native-cocoapods.md" id="whatsnew1420.md-58192be2"   >CocoaPods</a> dependencies to your Kotlin project receives new capabilites.</p><p id="whatsnew1420.md-269b00d6" >In addition to local Pods and Pods from the CocoaPods repository, you can add dependencies on the following types of libraries:</p><ul class="list _ul" id="whatsnew1420.md-654ea7aa"   ><li class="list__item" id="whatsnew1420.md-54734072" ><p>A library from a custom spec repository.</p></li><li class="list__item" id="whatsnew1420.md-fff2885d" ><p>A remote library from a Git repository.</p></li><li class="list__item" id="whatsnew1420.md-385631bc" ><p>A library from an archive (also available by arbitrary HTTP address).</p></li><li class="list__item" id="whatsnew1420.md-1e1347a3" ><p>A static library.</p></li><li class="list__item" id="whatsnew1420.md-a829ea5" ><p>A library with custom cinterop options.</p></li></ul><p id="whatsnew1420.md-2ad9babb" >Learn more about <a href="#native-cocoapods.md-add-dependencies-on-pod-libraries" id="whatsnew1420.md-4e84714d"   >adding CocoaPods dependencies</a> in Kotlin projects. Find examples in the <a href="https://github.com/Kotlin/kotlin-with-cocoapods-sample" id="whatsnew1420.md-361fd3bd"   data-external="true" rel="noopener noreferrer" >Kotlin with CocoaPods sample</a>.</p></section><section class="chapter"  ><h4 id="whatsnew1420.md-updated-integration-with-xcode" data-toc="whatsnew1420#whatsnew1420.md-updated-integration-with-xcode"  >Updated integration with Xcode</h4><p id="whatsnew1420.md-a0cb25bb" >To work correctly with Xcode, Kotlin requires some Podfile changes:</p><ul class="list _ul" id="whatsnew1420.md-b4e2ce0"   ><li class="list__item" id="whatsnew1420.md-9c9b8ace" ><p>If your Kotlin Pod has any Git, HTTP, or specRepo pod dependency, you should also specify it in the Podfile.</p></li><li class="list__item" id="whatsnew1420.md-a2871ec0" ><p>When you add a library from the custom spec, you also should specify the <a href="https://guides.cocoapods.org/syntax/podfile.html#source" id="whatsnew1420.md-eb6d6537"   data-external="true" rel="noopener noreferrer" >location</a> of specs at the beginning of your Podfile.</p></li></ul><p id="whatsnew1420.md-d46d90c4" >Now integration errors have a detailed description in IDEA. So if you have problems with your Podfile, you will immediately know how to fix them.</p><p id="whatsnew1420.md-ce3cf87d" >Learn more about <a href="#native-cocoapods.md-use-a-kotlin-gradle-project-as-a-cocoapods-dependency" id="whatsnew1420.md-75706b10"   >creating Kotlin pods</a>.</p></section></section><section class="chapter"  ><h3 id="whatsnew1420.md-support-for-xcode-12-libraries" data-toc="whatsnew1420#whatsnew1420.md-support-for-xcode-12-libraries"  >Support for Xcode 12 libraries</h3><p id="whatsnew1420.md-9bc26d57" >We have added support for new libraries delivered with Xcode 12. Now you can use them from the Kotlin code.</p></section></section><section class="chapter"  ><h2 id="whatsnew1420.md-kotlin-multiplatform" data-toc="whatsnew1420#whatsnew1420.md-kotlin-multiplatform"  >Kotlin Multiplatform</h2><section class="chapter"  ><h3 id="whatsnew1420.md-updated-structure-of-multiplatform-library-publications" data-toc="whatsnew1420#whatsnew1420.md-updated-structure-of-multiplatform-library-publications"  >Updated structure of multiplatform library publications</h3><p id="whatsnew1420.md-fc2ba39d" >Starting from Kotlin 1.4.20, there is no longer a separate metadata publication. Metadata artifacts are now included in the <em id="whatsnew1420.md-6f7651e5" class=""  >root</em> publication which stands for the whole library and is automatically resolved to the appropriate platform-specific artifacts when added as a dependency to the common source set.</p><p id="whatsnew1420.md-b215dc79" >Learn more about <a href="#mpp-publish-lib.md" id="whatsnew1420.md-f6985789"   >publishing a multiplatform library</a>.</p><section class="chapter"  ><h4 id="whatsnew1420.md-compatibility-with-earlier-versions" data-toc="whatsnew1420#whatsnew1420.md-compatibility-with-earlier-versions"  >Compatibility with earlier versions</h4><p id="whatsnew1420.md-98a07f3d" >This change of structure breaks the compatibility between projects with <a href="#mpp-share-on-platforms.md-share-code-on-similar-platforms" id="whatsnew1420.md-c469cb73"   >hierarchical project structure</a>. If a multiplatform project and a library it depends on both have the hierarchical project structure, then you need to update them to Kotlin 1.4.20 or higher simultaneously. Libraries published with Kotlin 1.4.20 are not available for using from project published with earlier versions.</p><p id="whatsnew1420.md-7691c22f" >Projects and libraries without the hierarchical project structure remain compatible.</p></section></section></section><section class="chapter"  ><h2 id="whatsnew1420.md-standard-library" data-toc="whatsnew1420#whatsnew1420.md-standard-library"  >Standard library</h2><p id="whatsnew1420.md-399ccf11" >The standard library of Kotlin 1.4.20 offers new extensions for working with files and a better performance.</p><ul class="list _ul" id="whatsnew1420.md-fa04d293"   ><li class="list__item" id="whatsnew1420.md-c4ca621d" ><a href="#whatsnew1420.md-extensions-for-java-nio-file-path" id="whatsnew1420.md-1ba01db8"   >Extensions for java.nio.file.Path</a></li><li class="list__item" id="whatsnew1420.md-5c469b48" ><a href="#whatsnew1420.md-improved-string-replace-function-performance" id="whatsnew1420.md-85a7fd0f"   >Improved String.replace function performance</a></li></ul><section class="chapter"  ><h3 id="whatsnew1420.md-extensions-for-java-nio-file-path" data-toc="whatsnew1420#whatsnew1420.md-extensions-for-java-nio-file-path"  >Extensions for java.nio.file.Path</h3><aside data-type="warning" class="prompt" data-title="" id="whatsnew1420.md-2e92933b"><p id="whatsnew1420.md-ddd3f349" >Extensions for <code class="code " id="whatsnew1420.md-e1a2574f"  >java.nio.file.Path</code> are <a href="#components-stability.md" id="whatsnew1420.md-59c9062b"   >Experimental</a>. They may be dropped or changed at any time. Opt-in is required (see details below). Use them only for evaluation purposes. We appreciate your feedback on them in <a href="https://youtrack.jetbrains.com/issues/KT" id="whatsnew1420.md-55e1716"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="whatsnew1420.md-4ab9c275" >Now the standard library provides experimental extensions for <code class="code " id="whatsnew1420.md-91c1a092"  >java.nio.file.Path</code>. Working with the modern JVM file API in an idiomatic Kotlin way is now similar to working with <code class="code " id="whatsnew1420.md-2605985"  >java.io.File</code> extensions from the <code class="code " id="whatsnew1420.md-d6cccd61"  >kotlin.io</code> package.</p><div class="code-block" data-lang="kotlin" id="whatsnew1420.md-8f790e71"         >// construct path with the div (/) operator\nval baseDir = Path(&quot;/base&quot;)\nval subDir = baseDir / &quot;subdirectory&quot; \n\n// list files in a directory\nval kotlinFiles: List&lt;Path&gt; = Path(&quot;/home/user&quot;).listDirectoryEntries(&quot;*.kt&quot;)\n</div><p id="whatsnew1420.md-9e6fafc9" >The extensions are available in the <code class="code " id="whatsnew1420.md-65584919"  >kotlin.io.path</code> package in the <code class="code " id="whatsnew1420.md-4117ba02"  >kotlin-stdlib-jdk7</code> module. To use the extensions, <a href="#opt-in-requirements.md" id="whatsnew1420.md-91b2cfc0"   >opt-in</a> to the experimental annotation <code class="code " id="whatsnew1420.md-9fe99734"  >@ExperimentalPathApi</code>.</p></section><section class="chapter"  ><h3 id="whatsnew1420.md-improved-string-replace-function-performance" data-toc="whatsnew1420#whatsnew1420.md-improved-string-replace-function-performance"  >Improved String.replace function performance</h3><p id="whatsnew1420.md-a4d97c20" >The new implementation of <code class="code " id="whatsnew1420.md-9ca14d05"  >String.replace()</code> speeds up the function execution. The case-sensitive variant uses a manual replacement loop based on <code class="code " id="whatsnew1420.md-af854f20"  >indexOf</code>, while the case-insensitive one uses regular expression matching.</p></section></section><section class="chapter"  ><h2 id="whatsnew1420.md-kotlin-android-extensions" data-toc="whatsnew1420#whatsnew1420.md-kotlin-android-extensions"  >Kotlin Android Extensions</h2><p id="whatsnew1420.md-44355a3f" >In 1.4.20 the Kotlin Android Extensions plugin becomes deprecated and <code class="code " id="whatsnew1420.md-4f5b4daa"  >Parcelable</code> implementation generator moves to a separate plugin.</p><ul class="list _ul" id="whatsnew1420.md-ff9cdc8e"   ><li class="list__item" id="whatsnew1420.md-6cec9e93" ><a href="#whatsnew1420.md-deprecation-of-synthetic-views" id="whatsnew1420.md-932db5d2"   >Deprecation of synthetic views</a></li><li class="list__item" id="whatsnew1420.md-89384aa6" ><a href="#whatsnew1420.md-new-plugin-for-parcelable-implementation-generator" id="whatsnew1420.md-83b9d6f0"   >New plugin for Parcelable implementation generator</a></li></ul><section class="chapter"  ><h3 id="whatsnew1420.md-deprecation-of-synthetic-views" data-toc="whatsnew1420#whatsnew1420.md-deprecation-of-synthetic-views"  >Deprecation of synthetic views</h3><p id="whatsnew1420.md-a20904ed" ><em id="whatsnew1420.md-8a70b5a2" class=""  >Synthetic views</em> were presented in the Kotlin Android Extensions plugin a while ago to simplify the interaction with UI elements and reduce boilerplate. Now Google offers a native mechanism that does the same - Android Jetpack\'s <a href="https://developer.android.com/topic/libraries/view-binding" id="whatsnew1420.md-65a3c927"   data-external="true" rel="noopener noreferrer" >view bindings</a>, and we\'re deprecating synthetic views in favor of those.</p><p id="whatsnew1420.md-eba71d4e" >We extract the Parcelable implementations generator from <code class="code " id="whatsnew1420.md-29034835"  >kotlin-android-extensions</code> and start the deprecation cycle for the rest of it - synthetic views. For now, they will keep working with a deprecation warning. In the future, you’ll need to switch your project to another solution. Here are the <a href="https://goo.gle/kotlin-android-extensions-deprecation" id="whatsnew1420.md-7081a52f"   data-external="true" rel="noopener noreferrer" >guidelines</a> that will help you migrate your Android project from synthetics to view bindings.</p></section><section class="chapter"  ><h3 id="whatsnew1420.md-new-plugin-for-parcelable-implementation-generator" data-toc="whatsnew1420#whatsnew1420.md-new-plugin-for-parcelable-implementation-generator"  >New plugin for Parcelable implementation generator</h3><p id="whatsnew1420.md-d6a63fda" >The <code class="code " id="whatsnew1420.md-24c1505f"  >Parcelable</code> implementation generator is now available in the new <code class="code " id="whatsnew1420.md-667b1e3b"  >kotlin-parcelize</code> plugin. Apply this plugin instead of <code class="code " id="whatsnew1420.md-49da1aa"  >kotlin-android-extensions</code>.</p><aside data-type="note" class="prompt" data-title="" id="whatsnew1420.md-3124ee3b" ><p id="whatsnew1420.md-9488dd29" ><code class="code " id="whatsnew1420.md-4017f221"  >kotlin-parcelize</code> and <code class="code " id="whatsnew1420.md-e0ab14f2"  >kotlin-android-extensions</code> can\'t be applied together in one module.</p></aside><p id="whatsnew1420.md-6e5b9431" >The <code class="code " id="whatsnew1420.md-1625536c"  >@Parcelize</code> annotation is moved to the <code class="code " id="whatsnew1420.md-40d8011c"  >kotlinx.parcelize</code> package.</p><p id="whatsnew1420.md-7f710d02" >Learn more about <code class="code " id="whatsnew1420.md-c0eee672"  >Parcelable</code> implementation generator in the <a href="https://developer.android.com/kotlin/parcelize" id="whatsnew1420.md-c02cc3e"   data-external="true" rel="noopener noreferrer" >Android documentation</a>.</p></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="whatsnew14.md"  >What\'s new in Kotlin 1.4</h1><p id="whatsnew14.md-d7c6af54" >In Kotlin 1.4.0, we ship a number of improvements in all of its components, with the <a href="https://blog.jetbrains.com/kotlin/2020/08/kotlin-1-4-released-with-a-focus-on-quality-and-performance/" id="whatsnew14.md-e9f62153"   data-external="true" rel="noopener noreferrer" >focus on quality and performance</a>. Below you will find the list of the most important changes in Kotlin 1.4.0.</p><section class="chapter"  ><h2 id="whatsnew14.md-language-features-and-improvements" data-toc="whatsnew14#whatsnew14.md-language-features-and-improvements"  >Language features and improvements</h2><p id="whatsnew14.md-406ff93a" >Kotlin 1.4.0 comes with a variety of different language features and improvements. They include:</p><ul class="list _ul" id="whatsnew14.md-87bf2dc4"   ><li class="list__item" id="whatsnew14.md-4614053f" ><p><a href="#whatsnew14.md-sam-conversions-for-kotlin-interfaces" id="whatsnew14.md-8ef6c449"   >SAM conversions for Kotlin interfaces</a>*</p></li><li class="list__item" id="whatsnew14.md-518f1b54" ><a href="#whatsnew14.md-explicit-api-mode-for-library-authors" id="whatsnew14.md-fb49c22e"   >Explicit API mode for library authors</a></li><li class="list__item" id="whatsnew14.md-be08e698" ><a href="#whatsnew14.md-mixing-named-and-positional-arguments" id="whatsnew14.md-e611b2b3"   >Mixing named and positional arguments</a></li><li class="list__item" id="whatsnew14.md-e4a422b2" ><a href="#whatsnew14.md-trailing-comma" id="whatsnew14.md-4abe402f"   >Trailing comma</a></li><li class="list__item" id="whatsnew14.md-3154b449" ><a href="#whatsnew14.md-callable-reference-improvements" id="whatsnew14.md-a1734d95"   >Callable reference improvements</a></li><li class="list__item" id="whatsnew14.md-46ffd7ad" ><a href="#whatsnew14.md-using-break-and-continue-inside-when-expressions-included-in-loops" id="whatsnew14.md-46b5a0dc"   >break and continue inside when included in loops</a></li></ul><section class="chapter"  ><h3 id="whatsnew14.md-sam-conversions-for-kotlin-interfaces" data-toc="whatsnew14#whatsnew14.md-sam-conversions-for-kotlin-interfaces"  >SAM conversions for Kotlin interfaces</h3><p id="whatsnew14.md-8afdef1a" >Before Kotlin 1.4.0, you could apply SAM (Single Abstract Method) conversions only <a href="#java-interop.md-sam-conversions" id="whatsnew14.md-74b0c421"   >when working with Java methods and Java interfaces from Kotlin</a>. From now on, you can use SAM conversions for Kotlin interfaces as well. To do so, mark a Kotlin interface explicitly as functional with the <code class="code " id="whatsnew14.md-b2426d61"  >fun</code> modifier.</p><p id="whatsnew14.md-5b57bc54" >SAM conversion applies if you pass a lambda as an argument when an interface with only one single abstract method is expected as a parameter. In this case, the compiler automatically converts the lambda to an instance of the class that implements the abstract member function.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-3a22284b"        data-runnable="true" data-min-compiler-version="1.4"  >fun interface IntPredicate {\n    fun accept(i: Int): Boolean\n}\n\nval isEven = IntPredicate { it % 2 == 0 }\n\nfun main() { \n    println(&quot;Is 7 even? - ${isEven.accept(7)}&quot;)\n}\n</div><p id="whatsnew14.md-27e8565" >Learn more about <a href="#fun-interfaces.md" id="whatsnew14.md-c57e75eb"   >Kotlin functional interfaces and SAM conversions</a>.</p></section><section class="chapter"  ><h3 id="whatsnew14.md-explicit-api-mode-for-library-authors" data-toc="whatsnew14#whatsnew14.md-explicit-api-mode-for-library-authors"  >Explicit API mode for library authors</h3><p id="whatsnew14.md-f3941754" >Kotlin compiler offers <em id="whatsnew14.md-8e95eab7" class=""  >explicit API mode</em> for library authors. In this mode, the compiler performs additional checks that help make the library’s API clearer and more consistent. It adds the following requirements for declarations exposed to the library’s public API:</p><ul class="list _ul" id="whatsnew14.md-1d6cdc98"   ><li class="list__item" id="whatsnew14.md-7f6aea2b" ><p>Visibility modifiers are required for declarations if the default visibility exposes them to the public API. This helps ensure that no declarations are exposed to the public API unintentionally.</p></li><li class="list__item" id="whatsnew14.md-141949a7" ><p>Explicit type specifications are required for properties and functions that are exposed to the public API. This guarantees that API users are aware of the types of API members they use.</p></li></ul><p id="whatsnew14.md-5379236" >Depending on your configuration, these explicit APIs can produce errors (<em id="whatsnew14.md-fce17eb5" class=""  >strict</em> mode) or warnings (<em id="whatsnew14.md-de4769ca" class=""  >warning</em> mode). Certain kinds of declarations are excluded from such checks for the sake of readability and common sense:</p><ul class="list _ul" id="whatsnew14.md-fcb7d7dd"   ><li class="list__item" id="whatsnew14.md-988db543" ><p>primary constructors</p></li><li class="list__item" id="whatsnew14.md-7ea3dd4d" ><p>properties of data classes</p></li><li class="list__item" id="whatsnew14.md-e75f77e" ><p>property getters and setters</p></li><li class="list__item" id="whatsnew14.md-a5ac743a" ><p><code class="code " id="whatsnew14.md-48b004de"  >override</code> methods</p></li></ul><p id="whatsnew14.md-5c5b5299" >Explicit API mode analyzes only the production sources of a module.</p><p id="whatsnew14.md-873db58c" >To compile your module in the explicit API mode, add the following lines to your Gradle build script:</p><div class="tabs" id="whatsnew14.md-3598daf1" ><div class="tabs__content" data-gtm="tab" id="whatsnew14.md-403c6b3"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="whatsnew14.md-403c6b3"   data-title="Groovy"      >kotlin {    \n    // for strict mode\n    explicitApi() \n    // or\n    explicitApi = \'strict\'\n    \n    // for warning mode\n    explicitApiWarning()\n    // or\n    explicitApi = \'warning\'\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="whatsnew14.md-6abb7ace"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="whatsnew14.md-6abb7ace"   data-title="Kotlin"      >kotlin {    \n    // for strict mode\n    explicitApi() \n    // or\n    explicitApi = ExplicitApiMode.Strict\n    \n    // for warning mode\n    explicitApiWarning()\n    // or\n    explicitApi = ExplicitApiMode.Warning\n}\n</div></div></div><p id="whatsnew14.md-fa5e668e" >When using the command-line compiler, switch to explicit API mode by adding the <code class="code " id="whatsnew14.md-35b1bd92"  >-Xexplicit-api</code> compiler option with the value <code class="code " id="whatsnew14.md-c7434d7c"  >strict</code> or <code class="code " id="whatsnew14.md-a70c4eb5"  >warning</code>.</p><div class="code-block" data-lang="bash" id="whatsnew14.md-3754b676"         >-Xexplicit-api={strict|warning}\n</div><p id="whatsnew14.md-771b71bf" >For more details about the explicit API mode, see the <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/explicit-api-mode.md" id="whatsnew14.md-b0da13a3"   data-external="true" rel="noopener noreferrer" >KEEP</a>.</p></section><section class="chapter"  ><h3 id="whatsnew14.md-mixing-named-and-positional-arguments" data-toc="whatsnew14#whatsnew14.md-mixing-named-and-positional-arguments"  >Mixing named and positional arguments</h3><p id="whatsnew14.md-fc80d37a" >In Kotlin 1.3, when you called a function with <a href="#functions.md-named-arguments" id="whatsnew14.md-2ab8fd2"   >named arguments</a>, you had to place all the arguments without names (positional arguments) before the first named argument. For example, you could call <code class="code " id="whatsnew14.md-65d65726"  >f(1, y = 2)</code>, but you couldn\'t call <code class="code " id="whatsnew14.md-48155c2a"  >f(x = 1, 2)</code>.</p><p id="whatsnew14.md-4ea873c3" >It was really annoying when all the arguments were in their correct positions but you wanted to specify a name for one argument in the middle. It was especially helpful for making absolutely clear which attribute a boolean or <code class="code " id="whatsnew14.md-d4b70151"  >null</code> value belongs to.</p><p id="whatsnew14.md-363728aa" >In Kotlin 1.4, there is no such limitation – you can now specify a name for an argument in the middle of a set of positional arguments. Moreover, you can mix positional and named arguments any way you like, as long as they remain in the correct order.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-e6437dcf"         >fun reformat(\n    str: String,\n    uppercaseFirstLetter: Boolean = true,\n    wordSeparator: Char = \' \'\n) {\n    // ...\n}\n\n//Function call with a named argument in the middle\nreformat(&quot;This is a String!&quot;, uppercaseFirstLetter = false , \'-\')\n</div></section><section class="chapter"  ><h3 id="whatsnew14.md-trailing-comma" data-toc="whatsnew14#whatsnew14.md-trailing-comma"  >Trailing comma</h3><p id="whatsnew14.md-d6745604" >With Kotlin 1.4 you can now add a trailing comma in enumerations such as argument and parameter lists, <code class="code " id="whatsnew14.md-add97785"  >when</code> entries, and components of destructuring declarations. With a trailing comma, you can add new items and change their order without adding or removing commas.</p><p id="whatsnew14.md-b0f6ace3" >This is especially helpful if you use multi-line syntax for parameters or values. After adding a trailing comma, you can then easily swap lines with parameters or values.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-f4da3c6a"         >fun reformat(\n    str: String,\n    uppercaseFirstLetter: Boolean = true,\n    wordSeparator: Character = \' \', //trailing comma\n) {\n    // ...\n}\n</div><div class="code-block" data-lang="kotlin" id="whatsnew14.md-2d0b4411"         >val colors = listOf(\n    &quot;red&quot;,\n    &quot;green&quot;,\n    &quot;blue&quot;, //trailing comma\n)\n</div></section><section class="chapter"  ><h3 id="whatsnew14.md-callable-reference-improvements" data-toc="whatsnew14#whatsnew14.md-callable-reference-improvements"  >Callable reference improvements</h3><p id="whatsnew14.md-e93c4eea" >Kotlin 1.4 supports more cases for using callable references:</p><ul class="list _ul" id="whatsnew14.md-d2a779c9"   ><li class="list__item" id="whatsnew14.md-225ed49a" ><p>References to functions with default argument values</p></li><li class="list__item" id="whatsnew14.md-403bf7f4" ><p>Function references in <code class="code " id="whatsnew14.md-adf10226"  >Unit</code> -returning functions</p></li><li class="list__item" id="whatsnew14.md-6517bfab" ><p>References that adapt based on the number of arguments in a function</p></li><li class="list__item" id="whatsnew14.md-3e509da0" ><p>Suspend conversion on callable references</p></li></ul><section class="chapter"  ><h4 id="whatsnew14.md-references-to-functions-with-default-argument-values" data-toc="whatsnew14#whatsnew14.md-references-to-functions-with-default-argument-values"  >References to functions with default argument values</h4><p id="whatsnew14.md-b906e200" >Now you can use callable references to functions with default argument values. If the callable reference to the function <code class="code " id="whatsnew14.md-52007892"  >foo</code> takes no arguments, the default value <code class="code " id="whatsnew14.md-c7104f65"  >0</code> is used.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-b501658a"        data-runnable="true" data-min-compiler-version="1.4"  >fun foo(i: Int = 0): String = &quot;$i!&quot;\n\nfun apply(func: () -&gt; String): String = func()\n\nfun main() {\n    println(apply(::foo))\n}\n</div><p id="whatsnew14.md-42b5bc26" >Previously, you had to write additional overloads for the function <code class="code " id="whatsnew14.md-774238f8"  >apply</code> to use the default argument values.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-50414fd1"         >// some new overload\nfun applyInt(func: (Int) -&gt; String): String = func(0) \n</div></section><section class="chapter"  ><h4 id="whatsnew14.md-function-references-in-unit-returning-functions" data-toc="whatsnew14#whatsnew14.md-function-references-in-unit-returning-functions"  >Function references in Unit-returning functions</h4><p id="whatsnew14.md-a554eb93" >In Kotlin 1.4, you can use callable references to functions returning any type in <code class="code " id="whatsnew14.md-61887e86"  >Unit</code> -returning functions. Before Kotlin 1.4, you could only use lambda arguments in this case. Now you can use both lambda arguments and callable references.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-a72d849e"         >fun foo(f: () -&gt; Unit) { }\nfun returnsInt(): Int = 42\n\nfun main() {\n    foo { returnsInt() } // this was the only way to do it  before 1.4\n    foo(::returnsInt) // starting from 1.4, this also works\n}\n</div></section><section class="chapter"  ><h4 id="whatsnew14.md-references-that-adapt-based-on-the-number-of-arguments-in-a-function" data-toc="whatsnew14#whatsnew14.md-references-that-adapt-based-on-the-number-of-arguments-in-a-function"  >References that adapt based on the number of arguments in a function</h4><p id="whatsnew14.md-e740567d" >Now you can adapt callable references to functions when passing a variable number of arguments (<code class="code " id="whatsnew14.md-e6131cc9"  >vararg</code>) . You can pass any number of parameters of the same type at the end of the list of passed arguments.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-b8648949"         >fun foo(x: Int, vararg y: String) {}\n\nfun use0(f: (Int) -&gt; Unit) {}\nfun use1(f: (Int, String) -&gt; Unit) {}\nfun use2(f: (Int, String, String) -&gt; Unit) {}\n\nfun test() {\n    use0(::foo) \n    use1(::foo) \n    use2(::foo) \n}\n</div></section><section class="chapter"  ><h4 id="whatsnew14.md-suspend-conversion-on-callable-references" data-toc="whatsnew14#whatsnew14.md-suspend-conversion-on-callable-references"  >Suspend conversion on callable references</h4><p id="whatsnew14.md-c5729e83" >In addition to suspend conversion on lambdas, Kotlin now supports suspend conversion on callable references starting from version 1.4.0.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-2d82d79e"         >fun call() {}\nfun takeSuspend(f: suspend () -&gt; Unit) {}\n\nfun test() {\n    takeSuspend { call() } // OK before 1.4\n    takeSuspend(::call) // In Kotlin 1.4, it also works\n}\n</div></section></section><section class="chapter"  ><h3 id="whatsnew14.md-using-break-and-continue-inside-when-expressions-included-in-loops" data-toc="whatsnew14#whatsnew14.md-using-break-and-continue-inside-when-expressions-included-in-loops"  >Using break and continue inside when expressions included in loops</h3><p id="whatsnew14.md-8d0ef6f0" >In Kotlin 1.3, you could not use unqualified <code class="code " id="whatsnew14.md-666c17ad"  >break</code> and <code class="code " id="whatsnew14.md-694ac2e8"  >continue</code> inside <code class="code " id="whatsnew14.md-47b2145"  >when</code> expressions included in loops. The reason was that these keywords were reserved for possible <a href="https://en.wikipedia.org/wiki/Switch_statement#Fallthrough" id="whatsnew14.md-521e35a6"   data-external="true" rel="noopener noreferrer" >fall-through behavior</a> in <code class="code " id="whatsnew14.md-85315060"  >when</code> expressions.</p><p id="whatsnew14.md-5f519311" >That’s why if you wanted to use <code class="code " id="whatsnew14.md-7ead55d0"  >break</code> and <code class="code " id="whatsnew14.md-88fc2dc7"  >continue</code> inside <code class="code " id="whatsnew14.md-57998712"  >when</code> expressions in loops, you had to <a href="#returns.md-break-and-continue-labels" id="whatsnew14.md-99a2f94c"   >label</a> them, which became rather cumbersome.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-a2f519a2"         >fun test(xs: List&lt;Int&gt;) {\n    LOOP@for (x in xs) {\n        when (x) {\n            2 -&gt; continue@LOOP\n            17 -&gt; break@LOOP\n            else -&gt; println(x)\n        }\n    }\n}\n</div><p id="whatsnew14.md-19f47b12" >In Kotlin 1.4, you can use <code class="code " id="whatsnew14.md-cdba8345"  >break</code> and <code class="code " id="whatsnew14.md-4624c932"  >continue</code> without labels inside <code class="code " id="whatsnew14.md-c68be816"  >when</code> expressions included in loops. They behave as expected by terminating the nearest enclosing loop or proceeding to its next step.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-6fd8640c"         >fun test(xs: List&lt;Int&gt;) {\n    for (x in xs) {\n        when (x) {\n            2 -&gt; continue\n            17 -&gt; break\n            else -&gt; println(x)\n        }\n    }\n}\n</div><p id="whatsnew14.md-1c44e066" >The fall-through behavior inside <code class="code " id="whatsnew14.md-c393a02c"  >when</code> is subject to further design.</p></section></section><section class="chapter"  ><h2 id="whatsnew14.md-new-tools-in-the-ide" data-toc="whatsnew14#whatsnew14.md-new-tools-in-the-ide"  >New tools in the IDE</h2><p id="whatsnew14.md-fcef23fd" >With Kotlin 1.4, you can use the new tools in IntelliJ IDEA to simplify Kotlin development:</p><ul class="list _ul" id="whatsnew14.md-9fed01d1"   ><li class="list__item" id="whatsnew14.md-e6eb43b0" ><a href="#whatsnew14.md-new-flexible-project-wizard" id="whatsnew14.md-7c8c1824"   >New flexible Project Wizard</a></li><li class="list__item" id="whatsnew14.md-13abdb21" ><a href="#whatsnew14.md-coroutine-debugger" id="whatsnew14.md-a15eca39"   >Coroutine Debugger</a></li></ul><section class="chapter"  ><h3 id="whatsnew14.md-new-flexible-project-wizard" data-toc="whatsnew14#whatsnew14.md-new-flexible-project-wizard"  >New flexible Project Wizard</h3><p id="whatsnew14.md-6a53595" >With the flexible new Kotlin Project Wizard, you have a place to easily create and configure different types of Kotlin projects, including multiplatform projects, which can be difficult to configure without a UI.</p><p id="whatsnew14.md-23a816aa" ><figure title="Kotlin Project Wizard &ndash; Multiplatform project"><img alt="Kotlin Project Wizard &ndash; Multiplatform project" title="Kotlin Project Wizard &ndash; Multiplatform project" id="whatsnew14.md-6badff7c" src="images/mpp-project-1-wn.png"  class="" width="2046" height="1120" /></figure></p><p id="whatsnew14.md-daa72c17" >The new Kotlin Project Wizard is both simple and flexible:</p><ol class="list _decimal" id="whatsnew14.md-56c1ff1"   ><li class="list__item" id="whatsnew14.md-a4d72eed" ><p><em id="whatsnew14.md-8300d03d" class=""  >Select the project template</em>, depending on what you’re trying to do. More templates will be added in the future.</p></li><li class="list__item" id="whatsnew14.md-7475f895" ><p><em id="whatsnew14.md-91d86ef5" class=""  >Select the build system</em> – Gradle (Kotlin or Groovy DSL), Maven, or IntelliJ IDEA. <br/> The Kotlin Project Wizard will only show the build systems supported on the selected project template.</p></li><li class="list__item" id="whatsnew14.md-facfa966" ><p><em id="whatsnew14.md-9d5fbf24" class=""  >Preview the project structure</em> directly on the main screen.</p></li></ol><p id="whatsnew14.md-f7ec290a" >Then you can finish creating your project or, optionally, <em id="whatsnew14.md-931c7878" class=""  >configure the project</em> on the next screen:</p><ol class="list _decimal" id="whatsnew14.md-3ccc7f4b"   start="4"><li class="list__item" id="whatsnew14.md-fc8fb945" ><p><em id="whatsnew14.md-10111a15" class=""  >Add/remove modules and targets</em> supported for this project template.</p></li><li class="list__item" id="whatsnew14.md-5caf0f17" ><p><em id="whatsnew14.md-cc227d15" class=""  >Configure module and target settings</em>, for example, the target JVM version, target template, and test framework.</p></li></ol><p id="whatsnew14.md-61c6a5d7" ><figure title="Kotlin Project Wizard - Configure targets"><img alt="Kotlin Project Wizard - Configure targets" title="Kotlin Project Wizard - Configure targets" id="whatsnew14.md-d1876526" src="images/mpp-project-2-wn.png"  class="" width="2046" height="1120" /></figure></p><p id="whatsnew14.md-34fd75d4" >In the future, we are going to make the Kotlin Project Wizard even more flexible by adding more configuration options and templates.</p><p id="whatsnew14.md-2bc714a0" >You can try out the new Kotlin Project Wizard by working through these tutorials:</p><ul class="list _ul" id="whatsnew14.md-757d17ba"   ><li class="list__item" id="whatsnew14.md-8fbfd291" ><a href="#jvm-get-started.md" id="whatsnew14.md-b1d328b4"   >Create a console application based on Kotlin/JVM</a></li><li class="list__item" id="whatsnew14.md-abf132a8" ><a href="#js-get-started.md" id="whatsnew14.md-5f6a1fea"   >Create a Kotlin/JS application for React</a></li><li class="list__item" id="whatsnew14.md-dc0d9324" ><a href="#native-get-started.md" id="whatsnew14.md-1cf6d0ab"   >Create a Kotlin/Native application</a></li></ul></section><section class="chapter"  ><h3 id="whatsnew14.md-coroutine-debugger" data-toc="whatsnew14#whatsnew14.md-coroutine-debugger"  >Coroutine Debugger</h3><p id="whatsnew14.md-5775cfb4" >Many people already use <span id="a8a4ec24">${linkTitle}</span> for asynchronous programming. But when it came to debugging, working with coroutines before Kotlin 1.4, could be a real pain. Since coroutines jumped between threads, it was difficult to understand what a specific coroutine was doing and check its context. In some cases, tracking steps over breakpoints simply didn’t work. As a result, you had to rely on logging or mental effort to debug code that used coroutines.</p><p id="whatsnew14.md-11d20ffb" >In Kotlin 1.4, debugging coroutines is now much more convenient with the new functionality shipped with the Kotlin plugin.</p><aside data-type="note" class="prompt" data-title="" id="whatsnew14.md-a2655789" ><p id="whatsnew14.md-c11b9029" >Debugging works for versions 1.3.8 or later of <code class="code " id="whatsnew14.md-78c90e97"  >kotlinx-coroutines-core</code>.</p></aside><p id="whatsnew14.md-d7a22186" >The <b id="whatsnew14.md-7c5d1090" class=""  >Debug Tool Window</b> now contains a new <b id="whatsnew14.md-5f5f09dc" class=""  >Coroutines</b> tab. In this tab, you can find information about both currently running and suspended coroutines. The coroutines are grouped by the dispatcher they are running on.</p><p id="whatsnew14.md-b4318f81" ><figure title="Debugging coroutines"><img alt="Debugging coroutines" title="Debugging coroutines" id="whatsnew14.md-f0e589e9" src="images/coroutine-debugger-wn.png"  class="" width="2800" height="612" /></figure></p><p id="whatsnew14.md-6cbca62b" >Now you can:</p><ul class="list _ul" id="whatsnew14.md-80991426"   ><li class="list__item" id="whatsnew14.md-3c47390f" ><p>Easily check the state of each coroutine.</p></li><li class="list__item" id="whatsnew14.md-30a1e1e9" ><p>See the values of local and captured variables for both running and suspended coroutines.</p></li><li class="list__item" id="whatsnew14.md-2afc89c5" ><p>See a full coroutine creation stack, as well as a call stack inside the coroutine. The stack includes all frames with variable values, even those that would be lost during standard debugging.</p></li></ul><p id="whatsnew14.md-7a562c24" >If you need a full report containing the state of each coroutine and its stack, right-click inside the <b id="whatsnew14.md-a1265f4f" class=""  >Coroutines</b> tab, and then click <b id="whatsnew14.md-cacd73c2" class=""  >Get Coroutines Dump</b>. Currently, the coroutines dump is rather simple, but we’re going to make it more readable and helpful in future versions of Kotlin.</p><p id="whatsnew14.md-53b3a8a9" ><figure title="Coroutines Dump"><img alt="Coroutines Dump" title="Coroutines Dump" id="whatsnew14.md-5af078ca" src="images/coroutines-dump-wn.png"  class="" width="1158" height="334" /></figure></p><p id="whatsnew14.md-8c6963c9" >Learn more about debugging coroutines in <a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-rc-debugging-coroutines/" id="whatsnew14.md-c8b9f4e5"   data-external="true" rel="noopener noreferrer" >this blog post</a> and <a href="https://www.jetbrains.com/help/idea/debug-kotlin-coroutines.html" id="whatsnew14.md-7849d3b3"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA documentation</a>.</p></section></section><section class="chapter"  ><h2 id="whatsnew14.md-new-compiler" data-toc="whatsnew14#whatsnew14.md-new-compiler"  >New compiler</h2><p id="whatsnew14.md-21de2382" >The new Kotlin compiler is going to be really fast; it will unify all the supported platforms and provide an API for compiler extensions. It\'s a long-term project, and we\'ve already completed several steps in Kotlin 1.4.0:</p><ul class="list _ul" id="whatsnew14.md-9cc60013"   ><li class="list__item" id="whatsnew14.md-c490558a" ><p><a href="#whatsnew14.md-new-more-powerful-type-inference-algorithm" id="whatsnew14.md-85cc81e0"   >New, more powerful type inference algorithm</a> is enabled by default.</p></li><li class="list__item" id="whatsnew14.md-46cccf5b" ><p><a href="#whatsnew14.md-unified-backends-and-extensibility" id="whatsnew14.md-4e64881a"   >New JVM and JS IR backends</a>. They will become the default once we stabilize them.</p></li></ul><section class="chapter"  ><h3 id="whatsnew14.md-new-more-powerful-type-inference-algorithm" data-toc="whatsnew14#whatsnew14.md-new-more-powerful-type-inference-algorithm"  >New more powerful type inference algorithm</h3><p id="whatsnew14.md-50ff4da3" >Kotlin 1.4 uses a new, more powerful type inference algorithm. This new algorithm was already available to try in Kotlin 1.3 by specifying a compiler option, and now it’s used by default. You can find the full list of issues fixed in the new algorithm in <a href="https://youtrack.jetbrains.com/issues/KT?q=Tag:%20fixed-in-new-inference%20" id="whatsnew14.md-c4735cfa"   data-external="true" rel="noopener noreferrer" >YouTrack</a>. Here you can find some of the most noticeable improvements:</p><ul class="list _ul" id="whatsnew14.md-ecdb73bf"   ><li class="list__item" id="whatsnew14.md-90280187" ><a href="#whatsnew14.md-more-cases-where-type-is-inferred-automatically" id="whatsnew14.md-51d78d85"   >More cases where type is inferred automatically</a></li><li class="list__item" id="whatsnew14.md-8ad1d96" ><a href="#whatsnew14.md-smart-casts-for-a-lambda-s-last-expression" id="whatsnew14.md-36d5a7c"   >Smart casts for a lambda’s last expression</a></li><li class="list__item" id="whatsnew14.md-f86a4004" ><a href="#whatsnew14.md-smart-casts-for-callable-references" id="whatsnew14.md-ca2945d1"   >Smart casts for callable references</a></li><li class="list__item" id="whatsnew14.md-13e5a040" ><a href="#whatsnew14.md-better-inference-for-delegated-properties" id="whatsnew14.md-6c84406e"   >Better inference for delegated properties</a></li><li class="list__item" id="whatsnew14.md-c8e7c0c2" ><a href="#whatsnew14.md-sam-conversion-for-java-interfaces-with-different-arguments" id="whatsnew14.md-880ee7a5"   >SAM conversion for Java interfaces with different arguments</a></li><li class="list__item" id="whatsnew14.md-a1cdbe5b" ><a href="#whatsnew14.md-java-sam-interfaces-in-kotlin" id="whatsnew14.md-f7d33a4b"   >Java SAM interfaces in Kotlin</a></li></ul><section class="chapter"  ><h4 id="whatsnew14.md-more-cases-where-type-is-inferred-automatically" data-toc="whatsnew14#whatsnew14.md-more-cases-where-type-is-inferred-automatically"  >More cases where type is inferred automatically</h4><p id="whatsnew14.md-a820fe85" >The new inference algorithm infers types for many cases where the old algorithm required you to specify them explicitly. For instance, in the following example the type of the lambda parameter <code class="code " id="whatsnew14.md-b186a732"  >it</code> is correctly inferred to <code class="code " id="whatsnew14.md-84b8df20"  >String?</code>:</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-ae8f0b61"        data-runnable="true" data-min-compiler-version="1.4"  >//sampleStart\nval rulesMap: Map&lt;String, (String?) -&gt; Boolean&gt; = mapOf(\n    &quot;weak&quot; to { it != null },\n    &quot;medium&quot; to { !it.isNullOrBlank() },\n    &quot;strong&quot; to { it != null &amp;&amp; &quot;^[a-zA-Z0-9]+$&quot;.toRegex().matches(it) }\n)\n//sampleEnd\n\nfun main() {\n    println(rulesMap.getValue(&quot;weak&quot;)(&quot;abc!&quot;))\n    println(rulesMap.getValue(&quot;strong&quot;)(&quot;abc&quot;))\n    println(rulesMap.getValue(&quot;strong&quot;)(&quot;abc!&quot;))\n}\n</div><p id="whatsnew14.md-1ce5143e" >In Kotlin 1.3, you needed to introduce an explicit lambda parameter or replace <code class="code " id="whatsnew14.md-13c9138a"  >to</code> with a <code class="code " id="whatsnew14.md-95414e6"  >Pair</code> constructor with explicit generic arguments to make it work.</p></section><section class="chapter"  ><h4 id="whatsnew14.md-smart-casts-for-a-lambda-s-last-expression" data-toc="whatsnew14#whatsnew14.md-smart-casts-for-a-lambda-s-last-expression"  >Smart casts for a lambda’s last expression</h4><p id="whatsnew14.md-bf60b381" >In Kotlin 1.3, the last expression inside a lambda wasn’t smart cast unless you specified the expected type. Thus, in the following example, Kotlin 1.3 infers <code class="code " id="whatsnew14.md-651165f9"  >String?</code> as the type of the <code class="code " id="whatsnew14.md-2ed0d7be"  >result</code> variable:</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-2d5b4aa3"         >val result = run {\n    var str = currentValue()\n    if (str == null) {\n        str = &quot;test&quot;\n    }\n    str // the Kotlin compiler knows that str is not null here\n}\n// The type of \'result\' is String? in Kotlin 1.3 and String in Kotlin 1.4\n</div><p id="whatsnew14.md-fe1e683b" >In Kotlin 1.4, thanks to the new inference algorithm, the last expression inside a lambda gets smart cast, and this new, more precise type is used to infer the resulting lambda type. Thus, the type of the <code class="code " id="whatsnew14.md-db2873f9"  >result</code> variable becomes <code class="code " id="whatsnew14.md-d574f928"  >String</code>.</p><p id="whatsnew14.md-ac3545b2" >In Kotlin 1.3, you often needed to add explicit casts (either <code class="code " id="whatsnew14.md-47e6d4a"  >!!</code> or type casts like <code class="code " id="whatsnew14.md-b3e03c21"  >as String</code>) to make such cases work, and now these casts have become unnecessary.</p></section><section class="chapter"  ><h4 id="whatsnew14.md-smart-casts-for-callable-references" data-toc="whatsnew14#whatsnew14.md-smart-casts-for-callable-references"  >Smart casts for callable references</h4><p id="whatsnew14.md-4eb82704" >In Kotlin 1.3, you couldn’t access a member reference of a smart cast type. Now in Kotlin 1.4 you can:</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-23a77fd6"        data-runnable="true" data-min-compiler-version="1.4"  >import kotlin.reflect.KFunction\n\nsealed class Animal\nclass Cat : Animal() {\n    fun meow() {\n        println(&quot;meow&quot;)\n    }\n}\n\nclass Dog : Animal() {\n    fun woof() {\n        println(&quot;woof&quot;)\n    }\n}\n\n//sampleStart\nfun perform(animal: Animal) {\n    val kFunction: KFunction&lt;*&gt; = when (animal) {\n        is Cat -&gt; animal::meow\n        is Dog -&gt; animal::woof\n    }\n    kFunction.call()\n}\n//sampleEnd\n\nfun main() {\n    perform(Cat())\n}\n</div><p id="whatsnew14.md-dc3a8051" >You can use different member references <code class="code " id="whatsnew14.md-a3eacd94"  >animal::meow</code> and <code class="code " id="whatsnew14.md-7404ef45"  >animal::woof</code> after the animal variable has been smart cast to specific types <code class="code " id="whatsnew14.md-965f1d7e"  >Cat</code> and <code class="code " id="whatsnew14.md-9f51cbc8"  >Dog</code>. After type checks, you can access member references corresponding to subtypes.</p></section><section class="chapter"  ><h4 id="whatsnew14.md-better-inference-for-delegated-properties" data-toc="whatsnew14#whatsnew14.md-better-inference-for-delegated-properties"  >Better inference for delegated properties</h4><p id="whatsnew14.md-ed41f2a0" >The type of a delegated property wasn’t taken into account while analyzing the delegate expression which follows the <code class="code " id="whatsnew14.md-ab37eca6"  >by</code> keyword. For instance, the following code didn’t compile before, but now the compiler correctly infers the types of the <code class="code " id="whatsnew14.md-da1c844a"  >old</code> and <code class="code " id="whatsnew14.md-c3829530"  >new</code> parameters as <code class="code " id="whatsnew14.md-846914d7"  >String?</code>:</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-7fd641fe"        data-runnable="true" data-min-compiler-version="1.4"  >import kotlin.properties.Delegates\n\nfun main() {\n    var prop: String? by Delegates.observable(null) { p, old, new -&gt;\n        println(&quot;$old → $new&quot;)\n    }\n    prop = &quot;abc&quot;\n    prop = &quot;xyz&quot;\n}\n</div></section><section class="chapter"  ><h4 id="whatsnew14.md-sam-conversion-for-java-interfaces-with-different-arguments" data-toc="whatsnew14#whatsnew14.md-sam-conversion-for-java-interfaces-with-different-arguments"  >SAM conversion for Java interfaces with different arguments</h4><p id="whatsnew14.md-502355cd" >Kotlin has supported SAM conversions for Java interfaces from the beginning, but there was one case that wasn’t supported, which was sometimes annoying when working with existing Java libraries. If you called a Java method that took two SAM interfaces as parameters, both arguments needed to be either lambdas or regular objects. You couldn\'t pass one argument as a lambda and another as an object.</p><p id="whatsnew14.md-61f41a8e" >The new algorithm fixes this issue, and you can pass a lambda instead of a SAM interface in any case, which is the way you’d naturally expect it to work.</p><div class="code-block" data-lang="java" id="whatsnew14.md-efa6bf7e"         >// FILE: A.java\npublic class A {\n    public static void foo(Runnable r1, Runnable r2) {}\n}\n</div><div class="code-block" data-lang="kotlin" id="whatsnew14.md-45dff6d8"         >// FILE: test.kt\nfun test(r1: Runnable) {\n    A.foo(r1) {}  // Works in Kotlin 1.4\n}\n</div></section><section class="chapter"  ><h4 id="whatsnew14.md-java-sam-interfaces-in-kotlin" data-toc="whatsnew14#whatsnew14.md-java-sam-interfaces-in-kotlin"  >Java SAM interfaces in Kotlin</h4><p id="whatsnew14.md-e868d294" >In Kotlin 1.4, you can use Java SAM interfaces in Kotlin and apply SAM conversions to them.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-fe9c5316"         >import java.lang.Runnable\n\nfun foo(r: Runnable) {}\n\nfun test() { \n    foo { } // OK\n}\n</div><p id="whatsnew14.md-5669642b" >In Kotlin 1.3, you would have had to declare the function <code class="code " id="whatsnew14.md-af930942"  >foo</code> above in Java code to perform a SAM conversion.</p></section></section><section class="chapter"  ><h3 id="whatsnew14.md-unified-backends-and-extensibility" data-toc="whatsnew14#whatsnew14.md-unified-backends-and-extensibility"  >Unified backends and extensibility</h3><p id="whatsnew14.md-6f16e967" >In Kotlin, we have three backends that generate executables: Kotlin/JVM, Kotlin/JS, and Kotlin/Native. Kotlin/JVM and Kotlin/JS don\'t share much code since they were developed independently of each other. Kotlin/Native is based on a new infrastructure built around an intermediate representation (IR) for Kotlin code.</p><p id="whatsnew14.md-53748725" >We are now migrating Kotlin/JVM and Kotlin/JS to the same IR. As a result, all three backends share a lot of logic and have a unified pipeline. This allows us to implement most features, optimizations, and bug fixes only once for all platforms. Both new IR-based back-ends are in <a href="#components-stability.md" id="whatsnew14.md-f42145a9"   >Alpha</a>.</p><p id="whatsnew14.md-bf6d48e5" >A common backend infrastructure also opens the door for multiplatform compiler extensions. You will be able to plug into the pipeline and add custom processing and transformations that will automatically work for all platforms.</p><p id="whatsnew14.md-909a76ce" >We encourage you to use our new <a href="#whatsnew14.md-new-jvm-ir-backend" id="whatsnew14.md-dd4af374"   >JVM IR</a> and <a href="#whatsnew14.md-new-js-ir-backend" id="whatsnew14.md-f213ad1e"   >JS IR</a> backends, which are currently in Alpha, and share your feedback with us.</p></section></section><section class="chapter"  ><h2 id="whatsnew14.md-kotlin-jvm" data-toc="whatsnew14#whatsnew14.md-kotlin-jvm"  >Kotlin/JVM</h2><p id="whatsnew14.md-228430ba" >Kotlin 1.4.0 includes a number of JVM-specific improvements, such as:</p><ul class="list _ul" id="whatsnew14.md-1035eb27"   ><li class="list__item" id="whatsnew14.md-7e084f55" ><a href="#whatsnew14.md-new-jvm-ir-backend" id="whatsnew14.md-aed778d6"   >New JVM IR backend</a></li><li class="list__item" id="whatsnew14.md-3a2eeb8a" ><a href="#whatsnew14.md-new-modes-for-generating-default-methods" id="whatsnew14.md-1d49cd70"   >New modes for generating default methods in interfaces</a></li><li class="list__item" id="whatsnew14.md-694c29aa" ><a href="#whatsnew14.md-unified-exception-type-for-null-checks" id="whatsnew14.md-6a863b14"   >Unified exception type for null checks</a></li><li class="list__item" id="whatsnew14.md-67582f72" ><a href="#whatsnew14.md-type-annotations-in-the-jvm-bytecode" id="whatsnew14.md-32fff8e3"   >Type annotations in the JVM bytecode</a></li></ul><section class="chapter"  ><h3 id="whatsnew14.md-new-jvm-ir-backend" data-toc="whatsnew14#whatsnew14.md-new-jvm-ir-backend"  >New JVM IR backend</h3><p id="whatsnew14.md-952a874f" >Along with Kotlin/JS, we are migrating Kotlin/JVM to the <a href="#whatsnew14.md-unified-backends-and-extensibility" id="whatsnew14.md-c268beea"   >unified IR backend</a>, which allows us to implement most features and bug fixes once for all platforms. You will also be able to benefit from this by creating multiplatform extensions that will work for all platforms.</p><p id="whatsnew14.md-1d4168ae" >Kotlin 1.4.0 does not provide a public API for such extensions yet, but we are working closely with our partners, including <a href="https://developer.android.com/jetpack/compose" id="whatsnew14.md-ad200d06"   data-external="true" rel="noopener noreferrer" >Jetpack Compose</a>, who are already building their compiler plugins using our new backend.</p><p id="whatsnew14.md-e6dd8219" >We encourage you to try out the new Kotlin/JVM backend, which is currently in Alpha, and to file any issues and feature requests to our <a href="https://youtrack.jetbrains.com/issues/KT" id="whatsnew14.md-7f37e409"   data-external="true" rel="noopener noreferrer" >issue tracker</a>. This will help us to unify the compiler pipelines and bring compiler extensions like Jetpack Compose to the Kotlin community more quickly.</p><p id="whatsnew14.md-a7b9026b" >To enable the new JVM IR backend, specify an additional compiler option in your Gradle build script:</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-4b9c38cf"         >kotlinOptions.useIR = true\n</div><aside data-type="note" class="prompt" data-title="" id="whatsnew14.md-ffc2539b" ><p id="whatsnew14.md-b31c1536" >If you <a href="https://developer.android.com/jetpack/compose/setup?hl=en" id="whatsnew14.md-d42ad0f5"   data-external="true" rel="noopener noreferrer" >enable Jetpack Compose</a>, you will automatically be opted in to the new JVM backend without needing to specify the compiler option in <code class="code " id="whatsnew14.md-ad2d8105"  >kotlinOptions</code>.</p></aside><p id="whatsnew14.md-35998bb8" >When using the command-line compiler, add the compiler option <code class="code " id="whatsnew14.md-c67d7d4f"  >-Xuse-ir</code>.</p><aside data-type="note" class="prompt" data-title="" id="whatsnew14.md-cd983c6c" ><p id="whatsnew14.md-644ba6de" >You can use code compiled by the new JVM IR backend only if you\'ve enabled the new backend. Otherwise, you will get an error. Considering this, we don\'t recommend that library authors switch to the new backend in production.</p></aside></section><section class="chapter"  ><h3 id="whatsnew14.md-new-modes-for-generating-default-methods" data-toc="whatsnew14#whatsnew14.md-new-modes-for-generating-default-methods"  >New modes for generating default methods</h3><p id="whatsnew14.md-107b9c79" >When compiling Kotlin code to targets JVM 1.8 and above, you could compile non-abstract methods of Kotlin interfaces into Java\'s <code class="code " id="whatsnew14.md-8e340890"  >default</code> methods. For this purpose, there was a mechanism that includes the <code class="code " id="whatsnew14.md-d2dbe2b8"  >@JvmDefault</code> annotation for marking such methods and the <code class="code " id="whatsnew14.md-3a6a54e8"  >-Xjvm-default</code> compiler option that enables processing of this annotation.</p><p id="whatsnew14.md-fc69cf1f" >In 1.4.0, we\'ve added a new mode for generating default methods: <code class="code " id="whatsnew14.md-68dfb612"  >-Xjvm-default=all</code> compiles <em id="whatsnew14.md-ac30e4b9" class=""  >all</em> non-abstract methods of Kotlin interfaces to <code class="code " id="whatsnew14.md-de1b62b"  >default</code> Java methods. For compatibility with the code that uses the interfaces compiled without <code class="code " id="whatsnew14.md-4a50f67c"  >default</code>, we also added <code class="code " id="whatsnew14.md-56b5fd95"  >all-compatibility</code> mode.</p><p id="whatsnew14.md-1fc552c3" >For more information about default methods in the Java interop, see the <a href="#java-to-kotlin-interop.md-default-methods-in-interfaces" id="whatsnew14.md-94a6db8f"   >documentation</a> and <a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/" id="whatsnew14.md-f3d4727e"   data-external="true" rel="noopener noreferrer" >this blog post</a>.</p></section><section class="chapter"  ><h3 id="whatsnew14.md-unified-exception-type-for-null-checks" data-toc="whatsnew14#whatsnew14.md-unified-exception-type-for-null-checks"  >Unified exception type for null checks</h3><p id="whatsnew14.md-60994d7e" >Starting from Kotlin 1.4.0, all runtime null checks will throw a <code class="code " id="whatsnew14.md-95a26c49"  >java.lang.NullPointerException</code> instead of <code class="code " id="whatsnew14.md-a15a937b"  >KotlinNullPointerException</code>, <code class="code " id="whatsnew14.md-5b8d590c"  >IllegalStateException</code>, <code class="code " id="whatsnew14.md-ad1be522"  >IllegalArgumentException</code>, and <code class="code " id="whatsnew14.md-c8aca6d7"  >TypeCastException</code>. This applies to: the <code class="code " id="whatsnew14.md-877b97bf"  >!!</code> operator, parameter null checks in the method preamble, platform-typed expression null checks, and the <code class="code " id="whatsnew14.md-11d2d814"  >as</code> operator with a non-null type. This doesn’t apply to <code class="code " id="whatsnew14.md-145f8f44"  >lateinit</code> null checks and explicit library function calls like <code class="code " id="whatsnew14.md-2828b045"  >checkNotNull</code> or <code class="code " id="whatsnew14.md-40f335b3"  >requireNotNull</code>.</p><p id="whatsnew14.md-69de24e4" >This change increases the number of possible null check optimizations that can be performed either by the Kotlin compiler or by various kinds of bytecode processing tools, such as the Android <a href="https://developer.android.com/studio/build/shrink-code" id="whatsnew14.md-62d800dc"   data-external="true" rel="noopener noreferrer" >R8 optimizer</a>.</p><p id="whatsnew14.md-3a51e029" >Note that from a developer’s perspective, things won’t change that much: the Kotlin code will throw exceptions with the same error messages as before. The type of exception changes, but the information passed stays the same.</p></section><section class="chapter"  ><h3 id="whatsnew14.md-type-annotations-in-the-jvm-bytecode" data-toc="whatsnew14#whatsnew14.md-type-annotations-in-the-jvm-bytecode"  >Type annotations in the JVM bytecode</h3><p id="whatsnew14.md-c101d4a0" >Kotlin can now generate type annotations in the JVM bytecode (target version 1.8+), so that they become available in Java reflection at runtime. To emit the type annotation in the bytecode, follow these steps:</p><ol class="list _decimal" id="whatsnew14.md-e56d8cb9"   ><li class="list__item" id="whatsnew14.md-4f0de01a" ><p>Make sure that your declared annotation has a proper annotation target (Java’s <code class="code " id="whatsnew14.md-6861cc8d"  >ElementType.TYPE_USE</code> or Kotlin’s <code class="code " id="whatsnew14.md-d102fe5d"  >AnnotationTarget.TYPE</code>) and retention (<code class="code " id="whatsnew14.md-832f7a95"  >AnnotationRetention.RUNTIME</code> ).</p></li><li class="list__item" id="whatsnew14.md-3bdcb7a9" ><p>Compile the annotation class declaration to JVM bytecode target version 1.8+. You can specify it with <code class="code " id="whatsnew14.md-962ff5e1"  >-jvm-target=1.8</code> compiler option.</p></li><li class="list__item" id="whatsnew14.md-30d6ce3d" ><p>Compile the code that uses the annotation to JVM bytecode target version 1.8+ (<code class="code " id="whatsnew14.md-37778655"  >-jvm-target=1.8</code>) and add the <code class="code " id="whatsnew14.md-87865a38"  >-Xemit-jvm-type-annotations</code> compiler option.</p></li></ol><p id="whatsnew14.md-6e8bbe33" >Note that the type annotations from the standard library aren’t emitted in the bytecode for now because the standard library is compiled with the target version 1.6.</p><p id="whatsnew14.md-e938ea28" >So far, only the basic cases are supported:</p><ul class="list _ul" id="whatsnew14.md-44ce102"   ><li class="list__item" id="whatsnew14.md-749a7a35" ><p>Type annotations on method parameters, method return types and property types;</p></li><li class="list__item" id="whatsnew14.md-80e21f9c" ><p>Invariant projections of type arguments, such as <code class="code " id="whatsnew14.md-982b6a07"  >Smth&lt;@Ann Foo&gt;</code>, <code class="code " id="whatsnew14.md-9702b266"  >Array&lt;@Ann Foo&gt;</code>.</p></li></ul><p id="whatsnew14.md-c45979db" >In the following example, the <code class="code " id="whatsnew14.md-ffe3d5fd"  >@Foo</code> annotation on the <code class="code " id="whatsnew14.md-711e5165"  >String</code> type can be emitted to the bytecode and then used by the library code:</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-2b803be2"         >@Target(AnnotationTarget.TYPE)\nannotation class Foo\n\nclass A {\n    fun foo(): @Foo String = &quot;OK&quot;\n}\n</div></section></section><section class="chapter"  ><h2 id="whatsnew14.md-kotlin-js" data-toc="whatsnew14#whatsnew14.md-kotlin-js"  >Kotlin/JS</h2><p id="whatsnew14.md-bad7aec6" >On the JS platform, Kotlin 1.4.0 provides the following improvements:</p><ul class="list _ul" id="whatsnew14.md-5402b7d0"   ><li class="list__item" id="whatsnew14.md-3f25b76e" ><a href="#whatsnew14.md-new-gradle-dsl" id="whatsnew14.md-eaf7efeb"   >New Gradle DSL</a></li><li class="list__item" id="whatsnew14.md-9e27f52" ><a href="#whatsnew14.md-new-js-ir-backend" id="whatsnew14.md-f167d47f"   >New JS IR backend</a></li></ul><section class="chapter"  ><h3 id="whatsnew14.md-new-gradle-dsl" data-toc="whatsnew14#whatsnew14.md-new-gradle-dsl"  >New Gradle DSL</h3><p id="whatsnew14.md-8706d9c5" >The <code class="code " id="whatsnew14.md-a891fae7"  >kotlin.js</code> Gradle plugin comes with an adjusted Gradle DSL, which provides a number of new configuration options and is more closely aligned to the DSL used by the <code class="code " id="whatsnew14.md-5501388b"  >kotlin-multiplatform</code> plugin. Some of the most impactful changes include:</p><ul class="list _ul" id="whatsnew14.md-daa91242"   ><li class="list__item" id="whatsnew14.md-4e76e109" ><p>Explicit toggles for the creation of executable files via <code class="code " id="whatsnew14.md-5423ed2"  >binaries.executable()</code>. Read more about the executing Kotlin/JS and its environment <a href="#js-project-setup.md-execution-environments" id="whatsnew14.md-37ffafd7"   >here</a>.</p></li><li class="list__item" id="whatsnew14.md-b6fbb4c3" ><p>Configuration of webpack\'s CSS and style loaders from within the Gradle configuration via <code class="code " id="whatsnew14.md-12e8ffbb"  >cssSupport</code>. Read more about using them <a href="#js-project-setup.md-css" id="whatsnew14.md-4dc9bc9f"   >here</a>.</p></li><li class="list__item" id="whatsnew14.md-82a830b3" ><p>Improved management for npm dependencies, with mandatory version numbers or <a href="https://docs.npmjs.com/misc/semver#versions" id="whatsnew14.md-c1862500"   data-external="true" rel="noopener noreferrer" >semver</a> version ranges, as well as support for <em id="whatsnew14.md-b2f67ffb" class=""  >development</em>, <em id="whatsnew14.md-e8e2e44a" class=""  >peer</em>, and <em id="whatsnew14.md-11e8d031" class=""  >optional</em> npm dependencies using <code class="code " id="whatsnew14.md-56cb9e6e"  >devNpm</code>, <code class="code " id="whatsnew14.md-141e3906"  >optionalNpm</code> and <code class="code " id="whatsnew14.md-bb0b3608"  >peerNpm</code>. Read more about dependency management for npm packages directly from Gradle <a href="#js-project-setup.md-npm-dependencies" id="whatsnew14.md-2771c81c"   >here</a>.</p></li><li class="list__item" id="whatsnew14.md-c62b5551" ><p>Stronger integrations for <a href="https://github.com/Kotlin/dukat" id="whatsnew14.md-bfc75900"   data-external="true" rel="noopener noreferrer" >Dukat</a>, the generator for Kotlin external declarations. External declarations can now be generated at build time, or can be manually generated via a Gradle task. Read more about how to use the integration <a href="#js-external-declarations-with-dukat.md" id="whatsnew14.md-7aa942bf"   >here</a>.</p></li></ul></section><section class="chapter"  ><h3 id="whatsnew14.md-new-js-ir-backend" data-toc="whatsnew14#whatsnew14.md-new-js-ir-backend"  >New JS IR backend</h3><p id="whatsnew14.md-653be060" >The <a href="#js-ir-compiler.md" id="whatsnew14.md-cfb2e4c"   >IR backend for Kotlin/JS</a>, which currently has <a href="#components-stability.md" id="whatsnew14.md-230086f3"   >Alpha</a> stability, provides some new functionality specific to the Kotlin/JS target which is focused around the generated code size through dead code elimination, and improved interoperation with JavaScript and TypeScript, among others.</p><p id="whatsnew14.md-60adbfb7" >To enable the Kotlin/JS IR backend, set the key <code class="code " id="whatsnew14.md-fbc18aa8"  >kotlin.js.compiler=ir</code> in your <code class="code " id="whatsnew14.md-86dddb3b"  >gradle.properties</code>, or pass the <code class="code " id="whatsnew14.md-6c80a117"  >IR</code> compiler type to the <code class="code " id="whatsnew14.md-b885a192"  >js</code> function of your Gradle build script:</p><div class="code-block" data-lang="groovy" id="whatsnew14.md-e93b9449"         >kotlin {\n    js(IR) { // or: LEGACY, BOTH\n        // . . .\n    }\n    binaries.executable()\n}\n</div><p id="whatsnew14.md-189d7140" >For more detailed information about how to configure the Kotlin/JS IR compiler backend, check out the <a href="#js-ir-compiler.md" id="whatsnew14.md-e0fe9b53"   >documentation</a>.</p><p id="whatsnew14.md-551e7279" >With the new <a href="#js-to-kotlin-interop.md-jsexport-annotation" id="whatsnew14.md-41dc925e"   >@JsExport</a> annotation and the ability to <b id="whatsnew14.md-3dd0cc1c" class=""  ><a href="#js-ir-compiler.md-preview-generation-of-typescript-declaration-files-d-ts" id="whatsnew14.md-ab4a4203"   >generate TypeScript definitions</a> from Kotlin code</b>, the Kotlin/JS IR compiler backend improves JavaScript &amp; TypeScript interoperability. This also makes it easier to integrate Kotlin/JS code with existing tooling, to create <b id="whatsnew14.md-ef1d5798" class=""  >hybrid applications</b> and leverage code-sharing functionality in multiplatform projects.</p><p id="whatsnew14.md-5b146c33" >Learn more about the available features in the Kotlin/JS IR compiler backend in the <a href="#js-ir-compiler.md" id="whatsnew14.md-6f2352bf"   >documentation</a>.</p></section></section><section class="chapter"  ><h2 id="whatsnew14.md-kotlin-native" data-toc="whatsnew14#whatsnew14.md-kotlin-native"  >Kotlin/Native</h2><p id="whatsnew14.md-3fe4d8f0" >In 1.4.0, Kotlin/Native got a significant number of new features and improvements, including:</p><ul class="list _ul" id="whatsnew14.md-3ae7d8f5"   ><li class="list__item" id="whatsnew14.md-73e7e4fb" ><a href="#whatsnew14.md-support-for-kotlin-s-suspending-functions-in-swift-and-objective-c" id="whatsnew14.md-ad7c79cb"   >Support for suspending functions in Swift and Objective-C</a></li><li class="list__item" id="whatsnew14.md-97a7e6" ><a href="#whatsnew14.md-objective-c-generics-support-by-default" id="whatsnew14.md-247bf121"   >Objective-C generics support by default</a></li><li class="list__item" id="whatsnew14.md-778d2ecc" ><a href="#whatsnew14.md-exception-handling-in-objective-c-swift-interop" id="whatsnew14.md-4cc9c599"   >Exception handling in Objective-C/Swift interop</a></li><li class="list__item" id="whatsnew14.md-177c5d4b" ><a href="#whatsnew14.md-generate-release-dsyms-on-apple-targets-by-default" id="whatsnew14.md-ecb95b52"   >Generate release .dSYMs on Apple targets by default</a></li><li class="list__item" id="whatsnew14.md-f4fdac45" ><a href="#whatsnew14.md-performance-improvements" id="whatsnew14.md-6d7d3660"   >Performance improvements</a></li><li class="list__item" id="whatsnew14.md-ec78f310" ><a href="#whatsnew14.md-simplified-management-of-cocoapods-dependencies" id="whatsnew14.md-b186edd0"   >Simplified management of CocoaPods dependencies</a></li></ul><section class="chapter"  ><h3 id="whatsnew14.md-support-for-kotlin-s-suspending-functions-in-swift-and-objective-c" data-toc="whatsnew14#whatsnew14.md-support-for-kotlin-s-suspending-functions-in-swift-and-objective-c"  >Support for Kotlin’s suspending functions in Swift and Objective-C</h3><p id="whatsnew14.md-f5a9c83c" >In 1.4.0, we add the basic support for suspending functions in Swift and Objective-C. Now, when you compile a Kotlin module into an Apple framework, suspending functions are available in it as functions with callbacks (<code class="code " id="whatsnew14.md-e68c20d2"  >completionHandler</code> in the Swift/Objective-C terminology). When you have such functions in the generated framework’s header, you can call them from your Swift or Objective-C code and even override them.</p><p id="whatsnew14.md-ec6f0a21" >For example, if you write this Kotlin function:</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-d22ebf18"         >suspend fun queryData(id: Int): String = ...\n</div><p id="whatsnew14.md-15b3f8e" >…then you can call it from Swift like so:</p><div class="code-block" data-lang="swift" id="whatsnew14.md-a1c2309f"         >queryData(id: 17) { result, error in\n   if let e = error {\n       print(&quot;ERROR: \\(e)&quot;)\n   } else {\n       print(result!)\n   }\n}\n</div><p id="whatsnew14.md-642f3b4d" >For more information about using suspending functions in Swift and Objective-C, see the <a href="#native-objc-interop.md" id="whatsnew14.md-b182b67f"   >documentation</a>.</p></section><section class="chapter"  ><h3 id="whatsnew14.md-objective-c-generics-support-by-default" data-toc="whatsnew14#whatsnew14.md-objective-c-generics-support-by-default"  >Objective-C generics support by default</h3><p id="whatsnew14.md-d8665163" >Previous versions of Kotlin provided experimental support for generics in Objective-C interop. Since 1.4.0, Kotlin/Native generates Apple frameworks with generics from Kotlin code by default. In some cases, this may break existing Objective-C or Swift code calling Kotlin frameworks. To have the framework header written without generics, add the <code class="code " id="whatsnew14.md-8ac00d73"  >-Xno-objc-generics</code> compiler option.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-b4088b29"         >kotlin {\n    targets.withType&lt;org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget&gt; {\n        binaries.all {\n            freeCompilerArgs += &quot;-Xno-objc-generics&quot;\n        }\n    }\n}\n</div><p id="whatsnew14.md-1a3fbc41" >Please note that all specifics and limitations listed in the <a href="#native-objc-interop.md-generics" id="whatsnew14.md-f9872fb6"   >documentation</a> are still valid.</p></section><section class="chapter"  ><h3 id="whatsnew14.md-exception-handling-in-objective-c-swift-interop" data-toc="whatsnew14#whatsnew14.md-exception-handling-in-objective-c-swift-interop"  >Exception handling in Objective-C/Swift interop</h3><p id="whatsnew14.md-b30adb23" >In 1.4.0, we slightly change the Swift API generated from Kotlin with respect to the way exceptions are translated. There is a fundamental difference in error handling between Kotlin and Swift. All Kotlin exceptions are unchecked, while Swift has only checked errors. Thus, to make Swift code aware of expected exceptions, Kotlin functions should be marked with a <code class="code " id="whatsnew14.md-df80b834"  >@Throws</code> annotation specifying a list of potential exception classes.</p><p id="whatsnew14.md-47eb56da" >When compiling to Swift or the Objective-C framework, functions that have or are inheriting <code class="code " id="whatsnew14.md-65077414"  >@Throws</code> annotation are represented as <code class="code " id="whatsnew14.md-ac970922"  >NSError*</code> -producing methods in Objective-C and as <code class="code " id="whatsnew14.md-a7c0c73b"  >throws</code> methods in Swift.</p><p id="whatsnew14.md-d15d4994" >Previously, any exceptions other than <code class="code " id="whatsnew14.md-a63f9ca3"  >RuntimeException</code> and <code class="code " id="whatsnew14.md-a3ec2539"  >Error</code> were propagated as <code class="code " id="whatsnew14.md-321371ff"  >NSError</code>. Now this behavior changes: now <code class="code " id="whatsnew14.md-5b2c0861"  >NSError</code> is thrown only for exceptions that are instances of classes specified as parameters of <code class="code " id="whatsnew14.md-db44d565"  >@Throws</code> annotation (or their subclasses). Other Kotlin exceptions that reach Swift/Objective-C are considered unhandled and cause program termination.</p></section><section class="chapter"  ><h3 id="whatsnew14.md-generate-release-dsyms-on-apple-targets-by-default" data-toc="whatsnew14#whatsnew14.md-generate-release-dsyms-on-apple-targets-by-default"  >Generate release .dSYMs on Apple targets by default</h3><p id="whatsnew14.md-4aa6a577" >Starting with 1.4.0, the Kotlin/Native compiler produces <a href="https://developer.apple.com/documentation/xcode/building_your_app_to_include_debugging_information" id="whatsnew14.md-41895c14"   data-external="true" rel="noopener noreferrer" >debug symbol files</a> (<code class="code " id="whatsnew14.md-244c14ea"  >.dSYM</code> s) for release binaries on Darwin platforms by default. This can be disabled with the <code class="code " id="whatsnew14.md-e8d391be"  >-Xadd-light-debug=disable</code> compiler option. On other platforms, this option is disabled by default. To toggle this option in Gradle, use:</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-b5f7dd65"         >kotlin {\n    targets.withType&lt;org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget&gt; {\n        binaries.all {\n            freeCompilerArgs += &quot;-Xadd-light-debug={enable|disable}&quot;\n        }\n    }\n}\n</div><p id="whatsnew14.md-db1320b" >For more information about crash report symbolication, see the <a href="#native-ios-symbolication.md" id="whatsnew14.md-cb9f98e7"   >documentation</a>.</p></section><section class="chapter"  ><h3 id="whatsnew14.md-performance-improvements" data-toc="whatsnew14#whatsnew14.md-performance-improvements"  >Performance improvements</h3><p id="whatsnew14.md-ba8bba33" >Kotlin/Native has received a number of performance improvements that speed up both the development process and execution. Here are some examples:</p><ul class="list _ul" id="whatsnew14.md-f213927e"   ><li class="list__item" id="whatsnew14.md-ee9016d3" ><p id="whatsnew14.md-4b34d1b0" >To improve the speed of object allocation, we now offer the <a href="https://github.com/microsoft/mimalloc" id="whatsnew14.md-d59b7274"   data-external="true" rel="noopener noreferrer" >mimalloc</a> memory allocator as an alternative to the system allocator. mimalloc works up to two times faster on some benchmarks. Currently, the usage of mimalloc in Kotlin/Native is experimental; you can switch to it using the <code class="code " id="whatsnew14.md-e67de3dd"  >-Xallocator=mimalloc</code> compiler option.</p></li><li class="list__item" id="whatsnew14.md-41e9035c" ><p id="whatsnew14.md-1ac72114" >We’ve reworked how C interop libraries are built. With the new tooling, Kotlin/Native produces interop libraries up to 4 times as fast as before, and artifacts are 25% to 30% the size they used to be.</p></li><li class="list__item" id="whatsnew14.md-5a41bb9c" ><p id="whatsnew14.md-e7237938" >Overall runtime performance has improved because of optimizations in GC. This improvement will be especially apparent in projects with a large number of long-lived objects. <code class="code " id="whatsnew14.md-cda7fc7c"  >HashMap</code> and <code class="code " id="whatsnew14.md-cfffd769"  >HashSet</code> collections now work faster by escaping redundant boxing.</p></li><li class="list__item" id="whatsnew14.md-176276b6" ><p id="whatsnew14.md-ce512d0c" >In 1.3.70 we introduced two new features for improving the performance of Kotlin/Native compilation: <a href="https://blog.jetbrains.com/kotlin/2020/03/kotlin-1-3-70-released/#kotlin-native" id="whatsnew14.md-51304316"   data-external="true" rel="noopener noreferrer" >caching project dependencies and running the compiler from the Gradle daemon</a>. Since that time, we’ve managed to fix numerous issues and improve the overall stability of these features.</p></li></ul></section><section class="chapter"  ><h3 id="whatsnew14.md-simplified-management-of-cocoapods-dependencies" data-toc="whatsnew14#whatsnew14.md-simplified-management-of-cocoapods-dependencies"  >Simplified management of CocoaPods dependencies</h3><p id="whatsnew14.md-d5310ae4" >Previously, once you integrated your project with the dependency manager CocoaPods, you could build an iOS, macOS, watchOS, or tvOS part of your project only in Xcode, separate from other parts of your multiplatform project. These other parts could be built in Intellij IDEA.</p><p id="whatsnew14.md-8ef98b82" >Moreover, every time you added a dependency on an Objective-C library stored in CocoaPods (Pod library), you had to switch from IntelliJ IDEA to Xcode, call <code class="code " id="whatsnew14.md-b3fa619"  >pod install</code>, and run the Xcode build there.</p><p id="whatsnew14.md-319ae278" >Now you can manage Pod dependencies right in Intellij IDEA while enjoying the benefits it provides for working with code, such as code highlighting and completion. You can also build the whole Kotlin project with Gradle, without having to switch to Xcode. This means you only have to go to Xcode when you need to write Swift/Objective-C code or run your application on a simulator or device.</p><p id="whatsnew14.md-f016102a" >Now you can also work with Pod libraries stored locally.</p><p id="whatsnew14.md-c2d33779" >Depending on your needs, you can add dependencies between:</p><ul class="list _ul" id="whatsnew14.md-b33a9411"   ><li class="list__item" id="whatsnew14.md-15e54105" ><p>A Kotlin project and Pod libraries stored remotely in the CocoaPods repository or stored locally on your machine.</p></li><li class="list__item" id="whatsnew14.md-26ca6826" ><p>A Kotlin Pod (Kotlin project used as a CocoaPods dependency) and an Xcode project with one or more targets.</p></li></ul><p id="whatsnew14.md-a2cbc90f" >Complete the initial configuration, and when you add a new dependency to <code class="code " id="whatsnew14.md-4fb2838b"  >cocoapods</code>, just re-import the project in IntelliJ IDEA. The new dependency will be added automatically. No additional steps are required.</p><p id="whatsnew14.md-a5e59713" >Learn <a href="#native-cocoapods.md" id="whatsnew14.md-2e1371d"   >how to add dependencies</a>.</p></section></section><section class="chapter"  ><h2 id="whatsnew14.md-kotlin-multiplatform" data-toc="whatsnew14#whatsnew14.md-kotlin-multiplatform"  >Kotlin Multiplatform</h2><aside data-type="warning" class="prompt" data-title="" id="whatsnew14.md-ad427b60"><p id="whatsnew14.md-d1394b37" >Support for multiplatform projects is in <a href="#components-stability.md" id="whatsnew14.md-5037d3d"   >Alpha</a>. It may change incompatibly and require manual migration in the future. We appreciate your feedback on it in <a href="https://youtrack.jetbrains.com/issues/KT" id="whatsnew14.md-5bd57016"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="whatsnew14.md-995c52e2" ><a href="#multiplatform.md" id="whatsnew14.md-7e9498ff"   >Kotlin Multiplatform</a> reduces time spent writing and maintaining the same code for <a href="#mpp-supported-platforms.md" id="whatsnew14.md-bb45e52c"   >different platforms</a> while retaining the flexibility and benefits of native programming. We continue investing our effort in multiplatform features and improvements:</p><ul class="list _ul" id="whatsnew14.md-fa951bf2"   ><li class="list__item" id="whatsnew14.md-63a9e46a" ><a href="#whatsnew14.md-sharing-code-in-several-targets-with-the-hierarchical-project-structure" id="whatsnew14.md-c2a099fd"   >Sharing code in several targets with the hierarchical project structure</a></li><li class="list__item" id="whatsnew14.md-dfa566fe" ><a href="#whatsnew14.md-leveraging-native-libs-in-the-hierarchical-structure" id="whatsnew14.md-5229f26d"   >Leveraging native libs in the hierarchical structure</a></li><li class="list__item" id="whatsnew14.md-13424899" ><a href="#whatsnew14.md-specifying-dependencies-only-once" id="whatsnew14.md-852926dc"   >Specifying kotlinx dependencies only once</a></li></ul><aside data-type="note" class="prompt" data-title="" id="whatsnew14.md-fe8d6586" ><p id="whatsnew14.md-bf94264" >Multiplatform projects require Gradle 6.0 or later.</p></aside><section class="chapter"  ><h3 id="whatsnew14.md-sharing-code-in-several-targets-with-the-hierarchical-project-structure" data-toc="whatsnew14#whatsnew14.md-sharing-code-in-several-targets-with-the-hierarchical-project-structure"  >Sharing code in several targets with the hierarchical project structure</h3><p id="whatsnew14.md-e3a11708" >With the new hierarchical project structure support, you can share code among <a href="#mpp-supported-platforms.md" id="whatsnew14.md-d3481e87"   >several platforms</a> in a <a href="#mpp-discover-project.md" id="whatsnew14.md-329764ca"   >multiplatform project</a>.</p><p id="whatsnew14.md-368df8a1" >Previously, any code added to a multiplatform project could be placed either in a platform-specific source set, which is limited to one target and can’t be reused by any other platform, or in a common source set, like <code class="code " id="whatsnew14.md-3e5d41b"  >commonMain</code> or <code class="code " id="whatsnew14.md-8452945e"  >commonTest</code>, which is shared across all the platforms in the project. In the common source set, you could only call a platform-specific API by using an <a href="#mpp-connect-to-apis.md" id="whatsnew14.md-8bd6f00c"   ><code class="code " id="whatsnew14.md-2d3694a3"  >expect</code> declaration that needs platform-specific <code class="code " id="whatsnew14.md-56336097"  >actual</code> implementations</a>.</p><p id="whatsnew14.md-fccdf526" >This made it easy to <a href="#mpp-share-on-platforms.md-share-code-on-all-platforms" id="whatsnew14.md-ecd04372"   >share code on all platforms</a>, but it was not so easy to <a href="#mpp-share-on-platforms.md-share-code-on-similar-platforms" id="whatsnew14.md-b207b16a"   >share between only some of the targets</a>, especially similar ones that could potentially reuse a lot of the common logic and third-party APIs.</p><p id="whatsnew14.md-6a85ca47" >For example, in a typical multiplatform project targeting iOS, there are two iOS-related targets: one for iOS ARM64 devices, and the other for the x64 simulator. They have separate platform-specific source sets, but in practice, there is rarely a need for different code for the device and simulator, and their dependencies are much alike. So iOS-specific code could be shared between them.</p><p id="whatsnew14.md-f9234f7a" >Apparently, in this setup, it would be desirable to have a <em id="whatsnew14.md-f3006b01" class=""  >shared source set for two iOS targets</em>, with Kotlin/Native code that could still directly call any of the APIs that are common to both the iOS device and the simulator.</p><p id="whatsnew14.md-651da319" ><figure title="Code shared for iOS targets"><img alt="Code shared for iOS targets" title="Code shared for iOS targets" id="whatsnew14.md-9386e6ee" src="images/iosmain-hierarchy.png"  class="" width="300" height="257" /></figure></p><p id="whatsnew14.md-9b9de1db" >Now you can do this with the <a href="#mpp-share-on-platforms.md-share-code-on-similar-platforms" id="whatsnew14.md-4c4ca310"   >hierarchical project structure support</a>, which infers and adapts the API and language features available in each source set based on which targets consume them.</p><p id="whatsnew14.md-1827537f" >For common combinations of targets, you can create a hierarchical structure with <a href="#mpp-share-on-platforms.md-use-target-shortcuts" id="whatsnew14.md-c906bcd1"   >target shortcuts</a>.</p><p id="whatsnew14.md-7ec241d3" >For example, create two iOS targets and the shared source set shown above with the <code class="code " id="whatsnew14.md-ae44be7a"  >ios()</code> shortcut:</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-54c49c12"         >kotlin {\n    ios() // iOS device and simulator targets; iosMain and iosTest source sets\n}\n</div><p id="whatsnew14.md-85dabc38" >For other combinations of targets,  by connecting the source sets with the <code class="code " id="whatsnew14.md-3f9e847e"  >dependsOn</code> relation.</p><p id="whatsnew14.md-8182e9b4" ><figure title="Hierarchical structure"><img alt="Hierarchical structure" title="Hierarchical structure" id="whatsnew14.md-711f957" src="images/hierarchical-structure.png"  class="" width="1328" height="796" /></figure></p><div class="tabs" id="whatsnew14.md-8ff1c36e" ><div class="tabs__content" data-gtm="tab" id="whatsnew14.md-c64d740"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="whatsnew14.md-c64d740"   data-title="Groovy"      >kotlin {\n    sourceSets {\n        desktopMain {\n            dependsOn(commonMain)\n        }\n        linuxX64Main {\n            dependsOn(desktopMain)\n        }\n        mingwX64Main {\n            dependsOn(desktopMain)\n        }\n        macosX64Main {\n            dependsOn(desktopMain)\n        }\n    }\n}\n\n</div></div><div class="tabs__content" data-gtm="tab" id="whatsnew14.md-44da8b28"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="whatsnew14.md-44da8b28"   data-title="Kotlin"      >kotlin{\n    sourceSets {\n        val desktopMain by creating {\n            dependsOn(commonMain)\n        }\n        val linuxX64Main by getting {\n            dependsOn(desktopMain)\n        }\n        val mingwX64Main by getting {\n            dependsOn(desktopMain)\n        }\n        val macosX64Main by getting {\n            dependsOn(desktopMain)\n        }\n    }\n}\n</div></div></div><p id="whatsnew14.md-89f313ea" >Thanks to the hierarchical project structure, libraries can also provide common APIs for a subset of targets. Learn more about <a href="#mpp-share-on-platforms.md-share-code-in-libraries" id="whatsnew14.md-81789641"   >sharing code in libraries</a>.</p></section><section class="chapter"  ><h3 id="whatsnew14.md-leveraging-native-libs-in-the-hierarchical-structure" data-toc="whatsnew14#whatsnew14.md-leveraging-native-libs-in-the-hierarchical-structure"  >Leveraging native libs in the hierarchical structure</h3><p id="whatsnew14.md-51df81fa" >You can use platform-dependent libraries, such as <code class="code " id="whatsnew14.md-14048dd5"  >Foundation</code>, <code class="code " id="whatsnew14.md-1bd715d6"  >UIKit</code>, and <code class="code " id="whatsnew14.md-4727def1"  >posix</code>, in source sets shared among several native targets. This can help you share more native code without being limited by platform-specific dependencies.</p><p id="whatsnew14.md-f5ec2b09" >No additional steps are required – everything is done automatically. IntelliJ IDEA will help you detect common declarations that you can use in the shared code.</p><p id="whatsnew14.md-85b5249a" >Learn more about <a href="#mpp-share-on-platforms.md-use-native-libraries-in-the-hierarchical-structure" id="whatsnew14.md-5eb369d0"   >usage of platform-dependent libraries</a>.</p></section><section class="chapter"  ><h3 id="whatsnew14.md-specifying-dependencies-only-once" data-toc="whatsnew14#whatsnew14.md-specifying-dependencies-only-once"  >Specifying dependencies only once</h3><p id="whatsnew14.md-f0c2fad" >From now on, instead of specifying dependencies on different variants of the same library in shared and platform-specific source sets where it is used, you should specify a dependency only once in the shared source set.</p><div class="tabs" id="whatsnew14.md-6b81713f" ><div class="tabs__content" data-gtm="tab" id="whatsnew14.md-b56ba01d"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="whatsnew14.md-b56ba01d"   data-title="Groovy"      >kotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation \'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2\'\n            }\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="whatsnew14.md-aba6f47e"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="whatsnew14.md-aba6f47e"   data-title="Kotlin"      >kotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2&quot;)\n            }\n        }\n    }\n}\n\n</div></div></div><p id="whatsnew14.md-f4c18f9a" >Don’t use kotlinx library artifact names with suffixes specifying the platform, such as <code class="code " id="whatsnew14.md-f6930ee"  >-common</code>, <code class="code " id="whatsnew14.md-61a7d3b0"  >-native</code>, or similar, as they are NOT supported anymore. Instead, use the library base artifact name, which in the example above is <code class="code " id="whatsnew14.md-c93cc3b"  >kotlinx-coroutines-core</code>.</p><p id="whatsnew14.md-7a8c6dd4" >However, the change doesn’t currently affect:</p><ul class="list _ul" id="whatsnew14.md-a1e5949e"   ><li class="list__item" id="whatsnew14.md-8223e9fa" ><p>The <code class="code " id="whatsnew14.md-66fa1ae5"  >stdlib</code> library – starting from Kotlin 1.4.0, <a href="#whatsnew14.md-dependency-on-the-standard-library-added-by-default" id="whatsnew14.md-76e040b2"   >the stdlib dependency is added automatically</a>.</p></li><li class="list__item" id="whatsnew14.md-26c9fcf9" ><p>The <code class="code " id="whatsnew14.md-7fc45fd6"  >kotlin.test</code> library – you should still use <code class="code " id="whatsnew14.md-eabec8f4"  >test-common</code> and <code class="code " id="whatsnew14.md-cb1a554d"  >test-annotations-common</code>. These dependencies will be addressed later.</p></li></ul><p id="whatsnew14.md-4f25f40a" >If you need a dependency only for a specific platform, you can still use platform-specific variants of standard and kotlinx libraries with such suffixes as <code class="code " id="whatsnew14.md-14d2497a"  >-jvm</code> or <code class="code " id="whatsnew14.md-da4945cf"  >-js</code>, for example <code class="code " id="whatsnew14.md-df9b9343"  >kotlinx-coroutines-core-jvm</code>.</p><p id="whatsnew14.md-e6cf9fa6" >Learn more about <a href="#gradle.md-configuring-dependencies" id="whatsnew14.md-6eb245dc"   >configuring dependencies</a>.</p></section></section><section class="chapter"  ><h2 id="whatsnew14.md-gradle-project-improvements" data-toc="whatsnew14#whatsnew14.md-gradle-project-improvements"  >Gradle project improvements</h2><p id="whatsnew14.md-5b3eeda5" >Besides Gradle project features and improvements that are specific to <a href="#whatsnew14.md-kotlin-multiplatform" id="whatsnew14.md-5c45015a"   >Kotlin Multiplatform</a>, <a href="#whatsnew14.md-kotlin-jvm" id="whatsnew14.md-32d438b8"   >Kotlin/JVM</a>, <a href="#whatsnew14.md-kotlin-native" id="whatsnew14.md-12fe672a"   >Kotlin/Native</a>, and <a href="#whatsnew14.md-kotlin-js" id="whatsnew14.md-a08cc450"   >Kotlin/JS</a>, there are several changes applicable to all Kotlin Gradle projects:</p><ul class="list _ul" id="whatsnew14.md-4f308981"   ><li class="list__item" id="whatsnew14.md-e7086ad3" ><a href="#whatsnew14.md-dependency-on-the-standard-library-added-by-default" id="whatsnew14.md-6080d29d"   >Dependency on the standard library is now added by default</a></li><li class="list__item" id="whatsnew14.md-4fdc066" ><a href="#whatsnew14.md-minimum-gradle-version-for-kotlin-projects" id="whatsnew14.md-e6828075"   >Kotlin projects require a recent version of Gradle</a></li><li class="list__item" id="whatsnew14.md-f36c88de" ><a href="#whatsnew14.md-improved-gradle-kts-support-in-the-ide" id="whatsnew14.md-8487f534"   >Improved support for Kotlin Gradle DSL in the IDE</a></li></ul><section class="chapter"  ><h3 id="whatsnew14.md-dependency-on-the-standard-library-added-by-default" data-toc="whatsnew14#whatsnew14.md-dependency-on-the-standard-library-added-by-default"  >Dependency on the standard library added by default</h3><p id="whatsnew14.md-d80b57d8" >You no longer need to declare a dependency on the <code class="code " id="whatsnew14.md-dd525852"  >stdlib</code> library in any Kotlin Gradle project, including a multiplatform one. The dependency is added by default.</p><p id="whatsnew14.md-4dfd7edd" >The automatically added standard library will be the same version of the Kotlin Gradle plugin, since they have the same versioning.</p><p id="whatsnew14.md-25dc78d3" >For platform-specific source sets, the corresponding platform-specific variant of the library is used, while a common standard library is added to the rest. The Kotlin Gradle plugin will select the appropriate JVM standard library depending on the <code class="code " id="whatsnew14.md-d2f3081c"  >kotlinOptions.jvmTarget</code> <a href="#gradle.md-compiler-options" id="whatsnew14.md-4903e0bb"   >compiler option</a> of your Gradle build script.</p><p id="whatsnew14.md-731d9385" >Learn how to <a href="#gradle.md-dependency-on-the-standard-library" id="whatsnew14.md-51c03ee7"   >change the default behavior</a>.</p></section><section class="chapter"  ><h3 id="whatsnew14.md-minimum-gradle-version-for-kotlin-projects" data-toc="whatsnew14#whatsnew14.md-minimum-gradle-version-for-kotlin-projects"  >Minimum Gradle version for Kotlin projects</h3><p id="whatsnew14.md-182e54a3" >To enjoy the new features in your Kotlin projects, update Gradle to the <a href="https://gradle.org/releases/" id="whatsnew14.md-907c5bf9"   data-external="true" rel="noopener noreferrer" >latest version</a>. Multiplatform projects require Gradle 6.0 or later, while other Kotlin projects work with Gradle 5.4 or later.</p></section><section class="chapter"  ><h3 id="whatsnew14.md-improved-gradle-kts-support-in-the-ide" data-toc="whatsnew14#whatsnew14.md-improved-gradle-kts-support-in-the-ide"  >Improved *.gradle.kts support in the IDE</h3><p id="whatsnew14.md-9a398cae" >In 1.4.0, we continued improving the IDE support for Gradle Kotlin DSL scripts (<code class="code " id="whatsnew14.md-eaffc33b"  >*.gradle.kts</code> files). Here is what the new version brings:</p><ul class="list _ul" id="whatsnew14.md-9d37fe17"   ><li class="list__item" id="whatsnew14.md-aad883a2" ><p id="whatsnew14.md-c9745ba3" ><em id="whatsnew14.md-da19f6a9" class=""  >Explicit loading of script configurations</em> for better performance. Previously, the changes you make to the build script were loaded automatically in the background. To improve the performance, we\'ve disabled the automatic loading of build script configuration in 1.4.0. Now the IDE loads the changes only when you explicitly apply them.</p><p id="whatsnew14.md-36c67469" >In Gradle versions earlier than 6.0, you need to manually load the script configuration by clicking <b id="whatsnew14.md-9b7efd7a" class=""  >Load Configuration</b> in the editor.</p><p id="whatsnew14.md-daf76774" ><figure title="*.gradle.kts &ndash; Load Configuration"><img alt="*.gradle.kts &ndash; Load Configuration" title="*.gradle.kts &ndash; Load Configuration" id="whatsnew14.md-876dcbb" src="images/gradle-kts-load-config.png"  class="" width="1565" height="276" /></figure></p><p id="whatsnew14.md-d102734e" >In Gradle 6.0 and above, you can explicitly apply changes by clicking <b id="whatsnew14.md-cb6ee4" class=""  >Load Gradle Changes</b> or by reimporting the Gradle project.</p><p id="whatsnew14.md-e0ae1b57" >We’ve added one more action in IntelliJ IDEA 2020.1 with Gradle 6.0 and above – <b id="whatsnew14.md-44f456f2" class=""  >Load Script Configurations</b>, which loads changes to the script configurations without updating the whole project. This takes much less time than reimporting the whole project.</p><p id="whatsnew14.md-9151ccb7" ><figure title="*.gradle.kts &ndash; Load Script Changes and Load Gradle Changes"><img alt="*.gradle.kts &ndash; Load Script Changes and Load Gradle Changes" title="*.gradle.kts &ndash; Load Script Changes and Load Gradle Changes" id="whatsnew14.md-f1979f26" src="images/gradle-kts.png"  class="" width="1154" height="299" /></figure></p><p id="whatsnew14.md-62b4e645" >You should also <b id="whatsnew14.md-17d889a0" class=""  >Load Script Configurations</b> for newly created scripts or when you open a project with new Kotlin plugin for the first time.</p><p id="whatsnew14.md-7a50ec38" >With Gradle 6.0 and above, you are now able to load all scripts at once as opposed to the previous implementation where they were loaded individually. Since each request requires the Gradle configuration phase to be executed, this could be resource-intensive for large Gradle projects.</p><p id="whatsnew14.md-3836b89a" >Currently, such loading is limited to <code class="code " id="whatsnew14.md-c8a834f"  >build.gradle.kts</code> and <code class="code " id="whatsnew14.md-37f1fa55"  >settings.gradle.kts</code> files (please vote for the related <a href="https://github.com/gradle/gradle/issues/12640" id="whatsnew14.md-8d98e4c2"   data-external="true" rel="noopener noreferrer" >issue</a> ). To enable highlighting for <code class="code " id="whatsnew14.md-1d4ff556"  >init.gradle.kts</code> or applied <a href="https://docs.gradle.org/current/userguide/plugins.html#sec:script_plugins" id="whatsnew14.md-a4f445"   data-external="true" rel="noopener noreferrer" >script plugins</a>, use the old mechanism – adding them to standalone scripts. Configuration for that scripts will be loaded separately when you need it. You can also enable auto-reload for such scripts.</p><p id="whatsnew14.md-6fcc53e9" ><figure title="*.gradle.kts &ndash; Add to standalone scripts"><img alt="*.gradle.kts &ndash; Add to standalone scripts" title="*.gradle.kts &ndash; Add to standalone scripts" id="whatsnew14.md-a1834106" src="images/gradle-kts-standalone.png"  class="" width="1585" height="319" /></figure></p></li><li class="list__item" id="whatsnew14.md-1065a0e3" ><p id="whatsnew14.md-d502c7b3" ><em id="whatsnew14.md-11d51478" class=""  >Better error reporting</em>. Previously you could only see errors from the Gradle Daemon in separate log files. Now the Gradle Daemon returns all the information about errors directly and shows it in the Build tool window. This saves you both time and effort.</p></li></ul></section></section><section class="chapter"  ><h2 id="whatsnew14.md-standard-library" data-toc="whatsnew14#whatsnew14.md-standard-library"  >Standard library</h2><p id="whatsnew14.md-a9390070" >Here is the list of the most significant changes to the Kotlin standard library in 1.4.0:</p><ul class="list _ul" id="whatsnew14.md-1042e235"   ><li class="list__item" id="whatsnew14.md-7d831051" ><a href="#whatsnew14.md-common-exception-processing-api" id="whatsnew14.md-8dbe41b2"   >Common exception processing API</a></li><li class="list__item" id="whatsnew14.md-a63fdc29" ><a href="#whatsnew14.md-new-functions-for-arrays-and-collections" id="whatsnew14.md-9b1a408a"   >New functions for arrays and collections</a></li><li class="list__item" id="whatsnew14.md-ab519d57" ><a href="#whatsnew14.md-functions-for-string-manipulations" id="whatsnew14.md-91e41c1a"   >Functions for string manipulations</a></li><li class="list__item" id="whatsnew14.md-fb63ce31" ><a href="#whatsnew14.md-bit-operations" id="whatsnew14.md-26f05e4a"   >Bit operations</a></li><li class="list__item" id="whatsnew14.md-720234b2" ><a href="#whatsnew14.md-delegated-properties-improvements" id="whatsnew14.md-9b460305"   >Delegated properties improvements</a></li><li class="list__item" id="whatsnew14.md-7ab7849d" ><a href="#whatsnew14.md-converting-from-ktype-to-java-type" id="whatsnew14.md-c3f68ff5"   >Converting from KType to Java Type</a></li><li class="list__item" id="whatsnew14.md-2a9f3f23" ><a href="#whatsnew14.md-proguard-configurations-for-kotlin-reflection" id="whatsnew14.md-96e8dbd3"   >Proguard configurations for Kotlin reflection</a></li><li class="list__item" id="whatsnew14.md-85830019" ><a href="#whatsnew14.md-improving-the-existing-api" id="whatsnew14.md-ca6a28c8"   >Improving the existing API</a></li><li class="list__item" id="whatsnew14.md-4a4f3c05" ><a href="#whatsnew14.md-module-info-descriptors-for-stdlib-artifacts" id="whatsnew14.md-5eb5a77d"   >module-info descriptors for stdlib artifacts</a></li><li class="list__item" id="whatsnew14.md-c0ad9780" ><a href="#whatsnew14.md-deprecations" id="whatsnew14.md-7403d4c3"   >Deprecations</a></li><li class="list__item" id="whatsnew14.md-5de8c7c5" ><a href="#whatsnew14.md-exclusion-of-the-deprecated-experimental-coroutines" id="whatsnew14.md-603c79fc"   >Exclusion of the deprecated experimental coroutines</a></li></ul><section class="chapter"  ><h3 id="whatsnew14.md-common-exception-processing-api" data-toc="whatsnew14#whatsnew14.md-common-exception-processing-api"  >Common exception processing API</h3><p id="whatsnew14.md-835256b" >The following API elements have been moved to the common library:</p><ul class="list _ul" id="whatsnew14.md-f518f8b0"   ><li class="list__item" id="whatsnew14.md-b51c1592" ><p><code class="code " id="whatsnew14.md-aa503eb"  >Throwable.stackTraceToString()</code> extension function, which returns the detailed description of this throwable with its stack trace, and <code class="code " id="whatsnew14.md-7571fb0b"  >Throwable.printStackTrace()</code>, which prints this description to the standard error output.</p></li><li class="list__item" id="whatsnew14.md-e7248e63" ><p><code class="code " id="whatsnew14.md-bb4dd050"  >Throwable.addSuppressed()</code> function, which lets you specify the exceptions that were suppressed in order to deliver the exception, and the <code class="code " id="whatsnew14.md-42eb926b"  >Throwable.suppressedExceptions</code> property, which returns a list of all the suppressed exceptions.</p></li><li class="list__item" id="whatsnew14.md-4926ac38" ><p><code class="code " id="whatsnew14.md-9d4b0142"  >@Throws</code> annotation, which lists exception types that will be checked when the function is compiled to a platform method (on JVM or native platforms).</p></li></ul></section><section class="chapter"  ><h3 id="whatsnew14.md-new-functions-for-arrays-and-collections" data-toc="whatsnew14#whatsnew14.md-new-functions-for-arrays-and-collections"  >New functions for arrays and collections</h3><section class="chapter"  ><h4 id="whatsnew14.md-collections" data-toc="whatsnew14#whatsnew14.md-collections"  >Collections</h4><p id="whatsnew14.md-2d8a96d1" >In 1.4.0, the standard library includes a number of useful functions for working with <b id="whatsnew14.md-b613a946" class=""  >collections</b>:</p><ul class="list _ul" id="whatsnew14.md-b2b808c9"   ><li class="list__item" id="whatsnew14.md-f2a0cf07" ><p id="whatsnew14.md-8fb98746" ><code class="code " id="whatsnew14.md-4fe79b56"  >setOfNotNull()</code>, which makes a set consisting of all the non-null items among the provided arguments.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-b6dad726"        data-runnable="true" data-min-compiler-version="1.4"  >fun main() {\n//sampleStart\n    val set = setOfNotNull(null, 1, 2, 0, null)\n    println(set)\n//sampleEnd\n}\n</div></li><li class="list__item" id="whatsnew14.md-f033f0c4" ><p id="whatsnew14.md-9aa78df3" ><code class="code " id="whatsnew14.md-e46ec527"  >shuffled()</code> for sequences.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-d6ca241a"        data-runnable="true" data-min-compiler-version="1.4"  >fun main() {\n//sampleStart\n    val numbers = (0 until 50).asSequence()\n    val result = numbers.map { it * 2 }.shuffled().take(5)\n    println(result.toList()) //five random even numbers below 100\n//sampleEnd\n}\n</div></li><li class="list__item" id="whatsnew14.md-3a545027" ><p id="whatsnew14.md-efec6b21" ><code class="code " id="whatsnew14.md-a0ba4ddb"  >*Indexed()</code> counterparts for <code class="code " id="whatsnew14.md-96f23bed"  >onEach()</code> and <code class="code " id="whatsnew14.md-f997ccff"  >flatMap()</code>. The operation that they apply to the collection elements has the element index as a parameter.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-7b45a459"        data-runnable="true" data-min-compiler-version="1.4"  >fun main() {\n//sampleStart\n    listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;).onEachIndexed {\n        index, item -&gt; println(index.toString() + &quot;:&quot; + item)\n    }\n\n   val list = listOf(&quot;hello&quot;, &quot;kot&quot;, &quot;lin&quot;, &quot;world&quot;)\n          val kotlin = list.flatMapIndexed { index, item -&gt;\n              if (index in 1..2) item.toList() else emptyList() \n          }\n//sampleEnd\n          println(kotlin)\n}\n</div></li><li class="list__item" id="whatsnew14.md-a742924e" ><p id="whatsnew14.md-fe29a0b1" ><code class="code " id="whatsnew14.md-20da96fe"  >*OrNull()</code> counterparts <code class="code " id="whatsnew14.md-4a12d4ce"  >randomOrNull()</code>, <code class="code " id="whatsnew14.md-430d9e79"  >reduceOrNull()</code>, and <code class="code " id="whatsnew14.md-8e5291dc"  >reduceIndexedOrNull()</code>. They return <code class="code " id="whatsnew14.md-be44dfc0"  >null</code> on empty collections.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-bc62111a"        data-runnable="true" data-min-compiler-version="1.4"  >fun main() {\n//sampleStart\n     val empty = emptyList&lt;Int&gt;()\n     empty.reduceOrNull { a, b -&gt; a + b }\n     //empty.reduce { a, b -&gt; a + b } // Exception: Empty collection can\'t be reduced.\n//sampleEnd\n}\n</div></li><li class="list__item" id="whatsnew14.md-ed79591b" ><p id="whatsnew14.md-d1d4f917" ><code class="code " id="whatsnew14.md-ee6b290b"  >runningFold()</code>, its synonym <code class="code " id="whatsnew14.md-2eb2522d"  >scan()</code>, and <code class="code " id="whatsnew14.md-730a4595"  >runningReduce()</code> apply the given operation to the collection elements sequentially, similarly to <code class="code " id="whatsnew14.md-4009d054"  >fold()</code> and <code class="code " id="whatsnew14.md-e2eb358"  >reduce()</code>; the difference is that these new functions return the whole sequence of intermediate results.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-337d1b82"        data-runnable="true" data-min-compiler-version="1.4"  >fun main() {\n//sampleStart\n    val numbers = mutableListOf(0, 1, 2, 3, 4, 5)\n    val runningReduceSum = numbers.runningReduce { sum, item -&gt; sum + item }\n    val runningFoldSum = numbers.runningFold(10) { sum, item -&gt; sum + item }\n//sampleEnd\n    println(runningReduceSum.toString())\n    println(runningFoldSum.toString())\n}\n</div></li><li class="list__item" id="whatsnew14.md-6e4a0015" ><p id="whatsnew14.md-1aae5526" ><code class="code " id="whatsnew14.md-ae57d092"  >sumOf()</code> takes a selector function and returns a sum of its values for all elements of a collection. <code class="code " id="whatsnew14.md-36f7d092"  >sumOf()</code> can produce sums of the types <code class="code " id="whatsnew14.md-12ced7f7"  >Int</code>, <code class="code " id="whatsnew14.md-c1069d4c"  >Long</code>, <code class="code " id="whatsnew14.md-5b3c1f1d"  >Double</code>, <code class="code " id="whatsnew14.md-b9906d8d"  >UInt</code>, and <code class="code " id="whatsnew14.md-80382c67"  >ULong</code>. On the JVM, <code class="code " id="whatsnew14.md-5fbc608e"  >BigInteger</code> and <code class="code " id="whatsnew14.md-8f5ef119"  >BigDecimal</code> are also available.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-e5b09747"        data-runnable="true" data-min-compiler-version="1.4"  >data class OrderItem(val name: String, val price: Double, val count: Int)\n\nfun main() {\n//sampleStart\n    val order = listOf&lt;OrderItem&gt;(\n        OrderItem(&quot;Cake&quot;, price = 10.0, count = 1),\n        OrderItem(&quot;Coffee&quot;, price = 2.5, count = 3),\n        OrderItem(&quot;Tea&quot;, price = 1.5, count = 2))\n\n    val total = order.sumOf { it.price * it.count } // Double\n    val count = order.sumOf { it.count } // Int\n//sampleEnd\n    println(&quot;You\'ve ordered $count items that cost $total in total&quot;)\n}\n</div></li><li class="list__item" id="whatsnew14.md-13816f4a" ><p id="whatsnew14.md-88000bcc" >The <code class="code " id="whatsnew14.md-b21a63e7"  >min()</code> and <code class="code " id="whatsnew14.md-e8d3670"  >max()</code> functions have been renamed to <code class="code " id="whatsnew14.md-16c7f25e"  >minOrNull()</code> and <code class="code " id="whatsnew14.md-123f7153"  >maxOrNull()</code> to comply with the naming convention used across the Kotlin collections API. An <code class="code " id="whatsnew14.md-2743ebeb"  >*OrNull</code> suffix in the function name means that it returns <code class="code " id="whatsnew14.md-ff781208"  >null</code> if the receiver collection is empty. The same applies to <code class="code " id="whatsnew14.md-d2bde29f"  >minBy()</code>, <code class="code " id="whatsnew14.md-5226aa72"  >maxBy()</code>, <code class="code " id="whatsnew14.md-8aa75893"  >minWith()</code>, <code class="code " id="whatsnew14.md-8c1d11"  >maxWith()</code> – in 1.4, they have <code class="code " id="whatsnew14.md-13c715ec"  >*OrNull()</code> synonyms.</p></li><li class="list__item" id="whatsnew14.md-6fd4fe4c" ><p id="whatsnew14.md-d65f9498" >The new <code class="code " id="whatsnew14.md-1de46b85"  >minOf()</code> and <code class="code " id="whatsnew14.md-45628eea"  >maxOf()</code> extension functions return the minimum and the maximum value of the given selector function on the collection items.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-2e78e1f0"        data-runnable="true" data-min-compiler-version="1.4"  >data class OrderItem(val name: String, val price: Double, val count: Int)\n\nfun main() {\n//sampleStart\n    val order = listOf&lt;OrderItem&gt;(\n        OrderItem(&quot;Cake&quot;, price = 10.0, count = 1),\n        OrderItem(&quot;Coffee&quot;, price = 2.5, count = 3),\n        OrderItem(&quot;Tea&quot;, price = 1.5, count = 2))\n    val highestPrice = order.maxOf { it.price }\n//sampleEnd\n    println(&quot;The most expensive item in the order costs $highestPrice&quot;)\n}\n</div><p id="whatsnew14.md-85c4a684" >There are also <code class="code " id="whatsnew14.md-cd19028a"  >minOfWith()</code> and <code class="code " id="whatsnew14.md-134ddb28"  >maxOfWith()</code>, which take a <code class="code " id="whatsnew14.md-502365a6"  >Comparator</code> as an argument, and <code class="code " id="whatsnew14.md-ac1ab573"  >*OrNull()</code> versions of all four functions that return <code class="code " id="whatsnew14.md-30bbf7e3"  >null</code> on empty collections.</p></li><li class="list__item" id="whatsnew14.md-26fdaf84" ><p id="whatsnew14.md-82d4a38b" >New overloads for <code class="code " id="whatsnew14.md-56a6161d"  >flatMap</code> and <code class="code " id="whatsnew14.md-564494aa"  >flatMapTo</code> let you use transformations with return types that don’t match the receiver type, namely:</p><ul class="list _ul" id="whatsnew14.md-dbd966cc"   ><li class="list__item" id="whatsnew14.md-88c80360" ><p>Transformations to <code class="code " id="whatsnew14.md-9984a413"  >Sequence</code> on <code class="code " id="whatsnew14.md-377d6f3c"  >Iterable</code>, <code class="code " id="whatsnew14.md-4b5d46a7"  >Array</code>, and <code class="code " id="whatsnew14.md-6720679e"  >Map</code></p></li><li class="list__item" id="whatsnew14.md-5eceb48" ><p>Transformations to <code class="code " id="whatsnew14.md-9065b073"  >Iterable</code> on <code class="code " id="whatsnew14.md-a621aeb6"  >Sequence</code></p></li></ul><div class="code-block" data-lang="kotlin" id="whatsnew14.md-6f8197cd"        data-runnable="true" data-min-compiler-version="1.4"  >fun main() {\n//sampleStart\n    val list = listOf(&quot;kot&quot;, &quot;lin&quot;)\n    val lettersList = list.flatMap { it.asSequence() }\n    val lettersSeq = list.asSequence().flatMap { it.toList() }    \n//sampleEnd\n    println(lettersList)\n    println(lettersSeq.toList())\n}\n</div></li><li class="list__item" id="whatsnew14.md-7377e5d2" ><p id="whatsnew14.md-bcc4f81a" ><code class="code " id="whatsnew14.md-9e0395f6"  >removeFirst()</code> and <code class="code " id="whatsnew14.md-24257c15"  >removeLast()</code> shortcuts for removing elements from mutable lists, and <code class="code " id="whatsnew14.md-752251f2"  >*orNull()</code> counterparts of these functions.</p></li></ul></section><section class="chapter"  ><h4 id="whatsnew14.md-arrays" data-toc="whatsnew14#whatsnew14.md-arrays"  >Arrays</h4><p id="whatsnew14.md-80b4949d" >To provide a consistent experience when working with different container types, we’ve also added new functions for <b id="whatsnew14.md-828cfa67" class=""  >arrays</b>:</p><ul class="list _ul" id="whatsnew14.md-47d0fe15"   ><li class="list__item" id="whatsnew14.md-41fee451" ><p><code class="code " id="whatsnew14.md-84580200"  >shuffle()</code> puts the array elements in a random order.</p></li><li class="list__item" id="whatsnew14.md-518226f2" ><p><code class="code " id="whatsnew14.md-fcf5a2f3"  >onEach()</code> performs the given action on each array element and returns the array itself.</p></li><li class="list__item" id="whatsnew14.md-8962da8c" ><p><code class="code " id="whatsnew14.md-4029e412"  >associateWith()</code> and <code class="code " id="whatsnew14.md-3c62f387"  >associateWithTo()</code> build maps with the array elements as keys.</p></li><li class="list__item" id="whatsnew14.md-168a32b3" ><p><code class="code " id="whatsnew14.md-9eeab1f2"  >reverse()</code> for array subranges reverses the order of the elements in the subrange.</p></li><li class="list__item" id="whatsnew14.md-6be1efe1" ><p><code class="code " id="whatsnew14.md-3efd6385"  >sortDescending()</code> for array subranges sorts the elements in the subrange in descending order.</p></li><li class="list__item" id="whatsnew14.md-aaf600cc" ><p><code class="code " id="whatsnew14.md-ac4d068c"  >sort()</code> and <code class="code " id="whatsnew14.md-b94b7870"  >sortWith()</code> for array subranges are now available in the common library.</p></li></ul><div class="code-block" data-lang="kotlin" id="whatsnew14.md-3d21465f"        data-runnable="true" data-min-compiler-version="1.4"  >fun main() {\n//sampleStart\n    var language = &quot;&quot;\n    val letters = arrayOf(&quot;k&quot;, &quot;o&quot;, &quot;t&quot;, &quot;l&quot;, &quot;i&quot;, &quot;n&quot;)\n    val fileExt = letters.onEach { language += it }\n       .filterNot { it in &quot;aeuio&quot; }.take(2)\n       .joinToString(prefix = &quot;.&quot;, separator = &quot;&quot;)\n    println(language) // &quot;kotlin&quot;\n    println(fileExt) // &quot;.kt&quot;\n\n    letters.shuffle()\n    letters.reverse(0, 3)\n    letters.sortDescending(2, 5)\n    println(letters.contentToString()) // [k, o, t, l, i, n]\n//sampleEnd\n}\n</div><p id="whatsnew14.md-6b0fa9f8" >Additionally, there are new functions for conversions between <code class="code " id="whatsnew14.md-71cdde5d"  >CharArray</code>/ <code class="code " id="whatsnew14.md-b5ab92a7"  >ByteArray</code> and <code class="code " id="whatsnew14.md-7c5abe7b"  >String</code>:</p><ul class="list _ul" id="whatsnew14.md-1de95b4b"   ><li class="list__item" id="whatsnew14.md-6284e4ea" ><p><code class="code " id="whatsnew14.md-42d1048a"  >ByteArray.decodeToString()</code> and <code class="code " id="whatsnew14.md-1c93d25d"  >String.encodeToByteArray()</code></p></li><li class="list__item" id="whatsnew14.md-2b31f687" ><p><code class="code " id="whatsnew14.md-2bcd5afc"  >CharArray.concatToString()</code> and <code class="code " id="whatsnew14.md-d3d773ad"  >String.toCharArray()</code></p></li></ul><div class="code-block" data-lang="kotlin" id="whatsnew14.md-bddb6c04"        data-runnable="true" data-min-compiler-version="1.4"  >fun main() {\n//sampleStart\n\tval str = &quot;kotlin&quot;\n    val array = str.toCharArray()\n    println(array.concatToString())\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h4 id="whatsnew14.md-arraydeque" data-toc="whatsnew14#whatsnew14.md-arraydeque"  >ArrayDeque</h4><p id="whatsnew14.md-2293a7ad" >We\'ve also added the <code class="code " id="whatsnew14.md-8f5ebea3"  >ArrayDeque</code> class – an implementation of a double-ended queue. Double-ended queue lets you can add or remove elements both at the beginning and the end of the queue in an amortized constant time. You can use a double-ended queue by default when you need a queue or a stack in your code.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-cc4a86e7"        data-runnable="true" data-min-compiler-version="1.4"  >fun main() {\n    val deque = ArrayDeque(listOf(1, 2, 3))\n\n    deque.addFirst(0)\n    deque.addLast(4)\n    println(deque) // [0, 1, 2, 3, 4]\n\n    println(deque.first()) // 0\n    println(deque.last()) // 4\n\n    deque.removeFirst()\n    deque.removeLast()\n    println(deque) // [1, 2, 3]\n}\n</div><p id="whatsnew14.md-bc926a94" >The <code class="code " id="whatsnew14.md-53edbfd7"  >ArrayDeque</code> implementation uses a resizable array underneath: it stores the contents in a circular buffer, an <code class="code " id="whatsnew14.md-c1f96f7e"  >Array</code>, and resizes this <code class="code " id="whatsnew14.md-51ecef46"  >Array</code> only when it becomes full.</p></section></section><section class="chapter"  ><h3 id="whatsnew14.md-functions-for-string-manipulations" data-toc="whatsnew14#whatsnew14.md-functions-for-string-manipulations"  >Functions for string manipulations</h3><p id="whatsnew14.md-2e25aa34" >The standard library in 1.4.0 includes a number of improvements in the API for string manipulation:</p><ul class="list _ul" id="whatsnew14.md-8bd0e945"   ><li class="list__item" id="whatsnew14.md-9d82d33a" ><p id="whatsnew14.md-d328c42" ><code class="code " id="whatsnew14.md-9862639"  >StringBuilder</code> has useful new extension functions: <code class="code " id="whatsnew14.md-ee8208b4"  >set()</code>, <code class="code " id="whatsnew14.md-920be57"  >setRange()</code>, <code class="code " id="whatsnew14.md-a9bc1f34"  >deleteAt()</code>, <code class="code " id="whatsnew14.md-5fe9984"  >deleteRange()</code>, <code class="code " id="whatsnew14.md-5b395ff6"  >appendRange()</code>, and others.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-2c9c2532"        data-runnable="true" data-min-compiler-version="1.4"  >    fun main() {\n    //sampleStart\n        val sb = StringBuilder(&quot;Bye Kotlin 1.3.72&quot;)\n        sb.deleteRange(0, 3)\n        sb.insertRange(0, &quot;Hello&quot;, 0 ,5)\n        sb.set(15, \'4\')\n        sb.setRange(17, 19, &quot;0&quot;)\n        print(sb.toString())\n    //sampleEnd\n    }\n</div></li><li class="list__item" id="whatsnew14.md-a164208" ><p id="whatsnew14.md-bb184127" >Some existing functions of <code class="code " id="whatsnew14.md-2e98c5bf"  >StringBuilder</code> are available in the common library. Among them are <code class="code " id="whatsnew14.md-c24f593f"  >append()</code>, <code class="code " id="whatsnew14.md-a7e49531"  >insert()</code>, <code class="code " id="whatsnew14.md-5336a54e"  >substring()</code>, <code class="code " id="whatsnew14.md-2fad06bc"  >setLength()</code>, and more.</p></li><li class="list__item" id="whatsnew14.md-14645695" ><p id="whatsnew14.md-4ebd58dd" >New functions <code class="code " id="whatsnew14.md-baac8c5c"  >Appendable.appendLine()</code> and <code class="code " id="whatsnew14.md-cb7bc3e9"  >StringBuilder.appendLine()</code> have been added to the common library. They replace the JVM-only <code class="code " id="whatsnew14.md-9b6be5af"  >appendln()</code> functions of these classes.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-8388e569"        data-runnable="true" data-min-compiler-version="1.4"  >fun main() {\n//sampleStart\n    println(buildString {\n        appendLine(&quot;Hello,&quot;)\n        appendLine(&quot;world&quot;)\n    })\n//sampleEnd\n}\n</div></li></ul></section><section class="chapter"  ><h3 id="whatsnew14.md-bit-operations" data-toc="whatsnew14#whatsnew14.md-bit-operations"  >Bit operations</h3><p id="whatsnew14.md-c8a7c54" >New functions for bit manipulations:</p><ul class="list _ul" id="whatsnew14.md-f1606223"   ><li class="list__item" id="whatsnew14.md-859e9570" ><code class="code " id="whatsnew14.md-6f7bb717"  >countOneBits()</code></li><li class="list__item" id="whatsnew14.md-27896e7a" ><code class="code " id="whatsnew14.md-2b8fdefc"  >countLeadingZeroBits()</code></li><li class="list__item" id="whatsnew14.md-a3a4d167" ><code class="code " id="whatsnew14.md-f3f900fe"  >countTrailingZeroBits()</code></li><li class="list__item" id="whatsnew14.md-c67a9939" ><code class="code " id="whatsnew14.md-4c449ece"  >takeHighestOneBit()</code></li><li class="list__item" id="whatsnew14.md-d1d39854" ><code class="code " id="whatsnew14.md-bf16fb41"  >takeLowestOneBit()</code></li><li class="list__item" id="whatsnew14.md-4acf7447" ><p><code class="code " id="whatsnew14.md-e6908812"  >rotateLeft()</code> and <code class="code " id="whatsnew14.md-379f96eb"  >rotateRight()</code> (experimental)</p></li></ul><div class="code-block" data-lang="kotlin" id="whatsnew14.md-5e5d6083"        data-runnable="true" data-min-compiler-version="1.4"  >fun main() {\n//sampleStart\n    val number = &quot;1010000&quot;.toInt(radix = 2)\n    println(number.countOneBits())\n    println(number.countTrailingZeroBits())\n    println(number.takeHighestOneBit().toString(2))\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew14.md-delegated-properties-improvements" data-toc="whatsnew14#whatsnew14.md-delegated-properties-improvements"  >Delegated properties improvements</h3><p id="whatsnew14.md-1b5b5b06" >In 1.4.0, we have added new features to improve your experience with delegated properties in Kotlin:</p><ul class="list _ul" id="whatsnew14.md-ae4fff2"   ><li class="list__item" id="whatsnew14.md-eae0aad7" ><p>Now a property can be delegated to another property.</p></li><li class="list__item" id="whatsnew14.md-a9e9ce9a" ><p>A new interface <code class="code " id="whatsnew14.md-2fa2712d"  >PropertyDelegateProvider</code> helps create delegate providers in a single declaration.</p></li><li class="list__item" id="whatsnew14.md-78459c1c" ><p><code class="code " id="whatsnew14.md-359c1201"  >ReadWriteProperty</code> now extends <code class="code " id="whatsnew14.md-acacfe82"  >ReadOnlyProperty</code> so you can use both of them for read-only properties.</p></li></ul><p id="whatsnew14.md-1f1fada7" >Aside from the new API, we\'ve made some optimizations that reduce the resulting bytecode size. These optimizations are described in <a href="https://blog.jetbrains.com/kotlin/2019/12/what-to-expect-in-kotlin-1-4-and-beyond/#delegated-properties" id="whatsnew14.md-cd139dd8"   data-external="true" rel="noopener noreferrer" >this blog post</a>.</p><p id="whatsnew14.md-fbabca11" >For more information about delegated properties, see the <a href="#delegated-properties.md" id="whatsnew14.md-d22f0793"   >documentation</a>.</p></section><section class="chapter"  ><h3 id="whatsnew14.md-converting-from-ktype-to-java-type" data-toc="whatsnew14#whatsnew14.md-converting-from-ktype-to-java-type"  >Converting from KType to Java Type</h3><p id="whatsnew14.md-fe262fbb" >A new extension property <code class="code " id="whatsnew14.md-baad8a5c"  >KType.javaType</code> (currently experimental) in the stdlib helps you obtain a <code class="code " id="whatsnew14.md-5dfde434"  >java.lang.reflect.Type</code> from a Kotlin type without using the whole <code class="code " id="whatsnew14.md-7e7821f6"  >kotlin-reflect</code> dependency.</p><div class="code-block" data-lang="kotlin" id="whatsnew14.md-5a0426c"        data-runnable="true" data-min-compiler-version="1.4"  >import kotlin.reflect.javaType\nimport kotlin.reflect.typeOf\n\n@OptIn(ExperimentalStdlibApi::class)\ninline fun &lt;reified T&gt; accessReifiedTypeArg() {\n   val kType = typeOf&lt;T&gt;()\n   println(&quot;Kotlin type: $kType&quot;)\n   println(&quot;Java type: ${kType.javaType}&quot;)\n}\n\n@OptIn(ExperimentalStdlibApi::class)\nfun main() {\n   accessReifiedTypeArg&lt;String&gt;()\n   // Kotlin type: kotlin.String\n   // Java type: class java.lang.String\n  \n   accessReifiedTypeArg&lt;List&lt;String&gt;&gt;()\n   // Kotlin type: kotlin.collections.List&lt;kotlin.String&gt;\n   // Java type: java.util.List&lt;java.lang.String&gt;\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew14.md-proguard-configurations-for-kotlin-reflection" data-toc="whatsnew14#whatsnew14.md-proguard-configurations-for-kotlin-reflection"  >Proguard configurations for Kotlin reflection</h3><p id="whatsnew14.md-e6ff745e" >Starting from 1.4.0, we have embedded Proguard/R8 configurations for Kotlin Reflection in <code class="code " id="whatsnew14.md-938ed120"  >kotlin-reflect.jar</code>. With this in place, most Android projects using R8 or Proguard should work with kotlin-reflect without needing any additional configuration. You no longer need to copy-paste the Proguard rules for kotlin-reflect internals. But note that you still need to explicitly list all the APIs you’re going to reflect on.</p></section><section class="chapter"  ><h3 id="whatsnew14.md-improving-the-existing-api" data-toc="whatsnew14#whatsnew14.md-improving-the-existing-api"  >Improving the existing API</h3><ul class="list _ul" id="whatsnew14.md-dc9e9c55"   ><li class="list__item" id="whatsnew14.md-aa30b221" ><p id="whatsnew14.md-e3d5caeb" >Several functions now work on null receivers, for example:</p><ul class="list _ul" id="whatsnew14.md-20ede954"   ><li class="list__item" id="whatsnew14.md-2b51f8d1" ><p><code class="code " id="whatsnew14.md-78615889"  >toBoolean()</code> on strings</p></li><li class="list__item" id="whatsnew14.md-6e8dc177" ><p><code class="code " id="whatsnew14.md-be4bb5a4"  >contentEquals()</code>, <code class="code " id="whatsnew14.md-d7c66539"  >contentHashcode()</code>, <code class="code " id="whatsnew14.md-d402b8"  >contentToString()</code> on arrays</p></li></ul></li><li class="list__item" id="whatsnew14.md-50dba534" ><p id="whatsnew14.md-be05bbf4" ><code class="code " id="whatsnew14.md-7de30278"  >NaN</code>, <code class="code " id="whatsnew14.md-f7191595"  >NEGATIVE_INFINITY</code>, and <code class="code " id="whatsnew14.md-9e10b3a6"  >POSITIVE_INFINITY</code> in <code class="code " id="whatsnew14.md-a9bd443"  >Double</code> and <code class="code " id="whatsnew14.md-4bc8af4d"  >Float</code> are now defined as <code class="code " id="whatsnew14.md-a2219478"  >const</code>, so you can use them as annotation arguments.</p></li><li class="list__item" id="whatsnew14.md-5ccf4677" ><p id="whatsnew14.md-873749eb" >New constants <code class="code " id="whatsnew14.md-25ee4a42"  >SIZE_BITS</code> and <code class="code " id="whatsnew14.md-4786e0f"  >SIZE_BYTES</code> in <code class="code " id="whatsnew14.md-bcb56887"  >Double</code> and <code class="code " id="whatsnew14.md-f1ac4d26"  >Float</code> contain the number of bits and bytes used to represent an instance of the type in binary form.</p></li><li class="list__item" id="whatsnew14.md-4b6a9ed6" ><p id="whatsnew14.md-fec93381" >The <code class="code " id="whatsnew14.md-df732847"  >maxOf()</code> and <code class="code " id="whatsnew14.md-4c6278d4"  >minOf()</code> top-level functions can accept a variable number of arguments (<code class="code " id="whatsnew14.md-9ed371fc"  >vararg</code> ).</p></li></ul></section><section class="chapter"  ><h3 id="whatsnew14.md-module-info-descriptors-for-stdlib-artifacts" data-toc="whatsnew14#whatsnew14.md-module-info-descriptors-for-stdlib-artifacts"  >module-info descriptors for stdlib artifacts</h3><p id="whatsnew14.md-cef89dd4" >Kotlin 1.4.0 adds <code class="code " id="whatsnew14.md-ae433b47"  >module-info.java</code> module information to default standard library artifacts. This lets you use them with <a href="https://docs.oracle.com/en/java/javase/11/tools/jlink.html" id="whatsnew14.md-4a19707a"   data-external="true" rel="noopener noreferrer" >jlink tool</a>, which generates custom Java runtime images containing only the platform modules that are required for your app. You could already use jlink with Kotlin standard library artifacts, but you had to use separate artifacts to do so – the ones with the “modular” classifier – and the whole setup wasn’t straightforward. <br/> In Android, make sure you use the Android Gradle plugin version 3.2 or higher, which can correctly process jar files with module-info.</p></section><section class="chapter"  ><h3 id="whatsnew14.md-deprecations" data-toc="whatsnew14#whatsnew14.md-deprecations"  >Deprecations</h3><section class="chapter"  ><h4 id="whatsnew14.md-toshort-and-tobyte-of-double-and-float" data-toc="whatsnew14#whatsnew14.md-toshort-and-tobyte-of-double-and-float"  >toShort() and toByte() of Double and Float</h4><p id="whatsnew14.md-3758593" >We\'ve deprecated the functions <code class="code " id="whatsnew14.md-b511c70c"  >toShort()</code> and <code class="code " id="whatsnew14.md-714ada8d"  >toByte()</code> on <code class="code " id="whatsnew14.md-af578c67"  >Double</code> and <code class="code " id="whatsnew14.md-7baf30aa"  >Float</code> because they could lead to unexpected results because of the narrow value range and smaller variable size.</p><p id="whatsnew14.md-25066327" >To convert floating-point numbers to <code class="code " id="whatsnew14.md-713b3af1"  >Byte</code> or <code class="code " id="whatsnew14.md-59e53250"  >Short</code>, use the two-step conversion: first, convert them to <code class="code " id="whatsnew14.md-b6081a95"  >Int</code>, and then convert them again to the target type.</p></section><section class="chapter"  ><h4 id="whatsnew14.md-contains-indexof-and-lastindexof-on-floating-point-arrays" data-toc="whatsnew14#whatsnew14.md-contains-indexof-and-lastindexof-on-floating-point-arrays"  >contains(), indexOf(), and lastIndexOf() on floating-point arrays</h4><p id="whatsnew14.md-dde3a882" >We\'ve deprecated the <code class="code " id="whatsnew14.md-f3df71bc"  >contains()</code>, <code class="code " id="whatsnew14.md-b6bec7b9"  >indexOf()</code>, and <code class="code " id="whatsnew14.md-376a9ab9"  >lastIndexOf()</code> extension functions of <code class="code " id="whatsnew14.md-31ffe1fc"  >FloatArray</code> and <code class="code " id="whatsnew14.md-9dd4e23e"  >DoubleArray</code> because they use the <a href="https://en.wikipedia.org/wiki/IEEE_754" id="whatsnew14.md-495d294b"   data-external="true" rel="noopener noreferrer" >IEEE 754</a> standard equality, which contradicts the total order equality in some corner cases. See <a href="https://youtrack.jetbrains.com/issue/KT-28753" id="whatsnew14.md-ab170d11"   data-external="true" rel="noopener noreferrer" >this issue</a> for details.</p></section><section class="chapter"  ><h4 id="whatsnew14.md-min-and-max-collection-functions" data-toc="whatsnew14#whatsnew14.md-min-and-max-collection-functions"  >min() and max() collection functions</h4><p id="whatsnew14.md-58bfb238" >We\'ve deprecated the <code class="code " id="whatsnew14.md-b5068645"  >min()</code> and <code class="code " id="whatsnew14.md-b280e818"  >max()</code> collection functions in favor of <code class="code " id="whatsnew14.md-b899610d"  >minOrNull()</code> and <code class="code " id="whatsnew14.md-98b4c2b2"  >maxOrNull()</code>, which more properly reflect their behavior – returning <code class="code " id="whatsnew14.md-5f79719c"  >null</code> on empty collections. See <a href="https://youtrack.jetbrains.com/issue/KT-38854" id="whatsnew14.md-e11ee0cc"   data-external="true" rel="noopener noreferrer" >this issue</a> for details.</p></section></section><section class="chapter"  ><h3 id="whatsnew14.md-exclusion-of-the-deprecated-experimental-coroutines" data-toc="whatsnew14#whatsnew14.md-exclusion-of-the-deprecated-experimental-coroutines"  >Exclusion of the deprecated experimental coroutines</h3><p id="whatsnew14.md-e44e32b6" >The <code class="code " id="whatsnew14.md-da0fd012"  >kotlin.coroutines.experimental</code> API was deprecated in favor of kotlin.coroutines in 1.3.0. In 1.4.0, we’re completing the deprecation cycle for <code class="code " id="whatsnew14.md-aa5f89d5"  >kotlin.coroutines.experimental</code> by removing it from the standard library. For those who still use it on the JVM, we\'ve provided a compatibility artifact <code class="code " id="whatsnew14.md-47229222"  >kotlin-coroutines-experimental-compat.jar</code> with all the experimental coroutines APIs. We\'ve published it to Maven, and we include it in the Kotlin distribution alongside the standard library.</p></section></section><section class="chapter"  ><h2 id="whatsnew14.md-stable-json-serialization" data-toc="whatsnew14#whatsnew14.md-stable-json-serialization"  >Stable JSON serialization</h2><p id="whatsnew14.md-ca12287e" >With Kotlin 1.4.0, we are shipping the first stable version of <a href="https://github.com/Kotlin/kotlinx.serialization" id="whatsnew14.md-eabdd215"   data-external="true" rel="noopener noreferrer" >kotlinx.serialization</a>- 1.0.0-RC. Now we are pleased to declare the JSON serialization API in <code class="code " id="whatsnew14.md-dd36a7c4"  >kotlinx-serialization-core</code> (previously known as <code class="code " id="whatsnew14.md-a6377648"  >kotlinx-serialization-runtime</code>) stable. Libraries for other serialization formats remain experimental, along with some advanced parts of the core library.</p><p id="whatsnew14.md-b51fb741" >We have significantly reworked the API for JSON serialization to make it more consistent and easier to use. From now on, we\'ll continue developing the JSON serialization API in a backward-compatible manner. However, if you have used previous versions of it, you\'ll need to rewrite some of your code when migrating to 1.0.0-RC. To help you with this, we also offer the <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serialization-guide.md" id="whatsnew14.md-405ae69a"   data-external="true" rel="noopener noreferrer" >Kotlin Serialization Guide</a> – the complete set of documentation for <code class="code " id="whatsnew14.md-5a95dcd5"  >kotlinx.serialization</code>. It will guide you through the process of using the most important features and it can help you address any issues that you might face.</p><aside data-type="note" class="prompt" data-title="" id="whatsnew14.md-9370632d" ><p id="whatsnew14.md-e543eac8" ><b id="whatsnew14.md-3bad0c5b" class=""  >Note</b>: <code class="code " id="whatsnew14.md-1dfd6568"  >kotlinx-serialization</code> 1.0.0-RC only works with Kotlin compiler 1.4. Earlier compiler versions are not compatible.</p></aside></section><section class="chapter"  ><h2 id="whatsnew14.md-scripting-and-repl" data-toc="whatsnew14#whatsnew14.md-scripting-and-repl"  >Scripting and REPL</h2><p id="whatsnew14.md-4df3120d" >In 1.4.0, scripting in Kotlin benefits from a number of functional and performance improvements along with other updates. Here are some of the key changes:</p><ul class="list _ul" id="whatsnew14.md-7ce0dd37"   ><li class="list__item" id="whatsnew14.md-12704e27" ><a href="#whatsnew14.md-new-dependencies-resolution-api" id="whatsnew14.md-7c3fa9c6"   >New dependencies resolution API</a></li><li class="list__item" id="whatsnew14.md-ce5dbc02" ><a href="#whatsnew14.md-new-repl-api" id="whatsnew14.md-6f76feaf"   >New REPL API</a></li><li class="list__item" id="whatsnew14.md-312128e5" ><a href="#whatsnew14.md-compiled-scripts-cache" id="whatsnew14.md-9c3d2e65"   >Compiled scripts cache</a></li><li class="list__item" id="whatsnew14.md-f2d8c089" ><a href="#whatsnew14.md-artifacts-renaming" id="whatsnew14.md-9900e6ee"   >Artifacts renaming</a></li></ul><p id="whatsnew14.md-cfbfd04f" >To help you become more familiar with scripting in Kotlin, we’ve prepared a <a href="https://github.com/Kotlin/kotlin-script-examples" id="whatsnew14.md-d7321ffa"   data-external="true" rel="noopener noreferrer" >project with examples</a>. It contains examples of the standard scripts (<code class="code " id="whatsnew14.md-1e7b85dc"  >*.main.kts</code>) and examples of uses of the Kotlin Scripting API and custom script definitions. Please give it a try and share your feedback using our <a href="https://youtrack.jetbrains.com/issues/KT" id="whatsnew14.md-146b1991"   data-external="true" rel="noopener noreferrer" >issue tracker</a>.</p><section class="chapter"  ><h3 id="whatsnew14.md-new-dependencies-resolution-api" data-toc="whatsnew14#whatsnew14.md-new-dependencies-resolution-api"  >New dependencies resolution API</h3><p id="whatsnew14.md-b4e335ba" >In 1.4.0, we’ve introduced a new API for resolving external dependencies (such as Maven artifacts), along with implementations for it. This API is published in the new artifacts <code class="code " id="whatsnew14.md-50c5e100"  >kotlin-scripting-dependencies</code> and <code class="code " id="whatsnew14.md-cd6ba0c8"  >kotlin-scripting-dependencies-maven</code>. The previous dependency resolution functionality in <code class="code " id="whatsnew14.md-d1c39057"  >kotlin-script-util</code> library is now deprecated.</p></section><section class="chapter"  ><h3 id="whatsnew14.md-new-repl-api" data-toc="whatsnew14#whatsnew14.md-new-repl-api"  >New REPL API</h3><p id="whatsnew14.md-34b63bad" >The new experimental REPL API is now a part of the Kotlin Scripting API. There are also several implementations of it in the published artifacts, and some have advanced functionality, such as code completion. We use this API in the <a href="https://blog.jetbrains.com/kotlin/2020/05/kotlin-kernel-for-jupyter-notebook-v0-8/" id="whatsnew14.md-4692e52a"   data-external="true" rel="noopener noreferrer" >Kotlin Jupyter kernel</a> and now you can try it in your own custom shells and REPLs.</p></section><section class="chapter"  ><h3 id="whatsnew14.md-compiled-scripts-cache" data-toc="whatsnew14#whatsnew14.md-compiled-scripts-cache"  >Compiled scripts cache</h3><p id="whatsnew14.md-e1581c40" >The Kotlin Scripting API now provides the ability to implement a compiled scripts cache, significantly speeding up subsequent executions of unchanged scripts. Our default advanced script implementation <code class="code " id="whatsnew14.md-857b4d3c"  >kotlin-main-kts</code> already has its own cache.</p></section><section class="chapter"  ><h3 id="whatsnew14.md-artifacts-renaming" data-toc="whatsnew14#whatsnew14.md-artifacts-renaming"  >Artifacts renaming</h3><p id="whatsnew14.md-78ec39e" >In order to avoid confusion about artifact names, we’ve renamed <code class="code " id="whatsnew14.md-f53fec63"  >kotlin-scripting-jsr223-embeddable</code> and <code class="code " id="whatsnew14.md-66980826"  >kotlin-scripting-jvm-host-embeddable</code> to just <code class="code " id="whatsnew14.md-1553c181"  >kotlin-scripting-jsr223</code> and <code class="code " id="whatsnew14.md-f010b312"  >kotlin-scripting-jvm-host</code>. These artifacts depend on the <code class="code " id="whatsnew14.md-126a86b7"  >kotlin-compiler-embeddable</code> artifact, which shades the bundled third-party libraries to avoid usage conflicts. With this renaming, we’re making the usage of <code class="code " id="whatsnew14.md-f73ec0"  >kotlin-compiler-embeddable</code> (which is safer in general) the default for scripting artifacts. If, for some reason, you need artifacts that depend on the unshaded <code class="code " id="whatsnew14.md-f8c2e951"  >kotlin-compiler</code>, use the artifact versions with the <code class="code " id="whatsnew14.md-a526bdf1"  >-unshaded</code> suffix, such as <code class="code " id="whatsnew14.md-88424ff2"  >kotlin-scripting-jsr223-unshaded</code>. Note that this renaming affects only the scripting artifacts that are supposed to be used directly; names of other artifacts remain unchanged.</p></section></section><section class="chapter"  ><h2 id="whatsnew14.md-migrating-to-kotlin-1-4-0" data-toc="whatsnew14#whatsnew14.md-migrating-to-kotlin-1-4-0"  >Migrating to Kotlin 1.4.0</h2><p id="whatsnew14.md-f4147cf4" >The Kotlin plugin’s migration tools help you migrate your projects from earlier versions of Kotlin to 1.4.0.</p><p id="whatsnew14.md-dd26aaf" >Just change the Kotlin version to <code class="code " id="whatsnew14.md-77942186"  >1.4.0</code> and re-import your Gradle or Maven project. The IDE will then ask you about migration.</p><p id="whatsnew14.md-92a6c497" >If you agree, it will run migration code inspections that will check your code and suggest corrections for anything that doesn\'t work or that is not recommended in 1.4.0.</p><p id="whatsnew14.md-7832e6f9" ><figure title="Run migration"><img alt="Run migration" title="Run migration" id="whatsnew14.md-87fc19f3" src="images/run-migration-wn.png"  class="" width="300" height="60" /></figure></p><p id="whatsnew14.md-65f353cc" >Code inspections have different <a href="https://www.jetbrains.com/help/idea/configuring-inspection-severities.html" id="whatsnew14.md-e9732a04"   data-external="true" rel="noopener noreferrer" >severity levels</a>, to help you decide which suggestions to accept and which to ignore.</p><p id="whatsnew14.md-45d2ff78" ><figure title="Migration inspections"><img alt="Migration inspections" title="Migration inspections" id="whatsnew14.md-d607541d" src="images/migration-inspection-wn.png"  class="" width="1902" height="544" /></figure></p><p id="whatsnew14.md-b5041530" >Kotlin 1.4.0 is a <a href="#kotlin-evolution.md-feature-releases-and-incremental-releases" id="whatsnew14.md-b8d5217c"   >feature release</a> and therefore can bring incompatible changes to the language. Find the detailed list of such changes in the <a href="#compatibility-guide-14.md" id="whatsnew14.md-229c186"   >Compatibility Guide for Kotlin 1.4</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="whatsnew13.md"  >What\'s new in Kotlin 1.3</h1><section class="chapter"  ><h2 id="whatsnew13.md-coroutines-release" data-toc="whatsnew13#whatsnew13.md-coroutines-release"  >Coroutines release</h2><p id="whatsnew13.md-8f620573" >After some long and extensive battle testing, coroutines are now released! It means that from Kotlin 1.3 the language support and the API are <a href="#components-stability.md" id="whatsnew13.md-deec50a1"   >fully stable</a>. Check out the new <a href="#coroutines-overview.md" id="whatsnew13.md-ad889a7e"   >coroutines overview</a> page.</p><p id="whatsnew13.md-4c348b6a" >Kotlin 1.3 introduces callable references on suspend-functions and support of coroutines in the reflection API.</p></section><section class="chapter"  ><h2 id="whatsnew13.md-kotlin-native" data-toc="whatsnew13#whatsnew13.md-kotlin-native"  >Kotlin/Native</h2><p id="whatsnew13.md-54c97ae2" >Kotlin 1.3 continues to improve and polish the Native target. See the <a href="#native-overview.md" id="whatsnew13.md-77beb1"   >Kotlin/Native overview</a> for details.</p></section><section class="chapter"  ><h2 id="whatsnew13.md-multiplatform-projects" data-toc="whatsnew13#whatsnew13.md-multiplatform-projects"  >Multiplatform projects</h2><p id="whatsnew13.md-953b8af7" >In 1.3, we\'ve completely reworked the model of multiplatform projects in order to improve expressiveness and flexibility, and to make sharing common code easier. Also, Kotlin/Native is now supported as one of the targets!</p><p id="whatsnew13.md-c5655fd7" >The key differences to the old model are:</p><ul class="list _ul" id="whatsnew13.md-ea5648e6"   ><li class="list__item" id="whatsnew13.md-5d4b2744" ><p>In the old model, common and platform-specific code needed to be placed in separate modules, linked by <code class="code " id="whatsnew13.md-95ef74a5"  >expectedBy</code> dependencies. Now, common and platform-specific code is placed in different source roots of the same module, making projects easier to configure.</p></li><li class="list__item" id="whatsnew13.md-2aa20ac1" ><p>There is now a large number of <a href="#mpp-supported-platforms.md" id="whatsnew13.md-cd833edf"   >preset platform configurations</a> for different supported platforms.</p></li><li class="list__item" id="whatsnew13.md-ac2c2e2d" ><p>The <a href="#mpp-add-dependencies.md" id="whatsnew13.md-bc67c302"   >dependencies configuration</a> has been changed; dependencies are now specified separately for each source root.</p></li><li class="list__item" id="whatsnew13.md-a81281c3" ><p>Source sets can now be shared between an arbitrary subset of platforms (for example, in a module that targets JS, Android and iOS, you can have a source set that is shared only between Android and iOS).</p></li><li class="list__item" id="whatsnew13.md-dcd4ba4c" ><p><a href="#mpp-publish-lib.md" id="whatsnew13.md-82eca78e"   >Publishing multiplatform libraries</a> is now supported.</p></li></ul><p id="whatsnew13.md-6f9dca2a" >For more information, please refer to the <a href="#multiplatform.md" id="whatsnew13.md-f86e756a"   >Multiplatform Programming documentation</a>.</p></section><section class="chapter"  ><h2 id="whatsnew13.md-contracts" data-toc="whatsnew13#whatsnew13.md-contracts"  >Contracts</h2><p id="whatsnew13.md-9750d416" >The Kotlin compiler does extensive static analysis to provide warnings and reduce boilerplate. One of the most notable features is smartcasts — with the ability to perform a cast automatically based on the performed type checks:</p><div class="code-block" data-lang="kotlin" id="whatsnew13.md-f6af226d"         >fun foo(s: String?) {\n    if (s != null) s.length // Compiler automatically casts \'s\' to \'String\'\n}\n</div><p id="whatsnew13.md-a3681db1" >However, as soon as these checks are extracted in a separate function, all the smartcasts immediately disappear:</p><div class="code-block" data-lang="kotlin" id="whatsnew13.md-ad685f33"         >fun String?.isNotNull(): Boolean = this != null\n\nfun foo(s: String?) {\n    if (s.isNotNull()) s.length // No smartcast :(\n}\n</div><p id="whatsnew13.md-b9e07700" >To improve the behavior in such cases, Kotlin 1.3 introduces experimental mechanism called <em id="whatsnew13.md-e5e29caa" class=""  >contracts</em>.</p><p id="whatsnew13.md-4e1e602c" ><em id="whatsnew13.md-5cef3ced" class=""  >Contracts</em> allow a function to explicitly describe its behavior in a way which is understood by the compiler. Currently, two wide classes of cases are supported:</p><ul class="list _ul" id="whatsnew13.md-d8152dc7"   ><li class="list__item" id="whatsnew13.md-64a3f919" ><p>Improving smartcasts analysis by declaring the relation between a function\'s call outcome and the passed arguments values:</p></li></ul><div class="code-block" data-lang="kotlin" id="whatsnew13.md-72caa"         >fun require(condition: Boolean) {\n    // This is a syntax form which tells the compiler:\n    // &quot;if this function returns successfully, then the passed \'condition\' is true&quot;\n    contract { returns() implies condition }\n    if (!condition) throw IllegalArgumentException(...)\n}\n\nfun foo(s: String?) {\n    require(s is String)\n    // s is smartcast to \'String\' here, because otherwise\n    // \'require\' would have thrown an exception\n}\n</div><ul class="list _ul" id="whatsnew13.md-f14785c6"   ><li class="list__item" id="whatsnew13.md-f40079cc" ><p>Improving the variable initialization analysis in the presence of high-order functions:</p></li></ul><div class="code-block" data-lang="kotlin" id="whatsnew13.md-e973e581"         >fun synchronize(lock: Any?, block: () -&gt; Unit) {\n    // It tells the compiler:\n    // &quot;This function will invoke \'block\' here and now, and exactly one time&quot;\n    contract { callsInPlace(block, EXACTLY_ONCE) }\n}\n\nfun foo() {\n    val x: Int\n    synchronize(lock) {\n        x = 42 // Compiler knows that lambda passed to \'synchronize\' is called\n               // exactly once, so no reassignment is reported\n    }\n    println(x) // Compiler knows that lambda will be definitely called, performing\n               // initialization, so \'x\' is considered to be initialized here\n}\n</div><section class="chapter"  ><h3 id="whatsnew13.md-contracts-in-stdlib" data-toc="whatsnew13#whatsnew13.md-contracts-in-stdlib"  >Contracts in stdlib</h3><p id="whatsnew13.md-2bb7174" ><code class="code " id="whatsnew13.md-bedd4390"  >stdlib</code> already makes use of contracts, which leads to improvements in the analyses described above. This part of contracts is <b id="whatsnew13.md-642baaea" class=""  >stable</b>, meaning that you can benefit from the improved analysis right now without any additional opt-ins:</p><div class="code-block" data-lang="kotlin" id="whatsnew13.md-b3e88e1e"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nfun bar(x: String?) {\n    if (!x.isNullOrEmpty()) {\n        println(&quot;length of \'$x\' is ${x.length}&quot;) // Yay, smartcast to not-null!\n    }\n}\n//sampleEnd\nfun main() {\n    bar(null)\n    bar(&quot;42&quot;)\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew13.md-custom-contracts" data-toc="whatsnew13#whatsnew13.md-custom-contracts"  >Custom contracts</h3><p id="whatsnew13.md-63367972" >It is possible to declare contracts for your own functions, but this feature is <b id="whatsnew13.md-bacbc741" class=""  >experimental,</b> as the current syntax is in a state of early prototype and will most probably be changed. Also please note that currently the Kotlin compiler does not verify contracts, so it\'s the responsibility of the programmer to write correct and sound contracts.</p><p id="whatsnew13.md-9e8f1920" >Custom contracts are introduced by a call to <code class="code " id="whatsnew13.md-1f48d45d"  >contract</code> stdlib function, which provides DSL scope:</p><div class="code-block" data-lang="kotlin" id="whatsnew13.md-ee1d2ef6"         >fun String?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n    return this == null || isEmpty()\n}\n</div><p id="whatsnew13.md-98c01af0" >See the details on the syntax as well as the compatibility notice in the <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/kotlin-contracts.md" id="whatsnew13.md-20cc2aae"   data-external="true" rel="noopener noreferrer" >KEEP</a>.</p></section></section><section class="chapter"  ><h2 id="whatsnew13.md-capturing-when-subject-in-a-variable" data-toc="whatsnew13#whatsnew13.md-capturing-when-subject-in-a-variable"  >Capturing when subject in a variable</h2><p id="whatsnew13.md-266e0520" >In Kotlin 1.3, it is now possible to capture the <code class="code " id="whatsnew13.md-5a5b22d1"  >when</code> subject into variable:</p><div class="code-block" data-lang="kotlin" id="whatsnew13.md-11c3c06a"         >fun Request.getBody() =\n        when (val response = executeRequest()) {\n            is Success -&gt; response.body\n            is HttpError -&gt; throw HttpException(response.status)\n        }\n</div><p id="whatsnew13.md-cf42b2a9" >While it was already possible to extract this variable just before <code class="code " id="whatsnew13.md-6f18524b"  >when</code>, <code class="code " id="whatsnew13.md-d61b7f50"  >val</code> in <code class="code " id="whatsnew13.md-a5e82172"  >when</code> has its scope properly restricted to the body of <code class="code " id="whatsnew13.md-92af9495"  >when</code>, and so preventing namespace pollution. See the full documentation on <code class="code " id="whatsnew13.md-74da09e5"  >when</code> <a href="#control-flow.md-when-expression" id="whatsnew13.md-5e699101"   >here</a>.</p></section><section class="chapter"  ><h2 id="whatsnew13.md-jvmstatic-and-jvmfield-in-companions-of-interfaces" data-toc="whatsnew13#whatsnew13.md-jvmstatic-and-jvmfield-in-companions-of-interfaces"  >@JvmStatic and @JvmField in companions of interfaces</h2><p id="whatsnew13.md-74faf34e" >With Kotlin 1.3, it is possible to mark members of a <code class="code " id="whatsnew13.md-fef8d787"  >companion</code> object of interfaces with annotations <code class="code " id="whatsnew13.md-f9a51e56"  >@JvmStatic</code> and <code class="code " id="whatsnew13.md-68cd51d9"  >@JvmField</code>. In the classfile, such members will be lifted to the corresponding interface and marked as <code class="code " id="whatsnew13.md-9624f4f0"  >static</code>.</p><p id="whatsnew13.md-2875d06b" >For example, the following Kotlin code:</p><div class="code-block" data-lang="kotlin" id="whatsnew13.md-a6562020"         >interface Foo {\n    companion object {\n        @JvmField\n        val answer: Int = 42\n\n        @JvmStatic\n        fun sayHello() {\n            println(&quot;Hello, world!&quot;)\n        }\n    }\n}\n</div><p id="whatsnew13.md-29199ef" >It is equivalent to this Java code:</p><div class="code-block" data-lang="java" id="whatsnew13.md-1fd42634"         >interface Foo {\n    public static int answer = 42;\n    public static void sayHello() {\n        // ...\n    }\n}\n</div></section><section class="chapter"  ><h2 id="whatsnew13.md-nested-declarations-in-annotation-classes" data-toc="whatsnew13#whatsnew13.md-nested-declarations-in-annotation-classes"  >Nested declarations in annotation classes</h2><p id="whatsnew13.md-ee7decfe" >In Kotlin 1.3, it is possible for annotations to have nested classes, interfaces, objects, and companions:</p><div class="code-block" data-lang="kotlin" id="whatsnew13.md-44264c32"         >annotation class Foo {\n    enum class Direction { UP, DOWN, LEFT, RIGHT }\n    \n    annotation class Bar\n\n    companion object {\n        fun foo(): Int = 42\n        val bar: Int = 42\n    }\n}\n</div></section><section class="chapter"  ><h2 id="whatsnew13.md-parameterless-main" data-toc="whatsnew13#whatsnew13.md-parameterless-main"  >Parameterless main</h2><p id="whatsnew13.md-a5a454f9" >By convention, the entry point of a Kotlin program is a function with a signature like <code class="code " id="whatsnew13.md-fff3fdd7"  >main(args: Array&lt;String&gt;)</code>, where <code class="code " id="whatsnew13.md-d3502b5a"  >args</code> represent the command-line arguments passed to the program. However, not every application supports command-line arguments, so this parameter often ends up not being used.</p><p id="whatsnew13.md-fc710e15" >Kotlin 1.3 introduced a simpler form of <code class="code " id="whatsnew13.md-50086e8e"  >main</code> which takes no parameters. Now “Hello, World” in Kotlin is 19 characters shorter!</p><div class="code-block" data-lang="kotlin" id="whatsnew13.md-43960407"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n    println(&quot;Hello, world!&quot;)\n}\n</div></section><section class="chapter"  ><h2 id="whatsnew13.md-functions-with-big-arity" data-toc="whatsnew13#whatsnew13.md-functions-with-big-arity"  >Functions with big arity</h2><p id="whatsnew13.md-3c688cdc" >In Kotlin, functional types are represented as generic classes taking a different number of parameters: <code class="code " id="whatsnew13.md-2aefe6fe"  >Function0&lt;R&gt;</code>, <code class="code " id="whatsnew13.md-af1b2ff3"  >Function1&lt;P0, R&gt;</code>, <code class="code " id="whatsnew13.md-e0bf86c4"  >Function2&lt;P0, P1, R&gt;</code>, ... This approach has a problem in that this list is finite, and it currently ends with <code class="code " id="whatsnew13.md-f6e756b4"  >Function22</code>.</p><p id="whatsnew13.md-7526aa95" >Kotlin 1.3 relaxes this limitation and adds support for functions with bigger arity:</p><div class="code-block" data-lang="kotlin" id="whatsnew13.md-acb339d4"         >fun trueEnterpriseComesToKotlin(block: (Any, Any, ... /* 42 more */, Any) -&gt; Any) {\n    block(Any(), Any(), ..., Any())\n}\n</div></section><section class="chapter"  ><h2 id="whatsnew13.md-progressive-mode" data-toc="whatsnew13#whatsnew13.md-progressive-mode"  >Progressive mode</h2><p id="whatsnew13.md-ac062507" >Kotlin cares a lot about stability and backward compatibility of code: Kotlin compatibility policy says that breaking changes (e.g., a change which makes the code that used to compile fine, not compile anymore) can be introduced only in the major releases (<b id="whatsnew13.md-a4748edf" class=""  >1.2</b>, <b id="whatsnew13.md-7af4f126" class=""  >1.3</b>, etc.).</p><p id="whatsnew13.md-b3ceed9c" >We believe that a lot of users could use a much faster cycle where critical compiler bug fixes arrive immediately, making the code more safe and correct. So, Kotlin 1.3 introduces the <em id="whatsnew13.md-b4d01516" class=""  >progressive</em> compiler mode, which can be enabled by passing the argument <code class="code " id="whatsnew13.md-c58e4875"  >-progressive</code> to the compiler.</p><p id="whatsnew13.md-709d7091" >In the progressive mode, some fixes in language semantics can arrive immediately. All these fixes have two important properties:</p><ul class="list _ul" id="whatsnew13.md-7709bb5e"   ><li class="list__item" id="whatsnew13.md-d5fb3f44" ><p>They preserve backward compatibility of source code with older compilers, meaning that all the code which is compilable by the progressive compiler will be compiled fine by non-progressive one.</p></li><li class="list__item" id="whatsnew13.md-12fe6c6" ><p>They only make code <em id="whatsnew13.md-26c421f6" class=""  >safer</em> in some sense — e.g., some unsound smartcast can be forbidden, behavior of the generated code may be changed to be more predictable/stable, and so on.</p></li></ul><p id="whatsnew13.md-132b9381" >Enabling the progressive mode can require you to rewrite some of your code, but it shouldn\'t be too much — all the fixes enabled under progressive are carefully handpicked, reviewed, and provided with tooling migration assistance. We expect that the progressive mode will be a nice choice for any actively maintained codebases which are updated to the latest language versions quickly.</p></section><section class="chapter"  ><h2 id="whatsnew13.md-inline-classes" data-toc="whatsnew13#whatsnew13.md-inline-classes"  >Inline classes</h2><aside data-type="warning" class="prompt" data-title="" id="whatsnew13.md-c44c8ad0"><p id="whatsnew13.md-22e3fdeb" >Inline classes are in <a href="#components-stability.md" id="whatsnew13.md-c103033c"   >Alpha</a>. They may change incompatibly and require manual migration in the future. We appreciate your feedback on it in <a href="https://youtrack.jetbrains.com/issues/KT" id="whatsnew13.md-a8cee3ce"   data-external="true" rel="noopener noreferrer" >YouTrack</a>. See details in the <a href="#inline-classes.md" id="whatsnew13.md-8ddb4634"   >reference</a>.</p></aside><p id="whatsnew13.md-7d7ff290" >Kotlin 1.3 introduces a new kind of declaration — <code class="code " id="whatsnew13.md-d09634d1"  >inline class</code>. Inline classes can be viewed as a restricted version of the usual classes, in particular, inline classes must have exactly one property:</p><div class="code-block" data-lang="kotlin" id="whatsnew13.md-2e1467ee"         >inline class Name(val s: String)\n</div><p id="whatsnew13.md-4e683bee" >The Kotlin compiler will use this restriction to aggressively optimize runtime representation of inline classes and substitute their instances with the value of the underlying property where possible removing constructor calls, GC pressure, and enabling other optimizations:</p><div class="code-block" data-lang="kotlin" id="whatsnew13.md-c90d959c"        data-runnable="true" data-min-compiler-version="1.3"  >inline class Name(val s: String)\n//sampleStart\nfun main() {\n    // In the next line no constructor call happens, and\n    // at the runtime \'name\' contains just string &quot;Kotlin&quot;\n    val name = Name(&quot;Kotlin&quot;)\n    println(name.s) \n}\n//sampleEnd\n</div><p id="whatsnew13.md-e1807220" >See <a href="#inline-classes.md" id="whatsnew13.md-70b1dd7"   >reference</a> for inline classes for details.</p></section><section class="chapter"  ><h2 id="whatsnew13.md-unsigned-integers" data-toc="whatsnew13#whatsnew13.md-unsigned-integers"  >Unsigned integers</h2><aside data-type="warning" class="prompt" data-title="" id="whatsnew13.md-cf04588c"><p id="whatsnew13.md-d199a9" >Unsigned integers are in <a href="#components-stability.md" id="whatsnew13.md-79742a0b"   >Beta</a>. Their implementation is almost stable, but migration steps may be required in the future. We\'ll do our best to minimize any changes you will have to make. See details in the <a href="#basic-types.md-beta-status-of-unsigned-integers" id="whatsnew13.md-b4b27d7c"   >reference</a>.</p></aside><p id="whatsnew13.md-316003f3" >Kotlin 1.3 introduces unsigned integer types:</p><ul class="list _ul" id="whatsnew13.md-1a913211"   ><li class="list__item" id="whatsnew13.md-6a82600c" ><p><code class="code " id="whatsnew13.md-93770250"  >kotlin.UByte</code>: an unsigned 8-bit integer, ranges from 0 to 255</p></li><li class="list__item" id="whatsnew13.md-7211a7a6" ><p><code class="code " id="whatsnew13.md-ef88850b"  >kotlin.UShort</code>: an unsigned 16-bit integer, ranges from 0 to 65535</p></li><li class="list__item" id="whatsnew13.md-eebb78dc" ><p><code class="code " id="whatsnew13.md-1a73d796"  >kotlin.UInt</code>: an unsigned 32-bit integer, ranges from 0 to 2^32 - 1</p></li><li class="list__item" id="whatsnew13.md-fd3111e6" ><p><code class="code " id="whatsnew13.md-362a4edd"  >kotlin.ULong</code>: an unsigned 64-bit integer, ranges from 0 to 2^64 - 1</p></li></ul><p id="whatsnew13.md-9854140a" >Most of the functionality of signed types are supported for unsigned counterparts too:</p><div class="code-block" data-lang="kotlin" id="whatsnew13.md-48656ed6"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n// You can define unsigned types using literal suffixes\nval uint = 42u \nval ulong = 42uL\nval ubyte: UByte = 255u\n\n// You can convert signed types to unsigned and vice versa via stdlib extensions:\nval int = uint.toInt()\nval byte = ubyte.toByte()\nval ulong2 = byte.toULong()\n\n// Unsigned types support similar operators:\nval x = 20u + 22u\nval y = 1u shl 8\nval z = &quot;128&quot;.toUByte()\nval range = 1u..5u\n//sampleEnd\nprintln(&quot;ubyte: $ubyte, byte: $byte, ulong2: $ulong2&quot;)\nprintln(&quot;x: $x, y: $y, z: $z, range: $range&quot;)\n}\n</div><p id="whatsnew13.md-9bbe69d5" >See <a href="#basic-types.md-unsigned-integers" id="whatsnew13.md-2313a3b6"   >reference</a> for details.</p></section><section class="chapter"  ><h2 id="whatsnew13.md-jvmdefault" data-toc="whatsnew13#whatsnew13.md-jvmdefault"  >@JvmDefault</h2><aside data-type="warning" class="prompt" data-title="" id="whatsnew13.md-1000938b"><p id="whatsnew13.md-bb48abc2" ><code class="code " id="whatsnew13.md-a877a362"  >@JvmDefault</code> is <a href="#components-stability.md" id="whatsnew13.md-36321143"   >Experimental</a>. It may be dropped or changed at any time. Use it only for evaluation purposes. We appreciate your feedback on it in <a href="https://youtrack.jetbrains.com/issues/KT" id="whatsnew13.md-f06b591d"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="whatsnew13.md-d7bceec" >Kotlin targets a wide range of the Java versions, including Java 6 and Java 7, where default methods in the interfaces are not allowed. For your convenience, the Kotlin compiler works around that limitation, but this workaround isn\'t compatible with the <code class="code " id="whatsnew13.md-188775e"  >default</code> methods, introduced in Java 8.</p><p id="whatsnew13.md-6374e202" >This could be an issue for Java-interoperability, so Kotlin 1.3 introduces the <code class="code " id="whatsnew13.md-949959ae"  >@JvmDefault</code> annotation. Methods annotated with this annotation will be generated as <code class="code " id="whatsnew13.md-3dbca976"  >default</code> methods for JVM:</p><div class="code-block" data-lang="kotlin" id="whatsnew13.md-d72272c"         >interface Foo {\n    // Will be generated as \'default\' method\n    @JvmDefault\n    fun foo(): Int = 42\n}\n</div><aside data-type="warning" class="prompt" data-title="" id="whatsnew13.md-c6b0fb5a"><p id="whatsnew13.md-9fe6e587" >Warning! Annotating your API with <code class="code " id="whatsnew13.md-9899b04e"  >@JvmDefault</code> has serious implications on binary compatibility. Make sure to carefully read the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-default/index.html" id="whatsnew13.md-a5bbc0e0"   data-external="true" rel="noopener noreferrer" >reference page</a> before using <code class="code " id="whatsnew13.md-ae02dacb"  >@JvmDefault</code> in production.</p></aside></section><section class="chapter"  ><h2 id="whatsnew13.md-standard-library" data-toc="whatsnew13#whatsnew13.md-standard-library"  >Standard library</h2><section class="chapter"  ><h3 id="whatsnew13.md-multiplatform-random" data-toc="whatsnew13#whatsnew13.md-multiplatform-random"  >Multiplatform random</h3><p id="whatsnew13.md-b0e70a88" >Prior to Kotlin 1.3, there was no uniform way to generate random numbers on all platforms — we had to resort to platform-specific solutions like <code class="code " id="whatsnew13.md-8c893e23"  >java.util.Random</code> on JVM. This release fixes this issue by introducing the class <code class="code " id="whatsnew13.md-ba3b7350"  >kotlin.random.Random</code>, which is available on all platforms:</p><div class="code-block" data-lang="kotlin" id="whatsnew13.md-7eeacd24"        data-runnable="true" data-min-compiler-version="1.3"  >import kotlin.random.Random\n\nfun main() {\n//sampleStart\n    val number = Random.nextInt(42)  // number is in range [0, limit)\n    println(number)\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew13.md-isnullorempty-and-orempty-extensions" data-toc="whatsnew13#whatsnew13.md-isnullorempty-and-orempty-extensions"  >isNullOrEmpty and orEmpty extensions</h3><p id="whatsnew13.md-c0880e30" ><code class="code " id="whatsnew13.md-eb27dfb1"  >isNullOrEmpty</code> and <code class="code " id="whatsnew13.md-a9e3519e"  >orEmpty</code> extensions for some types are already present in stdlib. The first one returns <code class="code " id="whatsnew13.md-a18e7eaa"  >true</code> if the receiver is <code class="code " id="whatsnew13.md-30f7dcb0"  >null</code> or empty, and the second one falls back to an empty instance if the receiver is <code class="code " id="whatsnew13.md-a11fd5de"  >null</code>. Kotlin 1.3 provides similar extensions on collections, maps, and arrays of objects.</p></section><section class="chapter"  ><h3 id="whatsnew13.md-copy-elements-between-two-existing-arrays" data-toc="whatsnew13#whatsnew13.md-copy-elements-between-two-existing-arrays"  >Copy elements between two existing arrays</h3><p id="whatsnew13.md-3310b6f8" >The <code class="code " id="whatsnew13.md-a64b1cb8"  >array.copyInto(targetArray, targetOffset, startIndex, endIndex)</code> functions for the existing array types, including the unsigned arrays, make it easier to implement array-based containers in pure Kotlin.</p><div class="code-block" data-lang="kotlin" id="whatsnew13.md-40da2043"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val sourceArr = arrayOf(&quot;k&quot;, &quot;o&quot;, &quot;t&quot;, &quot;l&quot;, &quot;i&quot;, &quot;n&quot;)\n    val targetArr = sourceArr.copyInto(arrayOfNulls&lt;String&gt;(6), 3, startIndex = 3, endIndex = 6)\n    println(targetArr.contentToString())\n    \n    sourceArr.copyInto(targetArr, startIndex = 0, endIndex = 3)\n    println(targetArr.contentToString())\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew13.md-associatewith" data-toc="whatsnew13#whatsnew13.md-associatewith"  >associateWith</h3><p id="whatsnew13.md-1b39e7bc" >It is quite a common situation to have a list of keys and want to build a map by associating each of these keys with some value. It was possible to do it before with the <code class="code " id="whatsnew13.md-c1302d9c"  >associate { it to getValue(it) }</code> function, but now we’re introducing a more efficient and easy to explore alternative: <code class="code " id="whatsnew13.md-2bb8781a"  >keys.associateWith { getValue(it) }</code>.</p><div class="code-block" data-lang="kotlin" id="whatsnew13.md-d4fb734a"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val keys = \'a\'..\'f\'\n    val map = keys.associateWith { it.toString().repeat(5).capitalize() }\n    map.forEach { println(it) }\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew13.md-ifempty-and-ifblank-functions" data-toc="whatsnew13#whatsnew13.md-ifempty-and-ifblank-functions"  >ifEmpty and ifBlank functions</h3><p id="whatsnew13.md-97e613da" >Collections, maps, object arrays, char sequences, and sequences now have an <code class="code " id="whatsnew13.md-44b2679c"  >ifEmpty</code> function, which allows specifying a fallback value that will be used instead of the receiver if it is empty:</p><div class="code-block" data-lang="kotlin" id="whatsnew13.md-36270876"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    fun printAllUppercase(data: List&lt;String&gt;) {\n        val result = data\n        .filter { it.all { c -&gt; c.isUpperCase() } }\n            .ifEmpty { listOf(&quot;&lt;no uppercase&gt;&quot;) }\n        result.forEach { println(it) }\n    }\n    \n    printAllUppercase(listOf(&quot;foo&quot;, &quot;Bar&quot;))\n    printAllUppercase(listOf(&quot;FOO&quot;, &quot;BAR&quot;))\n//sampleEnd\n}\n</div><p id="whatsnew13.md-b70310b9" >Char sequences and strings in addition have an <code class="code " id="whatsnew13.md-d18d82d6"  >ifBlank</code> extension that does the same thing as <code class="code " id="whatsnew13.md-50517fe0"  >ifEmpty</code> but checks for a string being all whitespace instead of empty.</p><div class="code-block" data-lang="kotlin" id="whatsnew13.md-4636330a"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val s = &quot;    \\n&quot;\n    println(s.ifBlank { &quot;&lt;blank&gt;&quot; })\n    println(s.ifBlank { null })\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew13.md-sealed-classes-in-reflection" data-toc="whatsnew13#whatsnew13.md-sealed-classes-in-reflection"  >Sealed classes in reflection</h3><p id="whatsnew13.md-7ce4a6b2" >We’ve added a new API to <code class="code " id="whatsnew13.md-34788f37"  >kotlin-reflect</code> that can be used to enumerate all the direct subtypes of a <code class="code " id="whatsnew13.md-c67ac771"  >sealed</code> class, namely <code class="code " id="whatsnew13.md-6ffbc897"  >KClass.sealedSubclasses</code>.</p></section><section class="chapter"  ><h3 id="whatsnew13.md-smaller-changes" data-toc="whatsnew13#whatsnew13.md-smaller-changes"  >Smaller changes</h3><ul class="list _ul" id="whatsnew13.md-94ca2f6e"   ><li class="list__item" id="whatsnew13.md-b46cf679" ><p><code class="code " id="whatsnew13.md-8431a2f4"  >Boolean</code> type now has companion.</p></li><li class="list__item" id="whatsnew13.md-9e50ee9c" ><p><code class="code " id="whatsnew13.md-1a47f464"  >Any?.hashCode()</code> extension that returns 0 for <code class="code " id="whatsnew13.md-6bd58768"  >null</code>.</p></li><li class="list__item" id="whatsnew13.md-59043c73" ><p><code class="code " id="whatsnew13.md-d667e7c7"  >Char</code> now provides <code class="code " id="whatsnew13.md-922b1fa3"  >MIN_VALUE</code> and <code class="code " id="whatsnew13.md-e985e1b1"  >MAX_VALUE</code> constants.</p></li><li class="list__item" id="whatsnew13.md-f5f30d63" ><p><code class="code " id="whatsnew13.md-aa116fa8"  >SIZE_BYTES</code> and <code class="code " id="whatsnew13.md-84557f83"  >SIZE_BITS</code> constants in primitive type companions.</p></li></ul></section></section><section class="chapter"  ><h2 id="whatsnew13.md-tooling" data-toc="whatsnew13#whatsnew13.md-tooling"  >Tooling</h2><section class="chapter"  ><h3 id="whatsnew13.md-code-style-support-in-ide" data-toc="whatsnew13#whatsnew13.md-code-style-support-in-ide"  >Code style support in IDE</h3><p id="whatsnew13.md-b8421ab5" >Kotlin 1.3 introduces support for the <a href="#coding-conventions.md" id="whatsnew13.md-4bb884e2"   >recommended code style</a> in IntelliJ IDEA. Check out <a href="#code-style-migration-guide.md" id="whatsnew13.md-fa4f9da7"   >this page</a> for the migration guidelines.</p></section><section class="chapter"  ><h3 id="whatsnew13.md-kotlinx-serialization" data-toc="whatsnew13#whatsnew13.md-kotlinx-serialization"  >kotlinx.serialization</h3><p id="whatsnew13.md-1d1f607c" ><a href="https://github.com/Kotlin/kotlinx.serialization" id="whatsnew13.md-955b5ba0"   data-external="true" rel="noopener noreferrer" >kotlinx.serialization</a> is a library which provides multiplatform support for (de)serializing objects in Kotlin. Previously, it was a separate project, but since Kotlin 1.3, it ships with the Kotlin compiler distribution on par with the other compiler plugins. The main difference is that you don\'t need to manually watch out for the Serialization IDE Plugin being compatible with the Kotlin IDE plugin version you\'re using: now the Kotlin IDE plugin already includes serialization!</p><p id="whatsnew13.md-93ee4e3f" >See here for <a href="https://github.com/Kotlin/kotlinx.serialization#current-project-status" id="whatsnew13.md-d33f8338"   data-external="true" rel="noopener noreferrer" >details</a>.</p><aside data-type="warning" class="prompt" data-title="" id="whatsnew13.md-a3e2a155"><p id="whatsnew13.md-a72fccba" >Even though kotlinx.serialization now ships with the Kotlin Compiler distribution, it is still considered to be an experimental feature in Kotlin 1.3.</p></aside></section><section class="chapter"  ><h3 id="whatsnew13.md-scripting-update" data-toc="whatsnew13#whatsnew13.md-scripting-update"  >Scripting update</h3><aside data-type="warning" class="prompt" data-title="" id="whatsnew13.md-3c61fbbf"><p id="whatsnew13.md-1541f94c" >Scripting is <a href="#components-stability.md" id="whatsnew13.md-28e06580"   >Experimental</a>. It may be dropped or changed at any time. Use it only for evaluation purposes. We appreciate your feedback on it in <a href="https://youtrack.jetbrains.com/issues/KT" id="whatsnew13.md-126d61fc"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="whatsnew13.md-68c3199e" >Kotlin 1.3 continues to evolve and improve scripting API, introducing some experimental support for scripts customization, such as adding external properties, providing static or dynamic dependencies, and so on.</p><p id="whatsnew13.md-10df510a" >For additional details, please consult the <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/scripting-support.md" id="whatsnew13.md-73e509c4"   data-external="true" rel="noopener noreferrer" >KEEP-75</a>.</p></section><section class="chapter"  ><h3 id="whatsnew13.md-scratches-support" data-toc="whatsnew13#whatsnew13.md-scratches-support"  >Scratches support</h3><p id="whatsnew13.md-a2dc5ce6" >Kotlin 1.3 introduces support for runnable Kotlin <em id="whatsnew13.md-48f0ed54" class=""  >scratch files</em>. <em id="whatsnew13.md-6a68dbbe" class=""  >Scratch file</em> is a kotlin script file with the .kts extension that you can run and get evaluation results directly in the editor.</p><p id="whatsnew13.md-fd243f1c" >Consult the general <a href="https://www.jetbrains.com/help/idea/scratches.html" id="whatsnew13.md-36f978f"   data-external="true" rel="noopener noreferrer" >Scratches documentation</a> for details.</p></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="whatsnew12.md"  >What\'s new in Kotlin 1.2</h1><section class="chapter"  ><h2 id="whatsnew12.md-table-of-contents" data-toc="whatsnew12#whatsnew12.md-table-of-contents"  >Table of contents</h2><ul class="list _ul" id="whatsnew12.md-d0952f05"   ><li class="list__item" id="whatsnew12.md-29ce6518" ><a href="#whatsnew12.md-multiplatform-projects-experimental" id="whatsnew12.md-f3167e11"   >Multiplatform projects</a></li><li class="list__item" id="whatsnew12.md-bd016fdf" ><a href="#whatsnew12.md-other-language-features" id="whatsnew12.md-b6a5ecfd"   >Other language features</a></li><li class="list__item" id="whatsnew12.md-bfe6fba9" ><a href="#whatsnew12.md-standard-library" id="whatsnew12.md-868dc27a"   >Standard library</a></li><li class="list__item" id="whatsnew12.md-7416d320" ><a href="#whatsnew12.md-jvm-backend" id="whatsnew12.md-b52952b6"   >JVM backend</a></li><li class="list__item" id="whatsnew12.md-8e97944b" ><a href="#whatsnew12.md-javascript-backend" id="whatsnew12.md-f8a31ef4"   >JavaScript backend</a></li></ul></section><section class="chapter"  ><h2 id="whatsnew12.md-multiplatform-projects-experimental" data-toc="whatsnew12#whatsnew12.md-multiplatform-projects-experimental"  >Multiplatform projects (experimental)</h2><p id="whatsnew12.md-79e51822" >Multiplatform projects are a new <b id="whatsnew12.md-e50fd257" class=""  >experimental</b> feature in Kotlin 1.2, allowing you to reuse code between target platforms supported by Kotlin – JVM, JavaScript, and (in the future) Native. In a multiplatform project, you have three kinds of modules:</p><ul class="list _ul" id="whatsnew12.md-42f3cad6"   ><li class="list__item" id="whatsnew12.md-324d7797" ><p>A <em id="whatsnew12.md-981a930f" class=""  >common</em> module contains code that is not specific to any platform, as well as declarations without implementation of platform-dependent APIs.</p></li><li class="list__item" id="whatsnew12.md-3efd61f1" ><p>A <em id="whatsnew12.md-6c11a540" class=""  >platform</em> module contains implementations of platform-dependent declarations in the common module for a specific platform, as well as other platform-dependent code.</p></li><li class="list__item" id="whatsnew12.md-7dd8fbe3" ><p>A regular module targets a specific platform and can either be a dependency of platform modules or depend on platform modules.</p></li></ul><p id="whatsnew12.md-9f747da3" >When you compile a multiplatform project for a specific platform, the code for both the common and platform-specific parts is generated.</p><p id="whatsnew12.md-bbd30350" >A key feature of the multiplatform project support is the possibility to express dependencies of common code on platform-specific parts through <em id="whatsnew12.md-5306b558" class=""  >expected</em> and <em id="whatsnew12.md-4e7a8e" class=""  >actual</em> declarations. An <em id="whatsnew12.md-a5b74802" class=""  >expected</em> declaration specifies an API (class, interface, annotation, top-level declaration etc.). An <em id="whatsnew12.md-9da1969e" class=""  >actual</em> declaration is either a platform-dependent implementation of the API or a typealias referring to an existing implementation of the API in an external library. Here\'s an example:</p><p id="whatsnew12.md-292f4faa" >In the common code:</p><div class="code-block" data-lang="kotlin" id="whatsnew12.md-ab077e2e"         >// expected platform-specific API:\nexpect fun hello(world: String): String\n\nfun greet() {\n    // usage of the expected API:\n    val greeting = hello(&quot;multiplatform world&quot;)\n    println(greeting)\n}\n\nexpect class URL(spec: String) {\n    open fun getHost(): String\n    open fun getPath(): String\n}\n</div><p id="whatsnew12.md-5d37b088" >In the JVM platform code:</p><div class="code-block" data-lang="kotlin" id="whatsnew12.md-55ab47d3"         >actual fun hello(world: String): String =\n    &quot;Hello, $world, on the JVM platform!&quot;\n\n// using existing platform-specific implementation:\nactual typealias URL = java.net.URL\n</div><p id="whatsnew12.md-797dd2f" >See the <a href="#multiplatform.md" id="whatsnew12.md-9cc46e99"   >documentation</a> for details and steps to build a multiplatform project.</p></section><section class="chapter"  ><h2 id="whatsnew12.md-other-language-features" data-toc="whatsnew12#whatsnew12.md-other-language-features"  >Other language features</h2><section class="chapter"  ><h3 id="whatsnew12.md-array-literals-in-annotations" data-toc="whatsnew12#whatsnew12.md-array-literals-in-annotations"  >Array literals in annotations</h3><p id="whatsnew12.md-be541007" >Starting with Kotlin 1.2, array arguments for annotations can be passed with the new array literal syntax instead of the <code class="code " id="whatsnew12.md-10542f94"  >arrayOf</code> function:</p><div class="code-block" data-lang="kotlin" id="whatsnew12.md-e934bc1c"         >@CacheConfig(cacheNames = [&quot;books&quot;, &quot;default&quot;])\npublic class BookRepositoryImpl {\n    // ...\n}\n</div><p id="whatsnew12.md-6e75cd63" >The array literal syntax is constrained to annotation arguments.</p></section><section class="chapter"  ><h3 id="whatsnew12.md-lateinit-top-level-properties-and-local-variables" data-toc="whatsnew12#whatsnew12.md-lateinit-top-level-properties-and-local-variables"  >Lateinit top-level properties and local variables</h3><p id="whatsnew12.md-cc059c6c" >The <code class="code " id="whatsnew12.md-ff83605c"  >lateinit</code> modifier can now be used on top-level properties and local variables. The latter can be used, for example, when a lambda passed as a constructor argument to one object refers to another object which has to be defined later:</p><div class="code-block" data-lang="kotlin" id="whatsnew12.md-634b99d4"        data-runnable="true" data-min-compiler-version="1.3"  >class Node&lt;T&gt;(val value: T, val next: () -&gt; Node&lt;T&gt;)\n\nfun main(args: Array&lt;String&gt;) {\n    // A cycle of three nodes:\n    lateinit var third: Node&lt;Int&gt;\n\n    val second = Node(2, next = { third })\n    val first = Node(1, next = { second })\n\n    third = Node(3, next = { first })\n\n    val nodes = generateSequence(first) { it.next() }\n    println(&quot;Values in the cycle: ${nodes.take(7).joinToString { it.value.toString() }}, ...&quot;)\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew12.md-check-whether-a-lateinit-var-is-initialized" data-toc="whatsnew12#whatsnew12.md-check-whether-a-lateinit-var-is-initialized"  >Check whether a lateinit var is initialized</h3><p id="whatsnew12.md-27092c9e" >You can now check whether a lateinit var has been initialized using <code class="code " id="whatsnew12.md-57cfe94"  >isInitialized</code> on the property reference:</p><div class="code-block" data-lang="kotlin" id="whatsnew12.md-23ecb18"        data-runnable="true" data-min-compiler-version="1.3"  >class Foo {\n    lateinit var lateinitVar: String\n\n    fun initializationLogic() {\n//sampleStart\n        println(&quot;isInitialized before assignment: &quot; + this::lateinitVar.isInitialized)\n        lateinitVar = &quot;value&quot;\n        println(&quot;isInitialized after assignment: &quot; + this::lateinitVar.isInitialized)\n//sampleEnd\n    }\n}\n\nfun main(args: Array&lt;String&gt;) {\n\tFoo().initializationLogic()\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew12.md-inline-functions-with-default-functional-parameters" data-toc="whatsnew12#whatsnew12.md-inline-functions-with-default-functional-parameters"  >Inline functions with default functional parameters</h3><p id="whatsnew12.md-89627b79" >Inline functions are now allowed to have default values for their inlined functional parameters:</p><div class="code-block" data-lang="kotlin" id="whatsnew12.md-79ef3516"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\ninline fun &lt;E&gt; Iterable&lt;E&gt;.strings(transform: (E) -&gt; String = { it.toString() }) =\n    map { transform(it) }\n\nval defaultStrings = listOf(1, 2, 3).strings()\nval customStrings = listOf(1, 2, 3).strings { &quot;($it)&quot; } \n//sampleEnd\n\nfun main(args: Array&lt;String&gt;) {\n    println(&quot;defaultStrings = $defaultStrings&quot;)\n    println(&quot;customStrings = $customStrings&quot;)\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew12.md-information-from-explicit-casts-is-used-for-type-inference" data-toc="whatsnew12#whatsnew12.md-information-from-explicit-casts-is-used-for-type-inference"  >Information from explicit casts is used for type inference</h3><p id="whatsnew12.md-d681b752" >The Kotlin compiler can now use information from type casts in type inference. If you’re calling a generic method that returns a type parameter <code class="code " id="whatsnew12.md-49151401"  >T</code> and casting the return value to a specific type <code class="code " id="whatsnew12.md-f6b8ed4b"  >Foo</code>, the compiler now understands that <code class="code " id="whatsnew12.md-7270f339"  >T</code> for this call needs to be bound to the type <code class="code " id="whatsnew12.md-66e45e6"  >Foo</code>.</p><p id="whatsnew12.md-5ad2282d" >This is particularly important for Android developers, since the compiler can now correctly analyze generic <code class="code " id="whatsnew12.md-36812fa9"  >findViewById</code> calls in Android API level 26:</p><div class="code-block" data-lang="kotlin" id="whatsnew12.md-782b051e"         >val button = findViewById(R.id.button) as Button\n</div></section><section class="chapter"  ><h3 id="whatsnew12.md-smart-cast-improvements" data-toc="whatsnew12#whatsnew12.md-smart-cast-improvements"  >Smart cast improvements</h3><p id="whatsnew12.md-2faa57b6" >When a variable is assigned from a safe call expression and checked for null, the smart cast is now applied to the safe call receiver as well:</p><div class="code-block" data-lang="kotlin" id="whatsnew12.md-cc514534"        data-runnable="true" data-min-compiler-version="1.3"  >fun countFirst(s: Any): Int {\n//sampleStart\n    val firstChar = (s as? CharSequence)?.firstOrNull()\n    if (firstChar != null)\n    return s.count { it == firstChar } // s: Any is smart cast to CharSequence\n\n    val firstItem = (s as? Iterable&lt;*&gt;)?.firstOrNull()\n    if (firstItem != null)\n    return s.count { it == firstItem } // s: Any is smart cast to Iterable&lt;*&gt;\n//sampleEnd\n    return -1\n}\n\nfun main(args: Array&lt;String&gt;) {\n  val string = &quot;abacaba&quot;\n  val countInString = countFirst(string)\n  println(&quot;called on \\&quot;$string\\&quot;: $countInString&quot;)\n\n  val list = listOf(1, 2, 3, 1, 2)\n  val countInList = countFirst(list)\n  println(&quot;called on $list: $countInList&quot;)\n}\n</div><p id="whatsnew12.md-fe5acfeb" >Also, smart casts in a lambda are now allowed for local variables that are only modified before the lambda:</p><div class="code-block" data-lang="kotlin" id="whatsnew12.md-15ff24c9"        data-runnable="true" data-min-compiler-version="1.3"  >fun main(args: Array&lt;String&gt;) {\n//sampleStart\n    val flag = args.size == 0\n    var x: String? = null\n    if (flag) x = &quot;Yahoo!&quot;\n\n    run {\n        if (x != null) {\n            println(x.length) // x is smart cast to String\n        }\n    }\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew12.md-support-for-foo-as-a-shorthand-for-this-foo" data-toc="whatsnew12#whatsnew12.md-support-for-foo-as-a-shorthand-for-this-foo"  >Support for  ::foo as a shorthand for this::foo</h3><p id="whatsnew12.md-e56bbf3e" >A bound callable reference to a member of <code class="code " id="whatsnew12.md-f2755716"  >this</code> can now be written without explicit receiver, <code class="code " id="whatsnew12.md-5f9d7a6e"  >::foo</code> instead of <code class="code " id="whatsnew12.md-321d92ad"  >this::foo</code>. This also makes callable references more convenient to use in lambdas where you refer to a member of the outer receiver.</p></section><section class="chapter"  ><h3 id="whatsnew12.md-breaking-change-sound-smart-casts-after-try-blocks" data-toc="whatsnew12#whatsnew12.md-breaking-change-sound-smart-casts-after-try-blocks"  >Breaking change: sound smart casts after try blocks</h3><p id="whatsnew12.md-af1b6643" >Earlier, Kotlin used assignments made inside a <code class="code " id="whatsnew12.md-fdaed05c"  >try</code> block for smart casts after the block, which could break type- and null-safety and lead to runtime failures. This release fixes this issue, making the smart casts more strict, but breaking some code that relied on such smart casts.</p><p id="whatsnew12.md-38b659ef" >To switch to the old smart casts behavior, pass the fallback flag <code class="code " id="whatsnew12.md-efdc2471"  >-Xlegacy-smart-cast-after-try</code> as the compiler argument. It will become deprecated in Kotlin 1.3.</p></section><section class="chapter"  ><h3 id="whatsnew12.md-deprecation-data-classes-overriding-copy" data-toc="whatsnew12#whatsnew12.md-deprecation-data-classes-overriding-copy"  >Deprecation: data classes overriding copy</h3><p id="whatsnew12.md-fcdaaf4e" >When a data class derived from a type that already had the <code class="code " id="whatsnew12.md-5b44607c"  >copy</code> function with the same signature, the <code class="code " id="whatsnew12.md-d12b981c"  >copy</code> implementation generated for the data class used the defaults from the supertype, leading to counter-intuitive behavior, or failed at runtime if there were no default parameters in the supertype.</p><p id="whatsnew12.md-2328fbf7" >Inheritance that leads to a <code class="code " id="whatsnew12.md-8f78fa58"  >copy</code> conflict has become deprecated with a warning in Kotlin 1.2 and will be an error in Kotlin 1.3.</p></section><section class="chapter"  ><h3 id="whatsnew12.md-deprecation-nested-types-in-enum-entries" data-toc="whatsnew12#whatsnew12.md-deprecation-nested-types-in-enum-entries"  >Deprecation: nested types in enum entries</h3><p id="whatsnew12.md-fc062c81" >Inside enum entries, defining a nested type that is not an <code class="code " id="whatsnew12.md-67fed368"  >inner class</code> has been deprecated due to issues in the initialization logic. This causes a warning in Kotlin 1.2 and will become an error in Kotlin 1.3.</p></section><section class="chapter"  ><h3 id="whatsnew12.md-deprecation-single-named-argument-for-vararg" data-toc="whatsnew12#whatsnew12.md-deprecation-single-named-argument-for-vararg"  >Deprecation: single named argument for vararg</h3><p id="whatsnew12.md-ddc32a99" >For consistency with array literals in annotations, passing a single item for a vararg parameter in the named form (<code class="code " id="whatsnew12.md-f6f040c1"  >foo(items = i)</code>) has been deprecated. Please use the spread operator with the corresponding array factory functions:</p><div class="code-block" data-lang="kotlin" id="whatsnew12.md-80696deb"         >foo(items = *intArrayOf(1))\n</div><p id="whatsnew12.md-fe609e1e" >There is an optimization that removes redundant arrays creation in such cases, which prevents performance degradation. The single-argument form produces warnings in Kotlin 1.2 and is to be dropped in Kotlin 1.3.</p></section><section class="chapter"  ><h3 id="whatsnew12.md-deprecation-inner-classes-of-generic-classes-extending-throwable" data-toc="whatsnew12#whatsnew12.md-deprecation-inner-classes-of-generic-classes-extending-throwable"  >Deprecation: inner classes of generic classes extending Throwable</h3><p id="whatsnew12.md-8043c4b5" >Inner classes of generic types that inherit from <code class="code " id="whatsnew12.md-707afc87"  >Throwable</code> could violate type-safety in a throw-catch scenario and thus have been deprecated, with a warning in Kotlin 1.2 and an error in Kotlin 1.3.</p></section><section class="chapter"  ><h3 id="whatsnew12.md-deprecation-mutating-backing-field-of-a-read-only-property" data-toc="whatsnew12#whatsnew12.md-deprecation-mutating-backing-field-of-a-read-only-property"  >Deprecation: mutating backing field of a read-only property</h3><p id="whatsnew12.md-b1849bd3" >Mutating the backing field of a read-only property by assigning <code class="code " id="whatsnew12.md-8d345ab9"  >field = ...</code> in the custom getter has been deprecated, with a warning in Kotlin 1.2 and an error in Kotlin 1.3.</p></section></section><section class="chapter"  ><h2 id="whatsnew12.md-standard-library" data-toc="whatsnew12#whatsnew12.md-standard-library"  >Standard library</h2><section class="chapter"  ><h3 id="whatsnew12.md-kotlin-standard-library-artifacts-and-split-packages" data-toc="whatsnew12#whatsnew12.md-kotlin-standard-library-artifacts-and-split-packages"  >Kotlin standard library artifacts and split packages</h3><p id="whatsnew12.md-f0a6296b" >The Kotlin standard library is now fully compatible with the Java 9 module system, which forbids split packages (multiple jar files declaring classes in the same package). In order to support that, new artifacts <code class="code " id="whatsnew12.md-afc4ceb3"  >kotlin-stdlib-jdk7</code> and <code class="code " id="whatsnew12.md-eb428253"  >kotlin-stdlib-jdk8</code> are introduced, which replace the old <code class="code " id="whatsnew12.md-6c050972"  >kotlin-stdlib-jre7</code> and <code class="code " id="whatsnew12.md-3da682a5"  >kotlin-stdlib-jre8</code>.</p><p id="whatsnew12.md-d0da9916" >The declarations in the new artifacts are visible under the same package names from the Kotlin point of view, but have different package names for Java. Therefore, switching to the new artifacts will not require any changes to your source code.</p><p id="whatsnew12.md-a0a4ec24" >Another change made to ensure compatibility with the new module system is removing the deprecated declarations in the <code class="code " id="whatsnew12.md-2100db19"  >kotlin.reflect</code> package from the <code class="code " id="whatsnew12.md-6639c157"  >kotlin-reflect</code> library. If you were using them, you need to switch to using the declarations in the <code class="code " id="whatsnew12.md-9995ff35"  >kotlin.reflect.full</code> package, which is supported since Kotlin 1.1.</p></section><section class="chapter"  ><h3 id="whatsnew12.md-windowed-chunked-zipwithnext" data-toc="whatsnew12#whatsnew12.md-windowed-chunked-zipwithnext"  >windowed, chunked, zipWithNext</h3><p id="whatsnew12.md-4555c287" >New extensions for <code class="code " id="whatsnew12.md-549a9d28"  >Iterable&lt;T&gt;</code>, <code class="code " id="whatsnew12.md-16d29a07"  >Sequence&lt;T&gt;</code>, and <code class="code " id="whatsnew12.md-4c8b8281"  >CharSequence</code> cover such use cases as buffering or batch processing (<code class="code " id="whatsnew12.md-224fc769"  >chunked</code> ), sliding window and computing sliding average (<code class="code " id="whatsnew12.md-c5cd5314"  >windowed</code>) , and processing pairs of subsequent items (<code class="code " id="whatsnew12.md-975b458f"  >zipWithNext</code> ):</p><div class="code-block" data-lang="kotlin" id="whatsnew12.md-c41adcb"        data-runnable="true" data-min-compiler-version="1.3"  >fun main(args: Array&lt;String&gt;) {\n//sampleStart\n    val items = (1..9).map { it * it }\n\n    val chunkedIntoLists = items.chunked(4)\n    val points3d = items.chunked(3) { (x, y, z) -&gt; Triple(x, y, z) }\n    val windowed = items.windowed(4)\n    val slidingAverage = items.windowed(4) { it.average() }\n    val pairwiseDifferences = items.zipWithNext { a, b -&gt; b - a }\n//sampleEnd\n\n    println(&quot;items: $items\\n&quot;)\n\n    println(&quot;chunked into lists: $chunkedIntoLists&quot;)\n    println(&quot;3D points: $points3d&quot;)\n    println(&quot;windowed by 4: $windowed&quot;)\n    println(&quot;sliding average by 4: $slidingAverage&quot;)\n    println(&quot;pairwise differences: $pairwiseDifferences&quot;)\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew12.md-fill-replaceall-shuffle-shuffled" data-toc="whatsnew12#whatsnew12.md-fill-replaceall-shuffle-shuffled"  >fill, replaceAll, shuffle/shuffled</h3><p id="whatsnew12.md-cc564dc1" >A set of extension functions was added for manipulating lists: <code class="code " id="whatsnew12.md-feef90e6"  >fill</code>, <code class="code " id="whatsnew12.md-85040a21"  >replaceAll</code> and <code class="code " id="whatsnew12.md-4eeb03f6"  >shuffle</code> for <code class="code " id="whatsnew12.md-9c85943c"  >MutableList</code>, and <code class="code " id="whatsnew12.md-23c96b0a"  >shuffled</code> for read-only <code class="code " id="whatsnew12.md-3682d08c"  >List</code>:</p><div class="code-block" data-lang="kotlin" id="whatsnew12.md-4043a5ed"        data-runnable="true" data-min-compiler-version="1.3"  >fun main(args: Array&lt;String&gt;) {\n//sampleStart\n    val items = (1..5).toMutableList()\n    \n    items.shuffle()\n    println(&quot;Shuffled items: $items&quot;)\n    \n    items.replaceAll { it * 2 }\n    println(&quot;Items doubled: $items&quot;)\n    \n    items.fill(5)\n    println(&quot;Items filled with 5: $items&quot;)\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew12.md-math-operations-in-kotlin-stdlib" data-toc="whatsnew12#whatsnew12.md-math-operations-in-kotlin-stdlib"  >Math operations in kotlin-stdlib</h3><p id="whatsnew12.md-13bba61c" >Satisfying the longstanding request, Kotlin 1.2 adds the <code class="code " id="whatsnew12.md-89790f67"  >kotlin.math</code> API for math operations that is common for JVM and JS and contains the following:</p><ul class="list _ul" id="whatsnew12.md-406049bd"   ><li class="list__item" id="whatsnew12.md-73cee3d7" ><p>Constants: <code class="code " id="whatsnew12.md-333e65d"  >PI</code> and <code class="code " id="whatsnew12.md-3cdf5baf"  >E</code></p></li><li class="list__item" id="whatsnew12.md-adb36887" ><p>Trigonometric: <code class="code " id="whatsnew12.md-b4c02d89"  >cos</code>, <code class="code " id="whatsnew12.md-9dada919"  >sin</code>, <code class="code " id="whatsnew12.md-1e0f04f7"  >tan</code> and inverse of them: <code class="code " id="whatsnew12.md-607433a6"  >acos</code>, <code class="code " id="whatsnew12.md-859e163c"  >asin</code>, <code class="code " id="whatsnew12.md-c7187f2c"  >atan</code>, <code class="code " id="whatsnew12.md-8bce2489"  >atan2</code></p></li><li class="list__item" id="whatsnew12.md-279b3401" ><p>Hyperbolic: <code class="code " id="whatsnew12.md-67655f7f"  >cosh</code>, <code class="code " id="whatsnew12.md-8b47181b"  >sinh</code>, <code class="code " id="whatsnew12.md-9ae33df9"  >tanh</code> and their inverse: <code class="code " id="whatsnew12.md-70d3032e"  >acosh</code>, <code class="code " id="whatsnew12.md-e1dd3f6e"  >asinh</code>, <code class="code " id="whatsnew12.md-30d3de31"  >atanh</code></p></li><li class="list__item" id="whatsnew12.md-aee41276" ><p>Exponentation: <code class="code " id="whatsnew12.md-d3d5be3b"  >pow</code> (an extension function), <code class="code " id="whatsnew12.md-942d5624"  >sqrt</code>, <code class="code " id="whatsnew12.md-e270b0eb"  >hypot</code>, <code class="code " id="whatsnew12.md-becdd561"  >exp</code>, <code class="code " id="whatsnew12.md-d6e860ab"  >expm1</code></p></li><li class="list__item" id="whatsnew12.md-10d9066d" ><p>Logarithms: <code class="code " id="whatsnew12.md-88d6195"  >log</code>, <code class="code " id="whatsnew12.md-34139623"  >log2</code>, <code class="code " id="whatsnew12.md-42824bbe"  >log10</code>, <code class="code " id="whatsnew12.md-aa4b25c0"  >ln</code>, <code class="code " id="whatsnew12.md-add6d634"  >ln1p</code></p></li><li class="list__item" id="whatsnew12.md-d048f33b" >Rounding: <ul class="list _ul" id="whatsnew12.md-b64f7df6"   ><li class="list__item" id="whatsnew12.md-8858376c" ><p><code class="code " id="whatsnew12.md-54caf6a6"  >ceil</code>, <code class="code " id="whatsnew12.md-595c6a95"  >floor</code>, <code class="code " id="whatsnew12.md-47a03ed5"  >truncate</code>, <code class="code " id="whatsnew12.md-c2cca710"  >round</code> (half to even) functions</p></li><li class="list__item" id="whatsnew12.md-89bbc807" ><p><code class="code " id="whatsnew12.md-87b5db22"  >roundToInt</code>, <code class="code " id="whatsnew12.md-194142ea"  >roundToLong</code> (half to integer) extension functions</p></li></ul></li><li class="list__item" id="whatsnew12.md-e47fb64f" >Sign and absolute value: <ul class="list _ul" id="whatsnew12.md-ed5e5a57"   ><li class="list__item" id="whatsnew12.md-39c30ba4" ><p><code class="code " id="whatsnew12.md-b2e38c0e"  >abs</code> and <code class="code " id="whatsnew12.md-2cbb11c4"  >sign</code> functions</p></li><li class="list__item" id="whatsnew12.md-6a86c59" ><p><code class="code " id="whatsnew12.md-bec54ac9"  >absoluteValue</code> and <code class="code " id="whatsnew12.md-82eb89eb"  >sign</code> extension properties</p></li><li class="list__item" id="whatsnew12.md-5d524134" ><p><code class="code " id="whatsnew12.md-9989e9bd"  >withSign</code> extension function</p></li></ul></li><li class="list__item" id="whatsnew12.md-ec507c7b" ><p><code class="code " id="whatsnew12.md-4cf33ebd"  >max</code> and <code class="code " id="whatsnew12.md-91c46702"  >min</code> of two values</p></li><li class="list__item" id="whatsnew12.md-a93da781" >Binary representation: <ul class="list _ul" id="whatsnew12.md-81d2876"   ><li class="list__item" id="whatsnew12.md-39c36c5c" ><p><code class="code " id="whatsnew12.md-e27602e7"  >ulp</code> extension property</p></li><li class="list__item" id="whatsnew12.md-72bf0293" ><p><code class="code " id="whatsnew12.md-8fd45e1a"  >nextUp</code>, <code class="code " id="whatsnew12.md-f7440d79"  >nextDown</code>, <code class="code " id="whatsnew12.md-cdb7abe1"  >nextTowards</code> extension functions</p></li><li class="list__item" id="whatsnew12.md-34a844ba" ><p><code class="code " id="whatsnew12.md-db958182"  >toBits</code>, <code class="code " id="whatsnew12.md-88249f27"  >toRawBits</code>, <code class="code " id="whatsnew12.md-1229f56c"  >Double.fromBits</code> (these are in the <code class="code " id="whatsnew12.md-4f97f3b7"  >kotlin</code> package)</p></li></ul></li></ul><p id="whatsnew12.md-1b6355d4" >The same set of functions (but without constants) is also available for <code class="code " id="whatsnew12.md-8000fe9d"  >Float</code> arguments.</p></section><section class="chapter"  ><h3 id="whatsnew12.md-operators-and-conversions-for-biginteger-and-bigdecimal" data-toc="whatsnew12#whatsnew12.md-operators-and-conversions-for-biginteger-and-bigdecimal"  >Operators and conversions for BigInteger and BigDecimal</h3><p id="whatsnew12.md-d25df3ef" >Kotlin 1.2 introduces a set of functions for operating with <code class="code " id="whatsnew12.md-5b796ea7"  >BigInteger</code> and <code class="code " id="whatsnew12.md-74a6d8da"  >BigDecimal</code> and creating them from other numeric types. These are:</p><ul class="list _ul" id="whatsnew12.md-e9cfdf3a"   ><li class="list__item" id="whatsnew12.md-33951479" ><p><code class="code " id="whatsnew12.md-cef7dab"  >toBigInteger</code> for <code class="code " id="whatsnew12.md-10cbc3d1"  >Int</code> and <code class="code " id="whatsnew12.md-b7b41cc8"  >Long</code></p></li><li class="list__item" id="whatsnew12.md-d87a3bac" ><p><code class="code " id="whatsnew12.md-e8e5b7ca"  >toBigDecimal</code> for <code class="code " id="whatsnew12.md-d9e3c581"  >Int</code>, <code class="code " id="whatsnew12.md-9d1a6e04"  >Long</code>, <code class="code " id="whatsnew12.md-77d95ff9"  >Float</code>, <code class="code " id="whatsnew12.md-a537e315"  >Double</code>, and <code class="code " id="whatsnew12.md-db7ac98d"  >BigInteger</code></p></li><li class="list__item" id="whatsnew12.md-9aa13b5e" >Arithmetic and bitwise operator functions: <ul class="list _ul" id="whatsnew12.md-adfa130d"   ><li class="list__item" id="whatsnew12.md-f2acb30b" ><p>Binary operators <code class="code " id="whatsnew12.md-c597e10c"  >+</code>, <code class="code " id="whatsnew12.md-56e09dfc"  >-</code>, <code class="code " id="whatsnew12.md-894ae8a"  >*</code>, <code class="code " id="whatsnew12.md-2873893f"  >/</code>, <code class="code " id="whatsnew12.md-bb8ba057"  >%</code> and infix functions <code class="code " id="whatsnew12.md-ec04cb04"  >and</code>, <code class="code " id="whatsnew12.md-28a117fa"  >or</code>, <code class="code " id="whatsnew12.md-aa2b1c37"  >xor</code>, <code class="code " id="whatsnew12.md-50e60624"  >shl</code>, <code class="code " id="whatsnew12.md-e88d6f1a"  >shr</code></p></li><li class="list__item" id="whatsnew12.md-d5b95000" ><p>Unary operators <code class="code " id="whatsnew12.md-d1712897"  >-</code>, <code class="code " id="whatsnew12.md-99fb3fd3"  >++</code>, <code class="code " id="whatsnew12.md-75a8be27"  >--</code>, and a function <code class="code " id="whatsnew12.md-a3b940cf"  >inv</code></p></li></ul></li></ul></section><section class="chapter"  ><h3 id="whatsnew12.md-floating-point-to-bits-conversions" data-toc="whatsnew12#whatsnew12.md-floating-point-to-bits-conversions"  >Floating point to bits conversions</h3><p id="whatsnew12.md-f159907f" >New functions were added for converting <code class="code " id="whatsnew12.md-53ffdf08"  >Double</code> and <code class="code " id="whatsnew12.md-7fc93b5c"  >Float</code> to and from their bit representations:</p><ul class="list _ul" id="whatsnew12.md-a7e87fe0"   ><li class="list__item" id="whatsnew12.md-a72d8d30" ><p><code class="code " id="whatsnew12.md-83a5479"  >toBits</code> and <code class="code " id="whatsnew12.md-3a817d76"  >toRawBits</code> returning <code class="code " id="whatsnew12.md-f691f6df"  >Long</code> for <code class="code " id="whatsnew12.md-eeb9d6f5"  >Double</code> and <code class="code " id="whatsnew12.md-6750c408"  >Int</code> for <code class="code " id="whatsnew12.md-c7a17343"  >Float</code></p></li><li class="list__item" id="whatsnew12.md-b7b8a7e5" ><p><code class="code " id="whatsnew12.md-537ce740"  >Double.fromBits</code> and <code class="code " id="whatsnew12.md-fa978613"  >Float.fromBits</code> for creating floating point numbers from the bit representation</p></li></ul></section><section class="chapter"  ><h3 id="whatsnew12.md-regex-is-now-serializable" data-toc="whatsnew12#whatsnew12.md-regex-is-now-serializable"  >Regex is now serializable</h3><p id="whatsnew12.md-4f44ec64" >The <code class="code " id="whatsnew12.md-80d800ec"  >kotlin.text.Regex</code> class has become <code class="code " id="whatsnew12.md-7974b912"  >Serializable</code> and can now be used in serializable hierarchies.</p></section><section class="chapter"  ><h3 id="whatsnew12.md-closeable-use-calls-throwable-addsuppressed-if-available" data-toc="whatsnew12#whatsnew12.md-closeable-use-calls-throwable-addsuppressed-if-available"  >Closeable.use calls Throwable.addSuppressed if available</h3><p id="whatsnew12.md-52b5ea0b" >The <code class="code " id="whatsnew12.md-9b3b6a53"  >Closeable.use</code> function calls <code class="code " id="whatsnew12.md-ed91727f"  >Throwable.addSuppressed</code> when an exception is thrown during closing the resource after some other exception.</p><p id="whatsnew12.md-1a5daba0" >To enable this behavior you need to have <code class="code " id="whatsnew12.md-823c0e43"  >kotlin-stdlib-jdk7</code> in your dependencies.</p></section></section><section class="chapter"  ><h2 id="whatsnew12.md-jvm-backend" data-toc="whatsnew12#whatsnew12.md-jvm-backend"  >JVM backend</h2><section class="chapter"  ><h3 id="whatsnew12.md-constructor-calls-normalization" data-toc="whatsnew12#whatsnew12.md-constructor-calls-normalization"  >Constructor calls normalization</h3><p id="whatsnew12.md-b82d7da7" >Ever since version 1.0, Kotlin supported expressions with complex control flow, such as try-catch expressions and inline function calls. Such code is valid according to the Java Virtual Machine specification. Unfortunately, some bytecode processing tools do not handle such code quite well when such expressions are present in the arguments of constructor calls.</p><p id="whatsnew12.md-c1103db1" >To mitigate this problem for the users of such bytecode processing tools, we’ve added a command-line compiler option (<code class="code " id="whatsnew12.md-5d2a6b33"  >-Xnormalize-constructor-calls=MODE</code>) that tells the compiler to generate more Java-like bytecode for such constructs. Here <code class="code " id="whatsnew12.md-811de10a"  >MODE</code> is one of:</p><ul class="list _ul" id="whatsnew12.md-2a643397"   ><li class="list__item" id="whatsnew12.md-f907ad4f" ><p><code class="code " id="whatsnew12.md-2797044f"  >disable</code> (default) – generate bytecode in the same way as in Kotlin 1.0 and 1.1.</p></li><li class="list__item" id="whatsnew12.md-e8b49efb" ><p><code class="code " id="whatsnew12.md-9f5b57bc"  >enable</code> – generate Java-like bytecode for constructor calls. This can change the order in which the classes are loaded and initialized.</p></li><li class="list__item" id="whatsnew12.md-68bf2e58" ><p><code class="code " id="whatsnew12.md-23378517"  >preserve-class-initialization</code> – generate Java-like bytecode for constructor calls, ensuring that the class initialization order is preserved. This can affect overall performance of your application; use it only if you have some complex state shared between multiple classes and updated on class initialization.</p></li></ul><p id="whatsnew12.md-c0296292" >The “manual” workaround is to store the values of sub-expressions with control flow in variables, instead of evaluating them directly inside the call arguments. It’s similar to <code class="code " id="whatsnew12.md-688f8e1a"  >-Xnormalize-constructor-calls=enable</code>.</p></section><section class="chapter"  ><h3 id="whatsnew12.md-java-default-method-calls" data-toc="whatsnew12#whatsnew12.md-java-default-method-calls"  >Java-default method calls</h3><p id="whatsnew12.md-a1e2fbad" >Before Kotlin 1.2, interface members overriding Java-default methods while targeting JVM 1.6 produced a warning on super calls: <code class="code " id="whatsnew12.md-ba84d0ef"  >Super calls to Java default methods are deprecated in JVM target 1.6. Recompile with \'-jvm-target 1.8\'</code>. In Kotlin 1.2, there\'s an <b id="whatsnew12.md-14409903" class=""  >error</b> instead, thus requiring any such code to be compiled with JVM target 1.8.</p></section><section class="chapter"  ><h3 id="whatsnew12.md-breaking-change-consistent-behavior-of-x-equals-null-for-platform-types" data-toc="whatsnew12#whatsnew12.md-breaking-change-consistent-behavior-of-x-equals-null-for-platform-types"  >Breaking change: consistent behavior of x.equals(null) for platform types</h3><p id="whatsnew12.md-73858960" >Calling <code class="code " id="whatsnew12.md-9075104"  >x.equals(null)</code> on a platform type that is mapped to a Java primitive (<code class="code " id="whatsnew12.md-45708a63"  >Int!</code>, <code class="code " id="whatsnew12.md-2ca77046"  >Boolean!</code>, <code class="code " id="whatsnew12.md-5f17e16f"  >Short</code> !, <code class="code " id="whatsnew12.md-10375922"  >Long!</code>, <code class="code " id="whatsnew12.md-12333746"  >Float!</code>, <code class="code " id="whatsnew12.md-9619276"  >Double!</code>, <code class="code " id="whatsnew12.md-2ed4e18"  >Char!</code>) incorrectly returned <code class="code " id="whatsnew12.md-41c84b49"  >true</code> when <code class="code " id="whatsnew12.md-6c96031e"  >x</code> was null. Starting with Kotlin 1.2, calling <code class="code " id="whatsnew12.md-ae06c25b"  >x.equals(...)</code> on a null value of a platform type <b id="whatsnew12.md-83d14a29" class=""  >throws an NPE</b> (but <code class="code " id="whatsnew12.md-4c3c6bee"  >x == ...</code> does not).</p><p id="whatsnew12.md-5e2bc3bf" >To return to the pre-1.2 behavior, pass the flag <code class="code " id="whatsnew12.md-b3652d45"  >-Xno-exception-on-explicit-equals-for-boxed-null</code> to the compiler.</p></section><section class="chapter"  ><h3 id="whatsnew12.md-breaking-change-fix-for-platform-null-escaping-through-an-inlined-extension-receiver" data-toc="whatsnew12#whatsnew12.md-breaking-change-fix-for-platform-null-escaping-through-an-inlined-extension-receiver"  >Breaking change: fix for platform null escaping through an inlined extension receiver</h3><p id="whatsnew12.md-72c562aa" >Inline extension functions that were called on a null value of a platform type did not check the receiver for null and would thus allow null to escape into the other code. Kotlin 1.2 forces this check at the call sites, throwing an exception if the receiver is null.</p><p id="whatsnew12.md-d488e4af" >To switch to the old behavior, pass the fallback flag <code class="code " id="whatsnew12.md-a3032435"  >-Xno-receiver-assertions</code> to the compiler.</p></section></section><section class="chapter"  ><h2 id="whatsnew12.md-javascript-backend" data-toc="whatsnew12#whatsnew12.md-javascript-backend"  >JavaScript backend</h2><section class="chapter"  ><h3 id="whatsnew12.md-typedarrays-support-enabled-by-default" data-toc="whatsnew12#whatsnew12.md-typedarrays-support-enabled-by-default"  >TypedArrays support enabled by default</h3><p id="whatsnew12.md-cc16861b" >The JS typed arrays support that translates Kotlin primitive arrays, such as <code class="code " id="whatsnew12.md-8541b664"  >IntArray</code>, <code class="code " id="whatsnew12.md-e1cca783"  >DoubleArray</code>, into <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays" id="whatsnew12.md-629619e7"   data-external="true" rel="noopener noreferrer" >JavaScript typed arrays</a>, that was previously an opt-in feature, has been enabled by default.</p></section></section><section class="chapter"  ><h2 id="whatsnew12.md-tools" data-toc="whatsnew12#whatsnew12.md-tools"  >Tools</h2><section class="chapter"  ><h3 id="whatsnew12.md-warnings-as-errors" data-toc="whatsnew12#whatsnew12.md-warnings-as-errors"  >Warnings as errors</h3><p id="whatsnew12.md-dae33db2" >The compiler now provides an option to treat all warnings as errors. Use <code class="code " id="whatsnew12.md-77f69a2"  >-Werror</code> on the command line, or the following Gradle snippet:</p><div class="code-block" data-lang="groovy" id="whatsnew12.md-1bb5d132"         >compileKotlin {\n    kotlinOptions.allWarningsAsErrors = true\n}\n</div></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="whatsnew11.md"  >What\'s new in Kotlin 1.1</h1><section class="chapter"  ><h2 id="whatsnew11.md-table-of-contents" data-toc="whatsnew11#whatsnew11.md-table-of-contents"  >Table of contents</h2><ul class="list _ul" id="whatsnew11.md-31b9697e"   ><li class="list__item" id="whatsnew11.md-325907f8" ><a href="#whatsnew11.md-coroutines-experimental" id="whatsnew11.md-fbb06c62"   >Coroutines</a></li><li class="list__item" id="whatsnew11.md-1610123b" ><a href="#whatsnew11.md-other-language-features" id="whatsnew11.md-66b63f08"   >Other language features</a></li><li class="list__item" id="whatsnew11.md-f08e34f0" ><a href="#whatsnew11.md-standard-library" id="whatsnew11.md-566a40d7"   >Standard library</a></li><li class="list__item" id="whatsnew11.md-eb15fce" ><a href="#whatsnew11.md-jvm-backend" id="whatsnew11.md-2dff4bc5"   >JVM backend</a></li><li class="list__item" id="whatsnew11.md-3928769b" ><a href="#whatsnew11.md-javascript-backend" id="whatsnew11.md-b8260824"   >JavaScript backend</a></li></ul></section><section class="chapter"  ><h2 id="whatsnew11.md-javascript" data-toc="whatsnew11#whatsnew11.md-javascript"  >JavaScript</h2><p id="whatsnew11.md-87a8a986" >Starting with Kotlin 1.1, the JavaScript target is no longer considered experimental. All language features are supported, and there are many new tools for integration with the frontend development environment. See <a href="#whatsnew11.md-javascript-backend" id="whatsnew11.md-217c844f"   >below</a> for a more detailed list of changes.</p></section><section class="chapter"  ><h2 id="whatsnew11.md-coroutines-experimental" data-toc="whatsnew11#whatsnew11.md-coroutines-experimental"  >Coroutines (experimental)</h2><p id="whatsnew11.md-29c8e138" >The key new feature in Kotlin 1.1 is <em id="whatsnew11.md-9e47e7d7" class=""  >coroutines</em>, bringing the support of <code class="code " id="whatsnew11.md-cdd23831"  >async</code>/ <code class="code " id="whatsnew11.md-ed4231d"  >await</code>, <code class="code " id="whatsnew11.md-df8520c3"  >yield</code>, and similar programming patterns. The key feature of Kotlin\'s design is that the implementation of coroutine execution is part of the libraries, not the language, so you aren\'t bound to any specific programming paradigm or concurrency library.</p><p id="whatsnew11.md-f6120171" >A coroutine is effectively a light-weight thread that can be suspended and resumed later. Coroutines are supported through <span id="64df80ca">${linkTitle}</span>: a call to such a function can potentially suspend a coroutine, and to start a new coroutine we usually use an anonymous suspending functions (i.e. suspending lambdas).</p><p id="whatsnew11.md-94576bb1" >Let\'s look at <code class="code " id="whatsnew11.md-e08b7ce5"  >async</code>/ <code class="code " id="whatsnew11.md-7af3ba47"  >await</code> which is implemented in an external library, <a href="https://github.com/kotlin/kotlinx.coroutines" id="whatsnew11.md-17c36bff"   data-external="true" rel="noopener noreferrer" >kotlinx.coroutines</a>:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-f985ed1f"         >// runs the code in the background thread pool\nfun asyncOverlay() = async(CommonPool) {\n    // start two async operations\n    val original = asyncLoadImage(&quot;original&quot;)\n    val overlay = asyncLoadImage(&quot;overlay&quot;)\n    // and then apply overlay to both results\n    applyOverlay(original.await(), overlay.await())\n}\n\n// launches new coroutine in UI context\nlaunch(UI) {\n    // wait for async overlay to complete\n    val image = asyncOverlay().await()\n    // and then show it in UI\n    showImage(image)\n}\n</div><p id="whatsnew11.md-6f24fd9c" >Here, <code class="code " id="whatsnew11.md-2929cfa3"  >async { ... }</code> starts a coroutine and, when we use <code class="code " id="whatsnew11.md-65fd56c5"  >await()</code>, the execution of the coroutine is suspended while the operation being awaited is executed, and is resumed (possibly on a different thread) when the operation being awaited completes.</p><p id="whatsnew11.md-c17c9b9b" >The standard library uses coroutines to support <em id="whatsnew11.md-d2e3fb56" class=""  >lazily generated sequences</em> with <code class="code " id="whatsnew11.md-1493c89b"  >yield</code> and <code class="code " id="whatsnew11.md-9a661dc6"  >yieldAll</code> functions. In such a sequence, the block of code that returns sequence elements is suspended after each element has been retrieved, and resumed when the next element is requested. Here\'s an example:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-df22194c"        data-runnable="true" data-min-compiler-version="1.3"  >import kotlin.coroutines.experimental.*\n\nfun main(args: Array&lt;String&gt;) {\n//sampleStart\n    val seq = buildSequence {\n      for (i in 1..5) {\n          // yield a square of i\n          yield(i * i)\n      }\n      // yield a range\n      yieldAll(26..28)\n    }\n\n    // print the sequence\n  println(seq.toList())\n//sampleEnd\n}\n</div><p id="whatsnew11.md-afa34b8" >Run the code above to see the result. Feel free to edit it and run again!</p><p id="whatsnew11.md-ab152ea6" >For more information, please refer to the <a href="#coroutines-overview.md" id="whatsnew11.md-d9397d3f"   >coroutines documentation</a> and <span id="8b0f454a">${linkTitle}</span>.</p><p id="whatsnew11.md-9d813bc8" >Note that coroutines are currently considered an <b id="whatsnew11.md-70a00cc2" class=""  >experimental feature</b>, meaning that the Kotlin team is not committing to supporting the backwards compatibility of this feature after the final 1.1 release.</p></section><section class="chapter"  ><h2 id="whatsnew11.md-other-language-features" data-toc="whatsnew11#whatsnew11.md-other-language-features"  >Other language features</h2><section class="chapter"  ><h3 id="whatsnew11.md-type-aliases" data-toc="whatsnew11#whatsnew11.md-type-aliases"  >Type aliases</h3><p id="whatsnew11.md-43292066" >A type alias allows you to define an alternative name for an existing type. This is most useful for generic types such as collections, as well as for function types. Here is an example:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-ebd83a62"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\ntypealias OscarWinners = Map&lt;String, String&gt;\n\nfun countLaLaLand(oscarWinners: OscarWinners) =\n        oscarWinners.count { it.value.contains(&quot;La La Land&quot;) }\n\n// Note that the type names (initial and the type alias) are interchangeable:\nfun checkLaLaLandIsTheBestMovie(oscarWinners: Map&lt;String, String&gt;) =\n        oscarWinners[&quot;Best picture&quot;] == &quot;La La Land&quot;\n//sampleEnd\n\nfun oscarWinners(): OscarWinners {\n    return mapOf(\n            &quot;Best song&quot; to &quot;City of Stars (La La Land)&quot;,\n            &quot;Best actress&quot; to &quot;Emma Stone (La La Land)&quot;,\n            &quot;Best picture&quot; to &quot;Moonlight&quot; /* ... */)\n}\n\nfun main(args: Array&lt;String&gt;) {\n    val oscarWinners = oscarWinners()\n\n    val laLaLandAwards = countLaLaLand(oscarWinners)\n    println(&quot;LaLaLandAwards = $laLaLandAwards (in our small example), but actually it\'s 6.&quot;)\n\n    val laLaLandIsTheBestMovie = checkLaLaLandIsTheBestMovie(oscarWinners)\n    println(&quot;LaLaLandIsTheBestMovie = $laLaLandIsTheBestMovie&quot;)\n}\n</div><p id="whatsnew11.md-48d05623" >See the <a href="#type-aliases.md" id="whatsnew11.md-312b205"   >documentation</a> and <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/type-aliases.md" id="whatsnew11.md-627038aa"   data-external="true" rel="noopener noreferrer" >KEEP</a> for more details.</p></section><section class="chapter"  ><h3 id="whatsnew11.md-bound-callable-references" data-toc="whatsnew11#whatsnew11.md-bound-callable-references"  >Bound callable references</h3><p id="whatsnew11.md-e3209960" >You can now use the <code class="code " id="whatsnew11.md-b4950686"  >::</code> operator to get a <a href="#reflection.md-function-references" id="whatsnew11.md-d6c6b518"   >member reference</a> pointing to a method or property of a specific object instance. Previously this could only be expressed with a lambda. Here\'s an example:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-8531493a"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nval numberRegex = &quot;\\\\d+&quot;.toRegex()\nval numbers = listOf(&quot;abc&quot;, &quot;123&quot;, &quot;456&quot;).filter(numberRegex::matches)\n//sampleEnd\n\nfun main(args: Array&lt;String&gt;) {\n    println(&quot;Result is $numbers&quot;)\n}\n</div><p id="whatsnew11.md-1316cf5d" >Read the <a href="#reflection.md" id="whatsnew11.md-4c9f6409"   >documentation</a> and <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/bound-callable-references.md" id="whatsnew11.md-92c8dcc8"   data-external="true" rel="noopener noreferrer" >KEEP</a> for more details.</p></section><section class="chapter"  ><h3 id="whatsnew11.md-sealed-and-data-classes" data-toc="whatsnew11#whatsnew11.md-sealed-and-data-classes"  >Sealed and data classes</h3><p id="whatsnew11.md-2c152426" >Kotlin 1.1 removes some of the restrictions on sealed and data classes that were present in Kotlin 1.0. Now you can define subclasses of a top-level sealed class on the top level in the same file, and not just as nested classes of the sealed class. Data classes can now extend other classes. This can be used to define a hierarchy of expression classes nicely and cleanly:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-f3c7dd89"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nsealed class Expr\n\ndata class Const(val number: Double) : Expr()\ndata class Sum(val e1: Expr, val e2: Expr) : Expr()\nobject NotANumber : Expr()\n\nfun eval(expr: Expr): Double = when (expr) {\n    is Const -&gt; expr.number\n    is Sum -&gt; eval(expr.e1) + eval(expr.e2)\n    NotANumber -&gt; Double.NaN\n}\nval e = eval(Sum(Const(1.0), Const(2.0)))\n//sampleEnd\n\nfun main(args: Array&lt;String&gt;) {\n    println(&quot;e is $e&quot;) // 3.0\n}\n</div><p id="whatsnew11.md-2c47abad" >Read the <a href="#sealed-classes.md" id="whatsnew11.md-231fc2b"   >documentation</a> or KEEPs for <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/sealed-class-inheritance.md" id="whatsnew11.md-dad07307"   data-external="true" rel="noopener noreferrer" >sealed class</a> and <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/data-class-inheritance.md" id="whatsnew11.md-c3e4c070"   data-external="true" rel="noopener noreferrer" >data class</a> for more detail.</p></section><section class="chapter"  ><h3 id="whatsnew11.md-destructuring-in-lambdas" data-toc="whatsnew11#whatsnew11.md-destructuring-in-lambdas"  >Destructuring in lambdas</h3><p id="whatsnew11.md-2e04e8ab" >You can now use the <a href="#destructuring-declarations.md" id="whatsnew11.md-a526a418"   >destructuring declaration</a> syntax to unpack the arguments passed to a lambda. Here\'s an example:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-bd607d63"        data-runnable="true" data-min-compiler-version="1.3"  >fun main(args: Array&lt;String&gt;) {\n//sampleStart\n    val map = mapOf(1 to &quot;one&quot;, 2 to &quot;two&quot;)\n    // before\n    println(map.mapValues { entry -&gt;\n      val (key, value) = entry\n      &quot;$key -&gt; $value!&quot;\n    })\n    // now\n    println(map.mapValues { (key, value) -&gt; &quot;$key -&gt; $value!&quot; })\n//sampleEnd\n}\n</div><p id="whatsnew11.md-1a10c090" >Read the <a href="#destructuring-declarations.md" id="whatsnew11.md-c69a3b73"   >documentation</a> and <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/destructuring-in-parameters.md" id="whatsnew11.md-a09bf7d9"   data-external="true" rel="noopener noreferrer" >KEEP</a> for more details.</p></section><section class="chapter"  ><h3 id="whatsnew11.md-underscores-for-unused-parameters" data-toc="whatsnew11#whatsnew11.md-underscores-for-unused-parameters"  >Underscores for unused parameters</h3><p id="whatsnew11.md-c3e37155" >For a lambda with multiple parameters, you can use the <code class="code " id="whatsnew11.md-406bb82c"  >_</code> character to replace the names of the parameters you don\'t use:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-71230cf1"        data-runnable="true" data-min-compiler-version="1.3"  >fun main(args: Array&lt;String&gt;) {\n    val map = mapOf(1 to &quot;one&quot;, 2 to &quot;two&quot;)\n\n//sampleStart\n    map.forEach { _, value -&gt; println(&quot;$value!&quot;) }\n//sampleEnd\n}\n</div><p id="whatsnew11.md-f048991f" >This also works in <a href="#destructuring-declarations.md" id="whatsnew11.md-771a126d"   >destructuring declarations</a>:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-251a625f"        data-runnable="true" data-min-compiler-version="1.3"  >data class Result(val value: Any, val status: String)\n\nfun getResult() = Result(42, &quot;ok&quot;).also { println(&quot;getResult() returns $it&quot;) }\n\nfun main(args: Array&lt;String&gt;) {\n//sampleStart\n    val (_, status) = getResult()\n//sampleEnd\n    println(&quot;status is \'$status\'&quot;)\n}\n</div><p id="whatsnew11.md-ce98b211" >Read the <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/underscore-for-unused-parameters.md" id="whatsnew11.md-1923df35"   data-external="true" rel="noopener noreferrer" >KEEP</a> for more details.</p></section><section class="chapter"  ><h3 id="whatsnew11.md-underscores-in-numeric-literals" data-toc="whatsnew11#whatsnew11.md-underscores-in-numeric-literals"  >Underscores in numeric literals</h3><p id="whatsnew11.md-401af2d4" >Just as in Java 8, Kotlin now allows to use underscores in numeric literals to separate groups of digits:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-cc1c0773"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nval oneMillion = 1_000_000\nval hexBytes = 0xFF_EC_DE_5E\nval bytes = 0b11010010_01101001_10010100_10010010\n//sampleEnd\n\nfun main(args: Array&lt;String&gt;) {\n    println(oneMillion)\n    println(hexBytes.toString(16))\n    println(bytes.toString(2))\n}\n</div><p id="whatsnew11.md-cc104385" >Read the <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/underscores-in-numeric-literals.md" id="whatsnew11.md-e244cd78"   data-external="true" rel="noopener noreferrer" >KEEP</a> for more details.</p></section><section class="chapter"  ><h3 id="whatsnew11.md-shorter-syntax-for-properties" data-toc="whatsnew11#whatsnew11.md-shorter-syntax-for-properties"  >Shorter syntax for properties</h3><p id="whatsnew11.md-3b9d9ab4" >For properties with the getter defined as an expression body, the property type can now be omitted:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-d3de1a73"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\n    data class Person(val name: String, val age: Int) {\n    val isAdult get() = age &gt;= 20 // Property type inferred to be \'Boolean\'\n}\n//sampleEnd\nfun main(args: Array&lt;String&gt;) {\n    val akari = Person(&quot;Akari&quot;, 26)\n    println(&quot;$akari.isAdult = ${akari.isAdult}&quot;)\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew11.md-inline-property-accessors" data-toc="whatsnew11#whatsnew11.md-inline-property-accessors"  >Inline property accessors</h3><p id="whatsnew11.md-5197adc5" >You can now mark property accessors with the <code class="code " id="whatsnew11.md-a1157d07"  >inline</code> modifier if the properties don\'t have a backing field. Such accessors are compiled in the same way as <a href="#inline-functions.md" id="whatsnew11.md-66c641d6"   >inline functions</a>.</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-ebf39bfe"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\npublic val &lt;T&gt; List&lt;T&gt;.lastIndex: Int\n    inline get() = this.size - 1\n//sampleEnd\n\nfun main(args: Array&lt;String&gt;) {\n    val list = listOf(\'a\', \'b\')\n    // the getter will be inlined\n    println(&quot;Last index of $list is ${list.lastIndex}&quot;)\n}\n</div><p id="whatsnew11.md-84853d57" >You can also mark the entire property as <code class="code " id="whatsnew11.md-33e6edb6"  >inline</code>- then the modifier is applied to both accessors.</p><p id="whatsnew11.md-56c0ff8b" >Read the <a href="#inline-functions.md-inline-properties" id="whatsnew11.md-4d5f565d"   >documentation</a> and <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/inline-properties.md" id="whatsnew11.md-6b7d2b50"   data-external="true" rel="noopener noreferrer" >KEEP</a> for more details.</p></section><section class="chapter"  ><h3 id="whatsnew11.md-local-delegated-properties" data-toc="whatsnew11#whatsnew11.md-local-delegated-properties"  >Local delegated properties</h3><p id="whatsnew11.md-d63c7247" >You can now use the <a href="#delegated-properties.md" id="whatsnew11.md-380594d0"   >delegated property</a> syntax with local variables. One possible use is defining a lazily evaluated local variable:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-e33d46d8"        data-runnable="true" data-min-compiler-version="1.3"  >import java.util.Random\n\nfun needAnswer() = Random().nextBoolean()\n\nfun main(args: Array&lt;String&gt;) {\n//sampleStart\n    val answer by lazy {\n        println(&quot;Calculating the answer...&quot;)\n        42\n    }\n    if (needAnswer()) {                     // returns the random value\n        println(&quot;The answer is $answer.&quot;)   // answer is calculated at this point\n    }\n    else {\n        println(&quot;Sometimes no answer is the answer...&quot;)\n    }\n//sampleEnd\n}\n</div><p id="whatsnew11.md-64a4ee19" >Read the <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/local-delegated-properties.md" id="whatsnew11.md-fbe52bdb"   data-external="true" rel="noopener noreferrer" >KEEP</a> for more details.</p></section><section class="chapter"  ><h3 id="whatsnew11.md-interception-of-delegated-property-binding" data-toc="whatsnew11#whatsnew11.md-interception-of-delegated-property-binding"  >Interception of delegated property binding</h3><p id="whatsnew11.md-640b34ac" >For <a href="#delegated-properties.md" id="whatsnew11.md-288c844"   >delegated properties</a>, it is now possible to intercept delegate to property binding using the <code class="code " id="whatsnew11.md-7b45276"  >provideDelegate</code> operator. For example, if we want to check the property name before binding, we can write something like this:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-766d48a5"         >class ResourceLoader&lt;T&gt;(id: ResourceID&lt;T&gt;) {\n    operator fun provideDelegate(thisRef: MyUI, prop: KProperty&lt;*&gt;): ReadOnlyProperty&lt;MyUI, T&gt; {\n        checkProperty(thisRef, prop.name)\n        ... // property creation\n    }\n\n    private fun checkProperty(thisRef: MyUI, name: String) { ... }\n}\n\nfun &lt;T&gt; bindResource(id: ResourceID&lt;T&gt;): ResourceLoader&lt;T&gt; { ... }\n\nclass MyUI {\n    val image by bindResource(ResourceID.image_id)\n    val text by bindResource(ResourceID.text_id)\n}\n</div><p id="whatsnew11.md-f6c5eedd" >The <code class="code " id="whatsnew11.md-458252e0"  >provideDelegate</code> method will be called for each property during the creation of a <code class="code " id="whatsnew11.md-aa10a0c4"  >MyUI</code> instance, and it can perform the necessary validation right away.</p><p id="whatsnew11.md-6ad7f9e1" >Read the <a href="#delegated-properties.md" id="whatsnew11.md-d6bda0b3"   >documentation</a> for more details.</p></section><section class="chapter"  ><h3 id="whatsnew11.md-generic-enum-value-access" data-toc="whatsnew11#whatsnew11.md-generic-enum-value-access"  >Generic enum value access</h3><p id="whatsnew11.md-6410e562" >It is now possible to enumerate the values of an enum class in a generic way.</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-3b1e5282"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nenum class RGB { RED, GREEN, BLUE }\n\ninline fun &lt;reified T : Enum&lt;T&gt;&gt; printAllValues() {\n    print(enumValues&lt;T&gt;().joinToString { it.name })\n}\n//sampleEnd\n\nfun main(args: Array&lt;String&gt;) {\n    printAllValues&lt;RGB&gt;() // prints RED, GREEN, BLUE\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew11.md-scope-control-for-implicit-receivers-in-dsls" data-toc="whatsnew11#whatsnew11.md-scope-control-for-implicit-receivers-in-dsls"  >Scope control for implicit receivers in DSLs</h3><p id="whatsnew11.md-572e5504" >The <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-dsl-marker/index.html" id="whatsnew11.md-2528903a"   data-external="true" rel="noopener noreferrer" ><code class="code " id="whatsnew11.md-13a86b4c"  >@DslMarker</code></a> annotation allows to restrict the use of receivers from outer scopes in a DSL context. Consider the canonical <a href="#type-safe-builders.md" id="whatsnew11.md-c6ba1c12"   >HTML builder example</a>:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-577e9435"         >table {\n    tr {\n        td { + &quot;Text&quot; }\n    }\n}\n</div><p id="whatsnew11.md-f572159e" >In Kotlin 1.0, code in the lambda passed to <code class="code " id="whatsnew11.md-7ffb483"  >td</code> has access to three implicit receivers: the one passed to <code class="code " id="whatsnew11.md-d3924ebf"  >table</code>, to <code class="code " id="whatsnew11.md-73aa69fb"  >tr</code> and to <code class="code " id="whatsnew11.md-f37f6cb"  >td</code>. This allows you to call methods that make no sense in the context - for example to call <code class="code " id="whatsnew11.md-df75d221"  >tr</code> inside <code class="code " id="whatsnew11.md-8725d701"  >td</code> and thus to put a <code class="code " id="whatsnew11.md-6a1a5c36"  >&lt;tr&gt;</code> tag in a <code class="code " id="whatsnew11.md-d14f5954"  >&lt;td&gt;</code>.</p><p id="whatsnew11.md-f3afec89" >In Kotlin 1.1, you can restrict that, so that only methods defined on the implicit receiver of <code class="code " id="whatsnew11.md-f9be5b00"  >td</code> will be available inside the lambda passed to <code class="code " id="whatsnew11.md-c2575a53"  >td</code>. You do that by defining your annotation marked with the <code class="code " id="whatsnew11.md-aa0c6e95"  >@DslMarker</code> meta-annotation and applying it to the base class of the tag classes.</p><p id="whatsnew11.md-ddf5e6bc" >Read the <a href="#type-safe-builders.md" id="whatsnew11.md-360f3d56"   >documentation</a> and <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/scope-control-for-implicit-receivers.md" id="whatsnew11.md-4eb02bb"   data-external="true" rel="noopener noreferrer" >KEEP</a> for more details.</p></section><section class="chapter"  ><h3 id="whatsnew11.md-rem-operator" data-toc="whatsnew11#whatsnew11.md-rem-operator"  >rem operator</h3><p id="whatsnew11.md-ff163e1a" >The <code class="code " id="whatsnew11.md-c06562ea"  >mod</code> operator is now deprecated, and <code class="code " id="whatsnew11.md-ca7b8819"  >rem</code> is used instead. See <a href="https://youtrack.jetbrains.com/issue/KT-14650" id="whatsnew11.md-86fa4b8c"   data-external="true" rel="noopener noreferrer" >this issue</a> for motivation.</p></section></section><section class="chapter"  ><h2 id="whatsnew11.md-standard-library" data-toc="whatsnew11#whatsnew11.md-standard-library"  >Standard library</h2><section class="chapter"  ><h3 id="whatsnew11.md-string-to-number-conversions" data-toc="whatsnew11#whatsnew11.md-string-to-number-conversions"  >String to number conversions</h3><p id="whatsnew11.md-6fc23242" >There is a bunch of new extensions on the String class to convert it to a number without throwing an exception on invalid number: <code class="code " id="whatsnew11.md-a677fc4c"  >String.toIntOrNull(): Int?</code>, <code class="code " id="whatsnew11.md-a1a10417"  >String.toDoubleOrNull(): Double?</code> etc.</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-ff15828a"         >val port = System.getenv(&quot;PORT&quot;)?.toIntOrNull() ?: 80\n</div><p id="whatsnew11.md-9e894b1f" >Also integer conversion functions, like <code class="code " id="whatsnew11.md-39d2ca30"  >Int.toString()</code>, <code class="code " id="whatsnew11.md-9ce70063"  >String.toInt()</code>, <code class="code " id="whatsnew11.md-f3d857"  >String.toIntOrNull()</code>, each got an overload with <code class="code " id="whatsnew11.md-cae31ba0"  >radix</code> parameter, which allows to specify the base of conversion (2 to 36).</p></section><section class="chapter"  ><h3 id="whatsnew11.md-oneach" data-toc="whatsnew11#whatsnew11.md-oneach"  >onEach()</h3><p id="whatsnew11.md-99228055" ><code class="code " id="whatsnew11.md-7ab38e10"  >onEach</code> is a small, but useful extension function for collections and sequences, which allows to perform some action, possibly with side-effects, on each element of the collection/sequence in a chain of operations. On iterables it behaves like <code class="code " id="whatsnew11.md-e67feae2"  >forEach</code> but also returns the iterable instance further. And on sequences it returns a wrapping sequence, which applies the given action lazily as the elements are being iterated.</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-8af0f4f2"         >inputDir.walk()\n        .filter { it.isFile &amp;&amp; it.name.endsWith(&quot;.txt&quot;) }\n        .onEach { println(&quot;Moving $it to $outputDir&quot;) }\n        .forEach { moveFile(it, File(outputDir, it.toRelativeString(inputDir))) }\n</div></section><section class="chapter"  ><h3 id="whatsnew11.md-also-takeif-and-takeunless" data-toc="whatsnew11#whatsnew11.md-also-takeif-and-takeunless"  >also(), takeIf(), and takeUnless()</h3><p id="whatsnew11.md-e728c078" >These are three general-purpose extension functions applicable to any receiver.</p><p id="whatsnew11.md-42d2343c" ><code class="code " id="whatsnew11.md-a8fe031d"  >also</code> is like <code class="code " id="whatsnew11.md-9625e422"  >apply</code>: it takes the receiver, does some action on it, and returns that receiver. The difference is that in the block inside <code class="code " id="whatsnew11.md-8d54712e"  >apply</code> the receiver is available as <code class="code " id="whatsnew11.md-62c36050"  >this</code>, while in the block inside <code class="code " id="whatsnew11.md-c46bf9f2"  >also</code> it\'s available as <code class="code " id="whatsnew11.md-65be6606"  >it</code> (and you can give it another name if you want). This comes handy when you do not want to shadow <code class="code " id="whatsnew11.md-a8882df4"  >this</code> from the outer scope:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-f15c1685"        data-runnable="true" data-min-compiler-version="1.3"  >class Block {\n    lateinit var content: String\n}\n\n//sampleStart\nfun Block.copy() = Block().also {\n    it.content = this.content\n}\n//sampleEnd\n\n// using \'apply\' instead\nfun Block.copy1() = Block().apply {\n    this.content = this@copy1.content\n}\n\nfun main(args: Array&lt;String&gt;) {\n    val block = Block().apply { content = &quot;content&quot; }\n    val copy = block.copy()\n    println(&quot;Testing the content was copied:&quot;)\n    println(block.content == copy.content)\n}\n</div><p id="whatsnew11.md-acc5f877" ><code class="code " id="whatsnew11.md-2fa4f55d"  >takeIf</code> is like <code class="code " id="whatsnew11.md-754f2484"  >filter</code> for a single value. It checks whether the receiver meets the predicate, and returns the receiver, if it does or <code class="code " id="whatsnew11.md-2191a6a9"  >null</code> if it doesn\'t. Combined with an elvis operator (?:) and early returns it allows writing constructs like:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-4fda875f"         >val outDirFile = File(outputDir.path).takeIf { it.exists() } ?: return false\n// do something with existing outDirFile\n</div><div class="code-block" data-lang="kotlin" id="whatsnew11.md-8a8ed735"        data-runnable="true" data-min-compiler-version="1.3"  >fun main(args: Array&lt;String&gt;) {\n    val input = &quot;Kotlin&quot;\n    val keyword = &quot;in&quot;\n\n//sampleStart\n    val index = input.indexOf(keyword).takeIf { it &gt;= 0 } ?: error(&quot;keyword not found&quot;)\n    // do something with index of keyword in input string, given that it\'s found\n//sampleEnd\n    \n    println(&quot;\'$keyword\' was found in \'$input\'&quot;)\n    println(input)\n    println(&quot; &quot;.repeat(index) + &quot;^&quot;)\n}\n</div><p id="whatsnew11.md-33f1f369" ><code class="code " id="whatsnew11.md-a7c56922"  >takeUnless</code> is the same as <code class="code " id="whatsnew11.md-fa0ba1b3"  >takeIf</code>, but it takes the inverted predicate. It returns the receiver when it <em id="whatsnew11.md-a0eec98c" class=""  >doesn\'t</em> meet the predicate and <code class="code " id="whatsnew11.md-19e25dd5"  >null</code> otherwise. So one of the examples above could be rewritten with <code class="code " id="whatsnew11.md-e7a0c833"  >takeUnless</code> as following:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-1001bec2"         >val index = input.indexOf(keyword).takeUnless { it &lt; 0 } ?: error(&quot;keyword not found&quot;)\n</div><p id="whatsnew11.md-e211783a" >It is also convenient to use when you have a callable reference instead of the lambda:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-c60de8b2"        data-runnable="true" data-min-compiler-version="1.3"  >private fun testTakeUnless(string: String) {\n//sampleStart\n    val result = string.takeUnless(String::isEmpty)\n//sampleEnd\n\n    println(&quot;string = \\&quot;$string\\&quot;; result = \\&quot;$result\\&quot;&quot;)\n}\n\nfun main(args: Array&lt;String&gt;) {\n    testTakeUnless(&quot;&quot;)\n    testTakeUnless(&quot;abc&quot;)\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew11.md-groupingby" data-toc="whatsnew11#whatsnew11.md-groupingby"  >groupingBy()</h3><p id="whatsnew11.md-dad2197d" >This API can be used to group a collection by key and fold each group simultaneously. For example, it can be used to count the number of words starting with each letter:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-f6310756"        data-runnable="true" data-min-compiler-version="1.3"  >fun main(args: Array&lt;String&gt;) {\n    val words = &quot;one two three four five six seven eight nine ten&quot;.split(\' \')\n//sampleStart\n    val frequencies = words.groupingBy { it.first() }.eachCount()\n//sampleEnd\n    println(&quot;Counting first letters: $frequencies.&quot;)\n\n    // The alternative way that uses \'groupBy\' and \'mapValues\' creates an intermediate map, \n    // while \'groupingBy\' way counts on the fly.\n    val groupBy = words.groupBy { it.first() }.mapValues { (_, list) -&gt; list.size }\n    println(&quot;Comparing the result with using \'groupBy\': ${groupBy == frequencies}.&quot;)\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew11.md-map-tomap-and-map-tomutablemap" data-toc="whatsnew11#whatsnew11.md-map-tomap-and-map-tomutablemap"  >Map.toMap() and Map.toMutableMap()</h3><p id="whatsnew11.md-6791dc0d" >These functions can be used for easy copying of maps:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-ee14b4f6"         >class ImmutablePropertyBag(map: Map&lt;String, Any&gt;) {\n    private val mapCopy = map.toMap()\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew11.md-map-minus-key" data-toc="whatsnew11#whatsnew11.md-map-minus-key"  >Map.minus(key)</h3><p id="whatsnew11.md-36ff0bc9" >The operator <code class="code " id="whatsnew11.md-30602a28"  >plus</code> provides a way to add key-value pair(s) to a read-only map producing a new map, however there was not a simple way to do the opposite: to remove a key from the map you have to resort to less straightforward ways to like <code class="code " id="whatsnew11.md-f791e835"  >Map.filter()</code> or <code class="code " id="whatsnew11.md-cc632b3b"  >Map.filterKeys()</code>. Now the operator <code class="code " id="whatsnew11.md-e349ad04"  >minus</code> fills this gap. There are 4 overloads available: for removing a single key, a collection of keys, a sequence of keys and an array of keys.</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-f2638395"        data-runnable="true" data-min-compiler-version="1.3"  >fun main(args: Array&lt;String&gt;) {\n//sampleStart\n    val map = mapOf(&quot;key&quot; to 42)\n    val emptyMap = map - &quot;key&quot;\n//sampleEnd\n    \n    println(&quot;map: $map&quot;)\n    println(&quot;emptyMap: $emptyMap&quot;)\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew11.md-minof-and-maxof" data-toc="whatsnew11#whatsnew11.md-minof-and-maxof"  >minOf() and maxOf()</h3><p id="whatsnew11.md-7c0629e2" >These functions can be used to find the lowest and greatest of two or three given values, where values are primitive numbers or <code class="code " id="whatsnew11.md-40024c8e"  >Comparable</code> objects. There is also an overload of each function that take an additional <code class="code " id="whatsnew11.md-8114c8a"  >Comparator</code> instance if you want to compare objects that are not comparable themselves.</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-af368c90"        data-runnable="true" data-min-compiler-version="1.3"  >fun main(args: Array&lt;String&gt;) {\n//sampleStart\n    val list1 = listOf(&quot;a&quot;, &quot;b&quot;)\n    val list2 = listOf(&quot;x&quot;, &quot;y&quot;, &quot;z&quot;)\n    val minSize = minOf(list1.size, list2.size)\n    val longestList = maxOf(list1, list2, compareBy { it.size })\n//sampleEnd\n    \n    println(&quot;minSize = $minSize&quot;)\n    println(&quot;longestList = $longestList&quot;)\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew11.md-array-like-list-instantiation-functions" data-toc="whatsnew11#whatsnew11.md-array-like-list-instantiation-functions"  >Array-like List instantiation functions</h3><p id="whatsnew11.md-ab293e2b" >Similar to the <code class="code " id="whatsnew11.md-a7dbbc86"  >Array</code> constructor, there are now functions that create <code class="code " id="whatsnew11.md-2e68bda7"  >List</code> and <code class="code " id="whatsnew11.md-87c8c4da"  >MutableList</code> instances and initialize each element by calling a lambda:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-4f164231"        data-runnable="true" data-min-compiler-version="1.3"  >fun main(args: Array&lt;String&gt;) {\n//sampleStart\n    val squares = List(10) { index -&gt; index * index }\n    val mutable = MutableList(10) { 0 }\n//sampleEnd\n\n    println(&quot;squares: $squares&quot;)\n    println(&quot;mutable: $mutable&quot;)\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew11.md-map-getvalue" data-toc="whatsnew11#whatsnew11.md-map-getvalue"  >Map.getValue()</h3><p id="whatsnew11.md-b96bd898" >This extension on <code class="code " id="whatsnew11.md-44fbe59"  >Map</code> returns an existing value corresponding to the given key or throws an exception, mentioning which key was not found. If the map was produced with <code class="code " id="whatsnew11.md-1e728c71"  >withDefault</code>, this function will return the default value instead of throwing an exception.</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-58d7a184"        data-runnable="true" data-min-compiler-version="1.3"  >fun main(args: Array&lt;String&gt;) {\n//sampleStart    \n    val map = mapOf(&quot;key&quot; to 42)\n    // returns non-nullable Int value 42\n    val value: Int = map.getValue(&quot;key&quot;)\n\n    val mapWithDefault = map.withDefault { k -&gt; k.length }\n    // returns 4\n    val value2 = mapWithDefault.getValue(&quot;key2&quot;)\n\n    // map.getValue(&quot;anotherKey&quot;) // &lt;- this will throw NoSuchElementException\n//sampleEnd\n    \n    println(&quot;value is $value&quot;)\n    println(&quot;value2 is $value2&quot;)\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew11.md-abstract-collections" data-toc="whatsnew11#whatsnew11.md-abstract-collections"  >Abstract collections</h3><p id="whatsnew11.md-e7ad70a9" >These abstract classes can be used as base classes when implementing Kotlin collection classes. For implementing read-only collections there are <code class="code " id="whatsnew11.md-7755865a"  >AbstractCollection</code>, <code class="code " id="whatsnew11.md-4a59a045"  >AbstractList</code>, <code class="code " id="whatsnew11.md-9829e6c5"  >AbstractSet</code> and <code class="code " id="whatsnew11.md-37aff4e5"  >AbstractMap</code>, and for mutable collections there are <code class="code " id="whatsnew11.md-3d26c25e"  >AbstractMutableCollection</code>, <code class="code " id="whatsnew11.md-66542e31"  >AbstractMutableList</code>, <code class="code " id="whatsnew11.md-5308728b"  >AbstractMutableSet</code> and <code class="code " id="whatsnew11.md-86022cce"  >AbstractMutableMap</code>. On JVM, these abstract mutable collections inherit most of their functionality from JDK\'s abstract collections.</p></section><section class="chapter"  ><h3 id="whatsnew11.md-array-manipulation-functions" data-toc="whatsnew11#whatsnew11.md-array-manipulation-functions"  >Array manipulation functions</h3><p id="whatsnew11.md-60e97f99" >The standard library now provides a set of functions for element-by-element operations on arrays: comparison (<code class="code " id="whatsnew11.md-ac54b428"  >contentEquals</code> and <code class="code " id="whatsnew11.md-f9143c8a"  >contentDeepEquals</code> ), hash code calculation (<code class="code " id="whatsnew11.md-8028cb97"  >contentHashCode</code> and <code class="code " id="whatsnew11.md-996dcb83"  >contentDeepHashCode</code> ), and conversion to a string (<code class="code " id="whatsnew11.md-d8581eae"  >contentToString</code> and <code class="code " id="whatsnew11.md-1d4302f2"  >contentDeepToString</code> ). They\'re supported both for the JVM (where they act as aliases for the corresponding functions in <code class="code " id="whatsnew11.md-c0f975b3"  >java.util.Arrays</code>) and for JS (where the implementation is provided in the Kotlin standard library).</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-9f620bdf"        data-runnable="true" data-min-compiler-version="1.3"  >fun main(args: Array&lt;String&gt;) {\n//sampleStart\n    val array = arrayOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)\n    println(array.toString())  // JVM implementation: type-and-hash gibberish\n    println(array.contentToString())  // nicely formatted as list\n//sampleEnd\n}\n</div></section></section><section class="chapter"  ><h2 id="whatsnew11.md-jvm-backend" data-toc="whatsnew11#whatsnew11.md-jvm-backend"  >JVM Backend</h2><section class="chapter"  ><h3 id="whatsnew11.md-java-8-bytecode-support" data-toc="whatsnew11#whatsnew11.md-java-8-bytecode-support"  >Java 8 bytecode support</h3><p id="whatsnew11.md-7f72da8a" >Kotlin has now the option of generating Java 8 bytecode (<code class="code " id="whatsnew11.md-ae478c14"  >-jvm-target 1.8</code> command line option or the corresponding options in Ant/Maven/Gradle). For now this doesn\'t change the semantics of the bytecode (in particular, default methods in interfaces and lambdas are generated exactly as in Kotlin 1.0), but we plan to make further use of this later.</p></section><section class="chapter"  ><h3 id="whatsnew11.md-java-8-standard-library-support" data-toc="whatsnew11#whatsnew11.md-java-8-standard-library-support"  >Java 8 standard library support</h3><p id="whatsnew11.md-3b280ba8" >There are now separate versions of the standard library supporting the new JDK APIs added in Java 7 and 8. If you need access to the new APIs, use <code class="code " id="whatsnew11.md-502652f8"  >kotlin-stdlib-jre7</code> and <code class="code " id="whatsnew11.md-6830cdb9"  >kotlin-stdlib-jre8</code> maven artifacts instead of the standard <code class="code " id="whatsnew11.md-ea09de4b"  >kotlin-stdlib</code>. These artifacts are tiny extensions on top of <code class="code " id="whatsnew11.md-23dd4e28"  >kotlin-stdlib</code> and they bring it to your project as a transitive dependency.</p></section><section class="chapter"  ><h3 id="whatsnew11.md-parameter-names-in-the-bytecode" data-toc="whatsnew11#whatsnew11.md-parameter-names-in-the-bytecode"  >Parameter names in the bytecode</h3><p id="whatsnew11.md-81ca342e" >Kotlin now supports storing parameter names in the bytecode. This can be enabled using the <code class="code " id="whatsnew11.md-3c476ba5"  >-java-parameters</code> command line option.</p></section><section class="chapter"  ><h3 id="whatsnew11.md-constant-inlining" data-toc="whatsnew11#whatsnew11.md-constant-inlining"  >Constant inlining</h3><p id="whatsnew11.md-bc909219" >The compiler now inlines values of <code class="code " id="whatsnew11.md-ed0b2f61"  >const val</code> properties into the locations where they are used.</p></section><section class="chapter"  ><h3 id="whatsnew11.md-mutable-closure-variables" data-toc="whatsnew11#whatsnew11.md-mutable-closure-variables"  >Mutable closure variables</h3><p id="whatsnew11.md-2b74dcb0" >The box classes used for capturing mutable closure variables in lambdas no longer have volatile fields. This change improves performance, but can lead to new race conditions in some rare usage scenarios. If you\'re affected by this, you need to provide your own synchronization for accessing the variables.</p></section><section class="chapter"  ><h3 id="whatsnew11.md-javax-script-support" data-toc="whatsnew11#whatsnew11.md-javax-script-support"  >javax.script support</h3><p id="whatsnew11.md-fd85897" >Kotlin now integrates with the <a href="https://docs.oracle.com/javase/8/docs/api/javax/script/package-summary.html" id="whatsnew11.md-7d2aa290"   data-external="true" rel="noopener noreferrer" >javax.script API</a> (JSR-223). The API allows to evaluate snippets of code at runtime:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-35a46593"         >val engine = ScriptEngineManager().getEngineByExtension(&quot;kts&quot;)!!\nengine.eval(&quot;val x = 3&quot;)\nprintln(engine.eval(&quot;x + 2&quot;))  // Prints out 5\n</div><p id="whatsnew11.md-132f748a" >See <a href="https://github.com/JetBrains/kotlin/tree/master/libraries/examples/kotlin-jsr223-local-example" id="whatsnew11.md-1b765069"   data-external="true" rel="noopener noreferrer" >here</a> for a larger example project using the API.</p></section><section class="chapter"  ><h3 id="whatsnew11.md-kotlin-reflect-full" data-toc="whatsnew11#whatsnew11.md-kotlin-reflect-full"  >kotlin.reflect.full</h3><p id="whatsnew11.md-4fbb5ff2" >To <a href="https://blog.jetbrains.com/kotlin/2017/01/kotlin-1-1-whats-coming-in-the-standard-library/" id="whatsnew11.md-5a2212e3"   data-external="true" rel="noopener noreferrer" >prepare for Java 9 support</a>, the extension functions and properties in the <code class="code " id="whatsnew11.md-fb060be2"  >kotlin-reflect.jar</code> library have been moved to the package <code class="code " id="whatsnew11.md-3b05447f"  >kotlin.reflect.full</code>. The names in the old package (<code class="code " id="whatsnew11.md-ba00689b"  >kotlin.reflect</code>) are deprecated and will be removed in Kotlin 1.2. Note that the core reflection interfaces (such as <code class="code " id="whatsnew11.md-b1b966f"  >KClass</code>) are part of the Kotlin standard library, not <code class="code " id="whatsnew11.md-3bf3987d"  >kotlin-reflect</code>, and are not affected by the move.</p></section></section><section class="chapter"  ><h2 id="whatsnew11.md-javascript-backend" data-toc="whatsnew11#whatsnew11.md-javascript-backend"  >JavaScript backend</h2><section class="chapter"  ><h3 id="whatsnew11.md-unified-standard-library" data-toc="whatsnew11#whatsnew11.md-unified-standard-library"  >Unified standard library</h3><p id="whatsnew11.md-17a9e4f7" >A much larger part of the Kotlin standard library can now be used from code compiled to JavaScript. In particular, key classes such as collections (<code class="code " id="whatsnew11.md-47c3cc1f"  >ArrayList</code>, <code class="code " id="whatsnew11.md-df61daa1"  >HashMap</code> etc.), exceptions (<code class="code " id="whatsnew11.md-9151c788"  >IllegalArgumentException</code> etc.) and a few others (<code class="code " id="whatsnew11.md-958c091e"  >StringBuilder</code>, <code class="code " id="whatsnew11.md-d36abcaf"  >Comparator</code>) are now defined under the <code class="code " id="whatsnew11.md-ac50b4c8"  >kotlin</code> package. On the JVM, the names are type aliases for the corresponding JDK classes, and on the JS, the classes are implemented in the Kotlin standard library.</p></section><section class="chapter"  ><h3 id="whatsnew11.md-better-code-generation" data-toc="whatsnew11#whatsnew11.md-better-code-generation"  >Better code generation</h3><p id="whatsnew11.md-43cda795" >JavaScript backend now generates more statically checkable code, which is friendlier to JS code processing tools, like minifiers, optimisers, linters, etc.</p></section><section class="chapter"  ><h3 id="whatsnew11.md-the-external-modifier" data-toc="whatsnew11#whatsnew11.md-the-external-modifier"  >The external modifier</h3><p id="whatsnew11.md-2272ab26" >If you need to access a class implemented in JavaScript from Kotlin in a typesafe way, you can write a Kotlin declaration using the <code class="code " id="whatsnew11.md-447372c0"  >external</code> modifier. (In Kotlin 1.0, the <code class="code " id="whatsnew11.md-cf1e29e4"  >@native</code> annotation was used instead.) Unlike the JVM target, the JS one permits to use external modifier with classes and properties. For example, here\'s how you can declare the DOM <code class="code " id="whatsnew11.md-e36e6ee3"  >Node</code> class:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-bf776b15"         >external class Node {\n    val firstChild: Node\n\n    fun appendChild(child: Node): Node\n\n    fun removeChild(child: Node): Node\n\n    // etc\n}\n</div></section><section class="chapter"  ><h3 id="whatsnew11.md-improved-import-handling" data-toc="whatsnew11#whatsnew11.md-improved-import-handling"  >Improved import handling</h3><p id="whatsnew11.md-497b26ed" >You can now describe declarations which should be imported from JavaScript modules more precisely. If you add the <code class="code " id="whatsnew11.md-d618acc0"  >@JsModule(&quot;&lt;module-name&gt;&quot;)</code> annotation on an external declaration it will be properly imported to a module system (either CommonJS or AMD) during the compilation. For example, with CommonJS the declaration will be imported via <code class="code " id="whatsnew11.md-d54be1e2"  >require(...)</code> function. Additionally, if you want to import a declaration either as a module or as a global JavaScript object, you can use the <code class="code " id="whatsnew11.md-317acd01"  >@JsNonModule</code> annotation.</p><p id="whatsnew11.md-d98f461c" >For example, here\'s how you can import JQuery into a Kotlin module:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-ce42a946"         >external interface JQuery {\n    fun toggle(duration: Int = definedExternally): JQuery\n    fun click(handler: (Event) -&gt; Unit): JQuery\n}\n\n@JsModule(&quot;jquery&quot;)\n@JsNonModule\n@JsName(&quot;$&quot;)\nexternal fun jquery(selector: String): JQuery\n</div><p id="whatsnew11.md-67661df5" >In this case, JQuery will be imported as a module named <code class="code " id="whatsnew11.md-38e1a67a"  >jquery</code>. Alternatively, it can be used as a $-object, depending on what module system Kotlin compiler is configured to use.</p><p id="whatsnew11.md-9f1b43e0" >You can use these declarations in your application like this:</p><div class="code-block" data-lang="kotlin" id="whatsnew11.md-21caf10e"         >fun main(args: Array&lt;String&gt;) {\n    jquery(&quot;.toggle-button&quot;).click {\n        jquery(&quot;.toggle-panel&quot;).toggle(300)\n    }\n}\n</div></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="whatsnew-plugin-20211.md"  >What\'s new in Kotlin plugin 2021.1</h1><p id="whatsnew-plugin-20211.md-b29a369f" >This release aims to increase productivity and improve the development experience. Version 2021.1 of the Kotlin plugin introduces the following major updates:</p><ul class="list _ul" id="whatsnew-plugin-20211.md-6f542ec3"   ><li class="list__item" id="whatsnew-plugin-20211.md-885890db" ><a href="#whatsnew-plugin-20211.md-performance-improvements" id="whatsnew-plugin-20211.md-83c6dd37"   >Performance improvements</a></li><li class="list__item" id="whatsnew-plugin-20211.md-9ff359c9" ><a href="#whatsnew-plugin-20211.md-evaluation-of-custom-getters-during-debugging" id="whatsnew-plugin-20211.md-99400205"   >Evaluation of custom getters during debugging</a></li><li class="list__item" id="whatsnew-plugin-20211.md-caef2137" ><a href="#whatsnew-plugin-20211.md-improved-change-signature-refactoring" id="whatsnew-plugin-20211.md-4ed86953"   >Improved Change Signature refactoring</a></li><li class="list__item" id="whatsnew-plugin-20211.md-e0b79d20" ><a href="#whatsnew-plugin-20211.md-code-completion-for-type-parameters" id="whatsnew-plugin-20211.md-f82d6cf2"   >Code completion for type parameters</a></li><li class="list__item" id="whatsnew-plugin-20211.md-ceff9431" ><a href="#whatsnew-plugin-20211.md-uml-diagrams-for-kotlin-classes" id="whatsnew-plugin-20211.md-68c397a"   >UML diagrams for Kotlin classes</a></li><li class="list__item" id="whatsnew-plugin-20211.md-cd25b425" ><a href="#whatsnew-plugin-20211.md-other-platform-enhancements" id="whatsnew-plugin-20211.md-66054df3"   >Other platform enhancements</a></li></ul><p id="whatsnew-plugin-20211.md-365dc96" >You can also learn about new features in <a href="https://blog.jetbrains.com/kotlin/2021/04/kotlin-plugin-2021-1-released/" id="whatsnew-plugin-20211.md-f65775c0"   data-external="true" rel="noopener noreferrer" >this blog post</a>.</p><section class="chapter"  ><h2 id="whatsnew-plugin-20211.md-performance-improvements" data-toc="whatsnew-plugin-20211#whatsnew-plugin-20211.md-performance-improvements"  >Performance improvements</h2><p id="whatsnew-plugin-20211.md-23af39e1" >With 2021.1, the Kotlin plugin has received a number of performance improvements that speed up the development process.</p><p id="whatsnew-plugin-20211.md-c8881b60" >Here are some major refinements:</p><ul class="list _ul" id="whatsnew-plugin-20211.md-a8d7b625"   ><li class="list__item" id="whatsnew-plugin-20211.md-7181d3e9" ><p id="whatsnew-plugin-20211.md-2563dd3" ><b id="whatsnew-plugin-20211.md-a9564c7c" class=""  >Faster syntax and error highlighting</b>. The code highlighting API has been reworked, so you now get all the necessary diagnostic information faster. See the benchmark results and share your feedback in this <a href="https://youtrack.jetbrains.com/issue/KT-37702#focus=Comments-27-4775165.0-0" id="whatsnew-plugin-20211.md-a32fbe1f"   data-external="true" rel="noopener noreferrer" >YouTrack issue</a>.</p></li><li class="list__item" id="whatsnew-plugin-20211.md-f1d59e1e" ><p id="whatsnew-plugin-20211.md-9ee9f0f4" ><b id="whatsnew-plugin-20211.md-78c29162" class=""  >Code completion speed improvements</b>. The Kotlin plugin provides faster code completion. Check out this <a href="https://youtrack.jetbrains.com/issue/KTIJ-1015#focus=Comments-27-4775642.0-0" id="whatsnew-plugin-20211.md-c59daee"   data-external="true" rel="noopener noreferrer" >YouTrack issue</a> to see the benchmark results.</p><p id="whatsnew-plugin-20211.md-f1c24c8f" >This version also introduces other improvements for code completion, particularly <a href="#whatsnew-plugin-20211.md-code-completion-for-type-parameters" id="whatsnew-plugin-20211.md-764fe9ed"   >code completion for type parameters</a>.</p></li><li class="list__item" id="whatsnew-plugin-20211.md-b166f6aa" ><p id="whatsnew-plugin-20211.md-819cdf92" ><b id="whatsnew-plugin-20211.md-2597064c" class=""  >Improved IDE responsiveness</b>. We’ve fixed numerous issues based on your feedback, and we’ve improved the overall stability of the plugin, as well as IDE responsiveness.</p></li></ul></section><section class="chapter"  ><h2 id="whatsnew-plugin-20211.md-evaluation-of-custom-getters-during-debugging" data-toc="whatsnew-plugin-20211#whatsnew-plugin-20211.md-evaluation-of-custom-getters-during-debugging"  >Evaluation of custom getters during debugging</h2><p id="whatsnew-plugin-20211.md-c89ee98b" >This release expands the capabilities of the debugger. One of the most notable features is the ability to display Kotlin properties without a <a href="#properties.md-backing-fields" id="whatsnew-plugin-20211.md-c57adc9a"   >backing field</a> in the <b id="whatsnew-plugin-20211.md-258cb639" class=""  >Variables</b> view.</p><p id="whatsnew-plugin-20211.md-db79db81" >Previously, during a debug session, you could only see the properties without a custom getter and those with a backing field. Properties with a custom getter didn\'t appear because they are represented as regular methods on the JVM. Starting with version 2021.1 of the Kotlin plugin, you can see all such properties and evaluate them on demand by clicking on `get() near the property name.</p><p id="whatsnew-plugin-20211.md-a9402d80" >For example, when debugging of the following code, you can execute the <code class="code " id="whatsnew-plugin-20211.md-c0b0b28b"  >get()</code> method to see the value:</p><div class="code-block" data-lang="kotlin" id="whatsnew-plugin-20211.md-8ce2b469"         >class LanguageVersion(val major: Int, val minor: Int) {\n    val isStable: Boolean\n        get() = major &lt;= 1 &amp;&amp; minor &lt;= 4\n    val isExperimental: Boolean\n        get() = !isStable\n    val versionString: String\n        get() = &quot;$major.$minor&quot;\n    \n    override fun toString() = versionString\n}\n\nfun main() {\n    val version = LanguageVersion(1, 4)\n}\n</div><p id="whatsnew-plugin-20211.md-3ca97584" >In the <b id="whatsnew-plugin-20211.md-f196fd14" class=""  >Debug</b> window, you can see the values of the properties:</p><p id="whatsnew-plugin-20211.md-294cf51" ><figure title="Variables view"><img alt="Variables view" title="Variables view" id="whatsnew-plugin-20211.md-2be8cc79" src="images/debugging-variables-view.png"  class="" width="620" height="228" /></figure></p></section><section class="chapter"  ><h2 id="whatsnew-plugin-20211.md-improved-change-signature-refactoring" data-toc="whatsnew-plugin-20211#whatsnew-plugin-20211.md-improved-change-signature-refactoring"  >Improved Change Signature refactoring</h2><p id="whatsnew-plugin-20211.md-5c93c5cc" >This release contains changes to the <a href="https://www.jetbrains.com/help/idea/change-signature.html" id="whatsnew-plugin-20211.md-8d3ae343"   data-external="true" rel="noopener noreferrer" >Change Signature</a> refactoring. We’ve fixed more than <a href="https://youtrack.jetbrains.com/issue/KTIJ-685" id="whatsnew-plugin-20211.md-c4381aaf"   data-external="true" rel="noopener noreferrer" >40 issues</a> to make the refactoring process better.</p><p id="whatsnew-plugin-20211.md-8e554575" >Here are some of the important improvements:</p><ul class="list _ul" id="whatsnew-plugin-20211.md-43c86229"   ><li class="list__item" id="whatsnew-plugin-20211.md-9ff46270" ><p>Support for warning messages for more refactoring cases.</p></li><li class="list__item" id="whatsnew-plugin-20211.md-295ea4c1" ><p>Fixes to inheritance refactoring, including cross-language refactoring. See the <a href="https://youtrack.jetbrains.com/issue/KTIJ-966" id="whatsnew-plugin-20211.md-b71852fd"   data-external="true" rel="noopener noreferrer" >YouTrack issue</a> for details.* Improved UX of properties processing.</p></li><li class="list__item" id="whatsnew-plugin-20211.md-6956c602" ><p>Improved UX for processing properties.</p></li><li class="list__item" id="whatsnew-plugin-20211.md-adfb2aee" ><p>Addition of a way to declare the default parameter value. See the <a href="https://youtrack.jetbrains.com/issue/KTIJ-903" id="whatsnew-plugin-20211.md-c9206e05"   data-external="true" rel="noopener noreferrer" >YouTrack issue</a> for details.</p></li><li class="list__item" id="whatsnew-plugin-20211.md-b9dcf24f" ><p>Correct backticks processing.</p></li></ul></section><section class="chapter"  ><h2 id="whatsnew-plugin-20211.md-code-completion-for-type-parameters" data-toc="whatsnew-plugin-20211#whatsnew-plugin-20211.md-code-completion-for-type-parameters"  >Code completion for type parameters</h2><p id="whatsnew-plugin-20211.md-80d37dd4" >From now on, code completion will offer functions and properties after generic functions and will restore type arguments where needed. When you select such a function from the list, the IDE adds the correct type parameter to the preceding code.</p><p id="whatsnew-plugin-20211.md-2424d6" >In the following example, there is a list of strings to be reversed:</p><div class="code-block" data-lang="kotlin" id="whatsnew-plugin-20211.md-8601e09f"         >fun typeParametersAtCodeCompletion() {\n   // Function definition from stdlib:\n   // public fun &lt;T&gt; emptyList(): List&lt;T&gt;\n\n   val list: List&lt;String&gt; = emptyList() // T is inferred from the context (explicit variable type)\n}\n</div><p id="whatsnew-plugin-20211.md-fed6551f" >To reverse this list, start typing the name of the <code class="code " id="whatsnew-plugin-20211.md-ca734d4a"  >reversed()</code> function:</p><p id="whatsnew-plugin-20211.md-b445bca2" ><figure title="Now code completion suggests functions"><img alt="Now code completion suggests functions" title="Now code completion suggests functions" id="whatsnew-plugin-20211.md-4cb76f46" src="images/code-completion-type-pararmeters.png"  class="" width="800" height="184" /></figure></p><p id="whatsnew-plugin-20211.md-906514bc" >After you apply the code completion suggestion, the IDE automatically adds the <code class="code " id="whatsnew-plugin-20211.md-d7764611"  >&lt;String&gt;</code> type:</p><div class="code-block" data-lang="kotlin" id="whatsnew-plugin-20211.md-be8f76"         >fun typeParametersAtCodeCompletion() {\n   // Function definition from stdlib:\n   // public fun &lt;T&gt; emptyList(): List&lt;T&gt;\n\n   val list: List&lt;String&gt; = emptyList&lt;String&gt;().reversed()\n}\n</div><p id="whatsnew-plugin-20211.md-5dffd90e" >The type argument for <code class="code " id="whatsnew-plugin-20211.md-8ee5f856"  >emptyList()</code> is required to evaluate the expression type. Otherwise, the code will not compile.</p></section><section class="chapter"  ><h2 id="whatsnew-plugin-20211.md-uml-diagrams-for-kotlin-classes" data-toc="whatsnew-plugin-20211#whatsnew-plugin-20211.md-uml-diagrams-for-kotlin-classes"  >UML diagrams for Kotlin classes</h2><p id="whatsnew-plugin-20211.md-a1e0827c" >With this release, you can test Kotlin code visualization via UML Class diagrams. To build a diagram, select <b id="whatsnew-plugin-20211.md-12277617" class=""  >Diagrams | Show Diagram... | Kotlin Classes</b> in the <b id="whatsnew-plugin-20211.md-29e63dd9" class=""  >Project View</b>.</p><p id="whatsnew-plugin-20211.md-8cab8daa" ><figure title="UML diagram for Kotlin classes"><img alt="UML diagram for Kotlin classes" title="UML diagram for Kotlin classes" id="whatsnew-plugin-20211.md-f7f6af1e" src="images/kotlin-classes-uml-diagram.png"  class="" width="620" height="422" /></figure></p><p id="whatsnew-plugin-20211.md-631f91f3" >Currently, the diagrams only show inheritance and nesting relationships. All other more detailed association connections, like aggregation, construction, dependency, and others will be available in the future releases.</p></section><section class="chapter"  ><h2 id="whatsnew-plugin-20211.md-other-platform-enhancements" data-toc="whatsnew-plugin-20211#whatsnew-plugin-20211.md-other-platform-enhancements"  >Other platform enhancements</h2><p id="whatsnew-plugin-20211.md-7eb1ffca" >Since the plugin and the platform have been moved to the same codebase and now ship simultaneously, this release also brings the following features that improve the Kotlin experience:</p><ul class="list _ul" id="whatsnew-plugin-20211.md-af548a1"   ><li class="list__item" id="whatsnew-plugin-20211.md-c4140dc2" ><p>You can now launch the basic memory profiler that was announced in the <a href="https://www.jetbrains.com/idea/whatsnew/#debugger" id="whatsnew-plugin-20211.md-5b5def26"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA 2020.3 release</a> via Gradle run.</p></li><li class="list__item" id="whatsnew-plugin-20211.md-72bf68ae" ><p>To improve the experience of working with coroutines, this release provides <a href="https://youtrack.jetbrains.com/issue/KTIJ-826" id="whatsnew-plugin-20211.md-9969df8e"   data-external="true" rel="noopener noreferrer" >better thread-blocking call detection</a>. The inspection now correctly warns you about inappropriate blocking method calls.</p></li><li class="list__item" id="whatsnew-plugin-20211.md-ed713190" >We’ve fixed some of the language injection issues that received the most votes. Language injection now works correctly for the following cases: <ul class="list _ul" id="whatsnew-plugin-20211.md-358e0658"   ><li class="list__item" id="whatsnew-plugin-20211.md-931ddf4a" ><p>When you use triple quotes to inject multi-line strings and add the <code class="code " id="whatsnew-plugin-20211.md-ad77486a"  >.trimIndent()</code>, or <code class="code " id="whatsnew-plugin-20211.md-1c104b2"  >.trimMargin()</code> functions at the end. See the <a href="https://youtrack.jetbrains.com/issue/KTIJ-679" id="whatsnew-plugin-20211.md-e643c9ee"   data-external="true" rel="noopener noreferrer" >YouTrack issue</a> for details.</p></li><li class="list__item" id="whatsnew-plugin-20211.md-4b01a1a4" ><p>When you concatenate strings. See the <a href="https://youtrack.jetbrains.com/issue/KTIJ-855" id="whatsnew-plugin-20211.md-1a289563"   data-external="true" rel="noopener noreferrer" >YouTrack issue</a> for details.</p></li></ul></li></ul><p id="whatsnew-plugin-20211.md-ede39ea2" >See the <a href="https://www.jetbrains.com/idea/whatsnew/" id="whatsnew-plugin-20211.md-2a9e284c"   data-external="true" rel="noopener noreferrer" >What’s new in IntelliJ IDEA 2021.1 blog post</a> or watch <a href="https://www.youtube.com/watch?v=YBmR0J3-r3o" id="whatsnew-plugin-20211.md-86963506"   data-external="true" rel="noopener noreferrer" >this video</a> to learn more about the platform enhancements.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="whatsnew-plugin-20203.md"  >What\'s new in Kotlin plugin 2020.3</h1><p id="whatsnew-plugin-20203.md-f0bb91ed" >This plugin release introduces the following features:</p><ul class="list _ul" id="whatsnew-plugin-20203.md-10ce82b2"   ><li class="list__item" id="whatsnew-plugin-20203.md-edadad5f" ><a href="#whatsnew-plugin-20203.md-new-types-of-inline-refactorings" id="whatsnew-plugin-20203.md-61c55c78"   >New types of inline refactorings</a></li><li class="list__item" id="whatsnew-plugin-20203.md-27b59e7f" ><a href="#whatsnew-plugin-20203.md-structural-search-and-replace" id="whatsnew-plugin-20203.md-fc515f1"   >Structural search and replace</a></li><li class="list__item" id="whatsnew-plugin-20203.md-5abb19d2" ><a href="#whatsnew-plugin-20203.md-editorconfig-support" id="whatsnew-plugin-20203.md-6b754406"   >EditorConfig support</a></li><li class="list__item" id="whatsnew-plugin-20203.md-7457055d" ><a href="#whatsnew-plugin-20203.md-project-templates-for-jetpack-compose-for-desktop" id="whatsnew-plugin-20203.md-f5cb1295"   >Project templates for Jetpack Compose for Desktop</a></li></ul><section class="chapter"  ><h2 id="whatsnew-plugin-20203.md-new-types-of-inline-refactorings" data-toc="whatsnew-plugin-20203#whatsnew-plugin-20203.md-new-types-of-inline-refactorings"  >New types of inline refactorings</h2><p id="whatsnew-plugin-20203.md-ac062bec" >Cross-language conversion is possible starting with version 2020.3 of the Kotlin plugin. You can now use the inline refactoring actions for Kotlin elements defined in Java.</p><p id="whatsnew-plugin-20203.md-51dee936" >The Kotlin plugin can inline code from libraries with attached sources. That means you can <a href="https://www.jetbrains.com/help/idea/inline.html" id="whatsnew-plugin-20203.md-71dbac05"   data-external="true" rel="noopener noreferrer" >inline refactor</a> all the <a href="https://kotlinlang.org/docs/reference/scope-functions.html" id="whatsnew-plugin-20203.md-698e4e69"   data-external="true" rel="noopener noreferrer" >Kotlin scope functions</a>: <em id="whatsnew-plugin-20203.md-5e63f616" class=""  >also</em>, <em id="whatsnew-plugin-20203.md-33ee016e" class=""  >let</em>, <em id="whatsnew-plugin-20203.md-47192b58" class=""  >run</em>, <em id="whatsnew-plugin-20203.md-381630b3" class=""  >apply</em>, and <em id="whatsnew-plugin-20203.md-944c71ce" class=""  >with</em>.</p><p id="whatsnew-plugin-20203.md-875c4293" >Also, this release brings refactoring improvements for lambda expressions. Now the IDE analyzes their syntax more thoroughly and formats them correctly.</p></section><section class="chapter"  ><h2 id="whatsnew-plugin-20203.md-structural-search-and-replace" data-toc="whatsnew-plugin-20203#whatsnew-plugin-20203.md-structural-search-and-replace"  >Structural search and replace</h2><p id="whatsnew-plugin-20203.md-efb75e72" ><a href="https://www.jetbrains.com/help/idea/structural-search-and-replace.html" id="whatsnew-plugin-20203.md-72beeb8d"   data-external="true" rel="noopener noreferrer" >Structural search and replace (SSR)</a> actions are now available for Kotlin. The SSR feature allows you to find and replace code patterns, taking the syntax and semantics of the source code into account.</p><p id="whatsnew-plugin-20203.md-d11bfd76" >To start using the feature, open the <b id="whatsnew-plugin-20203.md-c73d3083" class=""  >Structural Search</b> dialog for your <code class="code " id="whatsnew-plugin-20203.md-65cbd4d"  >.kt</code> file and select one of the <a href="https://www.jetbrains.com/help/idea/search-templates.html" id="whatsnew-plugin-20203.md-c6254130"   data-external="true" rel="noopener noreferrer" >templates</a> or create your own.</p></section><section class="chapter"  ><h2 id="whatsnew-plugin-20203.md-editorconfig-support" data-toc="whatsnew-plugin-20203#whatsnew-plugin-20203.md-editorconfig-support"  >EditorConfig support</h2><p id="whatsnew-plugin-20203.md-f902ad5f" >From 2020.3, the Kotlin API has the full support of <a href="https://editorconfig.org/" id="whatsnew-plugin-20203.md-c3ac5e93"   data-external="true" rel="noopener noreferrer" >.editorconfig</a> files for <a href="https://www.jetbrains.com/help/idea/configuring-code-style.html#editorconfig" id="whatsnew-plugin-20203.md-5cb5df73"   data-external="true" rel="noopener noreferrer" >managing code style on a directory level</a>.</p></section><section class="chapter"  ><h2 id="whatsnew-plugin-20203.md-project-templates-for-jetpack-compose-for-desktop" data-toc="whatsnew-plugin-20203#whatsnew-plugin-20203.md-project-templates-for-jetpack-compose-for-desktop"  >Project templates for Jetpack Compose for Desktop</h2><p id="whatsnew-plugin-20203.md-12ecce0" >The new experimental Jetpack Compose for Desktop templates are now available in the Kotlin Project Wizard. You can create a project using the following templates:</p><ul class="list _ul" id="whatsnew-plugin-20203.md-5ef10ad6"   ><li class="list__item" id="whatsnew-plugin-20203.md-5487c9b2" ><p><b id="whatsnew-plugin-20203.md-df19d8d8" class=""  >Desktop</b> – a Compose project targeting the desktop JVM platform: Windows, Linux, or macOS.</p></li><li class="list__item" id="whatsnew-plugin-20203.md-4c1347b9" ><p><b id="whatsnew-plugin-20203.md-3e07a641" class=""  >Multiplatform</b> – a Multiplatform Compose project targeting the desktop JVM platform (Windows, Linux, macOS) and Android with shared code in common modules.</p></li></ul><p id="whatsnew-plugin-20203.md-d4f7777" ><figure title="Kotlin Project Wizard &ndash; Jetpack Compose project"><img alt="Kotlin Project Wizard &ndash; Jetpack Compose project" title="Kotlin Project Wizard &ndash; Jetpack Compose project" id="whatsnew-plugin-20203.md-6e2ba7da" src="images/jetpack-compose.png"  class="" width="1932" height="1156" /></figure></p><p id="whatsnew-plugin-20203.md-277b8df3" >To create a project, select one of the templates while creating a new project and specify the Gradle build system. The Kotlin plugin creates all the configuration files automatically. You can try out this experimental feature by working through <a href="https://github.com/JetBrains/compose-jb/tree/master/tutorials/Getting_Started" id="whatsnew-plugin-20203.md-6e166823"   data-external="true" rel="noopener noreferrer" >Getting Started with Compose for Desktop tutorial</a>.</p><p id="whatsnew-plugin-20203.md-285c1995" >Read more about Jetpack Compose features in this <a href="https://blog.jetbrains.com/cross-post/jetpack-compose-for-desktop-milestone-1-released/" id="whatsnew-plugin-20203.md-57de71"   data-external="true" rel="noopener noreferrer" >blog post</a> and look through the <a href="https://github.com/JetBrains/compose-jb/tree/master/examples" id="whatsnew-plugin-20203.md-dbe22b39"   data-external="true" rel="noopener noreferrer" >examples of Compose applications</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="basic-syntax.md"  >Basic syntax</h1><section class="chapter"  ><h2 id="basic-syntax.md-package-definition-and-imports" data-toc="basic-syntax#basic-syntax.md-package-definition-and-imports"  >Package definition and imports</h2><p id="basic-syntax.md-7b682f0d" >Package specification should be at the top of the source file.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-f7fd7b4e"         >package my.demo\n\nimport kotlin.text.*\n\n// ...\n</div><p id="basic-syntax.md-afff1c57" >It is not required to match directories and packages: source files can be placed arbitrarily in the file system.</p><p id="basic-syntax.md-cd91b573" >See <a href="#packages.md" id="basic-syntax.md-fd3faac8"   >Packages</a>.</p></section><section class="chapter"  ><h2 id="basic-syntax.md-program-entry-point" data-toc="basic-syntax#basic-syntax.md-program-entry-point"  >Program entry point</h2><p id="basic-syntax.md-6d34cad9" >An entry point of a Kotlin application is the <code class="code " id="basic-syntax.md-a87c87aa"  >main</code> function.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-b6a7cb0b"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n    println(&quot;Hello world!&quot;)\n}\n</div><p id="basic-syntax.md-a1706e99" >Another form of <code class="code " id="basic-syntax.md-f6c5e26b"  >main</code> accepts a variable number of <code class="code " id="basic-syntax.md-812dedec"  >String</code> arguments.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-345c6c13"        data-runnable="true" data-min-compiler-version="1.3"  >fun main(args: Array&lt;String&gt;) {\n    println(args.contentToString())\n}\n</div></section><section class="chapter"  ><h2 id="basic-syntax.md-print-to-the-standard-output" data-toc="basic-syntax#basic-syntax.md-print-to-the-standard-output"  >Print to the standard output</h2><p id="basic-syntax.md-afe10327" ><code class="code " id="basic-syntax.md-26a6fd77"  >print</code> prints its argument to the standard output.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-2e8d578a"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    print(&quot;Hello &quot;)\n    print(&quot;world!&quot;)\n//sampleEnd\n}\n</div><p id="basic-syntax.md-8d4f55f8" ><code class="code " id="basic-syntax.md-a88a105b"  >println</code> prints its arguments and adds a line break, so that the next thing you print appears on the next line.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-b52d1616"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    println(&quot;Hello world!&quot;)\n    println(42)\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="basic-syntax.md-functions" data-toc="basic-syntax#basic-syntax.md-functions"  >Functions</h2><p id="basic-syntax.md-8fa7a62b" >A function with two <code class="code " id="basic-syntax.md-71ff80ea"  >Int</code> parameters and <code class="code " id="basic-syntax.md-70171534"  >Int</code> return type.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-8c30dbc2"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nfun sum(a: Int, b: Int): Int {\n    return a + b\n}\n//sampleEnd\n\nfun main() {\n    print(&quot;sum of 3 and 5 is &quot;)\n    println(sum(3, 5))\n}\n</div><p id="basic-syntax.md-3505f9a9" >A function body can be an expression. Its return type is inferred.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-e51f96a1"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nfun sum(a: Int, b: Int) = a + b\n//sampleEnd\n\nfun main() {\n    println(&quot;sum of 19 and 23 is ${sum(19, 23)}&quot;)\n}\n</div><p id="basic-syntax.md-1fd44dc9" >A function that returns no meaningful value.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-f55d595e"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nfun printSum(a: Int, b: Int): Unit {\n    println(&quot;sum of $a and $b is ${a + b}&quot;)\n}\n//sampleEnd\n\nfun main() {\n    printSum(-1, 8)\n}\n</div><p id="basic-syntax.md-8e2ed9d8" ><code class="code " id="basic-syntax.md-92f5a567"  >Unit</code> return type can be omitted.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-8e2fbc08"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nfun printSum(a: Int, b: Int) {\n    println(&quot;sum of $a and $b is ${a + b}&quot;)\n}\n//sampleEnd\n\nfun main() {\n    printSum(-1, 8)\n}\n</div><p id="basic-syntax.md-a918c436" >See <a href="#functions.md" id="basic-syntax.md-b970ffdc"   >Functions</a>.</p></section><section class="chapter"  ><h2 id="basic-syntax.md-variables" data-toc="basic-syntax#basic-syntax.md-variables"  >Variables</h2><p id="basic-syntax.md-3b1d4a8d" >Read-only local variables are defined using the keyword <code class="code " id="basic-syntax.md-513e1e01"  >val</code>. They can be assigned a value only once.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-67097eec"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val a: Int = 1  // immediate assignment\n    val b = 2   // `Int` type is inferred\n    val c: Int  // Type required when no initializer is provided\n    c = 3       // deferred assignment\n//sampleEnd\n    println(&quot;a = $a, b = $b, c = $c&quot;)\n}\n</div><p id="basic-syntax.md-150ef7c8" >Variables that can be reassigned use the <code class="code " id="basic-syntax.md-72e8a11b"  >var</code> keyword.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-35c18edf"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    var x = 5 // `Int` type is inferred\n    x += 1\n//sampleEnd\n    println(&quot;x = $x&quot;)\n}\n</div><p id="basic-syntax.md-83129d16" >You can declare variables at the top level.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-5af4590f"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nval PI = 3.14\nvar x = 0\n\nfun incrementX() { \n    x += 1 \n}\n//sampleEnd\n\nfun main() {\n    println(&quot;x = $x; PI = $PI&quot;)\n    incrementX()\n    println(&quot;incrementX()&quot;)\n    println(&quot;x = $x; PI = $PI&quot;)\n}\n</div><p id="basic-syntax.md-958921bb" >See also <a href="#properties.md" id="basic-syntax.md-2da1d9af"   >Properties</a>.</p></section><section class="chapter"  ><h2 id="basic-syntax.md-creating-classes-and-instances" data-toc="basic-syntax#basic-syntax.md-creating-classes-and-instances"  >Creating classes and instances</h2><p id="basic-syntax.md-3bedc389" >To define a class, use the <code class="code " id="basic-syntax.md-1b724a28"  >class</code> keyword.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-9feacaae"         >class Shape\n</div><p id="basic-syntax.md-f2693ed" >Properties of a class can be listed in its declaration or body.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-e295ba86"         >class Rectangle(var height: Double, var length: Double) {\n    var perimeter = (height + length) * 2 \n}\n</div><p id="basic-syntax.md-18c8bb9" >The default constructor with parameters listed in the class declaration is available automatically.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-408ba28d"        data-runnable="true" data-min-compiler-version="1.3"  >class Rectangle(var height: Double, var length: Double) {\n    var perimeter = (height + length) * 2 \n}\nfun main() {\n//sampleStart\n    val rectangle = Rectangle(5.0, 2.0)\n    println(&quot;The perimeter is ${rectangle.perimeter}&quot;)\n//sampleEnd\n}\n</div><p id="basic-syntax.md-b24ce2bb" >Inheritance between classes is declared by a colon (<code class="code " id="basic-syntax.md-a194b11f"  >:</code> ). Classes are final by default; to make a class inheritable, mark it as <code class="code " id="basic-syntax.md-947e4bc"  >open</code>.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-47166155"         >open class Shape\n\nclass Rectangle(var height: Double, var length: Double): Shape {\n    var perimeter = (height + length) * 2 \n}\n</div><p id="basic-syntax.md-6524fa55" >See <a href="#classes.md" id="basic-syntax.md-6cd8fbf7"   >classes</a> and <a href="#object-declarations.md" id="basic-syntax.md-2271828f"   >objects and instances</a>.</p></section><section class="chapter"  ><h2 id="basic-syntax.md-comments" data-toc="basic-syntax#basic-syntax.md-comments"  >Comments</h2><p id="basic-syntax.md-224a983e" >Just like most modern languages, Kotlin supports single-line (or <em id="basic-syntax.md-945853c9" class=""  >end-of-line</em>) and multi-line (<em id="basic-syntax.md-e8df00e1" class=""  >block</em>) comments.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-9258887a"         >// This is an end-of-line comment\n\n/* This is a block comment\n   on multiple lines. */\n</div><p id="basic-syntax.md-e71a70ca" >Block comments in Kotlin can be nested.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-4f93178a"         >/* The comment starts here\n/* contains a nested comment */     \nand ends here. */\n</div><p id="basic-syntax.md-549abb6" >See <a href="#kotlin-doc.md" id="basic-syntax.md-8b75284b"   >Documenting Kotlin Code</a> for information on the documentation comment syntax.</p></section><section class="chapter"  ><h2 id="basic-syntax.md-string-templates" data-toc="basic-syntax#basic-syntax.md-string-templates"  >String templates</h2><div class="code-block" data-lang="kotlin" id="basic-syntax.md-eb00207c"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    var a = 1\n    // simple name in template:\n    val s1 = &quot;a is $a&quot; \n    \n    a = 2\n    // arbitrary expression in template:\n    val s2 = &quot;${s1.replace(&quot;is&quot;, &quot;was&quot;)}, but now is $a&quot;\n//sampleEnd\n    println(s2)\n}\n</div><p id="basic-syntax.md-b28af732" >See <a href="#basic-types.md-string-templates" id="basic-syntax.md-f22b9100"   >String templates</a> for details.</p></section><section class="chapter"  ><h2 id="basic-syntax.md-conditional-expressions" data-toc="basic-syntax#basic-syntax.md-conditional-expressions"  >Conditional expressions</h2><div class="code-block" data-lang="kotlin" id="basic-syntax.md-702f46f0"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nfun maxOf(a: Int, b: Int): Int {\n    if (a &gt; b) {\n        return a\n    } else {\n        return b\n    }\n}\n//sampleEnd\n\nfun main() {\n    println(&quot;max of 0 and 42 is ${maxOf(0, 42)}&quot;)\n}\n</div><p id="basic-syntax.md-90323ea8" >In Kotlin, <code class="code " id="basic-syntax.md-dbf68789"  >if</code> can also be used as an expression.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-3965eb27"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nfun maxOf(a: Int, b: Int) = if (a &gt; b) a else b\n//sampleEnd\n\nfun main() {\n    println(&quot;max of 0 and 42 is ${maxOf(0, 42)}&quot;)\n}\n</div><p id="basic-syntax.md-28a17df9" >See <a href="#control-flow.md-if-expression" id="basic-syntax.md-1c61e4ed"   ><code class="code " id="basic-syntax.md-c71b6e31"  >if</code> -expressions</a>.</p></section><section class="chapter"  ><h2 id="basic-syntax.md-for-loop" data-toc="basic-syntax#basic-syntax.md-for-loop"  >for loop</h2><div class="code-block" data-lang="kotlin" id="basic-syntax.md-a4836bec"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val items = listOf(&quot;apple&quot;, &quot;banana&quot;, &quot;kiwifruit&quot;)\n    for (item in items) {\n        println(item)\n    }\n//sampleEnd\n}\n</div><p id="basic-syntax.md-7b376b17" >or</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-ce4fa2f8"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val items = listOf(&quot;apple&quot;, &quot;banana&quot;, &quot;kiwifruit&quot;)\n    for (index in items.indices) {\n        println(&quot;item at $index is ${items[index]}&quot;)\n    }\n//sampleEnd\n}\n</div><p id="basic-syntax.md-9abf545f" >See <a href="#control-flow.md-for-loops" id="basic-syntax.md-eccf78a"   >for loop</a>.</p></section><section class="chapter"  ><h2 id="basic-syntax.md-while-loop" data-toc="basic-syntax#basic-syntax.md-while-loop"  >while loop</h2><div class="code-block" data-lang="kotlin" id="basic-syntax.md-d1037056"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val items = listOf(&quot;apple&quot;, &quot;banana&quot;, &quot;kiwifruit&quot;)\n    var index = 0\n    while (index &lt; items.size) {\n        println(&quot;item at $index is ${items[index]}&quot;)\n        index++\n    }\n//sampleEnd\n}\n</div><p id="basic-syntax.md-f6ceaf2c" >See <a href="#control-flow.md-while-loops" id="basic-syntax.md-cc156726"   >while loop</a>.</p></section><section class="chapter"  ><h2 id="basic-syntax.md-when-expression" data-toc="basic-syntax#basic-syntax.md-when-expression"  >when expression</h2><div class="code-block" data-lang="kotlin" id="basic-syntax.md-b4981dca"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nfun describe(obj: Any): String =\n    when (obj) {\n        1          -&gt; &quot;One&quot;\n        &quot;Hello&quot;    -&gt; &quot;Greeting&quot;\n        is Long    -&gt; &quot;Long&quot;\n        !is String -&gt; &quot;Not a string&quot;\n        else       -&gt; &quot;Unknown&quot;\n    }\n//sampleEnd\n\nfun main() {\n    println(describe(1))\n    println(describe(&quot;Hello&quot;))\n    println(describe(1000L))\n    println(describe(2))\n    println(describe(&quot;other&quot;))\n}\n</div><p id="basic-syntax.md-462516c" >See <a href="#control-flow.md-when-expression" id="basic-syntax.md-1167f9fc"   >when expression</a>.</p></section><section class="chapter"  ><h2 id="basic-syntax.md-ranges" data-toc="basic-syntax#basic-syntax.md-ranges"  >Ranges</h2><p id="basic-syntax.md-1f75115b" >Check if a number is within a range using <code class="code " id="basic-syntax.md-d2dc06fc"  >in</code> operator.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-1a270249"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val x = 10\n    val y = 9\n    if (x in 1..y+1) {\n        println(&quot;fits in range&quot;)\n    }\n//sampleEnd\n}\n</div><p id="basic-syntax.md-7d433e58" >Check if a number is out of range.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-f84f4121"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val list = listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)\n    \n    if (-1 !in 0..list.lastIndex) {\n        println(&quot;-1 is out of range&quot;)\n    }\n    if (list.size !in list.indices) {\n        println(&quot;list size is out of valid list indices range, too&quot;)\n    }\n//sampleEnd\n}\n</div><p id="basic-syntax.md-dc0d16a3" >Iterate over a range.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-5553a75d"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    for (x in 1..5) {\n        print(x)\n    }\n//sampleEnd\n}\n</div><p id="basic-syntax.md-1220fa00" >Or over a progression.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-fd970ef"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    for (x in 1..10 step 2) {\n        print(x)\n    }\n    println()\n    for (x in 9 downTo 0 step 3) {\n        print(x)\n    }\n//sampleEnd\n}\n</div><p id="basic-syntax.md-320657b5" >See <a href="#ranges.md" id="basic-syntax.md-9686c20"   >Ranges and progressions</a>.</p></section><section class="chapter"  ><h2 id="basic-syntax.md-collections" data-toc="basic-syntax#basic-syntax.md-collections"  >Collections</h2><p id="basic-syntax.md-1ca1507a" >Iterate over a collection.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-4b7476c9"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n    val items = listOf(&quot;apple&quot;, &quot;banana&quot;, &quot;kiwifruit&quot;)\n//sampleStart\n    for (item in items) {\n        println(item)\n    }\n//sampleEnd\n}\n</div><p id="basic-syntax.md-ebb20f6d" >Check if a collection contains an object using <code class="code " id="basic-syntax.md-ee93714"  >in</code> operator.</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-25d9339a"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n    val items = setOf(&quot;apple&quot;, &quot;banana&quot;, &quot;kiwifruit&quot;)\n//sampleStart\n    when {\n        &quot;orange&quot; in items -&gt; println(&quot;juicy&quot;)\n        &quot;apple&quot; in items -&gt; println(&quot;apple is fine too&quot;)\n    }\n//sampleEnd\n}\n</div><p id="basic-syntax.md-cae167a4" >Using lambda expressions to filter and map collections:</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-e8e085a7"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val fruits = listOf(&quot;banana&quot;, &quot;avocado&quot;, &quot;apple&quot;, &quot;kiwifruit&quot;)\n    fruits\n      .filter { it.startsWith(&quot;a&quot;) }\n      .sortedBy { it }\n      .map { it.toUpperCase() }\n      .forEach { println(it) }\n//sampleEnd\n}\n</div><p id="basic-syntax.md-55215344" >See <a href="#collections-overview.md" id="basic-syntax.md-7092dc48"   >Collections overview</a>.</p></section><section class="chapter"  ><h2 id="basic-syntax.md-nullable-values-and-null-checks" data-toc="basic-syntax#basic-syntax.md-nullable-values-and-null-checks"  >Nullable values and null checks</h2><p id="basic-syntax.md-94805ec0" >A reference must be explicitly marked as nullable when <code class="code " id="basic-syntax.md-4a6f1d62"  >null</code> value is possible. Nullable type names have <code class="code " id="basic-syntax.md-8096ca9c"  >?</code> at the end.</p><p id="basic-syntax.md-a8e090ea" >Return <code class="code " id="basic-syntax.md-306e092e"  >null</code> if <code class="code " id="basic-syntax.md-301cc6ce"  >str</code> does not hold an integer:</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-7a2afcfd"         >fun parseInt(str: String): Int? {\n    // ...\n}\n</div><p id="basic-syntax.md-c6369d6d" >Use a function returning nullable value:</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-ea22b21"        data-runnable="true" data-min-compiler-version="1.3"  >fun parseInt(str: String): Int? {\n    return str.toIntOrNull()\n}\n\n//sampleStart\nfun printProduct(arg1: String, arg2: String) {\n    val x = parseInt(arg1)\n    val y = parseInt(arg2)\n\n    // Using `x * y` yields error because they may hold nulls.\n    if (x != null &amp;&amp; y != null) {\n        // x and y are automatically cast to non-nullable after null check\n        println(x * y)\n    }\n    else {\n        println(&quot;\'$arg1\' or \'$arg2\' is not a number&quot;)\n    }    \n}\n//sampleEnd\n\nfun main() {\n    printProduct(&quot;6&quot;, &quot;7&quot;)\n    printProduct(&quot;a&quot;, &quot;7&quot;)\n    printProduct(&quot;a&quot;, &quot;b&quot;)\n}\n</div><p id="basic-syntax.md-dfab9ba" >or</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-3d7cb762"        data-runnable="true" data-min-compiler-version="1.3"  >fun parseInt(str: String): Int? {\n    return str.toIntOrNull()\n}\n\nfun printProduct(arg1: String, arg2: String) {\n    val x = parseInt(arg1)\n    val y = parseInt(arg2)\n    \n//sampleStart\n    // ...\n    if (x == null) {\n        println(&quot;Wrong number format in arg1: \'$arg1\'&quot;)\n        return\n    }\n    if (y == null) {\n        println(&quot;Wrong number format in arg2: \'$arg2\'&quot;)\n        return\n    }\n\n    // x and y are automatically cast to non-nullable after null check\n    println(x * y)\n//sampleEnd\n}\n\nfun main() {\n    printProduct(&quot;6&quot;, &quot;7&quot;)\n    printProduct(&quot;a&quot;, &quot;7&quot;)\n    printProduct(&quot;99&quot;, &quot;b&quot;)\n}\n</div><p id="basic-syntax.md-5e9c0a9e" >See <a href="#null-safety.md" id="basic-syntax.md-bdfa4c"   >Null-safety</a>.</p></section><section class="chapter"  ><h2 id="basic-syntax.md-type-checks-and-automatic-casts" data-toc="basic-syntax#basic-syntax.md-type-checks-and-automatic-casts"  >Type checks and automatic casts</h2><p id="basic-syntax.md-da43aea4" >The <code class="code " id="basic-syntax.md-fa95a306"  >is</code> operator checks if an expression is an instance of a type. If an immutable local variable or property is checked for a specific type, there\'s no need to cast it explicitly:</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-2a104971"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nfun getStringLength(obj: Any): Int? {\n    if (obj is String) {\n        // `obj` is automatically cast to `String` in this branch\n        return obj.length\n    }\n\n    // `obj` is still of type `Any` outside of the type-checked branch\n    return null\n}\n//sampleEnd\n\nfun main() {\n    fun printLength(obj: Any) {\n        println(&quot;Getting the length of \'$obj\'. Result: ${getStringLength(obj) ?: &quot;Error: The object is not a string&quot;} &quot;)\n    }\n    printLength(&quot;Incomprehensibilities&quot;)\n    printLength(1000)\n    printLength(listOf(Any()))\n}\n</div><p id="basic-syntax.md-86dc3aa7" >or</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-948d2801"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nfun getStringLength(obj: Any): Int? {\n    if (obj !is String) return null\n\n    // `obj` is automatically cast to `String` in this branch\n    return obj.length\n}\n//sampleEnd\n\nfun main() {\n    fun printLength(obj: Any) {\n        println(&quot;Getting the length of \'$obj\'. Result: ${getStringLength(obj) ?: &quot;Error: The object is not a string&quot;} &quot;)\n    }\n    printLength(&quot;Incomprehensibilities&quot;)\n    printLength(1000)\n    printLength(listOf(Any()))\n}\n</div><p id="basic-syntax.md-a01d6bc3" >or even</p><div class="code-block" data-lang="kotlin" id="basic-syntax.md-91454732"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nfun getStringLength(obj: Any): Int? {\n    // `obj` is automatically cast to `String` on the right-hand side of `&amp;&amp;`\n    if (obj is String &amp;&amp; obj.length &gt; 0) {\n        return obj.length\n    }\n\n    return null\n}\n//sampleEnd\n\nfun main() {\n    fun printLength(obj: Any) {\n        println(&quot;Getting the length of \'$obj\'. Result: ${getStringLength(obj) ?: &quot;Error: The object is not a string&quot;} &quot;)\n    }\n    printLength(&quot;Incomprehensibilities&quot;)\n    printLength(&quot;&quot;)\n    printLength(1000)\n}\n</div><p id="basic-syntax.md-b3fd4b19" >See <a href="#classes.md" id="basic-syntax.md-feb67a2"   >Classes</a> and <a href="#typecasts.md" id="basic-syntax.md-656f9530"   >Type casts</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="idioms.md"  >Idioms</h1><p id="idioms.md-3d37bf27" >A collection of random and frequently used idioms in Kotlin. If you have a favorite idiom, contribute it by sending a pull request.</p><section class="chapter"  ><h2 id="idioms.md-create-dtos-pojos-pocos" data-toc="idioms#idioms.md-create-dtos-pojos-pocos"  >Create DTOs (POJOs/POCOs)</h2><div class="code-block" data-lang="kotlin" id="idioms.md-90ff606d"         >data class Customer(val name: String, val email: String)\n</div><p id="idioms.md-7f2c88f8" >provides a <code class="code " id="idioms.md-5f11aaed"  >Customer</code> class with the following functionality:</p><ul class="list _ul" id="idioms.md-505fef03"   ><li class="list__item" id="idioms.md-c7c9e815" ><p>getters (and setters in case of <code class="code " id="idioms.md-14133b2b"  >var</code> s) for all properties</p></li><li class="list__item" id="idioms.md-890f7fdd" ><code class="code " id="idioms.md-de3d7415"  >equals()</code></li><li class="list__item" id="idioms.md-e6e081f5" ><code class="code " id="idioms.md-d56c6085"  >hashCode()</code></li><li class="list__item" id="idioms.md-2732f66e" ><code class="code " id="idioms.md-b1aca6c7"  >toString()</code></li><li class="list__item" id="idioms.md-971ec94a" ><code class="code " id="idioms.md-98cca11e"  >copy()</code></li><li class="list__item" id="idioms.md-f9133c53" ><p><code class="code " id="idioms.md-9aa0aa08"  >component1()</code>, <code class="code " id="idioms.md-ee112e74"  >component2()</code>, ..., for all properties (see <a href="#data-classes.md" id="idioms.md-1fad0309"   >Data classes</a>)</p></li></ul></section><section class="chapter"  ><h2 id="idioms.md-default-values-for-function-parameters" data-toc="idioms#idioms.md-default-values-for-function-parameters"  >Default values for function parameters</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-80c8ed3b"         >fun foo(a: Int = 0, b: String = &quot;&quot;) { ... }\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-filter-a-list" data-toc="idioms#idioms.md-filter-a-list"  >Filter a list</h2><div class="code-block" data-lang="kotlin" id="idioms.md-8e2c9f2d"         >val positives = list.filter { x -&gt; x &gt; 0 }\n</div><p id="idioms.md-b68e3fed" >Or alternatively, even shorter:</p><div class="code-block" data-lang="kotlin" id="idioms.md-f45da676"         >val positives = list.filter { it &gt; 0 }\n</div></section><section class="chapter"  ><h2 id="idioms.md-check-the-presence-of-an-element-in-a-collection" data-toc="idioms#idioms.md-check-the-presence-of-an-element-in-a-collection"  >Check the presence of an element in a collection</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-13d7f97a"         >if (&quot;john@example.com&quot; in emailsList) { ... }\n\nif (&quot;jane@example.com&quot; !in emailsList) { ... }\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-string-interpolation" data-toc="idioms#idioms.md-string-interpolation"  >String interpolation</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-e374d68a"         >println(&quot;Name $name&quot;)\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-instance-checks" data-toc="idioms#idioms.md-instance-checks"  >Instance checks</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-361a75fb"         >when (x) {\n    is Foo -&gt; ...\n    is Bar -&gt; ...\n    else   -&gt; ...\n}\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-read-only-list" data-toc="idioms#idioms.md-read-only-list"  >Read-only list</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-ae6bdb4b"         >val list = listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-read-only-map" data-toc="idioms#idioms.md-read-only-map"  >Read-only map</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-75039ee2"         >val map = mapOf(&quot;a&quot; to 1, &quot;b&quot; to 2, &quot;c&quot; to 3)\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-access-a-map-entry" data-toc="idioms#idioms.md-access-a-map-entry"  >Access a map entry</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-dd546ab1"         >println(map[&quot;key&quot;])\nmap[&quot;key&quot;] = value\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-traverse-a-map-or-a-list-of-pairs" data-toc="idioms#idioms.md-traverse-a-map-or-a-list-of-pairs"  >Traverse a map or a list of pairs</h2><div class="code-block" data-lang="kotlin" id="idioms.md-d64d50a3"         >for ((k, v) in map) {\n    println(&quot;$k -&gt; $v&quot;)\n}\n</div><p id="idioms.md-c4c6cd68" ><code class="code " id="idioms.md-a597abae"  >k</code> and <code class="code " id="idioms.md-31654df9"  >v</code> can be any convenient names, such as <code class="code " id="idioms.md-f3e69114"  >name</code> and <code class="code " id="idioms.md-f15ea437"  >age</code>.</p></section><section class="chapter"  ><h2 id="idioms.md-iterate-over-a-range" data-toc="idioms#idioms.md-iterate-over-a-range"  >Iterate over a range</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-b9adbd29"         >for (i in 1..100) { ... }  // closed range: includes 100\nfor (i in 1 until 100) { ... } // half-open range: does not include 100\nfor (x in 2..10 step 2) { ... }\nfor (x in 10 downTo 1) { ... }\nif (x in 1..10) { ... }\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-lazy-property" data-toc="idioms#idioms.md-lazy-property"  >Lazy property</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-4eca0551"         >val p: String by lazy {\n    // compute the string\n}\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-extension-functions" data-toc="idioms#idioms.md-extension-functions"  >Extension functions</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-82d42d0e"         >fun String.spaceToCamelCase() { ... }\n\n&quot;Convert this to camelcase&quot;.spaceToCamelCase()\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-create-a-singleton" data-toc="idioms#idioms.md-create-a-singleton"  >Create a singleton</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-37287f43"         >object Resource {\n    val name = &quot;Name&quot;\n}\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-instantiate-an-abstract-class" data-toc="idioms#idioms.md-instantiate-an-abstract-class"  >Instantiate an abstract class</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-a30ca4f0"         >abstract class MyAbstractClass {\n    abstract fun doSomething()\n    abstract fun sleep()\n}\n\nfun main() {\n    val myObject = object : MyAbstractClass() {\n        override fun doSomething() {\n            // ...\n        }\n\n        override fun sleep() { // ...\n        }\n    }\n    myObject.doSomething()\n}\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-if-not-null-shorthand" data-toc="idioms#idioms.md-if-not-null-shorthand"  >If-not-null shorthand</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-6c1abfc6"         >val files = File(&quot;Test&quot;).listFiles()\n\nprintln(files?.size) // size is printed if files is not null\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-if-not-null-else-shorthand" data-toc="idioms#idioms.md-if-not-null-else-shorthand"  >If-not-null-else shorthand</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-af1fe961"         >val files = File(&quot;Test&quot;).listFiles()\n\nprintln(files?.size ?: &quot;empty&quot;) // if files is null, this prints &quot;empty&quot;\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-execute-a-statement-if-null" data-toc="idioms#idioms.md-execute-a-statement-if-null"  >Execute a statement if null</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-406366a4"         >val values = ...\nval email = values[&quot;email&quot;] ?: throw IllegalStateException(&quot;Email is missing!&quot;)\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-get-first-item-of-a-possibly-empty-collection" data-toc="idioms#idioms.md-get-first-item-of-a-possibly-empty-collection"  >Get first item of a possibly empty collection</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-b4887338"         >val emails = ... // might be empty\nval mainEmail = emails.firstOrNull() ?: &quot;&quot;\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-execute-if-not-null" data-toc="idioms#idioms.md-execute-if-not-null"  >Execute if not null</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-17ac4b79"         >val value = ...\n\nvalue?.let {\n    ... // execute this block if not null\n}\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-map-nullable-value-if-not-null" data-toc="idioms#idioms.md-map-nullable-value-if-not-null"  >Map nullable value if not null</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-3c1ef55"         >val value = ...\n\nval mapped = value?.let { transformValue(it) } ?: defaultValue \n// defaultValue is returned if the value or the transform result is null.\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-return-on-when-statement" data-toc="idioms#idioms.md-return-on-when-statement"  >Return on when statement</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-d6f0e5ae"         >fun transform(color: String): Int {\n    return when (color) {\n        &quot;Red&quot; -&gt; 0\n        &quot;Green&quot; -&gt; 1\n        &quot;Blue&quot; -&gt; 2\n        else -&gt; throw IllegalArgumentException(&quot;Invalid color param value&quot;)\n    }\n}\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-try-catch-expression" data-toc="idioms#idioms.md-try-catch-expression"  >try-catch expression</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-f8ce3014"         >fun test() {\n    val result = try {\n        count()\n    } catch (e: ArithmeticException) {\n        throw IllegalStateException(e)\n    }\n\n    // Working with result\n}\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-if-expression" data-toc="idioms#idioms.md-if-expression"  >if expression</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-5eaebc85"         >fun foo(param: Int) {\n    val result = if (param == 1) {\n        &quot;one&quot;\n    } else if (param == 2) {\n        &quot;two&quot;\n    } else {\n        &quot;three&quot;\n    }\n}\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-builder-style-usage-of-methods-that-return-unit" data-toc="idioms#idioms.md-builder-style-usage-of-methods-that-return-unit"  >Builder-style usage of methods that return Unit</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-5f6d405"         >fun arrayOfMinusOnes(size: Int): IntArray {\n    return IntArray(size).apply { fill(-1) }\n}\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-single-expression-functions" data-toc="idioms#idioms.md-single-expression-functions"  >Single-expression functions</h2><div class="code-block" data-lang="kotlin" id="idioms.md-bdffd01f"         >fun theAnswer() = 42\n</div><p id="idioms.md-2369a4a0" >This is equivalent to</p><div class="code-block" data-lang="kotlin" id="idioms.md-d2c5da9e"         >fun theAnswer(): Int {\n    return 42\n}\n</div><p id="idioms.md-ad9aa10a" >This can be effectively combined with other idioms, leading to shorter code. For example, with the <code class="code " id="idioms.md-95b7c27e"  >when</code> expression:</p><div class="code-block" data-lang="kotlin" id="idioms.md-8e8f80d6"         >fun transform(color: String): Int = when (color) {\n    &quot;Red&quot; -&gt; 0\n    &quot;Green&quot; -&gt; 1\n    &quot;Blue&quot; -&gt; 2\n    else -&gt; throw IllegalArgumentException(&quot;Invalid color param value&quot;)\n}\n</div></section><section class="chapter"  ><h2 id="idioms.md-call-multiple-methods-on-an-object-instance-with" data-toc="idioms#idioms.md-call-multiple-methods-on-an-object-instance-with"  >Call multiple methods on an object instance (with)</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-14521c31"         >class Turtle {\n    fun penDown()\n    fun penUp()\n    fun turn(degrees: Double)\n    fun forward(pixels: Double)\n}\n\nval myTurtle = Turtle()\nwith(myTurtle) { //draw a 100 pix square\n    penDown()\n    for (i in 1..4) {\n        forward(100.0)\n        turn(90.0)\n    }\n    penUp()\n}\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-configure-properties-of-an-object-apply" data-toc="idioms#idioms.md-configure-properties-of-an-object-apply"  >Configure properties of an object (apply)</h2><div class="code-block" data-lang="kotlin" id="idioms.md-367c1c2e"         >val myRectangle = Rectangle().apply {\n    length = 4\n    breadth = 5\n    color = 0xFAFAFA\n}\n</div><p id="idioms.md-dcf01ac4" >This is useful for configuring properties that aren\'t present in the object constructor.</p></section><section class="chapter"  ><h2 id="idioms.md-java-7-s-try-with-resources" data-toc="idioms#idioms.md-java-7-s-try-with-resources"  >Java 7\'s try-with-resources</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-6de84395"         >val stream = Files.newInputStream(Paths.get(&quot;/some/file.txt&quot;))\nstream.buffered().reader().use { reader -&gt;\n    println(reader.readText())\n}\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-generic-function-that-requires-the-generic-type-information" data-toc="idioms#idioms.md-generic-function-that-requires-the-generic-type-information"  >Generic function that requires the generic type information</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-30e584cd"         >//  public final class Gson {\n//     ...\n//     public &lt;T&gt; T fromJson(JsonElement json, Class&lt;T&gt; classOfT) throws JsonSyntaxException {\n//     ...\n\ninline fun &lt;reified T: Any&gt; Gson.fromJson(json: JsonElement): T = this.fromJson(json, T::class.java)\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-nullable-boolean" data-toc="idioms#idioms.md-nullable-boolean"  >Nullable Boolean</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-8247afc0"         >val b: Boolean? = ...\nif (b == true) {\n    ...\n} else {\n    // `b` is false or null\n}\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-swap-two-variables" data-toc="idioms#idioms.md-swap-two-variables"  >Swap two variables</h2><p><div class="code-block" data-lang="kotlin" id="idioms.md-6a6597fa"         >var a = 1\nvar b = 2\na = b.also { b = a }\n</div></p></section><section class="chapter"  ><h2 id="idioms.md-mark-code-as-incomplete-todo" data-toc="idioms#idioms.md-mark-code-as-incomplete-todo"  >Mark code as incomplete (TODO)</h2><p id="idioms.md-248a1708" >Kotlin\'s standard library has a <code class="code " id="idioms.md-c00ebc28"  >TODO()</code> function that will always throw a <code class="code " id="idioms.md-d1ab0bcf"  >NotImplementedError</code>. Its return type is <code class="code " id="idioms.md-add594e8"  >Nothing</code> so it can be used regardless of expected type. There\'s also an overload that accepts a reason parameter:</p><div class="code-block" data-lang="kotlin" id="idioms.md-fd90a2dd"         >fun calcTaxes(): BigDecimal = TODO(&quot;Waiting for feedback from accounting&quot;)\n</div><p id="idioms.md-318c37a1" >IntelliJ IDEA\'s kotlin plugin understands the semantics of <code class="code " id="idioms.md-700e5e00"  >TODO()</code> and automatically adds a code pointer in the TODO tool window.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="coding-conventions.md"  >Coding conventions</h1><p id="coding-conventions.md-ac173ea5" >Commonly known and easy-to-follow coding conventions are vital for any programming language. Here we provide guidelines on the code style and code organization for projects that use Kotlin.</p><section class="chapter"  ><h2 id="coding-conventions.md-configure-style-in-ide" data-toc="coding-conventions#coding-conventions.md-configure-style-in-ide"  >Configure style in IDE</h2><p id="coding-conventions.md-72b70b06" >Two most popular IDEs for Kotlin - <a href="https://www.jetbrains.com/idea/" id="coding-conventions.md-9fb59922"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA</a> and <a href="https://developer.android.com/studio/" id="coding-conventions.md-d67d3851"   data-external="true" rel="noopener noreferrer" >Android Studio</a> provide powerful support for code styling. You can configure them to automatically format your code in consistence with the given code style.</p><section class="chapter"  ><h3 id="coding-conventions.md-apply-the-style-guide" data-toc="coding-conventions#coding-conventions.md-apply-the-style-guide"  >Apply the style guide</h3><ol class="list _decimal" id="coding-conventions.md-4c22655e"   ><li class="list__item" id="coding-conventions.md-a1dac851" ><p>Go to <b id="coding-conventions.md-4b5b2b4c" class=""  >Settings | Editor | Code Style | Kotlin</b>.</p></li><li class="list__item" id="coding-conventions.md-21052f95" ><p>Click <b id="coding-conventions.md-630a5ad4" class=""  >Set from...</b>.</p></li><li class="list__item" id="coding-conventions.md-70527c57" ><p>Select <b id="coding-conventions.md-83e89af2" class=""  >Kotlin style guide</b>.</p></li></ol></section><section class="chapter"  ><h3 id="coding-conventions.md-verify-that-your-code-follows-the-style-guide" data-toc="coding-conventions#coding-conventions.md-verify-that-your-code-follows-the-style-guide"  >Verify that your code follows the style guide</h3><ol class="list _decimal" id="coding-conventions.md-b124ca62"   ><li class="list__item" id="coding-conventions.md-fcb97fae" ><p>Go to <b id="coding-conventions.md-1df0c3e2" class=""  >Settings | Editor | Inspections | Kotlin</b>.</p></li><li class="list__item" id="coding-conventions.md-bc599fa0" ><p>Open <b id="coding-conventions.md-6f4ce618" class=""  >Kotlin | Style issues</b>.</p></li><li class="list__item" id="coding-conventions.md-ae8902f0" ><p>Switch on <b id="coding-conventions.md-da9f940d" class=""  >File is not formatted according to project settings</b> inspection. Additional inspections that verify other issues described in the style guide (such as naming conventions) are enabled by default.</p></li></ol></section></section><section class="chapter"  ><h2 id="coding-conventions.md-source-code-organization" data-toc="coding-conventions#coding-conventions.md-source-code-organization"  >Source code organization</h2><section class="chapter"  ><h3 id="coding-conventions.md-directory-structure" data-toc="coding-conventions#coding-conventions.md-directory-structure"  >Directory structure</h3><p id="coding-conventions.md-f5542eb0" >In pure Kotlin projects, the recommended directory structure follows the package structure with the common root package omitted. For example, if all the code in the project is in the <code class="code " id="coding-conventions.md-3b5bb1ac"  >org.example.kotlin</code> package and its subpackages, files with the <code class="code " id="coding-conventions.md-1e879af4"  >org.example.kotlin</code> package should be placed directly under the source root, and files in <code class="code " id="coding-conventions.md-3d674bea"  >org.example.kotlin.network.socket</code> should be in the <code class="code " id="coding-conventions.md-6973ff24"  >network/socket</code> subdirectory of the source root.</p><aside data-type="note" class="prompt" data-title="" id="coding-conventions.md-80a446f0" ><p id="coding-conventions.md-2118df57" >On JVM: In projects where Kotlin is used together with Java, Kotlin source files should reside in the same source root as the Java source files, and follow the same directory structure: each file should be stored in the directory corresponding to each package statement.</p></aside></section><section class="chapter"  ><h3 id="coding-conventions.md-source-file-names" data-toc="coding-conventions#coding-conventions.md-source-file-names"  >Source file names</h3><p id="coding-conventions.md-9109395d" >If a Kotlin file contains a single class (potentially with related top-level declarations), its name should be the same as the name of the class, with the <code class="code " id="coding-conventions.md-38a9f6b5"  >.kt</code> extension appended. If a file contains multiple classes, or only top-level declarations, choose a name describing what the file contains, and name the file accordingly. Use <a href="https://en.wikipedia.org/wiki/Camel_case" id="coding-conventions.md-d0001417"   data-external="true" rel="noopener noreferrer" >upper camel case</a> with an uppercase first letter (also known as Pascal case), for example, <code class="code " id="coding-conventions.md-b4dbce34"  >ProcessDeclarations.kt</code>.</p><p id="coding-conventions.md-14c30848" >The name of the file should describe what the code in the file does. Therefore, you should avoid using meaningless words such as <code class="code " id="coding-conventions.md-3e7cd42c"  >Util</code> in file names.</p></section><section class="chapter"  ><h3 id="coding-conventions.md-source-file-organization" data-toc="coding-conventions#coding-conventions.md-source-file-organization"  >Source file organization</h3><p id="coding-conventions.md-fced978" >Placing multiple declarations (classes, top-level functions or properties) in the same Kotlin source file is encouraged as long as these declarations are closely related to each other semantically, and the file size remains reasonable (not exceeding a few hundred lines).</p><p id="coding-conventions.md-5957f094" >In particular, when defining extension functions for a class which are relevant for all clients of this class, put them in the same file with the class itself. When defining extension functions that make sense only for a specific client, put them next to the code of that client. Avoid creating files just to hold all extensions of some class.</p></section><section class="chapter"  ><h3 id="coding-conventions.md-class-layout" data-toc="coding-conventions#coding-conventions.md-class-layout"  >Class layout</h3><p id="coding-conventions.md-a5b77fe8" >The contents of a class should go in the following order:</p><ol class="list _decimal" id="coding-conventions.md-9df9aaef"   ><li class="list__item" id="coding-conventions.md-64d23f92" ><p>Property declarations and initializer blocks</p></li><li class="list__item" id="coding-conventions.md-40f3d224" ><p>Secondary constructors</p></li><li class="list__item" id="coding-conventions.md-e65b327e" ><p>Method declarations</p></li><li class="list__item" id="coding-conventions.md-53f803de" ><p>Companion object</p></li></ol><p id="coding-conventions.md-ca1e4950" >Do not sort the method declarations alphabetically or by visibility, and do not separate regular methods from extension methods. Instead, put related stuff together, so that someone reading the class from top to bottom can follow the logic of what\'s happening. Choose an order (either higher-level stuff first, or vice versa) and stick to it.</p><p id="coding-conventions.md-57aec028" >Put nested classes next to the code that uses those classes. If the classes are intended to be used externally and aren\'t referenced inside the class, put them in the end, after the companion object.</p></section><section class="chapter"  ><h3 id="coding-conventions.md-interface-implementation-layout" data-toc="coding-conventions#coding-conventions.md-interface-implementation-layout"  >Interface implementation layout</h3><p id="coding-conventions.md-9e0a0331" >When implementing an interface, keep the implementing members in the same order as members of the interface (if necessary, interspersed with additional private methods used for the implementation)</p></section><section class="chapter"  ><h3 id="coding-conventions.md-overload-layout" data-toc="coding-conventions#coding-conventions.md-overload-layout"  >Overload layout</h3><p id="coding-conventions.md-663eb75f" >Always put overloads next to each other in a class.</p></section></section><section class="chapter"  ><h2 id="coding-conventions.md-naming-rules" data-toc="coding-conventions#coding-conventions.md-naming-rules"  >Naming rules</h2><p id="coding-conventions.md-4c1a4c21" >Package and class naming rules in Kotlin are quite simple:</p><ul class="list _ul" id="coding-conventions.md-808a1bc4"   ><li class="list__item" id="coding-conventions.md-a228268d" ><p id="coding-conventions.md-e14303b0" >Names of packages are always lowercase and do not use underscores (<code class="code " id="coding-conventions.md-8dd4a632"  >org.example.project</code> ). Using multi-word names is generally discouraged, but if you do need to use multiple words, you can either just concatenate them together or use camel case (<code class="code " id="coding-conventions.md-7953d4b7"  >org.example.myProject</code> ).</p></li><li class="list__item" id="coding-conventions.md-63912ad9" ><p id="coding-conventions.md-d9f50b08" >Names of classes and objects start with an uppercase letter and use camel case:</p></li></ul><div class="code-block" data-lang="kotlin" id="coding-conventions.md-1077ba08"         >open class DeclarationProcessor { /*...*/ }\n\nobject EmptyDeclarationProcessor : DeclarationProcessor() { /*...*/ }\n</div><section class="chapter"  ><h3 id="coding-conventions.md-function-names" data-toc="coding-conventions#coding-conventions.md-function-names"  >Function names</h3><p id="coding-conventions.md-96e37f21" >Names of functions, properties and local variables start with a lowercase letter and use camel case and no underscores:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-b8932a9b"         >fun processDeclarations() { /*...*/ }\nvar declarationCount = 1\n</div><p id="coding-conventions.md-e9e3ec7d" >Exception: factory functions used to create instances of classes can have the same name as the abstract return type:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-50a73674"         >interface Foo { /*...*/ }\n\nclass FooImpl : Foo { /*...*/ }\n\nfun Foo(): Foo { return FooImpl() }\n</div></section><section class="chapter"  ><h3 id="coding-conventions.md-names-for-test-methods" data-toc="coding-conventions#coding-conventions.md-names-for-test-methods"  >Names for test methods</h3><p id="coding-conventions.md-acbe81af" >In tests (and <b id="coding-conventions.md-e1cc4506" class=""  >only</b> in tests), you can use method names with spaces enclosed in backticks. Note that such method names are currently not supported by the Android runtime. Underscores in method names are also allowed in test code.</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-3155cfbc"         >class MyTestCase {\n     @Test fun `ensure everything works`() { /*...*/ }\n     \n     @Test fun ensureEverythingWorks_onAndroid() { /*...*/ }\n}\n</div></section><section class="chapter"  ><h3 id="coding-conventions.md-property-names" data-toc="coding-conventions#coding-conventions.md-property-names"  >Property names</h3><p id="coding-conventions.md-96113c1c" >Names of constants (properties marked with <code class="code " id="coding-conventions.md-709ff883"  >const</code>, or top-level or object <code class="code " id="coding-conventions.md-d861f44d"  >val</code> properties with no custom <code class="code " id="coding-conventions.md-2cff825b"  >get</code> function that hold deeply immutable data) should use uppercase underscore-separated names (<a href="https://en.wikipedia.org/wiki/Snake_case" id="coding-conventions.md-87755745"   data-external="true" rel="noopener noreferrer" >screaming snake case</a>) names:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-64f25661"         >const val MAX_COUNT = 8\nval USER_NAME_FIELD = &quot;UserName&quot;\n</div><p id="coding-conventions.md-a0f2b170" >Names of top-level or object properties which hold objects with behavior or mutable data should use camel case names:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-8d232b63"         >val mutableCollection: MutableSet&lt;String&gt; = HashSet()\n</div><p id="coding-conventions.md-a1cb6c1" >Names of properties holding references to singleton objects can use the same naming style as <code class="code " id="coding-conventions.md-b7777589"  >object</code> declarations:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-df3273b2"         >val PersonComparator: Comparator&lt;Person&gt; = /*...*/\n</div><p id="coding-conventions.md-473f5325" >For enum constants, it\'s OK to use either uppercase underscore-separated names (<a href="https://en.wikipedia.org/wiki/Snake_case" id="coding-conventions.md-5387dea9"   data-external="true" rel="noopener noreferrer" >screaming snake case</a>) (<code class="code " id="coding-conventions.md-9f99e95d"  >enum class Color { RED, GREEN }</code>) or upper camel case names, depending on the usage.</p></section><section class="chapter"  ><h3 id="coding-conventions.md-names-for-backing-properties" data-toc="coding-conventions#coding-conventions.md-names-for-backing-properties"  >Names for backing properties</h3><p id="coding-conventions.md-8913cb6a" >If a class has two properties which are conceptually the same but one is part of a public API and another is an implementation detail, use an underscore as the prefix for the name of the private property:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-6019c77f"         >class C {\n    private val _elementList = mutableListOf&lt;Element&gt;()\n\n    val elementList: List&lt;Element&gt;\n         get() = _elementList\n}\n</div></section><section class="chapter"  ><h3 id="coding-conventions.md-choose-good-names" data-toc="coding-conventions#coding-conventions.md-choose-good-names"  >Choose good names</h3><p id="coding-conventions.md-1fd6f148" >The name of a class is usually a noun or a noun phrase explaining what the class <em id="coding-conventions.md-134f4645" class=""  >is</em>: <code class="code " id="coding-conventions.md-35e7561b"  >List</code>, <code class="code " id="coding-conventions.md-38de005c"  >PersonReader</code>.</p><p id="coding-conventions.md-f7b91359" >The name of a method is usually a verb or a verb phrase saying what the method <em id="coding-conventions.md-19fc83d6" class=""  >does</em>: <code class="code " id="coding-conventions.md-4af5dfc2"  >close</code>, <code class="code " id="coding-conventions.md-981ec880"  >readPersons</code>. The name should also suggest if the method is mutating the object or returning a new one. For instance <code class="code " id="coding-conventions.md-10715f75"  >sort</code> is sorting a collection in place, while <code class="code " id="coding-conventions.md-a83bdd31"  >sorted</code> is returning a sorted copy of the collection.</p><p id="coding-conventions.md-ea8ac56f" >The names should make it clear what the purpose of the entity is, so it\'s best to avoid using meaningless words (<code class="code " id="coding-conventions.md-fe432e85"  >Manager</code>, <code class="code " id="coding-conventions.md-c6731cc6"  >Wrapper</code>) in names.</p><p id="coding-conventions.md-b375d3a9" >When using an acronym as part of a declaration name, capitalize it if it consists of two letters (<code class="code " id="coding-conventions.md-6ba96d17"  >IOStream</code> ); capitalize only the first letter if it is longer (<code class="code " id="coding-conventions.md-f6e30220"  >XmlFormatter</code>, <code class="code " id="coding-conventions.md-ccfe2d00"  >HttpInputStream</code> ).</p></section></section><section class="chapter"  ><h2 id="coding-conventions.md-formatting" data-toc="coding-conventions#coding-conventions.md-formatting"  >Formatting</h2><section class="chapter"  ><h3 id="coding-conventions.md-indentation" data-toc="coding-conventions#coding-conventions.md-indentation"  >Indentation</h3><p id="coding-conventions.md-f73537a8" >Use four spaces for indentation. Do not use tabs.</p><p id="coding-conventions.md-c901e6a8" >For curly braces, put the opening brace in the end of the line where the construct begins, and the closing brace on a separate line aligned horizontally with the opening construct.</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-f61761a8"         >if (elements != null) {\n    for (element in elements) {\n        // ...\n    }\n}\n</div><aside data-type="note" class="prompt" data-title="" id="coding-conventions.md-b63fe592" ><p id="coding-conventions.md-c2385bd2" >In Kotlin, semicolons are optional, and therefore line breaks are significant. The language design assumes Java-style braces, and you may encounter surprising behavior if you try to use a different formatting style.</p></aside></section><section class="chapter"  ><h3 id="coding-conventions.md-horizontal-whitespace" data-toc="coding-conventions#coding-conventions.md-horizontal-whitespace"  >Horizontal whitespace</h3><ul class="list _ul" id="coding-conventions.md-c2660a5c"   ><li class="list__item" id="coding-conventions.md-9e081bd9" ><p id="coding-conventions.md-af0bc818" >Put spaces around binary operators (<code class="code " id="coding-conventions.md-7cbfd66a"  >a + b</code> ). Exception: don\'t put spaces around the &quot;range to&quot; operator (<code class="code " id="coding-conventions.md-ce41a851"  >0..i</code> ).</p></li><li class="list__item" id="coding-conventions.md-be46e9d4" ><p id="coding-conventions.md-2282ce12" >Do not put spaces around unary operators (<code class="code " id="coding-conventions.md-86bd74f5"  >a++</code> ).</p></li><li class="list__item" id="coding-conventions.md-b5ad9d59" ><p id="coding-conventions.md-f815c56a" >Put spaces between control flow keywords (<code class="code " id="coding-conventions.md-5c373bdb"  >if</code>, <code class="code " id="coding-conventions.md-818c461c"  >when</code>, <code class="code " id="coding-conventions.md-26dee10f"  >for</code>, and <code class="code " id="coding-conventions.md-30c5df99"  >while</code>) and the corresponding opening parenthesis.</p></li><li class="list__item" id="coding-conventions.md-45c62ed3" ><p id="coding-conventions.md-3004ddd6" >Do not put a space before an opening parenthesis in a primary constructor declaration, method declaration or method call.</p></li></ul><div class="code-block" data-lang="kotlin" id="coding-conventions.md-5c2fe12a"         >class A(val x: Int)\n\nfun foo(x: Int) { ... }\n\nfun bar() {\n    foo(1)\n}\n</div><ul class="list _ul" id="coding-conventions.md-2230fb56"   ><li class="list__item" id="coding-conventions.md-96bf5ade" ><p id="coding-conventions.md-4f4f37c6" >Never put a space after <code class="code " id="coding-conventions.md-6b13be15"  >(</code>, <code class="code " id="coding-conventions.md-b127308c"  >[</code>, or before <code class="code " id="coding-conventions.md-7e46ab12"  >]</code>, <code class="code " id="coding-conventions.md-4505dbe1"  >)</code></p></li><li class="list__item" id="coding-conventions.md-fb283cbe" ><p id="coding-conventions.md-c6c75b64" >Never put a space around <code class="code " id="coding-conventions.md-2c62b9ab"  >.</code> or <code class="code " id="coding-conventions.md-42542953"  >?.</code>: <code class="code " id="coding-conventions.md-339481ae"  >foo.bar().filter { it &gt; 2 }.joinToString()</code>, <code class="code " id="coding-conventions.md-4c58bbc7"  >foo?.bar()</code></p></li><li class="list__item" id="coding-conventions.md-18a65342" ><p id="coding-conventions.md-b1f3eba3" >Put a space after <code class="code " id="coding-conventions.md-192fe959"  >//</code>: <code class="code " id="coding-conventions.md-6da08920"  >// This is a comment</code></p></li><li class="list__item" id="coding-conventions.md-5412793e" ><p id="coding-conventions.md-fe8c9e14" >Do not put spaces around angle brackets used to specify type parameters: <code class="code " id="coding-conventions.md-73cd91b7"  >class Map&lt;K, V&gt; { ... }</code></p></li><li class="list__item" id="coding-conventions.md-44167e66" ><p id="coding-conventions.md-2ff1978a" >Do not put spaces around <code class="code " id="coding-conventions.md-2a39014e"  >::</code>: <code class="code " id="coding-conventions.md-81be6912"  >Foo::class</code>, <code class="code " id="coding-conventions.md-a207a259"  >String::length</code></p></li><li class="list__item" id="coding-conventions.md-9243e188" ><p id="coding-conventions.md-651de73e" >Do not put a space before <code class="code " id="coding-conventions.md-3f64d621"  >?</code> used to mark a nullable type: <code class="code " id="coding-conventions.md-7fe6d00b"  >String?</code></p></li></ul><p id="coding-conventions.md-2d600a45" >As a general rule, avoid horizontal alignment of any kind. Renaming an identifier to a name with a different length should not affect the formatting of either the declaration or any of the usages.</p></section><section class="chapter"  ><h3 id="coding-conventions.md-colon" data-toc="coding-conventions#coding-conventions.md-colon"  >Colon</h3><p id="coding-conventions.md-a475939" >Put a space before <code class="code " id="coding-conventions.md-22d24d56"  >:</code> in the following cases:</p><ul class="list _ul" id="coding-conventions.md-f3fec3a1"   ><li class="list__item" id="coding-conventions.md-aaeacbed" ><p>when it\'s used to separate a type and a supertype</p></li><li class="list__item" id="coding-conventions.md-c5af7c67" ><p>when delegating to a superclass constructor or a different constructor of the same class</p></li><li class="list__item" id="coding-conventions.md-c2186774" ><p>after the <code class="code " id="coding-conventions.md-5b1af5a"  >object</code> keyword</p></li></ul><p id="coding-conventions.md-957af280" >Don\'t put a space before <code class="code " id="coding-conventions.md-66a4d85e"  >:</code> when it separates a declaration and its type.</p><p id="coding-conventions.md-a37c4d63" >Always put a space after <code class="code " id="coding-conventions.md-c5ae9cd0"  >:</code>.</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-3f66ddc5"         >abstract class Foo&lt;out T : Any&gt; : IFoo {\n    abstract fun foo(a: Int): T\n}\n\nclass FooImpl : Foo() {\n    constructor(x: String) : this(x) { /*...*/ }\n    \n    val x = object : IFoo { /*...*/ } \n} \n</div></section><section class="chapter"  ><h3 id="coding-conventions.md-class-headers" data-toc="coding-conventions#coding-conventions.md-class-headers"  >Class headers</h3><p id="coding-conventions.md-2cfbe40d" >Classes with a few primary constructor parameters can be written in a single line:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-3a548d47"         >class Person(id: Int, name: String)\n</div><p id="coding-conventions.md-c451e7e" >Classes with longer headers should be formatted so that each primary constructor parameter is in a separate line with indentation. Also, the closing parenthesis should be on a new line. If you use inheritance, the superclass constructor call or the list of implemented interfaces should be located on the same line as the parenthesis:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-1b93ae7f"         >class Person(\n    id: Int,\n    name: String,\n    surname: String\n) : Human(id, name) { /*...*/ }\n</div><p id="coding-conventions.md-7fd1fcdb" >For multiple interfaces, the superclass constructor call should be located first and then each interface should be located in a different line:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-ef46acce"         >class Person(\n    id: Int,\n    name: String,\n    surname: String\n) : Human(id, name),\n    KotlinMaker { /*...*/ }\n</div><p id="coding-conventions.md-a841581" >For classes with a long supertype list, put a line break after the colon and align all supertype names horizontally:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-75ed92de"         >class MyFavouriteVeryLongClassHolder :\n    MyLongHolder&lt;MyFavouriteVeryLongClass&gt;(),\n    SomeOtherInterface,\n    AndAnotherOne {\n\n    fun foo() { /*...*/ }\n}\n</div><p id="coding-conventions.md-a0662c0f" >To clearly separate the class header and body when the class header is long, either put a blank line following the class header (as in the example above), or put the opening curly brace on a separate line:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-b81b0cc9"         >class MyFavouriteVeryLongClassHolder :\n    MyLongHolder&lt;MyFavouriteVeryLongClass&gt;(),\n    SomeOtherInterface,\n    AndAnotherOne \n{\n    fun foo() { /*...*/ }\n}\n</div><p id="coding-conventions.md-72588fa2" >Use regular indent (four spaces) for constructor parameters. This ensures that properties declared in the primary constructor have the same indentation as properties declared in the body of a class.</p></section><section class="chapter"  ><h3 id="coding-conventions.md-modifiers-order" data-toc="coding-conventions#coding-conventions.md-modifiers-order"  >Modifiers order</h3><p id="coding-conventions.md-67b3e638" >If a declaration has multiple modifiers, always put them in the following order:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-64ee5e71"         >public / protected / private / internal\nexpect / actual\nfinal / open / abstract / sealed / const\nexternal\noverride\nlateinit\ntailrec\nvararg\nsuspend\ninner\nenum / annotation / fun // as a modifier in `fun interface`companion\ninline\ninfix\noperator\ndata\n</div><p id="coding-conventions.md-b7b2f1fe" >Place all annotations before modifiers:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-99ae0194"         >@Named(&quot;Foo&quot;)\nprivate val foo: Foo\n</div><p id="coding-conventions.md-6f3b17f8" >Unless you\'re working on a library, omit redundant modifiers (for example, <code class="code " id="coding-conventions.md-8c95f232"  >public</code> ).</p></section><section class="chapter"  ><h3 id="coding-conventions.md-annotations" data-toc="coding-conventions#coding-conventions.md-annotations"  >Annotations</h3><p id="coding-conventions.md-3b15c73b" >Place annotations on separate lines before the declaration to which they are attached, and with the same indentation:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-64e16179"         >@Target(AnnotationTarget.PROPERTY)\nannotation class JsonExclude\n</div><p id="coding-conventions.md-96718dd6" >Annotations without arguments may be placed on the same line:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-293cbf08"         >@JsonExclude @JvmField\nvar x: String\n</div><p id="coding-conventions.md-1a47ecae" >A single annotation without arguments may be placed on the same line as the corresponding declaration:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-79ece5aa"         >@Test fun foo() { /*...*/ }\n</div></section><section class="chapter"  ><h3 id="coding-conventions.md-file-annotations" data-toc="coding-conventions#coding-conventions.md-file-annotations"  >File annotations</h3><p id="coding-conventions.md-5e93f548" >File annotations are placed after the file comment (if any), before the <code class="code " id="coding-conventions.md-ab5bfc9d"  >package</code> statement, and are separated from <code class="code " id="coding-conventions.md-8beea874"  >package</code> with a blank line (to emphasize the fact that they target the file and not the package).</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-c7ca6bb7"         >/** License, copyright and whatever */\n@file:JvmName(&quot;FooBar&quot;)\n\npackage foo.bar\n</div></section><section class="chapter"  ><h3 id="coding-conventions.md-functions" data-toc="coding-conventions#coding-conventions.md-functions"  >Functions</h3><p id="coding-conventions.md-3d50b837" >If the function signature doesn\'t fit on a single line, use the following syntax:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-b2e8ab29"         >fun longMethodName(\n    argument: ArgumentType = defaultValue,\n    argument2: AnotherArgumentType,\n): ReturnType {\n    // body\n}\n</div><p id="coding-conventions.md-2eea0c6f" >Use regular indent (four spaces) for function parameters. It helps ensure consistency with constructor parameters.</p><p id="coding-conventions.md-98e6cbac" >Prefer using an expression body for functions with the body consisting of a single expression.</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-cf6188f6"         >fun foo(): Int {     // bad\n    return 1 \n}\n\nfun foo() = 1        // good\n</div></section><section class="chapter"  ><h3 id="coding-conventions.md-expression-bodies" data-toc="coding-conventions#coding-conventions.md-expression-bodies"  >Expression bodies</h3><p id="coding-conventions.md-2b61625d" >If the function has an expression body whose first line doesn\'t fit on the same line as the declaration, put the <code class="code " id="coding-conventions.md-d646e55c"  >=</code> sign on the first line and indent the expression body by four spaces.</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-84609b96"         >fun f(x: String, y: String, z: String) =\n    veryLongFunctionCallWithManyWords(andLongParametersToo(), x, y, z)\n</div></section><section class="chapter"  ><h3 id="coding-conventions.md-properties" data-toc="coding-conventions#coding-conventions.md-properties"  >Properties</h3><p id="coding-conventions.md-a99d396f" >For very simple read-only properties, consider one-line formatting:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-d3afaa82"         >val isEmpty: Boolean get() = size == 0\n</div><p id="coding-conventions.md-3f780723" >For more complex properties, always put <code class="code " id="coding-conventions.md-b4712745"  >get</code> and <code class="code " id="coding-conventions.md-2f3519e"  >set</code> keywords on separate lines:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-f26343e2"         >val foo: String\n    get() { /*...*/ }\n</div><p id="coding-conventions.md-99e78a71" >For properties with an initializer, if the initializer is long, add a line break after the <code class="code " id="coding-conventions.md-3906a052"  >=</code> sign and indent the initializer by four spaces:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-22e61943"         >private val defaultCharset: Charset? =\n    EncodingRegistry.getInstance().getDefaultCharsetForPropertiesFiles(file)\n</div></section><section class="chapter"  ><h3 id="coding-conventions.md-control-flow-statements" data-toc="coding-conventions#coding-conventions.md-control-flow-statements"  >Control flow statements</h3><p id="coding-conventions.md-e500066" >If the condition of an <code class="code " id="coding-conventions.md-cee5cf83"  >if</code> or <code class="code " id="coding-conventions.md-d882ca63"  >when</code> statement is multiline, always use curly braces around the body of the statement. Indent each subsequent line of the condition by four spaces relative to statement begin. Put the closing parentheses of the condition together with the opening curly brace on a separate line:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-582f08d3"         >if (!component.isSyncing &amp;&amp;\n    !hasAnyKotlinRuntimeInScope(module)\n) {\n    return createKotlinNotConfiguredPanel(module)\n}\n</div><p id="coding-conventions.md-68fd1380" >This helps align the condition and statement bodies.</p><p id="coding-conventions.md-3055a45" >Put the <code class="code " id="coding-conventions.md-e601a7ad"  >else</code>, <code class="code " id="coding-conventions.md-3584d5af"  >catch</code>, <code class="code " id="coding-conventions.md-25defc4b"  >finally</code> keywords, as well as the <code class="code " id="coding-conventions.md-634fdb9b"  >while</code> keyword of a <code class="code " id="coding-conventions.md-b8bfe9ba"  >do-while</code> loop, on the same line as the preceding curly brace:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-5e398d98"         >if (condition) {\n    // body\n} else {\n    // else part\n}\n\ntry {\n    // body\n} finally {\n    // cleanup\n}\n</div><p id="coding-conventions.md-5d436def" >In a <code class="code " id="coding-conventions.md-1ab1fbfd"  >when</code> statement, if a branch is more than a single line, consider separating it from adjacent case blocks with a blank line:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-1b712a6c"         >private fun parsePropertyValue(propName: String, token: Token) {\n    when (token) {\n        is Token.ValueToken -&gt;\n            callback.visitValue(propName, token.value)\n\n        Token.LBRACE -&gt; { // ...\n        }\n    }\n}\n</div><p id="coding-conventions.md-6cda7561" >Put short branches on the same line as the condition, without braces.</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-5668da4a"         >when (foo) {\n    true -&gt; bar() // good\n    false -&gt; { baz() } // bad\n}\n</div></section><section class="chapter"  ><h3 id="coding-conventions.md-method-calls" data-toc="coding-conventions#coding-conventions.md-method-calls"  >Method calls</h3><p id="coding-conventions.md-3bc0bb49" >In long argument lists, put a line break after the opening parenthesis. Indent arguments by four spaces. Group multiple closely related arguments on the same line.</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-58d23141"         >drawSquare(\n    x = 10, y = 10,\n    width = 100, height = 100,\n    fill = true\n)\n</div><p id="coding-conventions.md-8a629ee5" >Put spaces around the <code class="code " id="coding-conventions.md-2fb182cc"  >=</code> sign separating the argument name and value.</p></section><section class="chapter"  ><h3 id="coding-conventions.md-wrap-chained-calls" data-toc="coding-conventions#coding-conventions.md-wrap-chained-calls"  >Wrap chained calls</h3><p id="coding-conventions.md-89d479d4" >When wrapping chained calls, put the <code class="code " id="coding-conventions.md-dcc3c8d7"  >.</code> character or the <code class="code " id="coding-conventions.md-702c6a3b"  >?.</code> operator on the next line, with a single indent:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-e07c33a2"         >val anchor = owner\n    ?.firstChild!!\n    .siblings(forward = true)\n    .dropWhile { it is PsiComment || it is PsiWhiteSpace }\n</div><p id="coding-conventions.md-b7a2fec1" >The first call in the chain usually should have a line break before it, but it\'s OK to omit it if the code makes more sense that way.</p></section><section class="chapter"  ><h3 id="coding-conventions.md-lambdas" data-toc="coding-conventions#coding-conventions.md-lambdas"  >Lambdas</h3><p id="coding-conventions.md-eafee8b2" >In lambda expressions, spaces should be used around the curly braces, as well as around the arrow which separates the parameters from the body. If a call takes a single lambda, pass it outside of parentheses whenever possible.</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-88dd6628"         >list.filter { it &gt; 10 }\n</div><p id="coding-conventions.md-ac2b0d16" >If assigning a label for a lambda, do not put a space between the label and the opening curly brace:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-da430f96"         >fun foo() {\n    ints.forEach lit@{\n        // ...\n    }\n}\n</div><p id="coding-conventions.md-e63b373d" >When declaring parameter names in a multiline lambda, put the names on the first line, followed by the arrow and the newline:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-284b43d4"         >appendCommaSeparated(properties) { prop -&gt;\n    val propertyValue = prop.get(obj)  // ...\n}\n</div><p id="coding-conventions.md-6382ff34" >If the parameter list is too long to fit on a line, put the arrow on a separate line:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-3b196d0b"         >foo {\n   context: Context,\n   environment: Env\n   -&gt;\n   context.configureEnv(environment)\n}\n</div></section><section class="chapter"  ><h3 id="coding-conventions.md-trailing-commas" data-toc="coding-conventions#coding-conventions.md-trailing-commas"  >Trailing commas</h3><p id="coding-conventions.md-88ad280e" >A trailing comma is a comma symbol after the last item of a series of elements:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-c70fd1c1"         >class Person(\n    val firstName: String,\n    val lastName: String,\n    val age: Int, // trailing comma\n)\n</div><p id="coding-conventions.md-a714dbb1" >Using trailing commas has several benefits:</p><ul class="list _ul" id="coding-conventions.md-3ad84925"   ><li class="list__item" id="coding-conventions.md-41513a6e" ><p>It makes version-control diffs cleaner – as all the focus is on the changed value.</p></li><li class="list__item" id="coding-conventions.md-6f6d31f8" ><p>It makes it easy to add and reorder elements – there is no need to add or delete the comma if you manipulate elements.</p></li><li class="list__item" id="coding-conventions.md-5d0b2208" ><p>It simplifies code generation, for example, for object initializers. The last element can also have a comma.</p></li></ul><p id="coding-conventions.md-c8b78a83" >Trailing commas are entirely optional – your code will still work without them. The Kotlin style guide encourages the use of trailing commas at the declaration site and leaves it at your discretion for the call site.</p><p id="coding-conventions.md-6cce1c17" >To enable trailing commas in the IntelliJ IDEA formatter, go to <b id="coding-conventions.md-2582bf84" class=""  >Settings | Editor | Code Style | Kotlin</b>, open the <b id="coding-conventions.md-b4c5e9e6" class=""  >Other</b> tab and select the <b id="coding-conventions.md-cc9d70f8" class=""  >Use trailing comma</b> option.</p><section class="chapter"  ><div class="collapse" ><div class="collapse__title"  ><h4 id="coding-conventions.md-enumerations" data-toc="coding-conventions#coding-conventions.md-enumerations"  >Enumerations</h4></div><div class="collapse__content"><p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-1d0fb43f"         >enum class Direction {\n    NORTH,\n    SOUTH,\n    WEST,\n    EAST, // trailing comma\n}\n</div></p></div></div></section><section class="chapter"  ><div class="collapse" ><div class="collapse__title"  ><h4 id="coding-conventions.md-value-arguments" data-toc="coding-conventions#coding-conventions.md-value-arguments"  >Value arguments</h4></div><div class="collapse__content"><p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-cfe65724"         >fun shift(x: Int, y: Int) { /*...*/ }\nshift(\n    25,\n    20, // trailing comma\n)\nval colors = listOf(\n    &quot;red&quot;,\n    &quot;green&quot;,\n    &quot;blue&quot;, // trailing comma\n)\n</div></p></div></div></section><section class="chapter"  ><div class="collapse" ><div class="collapse__title"  ><h4 id="coding-conventions.md-class-properties-and-parameters" data-toc="coding-conventions#coding-conventions.md-class-properties-and-parameters"  >Class properties and parameters</h4></div><div class="collapse__content"><p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-5608fc8"         >class Customer(\n    val name: String,\n    val lastName: String, // trailing comma\n)\nclass Customer(\n    val name: String,\n    lastName: String, // trailing comma\n)\n</div></p></div></div></section><section class="chapter"  ><div class="collapse" ><div class="collapse__title"  ><h4 id="coding-conventions.md-function-value-parameters" data-toc="coding-conventions#coding-conventions.md-function-value-parameters"  >Function value parameters</h4></div><div class="collapse__content"><p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-5e546f59"         >fun powerOf(\n    number: Int, \n    exponent: Int, // trailing comma\n) { /*...*/ }\nconstructor(\n    x: Comparable&lt;Number&gt;,\n    y: Iterable&lt;Number&gt;, // trailing comma\n) {}\nfun print(\n    vararg quantity: Int,\n    description: String, // trailing comma\n) {}\n</div></p></div></div></section><section class="chapter"  ><div class="collapse" ><div class="collapse__title"  ><h4 id="coding-conventions.md-parameters-with-optional-type-including-setters" data-toc="coding-conventions#coding-conventions.md-parameters-with-optional-type-including-setters"  >Parameters with optional type (including setters)</h4></div><div class="collapse__content"><p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-a4595ad5"         >val sum: (Int, Int, Int) -&gt; Int = fun(\n    x,\n    y,\n    z, // trailing comma\n): Int {\n    return x + y + x\n}\nprintln(sum(8, 8, 8))\n</div></p></div></div></section><section class="chapter"  ><div class="collapse" ><div class="collapse__title"  ><h4 id="coding-conventions.md-indexing-suffix" data-toc="coding-conventions#coding-conventions.md-indexing-suffix"  >Indexing suffix</h4></div><div class="collapse__content"><p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-b6bcf73b"         >class Surface {\n    operator fun get(x: Int, y: Int) = 2 * x + 4 * y - 10\n}\nfun getZValue(mySurface: Surface, xValue: Int, yValue: Int) =\n    mySurface[\n        xValue,\n        yValue, // trailing comma\n    ]\n</div></p></div></div></section><section class="chapter"  ><div class="collapse" ><div class="collapse__title"  ><h4 id="coding-conventions.md-parameters-in-lambdas" data-toc="coding-conventions#coding-conventions.md-parameters-in-lambdas"  >Parameters in lambdas</h4></div><div class="collapse__content"><p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-17d307e1"         >fun main() {\n    val x = {\n            x: Comparable&lt;Number&gt;,\n            y: Iterable&lt;Number&gt;, // trailing comma\n        -&gt;\n        println(&quot;1&quot;)\n    }\n    println(x)\n}\n</div></p></div></div></section><section class="chapter"  ><div class="collapse" ><div class="collapse__title"  ><h4 id="coding-conventions.md-when-entry" data-toc="coding-conventions#coding-conventions.md-when-entry"  >when entry</h4></div><div class="collapse__content"><p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-68644e97"         >fun isReferenceApplicable(myReference: KClass&lt;*&gt;) = when (myReference) {\n    Comparable::class,\n    Iterable::class,\n    String::class, // trailing comma\n        -&gt; true\n    else -&gt; false\n}\n</div></p></div></div></section><section class="chapter"  ><div class="collapse" ><div class="collapse__title"  ><h4 id="coding-conventions.md-collection-literals-in-annotations" data-toc="coding-conventions#coding-conventions.md-collection-literals-in-annotations"  >Collection literals (in annotations)</h4></div><div class="collapse__content"><p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-afadc00a"         >annotation class ApplicableFor(val services: Array&lt;String&gt;)\n@ApplicableFor([\n    &quot;serializer&quot;,\n    &quot;balancer&quot;,\n    &quot;database&quot;,\n    &quot;inMemoryCache&quot;, // trailing comma\n])\nfun run() {}\n</div></p></div></div></section><section class="chapter"  ><div class="collapse" ><div class="collapse__title"  ><h4 id="coding-conventions.md-type-arguments" data-toc="coding-conventions#coding-conventions.md-type-arguments"  >Type arguments</h4></div><div class="collapse__content"><p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-1a8eb0b"         >fun &lt;T1, T2&gt; foo() {}\nfun main() {\n    foo&lt;\n            Comparable&lt;Number&gt;,\n            Iterable&lt;Number&gt;, // trailing comma\n            &gt;()\n}\n</div></p></div></div></section><section class="chapter"  ><div class="collapse" ><div class="collapse__title"  ><h4 id="coding-conventions.md-type-parameters" data-toc="coding-conventions#coding-conventions.md-type-parameters"  >Type parameters</h4></div><div class="collapse__content"><p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-ac1afb40"         >class MyMap&lt;\n        MyKey,\n        MyValue, // trailing comma\n        &gt; {}\n</div></p></div></div></section><section class="chapter"  ><div class="collapse" ><div class="collapse__title"  ><h4 id="coding-conventions.md-destructuring-declarations" data-toc="coding-conventions#coding-conventions.md-destructuring-declarations"  >Destructuring declarations</h4></div><div class="collapse__content"><p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-5ff1ee0f"         >data class Car(val manufacturer: String, val model: String, val year: Int)\nval myCar = Car(&quot;Tesla&quot;, &quot;Y&quot;, 2019)\nval (\n    manufacturer,\n    model,\n    year, // trailing comma\n) = myCar\nval cars = listOf&lt;Car&gt;()\nfun printMeanValue() {\n    var meanValue: Int = 0\n    for ((\n        _,\n        _,\n        year, // trailing comma\n    ) in cars) {\n        meanValue += year\n    }\n    println(meanValue/cars.size)\n}\nprintMeanValue()\n</div></p></div></div></section></section></section><section class="chapter"  ><h2 id="coding-conventions.md-documentation-comments" data-toc="coding-conventions#coding-conventions.md-documentation-comments"  >Documentation comments</h2><p id="coding-conventions.md-d64ebf15" >For longer documentation comments, place the opening <code class="code " id="coding-conventions.md-bd4f4812"  >/**</code> on a separate line and begin each subsequent line with an asterisk:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-c772dde3"         >/**\n * This is a documentation comment\n * on multiple lines.\n */\n</div><p id="coding-conventions.md-67d695e6" >Short comments can be placed on a single line:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-7485be04"         >/** This is a short documentation comment. */\n</div><p id="coding-conventions.md-3d04c533" >Generally, avoid using <code class="code " id="coding-conventions.md-f92f522"  >@param</code> and <code class="code " id="coding-conventions.md-50f71332"  >@return</code> tags. Instead, incorporate the description of parameters and return values directly into the documentation comment, and add links to parameters wherever they are mentioned. Use <code class="code " id="coding-conventions.md-9d6a3520"  >@param</code> and <code class="code " id="coding-conventions.md-7f03df2b"  >@return</code> only when a lengthy description is required which doesn\'t fit into the flow of the main text.</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-b648626f"         >// Avoid doing this:\n\n/**\n * Returns the absolute value of the given number.\n * @param number The number to return the absolute value for.\n * @return The absolute value.\n */\nfun abs(number: Int) { /*...*/ }\n\n// Do this instead:\n\n/**\n * Returns the absolute value of the given [number].\n */\nfun abs(number: Int) { /*...*/ }\n</div></section><section class="chapter"  ><h2 id="coding-conventions.md-avoid-redundant-constructs" data-toc="coding-conventions#coding-conventions.md-avoid-redundant-constructs"  >Avoid redundant constructs</h2><p id="coding-conventions.md-ae05dbf2" >In general, if a certain syntactic construction in Kotlin is optional and highlighted by the IDE as redundant, you should omit it in your code. Do not leave unnecessary syntactic elements in code just &quot;for clarity&quot;.</p><section class="chapter"  ><h3 id="coding-conventions.md-unit-return-type" data-toc="coding-conventions#coding-conventions.md-unit-return-type"  >Unit return type</h3><p id="coding-conventions.md-29b72d13" >If a function returns Unit, the return type should be omitted:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-a98116e4"         >fun foo() { // &quot;: Unit&quot; is omitted here\n\n}\n</div></section><section class="chapter"  ><h3 id="coding-conventions.md-semicolons" data-toc="coding-conventions#coding-conventions.md-semicolons"  >Semicolons</h3><p id="coding-conventions.md-f209fe" >Omit semicolons whenever possible.</p></section><section class="chapter"  ><h3 id="coding-conventions.md-string-templates" data-toc="coding-conventions#coding-conventions.md-string-templates"  >String templates</h3><p id="coding-conventions.md-d8f389de" >Don\'t use curly braces when inserting a simple variable into a string template. Use curly braces only for longer expressions.</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-f4b58469"         >println(&quot;$name has ${children.size} children&quot;)\n</div></section></section><section class="chapter"  ><h2 id="coding-conventions.md-idiomatic-use-of-language-features" data-toc="coding-conventions#coding-conventions.md-idiomatic-use-of-language-features"  >Idiomatic use of language features</h2><section class="chapter"  ><h3 id="coding-conventions.md-immutability" data-toc="coding-conventions#coding-conventions.md-immutability"  >Immutability</h3><p id="coding-conventions.md-9199bf4d" >Prefer using immutable data to mutable. Always declare local variables and properties as <code class="code " id="coding-conventions.md-62de61c5"  >val</code> rather than <code class="code " id="coding-conventions.md-cda93584"  >var</code> if they are not modified after initialization.</p><p id="coding-conventions.md-59f126d9" >Always use immutable collection interfaces (<code class="code " id="coding-conventions.md-f3e3654a"  >Collection</code>, <code class="code " id="coding-conventions.md-a914bdd1"  >List</code>, <code class="code " id="coding-conventions.md-aa318d0b"  >Set</code>, <code class="code " id="coding-conventions.md-208929b6"  >Map</code>) to declare collections which are not mutated. When using factory functions to create collection instances, always use functions that return immutable collection types when possible:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-b036ee0a"         >// Bad: use of mutable collection type for value which will not be mutated\nfun validateValue(actualValue: String, allowedValues: HashSet&lt;String&gt;) { ... }\n\n// Good: immutable collection type used instead\nfun validateValue(actualValue: String, allowedValues: Set&lt;String&gt;) { ... }\n\n// Bad: arrayListOf() returns ArrayList&lt;T&gt;, which is a mutable collection type\nval allowedValues = arrayListOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)\n\n// Good: listOf() returns List&lt;T&gt;\nval allowedValues = listOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)\n</div></section><section class="chapter"  ><h3 id="coding-conventions.md-default-parameter-values" data-toc="coding-conventions#coding-conventions.md-default-parameter-values"  >Default parameter values</h3><p id="coding-conventions.md-9765aa4c" >Prefer declaring functions with default parameter values to declaring overloaded functions.</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-12cbd5fa"         >// Bad\nfun foo() = foo(&quot;a&quot;)\nfun foo(a: String) { /*...*/ }\n\n// Good\nfun foo(a: String = &quot;a&quot;) { /*...*/ }\n</div></section><section class="chapter"  ><h3 id="coding-conventions.md-type-aliases" data-toc="coding-conventions#coding-conventions.md-type-aliases"  >Type aliases</h3><p id="coding-conventions.md-72e83ea9" >If you have a functional type or a type with type parameters which is used multiple times in a codebase, prefer defining a type alias for it:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-6a5099ab"         >typealias MouseClickHandler = (Any, MouseEvent) -&gt; Unit\ntypealias PersonIndex = Map&lt;String, Person&gt;\n</div><p id="coding-conventions.md-c7f81207" >If you use a private or internal type alias for avoiding name collision, prefer the <code class="code " id="coding-conventions.md-555d19b1"  >import … as …</code> mentioned in <a href="#packages.md" id="coding-conventions.md-73905da0"   >Packages and Imports</a>.</p></section><section class="chapter"  ><h3 id="coding-conventions.md-lambda-parameters" data-toc="coding-conventions#coding-conventions.md-lambda-parameters"  >Lambda parameters</h3><p id="coding-conventions.md-24289825" >In lambdas which are short and not nested, it\'s recommended to use the <code class="code " id="coding-conventions.md-f2f57b8d"  >it</code> convention instead of declaring the parameter explicitly. In nested lambdas with parameters, always declare parameters explicitly.</p></section><section class="chapter"  ><h3 id="coding-conventions.md-returns-in-a-lambda" data-toc="coding-conventions#coding-conventions.md-returns-in-a-lambda"  >Returns in a lambda</h3><p id="coding-conventions.md-53161ef5" >Avoid using multiple labeled returns in a lambda. Consider restructuring the lambda so that it will have a single exit point. If that\'s not possible or not clear enough, consider converting the lambda into an anonymous function.</p><p id="coding-conventions.md-54a29a06" >Do not use a labeled return for the last statement in a lambda.</p></section><section class="chapter"  ><h3 id="coding-conventions.md-named-arguments" data-toc="coding-conventions#coding-conventions.md-named-arguments"  >Named arguments</h3><p id="coding-conventions.md-f0458867" >Use the named argument syntax when a method takes multiple parameters of the same primitive type, or for parameters of <code class="code " id="coding-conventions.md-67148375"  >Boolean</code> type, unless the meaning of all parameters is absolutely clear from context.</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-dac0f7ac"         >drawSquare(x = 10, y = 10, width = 100, height = 100, fill = true)\n</div></section><section class="chapter"  ><h3 id="coding-conventions.md-conditional-statements" data-toc="coding-conventions#coding-conventions.md-conditional-statements"  >Conditional statements</h3><p id="coding-conventions.md-20f29735" >Prefer using the expression form of <code class="code " id="coding-conventions.md-fc9545bf"  >try</code>, <code class="code " id="coding-conventions.md-80a027f8"  >if</code>, and <code class="code " id="coding-conventions.md-e93326e4"  >when</code>.</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-3e785028"         >return if (x) foo() else bar()\n</div><div class="code-block" data-lang="kotlin" id="coding-conventions.md-883aa77e"         >return when(x) {\n    0 -&gt; &quot;zero&quot;\n    else -&gt; &quot;nonzero&quot;\n}\n</div><p id="coding-conventions.md-f6fb9c2" >The above is preferable to:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-b1ada319"         >if (x)\n    return foo()\nelse\n    return bar()\n</div><div class="code-block" data-lang="kotlin" id="coding-conventions.md-4fea2675"         >when(x) {\n    0 -&gt; return &quot;zero&quot;\n    else -&gt; return &quot;nonzero&quot;\n}    \n</div></section><section class="chapter"  ><h3 id="coding-conventions.md-if-versus-when" data-toc="coding-conventions#coding-conventions.md-if-versus-when"  >if versus when</h3><p id="coding-conventions.md-bc8516db" >Prefer using <code class="code " id="coding-conventions.md-f2c860c"  >if</code> for binary conditions instead of <code class="code " id="coding-conventions.md-ccc438b7"  >when</code>. For example, use this syntax with <code class="code " id="coding-conventions.md-59746c79"  >if</code>:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-b5311f17"         >`if (x == null) ... else ...`\n</div><p id="coding-conventions.md-457f8dea" >instead of this one with <code class="code " id="coding-conventions.md-7dfa10dd"  >when</code>:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-3a22ded4"         >when (x) {\n    null -&gt; // ...\n    else -&gt; // ...\n}\n</div><p id="coding-conventions.md-845f5be2" >Prefer using <code class="code " id="coding-conventions.md-4892dee1"  >when</code> if there are three or more options.</p></section><section class="chapter"  ><h3 id="coding-conventions.md-nullable-boolean-values-in-conditions" data-toc="coding-conventions#coding-conventions.md-nullable-boolean-values-in-conditions"  >Nullable Boolean values in conditions</h3><p id="coding-conventions.md-aed96063" >If you need to use a nullable <code class="code " id="coding-conventions.md-abe3c117"  >Boolean</code> in a conditional statement, use <code class="code " id="coding-conventions.md-8da169fd"  >if (value == true)</code> or <code class="code " id="coding-conventions.md-f2f760bc"  >if (value == false)</code> checks.</p></section><section class="chapter"  ><h3 id="coding-conventions.md-loops" data-toc="coding-conventions#coding-conventions.md-loops"  >Loops</h3><p id="coding-conventions.md-5628831e" >Prefer using higher-order functions (<code class="code " id="coding-conventions.md-65391bc"  >filter</code>, <code class="code " id="coding-conventions.md-f752be1f"  >map</code> etc.) to loops. Exception: <code class="code " id="coding-conventions.md-49b92c9f"  >forEach</code> (prefer using a regular <code class="code " id="coding-conventions.md-533f0762"  >for</code> loop instead, unless the receiver of <code class="code " id="coding-conventions.md-1ffb8956"  >forEach</code> is nullable or <code class="code " id="coding-conventions.md-146d861c"  >forEach</code> is used as part of a longer call chain).</p><p id="coding-conventions.md-9379c15c" >When making a choice between a complex expression using multiple higher-order functions and a loop, understand the cost of the operations being performed in each case and keep performance considerations in mind.</p></section><section class="chapter"  ><h3 id="coding-conventions.md-loops-on-ranges" data-toc="coding-conventions#coding-conventions.md-loops-on-ranges"  >Loops on ranges</h3><p id="coding-conventions.md-e4a16dc7" >Use the <code class="code " id="coding-conventions.md-7d9c5909"  >until</code> function to loop over an open range:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-d969f844"         >for (i in 0..n - 1) { /*...*/ }  // bad\nfor (i in 0 until n) { /*...*/ }  // good\n</div></section><section class="chapter"  ><h3 id="coding-conventions.md-strings" data-toc="coding-conventions#coding-conventions.md-strings"  >Strings</h3><p id="coding-conventions.md-a508a905" >Prefer string templates to string concatenation.</p><p id="coding-conventions.md-6632a130" >Prefer multiline strings to embedding <code class="code " id="coding-conventions.md-dac1dc3b"  >\\n</code> escape sequences into regular string literals.</p><p id="coding-conventions.md-9eb8b509" >To maintain indentation in multiline strings, use <code class="code " id="coding-conventions.md-de6863c1"  >trimIndent</code> when the resulting string does not require any internal indentation, or <code class="code " id="coding-conventions.md-cab66b09"  >trimMargin</code> when internal indentation is required:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-4173b18b"         >assertEquals(\n    &quot;&quot;&quot;\n    Foo\n    Bar\n    &quot;&quot;&quot;.trimIndent(), \n    value\n)\n\nval a = &quot;&quot;&quot;if(a &gt; 1) {\n          |    return a\n          |}&quot;&quot;&quot;.trimMargin()\n</div></section><section class="chapter"  ><h3 id="coding-conventions.md-functions-vs-properties" data-toc="coding-conventions#coding-conventions.md-functions-vs-properties"  >Functions vs properties</h3><p id="coding-conventions.md-794f1ee4" >In some cases functions with no arguments might be interchangeable with read-only properties. Although the semantics are similar, there are some stylistic conventions on when to prefer one to another.</p><p id="coding-conventions.md-b3b6abe3" >Prefer a property over a function when the underlying algorithm:</p><ul class="list _ul" id="coding-conventions.md-ae5067cf"   ><li class="list__item" id="coding-conventions.md-dba1ef01" ><p>does not throw</p></li><li class="list__item" id="coding-conventions.md-47c6cc78" ><p>is cheap to calculate (or cached on the first run)</p></li><li class="list__item" id="coding-conventions.md-f54c6738" ><p>returns the same result over invocations if the object state hasn\'t changed</p></li></ul></section><section class="chapter"  ><h3 id="coding-conventions.md-extension-functions" data-toc="coding-conventions#coding-conventions.md-extension-functions"  >Extension functions</h3><p id="coding-conventions.md-105f3fd5" >Use extension functions liberally. Every time you have a function that works primarily on an object, consider making it an extension function accepting that object as a receiver. To minimize API pollution, restrict the visibility of extension functions as much as it makes sense. As necessary, use local extension functions, member extension functions, or top-level extension functions with private visibility.</p></section><section class="chapter"  ><h3 id="coding-conventions.md-infix-functions" data-toc="coding-conventions#coding-conventions.md-infix-functions"  >Infix functions</h3><p id="coding-conventions.md-572c6587" >Declare a function as <code class="code " id="coding-conventions.md-96ff78f6"  >infix</code> only when it works on two objects which play a similar role. Good examples: <code class="code " id="coding-conventions.md-fadad9a0"  >and</code>, <code class="code " id="coding-conventions.md-e2cc2844"  >to</code>, <code class="code " id="coding-conventions.md-c0562798"  >zip</code>. Bad example: <code class="code " id="coding-conventions.md-b64516c3"  >add</code>.</p><p id="coding-conventions.md-d390ecdf" >Do not declare a method as <code class="code " id="coding-conventions.md-17e2f062"  >infix</code> if it mutates the receiver object.</p></section><section class="chapter"  ><h3 id="coding-conventions.md-factory-functions" data-toc="coding-conventions#coding-conventions.md-factory-functions"  >Factory functions</h3><p id="coding-conventions.md-b55e4736" >If you declare a factory function for a class, avoid giving it the same name as the class itself. Prefer using a distinct name making it clear why the behavior of the factory function is special. Only if there is really no special semantics, you can use the same name as the class.</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-9ef1e858"         >class Point(val x: Double, val y: Double) {\n    companion object {\n        fun fromPolar(angle: Double, radius: Double) = Point(...)\n    }\n}\n</div><p id="coding-conventions.md-32aca1b4" >If you have an object with multiple overloaded constructors that don\'t call different superclass constructors and can\'t be reduced to a single constructor with default argument values, prefer to replace the overloaded constructors with factory functions.</p></section><section class="chapter"  ><h3 id="coding-conventions.md-platform-types" data-toc="coding-conventions#coding-conventions.md-platform-types"  >Platform types</h3><p id="coding-conventions.md-9e471f17" >A public function/method returning an expression of a platform type must declare its Kotlin type explicitly:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-9411ff21"         >fun apiCall(): String = MyJavaApi.getProperty(&quot;name&quot;)\n</div><p id="coding-conventions.md-c09ec36a" >Any property (package-level or class-level) initialized with an expression of a platform type must declare its Kotlin type explicitly:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-d989fe2b"         >class Person {\n    val name: String = MyJavaApi.getProperty(&quot;name&quot;)\n}\n</div><p id="coding-conventions.md-80dee4ad" >A local value initialized with an expression of a platform type may or may not have a type declaration:</p><div class="code-block" data-lang="kotlin" id="coding-conventions.md-febbbb45"         >fun main() {\n    val name = MyJavaApi.getProperty(&quot;name&quot;)\n    println(name)\n}\n</div></section><section class="chapter"  ><h3 id="coding-conventions.md-scope-functions-apply-with-run-also-let" data-toc="coding-conventions#coding-conventions.md-scope-functions-apply-with-run-also-let"  >Scope functions apply/with/run/also/let</h3><p id="coding-conventions.md-bf71e24a" >Kotlin provides a set of functions to execute a block of code in the context of a given object: <code class="code " id="coding-conventions.md-2f820d2f"  >let</code>, <code class="code " id="coding-conventions.md-ded4e4d7"  >run</code>, <code class="code " id="coding-conventions.md-c415b473"  >with</code>, <code class="code " id="coding-conventions.md-d03ee78d"  >apply</code>, and <code class="code " id="coding-conventions.md-d201c363"  >also</code>. For the guidance on choosing the right scope function for your case, refer to <a href="#scope-functions.md" id="coding-conventions.md-a25e1cf4"   >Scope Functions</a>.</p></section></section><section class="chapter"  ><h2 id="coding-conventions.md-coding-conventions-for-libraries" data-toc="coding-conventions#coding-conventions.md-coding-conventions-for-libraries"  >Coding conventions for libraries</h2><p id="coding-conventions.md-5785eba9" >When writing libraries, it\'s recommended to follow an additional set of rules to ensure API stability:</p><ul class="list _ul" id="coding-conventions.md-1e53ecd3"   ><li class="list__item" id="coding-conventions.md-bd1e1354" ><p>Always explicitly specify member visibility (to avoid accidentally exposing declarations as public API)</p></li><li class="list__item" id="coding-conventions.md-9430f7ef" ><p>Always explicitly specify function return types and property types (to avoid accidentally changing the return type when the implementation changes)</p></li><li class="list__item" id="coding-conventions.md-8569dd31" ><p>Provide KDoc comments for all public members, with the exception of overrides that do not require any new documentation (to support generating documentation for the library)</p></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="basic-types.md"  >Basic types</h1><p id="basic-types.md-3cb319c1" >In Kotlin, everything is an object in the sense that we can call member functions and properties on any variable. Some types can have a special internal representation - for example, numbers, characters and booleans can be represented as primitive values at runtime - but to the user they look like ordinary classes. In this section we describe the basic types used in Kotlin: <a href="#basic-types.md-numbers" id="basic-types.md-fee30ca5"   >numbers</a>, <a href="#basic-types.md-booleans" id="basic-types.md-5b9deb10"   >booleans</a>, <a href="#basic-types.md-characters" id="basic-types.md-3e2cba25"   >characters</a>, <a href="#basic-types.md-strings" id="basic-types.md-ea555980"   >strings</a>, and <a href="#basic-types.md-arrays" id="basic-types.md-1f27c275"   >arrays</a>.</p><section class="chapter"  ><h2 id="basic-types.md-numbers" data-toc="basic-types#basic-types.md-numbers"  >Numbers</h2><section class="chapter"  ><h3 id="basic-types.md-integer-types" data-toc="basic-types#basic-types.md-integer-types"  >Integer types</h3><p id="basic-types.md-44016a94" >Kotlin provides a set of built-in types that represent numbers. <br/> For integer numbers, there are four types with different sizes and, hence, value ranges.</p><div class="table-wrapper" ><table class=" wide" id="basic-types.md-3de20e74"  ><thead><tr class="ijRowHead" id="basic-types.md-bec60a22" ><th id="basic-types.md-c7f2763a"    >Type</th><th id="basic-types.md-3ed2b877"    >Size (bits)</th><th id="basic-types.md-e250eed0"    >Min value</th><th id="basic-types.md-407af970"    >Max value</th></tr></thead><tbody ><tr class="" id="basic-types.md-c3ea0663" ><td id="basic-types.md-c8206f52"    >Byte</td><td id="basic-types.md-43595a08"    >8</td><td id="basic-types.md-df01bd9"    >-128</td><td id="basic-types.md-2a01fec7"    >127</td></tr><tr class="" id="basic-types.md-af7325b8" ><td id="basic-types.md-25686958"    >Short</td><td id="basic-types.md-75332eb5"    >16</td><td id="basic-types.md-e0bb8fde"    >-32768</td><td id="basic-types.md-f0ea7590"    >32767</td></tr><tr class="" id="basic-types.md-89613357" ><td id="basic-types.md-96e0e44a"    >Int</td><td id="basic-types.md-adba5aa5"    >32</td><td id="basic-types.md-24d1b292"    >-2,147,483,648 (-2 <sup class="superscript" id="basic-types.md-7c441f58" >31</sup>)</td><td id="basic-types.md-bd7f3d5f"    >2,147,483,647 (2 <sup class="superscript" id="basic-types.md-80278ca1" >31</sup>- 1)</td></tr><tr class="" id="basic-types.md-82ae6ffa" ><td id="basic-types.md-ca6d8b13"    >Long</td><td id="basic-types.md-e32b680e"    >64</td><td id="basic-types.md-d55c3824"    >-9,223,372,036,854,775,808 (-2 <sup class="superscript" id="basic-types.md-1fc52d78" >63</sup>)</td><td id="basic-types.md-da66a685"    >9,223,372,036,854,775,807 (2 <sup class="superscript" id="basic-types.md-f04637de" >63</sup>- 1)</td></tr></tbody ></table ></div><p id="basic-types.md-66a26cce" >All variables initialized with integer values not exceeding the maximum value of <code class="code " id="basic-types.md-78075f69"  >Int</code> have the inferred type <code class="code " id="basic-types.md-7d8daa14"  >Int</code>. If the initial value exceeds this value, then the type is <code class="code " id="basic-types.md-d4e78b10"  >Long</code>. To specify the <code class="code " id="basic-types.md-edd0d456"  >Long</code> value explicitly, append the suffix <code class="code " id="basic-types.md-6fdd464c"  >L</code> to the value.</p><div class="code-block" data-lang="kotlin" id="basic-types.md-4188caf5"         >val one = 1 // Int\nval threeBillion = 3000000000 // Long\nval oneLong = 1L // Long\nval oneByte: Byte = 1\n</div></section><section class="chapter"  ><h3 id="basic-types.md-floating-point-types" data-toc="basic-types#basic-types.md-floating-point-types"  >Floating-point types</h3><p id="basic-types.md-82923139" >For real numbers, Kotlin provides floating-point types <code class="code " id="basic-types.md-7cd78a"  >Float</code> and <code class="code " id="basic-types.md-4d71496e"  >Double</code>. According to the <a href="https://en.wikipedia.org/wiki/IEEE_754" id="basic-types.md-fec991d2"   data-external="true" rel="noopener noreferrer" >IEEE 754 standard</a>, floating point types differ by their <em id="basic-types.md-b1272710" class=""  >decimal place</em>, that is, how many decimal digits they can store. <code class="code " id="basic-types.md-72bb8f94"  >Float</code> reflects the IEEE 754 <em id="basic-types.md-8049c8e8" class=""  >single precision</em>, while <code class="code " id="basic-types.md-2c9c77a6"  >Double</code> provides <em id="basic-types.md-ab03b89" class=""  >double precision</em>.</p><div class="table-wrapper" ><table class=" wide" id="basic-types.md-932a077e"  ><thead><tr class="ijRowHead" id="basic-types.md-79599acb" ><th id="basic-types.md-349aeceb"    >Type</th><th id="basic-types.md-f2877222"    >Size (bits)</th><th id="basic-types.md-d67991f7"    >Significant bits</th><th id="basic-types.md-d37ea799"    >Exponent bits</th><th id="basic-types.md-44142ef7"    >Decimal digits</th></tr></thead><tbody ><tr class="" id="basic-types.md-4ee1b67c" ><td id="basic-types.md-29453756"    >Float</td><td id="basic-types.md-cfe959f6"    >32</td><td id="basic-types.md-44638fa3"    >24</td><td id="basic-types.md-d18b52c"    >8</td><td id="basic-types.md-57c17fdf"    >6-7</td></tr><tr class="" id="basic-types.md-da5ed59e" ><td id="basic-types.md-e971132d"    >Double</td><td id="basic-types.md-2278edd3"    >64</td><td id="basic-types.md-8c281e45"    >53</td><td id="basic-types.md-c1f32999"    >11</td><td id="basic-types.md-8203885f"    >15-16</td></tr></tbody ></table ></div><p id="basic-types.md-7a16526b" >You can initialize <code class="code " id="basic-types.md-52d53e70"  >Double</code> and <code class="code " id="basic-types.md-62f7f1ad"  >Float</code> variables with numbers having a fractional part. It\'s separated from the integer part by a period (<code class="code " id="basic-types.md-26597ef0"  >.</code>) For variables initialized with fractional numbers, the compiler infers the <code class="code " id="basic-types.md-157b07e3"  >Double</code> type.</p><div class="code-block" data-lang="kotlin" id="basic-types.md-66247c80"         >val pi = 3.14 // Double\n// val one: Double = 1 // Error: type mismatch\nval oneDouble = 1.0 // Double\n</div><p id="basic-types.md-29af1b14" >To explicitly specify the <code class="code " id="basic-types.md-68f0c029"  >Float</code> type for a value, add the suffix <code class="code " id="basic-types.md-f7291bee"  >f</code> or <code class="code " id="basic-types.md-8877c810"  >F</code>. If such a value contains more than 6-7 decimal digits, it will be rounded.</p><div class="code-block" data-lang="kotlin" id="basic-types.md-9218c06f"         >val e = 2.7182818284 // Double\nval eFloat = 2.7182818284f // Float, actual value is 2.7182817\n</div><p id="basic-types.md-11ba2dcb" >Note that unlike some other languages, there are no implicit widening conversions for numbers in Kotlin. For example, a function with a <code class="code " id="basic-types.md-a4214418"  >Double</code> parameter can be called only on <code class="code " id="basic-types.md-38b2b7be"  >Double</code> values, but not <code class="code " id="basic-types.md-432e50fa"  >Float</code>, <code class="code " id="basic-types.md-17722b2f"  >Int</code>, or other numeric values.</p><div class="code-block" data-lang="kotlin" id="basic-types.md-e22dfa1a"         >fun main() {\n    fun printDouble(d: Double) { print(d) }\n\n    val i = 1    \n    val d = 1.0\n    val f = 1.0f \n\n    printDouble(d)\n//    printDouble(i) // Error: Type mismatch\n//    printDouble(f) // Error: Type mismatch\n}\n</div><p id="basic-types.md-291910eb" >To convert numeric values to different types, use <a href="#basic-types.md-explicit-conversions" id="basic-types.md-ba4c7700"   >Explicit conversions</a>.</p></section><section class="chapter"  ><h3 id="basic-types.md-literal-constants" data-toc="basic-types#basic-types.md-literal-constants"  >Literal constants</h3><p id="basic-types.md-cbb3f4af" >There are the following kinds of literal constants for integral values:</p><ul class="list _ul" id="basic-types.md-24d3896e"   ><li class="list__item" id="basic-types.md-2a2787bf" >Decimals: <code class="code " id="basic-types.md-81b07190"  >123</code><ul class="list _ul" id="basic-types.md-76e08944"   ><li class="list__item" id="basic-types.md-ffbae224" ><p>Longs are tagged by a capital <code class="code " id="basic-types.md-ee9fb6f"  >L</code>: <code class="code " id="basic-types.md-6a04d570"  >123L</code></p></li></ul></li><li class="list__item" id="basic-types.md-c7580a70" ><p>Hexadecimals: <code class="code " id="basic-types.md-2c7644f6"  >0x0F</code></p></li><li class="list__item" id="basic-types.md-cec2b2c2" ><p>Binaries: <code class="code " id="basic-types.md-2e44e951"  >0b00001011</code></p></li></ul><aside data-type="note" class="prompt" data-title="" id="basic-types.md-f60eb65e" ><p id="basic-types.md-c7dc1c9a" >Octal literals are not supported.</p></aside><p id="basic-types.md-75ca5cd0" >Kotlin also supports a conventional notation for floating-point numbers:</p><ul class="list _ul" id="basic-types.md-b9fd1144"   ><li class="list__item" id="basic-types.md-3774e047" ><p>Doubles by default: <code class="code " id="basic-types.md-82259857"  >123.5</code>, <code class="code " id="basic-types.md-f928da0d"  >123.5e10</code></p></li><li class="list__item" id="basic-types.md-1f61fd6c" ><p>Floats are tagged by <code class="code " id="basic-types.md-7d3b8b16"  >f</code> or <code class="code " id="basic-types.md-89c3dbdb"  >F</code>: <code class="code " id="basic-types.md-ac431185"  >123.5f</code></p></li></ul><p id="basic-types.md-3c1f8ff5" >You can use underscores to make number constants more readable:</p><div class="code-block" data-lang="kotlin" id="basic-types.md-19f58a4e"         >val oneMillion = 1_000_000\nval creditCardNumber = 1234_5678_9012_3456L\nval socialSecurityNumber = 999_99_9999L\nval hexBytes = 0xFF_EC_DE_5E\nval bytes = 0b11010010_01101001_10010100_10010010\n</div></section><section class="chapter"  ><h3 id="basic-types.md-numbers-representation-on-the-jvm" data-toc="basic-types#basic-types.md-numbers-representation-on-the-jvm"  >Numbers representation on the JVM</h3><p id="basic-types.md-4b7d84a" >On the JVM platform, numbers are stored as primitive types: <code class="code " id="basic-types.md-4e9a5668"  >int</code>, <code class="code " id="basic-types.md-645bae44"  >double</code>, and so on. Exceptions are cases when you create a nullable number reference such as <code class="code " id="basic-types.md-d2f4d2b"  >Int?</code> or use generics. In these cases numbers are boxed in Java classes <code class="code " id="basic-types.md-5466229a"  >Integer</code>, <code class="code " id="basic-types.md-acfe21c9"  >Double</code>, and so on.</p><p id="basic-types.md-ea78716f" >Note that nullable references to the same number can be different objects:</p><div class="code-block" data-lang="kotlin" id="basic-types.md-8b95b807"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val a: Int = 100\n    val boxedA: Int? = a\n    val anotherBoxedA: Int? = a\n    \n    val b: Int = 10000\n    val boxedB: Int? = b\n    val anotherBoxedB: Int? = b\n    \n    println(boxedA === anotherBoxedA) // true\n    println(boxedB === anotherBoxedB) // false\n//sampleEnd\n}\n</div><p id="basic-types.md-15a15b1d" >On the other hand, they are still equal:</p><div class="code-block" data-lang="kotlin" id="basic-types.md-d37924a2"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val a: Int = 10000\n    println(a == a) // Prints \'true\'\n    val boxedA: Int? = a\n    val anotherBoxedA: Int? = a\n    println(boxedA == anotherBoxedA) // Prints \'true\'\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h3 id="basic-types.md-explicit-conversions" data-toc="basic-types#basic-types.md-explicit-conversions"  >Explicit conversions</h3><p id="basic-types.md-72e469ef" >Due to different representations, smaller types <em id="basic-types.md-4d66afff" class=""  >are not subtypes</em> of bigger ones. If they were, we would have troubles of the following sort:</p><div class="code-block" data-lang="kotlin" id="basic-types.md-973afa5f"         >// Hypothetical code, does not actually compile:\nval a: Int? = 1 // A boxed Int (java.lang.Integer)\nval b: Long? = a // implicit conversion yields a boxed Long (java.lang.Long)\nprint(b == a) // Surprise! This prints &quot;false&quot; as Long\'s equals() checks whether the other is Long as well\n</div><p id="basic-types.md-4c6ef61b" >So equality would have been lost silently, not to mention identity.</p><p id="basic-types.md-1cfeea94" >As a consequence, smaller types <em id="basic-types.md-c3ec3cd6" class=""  >are NOT implicitly converted</em> to bigger types. This means that assigning a value of type <code class="code " id="basic-types.md-36139731"  >Byte</code> to an <code class="code " id="basic-types.md-e4efe20b"  >Int</code> variable requires an explicit conversion.</p><div class="code-block" data-lang="kotlin" id="basic-types.md-40018eb8"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val b: Byte = 1 // OK, literals are checked statically\n    // val i: Int = b // ERROR\n    val i1: Int = b.toInt()\n//sampleEnd\n}\n</div><p id="basic-types.md-276d6518" >All number types support conversions to other types:</p><ul class="list _ul" id="basic-types.md-dba0fa05"   ><li class="list__item" id="basic-types.md-aa9c9bbe" ><code class="code " id="basic-types.md-dc3f6fb7"  >toByte(): Byte</code></li><li class="list__item" id="basic-types.md-580e2882" ><code class="code " id="basic-types.md-8471917d"  >toShort(): Short</code></li><li class="list__item" id="basic-types.md-1ccbd8f8" ><code class="code " id="basic-types.md-b11dbd9e"  >toInt(): Int</code></li><li class="list__item" id="basic-types.md-6fca3ca1" ><code class="code " id="basic-types.md-cc9a1c3d"  >toLong(): Long</code></li><li class="list__item" id="basic-types.md-e540193a" ><code class="code " id="basic-types.md-de30af21"  >toFloat(): Float</code></li><li class="list__item" id="basic-types.md-284c6fb8" ><code class="code " id="basic-types.md-b1739c08"  >toDouble(): Double</code></li><li class="list__item" id="basic-types.md-6cdc1d43" ><code class="code " id="basic-types.md-fd22fcd2"  >toChar(): Char</code></li></ul><p id="basic-types.md-871ed5e6" >In many cases, there is no need in explicit conversions because the type is inferred from the context, and arithmetical operations are overloaded for appropriate conversions, for example:</p><div class="code-block" data-lang="kotlin" id="basic-types.md-ffdce60a"         >val l = 1L + 3 // Long + Int =&gt; Long\n</div></section><section class="chapter"  ><h3 id="basic-types.md-operations" data-toc="basic-types#basic-types.md-operations"  >Operations</h3><p id="basic-types.md-9aa8d2d9" >Kotlin supports the standard set of arithmetical operations over numbers: <code class="code " id="basic-types.md-19bd5b90"  >+</code>, <code class="code " id="basic-types.md-abce2488"  >-</code>, <code class="code " id="basic-types.md-d5946472"  >*</code>, <code class="code " id="basic-types.md-5767b8c8"  >/</code>, <code class="code " id="basic-types.md-e8c6aa3d"  >%</code>. They are declared as members of appropriate classes.</p><div class="code-block" data-lang="kotlin" id="basic-types.md-d05cdfdc"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    println(1 + 2)\n    println(2_500_000_000L - 1L)\n    println(3.14 * 2.71)\n    println(10.0 / 3)\n//sampleEnd\n}\n</div><p id="basic-types.md-9873dd44" >You can also override these operators for custom classes. See <a href="#operator-overloading.md" id="basic-types.md-aa18ff2b"   >Operator overloading</a> for details.</p><section class="chapter"  ><h4 id="basic-types.md-division-of-integers" data-toc="basic-types#basic-types.md-division-of-integers"  >Division of integers</h4><p id="basic-types.md-24ccc6b3" >Division between integers numbers always returns an integer number. Any fractional part is discarded.</p><div class="code-block" data-lang="kotlin" id="basic-types.md-23093ee6"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val x = 5 / 2\n    //println(x == 2.5) // ERROR: Operator \'==\' cannot be applied to \'Int\' and \'Double\'\n    println(x == 2)\n//sampleEnd\n}\n</div><p id="basic-types.md-48a1526c" >This is true for a division between any two integer types.</p><div class="code-block" data-lang="kotlin" id="basic-types.md-8a8ce7e9"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val x = 5L / 2\n    println(x == 2L)\n//sampleEnd\n}\n</div><p id="basic-types.md-44713df7" >To return a floating-point type, explicitly convert one of the arguments to a floating-point type.</p><div class="code-block" data-lang="kotlin" id="basic-types.md-d332e996"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val x = 5 / 2.toDouble()\n    println(x == 2.5)\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h4 id="basic-types.md-bitwise-operations" data-toc="basic-types#basic-types.md-bitwise-operations"  >Bitwise operations</h4><p id="basic-types.md-e8654f15" >Kotlin provides a set of <em id="basic-types.md-c28c2b82" class=""  >bitwise operations</em> on integer numbers. They operate on the binary level directly with bits of the numbers\' representation. Bitwise operations are represented by functions that can be called in infix form. They can be applied only to <code class="code " id="basic-types.md-7fd44baf"  >Int</code> and <code class="code " id="basic-types.md-985bf52a"  >Long</code>.</p><div class="code-block" data-lang="kotlin" id="basic-types.md-3e88363b"         >val x = (1 shl 2) and 0x000FF000\n</div><p id="basic-types.md-4c9b660b" >Here is the complete list of bitwise operations:</p><ul class="list _ul" id="basic-types.md-b56bdcd1"   ><li class="list__item" id="basic-types.md-e412c2d1" ><p><code class="code " id="basic-types.md-ac1d667e"  >shl(bits)</code> – signed shift left</p></li><li class="list__item" id="basic-types.md-bd19d077" ><p><code class="code " id="basic-types.md-893b899d"  >shr(bits)</code> – signed shift right</p></li><li class="list__item" id="basic-types.md-7c48a490" ><p><code class="code " id="basic-types.md-75bc4739"  >ushr(bits)</code> – unsigned shift right</p></li><li class="list__item" id="basic-types.md-17bbca17" ><p><code class="code " id="basic-types.md-9f3dbacc"  >and(bits)</code> – bitwise <b id="basic-types.md-35736c69" class=""  >and</b></p></li><li class="list__item" id="basic-types.md-579492d3" ><p><code class="code " id="basic-types.md-7465f663"  >or(bits)</code> – bitwise <b id="basic-types.md-121d6e09" class=""  >or</b></p></li><li class="list__item" id="basic-types.md-191649b9" ><p><code class="code " id="basic-types.md-b4cc7254"  >xor(bits)</code> – bitwise <b id="basic-types.md-7b75f2fa" class=""  >xor</b></p></li><li class="list__item" id="basic-types.md-f5634da0" ><p><code class="code " id="basic-types.md-483098e1"  >inv()</code> – bitwise inversion</p></li></ul></section></section><section class="chapter"  ><h3 id="basic-types.md-floating-point-numbers-comparison" data-toc="basic-types#basic-types.md-floating-point-numbers-comparison"  >Floating-point numbers comparison</h3><p id="basic-types.md-326c3e3b" >The operations on floating-point numbers discussed in this section are:</p><ul class="list _ul" id="basic-types.md-c6d1e9e7"   ><li class="list__item" id="basic-types.md-75300f75" ><p>Equality checks: <code class="code " id="basic-types.md-fd78929"  >a == b</code> and <code class="code " id="basic-types.md-2e04f88e"  >a != b</code></p></li><li class="list__item" id="basic-types.md-dae88425" ><p>Comparison operators: <code class="code " id="basic-types.md-d8c94f36"  >a &lt; b</code>, <code class="code " id="basic-types.md-cb29bce0"  >a &gt; b</code>, <code class="code " id="basic-types.md-ad7bd431"  >a &lt;= b</code>, <code class="code " id="basic-types.md-b55f0065"  >a &gt;= b</code></p></li><li class="list__item" id="basic-types.md-9fdd57d4" ><p>Range instantiation and range checks: <code class="code " id="basic-types.md-8f1a47c7"  >a..b</code>, <code class="code " id="basic-types.md-21365d7b"  >x in a..b</code>, <code class="code " id="basic-types.md-e6c3720d"  >x !in a..b</code></p></li></ul><p id="basic-types.md-27b5902e" >When the operands <code class="code " id="basic-types.md-1c82afaf"  >a</code> and <code class="code " id="basic-types.md-71881806"  >b</code> are statically known to be <code class="code " id="basic-types.md-1d756c84"  >Float</code> or <code class="code " id="basic-types.md-b4d67f0f"  >Double</code> or their nullable counterparts (the type is declared or inferred or is a result of a <a href="#typecasts.md-smart-casts" id="basic-types.md-f9c1d35f"   >smart cast</a> ), the operations on the numbers and the range that they form follow the <a href="https://en.wikipedia.org/wiki/IEEE_754" id="basic-types.md-3cfba5c6"   data-external="true" rel="noopener noreferrer" >IEEE 754 Standard for Floating-Point Arithmetic</a>.</p><p id="basic-types.md-c2579eac" >However, to support generic use cases and provide total ordering, when the operands are <b id="basic-types.md-92079a5a" class=""  >not</b> statically typed as floating point numbers (e.g. <code class="code " id="basic-types.md-c927dbbc"  >Any</code>, <code class="code " id="basic-types.md-241ecb5c"  >Comparable&lt;...&gt;</code>, a type parameter), the operations use the <code class="code " id="basic-types.md-600122af"  >equals</code> and <code class="code " id="basic-types.md-ceac5584"  >compareTo</code> implementations for <code class="code " id="basic-types.md-42cd9b23"  >Float</code> and <code class="code " id="basic-types.md-5219e5ac"  >Double</code>, which disagree with the standard, so that:</p><ul class="list _ul" id="basic-types.md-9b4d85fe"   ><li class="list__item" id="basic-types.md-56fb2341" ><p><code class="code " id="basic-types.md-9977ff19"  >NaN</code> is considered equal to itself</p></li><li class="list__item" id="basic-types.md-c4d0a4ac" ><p><code class="code " id="basic-types.md-6496cd97"  >NaN</code> is considered greater than any other element including <code class="code " id="basic-types.md-f0365e81"  >POSITIVE_INFINITY</code></p></li><li class="list__item" id="basic-types.md-590e7826" ><p><code class="code " id="basic-types.md-e4d31f7f"  >-0.0</code> is considered less than <code class="code " id="basic-types.md-1bd4fa86"  >0.0</code></p></li></ul></section><section class="chapter"  ><h3 id="basic-types.md-unsigned-integers" data-toc="basic-types#basic-types.md-unsigned-integers"  >Unsigned integers</h3><aside data-type="note" class="prompt" data-title="" id="basic-types.md-8cd64e9d" ><p id="basic-types.md-f4357bfd" >Unsigned types are available only since Kotlin 1.3 and currently in <a href="#components-stability.md" id="basic-types.md-d24395c1"   >Beta</a>. See details <a href="#basic-types.md-beta-status-of-unsigned-integers" id="basic-types.md-cb92d2ad"   >below</a></p></aside><p id="basic-types.md-5fd2bacd" >In addition to <a href="#basic-types.md-integer-types" id="basic-types.md-9c0c85e0"   >integer types</a>, Kotlin provides the following types for unsigned integer numbers:</p><ul class="list _ul" id="basic-types.md-9467224"   ><li class="list__item" id="basic-types.md-875ff1c6" ><p><code class="code " id="basic-types.md-b62dc0dd"  >UByte</code>: an unsigned 8-bit integer, ranges from 0 to 255</p></li><li class="list__item" id="basic-types.md-a3213942" ><p><code class="code " id="basic-types.md-1bd7623b"  >UShort</code>: an unsigned 16-bit integer, ranges from 0 to 65535</p></li><li class="list__item" id="basic-types.md-ce6466a9" ><p><code class="code " id="basic-types.md-81c8e320"  >UInt</code>: an unsigned 32-bit integer, ranges from 0 to 2^32 - 1</p></li><li class="list__item" id="basic-types.md-799f8aad" ><p><code class="code " id="basic-types.md-c1379795"  >ULong</code>: an unsigned 64-bit integer, ranges from 0 to 2^64 - 1</p></li></ul><p id="basic-types.md-823a60ca" >Unsigned types support most of the operations of their signed counterparts.</p><aside data-type="note" class="prompt" data-title="" id="basic-types.md-73a881a4" ><p id="basic-types.md-4ee112e5" >Changing type from unsigned type to signed counterpart (and vice versa) is a <em id="basic-types.md-41d6860e" class=""  >binary incompatible</em> change.</p></aside><p id="basic-types.md-4176b206" >Unsigned types are implemented using feature that\'s not yet stable, namely <a href="#inline-classes.md" id="basic-types.md-c55932a7"   >inline classes</a>.</p><section class="chapter"  ><h4 id="basic-types.md-unsigned-arrays-and-ranges" data-toc="basic-types#basic-types.md-unsigned-arrays-and-ranges"  >Unsigned arrays and ranges</h4><p id="basic-types.md-1fbf04e" >Same as for primitives, each of unsigned type has corresponding type that represents arrays of that type:</p><ul class="list _ul" id="basic-types.md-c2d7b361"   ><li class="list__item" id="basic-types.md-7c91289e" ><p><code class="code " id="basic-types.md-546dae48"  >UByteArray</code>: an array of unsigned bytes</p></li><li class="list__item" id="basic-types.md-5a13da8a" ><p><code class="code " id="basic-types.md-6b6d6c00"  >UShortArray</code>: an array of unsigned shorts</p></li><li class="list__item" id="basic-types.md-676a0583" ><p><code class="code " id="basic-types.md-5f434181"  >UIntArray</code>: an array of unsigned ints</p></li><li class="list__item" id="basic-types.md-76364c66" ><p><code class="code " id="basic-types.md-29697127"  >ULongArray</code>: an array of unsigned longs</p></li></ul><p id="basic-types.md-79ba12d3" >Same as for signed integer arrays, they provide similar API to <code class="code " id="basic-types.md-22a5fc54"  >Array</code> class without boxing overhead.</p><p id="basic-types.md-1db4e7f6" >Also, <a href="#ranges.md" id="basic-types.md-a6e1f42e"   >ranges and progressions</a> are supported for <code class="code " id="basic-types.md-c98f1ea3"  >UInt</code> and <code class="code " id="basic-types.md-5bcd0f44"  >ULong</code> by classes <code class="code " id="basic-types.md-937f78fd"  >UIntRange</code>, <code class="code " id="basic-types.md-11da731e"  >UIntProgression</code>, <code class="code " id="basic-types.md-74ceddff"  >ULongRange</code>, and <code class="code " id="basic-types.md-8cbb0c06"  >ULongProgression</code>.</p></section><section class="chapter"  ><h4 id="basic-types.md-literals" data-toc="basic-types#basic-types.md-literals"  >Literals</h4><p id="basic-types.md-eb313993" >To make unsigned integers easier to use, Kotlin provides an ability to tag an integer literal with a suffix indicating a specific unsigned type (similarly to <code class="code " id="basic-types.md-bdc54a87"  >Float</code> or <code class="code " id="basic-types.md-15d67c2e"  >Long</code> ):</p><ul class="list _ul" id="basic-types.md-994fd78"   ><li class="list__item" id="basic-types.md-a39b3d01" ><p><code class="code " id="basic-types.md-8eac1090"  >u</code> and <code class="code " id="basic-types.md-f3ed5a39"  >U</code> tag unsigned literals. The exact type is determined based on the expected type. If no expected type is provided, compiler will use <code class="code " id="basic-types.md-b73e8ad2"  >UInt</code> or <code class="code " id="basic-types.md-a2d024ef"  >ULong</code> depending on the size of literal.</p></li></ul><div class="code-block" data-lang="kotlin" id="basic-types.md-41a0d4f"         >val b: UByte = 1u  // UByte, expected type provided\nval s: UShort = 1u // UShort, expected type provided\nval l: ULong = 1u  // ULong, expected type provided\n\nval a1 = 42u // UInt: no expected type provided, constant fits in UInt\nval a2 = 0xFFFF_FFFF_FFFFu // ULong: no expected type provided, constant doesn\'t fit in UInt\n</div><ul class="list _ul" id="basic-types.md-16a5c2ae"   ><li class="list__item" id="basic-types.md-ddb89a1a" ><p><code class="code " id="basic-types.md-295384c1"  >uL</code> and <code class="code " id="basic-types.md-afc5645b"  >UL</code> explicitly tag literal as unsigned long.</p></li></ul><div class="code-block" data-lang="kotlin" id="basic-types.md-73ae95a1"         >val a = 1UL // ULong, even though no expected type provided and constant fits into UInt\n</div></section><section class="chapter"  ><h4 id="basic-types.md-beta-status-of-unsigned-integers" data-toc="basic-types#basic-types.md-beta-status-of-unsigned-integers"  >Beta status of unsigned integers</h4><p id="basic-types.md-16a325dd" >The design of unsigned types is in <a href="#components-stability.md" id="basic-types.md-1f51973d"   >Beta</a>, meaning that its compatibility is best-effort only and not guaranteed.</p><p id="basic-types.md-cea8c39e" >When using unsigned arithmetics, a warning will be reported, indicating that this feature has not been released to stable. To remove the warning, you have to opt in for usage of unsigned types:</p><ul class="list _ul" id="basic-types.md-354530f3"   ><li class="list__item" id="basic-types.md-b91a3a1b" ><p>To propagate the opt-in requirement, annotate declarations that use unsigned integers with <code class="code " id="basic-types.md-55ea2a70"  >@ExperimentalUnsignedTypes</code>.</p></li><li class="list__item" id="basic-types.md-9408ab6f" ><p>To opt-in without propagating, either annotate declarations with <code class="code " id="basic-types.md-34a718d6"  >@OptIn(ExperimentalUnsignedTypes::class)</code> or pass <code class="code " id="basic-types.md-eb314c82"  >-Xopt-in=kotlin.ExperimentalUnsignedTypes</code> to the compiler.</p></li></ul><p id="basic-types.md-31e3e5d2" >It\'s up to you to decide if your clients have to explicitly opt-in into usage of your API, but keep in mind that unsigned types are not a stable feature, so API which uses them can be suddenly broken by changes in the language.</p><p id="basic-types.md-c9fca3df" >See the <a href="#opt-in-requirements.md" id="basic-types.md-9bd7248f"   >opt-in requirements</a> for details on using APIs that require opt-in.</p></section><section class="chapter"  ><h4 id="basic-types.md-further-discussion" data-toc="basic-types#basic-types.md-further-discussion"  >Further discussion</h4><p id="basic-types.md-e5cf63df" >See <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/unsigned-types.md" id="basic-types.md-52cb4ea8"   data-external="true" rel="noopener noreferrer" >language proposal for unsigned types</a> for technical details and further discussion.</p></section></section></section><section class="chapter"  ><h2 id="basic-types.md-booleans" data-toc="basic-types#basic-types.md-booleans"  >Booleans</h2><p id="basic-types.md-5b26ce67" >The type <code class="code " id="basic-types.md-9bc5f352"  >Boolean</code> represents boolean objects that can have two values: <code class="code " id="basic-types.md-9d02337e"  >true</code> and <code class="code " id="basic-types.md-dce1c2d1"  >false</code>.</p><p id="basic-types.md-747d8d9a" ><code class="code " id="basic-types.md-6bd32ea9"  >Boolean</code> has a nullable counterpart <code class="code " id="basic-types.md-60c2aa51"  >Boolean?</code> that also has the <code class="code " id="basic-types.md-f80bae5b"  >null</code> value.</p><p id="basic-types.md-e884f82b" >Built-in operations on booleans include:</p><ul class="list _ul" id="basic-types.md-b65f70ae"   ><li class="list__item" id="basic-types.md-3b0209bf" ><p><code class="code " id="basic-types.md-d10240e4"  >||</code> – disjunction (logical <em id="basic-types.md-dc65189f" class=""  >OR</em>)</p></li><li class="list__item" id="basic-types.md-d08a58c2" ><p><code class="code " id="basic-types.md-8008040b"  >&amp;&amp;</code> – conjunction (logical <em id="basic-types.md-7d9448e0" class=""  >AND</em>)</p></li><li class="list__item" id="basic-types.md-bd84ff89" ><p><code class="code " id="basic-types.md-140236f0"  >!</code>- negation (logical <em id="basic-types.md-94ce9487" class=""  >NOT</em>)</p></li></ul><p id="basic-types.md-b95a124c" ><code class="code " id="basic-types.md-3e32f804"  >||</code> and <code class="code " id="basic-types.md-e6e11582"  >&amp;&amp;</code> work lazily.</p><div class="code-block" data-lang="kotlin" id="basic-types.md-9a973fa7"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val myTrue: Boolean = true\n    val myFalse: Boolean = false\n    val boolNull: Boolean? = null\n    \n    println(myTrue || myFalse)\n    println(myTrue &amp;&amp; myFalse)\n    println(!myTrue)\n//sampleEnd\n}\n</div><aside data-type="note" class="prompt" data-title="" id="basic-types.md-2c3b791" ><p id="basic-types.md-59b08bce" ><b id="basic-types.md-fef67527" class=""  >On JVM</b>: nullable references to boolean objects are boxed similarly to <a href="#basic-types.md-numbers-representation-on-the-jvm" id="basic-types.md-850d4539"   >numbers</a>.</p></aside></section><section class="chapter"  ><h2 id="basic-types.md-characters" data-toc="basic-types#basic-types.md-characters"  >Characters</h2><p id="basic-types.md-d4c0eede" >Characters are represented by the type <code class="code " id="basic-types.md-b8fcaeee"  >Char</code>. Character literals go in single quotes: <code class="code " id="basic-types.md-f70b332f"  >\'1\'</code>.</p><p id="basic-types.md-b5dcf5f" >Special characters start from an escaping backslash <code class="code " id="basic-types.md-34e8bdf8"  >\\</code>. The following escape sequences are supported: <code class="code " id="basic-types.md-751a1acd"  >\\t</code>, <code class="code " id="basic-types.md-cbeea03e"  >\\b</code>, <code class="code " id="basic-types.md-be64dc56"  >\\n</code>, <code class="code " id="basic-types.md-c0066751"  >\\r</code>, <code class="code " id="basic-types.md-3f3d7e9a"  >\\\'</code>, <code class="code " id="basic-types.md-3373ad3c"  >\\&quot;</code>, <code class="code " id="basic-types.md-43be8ba"  >\\\\</code> and <code class="code " id="basic-types.md-b0113b47"  >\\$</code>.</p><p id="basic-types.md-865934c8" >To encode any other character, use the Unicode escape sequence syntax: <code class="code " id="basic-types.md-bdd59867"  >\'\\uFF00\'</code>.</p><div class="code-block" data-lang="kotlin" id="basic-types.md-1e2f6286"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val aChar: Char = \'a\'\n \n    println(aChar)\n    println(\'\\n\') //prints an extra newline character\n    println(\'\\uFF00\')\n//sampleEnd\n}\n</div><p id="basic-types.md-28ad673" >If a value of character variable is a digit, you can explicitly convert it to an <code class="code " id="basic-types.md-9e819a7"  >Int</code> number:</p><div class="code-block" data-lang="kotlin" id="basic-types.md-29e9f112"         >fun decimalDigitValue(c: Char): Int {\n    if (c !in \'0\'..\'9\')\n        throw IllegalArgumentException(&quot;Out of range&quot;)\n    return c.toInt() - \'0\'.toInt() // Explicit conversions to numbers\n}\n</div><aside data-type="note" class="prompt" data-title="" id="basic-types.md-603c2dc7" ><p id="basic-types.md-a3d1f30c" ><b id="basic-types.md-a2adea65" class=""  >On JVM</b>: Like <a href="#basic-types.md-numbers-representation-on-the-jvm" id="basic-types.md-b3a73a8d"   >numbers</a>, characters are boxed when a nullable reference is needed. Identity is not preserved by the boxing operation.</p></aside></section><section class="chapter"  ><h2 id="basic-types.md-strings" data-toc="basic-types#basic-types.md-strings"  >Strings</h2><p id="basic-types.md-89e991d3" >Strings in Kotlin are represented by the type <code class="code " id="basic-types.md-ecf12f02"  >String</code>. Generally, a string value is a sequence of characters in double quotes (<code class="code " id="basic-types.md-99064278"  >&quot;</code> ).</p><div class="code-block" data-lang="kotlin" id="basic-types.md-e01596a2"         >val str = &quot;abcd 123&quot;\n</div><p id="basic-types.md-a50985c2" >Elements of a string are characters that you can access via the indexing operation: <code class="code " id="basic-types.md-c3a6379c"  >s[i]</code>. You can iterate over these characters with a <code class="code " id="basic-types.md-7877d0dd"  >for</code> loop:</p><div class="code-block" data-lang="kotlin" id="basic-types.md-c503583d"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\nval str = &quot;abcd&quot;\n//sampleStart\nfor (c in str) {\n    println(c)\n}\n//sampleEnd\n}\n</div><p id="basic-types.md-1e024c6e" >Strings are immutable. Once you initialize a string, you can\'t change its value or assign a new value to it. All operations that transform strings return their results in a new <code class="code " id="basic-types.md-b9d8cba8"  >String</code> object, leaving the original string unchanged.</p><div class="code-block" data-lang="kotlin" id="basic-types.md-e3986289"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val str = &quot;abcd&quot;\n    println(str.toUpperCase()) // Create and print a new String object\n    println(str) // the original string remains the same\n//sampleEnd\n}\n</div><p id="basic-types.md-40187c0b" >To concatenate strings, use the <code class="code " id="basic-types.md-b44dae2b"  >+</code> operator. This also works for concatenating strings with values of other types, as long as the first element in the expression is a string:</p><div class="code-block" data-lang="kotlin" id="basic-types.md-ea4f6359"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\nval s = &quot;abc&quot; + 1\nprintln(s + &quot;def&quot;)\n//sampleEnd\n}\n</div><p id="basic-types.md-f6ff6ea" >Note that in most cases using <a href="#basic-types.md-string-templates" id="basic-types.md-598d6f78"   >string templates</a> or raw strings is preferable to string concatenation.</p><section class="chapter"  ><h3 id="basic-types.md-string-literals" data-toc="basic-types#basic-types.md-string-literals"  >String literals</h3><p id="basic-types.md-9a1cd9c1" >Kotlin has two types of string literals:</p><ul class="list _ul" id="basic-types.md-ed2a4f24"   ><li class="list__item" id="basic-types.md-246b515" ><p><em id="basic-types.md-cdd89e95" class=""  >escaped</em> strings that may contain escaped characters</p></li><li class="list__item" id="basic-types.md-daa74da0" ><p><em id="basic-types.md-e24177bf" class=""  >raw</em> strings that can contain newlines and arbitrary text</p></li></ul><p id="basic-types.md-d310cdef" >Here\'s an example of an escaped string:</p><div class="code-block" data-lang="kotlin" id="basic-types.md-7a9f3b50"         >val s = &quot;Hello, world!\\n&quot;\n</div><p id="basic-types.md-6dd39887" >Escaping is done in the conventional way, with a backslash (<code class="code " id="basic-types.md-f1710559"  >\\</code> ). See <a href="#basic-types.md-characters" id="basic-types.md-3a7a337f"   >Characters</a> above for the list of supported escape sequences.</p><p id="basic-types.md-aa5036c0" >A raw string is delimited by a triple quote (<code class="code " id="basic-types.md-bf4d0a05"  >&quot;&quot;&quot;</code> ), contains no escaping and can contain newlines and any other characters:</p><div class="code-block" data-lang="kotlin" id="basic-types.md-4f70357c"         >val text = &quot;&quot;&quot;\n    for (c in &quot;foo&quot;)\n        print(c)\n&quot;&quot;&quot;\n</div><p id="basic-types.md-4987b11a" >To remove leading whitespace from raw strings, use the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/trim-margin.html" id="basic-types.md-19f2a8e7"   data-external="true" rel="noopener noreferrer" ><code class="code " id="basic-types.md-dadddf55"  >trimMargin()</code></a> function:</p><div class="code-block" data-lang="kotlin" id="basic-types.md-241b6cae"         >val text = &quot;&quot;&quot;\n    |Tell me and I forget.\n    |Teach me and I remember.\n    |Involve me and I learn.\n    |(Benjamin Franklin)\n    &quot;&quot;&quot;.trimMargin()\n</div><p id="basic-types.md-c80e336a" >By default, <code class="code " id="basic-types.md-64488c24"  >|</code> is used as margin prefix, but you can choose another character and pass it as a parameter, like <code class="code " id="basic-types.md-a5934bc2"  >trimMargin(&quot;&gt;&quot;)</code>.</p></section><section class="chapter"  ><h3 id="basic-types.md-string-templates" data-toc="basic-types#basic-types.md-string-templates"  >String templates</h3><p id="basic-types.md-b285a106" >String literals may contain <em id="basic-types.md-824e2171" class=""  >template</em> expressions - pieces of code that are evaluated and whose results are concatenated into the string. A template expression starts with a dollar sign (<code class="code " id="basic-types.md-269d3bec"  >$</code>) and consists of either a name:</p><div class="code-block" data-lang="kotlin" id="basic-types.md-f56f2347"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val i = 10\n    println(&quot;i = $i&quot;) // prints &quot;i = 10&quot;\n//sampleEnd\n}\n</div><p id="basic-types.md-961d5a01" >or an expression in curly braces:</p><div class="code-block" data-lang="kotlin" id="basic-types.md-3efcc1cd"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val s = &quot;abc&quot;\n    println(&quot;$s.length is ${s.length}&quot;) // prints &quot;abc.length is 3&quot;\n//sampleEnd\n}\n</div><p id="basic-types.md-8670aab9" >You can use templates both in raw and escaped strings. To insert the <code class="code " id="basic-types.md-a2b70b75"  >$</code> character in a raw string (which doesn\'t support backslash escaping), use the following syntax:</p><div class="code-block" data-lang="kotlin" id="basic-types.md-11815995"         >val price = &quot;&quot;&quot;\n${\'$\'}9.99\n&quot;&quot;&quot;\n</div></section></section><section class="chapter"  ><h2 id="basic-types.md-arrays" data-toc="basic-types#basic-types.md-arrays"  >Arrays</h2><p id="basic-types.md-b1cc5d97" >Arrays in Kotlin are represented by the <code class="code " id="basic-types.md-9628303d"  >Array</code> class. It has <code class="code " id="basic-types.md-4ccb8341"  >get</code> and <code class="code " id="basic-types.md-748b5699"  >set</code> functions that turn into <code class="code " id="basic-types.md-90ce4286"  >[]</code> by operator overloading conventions, and the <code class="code " id="basic-types.md-5d26a763"  >size</code> property, along with other useful member functions:</p><div class="code-block" data-lang="kotlin" id="basic-types.md-ed4f6157"         >class Array&lt;T&gt; private constructor() {\n    val size: Int\n    operator fun get(index: Int): T\n    operator fun set(index: Int, value: T): Unit\n\n    operator fun iterator(): Iterator&lt;T&gt;\n    // ...\n}\n</div><p id="basic-types.md-4ec79ce0" >To create an array, use the function <code class="code " id="basic-types.md-d017a8eb"  >arrayOf()</code> and pass the item values to it, so that <code class="code " id="basic-types.md-386ded1d"  >arrayOf(1, 2, 3)</code> creates an array <code class="code " id="basic-types.md-c3efcff9"  >[1, 2, 3]</code>. Alternatively, the <code class="code " id="basic-types.md-678a22cb"  >arrayOfNulls()</code> function can be used to create an array of a given size filled with <code class="code " id="basic-types.md-d31bcb7e"  >null</code> elements.</p><p id="basic-types.md-19524630" >Another option is to use the <code class="code " id="basic-types.md-fc03e92e"  >Array</code> constructor that takes the array size and the function that returns values of array elements given its index:</p><div class="code-block" data-lang="kotlin" id="basic-types.md-ab6baa2b"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    // Creates an Array&lt;String&gt; with values [&quot;0&quot;, &quot;1&quot;, &quot;4&quot;, &quot;9&quot;, &quot;16&quot;]\n    val asc = Array(5) { i -&gt; (i * i).toString() }\n    asc.forEach { println(it) }\n//sampleEnd\n}\n</div><p id="basic-types.md-eb33f5b8" >As we said above, the <code class="code " id="basic-types.md-db157246"  >[]</code> operation stands for calls to member functions <code class="code " id="basic-types.md-751d9d2c"  >get()</code> and <code class="code " id="basic-types.md-be70021b"  >set()</code>.</p><p id="basic-types.md-87495a74" >Arrays in Kotlin are <em id="basic-types.md-b7e2c89f" class=""  >invariant</em>. This means that Kotlin does not let us assign an <code class="code " id="basic-types.md-51136512"  >Array&lt;String&gt;</code> to an <code class="code " id="basic-types.md-49816eec"  >Array&lt;Any&gt;</code>, which prevents a possible runtime failure (but you can use <code class="code " id="basic-types.md-c4aca16d"  >Array&lt;out Any&gt;</code>, see <a href="#generics.md-type-projections" id="basic-types.md-5be4590c"   >Type Projections</a> ).</p><section class="chapter"  ><h3 id="basic-types.md-primitive-type-arrays" data-toc="basic-types#basic-types.md-primitive-type-arrays"  >Primitive type arrays</h3><p id="basic-types.md-7a76929b" >Kotlin also has classes that represent arrays of primitive types without boxing overhead: <code class="code " id="basic-types.md-df5090e9"  >ByteArray</code>, <code class="code " id="basic-types.md-a7f3c11e"  >ShortArray</code>, <code class="code " id="basic-types.md-178ac242"  >IntArray</code>, and so on. These classes have no inheritance relation to the <code class="code " id="basic-types.md-85a2d855"  >Array</code> class, but they have the same set of methods and properties. Each of them also has a corresponding factory function:</p><div class="code-block" data-lang="kotlin" id="basic-types.md-3710c776"         >val x: IntArray = intArrayOf(1, 2, 3)\nx[0] = x[1] + x[2]\n</div><div class="code-block" data-lang="kotlin" id="basic-types.md-bc89248c"         >// Array of int of size 5 with values [0, 0, 0, 0, 0]\nval arr = IntArray(5)\n\n// e.g. initialise the values in the array with a constant\n// Array of int of size 5 with values [42, 42, 42, 42, 42]\nval arr = IntArray(5) { 42 }\n\n// e.g. initialise the values in the array using a lambda\n// Array of int of size 5 with values [0, 1, 2, 3, 4] (values initialised to their index value)\nvar arr = IntArray(5) { it * 1 } \n</div></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="typecasts.md"  >Type checks and casts</h1><section class="chapter"  ><h2 id="typecasts.md-is-and-is-operators" data-toc="typecasts#typecasts.md-is-and-is-operators"  >is and !is operators</h2><p id="typecasts.md-7565296f" >To perform a runtime check whether an object conforms to a given type, use the <code class="code " id="typecasts.md-8db052de"  >is</code> operator or its negated form <code class="code " id="typecasts.md-4db880b6"  >!is</code>:</p><div class="code-block" data-lang="kotlin" id="typecasts.md-39403e7b"         >if (obj is String) {\n    print(obj.length)\n}\n\nif (obj !is String) { // same as !(obj is String)\n    print(&quot;Not a String&quot;)\n} else {\n    print(obj.length)\n}\n</div></section><section class="chapter"  ><h2 id="typecasts.md-smart-casts" data-toc="typecasts#typecasts.md-smart-casts"  >Smart casts</h2><p id="typecasts.md-745ea8f7" >In most cases, you don\'t need to use explicit cast operators in Kotlin because the compiler tracks the <code class="code " id="typecasts.md-75cbf9a3"  >is</code> -checks and <a href="#typecasts.md-unsafe-cast-operator" id="typecasts.md-1f337abc"   >explicit casts</a> for immutable values and inserts (safe) casts automatically when needed:</p><div class="code-block" data-lang="kotlin" id="typecasts.md-2ace3318"         >fun demo(x: Any) {\n    if (x is String) {\n        print(x.length) // x is automatically cast to String\n    }\n}\n</div><p id="typecasts.md-a263df50" >The compiler is smart enough to know a cast to be safe if a negative check leads to a return:</p><div class="code-block" data-lang="kotlin" id="typecasts.md-ed50a3b7"         >if (x !is String) return\n\nprint(x.length) // x is automatically cast to String\n</div><p id="typecasts.md-807254ed" >or in the right-hand side of <code class="code " id="typecasts.md-e854f333"  >&amp;&amp;</code> and <code class="code " id="typecasts.md-77064e"  >||</code>:</p><div class="code-block" data-lang="kotlin" id="typecasts.md-2abdccf2"         >// x is automatically cast to string on the right-hand side of `||`\nif (x !is String || x.length == 0) return\n\n// x is automatically cast to string on the right-hand side of `&amp;&amp;`\nif (x is String &amp;&amp; x.length &gt; 0) {\n    print(x.length) // x is automatically cast to String\n}\n</div><p id="typecasts.md-266baa6e" >Such <em id="typecasts.md-705138c1" class=""  >smart casts</em> work for <a href="#control-flow.md-when-expression" id="typecasts.md-d25d298e"   ><code class="code " id="typecasts.md-22156270"  >when</code> expressions</a> and <a href="#control-flow.md-while-loops" id="typecasts.md-1c207419"   ><code class="code " id="typecasts.md-b3003c24"  >while</code> loops</a> as well:</p><div class="code-block" data-lang="kotlin" id="typecasts.md-e7f7036d"         >when (x) {\n    is Int -&gt; print(x + 1)\n    is String -&gt; print(x.length + 1)\n    is IntArray -&gt; print(x.sum())\n}\n</div><p id="typecasts.md-9524c910" >Note that smart casts work only when the compiler can guarantee that the variable won\'t change between the check and the usage. More specifically, smart casts are applicable according to the following rules:</p><ul class="list _ul" id="typecasts.md-85684353"   ><li class="list__item" id="typecasts.md-f19a1832" ><p><code class="code " id="typecasts.md-64f6a202"  >val</code> local variables - always except for <a href="#delegated-properties.md" id="typecasts.md-46c1f718"   >local delegated properties</a>.</p></li><li class="list__item" id="typecasts.md-eaea552a" ><p><code class="code " id="typecasts.md-7b9b2cda"  >val</code> properties - if the property is private or internal or the check is performed in the same <a href="#visibility-modifiers.md-modules" id="typecasts.md-c3f23337"   >module</a> where the property is declared. Smart casts aren\'t applicable to open properties or properties that have custom getters.</p></li><li class="list__item" id="typecasts.md-597b751d" ><p><code class="code " id="typecasts.md-e8401f7c"  >var</code> local variables - if the variable is not modified between the check and the usage, is not captured in a lambda that modifies it, and is not a local delegated property.</p></li><li class="list__item" id="typecasts.md-5def71b1" ><p><code class="code " id="typecasts.md-6c560b23"  >var</code> properties - never because the variable can be modified at any time by other code.</p></li></ul></section><section class="chapter"  ><h2 id="typecasts.md-unsafe-cast-operator" data-toc="typecasts#typecasts.md-unsafe-cast-operator"  >"Unsafe" cast operator</h2><p id="typecasts.md-870d905" >Usually, the cast operator throws an exception if the cast isn\'t possible. Thus, it\'s called <em id="typecasts.md-29a93ce7" class=""  >unsafe</em>. The unsafe cast in Kotlin is done by the infix operator <code class="code " id="typecasts.md-63b37193"  >as</code>.</p><div class="code-block" data-lang="kotlin" id="typecasts.md-e591272e"         >val x: String = y as String\n</div><p id="typecasts.md-9d0bfb50" >Note that <code class="code " id="typecasts.md-af7e150a"  >null</code> cannot be cast to <code class="code " id="typecasts.md-6fd560c7"  >String</code> as this type is not <a href="#null-safety.md" id="typecasts.md-ec70236e"   >nullable</a>. If <code class="code " id="typecasts.md-24e9517e"  >y</code> is null, the code above throws an exception. To make such code correct for null values, use the nullable type on the right hand side of the cast:</p><div class="code-block" data-lang="kotlin" id="typecasts.md-f0b268f4"         >val x: String? = y as String?\n</div></section><section class="chapter"  ><h2 id="typecasts.md-safe-nullable-cast-operator" data-toc="typecasts#typecasts.md-safe-nullable-cast-operator"  >"Safe" (nullable) cast operator</h2><p id="typecasts.md-4dd013e9" >To avoid exceptions, use the <em id="typecasts.md-da3b8dc" class=""  >safe</em> cast operator <code class="code " id="typecasts.md-9655b96e"  >as?</code> that returns <code class="code " id="typecasts.md-e85da27e"  >null</code> on failure.</p><div class="code-block" data-lang="kotlin" id="typecasts.md-a33e4e72"         >val x: String? = y as? String\n</div><p id="typecasts.md-40ccf223" >Note that despite the fact that the right-hand side of <code class="code " id="typecasts.md-78ff1e1"  >as?</code> is a non-null type <code class="code " id="typecasts.md-3f90c56e"  >String</code>, the result of the cast is nullable.</p></section><section class="chapter"  ><h2 id="typecasts.md-type-erasure-and-generic-type-checks" data-toc="typecasts#typecasts.md-type-erasure-and-generic-type-checks"  >Type erasure and generic type checks</h2><p id="typecasts.md-1bcd6a82" >Kotlin ensures type safety of operations involving <a href="#generics.md" id="typecasts.md-155d75a"   >generics</a> at compile time, while, at runtime, instances of generic types don\'t hold information about their actual type arguments. For example, <code class="code " id="typecasts.md-b9d2cc8a"  >List&lt;Foo&gt;</code> is erased to just <code class="code " id="typecasts.md-d368fb40"  >List&lt;*&gt;</code>. In general, there is no way to check whether an instance belongs to a generic type with certain type arguments at runtime.</p><p id="typecasts.md-3b3128b8" >Given that, the compiler prohibits <code class="code " id="typecasts.md-f32db34e"  >is</code> -checks that cannot be performed at runtime due to type erasure, such as <code class="code " id="typecasts.md-78826ea0"  >ints is List&lt;Int&gt;</code> or <code class="code " id="typecasts.md-30a29b9"  >list is T</code> (type parameter). You can, however, check an instance against a <a href="#generics.md-star-projections" id="typecasts.md-99d8a57d"   >star-projected type</a>:</p><div class="code-block" data-lang="kotlin" id="typecasts.md-c109feb8"         >if (something is List&lt;*&gt;) {\n    something.forEach { println(it) } // The items are typed as `Any?`\n}\n</div><p id="typecasts.md-c386bbde" >Similarly, when you already have the type arguments of an instance checked statically (at compile time), you can make an <code class="code " id="typecasts.md-21a58087"  >is</code> -check or a cast that involves the non-generic part of the type. Note that angle brackets are omitted in this case:</p><div class="code-block" data-lang="kotlin" id="typecasts.md-7c67955d"         >fun handleStrings(list: List&lt;String&gt;) {\n    if (list is ArrayList) {\n        // `list` is smart-cast to `ArrayList&lt;String&gt;`\n    }\n}\n</div><p id="typecasts.md-b98fc352" >The same syntax with omitted type arguments can be used for casts that do not take type arguments into account: <code class="code " id="typecasts.md-c1e6c450"  >list as ArrayList</code>.</p><p id="typecasts.md-2c3131f1" >Inline functions with <a href="#inline-functions.md-reified-type-parameters" id="typecasts.md-94f5d245"   >reified type parameters</a> have their actual type arguments inlined at each call site. This enables <code class="code " id="typecasts.md-c58e659f"  >arg is T</code> checks for the type parameters, but if <code class="code " id="typecasts.md-6f05c512"  >arg</code> is an instance of a generic type itself, <em id="typecasts.md-9e659bd8" class=""  >its</em> type arguments are still erased.</p><div class="code-block" data-lang="kotlin" id="typecasts.md-e6250747"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\ninline fun &lt;reified A, reified B&gt; Pair&lt;*, *&gt;.asPairOf(): Pair&lt;A, B&gt;? {\n    if (first !is A || second !is B) return null\n    return first as A to second as B\n}\n\nval somePair: Pair&lt;Any?, Any?&gt; = &quot;items&quot; to listOf(1, 2, 3)\n\nval stringToSomething = somePair.asPairOf&lt;String, Any&gt;()\nval stringToInt = somePair.asPairOf&lt;String, Int&gt;()\nval stringToList = somePair.asPairOf&lt;String, List&lt;*&gt;&gt;()\nval stringToStringList = somePair.asPairOf&lt;String, List&lt;String&gt;&gt;() // Breaks type safety!\n//sampleEnd\n\nfun main() {\n    println(&quot;stringToSomething = &quot; + stringToSomething)\n    println(&quot;stringToInt = &quot; + stringToInt)\n    println(&quot;stringToList = &quot; + stringToList)\n    println(&quot;stringToStringList = &quot; + stringToStringList)\n}\n</div></section><section class="chapter"  ><h2 id="typecasts.md-unchecked-casts" data-toc="typecasts#typecasts.md-unchecked-casts"  >Unchecked casts</h2><p id="typecasts.md-4e5c469b" >As said above, type erasure makes checking actual type arguments of a generic type instance impossible at runtime. Additionally, generic types in the code might be connected to each other not closely enough for the compiler to ensure type safety.</p><p id="typecasts.md-1491ca89" >Even so, sometimes we have high-level program logic that implies type safety instead. For example:</p><div class="code-block" data-lang="kotlin" id="typecasts.md-4f21871e"         >fun readDictionary(file: File): Map&lt;String, *&gt; = file.inputStream().use { \n    TODO(&quot;Read a mapping of strings to arbitrary elements.&quot;)\n}\n\n// We saved a map with `Int`s into that file\nval intsFile = File(&quot;ints.dictionary&quot;)\n\n// Warning: Unchecked cast: `Map&lt;String, *&gt;` to `Map&lt;String, Int&gt;`\nval intsDictionary: Map&lt;String, Int&gt; = readDictionary(intsFile) as Map&lt;String, Int&gt;\n</div><p id="typecasts.md-abeb3167" >A warning appears for the cast in the last line. The compiler can\'t fully check it at runtime and provides no guarantee that the values in the map are <code class="code " id="typecasts.md-24345a05"  >Int</code>.</p><p id="typecasts.md-c8c54652" >To avoid unchecked casts, you can redesign the program structure: in the example above, there you could use interfaces <code class="code " id="typecasts.md-b6e433d4"  >DictionaryReader&lt;T&gt;</code> and <code class="code " id="typecasts.md-5b671a8c"  >DictionaryWriter&lt;T&gt;</code> with type-safe implementations for different types. You can introduce reasonable abstractions to move unchecked casts from calling code to the implementation details. Proper use of <a href="#generics.md-variance" id="typecasts.md-b70916a9"   >generic variance</a> can also help.</p><p id="typecasts.md-459a5415" >For generic functions, using <a href="#inline-functions.md-reified-type-parameters" id="typecasts.md-7a306147"   >reified type parameters</a> makes the casts such as <code class="code " id="typecasts.md-65ddadb8"  >arg as T</code> checked, unless <code class="code " id="typecasts.md-407cb29"  >arg</code> \'s type has <em id="typecasts.md-af7e6a1a" class=""  >its own</em> type arguments that are erased.</p><p id="typecasts.md-8ca85937" >An unchecked cast warning can be suppressed by <a href="#annotations.md" id="typecasts.md-df67dee3"   >annotating</a> the statement or the declaration where it occurs with <code class="code " id="typecasts.md-518098d7"  >@Suppress(&quot;UNCHECKED_CAST&quot;)</code>:</p><div class="code-block" data-lang="kotlin" id="typecasts.md-ee41dca3"         >inline fun &lt;reified T&gt; List&lt;*&gt;.asListOfType(): List&lt;T&gt;? =\n    if (all { it is T })\n        @Suppress(&quot;UNCHECKED_CAST&quot;)\n        this as List&lt;T&gt; else\n        null\n</div><aside data-type="note" class="prompt" data-title="" id="typecasts.md-60b01316" ><p id="typecasts.md-5aedfbe8" ><b id="typecasts.md-87fc8f8d" class=""  >On JVM</b>: the <a href="#basic-types.md-arrays" id="typecasts.md-a615778c"   >array types</a> (<code class="code " id="typecasts.md-7d48970"  >Array&lt;Foo&gt;</code>) retain the information about the erased type of their elements, and the type casts to an array type are partially checked: the nullability and actual type arguments of the elements type are still erased. For example, the cast <code class="code " id="typecasts.md-7345c608"  >foo as Array&lt;List&lt;String&gt;?&gt;</code> will succeed if <code class="code " id="typecasts.md-bb2352d0"  >foo</code> is an array holding any <code class="code " id="typecasts.md-45477669"  >List&lt;*&gt;</code>, nullable or not.</p></aside></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="control-flow.md"  >Conditions and loops</h1><section class="chapter"  ><h2 id="control-flow.md-if-expression" data-toc="control-flow#control-flow.md-if-expression"  >If expression</h2><p id="control-flow.md-528363ca" >In Kotlin, <code class="code " id="control-flow.md-d26fb17c"  >if</code> is an expression: it returns a value. Therefore, there is no ternary operator (<code class="code " id="control-flow.md-cb02f3b9"  >condition ? then : else</code>) because ordinary <code class="code " id="control-flow.md-f55262c4"  >if</code> works fine in this role.</p><div class="code-block" data-lang="kotlin" id="control-flow.md-d2c1e04f"         >var max = a \nif (a &lt; b) max = b\n\n// With else \nvar max: Int\nif (a &gt; b) {\n    max = a\n} else {\n    max = b\n}\n \n// As expression \nval max = if (a &gt; b) a else b\n</div><p id="control-flow.md-bbde650d" >Branches of <code class="code " id="control-flow.md-31153ae3"  >if</code> branches can be blocks. In this case, the last expression is the value of a block:</p><div class="code-block" data-lang="kotlin" id="control-flow.md-d4dde1c0"         >val max = if (a &gt; b) {\n    print(&quot;Choose a&quot;)\n    a\n} else {\n    print(&quot;Choose b&quot;)\n    b\n}\n</div><p id="control-flow.md-8ed7ea0c" >If you\'re using <code class="code " id="control-flow.md-dd531bee"  >if</code> as an expression, for example, for returning its value or assigning it to a variable, the <code class="code " id="control-flow.md-4e955417"  >else</code> branch is mandatory.</p></section><section class="chapter"  ><h2 id="control-flow.md-when-expression" data-toc="control-flow#control-flow.md-when-expression"  >When expression</h2><p id="control-flow.md-a5d6c0f4" ><code class="code " id="control-flow.md-a8ce4843"  >when</code> defines a conditional expression with multiple branches. It is similar to the <code class="code " id="control-flow.md-765d2fc0"  >switch</code> statement in C-like languages. Its simple form looks like this.</p><div class="code-block" data-lang="kotlin" id="control-flow.md-58fcc5f7"         >when (x) {\n    1 -&gt; print(&quot;x == 1&quot;)\n    2 -&gt; print(&quot;x == 2&quot;)\n    else -&gt; { // Note the block\n        print(&quot;x is neither 1 nor 2&quot;)\n    }\n}\n</div><p id="control-flow.md-471d5571" ><code class="code " id="control-flow.md-5138d83b"  >when</code> matches its argument against all branches sequentially until some branch condition is satisfied.</p><p id="control-flow.md-1e0ab582" ><code class="code " id="control-flow.md-5cf9da53"  >when</code> can be used either as an expression or as a statement. If it is used as an expression, the value of the first matching branch becomes the value of the overall expression. If it is used as a statement, the values of individual branches are ignored. Just like with <code class="code " id="control-flow.md-703673f"  >if</code>, each branch can be a block, and its value is the value of the last expression in the block.</p><p id="control-flow.md-d938addb" >The <code class="code " id="control-flow.md-54829f70"  >else</code> branch is evaluated if none of the other branch conditions are satisfied. If <code class="code " id="control-flow.md-eb9ada1b"  >when</code> is used as an expression, the <code class="code " id="control-flow.md-f061fc33"  >else</code> branch is mandatory, unless the compiler can prove that all possible cases are covered with branch conditions, for example, with <a href="#enum-classes.md" id="control-flow.md-59956e26"   ><code class="code " id="control-flow.md-6f43f9a7"  >enum</code> class</a> entries and <a href="#sealed-classes.md" id="control-flow.md-35e19191"   ><code class="code " id="control-flow.md-954e03bc"  >sealed</code> class</a> subtypes).</p><p id="control-flow.md-d9c4c9" >To define a common behavior for multiple cases, combine their conditions in a single line with a comma:</p><div class="code-block" data-lang="kotlin" id="control-flow.md-b33933d6"         >when (x) {\n    0, 1 -&gt; print(&quot;x == 0 or x == 1&quot;)\n    else -&gt; print(&quot;otherwise&quot;)\n}\n</div><p id="control-flow.md-33be4c09" >You can use arbitrary expressions (not only constants) as branch conditions</p><div class="code-block" data-lang="kotlin" id="control-flow.md-1394ffbd"         >when (x) {\n    parseInt(s) -&gt; print(&quot;s encodes x&quot;)\n    else -&gt; print(&quot;s does not encode x&quot;)\n}\n</div><p id="control-flow.md-fd247514" >You can also check a value for being <code class="code " id="control-flow.md-47ebd78d"  >in</code> or <code class="code " id="control-flow.md-63375e2b"  >!in</code> a <a href="#ranges.md" id="control-flow.md-76957f29"   >range</a> or a collection:</p><div class="code-block" data-lang="kotlin" id="control-flow.md-16799ac"         >when (x) {\n    in 1..10 -&gt; print(&quot;x is in the range&quot;)\n    in validNumbers -&gt; print(&quot;x is valid&quot;)\n    !in 10..20 -&gt; print(&quot;x is outside the range&quot;)\n    else -&gt; print(&quot;none of the above&quot;)\n}\n</div><p id="control-flow.md-b7fcdeeb" >Another option is checking that a value <code class="code " id="control-flow.md-4e8e482c"  >is</code> or <code class="code " id="control-flow.md-1dd2620c"  >!is</code> of a particular type. Note that, due to <a href="#typecasts.md-smart-casts" id="control-flow.md-420480ee"   >smart casts</a>, you can access the methods and properties of the type without any extra checks.</p><div class="code-block" data-lang="kotlin" id="control-flow.md-381e677b"         >fun hasPrefix(x: Any) = when(x) {\n    is String -&gt; x.startsWith(&quot;prefix&quot;)\n    else -&gt; false\n}\n</div><p id="control-flow.md-53fb69e6" ><code class="code " id="control-flow.md-335f4880"  >when</code> can also be used as a replacement for an <code class="code " id="control-flow.md-636a822d"  >if</code>- <code class="code " id="control-flow.md-9fcea266"  >else</code> <code class="code " id="control-flow.md-cd503b5f"  >if</code> chain. If no argument is supplied, the branch conditions are simply boolean expressions, and a branch is executed when its condition is true:</p><div class="code-block" data-lang="kotlin" id="control-flow.md-e6d97386"         >when {\n    x.isOdd() -&gt; print(&quot;x is odd&quot;)\n    y.isEven() -&gt; print(&quot;y is even&quot;)\n    else -&gt; print(&quot;x+y is odd&quot;)\n}\n</div><p id="control-flow.md-177ece50" >You can capture <em id="control-flow.md-bd561109" class=""  >when</em> subject in a variable using following syntax:</p><div class="code-block" data-lang="kotlin" id="control-flow.md-359d1e88"         >fun Request.getBody() =\n        when (val response = executeRequest()) {\n            is Success -&gt; response.body\n            is HttpError -&gt; throw HttpException(response.status)\n        }\n</div><p id="control-flow.md-d17b285f" >The scope of variable introduced in <em id="control-flow.md-4d6daf48" class=""  >when</em> subject is restricted to the body of this <em id="control-flow.md-c03a13ed" class=""  >when</em>.</p></section><section class="chapter"  ><h2 id="control-flow.md-for-loops" data-toc="control-flow#control-flow.md-for-loops"  >For loops</h2><p id="control-flow.md-eac23ece" >The <code class="code " id="control-flow.md-d1bf5efc"  >for</code> loop iterates through anything that provides an iterator. This is equivalent to the <code class="code " id="control-flow.md-f2d41b0d"  >foreach</code> loop in languages like C#. The syntax of <code class="code " id="control-flow.md-30483897"  >for</code> is the following:</p><div class="code-block" data-lang="kotlin" id="control-flow.md-c7116ff4"         >for (item in collection) print(item)\n</div><p id="control-flow.md-95a73987" >The body of <code class="code " id="control-flow.md-9f424b24"  >for</code> can be a block.</p><div class="code-block" data-lang="kotlin" id="control-flow.md-428af84"         >for (item: Int in ints) {\n    // ...\n}\n</div><p id="control-flow.md-a52c5709" >As mentioned before, <code class="code " id="control-flow.md-3bbb9d2b"  >for</code> iterates through anything that provides an iterator. This means that it:</p><ul class="list _ul" id="control-flow.md-f4170d19"   ><li class="list__item" id="control-flow.md-8f05f4f3" >has a member or an extension-function <code class="code " id="control-flow.md-f2150be"  >iterator()</code> and the return type of <code class="code " id="control-flow.md-8de72ea5"  >iterator()</code>: <ul class="list _ul" id="control-flow.md-eefe984a"   ><li class="list__item" id="control-flow.md-f7e8b6c1" ><p>has a member or an extension-function <code class="code " id="control-flow.md-1acbbd1b"  >next()</code></p></li><li class="list__item" id="control-flow.md-5b295a45" ><p>has a member or an extension-function <code class="code " id="control-flow.md-ed947204"  >hasNext()</code> that returns <code class="code " id="control-flow.md-33b013e2"  >Boolean</code>.</p></li></ul></li></ul><p id="control-flow.md-56390132" >All of these three functions need to be marked as <code class="code " id="control-flow.md-3ae17e3c"  >operator</code>.</p><p id="control-flow.md-6cdc2953" >To iterate over a range of numbers, use a <a href="#ranges.md" id="control-flow.md-71191075"   >range expression</a>:</p><div class="code-block" data-lang="kotlin" id="control-flow.md-976e535e"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    for (i in 1..3) {\n        println(i)\n    }\n    for (i in 6 downTo 0 step 2) {\n        println(i)\n    }\n//sampleEnd\n}\n</div><p id="control-flow.md-ce344bbf" >A <code class="code " id="control-flow.md-64486ae6"  >for</code> loop over a range or an array is compiled to an index-based loop that does not create an iterator object.</p><p id="control-flow.md-28ff757e" >If you want to iterate through an array or a list with an index, you can do it this way:</p><div class="code-block" data-lang="kotlin" id="control-flow.md-807d1916"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\nval array = arrayOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)\n//sampleStart\n    for (i in array.indices) {\n        println(array[i])\n    }\n//sampleEnd\n}\n</div><p id="control-flow.md-885a3858" >Alternatively, you can use the <code class="code " id="control-flow.md-3ed54529"  >withIndex</code> library function:</p><div class="code-block" data-lang="kotlin" id="control-flow.md-6ce7712"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n    val array = arrayOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)\n//sampleStart\n    for ((index, value) in array.withIndex()) {\n        println(&quot;the element at $index is $value&quot;)\n    }\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="control-flow.md-while-loops" data-toc="control-flow#control-flow.md-while-loops"  >While loops</h2><p id="control-flow.md-94255efc" ><code class="code " id="control-flow.md-4c0d0b91"  >while</code> and <code class="code " id="control-flow.md-47985deb"  >do-while</code> loops execute their body continuously while their condition is satisfied. The difference between them is the condition checking time:</p><ul class="list _ul" id="control-flow.md-9d229afc"   ><li class="list__item" id="control-flow.md-6836731" ><p><code class="code " id="control-flow.md-609c0f15"  >while</code> checks the condition and, if it\'s satisfied, executes the body and then returns to the condition check.</p></li><li class="list__item" id="control-flow.md-5efe1662" ><p><code class="code " id="control-flow.md-6aa95380"  >do-while</code> executes the body and then checks the condition. If it\'s satisfied, the loop repeats. So, the body of <code class="code " id="control-flow.md-1bcd6cf1"  >do-while</code> executes at least once regardless of the condition.</p></li></ul><div class="code-block" data-lang="kotlin" id="control-flow.md-d08781ea"         >while (x &gt; 0) {\n    x--\n}\n\ndo {\n    val y = retrieveData()\n} while (y != null) // y is visible here!\n</div></section><section class="chapter"  ><h2 id="control-flow.md-break-and-continue-in-loops" data-toc="control-flow#control-flow.md-break-and-continue-in-loops"  >Break and continue in loops</h2><p id="control-flow.md-85415b24" >Kotlin supports traditional <code class="code " id="control-flow.md-d4eb6856"  >break</code> and <code class="code " id="control-flow.md-a8f30802"  >continue</code> operators in loops. See <a href="#returns.md" id="control-flow.md-dc4b7a5c"   >Returns and jumps</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="returns.md"  >Returns and jumps</h1><p id="returns.md-b2959282" >Kotlin has three structural jump expressions:</p><ul class="list _ul" id="returns.md-23f88e4"   ><li class="list__item" id="returns.md-79a549b3" ><p><code class="code " id="returns.md-6aa06f4e"  >return</code> by default returns from the nearest enclosing function or <a href="#lambdas.md-anonymous-functions" id="returns.md-742b8490"   >anonymous function</a></p></li><li class="list__item" id="returns.md-c9eaa7dc" ><p><code class="code " id="returns.md-5f9faf45"  >break</code> terminates the nearest enclosing loop</p></li><li class="list__item" id="returns.md-6bab4b0a" ><p><code class="code " id="returns.md-7479e64f"  >continue</code> proceeds to the next step of the nearest enclosing loop</p></li></ul><p id="returns.md-8dab987c" >All of these expressions can be used as part of larger expressions:</p><div class="code-block" data-lang="kotlin" id="returns.md-fed20d84"         >val s = person.name ?: return\n</div><p id="returns.md-29940f2d" >The type of these expressions is the <a href="#exceptions.md-the-nothing-type" id="returns.md-673bdd9"   >Nothing type</a>.</p><section class="chapter"  ><h2 id="returns.md-break-and-continue-labels" data-toc="returns#returns.md-break-and-continue-labels"  >Break and continue labels</h2><p id="returns.md-22d7c68a" >Any expression in Kotlin may be marked with a <em id="returns.md-84bfb21" class=""  >label</em>. Labels have the form of an identifier followed by the <code class="code " id="returns.md-34b3475e"  >@</code> sign, for example: <code class="code " id="returns.md-a9ccd12e"  >abc@</code>, <code class="code " id="returns.md-2f0d8a82"  >fooBar@</code>. To label an expression, just add a label in front of it.</p><div class="code-block" data-lang="kotlin" id="returns.md-1fcada1e"         >loop@ for (i in 1..100) {\n    // ...\n}\n</div><p id="returns.md-7da4928a" >Now, we can qualify a <code class="code " id="returns.md-198e98ca"  >break</code> or a <code class="code " id="returns.md-16b6399"  >continue</code> with a label:</p><div class="code-block" data-lang="kotlin" id="returns.md-79324ce3"         >loop@ for (i in 1..100) {\n    for (j in 1..100) {\n        if (...) break@loop\n    }\n}\n</div><p id="returns.md-778da389" >A <code class="code " id="returns.md-5b9390ed"  >break</code> qualified with a label jumps to the execution point right after the loop marked with that label. A <code class="code " id="returns.md-1d5db44e"  >continue</code> proceeds to the next iteration of that loop.</p></section><section class="chapter"  ><h2 id="returns.md-return-at-labels" data-toc="returns#returns.md-return-at-labels"  >Return at labels</h2><p id="returns.md-dd9bde3f" >With function literals, local functions and object expression, functions can be nested in Kotlin. Qualified <code class="code " id="returns.md-e482f740"  >return</code> s allow us to return from an outer function. The most important use case is returning from a lambda expression. Recall that when we write this:</p><div class="code-block" data-lang="kotlin" id="returns.md-5f14b398"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nfun foo() {\n    listOf(1, 2, 3, 4, 5).forEach {\n        if (it == 3) return // non-local return directly to the caller of foo()\n        print(it)\n    }\n    println(&quot;this point is unreachable&quot;)\n}\n//sampleEnd\n\nfun main() {\n    foo()\n}\n</div><p id="returns.md-e50afb6d" >The <code class="code " id="returns.md-7eedaad9"  >return</code> -expression returns from the nearest enclosing function - <code class="code " id="returns.md-cbd2e307"  >foo</code>. Note that such non-local returns are supported only for lambda expressions passed to <a href="#inline-functions.md" id="returns.md-1ab2d06b"   >inline functions</a>. To return from a lambda expression, label it and qualify the <code class="code " id="returns.md-b7cc3469"  >return</code>:</p><div class="code-block" data-lang="kotlin" id="returns.md-9f7e5577"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nfun foo() {\n    listOf(1, 2, 3, 4, 5).forEach lit@{\n        if (it == 3) return@lit // local return to the caller of the lambda - the forEach loop\n        print(it)\n    }\n    print(&quot; done with explicit label&quot;)\n}\n//sampleEnd\n\nfun main() {\n    foo()\n}\n</div><p id="returns.md-e998a9df" >Now, it returns only from the lambda expression. Oftentimes it is more convenient to use <em id="returns.md-c7cb513b" class=""  >implicit labels</em>: such a label has the same name as the function to which the lambda is passed.</p><div class="code-block" data-lang="kotlin" id="returns.md-b9a87c25"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nfun foo() {\n    listOf(1, 2, 3, 4, 5).forEach {\n        if (it == 3) return@forEach // local return to the caller of the lambda - the forEach loop\n        print(it)\n    }\n    print(&quot; done with implicit label&quot;)\n}\n//sampleEnd\n\nfun main() {\n    foo()\n}\n</div><p id="returns.md-55cd08f4" >Alternatively, you can replace the lambda expression with an <a href="#lambdas.md-anonymous-functions" id="returns.md-8fac7fd6"   >anonymous function</a>. A <code class="code " id="returns.md-fd3dde4d"  >return</code> statement in an anonymous function will return from the anonymous function itself.</p><div class="code-block" data-lang="kotlin" id="returns.md-3edf62ed"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nfun foo() {\n    listOf(1, 2, 3, 4, 5).forEach(fun(value: Int) {\n        if (value == 3) return  // local return to the caller of the anonymous function - the forEach loop\n        print(value)\n    })\n    print(&quot; done with anonymous function&quot;)\n}\n//sampleEnd\n\nfun main() {\n    foo()\n}\n</div><p id="returns.md-9f029db6" >Note that the use of local returns in previous three examples is similar to the use of <code class="code " id="returns.md-2dcdd6ab"  >continue</code> in regular loops. There is no direct equivalent for <code class="code " id="returns.md-c20d2964"  >break</code>, but it can be simulated by adding another nesting lambda and non-locally returning from it:</p><div class="code-block" data-lang="kotlin" id="returns.md-e5ad9158"        data-runnable="true" data-min-compiler-version="1.3"  >//sampleStart\nfun foo() {\n    run loop@{\n        listOf(1, 2, 3, 4, 5).forEach {\n            if (it == 3) return@loop // non-local return from the lambda passed to run\n            print(it)\n        }\n    }\n    print(&quot; done with nested loop&quot;)\n}\n//sampleEnd\n\nfun main() {\n    foo()\n}\n</div><p id="returns.md-4911d64d" >When returning a value, the parser gives preference to the qualified return:</p><div class="code-block" data-lang="kotlin" id="returns.md-49a09b6f"         >return@a 1\n</div><p id="returns.md-e1284f02" >This means &quot;return <code class="code " id="returns.md-e3ba0934"  >1</code> at label <code class="code " id="returns.md-fb8935ca"  >@a</code>&quot; and not &quot;return a labeled expression <code class="code " id="returns.md-1a714bc2"  >(@a 1)</code> &quot;.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="exceptions.md"  >Exceptions</h1><section class="chapter"  ><h2 id="exceptions.md-exception-classes" data-toc="exceptions#exceptions.md-exception-classes"  >Exception classes</h2><p id="exceptions.md-5faac62a" >All exception classes in Kotlin inherit the class <code class="code " id="exceptions.md-8fad1cc6"  >Throwable</code>. Every exception has a message, a stack trace, and an optional cause.</p><p id="exceptions.md-3c82790d" >To throw an exception object, use the <code class="code " id="exceptions.md-88825773"  >throw</code> expression:</p><div class="code-block" data-lang="kotlin" id="exceptions.md-b1a7b105"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    throw Exception(&quot;Hi There!&quot;)\n//sampleEnd\n}\n</div><p id="exceptions.md-c330e386" >To catch an exception, use the <code class="code " id="exceptions.md-767d82ff"  >try</code> ... <code class="code " id="exceptions.md-f7c400d3"  >catch</code> expression:</p><div class="code-block" data-lang="kotlin" id="exceptions.md-3a51e114"         >try {\n    // some code\n} catch (e: SomeException) {\n    // handler\n} finally {\n    // optional finally block\n}\n</div><p id="exceptions.md-c358a12a" >There may be zero or more <code class="code " id="exceptions.md-61f86421"  >catch</code> blocks. <code class="code " id="exceptions.md-93c2218f"  >finally</code> block may be omitted. However, at least one <code class="code " id="exceptions.md-84601c74"  >catch</code> or <code class="code " id="exceptions.md-36d667c1"  >finally</code> block should be present.</p><section class="chapter"  ><h3 id="exceptions.md-try-is-an-expression" data-toc="exceptions#exceptions.md-try-is-an-expression"  >Try is an expression</h3><p id="exceptions.md-8be444d" ><code class="code " id="exceptions.md-619a74a6"  >try</code> is an expression; thus, it can have a return value:</p><div class="code-block" data-lang="kotlin" id="exceptions.md-17de177e"         >val a: Int? = try { parseInt(input) } catch (e: NumberFormatException) { null }\n</div><p id="exceptions.md-57f57dbf" >The returned value of a <code class="code " id="exceptions.md-5a275336"  >try</code> -expression is either the last expression in the <code class="code " id="exceptions.md-4aeaaea8"  >try</code> block or the last expression in the <code class="code " id="exceptions.md-b189bee4"  >catch</code> block (or blocks). Contents of the <code class="code " id="exceptions.md-ccdda727"  >finally</code> block do not affect the result of the expression.</p></section></section><section class="chapter"  ><h2 id="exceptions.md-checked-exceptions" data-toc="exceptions#exceptions.md-checked-exceptions"  >Checked exceptions</h2><p id="exceptions.md-4833570a" >Kotlin does not have checked exceptions. There are many reasons for this, but we will provide a simple example.</p><p id="exceptions.md-d072a9d5" >The following is an example interface of the JDK implemented by <code class="code " id="exceptions.md-b34d8926"  >StringBuilder</code> class:</p><div class="code-block" data-lang="java" id="exceptions.md-edb8909"         >Appendable append(CharSequence csq) throws IOException;\n</div><p id="exceptions.md-7d55b4e2" >What does this signature say? It says that every time I append a string to something (a <code class="code " id="exceptions.md-e842f04a"  >StringBuilder</code>, some kind of a log, a console, etc.) I have to catch those <code class="code " id="exceptions.md-58664fc5"  >IOExceptions</code>. Why? Because it might be performing IO (<code class="code " id="exceptions.md-321ef489"  >Writer</code> also implements <code class="code " id="exceptions.md-846da249"  >Appendable</code> )... So it results in this kind of code all over the place:</p><div class="code-block" data-lang="kotlin" id="exceptions.md-5650fa43"         >try {\n    log.append(message)\n} catch (IOException e) {\n    // Must be safe\n}\n</div><p id="exceptions.md-c46471d0" >And this is no good, see <a href="http://www.oracle.com/technetwork/java/effectivejava-136174.html" id="exceptions.md-7e373a3f"   data-external="true" rel="noopener noreferrer" >Effective Java, 3rd Edition</a>, Item 77: <em id="exceptions.md-697820b9" class=""  >Don\'t ignore exceptions</em>.</p><p id="exceptions.md-36008da7" >Bruce Eckel says about checked exceptions:</p><aside data-type="tip" class="prompt" data-title="" id="exceptions.md-f7b546db" ><p id="exceptions.md-7fd82505" >Examination of small programs leads to the conclusion that requiring exception specifications could both enhance developer productivity and enhance code quality, but experience with large software projects suggests a different result – decreased productivity and little or no increase in code quality.</p></aside><p id="exceptions.md-5b6d6633" >Other citations of this sort:</p><ul class="list _ul" id="exceptions.md-e42d696c"   ><li class="list__item" id="exceptions.md-120e946e" ><p><a href="http://radio-weblogs.com/0122027/stories/2003/04/01/JavasCheckedExceptionsWereAMistake.html" id="exceptions.md-37aaa9aa"   data-external="true" rel="noopener noreferrer" >Java\'s checked exceptions were a mistake</a> (Rod Waldhoff)</p></li><li class="list__item" id="exceptions.md-550d9735" ><p><a href="http://www.artima.com/intv/handcuffs.html" id="exceptions.md-1e6ef9dd"   data-external="true" rel="noopener noreferrer" >The Trouble with Checked Exceptions</a> (Anders Hejlsberg)</p></li></ul><p id="exceptions.md-a742fea8" >If you want to alert callers of possible exceptions when calling Kotlin code from Java, Swift, or Objective-C, you can use the <code class="code " id="exceptions.md-47041d0b"  >@Throws</code> annotation. Read more about using this annotation <a href="#java-to-kotlin-interop.md-checked-exceptions" id="exceptions.md-402d87cd"   >for Java</a> as well as <a href="#native-objc-interop.md-errors-and-exceptions" id="exceptions.md-ecd78f33"   >for Swift and Objective-C</a>.</p></section><section class="chapter"  ><h2 id="exceptions.md-the-nothing-type" data-toc="exceptions#exceptions.md-the-nothing-type"  >The Nothing type</h2><p id="exceptions.md-a14e4a8b" ><code class="code " id="exceptions.md-d741af45"  >throw</code> is an expression in Kotlin, so you can use it, for example, as part of an Elvis expression:</p><div class="code-block" data-lang="kotlin" id="exceptions.md-d8b9ebac"         >val s = person.name ?: throw IllegalArgumentException(&quot;Name required&quot;)\n</div><p id="exceptions.md-61cf81b8" >The type of the <code class="code " id="exceptions.md-ddfdab83"  >throw</code> expression is the special type <code class="code " id="exceptions.md-cb002106"  >Nothing</code>. The type has no values and is used to mark code locations that can never be reached. In your own code, you can use <code class="code " id="exceptions.md-ae2e1911"  >Nothing</code> to mark a function that never returns:</p><div class="code-block" data-lang="kotlin" id="exceptions.md-e06cc69e"         >fun fail(message: String): Nothing {\n    throw IllegalArgumentException(message)\n}\n</div><p id="exceptions.md-d068aad9" >When you call this function, the compiler will know that the execution doesn\'t continue beyond the call:</p><div class="code-block" data-lang="kotlin" id="exceptions.md-c9a4dca9"         >val s = person.name ?: fail(&quot;Name required&quot;)\nprintln(s)     // \'s\' is known to be initialized at this point\n</div><p id="exceptions.md-e624a01e" >Another case where you may encounter this type is type inference. The nullable variant of this type, <code class="code " id="exceptions.md-fcb6ae7d"  >Nothing?</code>, has exactly one possible value, which is <code class="code " id="exceptions.md-ca32baa"  >null</code>. If you use <code class="code " id="exceptions.md-f5f796fc"  >null</code> to initialize a value of an inferred type and there\'s no other information that can be used to determine a more specific type, the compiler will infer the <code class="code " id="exceptions.md-d248b1b9"  >Nothing?</code> type:</p><div class="code-block" data-lang="kotlin" id="exceptions.md-8350bcdf"         >val x = null           // \'x\' has type `Nothing?`\nval l = listOf(null)   // \'l\' has type `List&lt;Nothing?&gt;\n</div></section><section class="chapter"  ><h2 id="exceptions.md-java-interoperability" data-toc="exceptions#exceptions.md-java-interoperability"  >Java interoperability</h2><p id="exceptions.md-89032704" >Please see the section on exceptions in the <a href="#java-interop.md" id="exceptions.md-cdcccd21"   >Java Interoperability section</a> for information about Java interoperability.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="packages.md"  >Packages and imports</h1><p id="packages.md-2e3d715b" >A source file may start with a package declaration:</p><div class="code-block" data-lang="kotlin" id="packages.md-c3a71fe8"         >package org.example\n\nfun printMessage() { /*...*/ }\nclass Message { /*...*/ }\n\n// ...\n</div><p id="packages.md-f73662bd" >All the contents, such as classes and functions, of the source file are included in this package. So, in the example above, the full name of <code class="code " id="packages.md-879f99c4"  >printMessage()</code> is <code class="code " id="packages.md-f9486a81"  >org.example.printMessage</code>, and the full name of <code class="code " id="packages.md-5c826806"  >Message</code> is <code class="code " id="packages.md-cd27bffa"  >org.example.Message</code>.</p><p id="packages.md-bd6a0eae" >If the package is not specified, the contents of such a file belong to the <em id="packages.md-7a4c04fc" class=""  >default</em> package with no name.</p><section class="chapter"  ><h2 id="packages.md-default-imports" data-toc="packages#packages.md-default-imports"  >Default imports</h2><p id="packages.md-eaf0990d" >A number of packages are imported into every Kotlin file by default:</p><ul class="list _ul" id="packages.md-1ddc127a"   ><li class="list__item" id="packages.md-ba557488" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/index.html" id="packages.md-11a12215"   data-external="true" rel="noopener noreferrer" >kotlin.*</a></li><li class="list__item" id="packages.md-a0ff5901" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/index.html" id="packages.md-889fadbf"   data-external="true" rel="noopener noreferrer" >kotlin.annotation.*</a></li><li class="list__item" id="packages.md-b1c05f5c" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/index.html" id="packages.md-acd3762b"   data-external="true" rel="noopener noreferrer" >kotlin.collections.*</a></li><li class="list__item" id="packages.md-ec1c2a55" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.comparisons/index.html" id="packages.md-2a7915aa"   data-external="true" rel="noopener noreferrer" >kotlin.comparisons.*</a></li><li class="list__item" id="packages.md-f2c8cae4" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/index.html" id="packages.md-48a53e7e"   data-external="true" rel="noopener noreferrer" >kotlin.io.*</a></li><li class="list__item" id="packages.md-ff9b5b93" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/index.html" id="packages.md-ec414c0d"   data-external="true" rel="noopener noreferrer" >kotlin.ranges.*</a></li><li class="list__item" id="packages.md-a2410edb" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/index.html" id="packages.md-7dbae4eb"   data-external="true" rel="noopener noreferrer" >kotlin.sequences.*</a></li><li class="list__item" id="packages.md-20b1c636" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/index.html" id="packages.md-dcadd642"   data-external="true" rel="noopener noreferrer" >kotlin.text.*</a></li></ul><p id="packages.md-38f149dc" >Additional packages are imported depending on the target platform:</p><ul class="list _ul" id="packages.md-812f12a2"   ><li class="list__item" id="packages.md-2272a3c3" ><p id="packages.md-bc4d185e" >JVM:</p><ul class="list _ul" id="packages.md-b8505eb5"   ><li class="list__item" id="packages.md-dfaf2564" ><p>java.lang.*</p></li><li class="list__item" id="packages.md-bb3402e4" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/index.html" id="packages.md-806cc684"   data-external="true" rel="noopener noreferrer" >kotlin.jvm.*</a></li></ul></li><li class="list__item" id="packages.md-f05d3e2d" ><p id="packages.md-f9930922" >JS:</p><ul class="list _ul" id="packages.md-3e2e0293"   ><li class="list__item" id="packages.md-9b207cc5" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/index.html" id="packages.md-3341223d"   data-external="true" rel="noopener noreferrer" >kotlin.js.*</a></li></ul></li></ul></section><section class="chapter"  ><h2 id="packages.md-imports" data-toc="packages#packages.md-imports"  >Imports</h2><p id="packages.md-57b69783" >Apart from the default imports, each file may contain its own <code class="code " id="packages.md-5d5afbd6"  >import</code> directives.</p><p id="packages.md-bc71453a" >You can import either a single name:</p><div class="code-block" data-lang="kotlin" id="packages.md-a0eda5cc"         >import org.example.Message // Message is now accessible without qualification\n</div><p id="packages.md-96704c52" >or all the accessible contents of a scope: package, class, object, and so on:</p><div class="code-block" data-lang="kotlin" id="packages.md-dfdff659"         >import org.example.* // everything in \'org.example\' becomes accessible\n</div><p id="packages.md-45d16280" >If there is a name clash, you can disambiguate by using <code class="code " id="packages.md-246432b7"  >as</code> keyword to locally rename the clashing entity:</p><div class="code-block" data-lang="kotlin" id="packages.md-46fd6b88"         >import org.example.Message // Message is accessible\nimport org.test.Message as testMessage // testMessage stands for \'org.test.Message\'\n</div><p id="packages.md-a5b83147" >The <code class="code " id="packages.md-a426471"  >import</code> keyword is not restricted to importing classes; you can also use it to import other declarations:</p><ul class="list _ul" id="packages.md-7cf085b8"   ><li class="list__item" id="packages.md-1df28731" ><p>top-level functions and properties</p></li><li class="list__item" id="packages.md-c6229bd5" ><p>functions and properties declared in <a href="#object-declarations.md-object-declarations" id="packages.md-6147fd89"   >object declarations</a></p></li><li class="list__item" id="packages.md-33c54e38" ><a href="#enum-classes.md" id="packages.md-eb95c061"   >enum constants</a></li></ul></section><section class="chapter"  ><h2 id="packages.md-visibility-of-top-level-declarations" data-toc="packages#packages.md-visibility-of-top-level-declarations"  >Visibility of top-level declarations</h2><p id="packages.md-98c07554" >If a top-level declaration is marked <code class="code " id="packages.md-5463e608"  >private</code>, it is private to the file it\'s declared in (see <a href="#visibility-modifiers.md" id="packages.md-3dd6909a"   >Visibility modifiers</a> ).</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="classes.md"  >Classes</h1><p id="classes.md-2d0c0907" >Classes in Kotlin are declared using the keyword <code class="code " id="classes.md-e1d907b1"  >class</code>:</p><div class="code-block" data-lang="kotlin" id="classes.md-d9d98a00"         >class Invoice { /*...*/ }\n</div><p id="classes.md-a1628e2e" >The class declaration consists of the class name, the class header (specifying its type parameters, the primary constructor etc.) and the class body, surrounded by curly braces. Both the header and the body are optional; if the class has no body, curly braces can be omitted.</p><div class="code-block" data-lang="kotlin" id="classes.md-838bc9d3"         >class Empty\n</div><section class="chapter"  ><h2 id="classes.md-constructors" data-toc="classes#classes.md-constructors"  >Constructors</h2><p id="classes.md-ce75d281" >A class in Kotlin can have a <em id="classes.md-587a80df" class=""  >primary constructor</em> and one or more <em id="classes.md-b15bb2db" class=""  >secondary constructors</em>. The primary constructor is part of the class header: it goes after the class name (and optional type parameters).</p><div class="code-block" data-lang="kotlin" id="classes.md-e75cdf0d"         >class Person constructor(firstName: String) { /*...*/ }\n</div><p id="classes.md-13d0def0" >If the primary constructor does not have any annotations or visibility modifiers, the <code class="code " id="classes.md-6eac05bb"  >constructor</code> keyword can be omitted:</p><div class="code-block" data-lang="kotlin" id="classes.md-6efff5eb"         >class Person(firstName: String) { /*...*/ }\n</div><p id="classes.md-a5c25084" >The primary constructor cannot contain any code. Initialization code can be placed in <em id="classes.md-e7bdd21a" class=""  >initializer blocks</em>, which are prefixed with the <code class="code " id="classes.md-cdd93f31"  >init</code> keyword.</p><p id="classes.md-2c688bbb" >During an instance initialization, the initializer blocks are executed in the same order as they appear in the class body, interleaved with the property initializers:</p><div class="code-block" data-lang="kotlin" id="classes.md-5f502216"        data-runnable="true"  >//sampleStart\nclass InitOrderDemo(name: String) {\n    val firstProperty = &quot;First property: $name&quot;.also(::println)\n    \n    init {\n        println(&quot;First initializer block that prints ${name}&quot;)\n    }\n    \n    val secondProperty = &quot;Second property: ${name.length}&quot;.also(::println)\n    \n    init {\n        println(&quot;Second initializer block that prints ${name.length}&quot;)\n    }\n}\n//sampleEnd\n\nfun main() {\n    InitOrderDemo(&quot;hello&quot;)\n}\n</div><p id="classes.md-b2cf7aea" >Parameters of the primary constructor can be used in the initializer blocks. They can also be used in property initializers declared in the class body:</p><div class="code-block" data-lang="kotlin" id="classes.md-7d5b58b3"         >class Customer(name: String) {\n    val customerKey = name.toUpperCase()\n}\n</div><p id="classes.md-ce9989ac" >In fact, for declaring properties and initializing them from the primary constructor, Kotlin has a concise syntax:</p><div class="code-block" data-lang="kotlin" id="classes.md-ee29c12b"         >class Person(val firstName: String, val lastName: String, var age: Int) { /*...*/ }\n</div><p id="classes.md-4368367" >You can use a <a href="#coding-conventions.md-trailing-commas" id="classes.md-4fbf163f"   >trailing comma</a> when you declare class properties:</p><div class="code-block" data-lang="kotlin" id="classes.md-ed5827c8"         >class Person(\n    val firstName: String,\n    val lastName: String,\n    var age: Int, // trailing comma\n) { /*...*/ }\n</div><p id="classes.md-1cbcc548" >Much the same way as regular properties, the properties declared in the primary constructor can be mutable (<code class="code " id="classes.md-b2ccdb4"  >var</code>) or read-only (<code class="code " id="classes.md-6d84e656"  >val</code> ).</p><p id="classes.md-804c6e7e" >If the constructor has annotations or visibility modifiers, the <code class="code " id="classes.md-50e43932"  >constructor</code> keyword is required, and the modifiers go before it:</p><div class="code-block" data-lang="kotlin" id="classes.md-b4afa09f"         >class Customer public @Inject constructor(name: String) { /*...*/ }\n</div><p id="classes.md-b5aa7314" >Learn more about <a href="#visibility-modifiers.md-constructors" id="classes.md-55da5fea"   >visibility modifiers</a>.</p><section class="chapter"  ><h3 id="classes.md-secondary-constructors" data-toc="classes#classes.md-secondary-constructors"  >Secondary constructors</h3><p id="classes.md-a9c42e87" >The class can also declare <em id="classes.md-d5790982" class=""  >secondary constructors</em>, which are prefixed with <code class="code " id="classes.md-4d585c9a"  >constructor</code>:</p><div class="code-block" data-lang="kotlin" id="classes.md-228ebc57"         >class Person(val pets: MutableList&lt;Pet&gt; = mutableListOf())\n\nclass Pet {\n    constructor(owner: Person) {\n        owner.pets.add(this) // adds this pet to the list of its owners pets\n    }\n}\n</div><p id="classes.md-15d43e28" >If the class has a primary constructor, each secondary constructor needs to delegate to the primary constructor, either directly or indirectly through another secondary constructor(s). Delegation to another constructor of the same class is done using the <code class="code " id="classes.md-11e7c1b8"  >this</code> keyword:</p><div class="code-block" data-lang="kotlin" id="classes.md-b713b881"         >class Person(val name: String) {\n    var children: MutableList&lt;Person&gt; = mutableListOf()\n    constructor(name: String, parent: Person) : this(name) {\n        parent.children.add(this)\n    }\n}\n</div><p id="classes.md-e7d6bac1" >Code in initializer blocks effectively becomes part of the primary constructor. Delegation to the primary constructor happens as the first statement of a secondary constructor, so the code in all initializer blocks and property initializers is executed before the secondary constructor body.</p><p id="classes.md-89dba4c2" >Even if the class has no primary constructor, the delegation still happens implicitly, and the initializer blocks are still executed:</p><div class="code-block" data-lang="kotlin" id="classes.md-463bad40"        data-runnable="true"  >//sampleStart\nclass Constructors {\n    init {\n        println(&quot;Init block&quot;)\n    }\n\n    constructor(i: Int) {\n        println(&quot;Constructor $i&quot;)\n    }\n}\n//sampleEnd\n\nfun main() {\n    Constructors(1)\n}\n</div><p id="classes.md-775a6856" >If a non-abstract class does not declare any constructors (primary or secondary), it will have a generated primary constructor with no arguments. The visibility of the constructor will be public.</p><p id="classes.md-4d258f0b" >If you don\'t want your class to have a public constructor, declare an empty primary constructor with non-default visibility:</p><div class="code-block" data-lang="kotlin" id="classes.md-dd6782c6"         >class DontCreateMe private constructor () { /*...*/ }\n</div><aside data-type="note" class="prompt" data-title="" id="classes.md-1e217111" ><p id="classes.md-f8aba15" >On the JVM, if all of the parameters of the primary constructor have default values, the compiler will generate an additional parameterless constructor which will use the default values. This makes it easier to use Kotlin with libraries such as Jackson or JPA that create class instances through parameterless constructors.</p><div class="code-block" data-lang="kotlin" id="classes.md-e05e0de4"         >class Customer(val customerName: String = &quot;&quot;)\n</div></aside></section></section><section class="chapter"  ><h2 id="classes.md-creating-instances-of-classes" data-toc="classes#classes.md-creating-instances-of-classes"  >Creating instances of classes</h2><p id="classes.md-7d119a04" >To create an instance of a class, call the constructor as if it were a regular function:</p><div class="code-block" data-lang="kotlin" id="classes.md-dff02616"         >val invoice = Invoice()\n\nval customer = Customer(&quot;Joe Smith&quot;)\n</div><aside data-type="note" class="prompt" data-title="" id="classes.md-6d936a51" ><p id="classes.md-2df52445" >Kotlin does not have a <code class="code " id="classes.md-a62e8b98"  >new</code> keyword.</p></aside><p id="classes.md-28ec548f" >Creating instances of nested, inner and anonymous inner classes is described in <a href="#nested-classes.md" id="classes.md-fe3103b9"   >Nested classes</a>.</p></section><section class="chapter"  ><h2 id="classes.md-class-members" data-toc="classes#classes.md-class-members"  >Class members</h2><p id="classes.md-e3814ee7" >Classes can contain:</p><ul class="list _ul" id="classes.md-52c4c9e2"   ><li class="list__item" id="classes.md-4ffac726" ><a href="#classes.md-constructors" id="classes.md-b5eb1582"   >Constructors and initializer blocks</a></li><li class="list__item" id="classes.md-ecdc0fb7" ><a href="#functions.md" id="classes.md-6d7edbee"   >Functions</a></li><li class="list__item" id="classes.md-2eb2e27f" ><a href="#properties.md" id="classes.md-d7366cc3"   >Properties</a></li><li class="list__item" id="classes.md-bf438c10" ><a href="#nested-classes.md" id="classes.md-7230aa0a"   >Nested and inner classes</a></li><li class="list__item" id="classes.md-477da252" ><a href="#object-declarations.md" id="classes.md-6a925d67"   >Object declarations</a></li></ul></section><section class="chapter"  ><h2 id="classes.md-inheritance" data-toc="classes#classes.md-inheritance"  >Inheritance</h2><p id="classes.md-5937b8e9" >Classes can be derived from each other and form inheritance hierarchies. <a href="#inheritance.md" id="classes.md-a72ca282"   >Learn more about inheritance in Kotlin</a>.</p></section><section class="chapter"  ><h2 id="classes.md-abstract-classes" data-toc="classes#classes.md-abstract-classes"  >Abstract classes</h2><p id="classes.md-8e186430" >A class and some of its members may be declared <code class="code " id="classes.md-9327c13e"  >abstract</code>. An abstract member does not have an implementation in its class. You don\'t need to annotate an abstract class or function with <code class="code " id="classes.md-fa90b0df"  >open</code>.</p><p id="classes.md-533574a" >You can override a non-abstract <code class="code " id="classes.md-264d683d"  >open</code> member with an abstract one.</p><div class="code-block" data-lang="kotlin" id="classes.md-6ef1cd34"         >open class Polygon {\n    open fun draw() {}\n}\n\nabstract class Rectangle : Polygon() {\n    abstract override fun draw()\n}\n</div></section><section class="chapter"  ><h2 id="classes.md-companion-objects" data-toc="classes#classes.md-companion-objects"  >Companion objects</h2><p id="classes.md-2ec5dde0" >If you need to write a function that can be called without having a class instance but needs access to the internals of a class (for example, a factory method), you can write it as a member of an <a href="#object-declarations.md" id="classes.md-3bde13f3"   >object declaration</a> inside that class.</p><p id="classes.md-5599927f" >Even more specifically, if you declare a <a href="#object-declarations.md-companion-objects" id="classes.md-d3ae7b08"   >companion object</a> inside your class, you can access its members using only the class name as a qualifier.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="inheritance.md"  >Inheritance</h1><p id="inheritance.md-71e5bdf" >All classes in Kotlin have a common superclass <code class="code " id="inheritance.md-84a0a370"  >Any</code>, that is the default superclass for a class with no supertypes declared:</p><div class="code-block" data-lang="kotlin" id="inheritance.md-a7917e62"         >class Example // Implicitly inherits from Any\n</div><p id="inheritance.md-dee59868" ><code class="code " id="inheritance.md-50b24ff3"  >Any</code> has three methods: <code class="code " id="inheritance.md-b232e600"  >equals()</code>, <code class="code " id="inheritance.md-552ff430"  >hashCode()</code> and <code class="code " id="inheritance.md-abae1051"  >toString()</code>. Thus, they are defined for all Kotlin classes.</p><p id="inheritance.md-eab816f7" >By default, Kotlin classes are final: they can’t be inherited. To make a class inheritable, mark it with the <code class="code " id="inheritance.md-45e0658a"  >open</code> keyword.</p><div class="code-block" data-lang="kotlin" id="inheritance.md-292a58c7"         >open class Base //Class is open for inheritance\n\n</div><p id="inheritance.md-99e18c6d" >To declare an explicit supertype, place the type after a colon in the class header:</p><div class="code-block" data-lang="kotlin" id="inheritance.md-99477e3c"         >open class Base(p: Int)\n\nclass Derived(p: Int) : Base(p)\n</div><p id="inheritance.md-2889a65" >If the derived class has a primary constructor, the base class can (and must) be initialized right there, using the parameters of the primary constructor.</p><p id="inheritance.md-30229ec2" >If the derived class has no primary constructor, then each secondary constructor has to initialize the base type using the <code class="code " id="inheritance.md-7773e52"  >super</code> keyword, or to delegate to another constructor which does that. Note that in this case different secondary constructors can call different constructors of the base type:</p><div class="code-block" data-lang="kotlin" id="inheritance.md-e67c8efd"         >class MyView : View {\n    constructor(ctx: Context) : super(ctx)\n\n    constructor(ctx: Context, attrs: AttributeSet) : super(ctx, attrs)\n}\n</div><section class="chapter"  ><h2 id="inheritance.md-overriding-methods" data-toc="inheritance#inheritance.md-overriding-methods"  >Overriding methods</h2><p id="inheritance.md-aa462848" >Kotlin requires explicit modifiers for overridable members and overrides:</p><div class="code-block" data-lang="kotlin" id="inheritance.md-9ce65d7c"         >open class Shape {\n    open fun draw() { /*...*/ }\n    fun fill() { /*...*/ }\n}\n\nclass Circle() : Shape() {\n    override fun draw() { /*...*/ }\n}\n</div><p id="inheritance.md-5f9503c9" >The <code class="code " id="inheritance.md-c7139ba0"  >override</code> modifier is required for <code class="code " id="inheritance.md-f8c0bd12"  >Circle.draw()</code>. If it were missing, the compiler would complain. If there is no <code class="code " id="inheritance.md-350d4450"  >open</code> modifier on a function, like <code class="code " id="inheritance.md-1fbf04eb"  >Shape.fill()</code>, declaring a method with the same signature in a subclass is illegal, either with <code class="code " id="inheritance.md-bc0520f6"  >override</code> or without it. The <code class="code " id="inheritance.md-e8e3a18b"  >open</code> modifier has no effect when added on members of a final class (i.e.. a class with no <code class="code " id="inheritance.md-1b737ad1"  >open</code> modifier).</p><p id="inheritance.md-16a17ca2" >A member marked <code class="code " id="inheritance.md-c9fcd562"  >override</code> is itself open, i.e. it may be overridden in subclasses. If you want to prohibit re-overriding, use <code class="code " id="inheritance.md-a3753404"  >final</code>:</p><div class="code-block" data-lang="kotlin" id="inheritance.md-3f0a6944"         >open class Rectangle() : Shape() {\n    final override fun draw() { /*...*/ }\n}\n</div></section><section class="chapter"  ><h2 id="inheritance.md-overriding-properties" data-toc="inheritance#inheritance.md-overriding-properties"  >Overriding properties</h2><p id="inheritance.md-ba7032f9" >Overriding properties works in a similar way to overriding methods; properties declared on a superclass that are then redeclared on a derived class must be prefaced with <code class="code " id="inheritance.md-ebadf135"  >override</code>, and they must have a compatible type. Each declared property can be overridden by a property with an initializer or by a property with a <code class="code " id="inheritance.md-d406281"  >get</code> method.</p><div class="code-block" data-lang="kotlin" id="inheritance.md-5948ece4"         >open class Shape {\n    open val vertexCount: Int = 0\n}\n\nclass Rectangle : Shape() {\n    override val vertexCount = 4\n}\n</div><p id="inheritance.md-7e12b343" >You can also override a <code class="code " id="inheritance.md-19bfc11"  >val</code> property with a <code class="code " id="inheritance.md-1000dadb"  >var</code> property, but not vice versa. This is allowed because a <code class="code " id="inheritance.md-ec9a0ada"  >val</code> property essentially declares a <code class="code " id="inheritance.md-ba158efd"  >get</code> method, and overriding it as a <code class="code " id="inheritance.md-7270c13e"  >var</code> additionally declares a <code class="code " id="inheritance.md-23ab4ad7"  >set</code> method in the derived class.</p><p id="inheritance.md-537233f3" >Note that you can use the <code class="code " id="inheritance.md-6bc7bf16"  >override</code> keyword as part of the property declaration in a primary constructor.</p><div class="code-block" data-lang="kotlin" id="inheritance.md-5082e005"         >interface Shape {\n    val vertexCount: Int\n}\n\nclass Rectangle(override val vertexCount: Int = 4) : Shape // Always has 4 vertices\n\nclass Polygon : Shape {\n    override var vertexCount: Int = 0  // Can be set to any number later\n}\n</div></section><section class="chapter"  ><h2 id="inheritance.md-derived-class-initialization-order" data-toc="inheritance#inheritance.md-derived-class-initialization-order"  >Derived class initialization order</h2><p id="inheritance.md-520c8f56" >During construction of a new instance of a derived class, the base class initialization is done as the first step (preceded only by evaluation of the arguments for the base class constructor) and thus happens before the initialization logic of the derived class is run.</p><div class="code-block" data-lang="kotlin" id="inheritance.md-b176ca6a"        data-runnable="true"  >//sampleStart\nopen class Base(val name: String) {\n\n    init { println(&quot;Initializing a base class&quot;) }\n\n    open val size: Int = \n        name.length.also { println(&quot;Initializing size in the base class: $it&quot;) }\n}\n\nclass Derived(\n    name: String,\n    val lastName: String,\n) : Base(name.capitalize().also { println(&quot;Argument for the base class: $it&quot;) }) {\n\n    init { println(&quot;Initializing a derived class&quot;) }\n\n    override val size: Int =\n        (super.size + lastName.length).also { println(&quot;Initializing size in the derived class: $it&quot;) }\n}\n//sampleEnd\n\nfun main() {\n    println(&quot;Constructing the derived class(\\&quot;hello\\&quot;, \\&quot;world\\&quot;)&quot;)\n    Derived(&quot;hello&quot;, &quot;world&quot;)\n}\n</div><p id="inheritance.md-9b6450f1" >It means that, by the time of the base class constructor execution, the properties declared or overridden in the derived class are not yet initialized. If any of those properties are used in the base class initialization logic (either directly or indirectly, through another overridden <code class="code " id="inheritance.md-62af097b"  >open</code> member implementation), it may lead to incorrect behavior or a runtime failure. When designing a base class, you should therefore avoid using <code class="code " id="inheritance.md-615487e"  >open</code> members in the constructors, property initializers, and <code class="code " id="inheritance.md-b301e748"  >init</code> blocks.</p></section><section class="chapter"  ><h2 id="inheritance.md-calling-the-superclass-implementation" data-toc="inheritance#inheritance.md-calling-the-superclass-implementation"  >Calling the superclass implementation</h2><p id="inheritance.md-7397829d" >Code in a derived class can call its superclass functions and property accessors implementations using the <code class="code " id="inheritance.md-c2471429"  >super</code> keyword:</p><div class="code-block" data-lang="kotlin" id="inheritance.md-6ad9bafe"         >open class Rectangle {\n    open fun draw() { println(&quot;Drawing a rectangle&quot;) }\n    val borderColor: String get() = &quot;black&quot;\n}\n\nclass FilledRectangle : Rectangle() {\n    override fun draw() {\n        super.draw()\n        println(&quot;Filling the rectangle&quot;)\n    }\n\n    val fillColor: String get() = super.borderColor\n}\n</div><p id="inheritance.md-523c601c" >Inside an inner class, accessing the superclass of the outer class is done with the <code class="code " id="inheritance.md-78192a0d"  >super</code> keyword qualified with the outer class name: <code class="code " id="inheritance.md-51ba2ab3"  >super@Outer</code>:</p><div class="code-block" data-lang="kotlin" id="inheritance.md-701d538b"        data-runnable="true"  >open class Rectangle {\n    open fun draw() { println(&quot;Drawing a rectangle&quot;) }\n    val borderColor: String get() = &quot;black&quot;\n}\n\n//sampleStart\nclass FilledRectangle: Rectangle() {\n    override fun draw() { \n    \tval filler = Filler()\n        filler.drawAndFill()\n    }\n    \n    inner class Filler {\n        fun fill() { println(&quot;Filling&quot;) }\n        fun drawAndFill() {\n            super@FilledRectangle.draw() // Calls Rectangle\'s implementation of draw()\n            fill()\n            println(&quot;Drawn a filled rectangle with color ${super@FilledRectangle.borderColor}&quot;) // Uses Rectangle\'s implementation of borderColor\'s get()\n        }\n    }\n}\n//sampleEnd\n\nfun main() {\n    val fr = FilledRectangle()\n        fr.draw()\n}\n</div></section><section class="chapter"  ><h2 id="inheritance.md-overriding-rules" data-toc="inheritance#inheritance.md-overriding-rules"  >Overriding rules</h2><p id="inheritance.md-408a928e" >In Kotlin, implementation inheritance is regulated by the following rule: if a class inherits multiple implementations of the same member from its immediate superclasses, it must override this member and provide its own implementation (perhaps, using one of the inherited ones).</p><p id="inheritance.md-fafd63c4" >To denote the supertype from which the inherited implementation is taken, use <code class="code " id="inheritance.md-f62f0653"  >super</code> qualified by the supertype name in angle brackets, e.g. <code class="code " id="inheritance.md-9e2af30d"  >super&lt;Base&gt;</code>:</p><div class="code-block" data-lang="kotlin" id="inheritance.md-d7ec201a"         >open class Rectangle {\n    open fun draw() { /* ... */ }\n}\n\ninterface Polygon {\n    fun draw() { /* ... */ } // interface members are \'open\' by default\n}\n\nclass Square() : Rectangle(), Polygon {\n    // The compiler requires draw() to be overridden:\n    override fun draw() {\n        super&lt;Rectangle&gt;.draw() // call to Rectangle.draw()\n        super&lt;Polygon&gt;.draw() // call to Polygon.draw()\n    }\n}\n</div><p id="inheritance.md-e553c9b6" >It\'s fine to inherit from both <code class="code " id="inheritance.md-1d944127"  >Rectangle</code> and <code class="code " id="inheritance.md-2c123b35"  >Polygon</code>, but both of them have their implementations of <code class="code " id="inheritance.md-1579a01a"  >draw()</code>, so you need to override <code class="code " id="inheritance.md-397111cb"  >draw()</code> in <code class="code " id="inheritance.md-c34ad55e"  >Square</code> and provide its own implementation that eliminates the ambiguity.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="properties.md"  >Properties</h1><section class="chapter"  ><h2 id="properties.md-declaring-properties" data-toc="properties#properties.md-declaring-properties"  >Declaring properties</h2><p id="properties.md-2d09845c" >Properties in Kotlin classes can be declared either as mutable using the <code class="code " id="properties.md-3118ec4e"  >var</code> keyword, or as read-only using the <code class="code " id="properties.md-b5ee4c1b"  >val</code> keyword.</p><div class="code-block" data-lang="kotlin" id="properties.md-314ed4a8"         >class Address {\n    var name: String = &quot;Holmes, Sherlock&quot;\n    var street: String = &quot;Baker&quot;\n    var city: String = &quot;London&quot;\n    var state: String? = null\n    var zip: String = &quot;123456&quot;\n}\n</div><p id="properties.md-3afd7b64" >To use a property, simply refer to it by its name:</p><div class="code-block" data-lang="kotlin" id="properties.md-485af743"         >fun copyAddress(address: Address): Address {\n    val result = Address() // there\'s no \'new\' keyword in Kotlin\n    result.name = address.name // accessors are called\n    result.street = address.street\n    // ...\n    return result\n}\n</div></section><section class="chapter"  ><h2 id="properties.md-getters-and-setters" data-toc="properties#properties.md-getters-and-setters"  >Getters and setters</h2><p id="properties.md-97d3665" >The full syntax for declaring a property is the following.</p><div class="code-block" data-lang="kotlin" id="properties.md-583e8018"         >var &lt;propertyName&gt;[: &lt;PropertyType&gt;] [= &lt;property_initializer&gt;]\n    [&lt;getter&gt;]\n    [&lt;setter&gt;]\n</div><p id="properties.md-23c0d3fe" >The initializer, getter and setter are optional. Property type is optional if it can be inferred from the initializer (or from the getter return type, as shown below).</p><div class="code-block" data-lang="kotlin" id="properties.md-cdd9904f"         >var initialized = 1 // has type Int, default getter and setter\n// var allByDefault // ERROR: explicit initializer required, default getter and setter implied\n</div><p id="properties.md-9e4b8c44" >The full syntax of a read-only property declaration differs from a mutable one in two ways: it starts with <code class="code " id="properties.md-61cdaf09"  >val</code> instead of <code class="code " id="properties.md-c7077972"  >var</code> and does not allow a setter:</p><div class="code-block" data-lang="kotlin" id="properties.md-b4910181"         >val simple: Int? // has type Int, default getter, must be initialized in constructor\nval inferredType = 1 // has type Int and a default getter\n</div><p id="properties.md-8fda20f5" >You can define custom accessors for a property. If you define a custom getter, it will be called every time you access the property (this way you can implement a computed property). Here\'s an example of a custom getter:</p><div class="code-block" data-lang="kotlin" id="properties.md-e20d26ff"         >val isEmpty: Boolean\n    get() = this.size == 0\n</div><p id="properties.md-a70cdc7a" >If you define a custom setter, it will be called every time you assign a value to the property except its initialization. A custom setter looks like this:</p><div class="code-block" data-lang="kotlin" id="properties.md-c6d02427"         >var stringRepresentation: String\n    get() = this.toString()\n    set(value) {\n        setDataFromString(value) // parses the string and assigns values to other properties\n    }\n</div><p id="properties.md-5ef34ea4" >By convention, the name of the setter parameter is <code class="code " id="properties.md-517606ec"  >value</code>, but you can choose a different name if you prefer.</p><p id="properties.md-9ea406d" >You can omit the property type if it can be inferred from the getter:</p><div class="code-block" data-lang="kotlin" id="properties.md-68f8144b"         >val isEmpty get() = this.size == 0  // has type Boolean\n</div><p id="properties.md-4dc50339" >If you need to change the visibility of an accessor or to annotate it, but don\'t need to change the default implementation, you can define the accessor without defining its body:</p><div class="code-block" data-lang="kotlin" id="properties.md-3fddf33"         >var setterVisibility: String = &quot;abc&quot;\n    private set // the setter is private and has the default implementation\n\nvar setterWithAnnotation: Any? = null\n    @Inject set // annotate the setter with Inject\n</div><section class="chapter"  ><h3 id="properties.md-backing-fields" data-toc="properties#properties.md-backing-fields"  >Backing fields</h3><p id="properties.md-fd030d5" >In Kotlin, a field is only used as a part of a property to hold its value in memory. Fields can not be declared directly. However, when a property needs a backing field, Kotlin provides it automatically. This backing field can be referenced in the accessors using the <code class="code " id="properties.md-a13ef2e7"  >field</code> identifier:</p><div class="code-block" data-lang="kotlin" id="properties.md-3f637e8e"         >var counter = 0 // the initializer assigns the backing field directly\n    set(value) {\n        if (value &gt;= 0) field = value\n    }\n</div><p id="properties.md-9838a991" >The <code class="code " id="properties.md-c136c9b0"  >field</code> identifier can only be used in the accessors of the property.</p><p id="properties.md-d135090c" >A backing field will be generated for a property if it uses the default implementation of at least one of the accessors, or if a custom accessor references it through the <code class="code " id="properties.md-db806cd"  >field</code> identifier.</p><p id="properties.md-eecec28d" >For example, in the following case there will be no backing field:</p><div class="code-block" data-lang="kotlin" id="properties.md-5627a71e"         >val isEmpty: Boolean\n    get() = this.size == 0\n</div></section><section class="chapter"  ><h3 id="properties.md-backing-properties" data-toc="properties#properties.md-backing-properties"  >Backing properties</h3><p id="properties.md-895947fb" >If you want to do something that does not fit into this <em id="properties.md-faf3c00" class=""  >implicit backing field</em> scheme, you can always fall back to having a <em id="properties.md-23bd796f" class=""  >backing property</em>:</p><div class="code-block" data-lang="kotlin" id="properties.md-a2c98cfc"         >private var _table: Map&lt;String, Int&gt;? = null\npublic val table: Map&lt;String, Int&gt;\n    get() {\n        if (_table == null) {\n            _table = HashMap() // Type parameters are inferred\n        }\n        return _table ?: throw AssertionError(&quot;Set to null by another thread&quot;)\n    }\n</div><aside data-type="note" class="prompt" data-title="" id="properties.md-30cff9aa" ><p id="properties.md-d2ebaeae" >On JVM: Access to private properties with default getters and setters is optimized to avoid function call overhead.</p></aside></section></section><section class="chapter"  ><h2 id="properties.md-compile-time-constants" data-toc="properties#properties.md-compile-time-constants"  >Compile-time constants</h2><p id="properties.md-c3f444dd" >If the value of a read-only property is known at the compile time, mark it as a <em id="properties.md-d7f23bb9" class=""  >compile time constant</em> using the <code class="code " id="properties.md-6e40933e"  >const</code> modifier. Such properties need to fulfil the following requirements:</p><ul class="list _ul" id="properties.md-f892b5e5"   ><li class="list__item" id="properties.md-d2759955" ><p>Top-level, or member of an <a href="#object-declarations.md-object-declarations" id="properties.md-d018215b"   ><code class="code " id="properties.md-2fcb60d2"  >object</code> declaration</a> or <a href="#object-declarations.md-companion-objects" id="properties.md-53992ccb"   >a companion object</a>.</p></li><li class="list__item" id="properties.md-bf12440d" ><p>Initialized with a value of type <code class="code " id="properties.md-63729940"  >String</code> or a primitive type</p></li><li class="list__item" id="properties.md-142238a6" ><p>No custom getter</p></li></ul><p id="properties.md-91eb971f" >Such properties can be used in annotations:</p><div class="code-block" data-lang="kotlin" id="properties.md-97cf8f60"         >const val SUBSYSTEM_DEPRECATED: String = &quot;This subsystem is deprecated&quot;\n\n@Deprecated(SUBSYSTEM_DEPRECATED) fun foo() { ... }\n</div></section><section class="chapter"  ><h2 id="properties.md-late-initialized-properties-and-variables" data-toc="properties#properties.md-late-initialized-properties-and-variables"  >Late-initialized properties and variables</h2><p id="properties.md-da7bf33" >Normally, properties declared as having a non-null type must be initialized in the constructor. However, fairly often this is not convenient. For example, properties can be initialized through dependency injection, or in the setup method of a unit test. In this case, you cannot supply a non-null initializer in the constructor, but you still want to avoid null checks when referencing the property inside the body of a class.</p><p id="properties.md-93e014c7" >To handle this case, you can mark the property with the <code class="code " id="properties.md-5b860d99"  >lateinit</code> modifier:</p><div class="code-block" data-lang="kotlin" id="properties.md-a0014417"         >public class MyTest {\n    lateinit var subject: TestSubject\n\n    @SetUp fun setup() {\n        subject = TestSubject()\n    }\n\n    @Test fun test() {\n        subject.method()  // dereference directly\n    }\n}\n</div><p id="properties.md-a45e0381" >The modifier can be used on <code class="code " id="properties.md-a007240b"  >var</code> properties declared inside the body of a class (not in the primary constructor, and only when the property does not have a custom getter or setter) as well as for top-level properties and local variables. The type of the property or variable must be non-null, and it must not be a primitive type.</p><p id="properties.md-81049fa9" >Accessing a <code class="code " id="properties.md-2d129d16"  >lateinit</code> property before it has been initialized throws a special exception that clearly identifies the property being accessed and the fact that it hasn\'t been initialized.</p><section class="chapter"  ><h3 id="properties.md-checking-whether-a-lateinit-var-is-initialized" data-toc="properties#properties.md-checking-whether-a-lateinit-var-is-initialized"  >Checking whether a lateinit var is initialized</h3><p id="properties.md-29f4814d" >To check whether a <code class="code " id="properties.md-cea4b4f6"  >lateinit var</code> has already been initialized, use <code class="code " id="properties.md-358053e8"  >.isInitialized</code> on the <a href="#reflection.md-property-references" id="properties.md-ee14cdaa"   >reference to that property</a>:</p><div class="code-block" data-lang="kotlin" id="properties.md-2c684e65"         >if (foo::bar.isInitialized) {\n    println(foo.bar)\n}\n</div><p id="properties.md-7dc7603e" >This check is only available for the properties that are lexically accessible, when declared in the same type or in one of the outer types, or at top level in the same file.</p></section></section><section class="chapter"  ><h2 id="properties.md-overriding-properties" data-toc="properties#properties.md-overriding-properties"  >Overriding properties</h2><p id="properties.md-41d7460" >See <a href="#inheritance.md-overriding-properties" id="properties.md-bdcd0fbf"   >Overriding properties</a></p></section><section class="chapter"  ><h2 id="properties.md-delegated-properties" data-toc="properties#properties.md-delegated-properties"  >Delegated properties</h2><p id="properties.md-60d53dff" >The most common kind of properties simply reads from (and maybe writes to) a backing field. On the other hand, with custom getters and setters one can implement any behaviour of a property. Somewhere in between, there are certain common patterns of how a property may work. A few examples: lazy values, reading from a map by a given key, accessing a database, notifying listener on access, etc.</p><p id="properties.md-6199c0c9" >Such common behaviours can be implemented as libraries using <a href="#delegated-properties.md" id="properties.md-7e2abe8b"   >delegated properties</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="interfaces.md"  >Interfaces</h1><p id="interfaces.md-bc6d75bc" >Interfaces in Kotlin can contain declarations of abstract methods, as well as method implementations. What makes them different from abstract classes is that interfaces cannot store state. They can have properties but these need to be abstract or to provide accessor implementations.</p><p id="interfaces.md-6aceecf6" >An interface is defined using the keyword <code class="code " id="interfaces.md-379ad573"  >interface</code></p><div class="code-block" data-lang="kotlin" id="interfaces.md-7628f6ca"         >interface MyInterface {\n    fun bar()\n    fun foo() {\n      // optional body\n    }\n}\n</div><section class="chapter"  ><h2 id="interfaces.md-implementing-interfaces" data-toc="interfaces#interfaces.md-implementing-interfaces"  >Implementing interfaces</h2><p id="interfaces.md-80ebd567" >A class or object can implement one or more interfaces</p><div class="code-block" data-lang="kotlin" id="interfaces.md-fbbb3ac9"         >class Child : MyInterface {\n    override fun bar() {\n        // body\n    }\n}\n</div></section><section class="chapter"  ><h2 id="interfaces.md-properties-in-interfaces" data-toc="interfaces#interfaces.md-properties-in-interfaces"  >Properties in interfaces</h2><p id="interfaces.md-9b6b021a" >You can declare properties in interfaces. A property declared in an interface can either be abstract, or it can provide implementations for accessors. Properties declared in interfaces can\'t have backing fields, and therefore accessors declared in interfaces can\'t reference them.</p><div class="code-block" data-lang="kotlin" id="interfaces.md-1346dd3a"         >interface MyInterface {\n    val prop: Int // abstract\n\n    val propertyWithImplementation: String\n        get() = &quot;foo&quot;\n\n    fun foo() {\n        print(prop)\n    }\n}\n\nclass Child : MyInterface {\n    override val prop: Int = 29\n}\n</div></section><section class="chapter"  ><h2 id="interfaces.md-interfaces-inheritance" data-toc="interfaces#interfaces.md-interfaces-inheritance"  >Interfaces Inheritance</h2><p id="interfaces.md-a7395b93" >An interface can derive from other interfaces and thus both provide implementations for their members and declare new functions and properties. Quite naturally, classes implementing such an interface are only required to define the missing implementations:</p><div class="code-block" data-lang="kotlin" id="interfaces.md-1eb2db78"         >interface Named {\n    val name: String\n}\n\ninterface Person : Named {\n    val firstName: String\n    val lastName: String\n    \n    override val name: String get() = &quot;$firstName $lastName&quot;\n}\n\ndata class Employee(\n    // implementing \'name\' is not required\n    override val firstName: String,\n    override val lastName: String,\n    val position: Position\n) : Person\n</div></section><section class="chapter"  ><h2 id="interfaces.md-resolving-overriding-conflicts" data-toc="interfaces#interfaces.md-resolving-overriding-conflicts"  >Resolving overriding conflicts</h2><p id="interfaces.md-2da3be3d" >When you declare many types in your supertype list, you may inherit more than one implementation of the same method. See the following example.</p><div class="code-block" data-lang="kotlin" id="interfaces.md-ec14a9f9"         >interface A {\n    fun foo() { print(&quot;A&quot;) }\n    fun bar()\n}\n\ninterface B {\n    fun foo() { print(&quot;B&quot;) }\n    fun bar() { print(&quot;bar&quot;) }\n}\n\nclass C : A {\n    override fun bar() { print(&quot;bar&quot;) }\n}\n\nclass D : A, B {\n    override fun foo() {\n        super&lt;A&gt;.foo()\n        super&lt;B&gt;.foo()\n    }\n\n    override fun bar() {\n        super&lt;B&gt;.bar()\n    }\n}\n</div><p id="interfaces.md-6df005cd" >Interfaces <em id="interfaces.md-611fec96" class=""  >A</em> and <em id="interfaces.md-7552a032" class=""  >B</em> both declare functions <em id="interfaces.md-1f22e1bf" class=""  >foo()</em> and <em id="interfaces.md-6ab2d9b1" class=""  >bar()</em>. Both of them implement <em id="interfaces.md-9d584fb4" class=""  >foo()</em>, but only <em id="interfaces.md-d7272810" class=""  >B</em> implements <em id="interfaces.md-95858ae9" class=""  >bar()</em> (<em id="interfaces.md-ea4692f6" class=""  >bar()</em> is not marked abstract in <em id="interfaces.md-c29f331f" class=""  >A</em>, because this is the default for interfaces, if the function has no body). Now, if you derive a concrete class <em id="interfaces.md-29777029" class=""  >C</em> from <em id="interfaces.md-6c3e3418" class=""  >A</em>, you, obviously, have to override <em id="interfaces.md-9233dec5" class=""  >bar()</em> and provide an implementation.</p><p id="interfaces.md-1ae11da2" >However, if you derive <em id="interfaces.md-aa205c6b" class=""  >D</em> from <em id="interfaces.md-97bc6db0" class=""  >A</em> and <em id="interfaces.md-d2a62b41" class=""  >B</em>, you need to implement all the methods which you have inherited from multiple interfaces, and to specify how exactly <em id="interfaces.md-898ae010" class=""  >D</em> should implement them. This rule applies both to methods for which you\'ve inherited a single implementation (<em id="interfaces.md-20b1e442" class=""  >bar()</em>) and multiple implementations (<em id="interfaces.md-379d73d3" class=""  >foo()</em> ).</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="fun-interfaces.md"  >Functional (SAM) interfaces</h1><p id="fun-interfaces.md-22a90799" >An interface with only one abstract method is called a <em id="fun-interfaces.md-d1f56352" class=""  >functional interface</em>, or a <em id="fun-interfaces.md-5a3bd139" class=""  >Single Abstract Method (SAM) interface</em>. The functional interface can have several non-abstract members but only one abstract member.</p><p id="fun-interfaces.md-782c06d0" >To declare a functional interface in Kotlin, use the <code class="code " id="fun-interfaces.md-86749975"  >fun</code> modifier.</p><div class="code-block" data-lang="kotlin" id="fun-interfaces.md-e95e1280"         >fun interface KRunnable {\n   fun invoke()\n}\n</div><section class="chapter"  ><h2 id="fun-interfaces.md-sam-conversions" data-toc="fun-interfaces#fun-interfaces.md-sam-conversions"  >SAM conversions</h2><p id="fun-interfaces.md-cb92d4c6" >For functional interfaces, you can use SAM conversions that help make your code more concise and readable by using <a href="#lambdas.md-lambda-expressions-and-anonymous-functions" id="fun-interfaces.md-5d89b0fc"   >lambda expressions</a>.</p><p id="fun-interfaces.md-8c123391" >Instead of creating a class that implements a functional interface manually, you can use a lambda expression. With a SAM conversion, Kotlin can convert any lambda expression whose signature matches the signature of the interface\'s single method into an instance of a class that implements the interface.</p><p id="fun-interfaces.md-679eb3f5" >For example, consider the following Kotlin functional interface:</p><div class="code-block" data-lang="kotlin" id="fun-interfaces.md-79181a74"         >fun interface IntPredicate {\n   fun accept(i: Int): Boolean\n}\n</div><p id="fun-interfaces.md-c9984aa2" >If you don\'t use a SAM conversion, you will need to write code like this:</p><div class="code-block" data-lang="kotlin" id="fun-interfaces.md-6cc415e6"         >// Creating an instance of a class\nval isEven = object : IntPredicate {\n   override fun accept(i: Int): Boolean {\n       return i % 2 == 0\n   }\n}\n</div><p id="fun-interfaces.md-435b84b0" >By leveraging Kotlin\'s SAM conversion, you can write the following equivalent code instead:</p><div class="code-block" data-lang="kotlin" id="fun-interfaces.md-518bb6d5"         >// Creating an instance using lambda\nval isEven = IntPredicate { it % 2 == 0 }\n</div><p id="fun-interfaces.md-7ca23cf0" >A short lambda expression replaces all the unnecessary code.</p><div class="code-block" data-lang="kotlin" id="fun-interfaces.md-a92835e0"        data-runnable="true" data-min-compiler-version="1.4"  >fun interface IntPredicate {\n   fun accept(i: Int): Boolean\n}\n\nval isEven = IntPredicate { it % 2 == 0 }\n\nfun main() {\n   println(&quot;Is 7 even? - ${isEven.accept(7)}&quot;)\n}\n</div><p id="fun-interfaces.md-8e0481" >You can also use <a href="#java-interop.md-sam-conversions" id="fun-interfaces.md-52840187"   >SAM conversions for Java interfaces</a>.</p></section><section class="chapter"  ><h2 id="fun-interfaces.md-functional-interfaces-vs-type-aliases" data-toc="fun-interfaces#fun-interfaces.md-functional-interfaces-vs-type-aliases"  >Functional interfaces vs. type aliases</h2><p id="fun-interfaces.md-fe84e748" >Functional interfaces and <a href="#type-aliases.md" id="fun-interfaces.md-b5e1a989"   >type aliases</a> serve different purposes. Type aliases are just names for existing types – they don\'t create a new type, while functional interfaces do.</p><p id="fun-interfaces.md-24a0c9b8" >Type aliases can have only one member, while functional interfaces can have multiple non-abstract members and one abstract member. Functional interfaces can also implement and extend other interfaces.</p><p id="fun-interfaces.md-6d505887" >Considering the above, functional interfaces are more flexible and provide more capabilities than type aliases.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="visibility-modifiers.md"  >Visibility modifiers</h1><p id="visibility-modifiers.md-48ca5e9a" >Classes, objects, interfaces, constructors, functions, properties and their setters can have <em id="visibility-modifiers.md-34454af1" class=""  >visibility modifiers</em>. Getters always have the same visibility as the property.</p><p id="visibility-modifiers.md-6aa1321f" >There are four visibility modifiers in Kotlin: <code class="code " id="visibility-modifiers.md-12dfb0fe"  >private</code>, <code class="code " id="visibility-modifiers.md-592f34de"  >protected</code>, <code class="code " id="visibility-modifiers.md-c4d9b038"  >internal</code> and <code class="code " id="visibility-modifiers.md-361628d7"  >public</code>. The default visibility is <code class="code " id="visibility-modifiers.md-d2407fe4"  >public</code>.</p><p id="visibility-modifiers.md-4b9e556e" >On this page, you\'ll learn how the modifiers apply to different types of declaring scopes.</p><section class="chapter"  ><h2 id="visibility-modifiers.md-packages" data-toc="visibility-modifiers#visibility-modifiers.md-packages"  >Packages</h2><p id="visibility-modifiers.md-7cd25ccf" >Functions, properties and classes, objects and interfaces can be declared at the &quot;top-level&quot; directly inside a package:</p><div class="code-block" data-lang="kotlin" id="visibility-modifiers.md-13b213d8"         >// file name: example.kt\npackage foo\n\nfun baz() { ... }\nclass Bar { ... }\n</div><ul class="list _ul" id="visibility-modifiers.md-4e89c4fc"   ><li class="list__item" id="visibility-modifiers.md-a44c920f" ><p>If you do not specify any visibility modifier, <code class="code " id="visibility-modifiers.md-f7ab9a43"  >public</code> is used by default, which means that your declarations will be visible everywhere.</p></li><li class="list__item" id="visibility-modifiers.md-8e91ee06" ><p>If you mark a declaration <code class="code " id="visibility-modifiers.md-ffc452c1"  >private</code>, it will only be visible inside the file containing the declaration.</p></li><li class="list__item" id="visibility-modifiers.md-d91a03c0" ><p>If you mark it <code class="code " id="visibility-modifiers.md-9d3aca78"  >internal</code>, it is visible everywhere in the same <a href="#visibility-modifiers.md-modules" id="visibility-modifiers.md-4eb61c4e"   >module</a>.</p></li><li class="list__item" id="visibility-modifiers.md-a66881af" ><p><code class="code " id="visibility-modifiers.md-651684f7"  >protected</code> is not available for top-level declarations.</p></li></ul><aside data-type="note" class="prompt" data-title="" id="visibility-modifiers.md-52b584" ><p id="visibility-modifiers.md-3b96c9ac" >To use a visible top-level declaration from another package, you should still <a href="#packages.md-imports" id="visibility-modifiers.md-77e5e1f7"   >import</a> it.</p></aside><p id="visibility-modifiers.md-6ae951f4" >Examples:</p><div class="code-block" data-lang="kotlin" id="visibility-modifiers.md-ff37354f"         >// file name: example.kt\npackage foo\n\nprivate fun foo() { ... } // visible inside example.kt\n\npublic var bar: Int = 5 // property is visible everywhere\n    private set         // setter is visible only in example.kt\n    \ninternal val baz = 6    // visible inside the same module\n</div></section><section class="chapter"  ><h2 id="visibility-modifiers.md-classes-and-interfaces" data-toc="visibility-modifiers#visibility-modifiers.md-classes-and-interfaces"  >Classes and interfaces</h2><p id="visibility-modifiers.md-e0dbe70f" >For members declared inside a class:</p><ul class="list _ul" id="visibility-modifiers.md-f15ac580"   ><li class="list__item" id="visibility-modifiers.md-2d71d3f" ><p><code class="code " id="visibility-modifiers.md-36c5a08f"  >private</code> means visible inside this class only (including all its members).</p></li><li class="list__item" id="visibility-modifiers.md-f0d0fb1d" ><p><code class="code " id="visibility-modifiers.md-9db941a5"  >protected</code> is the same as <code class="code " id="visibility-modifiers.md-78b3d5a5"  >private</code> but is also visible in subclasses.</p></li><li class="list__item" id="visibility-modifiers.md-55e4b82" ><p><code class="code " id="visibility-modifiers.md-f12c3801"  >internal</code> means that any client <em id="visibility-modifiers.md-37be879" class=""  >inside this module</em> who sees the declaring class sees its <code class="code " id="visibility-modifiers.md-6d1f46c5"  >internal</code> members.</p></li><li class="list__item" id="visibility-modifiers.md-6296178" ><p><code class="code " id="visibility-modifiers.md-d4b4d281"  >public</code> means that any client who sees the declaring class sees its <code class="code " id="visibility-modifiers.md-784c0eca"  >public</code> members.</p></li></ul><aside data-type="note" class="prompt" data-title="" id="visibility-modifiers.md-ad1210f3" ><p id="visibility-modifiers.md-fbae5cd5" >In Kotlin, outer class does not see private members of its inner classes.</p></aside><p id="visibility-modifiers.md-7f6cefd7" >If you override a <code class="code " id="visibility-modifiers.md-3d72d6a0"  >protected</code> member and do not specify the visibility explicitly, the overriding member will also have <code class="code " id="visibility-modifiers.md-88274507"  >protected</code> visibility.</p><p id="visibility-modifiers.md-d3057610" >Examples:</p><div class="code-block" data-lang="kotlin" id="visibility-modifiers.md-625b7240"         >open class Outer {\n    private val a = 1\n    protected open val b = 2\n    internal val c = 3\n    val d = 4  // public by default\n    \n    protected class Nested {\n        public val e: Int = 5\n    }\n}\n\nclass Subclass : Outer() {\n    // a is not visible\n    // b, c and d are visible\n    // Nested and e are visible\n\n    override val b = 5   // \'b\' is protected\n}\n\nclass Unrelated(o: Outer) {\n    // o.a, o.b are not visible\n    // o.c and o.d are visible (same module)\n    // Outer.Nested is not visible, and Nested::e is not visible either \n}\n</div><section class="chapter"  ><h3 id="visibility-modifiers.md-constructors" data-toc="visibility-modifiers#visibility-modifiers.md-constructors"  >Constructors</h3><p id="visibility-modifiers.md-b57a3015" >To specify a visibility of the primary constructor of a class, use the following syntax:</p><aside data-type="note" class="prompt" data-title="" id="visibility-modifiers.md-5160df3f" ><p id="visibility-modifiers.md-7c7bb2c3" >You need to add an explicit <code class="code " id="visibility-modifiers.md-a2fc11bc"  >constructor</code> keyword.</p></aside><div class="code-block" data-lang="kotlin" id="visibility-modifiers.md-3217ce31"         >class C private constructor(a: Int) { ... }\n</div><p id="visibility-modifiers.md-fbb45cb" >Here the constructor is private. By default, all constructors are <code class="code " id="visibility-modifiers.md-7e282996"  >public</code>, which effectively amounts to them being visible everywhere where the class is visible (this means that a constructor of an <code class="code " id="visibility-modifiers.md-4cd3964c"  >internal</code> class is only visible within the same module).</p></section><section class="chapter"  ><h3 id="visibility-modifiers.md-local-declarations" data-toc="visibility-modifiers#visibility-modifiers.md-local-declarations"  >Local declarations</h3><p id="visibility-modifiers.md-e2d2b3c6" >Local variables, functions and classes can\'t have visibility modifiers.</p></section></section><section class="chapter"  ><h2 id="visibility-modifiers.md-modules" data-toc="visibility-modifiers#visibility-modifiers.md-modules"  >Modules</h2><p id="visibility-modifiers.md-b22a3ef" >The <code class="code " id="visibility-modifiers.md-d5c63bfd"  >internal</code> visibility modifier means that the member is visible within the same module. More specifically, a module is a set of Kotlin files compiled together:</p><ul class="list _ul" id="visibility-modifiers.md-6aa899e6"   ><li class="list__item" id="visibility-modifiers.md-a406644f" ><p>an IntelliJ IDEA module</p></li><li class="list__item" id="visibility-modifiers.md-fee4d7ec" ><p>a Maven project</p></li><li class="list__item" id="visibility-modifiers.md-ad1d6a00" ><p>a Gradle source set (with the exception that the <code class="code " id="visibility-modifiers.md-3bf876bb"  >test</code> source set can access the internal declarations of <code class="code " id="visibility-modifiers.md-79ffd07a"  >main</code>)</p></li><li class="list__item" id="visibility-modifiers.md-66be8b9d" ><p>a set of files compiled with one invocation of the <code class="code " id="visibility-modifiers.md-f77cd57e"  >&lt;kotlinc&gt;</code> Ant task</p></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="extensions.md"  >Extensions</h1><p id="extensions.md-82af6b81" >Kotlin provides an ability to extend a class with new functionality without having to inherit from the class or use design patterns such as <em id="extensions.md-307167b4" class=""  >Decorator</em>. This is done via special declarations called <em id="extensions.md-93fdeee0" class=""  >extensions</em>.</p><p id="extensions.md-fe4b9489" >For example, you can write new functions for a class from a third-party library that you can\'t modify. Such functions are available for calling in the usual way as if they were methods of the original class. This mechanism is called <em id="extensions.md-b0628d15" class=""  >extension functions</em>. There are also <em id="extensions.md-754b68b0" class=""  >extension properties</em> that let you define new properties for existing classes.</p><section class="chapter"  ><h2 id="extensions.md-extension-functions" data-toc="extensions#extensions.md-extension-functions"  >Extension functions</h2><p id="extensions.md-8a238cdf" >To declare an extension function, prefix its name with a <em id="extensions.md-4935c033" class=""  >receiver type</em>, that means the type being extended. The following adds a <code class="code " id="extensions.md-59d0080c"  >swap</code> function to <code class="code " id="extensions.md-1ed9deb1"  >MutableList&lt;Int&gt;</code>:</p><div class="code-block" data-lang="kotlin" id="extensions.md-cb7f9953"         >fun MutableList&lt;Int&gt;.swap(index1: Int, index2: Int) {\n    val tmp = this[index1] // \'this\' corresponds to the list\n    this[index1] = this[index2]\n    this[index2] = tmp\n}\n</div><p id="extensions.md-eeadd597" >The <code class="code " id="extensions.md-71de2e90"  >this</code> keyword inside an extension function corresponds to the receiver object (the one that is passed before the dot). Now, you can call such a function on any <code class="code " id="extensions.md-e4585dfb"  >MutableList&lt;Int&gt;</code>:</p><div class="code-block" data-lang="kotlin" id="extensions.md-c6f1d003"         >val list = mutableListOf(1, 2, 3)\nlist.swap(0, 2) // \'this\' inside \'swap()\' will hold the value of \'list\'\n</div><p id="extensions.md-2009bda1" >This function makes sense for any <code class="code " id="extensions.md-9579a6b8"  >MutableList&lt;T&gt;</code>, and you can make it generic:</p><div class="code-block" data-lang="kotlin" id="extensions.md-22957392"         >fun &lt;T&gt; MutableList&lt;T&gt;.swap(index1: Int, index2: Int) {\n    val tmp = this[index1] // \'this\' corresponds to the list\n    this[index1] = this[index2]\n    this[index2] = tmp\n}\n</div><p id="extensions.md-47d0080a" >You declare the generic type parameter before the function name to make it available in the receiver type expression. See <a href="#generics.md" id="extensions.md-3b72c38e"   >Generic functions</a>.</p></section><section class="chapter"  ><h2 id="extensions.md-extensions-are-resolved-statically" data-toc="extensions#extensions.md-extensions-are-resolved-statically"  >Extensions are resolved statically</h2><p id="extensions.md-f85c8ec9" >Extensions do not actually modify classes they extend. By defining an extension, you do not insert new members into a class, but merely make new functions callable with the dot-notation on variables of this type.</p><p id="extensions.md-87ea2740" >Extension functions are dispatched <em id="extensions.md-1f57c8a2" class=""  >statically</em>, that means that they are not virtual by receiver type. An extension function being called is determined by the type of the expression on which the function is invoked, not by the type of the result of evaluating that expression at runtime. For example:</p><div class="code-block" data-lang="kotlin" id="extensions.md-5bf998c4"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    open class Shape\n    \n    class Rectangle: Shape()\n    \n    fun Shape.getName() = &quot;Shape&quot;\n    \n    fun Rectangle.getName() = &quot;Rectangle&quot;\n    \n    fun printClassName(s: Shape) {\n        println(s.getName())\n    }    \n    \n    printClassName(Rectangle())\n//sampleEnd\n}\n</div><p id="extensions.md-31c4d110" >This example prints <em id="extensions.md-a5683579" class=""  >Shape</em>, because the called extension function depends only on the declared type of the parameter <code class="code " id="extensions.md-5aa2a081"  >s</code>, which is the <code class="code " id="extensions.md-3711c6b1"  >Shape</code> class.</p><p id="extensions.md-4f3a3bfd" >If a class has a member function, and an extension function is defined which has the same receiver type, the same name, and is applicable to given arguments, the <em id="extensions.md-b9ea5cf2" class=""  >member always wins</em>. For example:</p><div class="code-block" data-lang="kotlin" id="extensions.md-65f27041"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    class Example {\n        fun printFunctionType() { println(&quot;Class method&quot;) }\n    }\n    \n    fun Example.printFunctionType() { println(&quot;Extension function&quot;) }\n    \n    Example().printFunctionType()\n//sampleEnd\n}\n</div><p id="extensions.md-94f55449" >This code prints <em id="extensions.md-edf55284" class=""  >Class method</em>.</p><p id="extensions.md-dbb81a8f" >However, it\'s perfectly OK for extension functions to overload member functions which have the same name but a different signature:</p><div class="code-block" data-lang="kotlin" id="extensions.md-6e600952"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    class Example {\n        fun printFunctionType() { println(&quot;Class method&quot;) }\n    }\n    \n    fun Example.printFunctionType(i: Int) { println(&quot;Extension function&quot;) }\n    \n    Example().printFunctionType(1)\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="extensions.md-nullable-receiver" data-toc="extensions#extensions.md-nullable-receiver"  >Nullable receiver</h2><p id="extensions.md-c355f5d2" >Note that extensions can be defined with a nullable receiver type. Such extensions can be called on an object variable even if its value is null, and can check for <code class="code " id="extensions.md-bd46ed90"  >this == null</code> inside the body.</p><p id="extensions.md-16aa7a59" >This way you can call <code class="code " id="extensions.md-466faff6"  >toString()</code> in Kotlin without checking for <code class="code " id="extensions.md-8fffcc89"  >null</code>: the check happens inside the extension function.</p><div class="code-block" data-lang="kotlin" id="extensions.md-bae87591"         >fun Any?.toString(): String {\n    if (this == null) return &quot;null&quot;\n    // after the null check, \'this\' is autocast to a non-null type, so the toString() below\n    // resolves to the member function of the Any class\n    return toString()\n}\n</div></section><section class="chapter"  ><h2 id="extensions.md-extension-properties" data-toc="extensions#extensions.md-extension-properties"  >Extension properties</h2><p id="extensions.md-1383b142" >Similarly to functions, Kotlin supports extension properties:</p><div class="code-block" data-lang="kotlin" id="extensions.md-b4ce2253"         >val &lt;T&gt; List&lt;T&gt;.lastIndex: Int\n    get() = size - 1\n</div><aside data-type="note" class="prompt" data-title="" id="extensions.md-c222d637" ><p id="extensions.md-7f41b44b" >Since extensions do not actually insert members into classes, there\'s no efficient way for an extension property to have a <a href="#properties.md-backing-fields" id="extensions.md-cfc99f47"   >backing field</a>. This is why <em id="extensions.md-b71b7415" class=""  >initializers are not allowed for extension properties</em>. Their behavior can only be defined by explicitly providing getters/setters.</p></aside><p id="extensions.md-1a2bbe6b" >Example:</p><div class="code-block" data-lang="kotlin" id="extensions.md-e75db266"         >val House.number = 1 // error: initializers are not allowed for extension properties\n</div></section><section class="chapter"  ><h2 id="extensions.md-companion-object-extensions" data-toc="extensions#extensions.md-companion-object-extensions"  >Companion object extensions</h2><p id="extensions.md-43eb2817" >If a class has a <a href="#object-declarations.md-companion-objects" id="extensions.md-5bf8d68"   >companion object</a> defined, you can also define extension functions and properties for the companion object. Just like regular members of the companion object, they can be called using only the class name as the qualifier:</p><div class="code-block" data-lang="kotlin" id="extensions.md-142bc7a6"        data-runnable="true" data-min-compiler-version="1.3"  >class MyClass {\n    companion object { }  // will be called &quot;Companion&quot;\n}\n\nfun MyClass.Companion.printCompanion() { println(&quot;companion&quot;) }\n\nfun main() {\n    MyClass.printCompanion()\n}\n</div></section><section class="chapter"  ><h2 id="extensions.md-scope-of-extensions" data-toc="extensions#extensions.md-scope-of-extensions"  >Scope of extensions</h2><p id="extensions.md-ccd75f21" >In most cases, you define extensions on the top level - directly under packages:</p><div class="code-block" data-lang="kotlin" id="extensions.md-42636c08"         >package org.example.declarations\n \nfun List&lt;String&gt;.getLongestString() { /*...*/}\n</div><p id="extensions.md-186f246b" >To use such an extension outside its declaring package, import it at the call site:</p><div class="code-block" data-lang="kotlin" id="extensions.md-e249c39c"         >package org.example.usage\n\nimport org.example.declarations.getLongestString\n\nfun main() {\n    val list = listOf(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;)\n    list.getLongestString()\n}\n</div><p id="extensions.md-25ffd408" >See <a href="#packages.md-imports" id="extensions.md-29408475"   >Imports</a> for more information.</p></section><section class="chapter"  ><h2 id="extensions.md-declaring-extensions-as-members" data-toc="extensions#extensions.md-declaring-extensions-as-members"  >Declaring extensions as members</h2><p id="extensions.md-32deff6" >Inside a class, you can declare extensions for another class. Inside such an extension, there are multiple <em id="extensions.md-7e59b295" class=""  >implicit receivers</em>- objects members of which can be accessed without a qualifier. The instance of the class in which the extension is declared is called <em id="extensions.md-abcf3a6f" class=""  >dispatch receiver</em>, and the instance of the receiver type of the extension method is called <em id="extensions.md-71203700" class=""  >extension receiver</em>.</p><div class="code-block" data-lang="kotlin" id="extensions.md-6a09eed6"        data-runnable="true" data-min-compiler-version="1.3"  >class Host(val hostname: String) {\n    fun printHostname() { print(hostname) }\n}\n\nclass Connection(val host: Host, val port: Int) {\n     fun printPort() { print(port) }\n\n     fun Host.printConnectionString() {\n         printHostname()   // calls Host.printHostname()\n         print(&quot;:&quot;)\n         printPort()   // calls Connection.printPort()\n     }\n\n     fun connect() {\n         /*...*/\n         host.printConnectionString()   // calls the extension function\n     }\n}\n\nfun main() {\n    Connection(Host(&quot;kotl.in&quot;), 443).connect()\n    //Host(&quot;kotl.in&quot;).printConnectionString(443)  // error, the extension function is unavailable outside Connection\n}\n</div><p id="extensions.md-e96ac35" >In case of a name conflict between the members of the dispatch receiver and the extension receiver, the extension receiver takes precedence. To refer to the member of the dispatch receiver, you can use the <a href="#this-expressions.md-qualified-this" id="extensions.md-552f1c89"   >qualified <code class="code " id="extensions.md-bd21338b"  >this</code> syntax</a>.</p><div class="code-block" data-lang="kotlin" id="extensions.md-fe1956ad"         >class Connection {\n    fun Host.getConnectionString() {\n        toString()         // calls Host.toString()\n        this@Connection.toString()  // calls Connection.toString()\n    }\n}\n</div><p id="extensions.md-8f9b9d99" >Extensions declared as members can be declared as <code class="code " id="extensions.md-44e97b0b"  >open</code> and overridden in subclasses. This means that the dispatch of such functions is virtual with regard to the dispatch receiver type, but static with regard to the extension receiver type.</p><div class="code-block" data-lang="kotlin" id="extensions.md-fb6c18a2"        data-runnable="true" data-min-compiler-version="1.3"  >open class Base { }\n\nclass Derived : Base() { }\n\nopen class BaseCaller {\n    open fun Base.printFunctionInfo() {\n        println(&quot;Base extension function in BaseCaller&quot;)\n    }\n\n    open fun Derived.printFunctionInfo() {\n        println(&quot;Derived extension function in BaseCaller&quot;)\n    }\n\n    fun call(b: Base) {\n        b.printFunctionInfo()   // call the extension function\n    }\n}\n\nclass DerivedCaller: BaseCaller() {\n    override fun Base.printFunctionInfo() {\n        println(&quot;Base extension function in DerivedCaller&quot;)\n    }\n\n    override fun Derived.printFunctionInfo() {\n        println(&quot;Derived extension function in DerivedCaller&quot;)\n    }\n}\n\nfun main() {\n    BaseCaller().call(Base())   // &quot;Base extension function in BaseCaller&quot;\n    DerivedCaller().call(Base())  // &quot;Base extension function in DerivedCaller&quot; - dispatch receiver is resolved virtually\n    DerivedCaller().call(Derived())  // &quot;Base extension function in DerivedCaller&quot; - extension receiver is resolved statically\n}\n</div></section><section class="chapter"  ><h2 id="extensions.md-note-on-visibility" data-toc="extensions#extensions.md-note-on-visibility"  >Note on visibility</h2><p id="extensions.md-861933ea" >Extensions utilize the same <a href="#visibility-modifiers.md" id="extensions.md-4a20e1e7"   >visibility of other entities</a> as regular functions declared in the same scope would. For example:</p><ul class="list _ul" id="extensions.md-d3dd2f5"   ><li class="list__item" id="extensions.md-6bee7d90" ><p>An extension declared at the top level of a file has access to the other <code class="code " id="extensions.md-10a862f"  >private</code> top-level declarations in the same file.</p></li><li class="list__item" id="extensions.md-474b78da" ><p>If an extension is declared outside its receiver type, such an extension cannot access the receiver\'s <code class="code " id="extensions.md-c80c4ec9"  >private</code> members.</p></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="data-classes.md"  >Data classes</h1><p id="data-classes.md-5407da45" >You often create classes whose main purpose is to hold data. In such classes, some standard functionality and utility functions are often mechanically derivable from the data. In Kotlin, these are called <em id="data-classes.md-1a0be09b" class=""  >data classes</em> and are marked with <code class="code " id="data-classes.md-cb52c002"  >data</code>:</p><div class="code-block" data-lang="kotlin" id="data-classes.md-bdfa8a85"         >data class User(val name: String, val age: Int)\n</div><p id="data-classes.md-9dd57ad1" >The compiler automatically derives the following members from all properties declared in the primary constructor:</p><ul class="list _ul" id="data-classes.md-b25f1f16"   ><li class="list__item" id="data-classes.md-a8a47e48" ><p><code class="code " id="data-classes.md-a18a1df9"  >equals()</code>/ <code class="code " id="data-classes.md-8b50e890"  >hashCode()</code> pair</p></li><li class="list__item" id="data-classes.md-dca0a63" ><p><code class="code " id="data-classes.md-602e9c42"  >toString()</code> of the form <code class="code " id="data-classes.md-5c53089c"  >&quot;User(name=John, age=42)&quot;</code></p></li><li class="list__item" id="data-classes.md-6d3db26a" ><p><a href="#destructuring-declarations.md" id="data-classes.md-dec331bb"   ><code class="code " id="data-classes.md-b5ce821a"  >componentN()</code> functions</a> corresponding to the properties in their order of declaration.</p></li><li class="list__item" id="data-classes.md-92f96e34" ><p><code class="code " id="data-classes.md-bd9671d9"  >copy()</code> function (see below).</p></li></ul><p id="data-classes.md-f303a1fd" >To ensure consistency and meaningful behavior of the generated code, data classes have to fulfill the following requirements:</p><ul class="list _ul" id="data-classes.md-2b8556dd"   ><li class="list__item" id="data-classes.md-c71e9aa4" ><p>The primary constructor needs to have at least one parameter.</p></li><li class="list__item" id="data-classes.md-9a2e1267" ><p>All primary constructor parameters need to be marked as <code class="code " id="data-classes.md-daa8f617"  >val</code> or <code class="code " id="data-classes.md-1545d0c0"  >var</code>.</p></li><li class="list__item" id="data-classes.md-407ffc10" ><p>Data classes cannot be abstract, open, sealed or inner.</p></li></ul><p id="data-classes.md-836171a9" >Additionally, the members generation follows these rules with regard to the members inheritance:</p><ul class="list _ul" id="data-classes.md-77a1a8d1"   ><li class="list__item" id="data-classes.md-25c96735" ><p>If there are explicit implementations of <code class="code " id="data-classes.md-aa4b942b"  >equals()</code>, <code class="code " id="data-classes.md-611d5171"  >hashCode()</code> or <code class="code " id="data-classes.md-7e60e64"  >toString()</code> in the data class body or <code class="code " id="data-classes.md-a59f9f81"  >final</code> implementations in a superclass, then these functions are not generated, and the existing implementations are used.</p></li><li class="list__item" id="data-classes.md-4e9f628c" ><p>If a supertype has the <code class="code " id="data-classes.md-17379fe5"  >componentN()</code> functions that are <code class="code " id="data-classes.md-2235f154"  >open</code> and return compatible types, the corresponding functions are generated for the data class and override those of the supertype. If the functions of the supertype cannot be overridden due to incompatible signatures or being final, an error is reported.</p></li><li class="list__item" id="data-classes.md-69bc9e4d" ><p>Providing explicit implementations for the <code class="code " id="data-classes.md-34f12513"  >componentN()</code> and <code class="code " id="data-classes.md-e565dded"  >copy()</code> functions is not allowed.</p></li></ul><p id="data-classes.md-fb43a496" >Data classes may extend other classes (see <a href="#sealed-classes.md" id="data-classes.md-1b6dd43c"   >Sealed classes</a> for examples).</p><aside data-type="note" class="prompt" data-title="" id="data-classes.md-6dc39b51" ><p id="data-classes.md-dc5108c1" >On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see <a href="#classes.md-constructors" id="data-classes.md-f16e9545"   >Constructors</a> ).</p></aside><div class="code-block" data-lang="kotlin" id="data-classes.md-1a4cf3ba"         >data class User(val name: String = &quot;&quot;, val age: Int = 0)\n</div><section class="chapter"  ><h2 id="data-classes.md-properties-declared-in-the-class-body" data-toc="data-classes#data-classes.md-properties-declared-in-the-class-body"  >Properties declared in the class body</h2><p id="data-classes.md-ee5c8e75" >The compiler only uses the properties defined inside the primary constructor for the automatically generated functions. To exclude a property from the generated implementations, declare it inside the class body:</p><div class="code-block" data-lang="kotlin" id="data-classes.md-77f7be06"         >data class Person(val name: String) {\n    var age: Int = 0\n}\n</div><p id="data-classes.md-298b252" >Only the property <code class="code " id="data-classes.md-15dc69d0"  >name</code> will be used inside the <code class="code " id="data-classes.md-23f70152"  >toString()</code>, <code class="code " id="data-classes.md-b273008f"  >equals()</code>, <code class="code " id="data-classes.md-e2395f74"  >hashCode()</code>, and <code class="code " id="data-classes.md-18556cf5"  >copy()</code> implementations, and there will only be one component function <code class="code " id="data-classes.md-db9f345b"  >component1()</code>. While two <code class="code " id="data-classes.md-240237ee"  >Person</code> objects can have different ages, they will be treated as equal.</p><div class="code-block" data-lang="kotlin" id="data-classes.md-74624f41"        data-runnable="true" data-min-compiler-version="1.3"  >data class Person(val name: String) {\n    var age: Int = 0\n}\nfun main() {\n//sampleStart\n    val person1 = Person(&quot;John&quot;)\n    val person2 = Person(&quot;John&quot;)\n    person1.age = 10\n    person2.age = 20\n//sampleEnd\n    println(&quot;person1 == person2: ${person1 == person2}&quot;)\n    println(&quot;person1 with age ${person1.age}: ${person1}&quot;)\n    println(&quot;person2 with age ${person2.age}: ${person2}&quot;)\n}\n</div></section><section class="chapter"  ><h2 id="data-classes.md-copying" data-toc="data-classes#data-classes.md-copying"  >Copying</h2><p id="data-classes.md-5532a9bc" >To copy an object for changing <em id="data-classes.md-f3da625d" class=""  >some</em> of its properties, but keeping the rest unchanged, use <br/> the <code class="code " id="data-classes.md-1113632d"  >copy()</code> function. For the <code class="code " id="data-classes.md-45f18a37"  >User</code> class above, its implementation would be as follows:</p><div class="code-block" data-lang="kotlin" id="data-classes.md-addd414d"         >fun copy(name: String = this.name, age: Int = this.age) = User(name, age)     \n</div><p id="data-classes.md-7c88c8c8" >You can write the following:</p><div class="code-block" data-lang="kotlin" id="data-classes.md-e3c335b9"         >val jack = User(name = &quot;Jack&quot;, age = 1)\nval olderJack = jack.copy(age = 2)\n</div></section><section class="chapter"  ><h2 id="data-classes.md-data-classes-and-destructuring-declarations" data-toc="data-classes#data-classes.md-data-classes-and-destructuring-declarations"  >Data classes and destructuring declarations</h2><p id="data-classes.md-e3a73e8f" ><em id="data-classes.md-8aebbd7f" class=""  >Component functions</em> generated for data classes enable their use in <a href="#destructuring-declarations.md" id="data-classes.md-f13ff8ab"   >destructuring declarations</a>:</p><div class="code-block" data-lang="kotlin" id="data-classes.md-cb402739"         >val jane = User(&quot;Jane&quot;, 35) \nval (name, age) = jane\nprintln(&quot;$name, $age years of age&quot;) // prints &quot;Jane, 35 years of age&quot;\n</div></section><section class="chapter"  ><h2 id="data-classes.md-standard-data-classes" data-toc="data-classes#data-classes.md-standard-data-classes"  >Standard data classes</h2><p id="data-classes.md-d888cbca" >The standard library provides <code class="code " id="data-classes.md-3dc4f77e"  >Pair</code> and <code class="code " id="data-classes.md-b3d96319"  >Triple</code>. In most cases, though, named data classes are a better design choice, because they make the code more readable by providing meaningful names for properties.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="sealed-classes.md"  >Sealed classes</h1><p id="sealed-classes.md-f34caed3" ><em id="sealed-classes.md-69dfa815" class=""  >Sealed</em> classes represent restricted class hierarchies that provide more control over inheritance. All subclasses of a sealed class are known at compile time. No other subclasses may appear after a module with the sealed class is compiled. For example, third-party clients can\'t extend your sealed class in their code. Thus, each instance of a sealed class has a type from a limited set that is known when this class is compiled.</p><p id="sealed-classes.md-f15cfcfc" >In some sense, sealed classes are similar to <a href="#enum-classes.md" id="sealed-classes.md-8ec2481"   ><code class="code " id="sealed-classes.md-f8de6803"  >enum</code> classes</a>: the set of values for an enum type is also restricted, but each enum constant exists only as a <em id="sealed-classes.md-24ac3434" class=""  >single instance</em>, whereas a subclass of a sealed class can have <em id="sealed-classes.md-10bb1e62" class=""  >multiple</em> instances, each with its own state.</p><p id="sealed-classes.md-ce5aa1e4" >To declare a sealed class, put the <code class="code " id="sealed-classes.md-9c7b137c"  >sealed</code> modifier before its name.</p><div class="code-block" data-lang="kotlin" id="sealed-classes.md-e97d38d"         >sealed class Expr\ndata class Const(val number: Double) : Expr()\ndata class Sum(val e1: Expr, val e2: Expr) : Expr()\nobject NotANumber : Expr()\n</div><p id="sealed-classes.md-68c730f9" >A sealed class is <a href="#classes.md-abstract-classes" id="sealed-classes.md-b250988"   >abstract</a> by itself, it cannot be instantiated directly and can have <code class="code " id="sealed-classes.md-2f0218d3"  >abstract</code> members.</p><p id="sealed-classes.md-5a9ddde8" >Sealed classes are not allowed to have non- <code class="code " id="sealed-classes.md-8ca2e592"  >private</code> constructors (their constructors are <code class="code " id="sealed-classes.md-51f56d3e"  >private</code> by default).</p><section class="chapter"  ><h2 id="sealed-classes.md-sealed-interfaces" data-toc="sealed-classes#sealed-classes.md-sealed-interfaces"  >Sealed interfaces</h2><aside data-type="warning" class="prompt" data-title="" id="sealed-classes.md-bcad3a8e"><p id="sealed-classes.md-25abc798" >Sealed interfaces are <a href="#components-stability.md" id="sealed-classes.md-44286bef"   >Experimental</a>. They may be dropped or changed at any time. Opt-in is required (see the details <a href="#sealed-classes.md-try-sealed-interfaces-and-package-wide-hierarchies-of-sealed-classes" id="sealed-classes.md-5b32bdf0"   >below</a> ), and you should use them only for evaluation purposes. We would appreciate your feedback on them in <a href="https://youtrack.jetbrains.com/issue/KT-42433" id="sealed-classes.md-81467a11"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="sealed-classes.md-e06fb845" >Interfaces can be declared <code class="code " id="sealed-classes.md-2f744b2b"  >sealed</code> as well as classes. The <code class="code " id="sealed-classes.md-265ca781"  >sealed</code> modifier works on interfaces the same way: all implementations of a sealed interface are known at compile time. Once a module with a sealed interface is compiled, no new implementations can appear.</p><div class="code-block" data-lang="kotlin" id="sealed-classes.md-97ae7f1c"         >sealed interface Expr\n\nsealed class MathExpr(): Expr\n\ndata class Const(val number: Double) : MathExpr()\ndata class Sum(val e1: Expr, val e2: Expr) : MathExpr()\nobject NotANumber : Expr\n</div></section><section class="chapter"  ><h2 id="sealed-classes.md-location-of-direct-subclasses" data-toc="sealed-classes#sealed-classes.md-location-of-direct-subclasses"  >Location of direct subclasses</h2><p id="sealed-classes.md-b3a7a0cf" >All direct subclasses of a sealed class must be declared in the same file as this class itself. Classes that extend direct subclasses of a sealed class (indirect inheritors) can be placed anywhere, not necessarily in the same file.</p><section class="chapter"  ><h3 id="sealed-classes.md-additional-location-the-same-package" data-toc="sealed-classes#sealed-classes.md-additional-location-the-same-package"  >Additional location: the same package</h3><aside data-type="warning" class="prompt" data-title="" id="sealed-classes.md-83b34e25"><p id="sealed-classes.md-a992375e" >Package-wide hierarchies of sealed classes are <a href="#components-stability.md" id="sealed-classes.md-72f7b787"   >Experimental</a>. They may be dropped or changed at any time. Opt-in is required (see the details <a href="#sealed-classes.md-try-sealed-interfaces-and-package-wide-hierarchies-of-sealed-classes" id="sealed-classes.md-e6281c47"   >below</a> ), and you should use them only for evaluation purposes. We would appreciate your feedback on them in <a href="https://youtrack.jetbrains.com/issue/KT-42433" id="sealed-classes.md-fd9949d3"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="sealed-classes.md-e8eaf09" >Direct subclasses of sealed classes and interfaces must be declared in the same package. They may be top-level or nested inside any number of other named classes, named interfaces, or named objects. Subclasses can have any <a href="#visibility-modifiers.md" id="sealed-classes.md-184d26a"   >visibility</a> as long as they are compatible with normal inheritance rules in Kotlin.</p><p id="sealed-classes.md-461c9d5d" >Subclasses of sealed classes must have a proper qualified name. They can\'t be local nor anonymous objects.</p><aside data-type="note" class="prompt" data-title="" id="sealed-classes.md-6516baae" ><p id="sealed-classes.md-cdf604a7" ><code class="code " id="sealed-classes.md-170808b3"  >enum</code> classes can\'t extend a sealed class (as well as any other class), but they can implement sealed interfaces.</p></aside></section></section><section class="chapter"  ><h2 id="sealed-classes.md-sealed-classes-and-when-expression" data-toc="sealed-classes#sealed-classes.md-sealed-classes-and-when-expression"  >Sealed classes and when expression</h2><p id="sealed-classes.md-9f66cd47" >The key benefit of using sealed classes comes into play when you use them in a <a href="#control-flow.md-when-expression" id="sealed-classes.md-1b4e2018"   ><code class="code " id="sealed-classes.md-52a67920"  >when</code> expression</a>. If it\'s possible to verify that the statement covers all cases, you don\'t need to add an <code class="code " id="sealed-classes.md-3170b69c"  >else</code> clause to the statement. However, this works only if you use <code class="code " id="sealed-classes.md-bc35d824"  >when</code> as an expression (using the result) and not as a statement.</p><div class="code-block" data-lang="kotlin" id="sealed-classes.md-deb0a165"         >fun eval(expr: Expr): Double = when(expr) {\n    is Const -&gt; expr.number\n    is Sum -&gt; eval(expr.e1) + eval(expr.e2)\n    NotANumber -&gt; Double.NaN\n    // the `else` clause is not required because we\'ve covered all the cases\n}\n</div></section><section class="chapter"  ><h2 id="sealed-classes.md-try-sealed-interfaces-and-package-wide-hierarchies-of-sealed-classes" data-toc="sealed-classes#sealed-classes.md-try-sealed-interfaces-and-package-wide-hierarchies-of-sealed-classes"  >Try sealed interfaces and package-wide hierarchies of sealed classes</h2><p id="sealed-classes.md-d3423104" ><a href="#sealed-classes.md-sealed-interfaces" id="sealed-classes.md-ed17dc7e"   >Sealed interfaces</a> and <a href="#sealed-classes.md-additional-location-the-same-package" id="sealed-classes.md-1335b4"   >package-wide hierarchies</a> are <a href="#components-stability.md" id="sealed-classes.md-a53475ac"   >Experimental</a>. To be able to use them in your code, switch to the language version <code class="code " id="sealed-classes.md-924b9169"  >1.5</code>:</p><ul class="list _ul" id="sealed-classes.md-47c37e6d"   ><li class="list__item" id="sealed-classes.md-382e80f8" ><p id="sealed-classes.md-f39b34b7" >In Gradle, add the <a href="#gradle.md-attributes-common-for-jvm-and-js" id="sealed-classes.md-e40061d1"   >compiler option</a> <code class="code " id="sealed-classes.md-178bb659"  >languageVersion</code> with the value <code class="code " id="sealed-classes.md-32f56d45"  >1.5</code>.</p><div class="code-block" data-lang="groovy" id="sealed-classes.md-1c21a01c"         >kotlinOptions.languageVersion = &quot;1.5&quot;\n</div></li><li class="list__item" id="sealed-classes.md-7ddfc04e" ><p id="sealed-classes.md-2a2b787b" >In the command-line compiler, add the option <code class="code " id="sealed-classes.md-5f828b2"  >-language-version 1.5</code>.</p></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="generics.md"  >Generics: in, out, where</h1><p id="generics.md-46c7a30d" >As in Java, classes in Kotlin can have type parameters:</p><div class="code-block" data-lang="kotlin" id="generics.md-88a80e4"         >class Box&lt;T&gt;(t: T) {\n    var value = t\n}\n</div><p id="generics.md-6f8642b7" >In general, to create an instance of such a class, provide the type arguments:</p><div class="code-block" data-lang="kotlin" id="generics.md-461c9de4"         >val box: Box&lt;Int&gt; = Box&lt;Int&gt;(1)\n</div><p id="generics.md-9ba0c48b" >But if the parameters may be inferred, for example, from the constructor arguments or by some other means, you can omit the type arguments:</p><div class="code-block" data-lang="kotlin" id="generics.md-88d8138d"         >val box = Box(1) // 1 has type Int, so the compiler figures out that it is Box&lt;Int&gt;\n</div><section class="chapter"  ><h2 id="generics.md-variance" data-toc="generics#generics.md-variance"  >Variance</h2><p id="generics.md-75ab6766" >One of the most tricky parts of Java\'s type system is wildcard types (see <a href="http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html" id="generics.md-d0893a0"   data-external="true" rel="noopener noreferrer" >Java Generics FAQ</a> ). And Kotlin doesn\'t have any. Instead, it has two other things: declaration-site variance and type projections.</p><p id="generics.md-a859cb10" >First, let\'s think about why Java needs those mysterious wildcards. The problem is explained in <a href="http://www.oracle.com/technetwork/java/effectivejava-136174.html" id="generics.md-a4197f03"   data-external="true" rel="noopener noreferrer" >Effective Java, 3rd Edition</a>, Item 31: <em id="generics.md-f6bb1bca" class=""  >Use bounded wildcards to increase API flexibility</em>. First, generic types in Java are <em id="generics.md-1bc88787" class=""  >invariant</em>, meaning that <code class="code " id="generics.md-b45d472e"  >List&lt;String&gt;</code> is <em id="generics.md-34441903" class=""  >not</em> a subtype of <code class="code " id="generics.md-9f6b41bc"  >List&lt;Object&gt;</code>. Why so? If <code class="code " id="generics.md-3a9533c4"  >List</code> was not <em id="generics.md-9cb1fb83" class=""  >invariant</em>, it would have been no better than Java\'s arrays, since the following code would have compiled and caused an exception at runtime:</p><div class="code-block" data-lang="java" id="generics.md-46051869"         >// Java\nList&lt;String&gt; strs = new ArrayList&lt;String&gt;();\nList&lt;Object&gt; objs = strs; // !!! A compile-time error here saves us from a runtime exception later.\nobjs.add(1); // Put an Integer into a list of Strings\nString s = strs.get(0); // !!! ClassCastException: Cannot cast Integer to String\n</div><p id="generics.md-88d508e9" >So, Java prohibits such things in order to guarantee run-time safety. But this has some implications. For example, consider the <code class="code " id="generics.md-ebdab063"  >addAll()</code> method from <code class="code " id="generics.md-cf2d6080"  >Collection</code> interface. What\'s the signature of this method? Intuitively, you\'d put it this way:</p><div class="code-block" data-lang="java" id="generics.md-f7ea4e08"         >// Java\ninterface Collection&lt;E&gt; ... {\n    void addAll(Collection&lt;E&gt; items);\n}\n</div><p id="generics.md-70d8ef8f" >But then, you are not able to do the following simple thing (which is perfectly safe):</p><div class="code-block" data-lang="java" id="generics.md-2a3b9cf1"         >// Java\nvoid copyAll(Collection&lt;Object&gt; to, Collection&lt;String&gt; from) {\n    to.addAll(from);\n    // !!! Would not compile with the naive declaration of addAll:\n    // Collection&lt;String&gt; is not a subtype of Collection&lt;Object&gt;\n}\n</div><p id="generics.md-5e39e619" >(In Java, you learned this lesson the hard way, see <a href="http://www.oracle.com/technetwork/java/effectivejava-136174.html" id="generics.md-3ed38d0d"   data-external="true" rel="noopener noreferrer" >Effective Java, 3rd Edition</a>, Item 28: <em id="generics.md-13978d15" class=""  >Prefer lists to arrays</em>)</p><p id="generics.md-b49dada5" >That\'s why the actual signature of <code class="code " id="generics.md-26297154"  >addAll()</code> is the following:</p><div class="code-block" data-lang="java" id="generics.md-ca7b63b6"         >// Java\ninterface Collection&lt;E&gt; ... {\n    void addAll(Collection&lt;? extends E&gt; items);\n}\n</div><p id="generics.md-bc6917f5" >The <em id="generics.md-a6cdea87" class=""  >wildcard type argument</em> <code class="code " id="generics.md-749313e1"  >? extends E</code> indicates that this method accepts a collection of objects of <code class="code " id="generics.md-1062d131"  >E</code> <em id="generics.md-85349274" class=""  >or some subtype of</em> <code class="code " id="generics.md-570aea46"  >E</code>, not just <code class="code " id="generics.md-13bfd412"  >E</code> itself. This means that you can safely <em id="generics.md-83082162" class=""  >read</em> <code class="code " id="generics.md-fc9e8660"  >E</code> \'s from items (elements of this collection are instances of a subclass of E), but <em id="generics.md-a1921639" class=""  >cannot write</em> to it since you don\'t know what objects comply to that unknown subtype of <code class="code " id="generics.md-5dfc8271"  >E</code>. In return for this limitation, you have the desired behaviour: <code class="code " id="generics.md-7a99b919"  >Collection&lt;String&gt;</code> <em id="generics.md-48c7328d" class=""  >is</em> a subtype of <code class="code " id="generics.md-fffda12a"  >Collection&lt;? extends Object&gt;</code>. In other words, the wildcard with an <em id="generics.md-521441c8" class=""  >extends</em> -bound (<em id="generics.md-ec9bc98a" class=""  >upper</em> bound) makes the type <em id="generics.md-65a73f58" class=""  >covariant</em>.</p><p id="generics.md-7cb2c1e5" >The key to understanding why this trick works is rather simple: if you can only <em id="generics.md-73974ab2" class=""  >take</em> items from a collection, then using a collection of <code class="code " id="generics.md-148f430c"  >String</code> s and reading <code class="code " id="generics.md-8c2b67d3"  >Object</code> s from it is fine. Conversely, if you can only <em id="generics.md-e587d55b" class=""  >put</em> items into the collection, it\'s OK to take a collection of <code class="code " id="generics.md-e71d7400"  >Object</code> s and put <code class="code " id="generics.md-bdf4b4d3"  >String</code> s into it: there is <code class="code " id="generics.md-3023b963"  >List&lt;? super String&gt;</code> in Java, a <em id="generics.md-78e85c01" class=""  >supertype</em> of <code class="code " id="generics.md-7d3e3cd9"  >List&lt;Object&gt;</code>.</p><p id="generics.md-4d3a51d0" >The latter is called <em id="generics.md-98f7b603" class=""  >contravariance</em>, and you can only call methods that take <code class="code " id="generics.md-843f0299"  >String</code> as an argument on <code class="code " id="generics.md-c3e90d5c"  >List&lt;? super String&gt;</code> (for example, you can call <code class="code " id="generics.md-4f38ecdf"  >add(String)</code> or <code class="code " id="generics.md-54743fcc"  >set(int, String)</code> ). If you call something that returns <code class="code " id="generics.md-d0e77bab"  >T</code> in <code class="code " id="generics.md-baa7335"  >List&lt;T&gt;</code>, you don\'t get a <code class="code " id="generics.md-af562d15"  >String</code>, but an <code class="code " id="generics.md-d1fc3ad7"  >Object</code>.</p><p id="generics.md-4d31dac8" >Joshua Bloch calls those objects you only <em id="generics.md-52460fc9" class=""  >read</em> from <em id="generics.md-f47f2164" class=""  >Producers</em>, and those you only <em id="generics.md-6eebd5a2" class=""  >write</em> to <em id="generics.md-90433bf" class=""  >Consumers</em>. He recommends:</p><aside data-type="tip" class="prompt" data-title="" id="generics.md-be4a60f0" ><p id="generics.md-f5b6a81" >&quot;For maximum flexibility, use wildcard types on input parameters that represent producers or consumers&quot;, and proposes the following mnemonic:</p><p id="generics.md-a9ce4162" ><em id="generics.md-67a953d4" class=""  >PECS stands for Producer-Extends, Consumer-Super.</em></p></aside><aside data-type="note" class="prompt" data-title="" id="generics.md-2dfd2e14" ><p id="generics.md-a3c262c0" >If you use a producer-object, say, <code class="code " id="generics.md-37d1f765"  >List&lt;? extends Foo&gt;</code>, you are not allowed to call <code class="code " id="generics.md-5f5ac31c"  >add()</code> or <code class="code " id="generics.md-5835ec68"  >set()</code> on this object, but this does not mean that this object is <em id="generics.md-2cc9faad" class=""  >immutable</em>: for example, nothing prevents you from calling <code class="code " id="generics.md-78fdb7ea"  >clear()</code> to remove all items from the list, since <code class="code " id="generics.md-428c4709"  >clear()</code> does not take any parameters at all.</p><p id="generics.md-44fa5e07" >The only thing guaranteed by wildcards (or other types of variance) is <em id="generics.md-b697f327" class=""  >type safety</em>. Immutability is a completely different story.</p></aside><section class="chapter"  ><h3 id="generics.md-declaration-site-variance" data-toc="generics#generics.md-declaration-site-variance"  >Declaration-site variance</h3><p id="generics.md-52691392" >Let\'s suppose that there is a generic interface <code class="code " id="generics.md-1694157e"  >Source&lt;T&gt;</code> that does not have any methods that take <code class="code " id="generics.md-383a814"  >T</code> as a parameter, only methods that return <code class="code " id="generics.md-27e5c20b"  >T</code>:</p><div class="code-block" data-lang="java" id="generics.md-769c064d"         >// Java\ninterface Source&lt;T&gt; {\n  T nextT();\n}\n</div><p id="generics.md-d919b740" >Then, it would be perfectly safe to store a reference to an instance of <code class="code " id="generics.md-6984f9a4"  >Source&lt;String&gt;</code> in a variable of type <code class="code " id="generics.md-cbe9b82c"  >Source&lt;Object&gt;</code>- there are no consumer-methods to call. But Java does not know this, and still prohibits it:</p><div class="code-block" data-lang="java" id="generics.md-97bd511c"         >// Java\nvoid demo(Source&lt;String&gt; strs) {\n  Source&lt;Object&gt; objects = strs; // !!! Not allowed in Java\n  // ...\n}\n</div><p id="generics.md-c3c0035b" >To fix this, you should declare objects of type <code class="code " id="generics.md-145b0ccd"  >Source&lt;? extends Object&gt;</code>, which is meaningless, because you can call all the same methods on such a variable as before, so there\'s no value added by the more complex type. But the compiler does not know that.</p><p id="generics.md-63f3f541" >In Kotlin, there is a way to explain this sort of thing to the compiler. This is called <em id="generics.md-678390f7" class=""  >declaration-site variance</em>: you can annotate the <em id="generics.md-b28cb631" class=""  >type parameter</em> <code class="code " id="generics.md-b3537223"  >T</code> of <code class="code " id="generics.md-eb522721"  >Source</code> to make sure that it is only <em id="generics.md-f8e65ff1" class=""  >returned</em> (produced) from members of <code class="code " id="generics.md-a549e5d5"  >Source&lt;T&gt;</code>, and never consumed. To do this, use the <code class="code " id="generics.md-c21e907f"  >out</code> modifier:</p><div class="code-block" data-lang="kotlin" id="generics.md-2653882d"         >interface Source&lt;out T&gt; {\n    fun nextT(): T\n}\n\nfun demo(strs: Source&lt;String&gt;) {\n    val objects: Source&lt;Any&gt; = strs // This is OK, since T is an out-parameter\n    // ...\n}\n</div><p id="generics.md-665de499" >The general rule is: when a type parameter <code class="code " id="generics.md-8b99e799"  >T</code> of a class <code class="code " id="generics.md-49fb5d02"  >C</code> is declared <code class="code " id="generics.md-44e9d10c"  >out</code>, it may occur only in <em id="generics.md-938173a2" class=""  >out</em> -position in the members of <code class="code " id="generics.md-75eb7ae5"  >C</code>, but in return <code class="code " id="generics.md-6b980f59"  >C&lt;Base&gt;</code> can safely be a supertype of <code class="code " id="generics.md-9ffb119d"  >C&lt;Derived&gt;</code>.</p><p id="generics.md-eabc27c5" >In other words, you can say that the class <code class="code " id="generics.md-5a054d4a"  >C</code> is <em id="generics.md-81935642" class=""  >covariant</em> in the parameter <code class="code " id="generics.md-6143a529"  >T</code>, or that <code class="code " id="generics.md-11d893e5"  >T</code> is a <em id="generics.md-e5bd2bd6" class=""  >covariant</em> type parameter. You can think of <code class="code " id="generics.md-c03dd04d"  >C</code> as being a <em id="generics.md-a7e6b5d8" class=""  >producer</em> of <code class="code " id="generics.md-1892f374"  >T</code> \'s, and NOT a <em id="generics.md-fee075a9" class=""  >consumer</em> of <code class="code " id="generics.md-7af3cce7"  >T</code> \'s.</p><p id="generics.md-1abf0366" >The <code class="code " id="generics.md-9d737d15"  >out</code> modifier is called a <em id="generics.md-198a3c8" class=""  >variance annotation</em>, and since it is provided at the type parameter declaration site, it provides <em id="generics.md-16639994" class=""  >declaration-site variance</em>. This is in contrast with Java\'s <em id="generics.md-6c68e116" class=""  >use-site variance</em> where wildcards in the type usages make the types covariant.</p><p id="generics.md-b528bb82" >In addition to <code class="code " id="generics.md-17effa30"  >out</code>, Kotlin provides a complementary variance annotation: <code class="code " id="generics.md-1994df7b"  >in</code>. It makes a type parameter <em id="generics.md-e7199ee6" class=""  >contravariant</em>: it can only be consumed and never produced. A good example of a contravariant type is <code class="code " id="generics.md-11b410b0"  >Comparable</code>:</p><div class="code-block" data-lang="kotlin" id="generics.md-2c7b62e"         >interface Comparable&lt;in T&gt; {\n    operator fun compareTo(other: T): Int\n}\n\nfun demo(x: Comparable&lt;Number&gt;) {\n    x.compareTo(1.0) // 1.0 has type Double, which is a subtype of Number\n    // Thus, you can assign x to a variable of type Comparable&lt;Double&gt;\n    val y: Comparable&lt;Double&gt; = x // OK!\n}\n</div><p id="generics.md-79c9d527" >The words <em id="generics.md-e6e7d203" class=""  >in</em> and <em id="generics.md-6738c730" class=""  >out</em> seem to be self-explaining (as they were successfully used in C# for quite some time already), thus the mnemonic mentioned above is not really needed, and one can rephrase it for a higher purpose:</p><p id="generics.md-cfd24ded" ><b id="generics.md-df9b488b" class=""  ><a href="http://en.wikipedia.org/wiki/Existentialism" id="generics.md-2b6b307f"   data-external="true" rel="noopener noreferrer" >The Existential</a> Transformation: Consumer in, Producer out!</b> :-)</p></section></section><section class="chapter"  ><h2 id="generics.md-type-projections" data-toc="generics#generics.md-type-projections"  >Type projections</h2><section class="chapter"  ><h3 id="generics.md-use-site-variance-type-projections" data-toc="generics#generics.md-use-site-variance-type-projections"  >Use-site variance: type projections</h3><p id="generics.md-6e6055d8" >It is very convenient to declare a type parameter T as <code class="code " id="generics.md-86399550"  >out</code> and avoid trouble with subtyping on the use site, but some classes <em id="generics.md-3a3cc547" class=""  >can\'t</em> actually be restricted to only return <code class="code " id="generics.md-4d1f440"  >T</code> \'s! A good example of this is <code class="code " id="generics.md-1e4cb9a2"  >Array</code>:</p><div class="code-block" data-lang="kotlin" id="generics.md-25c1dc02"         >class Array&lt;T&gt;(val size: Int) {\n    fun get(index: Int): T { ... }\n    fun set(index: Int, value: T) { ... }\n}\n</div><p id="generics.md-e65b29" >This class cannot be either co- or contravariant in <code class="code " id="generics.md-aff4f93b"  >T</code>. And this imposes certain inflexibilities. Consider the following function:</p><div class="code-block" data-lang="kotlin" id="generics.md-e43c09d3"         >fun copy(from: Array&lt;Any&gt;, to: Array&lt;Any&gt;) {\n    assert(from.size == to.size)\n    for (i in from.indices)\n        to[i] = from[i]\n}\n</div><p id="generics.md-17b858ca" >This function is supposed to copy items from one array to another. Let\'s try to apply it in practice:</p><div class="code-block" data-lang="kotlin" id="generics.md-4635c8f5"         >val ints: Array&lt;Int&gt; = arrayOf(1, 2, 3)\nval any = Array&lt;Any&gt;(3) { &quot;&quot; } \ncopy(ints, any)\n//   ^ type is Array&lt;Int&gt; but Array&lt;Any&gt; was expected\n</div><p id="generics.md-47d30ae2" >Here you run into the same familiar problem: <code class="code " id="generics.md-3b8eaa5f"  >Array&lt;T&gt;</code> is <em id="generics.md-a70c7623" class=""  >invariant</em> in <code class="code " id="generics.md-86310f68"  >T</code>, thus neither of <code class="code " id="generics.md-cc6f14db"  >Array&lt;Int&gt;</code> and <code class="code " id="generics.md-3813c08b"  >Array&lt;Any&gt;</code> is a subtype of the other. Why? Again, because copy may have an unexpected behavior, for example, it may attempt to write a <code class="code " id="generics.md-52d8d40b"  >String</code> to <code class="code " id="generics.md-69b0b07a"  >from</code>, and if you actually pass an array of <code class="code " id="generics.md-16942af1"  >Int</code> there, a <code class="code " id="generics.md-5c95cdd4"  >ClassCastException</code> \'ll be thrown sometime later.</p><p id="generics.md-fd9a131b" >To prohibit the <code class="code " id="generics.md-a9981ee4"  >copy</code> function from <em id="generics.md-90bd9c4f" class=""  >writing</em> to <code class="code " id="generics.md-a2db950f"  >from</code>, do the following:</p><div class="code-block" data-lang="kotlin" id="generics.md-989ebcd7"         >fun copy(from: Array&lt;out Any&gt;, to: Array&lt;Any&gt;) { ... }\n</div><p id="generics.md-9da721e1" >This is <em id="generics.md-169085ea" class=""  >type projection</em>, that means that <code class="code " id="generics.md-76efadd1"  >from</code> is not simply an array, but a restricted (<em id="generics.md-81cdd47" class=""  >projected</em>) one. You can only call those methods that return the type parameter <code class="code " id="generics.md-ae173137"  >T</code>, in this case it means that you can only call <code class="code " id="generics.md-137983f"  >get()</code>. This is our approach to <em id="generics.md-c7c36a10" class=""  >use-site variance</em>, and corresponds to Java\'s <code class="code " id="generics.md-7e0f21c6"  >Array&lt;? extends Object&gt;</code>, but in a slightly simpler way.</p><p id="generics.md-f0e40d78" >You can project a type with <code class="code " id="generics.md-aec9043e"  >in</code> as well:</p><div class="code-block" data-lang="kotlin" id="generics.md-4967f20a"         >fun fill(dest: Array&lt;in String&gt;, value: String) { ... }\n</div><p id="generics.md-69c49119" ><code class="code " id="generics.md-53cf1885"  >Array&lt;in String&gt;</code> corresponds to Java\'s <code class="code " id="generics.md-78e9c385"  >Array&lt;? super String&gt;</code>. This means that you can pass an array of <code class="code " id="generics.md-d362ba65"  >CharSequence</code> or an array of <code class="code " id="generics.md-a52b30c2"  >Object</code> to the <code class="code " id="generics.md-37213253"  >fill()</code> function.</p></section><section class="chapter"  ><h3 id="generics.md-star-projections" data-toc="generics#generics.md-star-projections"  >Star-projections</h3><p id="generics.md-4260afd1" >Sometimes you want to say that you know nothing about the type argument, but still want to use it in a safe way. The safe way here is to define such a projection of the generic type, that every concrete instantiation of that generic type would be a subtype of that projection.</p><p id="generics.md-650b897" >Kotlin provides so called <em id="generics.md-a08f2b96" class=""  >star-projection</em> syntax for this:</p><ul class="list _ul" id="generics.md-b3271df1"   ><li class="list__item" id="generics.md-677f1db1" ><p>For <code class="code " id="generics.md-595df987"  >Foo&lt;out T : TUpper&gt;</code>, where <code class="code " id="generics.md-a70d4d8d"  >T</code> is a covariant type parameter with the upper bound <code class="code " id="generics.md-97a0b2c9"  >TUpper</code>, <code class="code " id="generics.md-c96bee7c"  >Foo&lt;*&gt;</code> is equivalent to <code class="code " id="generics.md-804d7e74"  >Foo&lt;out TUpper&gt;</code>. It means that when the <code class="code " id="generics.md-ba90e8d9"  >T</code> is unknown you can safely <em id="generics.md-b91b5e25" class=""  >read</em> values of <code class="code " id="generics.md-ebb94d84"  >TUpper</code> from <code class="code " id="generics.md-10278416"  >Foo&lt;*&gt;</code>.</p></li><li class="list__item" id="generics.md-13227839" ><p>For <code class="code " id="generics.md-48b4b8f5"  >Foo&lt;in T&gt;</code>, where <code class="code " id="generics.md-2d7c8c8b"  >T</code> is a contravariant type parameter, <code class="code " id="generics.md-11629802"  >Foo&lt;*&gt;</code> is equivalent to <code class="code " id="generics.md-b3cd928e"  >Foo&lt;in Nothing&gt;</code>. It means there is nothing you can <em id="generics.md-b74a35cf" class=""  >write</em> to <code class="code " id="generics.md-3ea2d375"  >Foo&lt;*&gt;</code> in a safe way when <code class="code " id="generics.md-1cbe2052"  >T</code> is unknown.</p></li><li class="list__item" id="generics.md-4cba03ae" ><p>For <code class="code " id="generics.md-41e72b36"  >Foo&lt;T : TUpper&gt;</code>, where <code class="code " id="generics.md-36b4973f"  >T</code> is an invariant type parameter with the upper bound <code class="code " id="generics.md-ea4b3984"  >TUpper</code>, <code class="code " id="generics.md-5f7d1e77"  >Foo&lt;*&gt;</code> is equivalent to <code class="code " id="generics.md-7a92be1e"  >Foo&lt;out TUpper&gt;</code> for reading values and to <code class="code " id="generics.md-7ee50c2f"  >Foo&lt;in Nothing&gt;</code> for writing values.</p></li></ul><p id="generics.md-3a8b0ea2" >If a generic type has several type parameters each of them can be projected independently. For example, if the type is declared as <code class="code " id="generics.md-3d659c27"  >interface Function&lt;in T, out U&gt;</code> you can imagine the following star-projections:</p><ul class="list _ul" id="generics.md-72b370af"   ><li class="list__item" id="generics.md-e56a074d" ><p><code class="code " id="generics.md-76580fa3"  >Function&lt;*, String&gt;</code> means <code class="code " id="generics.md-80d59ceb"  >Function&lt;in Nothing, String&gt;</code>.</p></li><li class="list__item" id="generics.md-23565949" ><p><code class="code " id="generics.md-2eec0311"  >Function&lt;Int, *&gt;</code> means <code class="code " id="generics.md-adc1aa11"  >Function&lt;Int, out Any?&gt;</code>.</p></li><li class="list__item" id="generics.md-67e39db5" ><p><code class="code " id="generics.md-180445c8"  >Function&lt;*, *&gt;</code> means <code class="code " id="generics.md-cba53b5d"  >Function&lt;in Nothing, out Any?&gt;</code>.</p></li></ul><aside data-type="note" class="prompt" data-title="" id="generics.md-65867eb" ><p id="generics.md-60b47752" >Star-projections are very much like Java\'s raw types, but safe.</p></aside></section></section><section class="chapter"  ><h2 id="generics.md-generic-functions" data-toc="generics#generics.md-generic-functions"  >Generic functions</h2><p id="generics.md-7c1ceb74" >Not only classes can have type parameters. Functions can, too. Type parameters are placed <em id="generics.md-8aaf4f08" class=""  >before</em> the name of the function:</p><div class="code-block" data-lang="kotlin" id="generics.md-3cde5e65"         >fun &lt;T&gt; singletonList(item: T): List&lt;T&gt; {\n    // ...\n}\n\nfun &lt;T&gt; T.basicToString(): String {  // extension function\n    // ...\n}\n</div><p id="generics.md-7446a96b" >To call a generic function, specify the type arguments at the call site <em id="generics.md-a3c214ac" class=""  >after</em> the name of the function:</p><div class="code-block" data-lang="kotlin" id="generics.md-beae1fd"         >val l = singletonList&lt;Int&gt;(1)\n</div><p id="generics.md-55da9d3" >Type arguments can be omitted if they can be inferred from the context, so the following example works as well:</p><div class="code-block" data-lang="kotlin" id="generics.md-b6960d3f"         >val l = singletonList(1)\n</div></section><section class="chapter"  ><h2 id="generics.md-generic-constraints" data-toc="generics#generics.md-generic-constraints"  >Generic constraints</h2><p id="generics.md-e1b367a2" >The set of all possible types that can be substituted for a given type parameter may be restricted by <em id="generics.md-98e298cc" class=""  >generic constraints</em>.</p><section class="chapter"  ><h3 id="generics.md-upper-bounds" data-toc="generics#generics.md-upper-bounds"  >Upper bounds</h3><p id="generics.md-e48dbabb" >The most common type of constraint is an <em id="generics.md-1ee7a0ab" class=""  >upper bound</em> that corresponds to Java\'s <code class="code " id="generics.md-5904428c"  >extends</code> keyword:</p><div class="code-block" data-lang="kotlin" id="generics.md-34fe94c"         >fun &lt;T : Comparable&lt;T&gt;&gt; sort(list: List&lt;T&gt;) {  ... }\n</div><p id="generics.md-bec0feaa" >The type specified after a colon is the <em id="generics.md-582e7919" class=""  >upper bound</em>: only a subtype of <code class="code " id="generics.md-b5cd6149"  >Comparable&lt;T&gt;</code> can be substituted for <code class="code " id="generics.md-448ca5"  >T</code>. For example:</p><div class="code-block" data-lang="kotlin" id="generics.md-3585f270"         >sort(listOf(1, 2, 3)) // OK. Int is a subtype of Comparable&lt;Int&gt;\nsort(listOf(HashMap&lt;Int, String&gt;())) // Error: HashMap&lt;Int, String&gt; is not a subtype of Comparable&lt;HashMap&lt;Int, String&gt;&gt;\n</div><p id="generics.md-1f2aa5c8" >The default upper bound (if none specified) is <code class="code " id="generics.md-12ccf6ea"  >Any?</code>. Only one upper bound can be specified inside the angle brackets. If the same type parameter needs more than one upper bound, you need a separate <em id="generics.md-7ffadc99" class=""  >where</em> -clause:</p><div class="code-block" data-lang="kotlin" id="generics.md-75e24a05"         >fun &lt;T&gt; copyWhenGreater(list: List&lt;T&gt;, threshold: T): List&lt;String&gt;\n    where T : CharSequence,\n          T : Comparable&lt;T&gt; {\n    return list.filter { it &gt; threshold }.map { it.toString() }\n}\n</div><p id="generics.md-bf1ffbc" >The passed type must satisfy all conditions of the <code class="code " id="generics.md-3fd90f61"  >where</code> clause simultaneously. In the above example, the <code class="code " id="generics.md-80c49393"  >T</code> type must implement <em id="generics.md-ae1bd760" class=""  >both</em> <code class="code " id="generics.md-5ccfac51"  >CharSequence</code> and <code class="code " id="generics.md-6137e7fd"  >Comparable</code>.</p></section></section><section class="chapter"  ><h2 id="generics.md-type-erasure" data-toc="generics#generics.md-type-erasure"  >Type erasure</h2><p id="generics.md-354bfa5e" >The type safety checks that Kotlin performs for generic declaration usages are only done at compile time. At runtime, the instances of generic types do not hold any information about their actual type arguments. The type information is said to be <em id="generics.md-1e63050c" class=""  >erased</em>. For example, the instances of <code class="code " id="generics.md-8d226509"  >Foo&lt;Bar&gt;</code> and <code class="code " id="generics.md-29272638"  >Foo&lt;Baz?&gt;</code> are erased to just <code class="code " id="generics.md-5c145e22"  >Foo&lt;*&gt;</code>.</p><p id="generics.md-6355dfcc" >Therefore, there is no general way to check whether an instance of a generic type was created with certain type arguments at runtime, and the compiler <a href="#typecasts.md-type-erasure-and-generic-type-checks" id="generics.md-80fff830"   >prohibits such <code class="code " id="generics.md-5e2425eb"  >is</code> -checks</a>.</p><p id="generics.md-8ab39114" >Type casts to generic types with concrete type arguments, for example, <code class="code " id="generics.md-6b9052be"  >foo as List&lt;String&gt;</code>, cannot be checked at runtime. <br/> These <a href="#typecasts.md-unchecked-casts" id="generics.md-e50708c0"   >unchecked casts</a> can be used when type safety is implied by the high-level program logic but cannot be inferred directly by the compiler. The compiler issues a warning on unchecked casts, and at runtime, only the non-generic part is checked (equivalent to <code class="code " id="generics.md-b758ce6e"  >foo as List&lt;*&gt;</code> ).</p><p id="generics.md-8d99c767" >The type arguments of a generic function calls are also only checked at compile time. Inside the function bodies, the type parameters cannot be used for type checks, and type casts to type parameters (<code class="code " id="generics.md-5d492754"  >foo as T</code>) are unchecked. However, <a href="#inline-functions.md-reified-type-parameters" id="generics.md-d9f187f1"   >reified type parameters</a> of inline functions are substituted by the actual type arguments in the inlined function body at the call sites and thus can be used for type checks and casts, with the same restrictions for instances of generic types as described above.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="nested-classes.md"  >Nested and inner classes</h1><p id="nested-classes.md-439ce26b" >Classes can be nested in other classes:</p><div class="code-block" data-lang="kotlin" id="nested-classes.md-d784395c"         >class Outer {\n    private val bar: Int = 1\n    class Nested {\n        fun foo() = 2\n    }\n}\n\nval demo = Outer.Nested().foo() // == 2\n</div><p id="nested-classes.md-43c67fd7" >You can also use interfaces with nesting. All combinations of classes and interfaces are possible: You can nest interfaces in classes, classes in interfaces, and interfaces in interfaces.</p><div class="code-block" data-lang="kotlin" id="nested-classes.md-3be7c545"         >interface OuterInterface {\n    class InnerClass\n    interface InnerInterface\n}\n\nclass OuterClass {\n    class InnerClass\n    interface InnerInterface\n}\n</div><section class="chapter"  ><h2 id="nested-classes.md-inner-classes" data-toc="nested-classes#nested-classes.md-inner-classes"  >Inner classes</h2><p id="nested-classes.md-80813a2a" >A nested class marked as <code class="code " id="nested-classes.md-6eb9b239"  >inner</code> can access the members of its outer class. Inner classes carry a reference to an object of an outer class:</p><div class="code-block" data-lang="kotlin" id="nested-classes.md-c8404566"         >class Outer {\n    private val bar: Int = 1\n    inner class Inner {\n        fun foo() = bar\n    }\n}\n\nval demo = Outer().Inner().foo() // == 1\n</div><p id="nested-classes.md-527b1c30" >See <a href="#this-expressions.md" id="nested-classes.md-f3caac5"   >Qualified <code class="code " id="nested-classes.md-83dda34b"  >this</code> expressions</a> to learn about disambiguation of <code class="code " id="nested-classes.md-b1737895"  >this</code> in inner classes.</p></section><section class="chapter"  ><h2 id="nested-classes.md-anonymous-inner-classes" data-toc="nested-classes#nested-classes.md-anonymous-inner-classes"  >Anonymous inner classes</h2><p id="nested-classes.md-d8f557e7" >Anonymous inner class instances are created using an <a href="#object-declarations.md-object-expressions" id="nested-classes.md-cd566936"   >object expression</a>:</p><div class="code-block" data-lang="kotlin" id="nested-classes.md-b0d64dfd"         >window.addMouseListener(object : MouseAdapter() {\n\n    override fun mouseClicked(e: MouseEvent) { ... }\n\n    override fun mouseEntered(e: MouseEvent) { ... }\n})\n</div><aside data-type="note" class="prompt" data-title="" id="nested-classes.md-637657b6" ><p id="nested-classes.md-75364683" >On the JVM, if the object is an instance of a functional Java interface (that means a Java interface with a single abstract method), you can create it using a lambda expression prefixed with the type of the interface:</p><div class="code-block" data-lang="kotlin" id="nested-classes.md-f8af21de"         >val listener = ActionListener { println(&quot;clicked&quot;) }\n</div></aside></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="enum-classes.md"  >Enum classes</h1><p id="enum-classes.md-f8592927" >The most basic usage of enum classes is implementing type-safe enums:</p><div class="code-block" data-lang="kotlin" id="enum-classes.md-20e84bbb"         >enum class Direction {\n    NORTH, SOUTH, WEST, EAST\n}\n</div><p id="enum-classes.md-c4bcf380" >Each enum constant is an object. Enum constants are separated with commas.</p><p id="enum-classes.md-dab10743" >Since each enum is an instance of the enum class, it can be initialized as:</p><div class="code-block" data-lang="kotlin" id="enum-classes.md-bdefc51b"         >enum class Color(val rgb: Int) {\n        RED(0xFF0000),\n        GREEN(0x00FF00),\n        BLUE(0x0000FF)\n}\n</div><section class="chapter"  ><h2 id="enum-classes.md-anonymous-classes" data-toc="enum-classes#enum-classes.md-anonymous-classes"  >Anonymous classes</h2><p id="enum-classes.md-c807b4d1" >Enum constants can also declare their own anonymous classes with their corresponding methods, as well as overriding base methods.</p><div class="code-block" data-lang="kotlin" id="enum-classes.md-b1a3df95"         >enum class ProtocolState {\n    WAITING {\n        override fun signal() = TALKING\n    },\n\n    TALKING {\n        override fun signal() = WAITING\n    };\n\n    abstract fun signal(): ProtocolState\n}\n</div><p id="enum-classes.md-3545ccb4" >If the enum class defines any members, separate the enum constant definitions from the member definitions with a semicolon.</p></section><section class="chapter"  ><h2 id="enum-classes.md-implementing-interfaces-in-enum-classes" data-toc="enum-classes#enum-classes.md-implementing-interfaces-in-enum-classes"  >Implementing interfaces in enum classes</h2><p id="enum-classes.md-9fef7ff8" >An enum class can implement an interface (but not derive from a class), providing either a single interface members implementation for all of the entries, or separate ones for each entry within its anonymous class. This is done by adding the interfaces to the enum class declaration as follows:</p><div class="code-block" data-lang="kotlin" id="enum-classes.md-aeba1b09"        data-runnable="true"  >import java.util.function.BinaryOperator\nimport java.util.function.IntBinaryOperator\n\n//sampleStart\nenum class IntArithmetics : BinaryOperator&lt;Int&gt;, IntBinaryOperator {\n    PLUS {\n        override fun apply(t: Int, u: Int): Int = t + u\n    },\n    TIMES {\n        override fun apply(t: Int, u: Int): Int = t * u\n    };\n    \n    override fun applyAsInt(t: Int, u: Int) = apply(t, u)\n}\n//sampleEnd\n\nfun main() {\n    val a = 13\n    val b = 31\n    for (f in IntArithmetics.values()) {\n        println(&quot;$f($a, $b) = ${f.apply(a, b)}&quot;)\n    }\n}\n</div></section><section class="chapter"  ><h2 id="enum-classes.md-working-with-enum-constants" data-toc="enum-classes#enum-classes.md-working-with-enum-constants"  >Working with enum constants</h2><p id="enum-classes.md-da58c9bc" >Enum classes in Kotlin have synthetic methods for listing the defined enum constants and getting an enum constant by its name. The signatures of these methods are as follows (assuming the name of the enum class is <code class="code " id="enum-classes.md-1b0e74e3"  >EnumClass</code> ):</p><div class="code-block" data-lang="kotlin" id="enum-classes.md-6ece8525"         >EnumClass.valueOf(value: String): EnumClass\nEnumClass.values(): Array&lt;EnumClass&gt;\n</div><p id="enum-classes.md-b91320a8" >The <code class="code " id="enum-classes.md-6c4d6712"  >valueOf()</code> method throws an <code class="code " id="enum-classes.md-e7367974"  >IllegalArgumentException</code> if the specified name does not match any of the enum constants defined in the class.</p><p id="enum-classes.md-f9f7c46d" >You can access the constants in an enum class in a generic way, using the <code class="code " id="enum-classes.md-55104875"  >enumValues&lt;T&gt;()</code> and <code class="code " id="enum-classes.md-fbb860e8"  >enumValueOf&lt;T&gt;()</code> functions:</p><div class="code-block" data-lang="kotlin" id="enum-classes.md-72b7f0a7"         >enum class RGB { RED, GREEN, BLUE }\n\ninline fun &lt;reified T : Enum&lt;T&gt;&gt; printAllValues() {\n    print(enumValues&lt;T&gt;().joinToString { it.name })\n}\n\nprintAllValues&lt;RGB&gt;() // prints RED, GREEN, BLUE\n</div><p id="enum-classes.md-2a71dd2a" >Every enum constant has properties to obtain its name and position in the enum class declaration:</p><div class="code-block" data-lang="kotlin" id="enum-classes.md-c7cacdca"         >val name: String\nval ordinal: Int\n</div><p id="enum-classes.md-61acc1db" >The enum constants also implement the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-comparable/index.html" id="enum-classes.md-8b840bd1"   data-external="true" rel="noopener noreferrer" >Comparable</a> interface, with the natural order being the order in which they are defined in the enum class.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="inline-classes.md"  >Inline classes</h1><aside data-type="warning" class="prompt" data-title="" id="inline-classes.md-d5f6d40d"><p id="inline-classes.md-bb18e813" >Inline classes are in <a href="#components-stability.md" id="inline-classes.md-268bedaa"   >Beta</a>. They are almost stable, but migration steps may be required in the future. We\'ll do our best to minimize any changes you will have to make. We would appreciate your feedback on the inline classes feature in <a href="https://youtrack.jetbrains.com/issue/KT-42434" id="inline-classes.md-4d3b1528"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="inline-classes.md-3da48da1" >Sometimes it is necessary for business logic to create a wrapper around some type. However, it introduces runtime overhead due to additional heap allocations. Moreover, if the wrapped type is primitive, the performance hit is terrible, because primitive types are usually heavily optimized by the runtime, while their wrappers don\'t get any special treatment.</p><p id="inline-classes.md-301ca1e7" >To solve such issues, Kotlin introduces a special kind of class called an <em id="inline-classes.md-790037be" class=""  >inline class</em>. Inline classes are a subset of value-based classes. They don\'t have an identity and can only hold values.</p><p id="inline-classes.md-2dd06771" >To declare an inline class, use an <code class="code " id="inline-classes.md-76a8514e"  >inline</code> or <code class="code " id="inline-classes.md-f213edff"  >value</code> modifier before the name of the class:</p><div class="code-block" data-lang="kotlin" id="inline-classes.md-fb24c3f7"         >inline class Password(val value: String)\n</div><div class="code-block" data-lang="kotlin" id="inline-classes.md-ba7886d9"         >value class Password(private val s: String)\n</div><p id="inline-classes.md-a78cff41" >To declare an inline class for the JVM backend, use the <code class="code " id="inline-classes.md-c5d1d5cf"  >value</code> modifier along with the <code class="code " id="inline-classes.md-67c4d6f7"  >@JvmInline</code> annotation before the class declaration:</p><div class="code-block" data-lang="kotlin" id="inline-classes.md-d7ce0fe7"         >// For JVM backends\n@JvmInline\nvalue class Password(private val s: String)\n</div><p id="inline-classes.md-160f30ed" >An inline class must have a single property initialized in the primary constructor. At runtime, instances of the inline class will be represented using this single property (see details about runtime representation <a href="#inline-classes.md-representation" id="inline-classes.md-4056ace5"   >below</a> ):</p><div class="code-block" data-lang="kotlin" id="inline-classes.md-68cd5bd1"         >// No actual instantiation of class \'Password\' happens\n// At runtime \'securePassword\' contains just \'String\'\nval securePassword = Password(&quot;Don\'t try this in production&quot;) \n</div><p id="inline-classes.md-c7045a85" >This is the main feature of inline classes, which inspired the name <em id="inline-classes.md-4e0997ba" class=""  >inline</em>: data of the class is <em id="inline-classes.md-9c6a1e98" class=""  >inlined</em> into its usages (similar to how content of <a href="#inline-functions.md" id="inline-classes.md-6d2aba84"   >inline functions</a> is inlined to call sites).</p><section class="chapter"  ><h2 id="inline-classes.md-members" data-toc="inline-classes#inline-classes.md-members"  >Members</h2><p id="inline-classes.md-e0d77d6d" >Inline classes support some functionality of regular classes. In particular, they are allowed to declare properties and functions, and have the <code class="code " id="inline-classes.md-60913d42"  >init</code> block:</p><div class="code-block" data-lang="kotlin" id="inline-classes.md-7b7a3d40"         >@JvmInline\nvalue class Name(val s: String) {\n    init {\n        require(s.length &gt; 0) { }\n    }\n\n    val length: Int\n        get() = s.length\n\n    fun greet() {\n        println(&quot;Hello, $s&quot;)\n    }\n}\n\nfun main() {\n    val name = Name(&quot;Kotlin&quot;)\n    name.greet() // method `greet` is called as a static method\n    println(name.length) // property getter is called as a static method\n}\n</div><p id="inline-classes.md-e763c26" >There are some restrictions for inline class members:</p><ul class="list _ul" id="inline-classes.md-6cf23548"   ><li class="list__item" id="inline-classes.md-ac51fa40" ><p>Inline class properties cannot have <a href="#properties.md-backing-fields" id="inline-classes.md-b02072d5"   >backing fields</a>. They can only have simple computable properties (no <code class="code " id="inline-classes.md-24bad181"  >lateinit</code> /delegated properties).</p></li><li class="list__item" id="inline-classes.md-4cb9c8a" ><p>Inline classes cannot have <code class="code " id="inline-classes.md-4df1525a"  >var</code> properties or extension <code class="code " id="inline-classes.md-58e7b2d8"  >var</code> properties.</p></li></ul></section><section class="chapter"  ><h2 id="inline-classes.md-inheritance" data-toc="inline-classes#inline-classes.md-inheritance"  >Inheritance</h2><p id="inline-classes.md-267282eb" >Inline classes are allowed to inherit from interfaces:</p><div class="code-block" data-lang="kotlin" id="inline-classes.md-8c9f12b1"         >interface Printable {\n    fun prettyPrint(): String\n}\n\n@JvmInline\nvalue class Name(val s: String) : Printable {\n    override fun prettyPrint(): String = &quot;Let\'s $s!&quot;\n}\n\nfun main() {\n    val name = Name(&quot;Kotlin&quot;)\n    println(name.prettyPrint()) // Still called as a static method\n}\n</div><p id="inline-classes.md-ca82c91c" >It is forbidden for inline classes to participate in a class hierarchy. This means that inline classes cannot extend other classes and must be <code class="code " id="inline-classes.md-903bed86"  >final</code>.</p></section><section class="chapter"  ><h2 id="inline-classes.md-representation" data-toc="inline-classes#inline-classes.md-representation"  >Representation</h2><p id="inline-classes.md-6033472a" >In generated code, the Kotlin compiler keeps a <em id="inline-classes.md-95a27c0e" class=""  >wrapper</em> for each inline class. Inline class instances can be represented at runtime either as wrappers or as the underlying type. This is similar to how <code class="code " id="inline-classes.md-9bcdadec"  >Int</code> can be <a href="#basic-types.md-numbers-representation-on-the-jvm" id="inline-classes.md-9bac1b98"   >represented</a> either as a primitive <code class="code " id="inline-classes.md-575006f5"  >int</code> or as the wrapper <code class="code " id="inline-classes.md-5c0773c3"  >Integer</code>.</p><p id="inline-classes.md-7bfda5e7" >The Kotlin compiler will prefer using underlying types instead of wrappers to produce the most performant and optimized code. However, sometimes it is necessary to keep wrappers around. As a rule of thumb, inline classes are boxed whenever they are used as another type.</p><div class="code-block" data-lang="kotlin" id="inline-classes.md-a3078395"         >interface I\n\n@JvmInline\nvalue class Foo(val i: Int) : I\n\nfun asInline(f: Foo) {}\nfun &lt;T&gt; asGeneric(x: T) {}\nfun asInterface(i: I) {}\nfun asNullable(i: Foo?) {}\n\nfun &lt;T&gt; id(x: T): T = x\n\nfun main() {\n    val f = Foo(42) \n    \n    asInline(f)    // unboxed: used as Foo itself\n    asGeneric(f)   // boxed: used as generic type T\n    asInterface(f) // boxed: used as type I\n    asNullable(f)  // boxed: used as Foo?, which is different from Foo\n    \n    // below, \'f\' first is boxed (while being passed to \'id\') and then unboxed (when returned from \'id\') \n    // In the end, \'c\' contains unboxed representation (just \'42\'), as \'f\' \n    val c = id(f)  \n}\n</div><p id="inline-classes.md-486e69fa" >Because inline classes may be represented both as the underlying value and as a wrapper, <a href="#equality.md-referential-equality" id="inline-classes.md-f8b3c37c"   >referential equality</a> is pointless for them and is therefore prohibited.</p><section class="chapter"  ><h3 id="inline-classes.md-mangling" data-toc="inline-classes#inline-classes.md-mangling"  >Mangling</h3><p id="inline-classes.md-8ae01216" >Since inline classes are compiled to their underlying type, it may lead to various obscure errors, for example unexpected platform signature clashes:</p><div class="code-block" data-lang="kotlin" id="inline-classes.md-acd4a0d1"         >@JvmInline\nvalue class UInt(val x: Int)\n\n// Represented as \'public final void compute(int x)\' on the JVM\nfun compute(x: Int) { }\n\n// Also represented as \'public final void compute(int x)\' on the JVM!\nfun compute(x: UInt) { }\n</div><p id="inline-classes.md-ceef7179" >To mitigate such issues, functions using inline classes are <em id="inline-classes.md-e59dd367" class=""  >mangled</em> by adding some stable hashcode to the function name. Therefore, <code class="code " id="inline-classes.md-94e6c2bf"  >fun compute(x: UInt)</code> will be represented as <code class="code " id="inline-classes.md-128f4f1d"  >public final void compute-&lt;hashcode&gt;(int x)</code>, which solves the clash problem.</p><aside data-type="note" class="prompt" data-title="" id="inline-classes.md-1cd37350" ><p id="inline-classes.md-aff74349" >The mangling scheme has been changed in Kotlin 1.4.30. Use the <code class="code " id="inline-classes.md-6ca92302"  >-Xuse-14-inline-classes-mangling-scheme</code> compiler flag to force the compiler to use the old 1.4.0 mangling scheme and preserve binary compatibility.</p></aside></section><section class="chapter"  ><h3 id="inline-classes.md-calling-from-java-code" data-toc="inline-classes#inline-classes.md-calling-from-java-code"  >Calling from Java code</h3><p id="inline-classes.md-c7a5ae7" >You can call functions that accept inline classes from Java code. To do so, you should manually disable mangling: add the <code class="code " id="inline-classes.md-a5df56a"  >@JvmName</code> annotation before the function declaration:</p><div class="code-block" data-lang="kotlin" id="inline-classes.md-4bf40ba0"         >@JvmInline\nvalue class UInt(val x: Int)\n\nfun compute(x: Int) { }\n\n@JvmName(&quot;computeUInt&quot;)\nfun compute(x: UInt) { }\n</div></section></section><section class="chapter"  ><h2 id="inline-classes.md-inline-classes-vs-type-aliases" data-toc="inline-classes#inline-classes.md-inline-classes-vs-type-aliases"  >Inline classes vs type aliases</h2><p id="inline-classes.md-e267d7da" >At first sight, inline classes seem very similar to <a href="#type-aliases.md" id="inline-classes.md-d880f823"   >type aliases</a>. Indeed, both seem to introduce a new type and both will be represented as the underlying type at runtime.</p><p id="inline-classes.md-ad64db22" >However, the crucial difference is that type aliases are <em id="inline-classes.md-86692287" class=""  >assignment-compatible</em> with their underlying type (and with other type aliases with the same underlying type), while inline classes are not.</p><p id="inline-classes.md-fe1fffbd" >In other words, inline classes introduce a truly <em id="inline-classes.md-9e9506e1" class=""  >new</em> type, contrary to type aliases which only introduce an alternative name (alias) for an existing type:</p><div class="code-block" data-lang="kotlin" id="inline-classes.md-44399916"         >typealias NameTypeAlias = String\n\n@JvmInline\nvalue class NameInlineClass(val s: String)\n\nfun acceptString(s: String) {}\nfun acceptNameTypeAlias(n: NameTypeAlias) {}\nfun acceptNameInlineClass(p: NameInlineClass) {}\n\nfun main() {\n    val nameAlias: NameTypeAlias = &quot;&quot;\n    val nameInlineClass: NameInlineClass = NameInlineClass(&quot;&quot;)\n    val string: String = &quot;&quot;\n\n    acceptString(nameAlias) // OK: pass alias instead of underlying type\n    acceptString(nameInlineClass) // Not OK: can\'t pass inline class instead of underlying type\n\n    // And vice versa:\n    acceptNameTypeAlias(string) // OK: pass underlying type instead of alias\n    acceptNameInlineClass(string) // Not OK: can\'t pass underlying type instead of inline class\n}\n</div></section><section class="chapter"  ><h2 id="inline-classes.md-enabling-inline-classes" data-toc="inline-classes#inline-classes.md-enabling-inline-classes"  >Enabling inline classes</h2><p id="inline-classes.md-249358c3" >When using inline classes, a warning will be reported, indicating that this feature has not been released as stable. To remove the warning you have to opt in to the usage of this feature by passing the compiler argument <code class="code " id="inline-classes.md-5a3edbb3"  >-Xinline-classes</code>.</p><section class="chapter"  ><h3 id="inline-classes.md-gradle" data-toc="inline-classes#inline-classes.md-gradle"  >Gradle</h3><div class="tabs" id="inline-classes.md-5fccf74f" ><div class="tabs__content" data-gtm="tab" id="inline-classes.md-bb5bba28"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="inline-classes.md-355c39fb"   data-title="Groovy"      >kotlin {\n    sourceSets.all {\n        languageSettings.enableLanguageFeature(\'InlineClasses\')\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="inline-classes.md-4f0b17b0"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="inline-classes.md-991e52ef"   data-title="Kotlin"      >kotlin {\n    sourceSets.all {\n        languageSettings.enableLanguageFeature(&quot;InlineClasses&quot;)\n    }\n}\n</div></div></div><p id="inline-classes.md-8d4d9087" >See <a href="#gradle.md-compiler-options" id="inline-classes.md-6728e39c"   >compiler options in Gradle</a> for details. For <a href="#mpp-intro.md" id="inline-classes.md-21c61514"   >multiplatform project</a> settings, see <a href="#mpp-dsl-reference.md-language-settings" id="inline-classes.md-99214940"   >language settings</a>.</p></section><section class="chapter"  ><h3 id="inline-classes.md-maven" data-toc="inline-classes#inline-classes.md-maven"  >Maven</h3><div class="code-block" data-lang="markup" id="inline-classes.md-76c31bfa"         >&lt;configuration&gt;\n    &lt;args&gt;\n        &lt;arg&gt;-Xinline-classes&lt;/arg&gt; \n    &lt;/args&gt;\n&lt;/configuration&gt;\n</div><p id="inline-classes.md-23765dfb" >See <a href="#maven.md-specifying-compiler-options" id="inline-classes.md-9a75394f"   >compiler options in Maven</a> for details.</p></section></section><section class="chapter"  ><h2 id="inline-classes.md-further-discussion" data-toc="inline-classes#inline-classes.md-further-discussion"  >Further discussion</h2><p id="inline-classes.md-a0272ac0" >See this <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/inline-classes.md" id="inline-classes.md-ea678823"   data-external="true" rel="noopener noreferrer" >language proposal for inline classes</a> for other technical details and discussion.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="object-declarations.md"  >Object expressions and declarations</h1><p id="object-declarations.md-7897b071" >Sometimes you need to create an object of a slight modification of some class, without explicitly declaring a new subclass for it. Kotlin handles this case with <em id="object-declarations.md-a71185c0" class=""  >object expressions</em> and <em id="object-declarations.md-d88e1f5c" class=""  >object declarations</em>.</p><section class="chapter"  ><h2 id="object-declarations.md-object-expressions" data-toc="object-declarations#object-declarations.md-object-expressions"  >Object expressions</h2><p id="object-declarations.md-53039e05" ><em id="object-declarations.md-c116d3b4" class=""  >Object expressions</em> create objects of anonymous classes, that is, classes that aren\'t explicitly declared with the <code class="code " id="object-declarations.md-ba2f4299"  >class</code> declaration. Such classes are handy for one-time use. You can define them from scratch, inherit from existing classes, or implement interfaces. Instances of anonymous classes are also called <em id="object-declarations.md-e284dea6" class=""  >anonymous objects</em> because they are defined by an expression, not a name.</p><section class="chapter"  ><h3 id="object-declarations.md-creating-anonymous-objects-from-scratch" data-toc="object-declarations#object-declarations.md-creating-anonymous-objects-from-scratch"  >Creating anonymous objects from scratch</h3><p id="object-declarations.md-d1547a31" >Object expressions start with the <code class="code " id="object-declarations.md-23c5f947"  >object</code> keyword.</p><p id="object-declarations.md-ea1bcf6d" >If you need just an object with no nontrivial supertypes, write its members in curly braces after <code class="code " id="object-declarations.md-3ca6235b"  >object</code>:</p><div class="code-block" data-lang="kotlin" id="object-declarations.md-ad8d112"        data-runnable="true"  >\nfun main() {\n//sampleStart\n    val helloWorld = object {\n        val hello = &quot;Hello&quot;\n        val world = &quot;World&quot;\n        // object expressions extend Any, so `override` is required on `toString()`\n        override fun toString() = &quot;$hello $world&quot; \n    }\n//sampleEnd\n    print(helloWorld)\n}\n</div></section><section class="chapter"  ><h3 id="object-declarations.md-inheriting-anonymous-objects-from-supertypes" data-toc="object-declarations#object-declarations.md-inheriting-anonymous-objects-from-supertypes"  >Inheriting anonymous objects from supertypes</h3><p id="object-declarations.md-d601f669" >To create an object of an anonymous class that inherits from some type (or types), specify this type after <code class="code " id="object-declarations.md-5eb4eb63"  >object</code> and colon (<code class="code " id="object-declarations.md-e098070c"  >:</code> ). Then implement or override the members of this class as if you were <a href="#inheritance.md" id="object-declarations.md-e1abe10e"   >inheriting</a> from it:</p><div class="code-block" data-lang="kotlin" id="object-declarations.md-e4d352fa"         >window.addMouseListener(object : MouseAdapter() {\n    override fun mouseClicked(e: MouseEvent) { /*...*/ }\n\n    override fun mouseEntered(e: MouseEvent) { /*...*/ }\n})\n</div><p id="object-declarations.md-9be7e07" >If a supertype has a constructor, appropriate constructor parameters must be passed to it. Many supertypes can be specified as a comma-delimited list after the colon:</p><div class="code-block" data-lang="kotlin" id="object-declarations.md-be9a7a58"         >open class A(x: Int) {\n    public open val y: Int = x\n}\n\ninterface B { /*...*/ }\n\nval ab: A = object : A(1), B {\n    override val y = 15\n}\n</div></section><section class="chapter"  ><h3 id="object-declarations.md-using-anonymous-object-as-return-and-value-types" data-toc="object-declarations#object-declarations.md-using-anonymous-object-as-return-and-value-types"  >Using anonymous object as return and value types</h3><p id="object-declarations.md-6986a1e4" >When an anonymous object is used as a type of a local or <a href="#visibility-modifiers.md-packages" id="object-declarations.md-9678745"   >private</a> but not <a href="#inline-functions.md" id="object-declarations.md-1c030e7d"   >inline</a> declaration (function or property), all its members are accessible via this function or property:</p><div class="code-block" data-lang="kotlin" id="object-declarations.md-191044c8"         >class C {\n    private fun getObject() = object {\n        val x: String = &quot;x&quot;\n    }\n\n    fun printX() {\n        println(getObject().x)\n    }\n}\n</div><p id="object-declarations.md-3cd68da" >If this function or property is public or private inline, its actual type is:</p><ul class="list _ul" id="object-declarations.md-84f32e86"   ><li class="list__item" id="object-declarations.md-e7b5ddb4" ><p><code class="code " id="object-declarations.md-4bbee4eb"  >Any</code> if the anonymous object doesn\'t have a declared supertype</p></li><li class="list__item" id="object-declarations.md-7252b015" ><p>the declared supertype of the anonymous object if there is exactly one such type</p></li><li class="list__item" id="object-declarations.md-b6265dab" ><p>the explicitly declared type if there is more than one declared supertype</p></li></ul><p id="object-declarations.md-fd9fefdb" >In all these cases, members added in the anonymous object are not accessible. Overriden members are accessible if they are declared in the actual type of the function or property:</p><div class="code-block" data-lang="kotlin" id="object-declarations.md-fd69cec2"         >interface A {\n    fun funFromA() {}\n}\ninterface B\n\nclass C {\n    // The return type is Any. x is not accessible\n    fun getObject() = object {\n        val x: String = &quot;x&quot;\n    }\n\n    // The return type is A; x is not accessible \n    fun getObjectA() = object: A {\n        override fun funFromA() {}\n        val x: String = &quot;x&quot;\n    }\n\n    // The return type is B; funFromA() and x are not accessible\n    fun getObjectB(): B = object: A, B { // explicit return type is required\n        override fun funFromA() {}\n        val x: String = &quot;x&quot;\n    }\n}\n</div></section><section class="chapter"  ><h3 id="object-declarations.md-accessing-variables-from-anonymous-objects" data-toc="object-declarations#object-declarations.md-accessing-variables-from-anonymous-objects"  >Accessing variables from anonymous objects</h3><p id="object-declarations.md-acae7f2a" >The code in object expressions can access variables from the enclosing scope:</p><div class="code-block" data-lang="kotlin" id="object-declarations.md-37c9225e"         >fun countClicks(window: JComponent) {\n    var clickCount = 0\n    var enterCount = 0\n\n    window.addMouseListener(object : MouseAdapter() {\n        override fun mouseClicked(e: MouseEvent) {\n            clickCount++\n        }\n\n        override fun mouseEntered(e: MouseEvent) {\n            enterCount++\n        }\n    })\n    // ...\n}\n</div></section></section><section class="chapter"  ><h2 id="object-declarations.md-object-declarations" data-toc="object-declarations#object-declarations.md-object-declarations"  >Object declarations</h2><p id="object-declarations.md-eb4fcceb" ><a href="http://en.wikipedia.org/wiki/Singleton_pattern" id="object-declarations.md-5f8fb913"   data-external="true" rel="noopener noreferrer" >Singleton</a> can be useful in several cases, and Kotlin (after Scala) makes it easy to declare singletons:</p><div class="code-block" data-lang="kotlin" id="object-declarations.md-200741a6"         >object DataProviderManager {\n    fun registerDataProvider(provider: DataProvider) {\n        // ...\n    }\n\n    val allDataProviders: Collection&lt;DataProvider&gt;\n        get() = // ...\n}\n</div><p id="object-declarations.md-59fb90bd" >This is called an <em id="object-declarations.md-3c78ac5e" class=""  >object declaration</em>, and it always has a name following the <code class="code " id="object-declarations.md-404b48f4"  >object</code> keyword. Just like a variable declaration, an object declaration is not an expression, and cannot be used on the right hand side of an assignment statement.</p><p id="object-declarations.md-fe60c563" >Object declaration\'s initialization is thread-safe and done at first access.</p><p id="object-declarations.md-ff874209" >To refer to the object, use its name directly:</p><div class="code-block" data-lang="kotlin" id="object-declarations.md-8b41e07a"         >DataProviderManager.registerDataProvider(...)\n</div><p id="object-declarations.md-a3ef275" >Such objects can have supertypes:</p><div class="code-block" data-lang="kotlin" id="object-declarations.md-8a981ab4"         >object DefaultListener : MouseAdapter() {\n    override fun mouseClicked(e: MouseEvent) { ... }\n\n    override fun mouseEntered(e: MouseEvent) { ... }\n}\n</div><aside data-type="note" class="prompt" data-title="" id="object-declarations.md-d5eca13d" ><p id="object-declarations.md-acf26e43" >Object declarations can\'t be local (i.e. be nested directly inside a function), but they can be nested into other object declarations or non-inner classes.</p></aside><section class="chapter"  ><h3 id="object-declarations.md-companion-objects" data-toc="object-declarations#object-declarations.md-companion-objects"  >Companion objects</h3><p id="object-declarations.md-a5ca6165" >An object declaration inside a class can be marked with the <code class="code " id="object-declarations.md-702e84c7"  >companion</code> keyword:</p><div class="code-block" data-lang="kotlin" id="object-declarations.md-240252a7"         >class MyClass {\n    companion object Factory {\n        fun create(): MyClass = MyClass()\n    }\n}\n</div><p id="object-declarations.md-bdabf27e" >Members of the companion object can be called by using simply the class name as the qualifier:</p><div class="code-block" data-lang="kotlin" id="object-declarations.md-9db8d3f5"         >val instance = MyClass.create()\n</div><p id="object-declarations.md-7ff1ed20" >The name of the companion object can be omitted, in which case the name <code class="code " id="object-declarations.md-d32ef825"  >Companion</code> will be used:</p><div class="code-block" data-lang="kotlin" id="object-declarations.md-c2f9af77"         >class MyClass {\n    companion object { }\n}\n\nval x = MyClass.Companion\n</div><p id="object-declarations.md-d4fa0d78" >Class members can access the private fields of a corresponding companion object.</p><p id="object-declarations.md-6784a808" >The name of a class used by itself (not as a qualifier to another name) acts as a reference to the companion object of the class (whether named or not):</p><div class="code-block" data-lang="kotlin" id="object-declarations.md-ac16190"         >class MyClass1 {\n    companion object Named { }\n}\n\nval x = MyClass1\n\nclass MyClass2 {\n    companion object { }\n}\n\nval y = MyClass2\n</div><p id="object-declarations.md-d3643ce1" >Note that, even though the members of companion objects look like static members in other languages, at runtime those are still instance members of real objects, and can, for example, implement interfaces:</p><div class="code-block" data-lang="kotlin" id="object-declarations.md-8a75de3"         >interface Factory&lt;T&gt; {\n    fun create(): T\n}\n\nclass MyClass {\n    companion object : Factory&lt;MyClass&gt; {\n        override fun create(): MyClass = MyClass()\n    }\n}\n\nval f: Factory&lt;MyClass&gt; = MyClass\n</div><p id="object-declarations.md-940b5742" >However, on the JVM you can have members of companion objects generated as real static methods and fields, if you use the <code class="code " id="object-declarations.md-4a4e7e20"  >@JvmStatic</code> annotation. See the <a href="#java-to-kotlin-interop.md-static-fields" id="object-declarations.md-25910df7"   >Java interoperability</a> section for more details.</p></section><section class="chapter"  ><h3 id="object-declarations.md-semantic-difference-between-object-expressions-and-declarations" data-toc="object-declarations#object-declarations.md-semantic-difference-between-object-expressions-and-declarations"  >Semantic difference between object expressions and declarations</h3><p id="object-declarations.md-d42e9164" >There is one important semantic difference between object expressions and object declarations:</p><ul class="list _ul" id="object-declarations.md-b0ac2397"   ><li class="list__item" id="object-declarations.md-fca45835" ><p>Object expressions are executed (and initialized) <em id="object-declarations.md-75643608" class=""  >immediately</em>, where they are used.</p></li><li class="list__item" id="object-declarations.md-b8f13495" ><p>Object declarations are initialized <em id="object-declarations.md-f4957efa" class=""  >lazily</em>, when accessed for the first time.</p></li><li class="list__item" id="object-declarations.md-f44716af" ><p>A companion object is initialized when the corresponding class is loaded (resolved), matching the semantics of a Java static initializer.</p></li></ul></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="delegation.md"  >Delegation</h1><p id="delegation.md-12406dd1" >The <a href="https://en.wikipedia.org/wiki/Delegation_pattern" id="delegation.md-b5abf49a"   data-external="true" rel="noopener noreferrer" >Delegation pattern</a> has proven to be a good alternative to implementation inheritance, and Kotlin supports it natively requiring zero boilerplate code.</p><p id="delegation.md-e41ec3c3" >A class <code class="code " id="delegation.md-446b8ac7"  >Derived</code> can implement an interface <code class="code " id="delegation.md-9aadd4e"  >Base</code> by delegating all of its public members to a specified object:</p><div class="code-block" data-lang="kotlin" id="delegation.md-566d4920"        data-runnable="true"  >interface Base {\n    fun print()\n}\n\nclass BaseImpl(val x: Int) : Base {\n    override fun print() { print(x) }\n}\n\nclass Derived(b: Base) : Base by b\n\nfun main() {\n    val b = BaseImpl(10)\n    Derived(b).print()\n}\n</div><p id="delegation.md-7d197910" >The <code class="code " id="delegation.md-982a0726"  >by</code> -clause in the supertype list for <code class="code " id="delegation.md-377f58ff"  >Derived</code> indicates that <code class="code " id="delegation.md-a66cdc6e"  >b</code> will be stored internally in objects of <code class="code " id="delegation.md-908194d4"  >Derived</code> and the compiler will generate all the methods of <code class="code " id="delegation.md-c77d83cb"  >Base</code> that forward to <code class="code " id="delegation.md-415b9206"  >b</code>.</p><section class="chapter"  ><h2 id="delegation.md-overriding-a-member-of-an-interface-implemented-by-delegation" data-toc="delegation#delegation.md-overriding-a-member-of-an-interface-implemented-by-delegation"  >Overriding a member of an interface implemented by delegation</h2><p id="delegation.md-822e832e" ><a href="#inheritance.md-overriding-methods" id="delegation.md-65db7136"   >Overrides</a> work as you expect: the compiler will use your <code class="code " id="delegation.md-9f1767ef"  >override</code> implementations instead of those in the delegate object. If you want to add <code class="code " id="delegation.md-edac64ed"  >override fun printMessage() { print(&quot;abc&quot;) }</code> to <code class="code " id="delegation.md-59ac3f7d"  >Derived</code>, the program would print <em id="delegation.md-e68a757a" class=""  >abc</em> instead of <em id="delegation.md-e3f7f67c" class=""  >10</em> when <code class="code " id="delegation.md-2d33bd24"  >printMessage</code> is called:</p><div class="code-block" data-lang="kotlin" id="delegation.md-c8dd8e42"        data-runnable="true"  >interface Base {\n    fun printMessage()\n    fun printMessageLine()\n}\n\nclass BaseImpl(val x: Int) : Base {\n    override fun printMessage() { print(x) }\n    override fun printMessageLine() { println(x) }\n}\n\nclass Derived(b: Base) : Base by b {\n    override fun printMessage() { print(&quot;abc&quot;) }\n}\n\nfun main() {\n    val b = BaseImpl(10)\n    Derived(b).printMessage()\n    Derived(b).printMessageLine()\n}\n</div><p id="delegation.md-c7e66710" >Note, however, that members overridden in this way do not get called from the members of the delegate object, which can only access its own implementations of the interface members:</p><div class="code-block" data-lang="kotlin" id="delegation.md-4c77f77b"        data-runnable="true"  >interface Base {\n    val message: String\n    fun print()\n}\n\nclass BaseImpl(val x: Int) : Base {\n    override val message = &quot;BaseImpl: x = $x&quot;\n    override fun print() { println(message) }\n}\n\nclass Derived(b: Base) : Base by b {\n    // This property is not accessed from b\'s implementation of `print`\n    override val message = &quot;Message of Derived&quot;\n}\n\nfun main() {\n    val b = BaseImpl(10)\n    val derived = Derived(b)\n    derived.print()\n    println(derived.message)\n}\n</div><p id="delegation.md-c473164" >Learn more about <a href="#delegated-properties.md" id="delegation.md-b84f0f74"   >delegated properties</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="delegated-properties.md"  >Delegated properties</h1><p id="delegated-properties.md-93ef650f" >There are certain common kinds of properties, that, though you can implement them manually every time you need them, it would be helpful to implement them once and add to a library. Examples include:</p><ul class="list _ul" id="delegated-properties.md-799c6f67"   ><li class="list__item" id="delegated-properties.md-41e4f791" ><p><em id="delegated-properties.md-db9ccfea" class=""  >Lazy</em> properties: the value gets computed only upon first access.</p></li><li class="list__item" id="delegated-properties.md-9280ec2" ><p><em id="delegated-properties.md-825ea3d0" class=""  >Observable</em> properties: listeners get notified about changes to this property.</p></li><li class="list__item" id="delegated-properties.md-41dfc134" ><p>Storing properties in a <em id="delegated-properties.md-cb4c467" class=""  >map</em>, instead of a separate field for each property.</p></li></ul><p id="delegated-properties.md-ec2551d6" >To cover these (and other) cases, Kotlin supports <em id="delegated-properties.md-fff8aef7" class=""  >delegated properties</em>:</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-de95fc39"         >class Example {\n    var p: String by Delegate()\n}\n</div><p id="delegated-properties.md-a994caf2" >The syntax is: <code class="code " id="delegated-properties.md-f9124ba2"  >val/var &lt;property name&gt;: &lt;Type&gt; by &lt;expression&gt;</code>. The expression after <code class="code " id="delegated-properties.md-f7ddaa80"  >by</code> is a <em id="delegated-properties.md-a69b5ed3" class=""  >delegate</em>, because <code class="code " id="delegated-properties.md-494fff16"  >get()</code> (and <code class="code " id="delegated-properties.md-9a989b4a"  >set()</code>) corresponding to the property will be delegated to its <code class="code " id="delegated-properties.md-22199f05"  >getValue()</code> and <code class="code " id="delegated-properties.md-944b43bf"  >setValue()</code> methods. Property delegates don’t have to implement any interface, but they have to provide a <code class="code " id="delegated-properties.md-1a9e837e"  >getValue()</code> function (and <code class="code " id="delegated-properties.md-768414b6"  >setValue()</code> --- for <code class="code " id="delegated-properties.md-d0ed3b89"  >var</code> s).</p><p id="delegated-properties.md-8e8a31ad" >For example:</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-b75bbfdb"         >import kotlin.reflect.KProperty\n\nclass Delegate {\n    operator fun getValue(thisRef: Any?, property: KProperty&lt;*&gt;): String {\n        return &quot;$thisRef, thank you for delegating \'${property.name}\' to me!&quot;\n    }\n \n    operator fun setValue(thisRef: Any?, property: KProperty&lt;*&gt;, value: String) {\n        println(&quot;$value has been assigned to \'${property.name}\' in $thisRef.&quot;)\n    }\n}\n</div><p id="delegated-properties.md-c24244b0" >When you read from <code class="code " id="delegated-properties.md-11dc799f"  >p</code> that delegates to an instance of <code class="code " id="delegated-properties.md-3823b5c"  >Delegate</code>, the <code class="code " id="delegated-properties.md-233e3eb7"  >getValue()</code> function from <code class="code " id="delegated-properties.md-8db7d793"  >Delegate</code> is called, so that its first parameter is the object you read <code class="code " id="delegated-properties.md-ac11008"  >p</code> from and the second parameter holds a description of <code class="code " id="delegated-properties.md-3ad2770"  >p</code> itself (for example, you can take its name).</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-fe631ab9"         >val e = Example()\nprintln(e.p)\n</div><p id="delegated-properties.md-3f793741" >This prints:</p><code class="code " id="delegated-properties.md-f0beeb9f"  >Example@33a17727, thank you for delegating ‘p’ to me!</code><p id="delegated-properties.md-36b8c188" >Similarly, when you assign to <code class="code " id="delegated-properties.md-1cc7c28"  >p</code>, the <code class="code " id="delegated-properties.md-691a945a"  >setValue()</code> function is called. The first two parameters are the same, and the third holds the value being assigned:</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-ea8cd279"         >e.p = &quot;NEW&quot;\n</div><p id="delegated-properties.md-1436a890" >This prints</p><code class="code " id="delegated-properties.md-230beaad"  >NEW has been assigned to ‘p’ in Example@33a17727.</code><p id="delegated-properties.md-54daceaa" >The specification of the requirements to the delegated object can be found <a href="#delegated-properties.md-property-delegate-requirements" id="delegated-properties.md-d2019548"   >below</a>.</p><p id="delegated-properties.md-674a2e53" >Note that you can declare a delegated property inside a function or code block, it shouldn\'t necessarily be a member of a class. Below you can find <a href="#delegated-properties.md-local-delegated-properties" id="delegated-properties.md-5099775c"   >an example</a>.</p><section class="chapter"  ><h2 id="delegated-properties.md-standard-delegates" data-toc="delegated-properties#delegated-properties.md-standard-delegates"  >Standard delegates</h2><p id="delegated-properties.md-ba2ff0e2" >The Kotlin standard library provides factory methods for several useful kinds of delegates.</p><section class="chapter"  ><h3 id="delegated-properties.md-lazy-properties" data-toc="delegated-properties#delegated-properties.md-lazy-properties"  >Lazy properties</h3><p id="delegated-properties.md-e11fb61" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/lazy.html" id="delegated-properties.md-9ac1d23e"   data-external="true" rel="noopener noreferrer" ><code class="code " id="delegated-properties.md-a814e539"  >lazy()</code></a> is a function that takes a lambda and returns an instance of <code class="code " id="delegated-properties.md-38a9fbc"  >Lazy&lt;T&gt;</code> which can serve as a delegate for implementing a lazy property: the first call to <code class="code " id="delegated-properties.md-7b0eae61"  >get()</code> executes the lambda passed to <code class="code " id="delegated-properties.md-f2ab5490"  >lazy()</code> and remembers the result, subsequent calls to <code class="code " id="delegated-properties.md-61a07a35"  >get()</code> simply return the remembered result.</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-26f17dc4"        data-runnable="true"  >val lazyValue: String by lazy {\n    println(&quot;computed!&quot;)\n    &quot;Hello&quot;\n}\n\nfun main() {\n    println(lazyValue)\n    println(lazyValue)\n}\n</div><p id="delegated-properties.md-e037196f" >By default, the evaluation of lazy properties is <em id="delegated-properties.md-1e104f62" class=""  >synchronized</em>: the value is computed only in one thread, and all threads will see the same value. If the synchronization of initialization delegate is not required, so that multiple threads can execute it simultaneously, pass <code class="code " id="delegated-properties.md-dc6e9823"  >LazyThreadSafetyMode.PUBLICATION</code> as a parameter to the <code class="code " id="delegated-properties.md-819bea65"  >lazy()</code> function.</p><p id="delegated-properties.md-a63f683d" >And if you\'re sure that the initialization will always happen on the same thread as the one where you use the property, you can use <code class="code " id="delegated-properties.md-32b091e5"  >LazyThreadSafetyMode.NONE</code>: it doesn\'t incur any thread-safety guarantees and the related overhead.</p></section><section class="chapter"  ><h3 id="delegated-properties.md-observable-properties" data-toc="delegated-properties#delegated-properties.md-observable-properties"  >Observable properties</h3><p id="delegated-properties.md-ffd99d3d" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.properties/-delegates/observable.html" id="delegated-properties.md-ead738a9"   data-external="true" rel="noopener noreferrer" ><code class="code " id="delegated-properties.md-6571ef48"  >Delegates.observable()</code></a> takes two arguments: the initial value and a handler for modifications.</p><p id="delegated-properties.md-d0e71878" >The handler is called every time you assign to the property (<em id="delegated-properties.md-e1e27ec6" class=""  >after</em> the assignment has been performed). It has three parameters: a property being assigned to, the old value and the new one:</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-27226e5"        data-runnable="true"  >import kotlin.properties.Delegates\n\nclass User {\n    var name: String by Delegates.observable(&quot;&lt;no name&gt;&quot;) {\n        prop, old, new -&gt;\n        println(&quot;$old -&gt; $new&quot;)\n    }\n}\n\nfun main() {\n    val user = User()\n    user.name = &quot;first&quot;\n    user.name = &quot;second&quot;\n}\n</div><p id="delegated-properties.md-e78b6726" >If you want to intercept assignments and <em id="delegated-properties.md-552cc76e" class=""  >veto</em> them, use <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.properties/-delegates/vetoable.html" id="delegated-properties.md-7456667f"   data-external="true" rel="noopener noreferrer" ><code class="code " id="delegated-properties.md-7427211d"  >vetoable()</code></a> instead of <code class="code " id="delegated-properties.md-3fcf0922"  >observable()</code>. The handler passed to the <code class="code " id="delegated-properties.md-dac58e14"  >vetoable</code> is called <em id="delegated-properties.md-f5ac335f" class=""  >before</em> the assignment of a new property value.</p></section></section><section class="chapter"  ><h2 id="delegated-properties.md-delegating-to-another-property" data-toc="delegated-properties#delegated-properties.md-delegating-to-another-property"  >Delegating to another property</h2><p id="delegated-properties.md-6cf872ff" >A property can delegate its getter and setter to another property. Such delegation is available for both top-level and class properties (member and extension). The delegate property can be:</p><ul class="list _ul" id="delegated-properties.md-cc9c1c53"   ><li class="list__item" id="delegated-properties.md-c57dc5a6" ><p>a top-level property</p></li><li class="list__item" id="delegated-properties.md-9067610a" ><p>a member or an extension property of the same class</p></li><li class="list__item" id="delegated-properties.md-89ee35f1" ><p>a member or an extension property of another class</p></li></ul><p id="delegated-properties.md-60e502f5" >To delegate a property to another property, use the proper <code class="code " id="delegated-properties.md-6d6cd182"  >::</code> qualifier in the delegate name, for example, <code class="code " id="delegated-properties.md-ba2d900d"  >this::delegate</code> or <code class="code " id="delegated-properties.md-b021e846"  >MyClass::delegate</code>.</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-cbf3338a"         >var topLevelInt: Int = 0\nclass ClassWithDelegate(val anotherClassInt: Int)\n\nclass MyClass(var memberInt: Int, val anotherClassInstance: ClassWithDelegate) {\n    var delegatedToMember: Int by this::memberInt\n    var delegatedToTopLevel: Int by ::topLevelInt\n    \n    val delegatedToAnotherClass: Int by anotherClassInstance::anotherClassInt\n}\nvar MyClass.extDelegated: Int by ::topLevelInt\n</div><p id="delegated-properties.md-51a592bb" >This may be useful, for example, when you want to rename a property in a backward-compatible way: you introduce a new property, annotate the old one with the <code class="code " id="delegated-properties.md-481624f"  >@Deprecated</code> annotation, and delegate its implementation.</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-e60571dc"        data-runnable="true" data-min-compiler-version="1.4"  >class MyClass {\n   var newName: Int = 0\n   @Deprecated(&quot;Use \'newName\' instead&quot;, ReplaceWith(&quot;newName&quot;))\n   var oldName: Int by this::newName\n}\nfun main() {\n   val myClass = MyClass()\n   // Notification: \'oldName: Int\' is deprecated.\n   // Use \'newName\' instead\n   myClass.oldName = 42\n   println(myClass.newName) // 42\n}\n</div></section><section class="chapter"  ><h2 id="delegated-properties.md-storing-properties-in-a-map" data-toc="delegated-properties#delegated-properties.md-storing-properties-in-a-map"  >Storing properties in a map</h2><p id="delegated-properties.md-b3f2466" >One common use case is storing the values of properties in a map. This comes up often in applications like parsing JSON or doing other “dynamic” things. In this case, you can use the map instance itself as the delegate for a delegated property.</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-6c55bb36"         >class User(val map: Map&lt;String, Any?&gt;) {\n    val name: String by map\n    val age: Int     by map\n}\n</div><p id="delegated-properties.md-589db7e1" >In this example, the constructor takes a map:</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-1cdf6f56"         >val user = User(mapOf(\n    &quot;name&quot; to &quot;John Doe&quot;,\n    &quot;age&quot;  to 25\n))\n</div><p id="delegated-properties.md-d78b7394" >Delegated properties take values from this map (by the string keys – names of properties):</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-4fa685f7"        data-runnable="true"  >class User(val map: Map&lt;String, Any?&gt;) {\n    val name: String by map\n    val age: Int     by map\n}\n\nfun main() {\n    val user = User(mapOf(\n        &quot;name&quot; to &quot;John Doe&quot;,\n        &quot;age&quot;  to 25\n    ))\n//sampleStart\n    println(user.name) // Prints &quot;John Doe&quot;\n    println(user.age)  // Prints 25\n//sampleEnd\n}\n</div><p id="delegated-properties.md-bd629483" >This works also for <code class="code " id="delegated-properties.md-31b49d61"  >var</code> ’s properties if you use a <code class="code " id="delegated-properties.md-f745ce37"  >MutableMap</code> instead of read-only <code class="code " id="delegated-properties.md-bde0be2c"  >Map</code>:</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-3bf882db"         >class MutableUser(val map: MutableMap&lt;String, Any?&gt;) {\n    var name: String by map\n    var age: Int     by map\n}\n</div></section><section class="chapter"  ><h2 id="delegated-properties.md-local-delegated-properties" data-toc="delegated-properties#delegated-properties.md-local-delegated-properties"  >Local delegated properties</h2><p id="delegated-properties.md-28863c5a" >You can declare local variables as delegated properties. For example, you can make a local variable lazy:</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-7a853c14"         >fun example(computeFoo: () -&gt; Foo) {\n    val memoizedFoo by lazy(computeFoo)\n\n    if (someCondition &amp;&amp; memoizedFoo.isValid()) {\n        memoizedFoo.doSomething()\n    }\n}\n</div><p id="delegated-properties.md-ff775e07" >The <code class="code " id="delegated-properties.md-1e6e83fa"  >memoizedFoo</code> variable will be computed on the first access only. If <code class="code " id="delegated-properties.md-18b4642"  >someCondition</code> fails, the variable won\'t be computed at all.</p></section><section class="chapter"  ><h2 id="delegated-properties.md-property-delegate-requirements" data-toc="delegated-properties#delegated-properties.md-property-delegate-requirements"  >Property delegate requirements</h2><p id="delegated-properties.md-212ea09" >Here are requirements for delegating properties.</p><p id="delegated-properties.md-6883ddd1" >For a <em id="delegated-properties.md-8afd43c9" class=""  >read-only</em> property (<code class="code " id="delegated-properties.md-d8ff1193"  >val</code> ), a delegate should provide an operator function <code class="code " id="delegated-properties.md-43c5c547"  >getValue()</code> with the following parameters:</p><ul class="list _ul" id="delegated-properties.md-9a4d7fa"   ><li class="list__item" id="delegated-properties.md-39b2e3f2" ><p><code class="code " id="delegated-properties.md-904e1fc9"  >thisRef</code> must be the same or a supertype of the <em id="delegated-properties.md-949a0fa6" class=""  >property owner</em> (for extension properties, it should be the type being extended).</p></li><li class="list__item" id="delegated-properties.md-18c83257" ><p><code class="code " id="delegated-properties.md-966633b2"  >property</code> must be of type <code class="code " id="delegated-properties.md-60a92885"  >KProperty&lt;*&gt;</code> or its supertype.</p></li></ul><p id="delegated-properties.md-4017880a" ><code class="code " id="delegated-properties.md-48796bf9"  >getValue()</code> must return the same type as the property (or its subtype).</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-36cb1d18"         >class Resource\n\nclass Owner {\n    val valResource: Resource by ResourceDelegate()\n}\n\nclass ResourceDelegate {\n    operator fun getValue(thisRef: Owner, property: KProperty&lt;*&gt;): Resource {\n        return Resource()\n    }\n}\n</div><p id="delegated-properties.md-23059d1" >For a <em id="delegated-properties.md-a19ba19c" class=""  >mutable</em> property (<code class="code " id="delegated-properties.md-8f89306e"  >var</code> ), a delegate has to additionally provide an operator function <code class="code " id="delegated-properties.md-e55541b3"  >setValue()</code> with the following parameters:</p><ul class="list _ul" id="delegated-properties.md-fbfc5970"   ><li class="list__item" id="delegated-properties.md-6a6fd5e1" ><p><code class="code " id="delegated-properties.md-fb36209c"  >thisRef</code> must be the same or a supertype of the <em id="delegated-properties.md-d54e7a34" class=""  >property owner</em> (for extension properties, it should be the type being extended).</p></li><li class="list__item" id="delegated-properties.md-3bbeb0d9" ><p><code class="code " id="delegated-properties.md-7fbceeff"  >property</code> must be of type <code class="code " id="delegated-properties.md-ce0ce8f5"  >KProperty&lt;*&gt;</code> or its supertype.</p></li><li class="list__item" id="delegated-properties.md-ac8740e3" ><p><code class="code " id="delegated-properties.md-464bc3ef"  >value</code> must be of the same type as the property (or its supertype).</p></li></ul><div class="code-block" data-lang="kotlin" id="delegated-properties.md-65e3c981"         >class Resource\n\nclass Owner {\n    var varResource: Resource by ResourceDelegate()\n}\n\nclass ResourceDelegate(private var resource: Resource = Resource()) {\n    operator fun getValue(thisRef: Owner, property: KProperty&lt;*&gt;): Resource {\n        return resource\n    }\n    operator fun setValue(thisRef: Owner, property: KProperty&lt;*&gt;, value: Any?) {\n        if (value is Resource) {\n            resource = value\n        }\n    }\n}\n</div><p id="delegated-properties.md-4311572e" ><code class="code " id="delegated-properties.md-ac7f971e"  >getValue()</code> and/or <code class="code " id="delegated-properties.md-d14f21a0"  >setValue()</code> functions can be provided either as member functions of the delegate class or extension functions. The latter is handy when you need to delegate property to an object which doesn\'t originally provide these functions. Both of the functions need to be marked with the <code class="code " id="delegated-properties.md-bafaa622"  >operator</code> keyword.</p><p id="delegated-properties.md-239d8b8" >You can create delegates as anonymous objects without creating new classes using the interfaces <code class="code " id="delegated-properties.md-1482be42"  >ReadOnlyProperty</code> and <code class="code " id="delegated-properties.md-38e0a13e"  >ReadWriteProperty</code> from the Kotlin standard library. They provide the required methods: <code class="code " id="delegated-properties.md-2334f079"  >getValue()</code> is declared in <code class="code " id="delegated-properties.md-487cca94"  >ReadOnlyProperty</code>; <code class="code " id="delegated-properties.md-93a72f9a"  >ReadWriteProperty</code> extends it and adds <code class="code " id="delegated-properties.md-ad8b45f0"  >setValue()</code>. Thus, you can pass a <code class="code " id="delegated-properties.md-dc6f9ffe"  >ReadWriteProperty</code> whenever a <code class="code " id="delegated-properties.md-904cfa49"  >ReadOnlyProperty</code> is expected.</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-ab72f80e"         >fun resourceDelegate(): ReadWriteProperty&lt;Any?, Int&gt; =\n    object : ReadWriteProperty&lt;Any?, Int&gt; {\n        var curValue = 0 \n        override fun getValue(thisRef: Any?, property: KProperty&lt;*&gt;): Int = curValue\n        override fun setValue(thisRef: Any?, property: KProperty&lt;*&gt;, value: Int) {\n            curValue = value\n        }\n    }\n\nval readOnly: Int by resourceDelegate()  // ReadWriteProperty as val\nvar readWrite: Int by resourceDelegate()\n</div><section class="chapter"  ><h3 id="delegated-properties.md-translation-rules" data-toc="delegated-properties#delegated-properties.md-translation-rules"  >Translation rules</h3><p id="delegated-properties.md-62b3199f" >Under the hood for every delegated property the Kotlin compiler generates an auxiliary property and delegates to it. For example, for the property <code class="code " id="delegated-properties.md-1c89e6e4"  >prop</code> the hidden property <code class="code " id="delegated-properties.md-124fdd57"  >prop$delegate</code> is generated, and the code of the accessors simply delegates to this additional property:</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-aac5ac77"         >class C {\n    var prop: Type by MyDelegate()\n}\n\n// this code is generated by the compiler instead:\nclass C {\n    private val prop$delegate = MyDelegate()\n    var prop: Type\n        get() = prop$delegate.getValue(this, this::prop)\n        set(value: Type) = prop$delegate.setValue(this, this::prop, value)\n}\n</div><p id="delegated-properties.md-43f28778" >The Kotlin compiler provides all the necessary information about <code class="code " id="delegated-properties.md-4df2f7c0"  >prop</code> in the arguments: the first argument <code class="code " id="delegated-properties.md-b1035295"  >this</code> refers to an instance of the outer class <code class="code " id="delegated-properties.md-e04a69"  >C</code> and <code class="code " id="delegated-properties.md-b1ce7bb4"  >this::prop</code> is a reflection object of the <code class="code " id="delegated-properties.md-723b2032"  >KProperty</code> type describing <code class="code " id="delegated-properties.md-f59b213e"  >prop</code> itself.</p></section><section class="chapter"  ><h3 id="delegated-properties.md-providing-a-delegate" data-toc="delegated-properties#delegated-properties.md-providing-a-delegate"  >Providing a delegate</h3><p id="delegated-properties.md-7cb9f1b7" >By defining the <code class="code " id="delegated-properties.md-edbe586d"  >provideDelegate</code> operator you can extend the logic of creating the object to which the property implementation is delegated. If the object used on the right-hand side of <code class="code " id="delegated-properties.md-9bbeeb48"  >by</code> defines <code class="code " id="delegated-properties.md-5aa10109"  >provideDelegate</code> as a member or extension function, that function will be called to create the property delegate instance.</p><p id="delegated-properties.md-9365a5b6" >One of the possible use cases of <code class="code " id="delegated-properties.md-362525aa"  >provideDelegate</code> is to check the consistency of the property upon its initialization.</p><p id="delegated-properties.md-176797fe" >For example, if you want to check the property name before binding, you can write something like this:</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-a1906e5"         >class ResourceDelegate&lt;T&gt; : ReadOnlyProperty&lt;MyUI, T&gt; {\n    override fun getValue(thisRef: MyUI, property: KProperty&lt;*&gt;): T { ... }\n}\n    \nclass ResourceLoader&lt;T&gt;(id: ResourceID&lt;T&gt;) {\n    operator fun provideDelegate(\n            thisRef: MyUI,\n            prop: KProperty&lt;*&gt;\n    ): ReadOnlyProperty&lt;MyUI, T&gt; {\n        checkProperty(thisRef, prop.name)\n        // create delegate\n        return ResourceDelegate()\n    }\n\n    private fun checkProperty(thisRef: MyUI, name: String) { ... }\n}\n\nclass MyUI {\n    fun &lt;T&gt; bindResource(id: ResourceID&lt;T&gt;): ResourceLoader&lt;T&gt; { ... }\n\n    val image by bindResource(ResourceID.image_id)\n    val text by bindResource(ResourceID.text_id)\n}\n</div><p id="delegated-properties.md-582ba432" >The parameters of <code class="code " id="delegated-properties.md-c525a05"  >provideDelegate</code> are the same as for <code class="code " id="delegated-properties.md-1e73df18"  >getValue</code>:</p><ul class="list _ul" id="delegated-properties.md-292a5840"   ><li class="list__item" id="delegated-properties.md-7f1cd15a" ><p><code class="code " id="delegated-properties.md-dd34098d"  >thisRef</code> must be the same or a supertype of the <em id="delegated-properties.md-b2a6c232" class=""  >property owner</em> (for extension properties, it should be the type being extended);</p></li><li class="list__item" id="delegated-properties.md-e4894e84" ><p><code class="code " id="delegated-properties.md-37dc6efb"  >property</code> must be of type <code class="code " id="delegated-properties.md-5fc29eed"  >KProperty&lt;*&gt;</code> or its supertype.</p></li></ul><p id="delegated-properties.md-7fabb815" >The <code class="code " id="delegated-properties.md-1d61cee5"  >provideDelegate</code> method is called for each property during the creation of the <code class="code " id="delegated-properties.md-38f192f1"  >MyUI</code> instance, and it performs the necessary validation right away.</p><p id="delegated-properties.md-620c82cd" >Without this ability to intercept the binding between the property and its delegate, to achieve the same functionality you\'d have to pass the property name explicitly, which isn\'t very convenient:</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-a9a0ca4b"         >// Checking the property name without &quot;provideDelegate&quot; functionality\nclass MyUI {\n    val image by bindResource(ResourceID.image_id, &quot;image&quot;)\n    val text by bindResource(ResourceID.text_id, &quot;text&quot;)\n}\n\nfun &lt;T&gt; MyUI.bindResource(\n        id: ResourceID&lt;T&gt;,\n        propertyName: String\n): ReadOnlyProperty&lt;MyUI, T&gt; {\n    checkProperty(this, propertyName)\n    // create delegate\n}\n</div><p id="delegated-properties.md-d28da59" >In the generated code, the <code class="code " id="delegated-properties.md-31510d9"  >provideDelegate</code> method is called to initialize the auxiliary <code class="code " id="delegated-properties.md-fb4a5577"  >prop$delegate</code> property. Compare the generated code for the property declaration <code class="code " id="delegated-properties.md-a6ac77f5"  >val prop: Type by MyDelegate()</code> with the generated code <a href="#delegated-properties.md-translation-rules" id="delegated-properties.md-87a899e8"   >above</a> (when the <code class="code " id="delegated-properties.md-1a07cb0b"  >provideDelegate</code> method is not present):</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-84ca9ebe"         >class C {\n    var prop: Type by MyDelegate()\n}\n\n// this code is generated by the compiler \n// when the \'provideDelegate\' function is available:\nclass C {\n    // calling &quot;provideDelegate&quot; to create the additional &quot;delegate&quot; property\n    private val prop$delegate = MyDelegate().provideDelegate(this, this::prop)\n    var prop: Type\n        get() = prop$delegate.getValue(this, this::prop)\n        set(value: Type) = prop$delegate.setValue(this, this::prop, value)\n}\n</div><p id="delegated-properties.md-d98e71db" >Note that the <code class="code " id="delegated-properties.md-8e0a6b25"  >provideDelegate</code> method affects only the creation of the auxiliary property and doesn\'t affect the code generated for getter or setter.</p><p id="delegated-properties.md-a8c89ec7" >With the <code class="code " id="delegated-properties.md-cf0e181a"  >PropertyDelegateProvider</code> interface from the standard library, you can create delegate providers without creating new classes.</p><div class="code-block" data-lang="kotlin" id="delegated-properties.md-2a7783c4"         >val provider = PropertyDelegateProvider { thisRef: Any?, property -&gt;\n    ReadOnlyProperty&lt;Any?, Int&gt; {_, property -&gt; 42 }\n}\nval delegate: Int by provider\n</div></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="type-aliases.md"  >Type aliases</h1><p id="type-aliases.md-4e77d021" >Type aliases provide alternative names for existing types. If the type name is too long you can introduce a different shorter name and use the new one instead.</p><p id="type-aliases.md-e542cff1" >It\'s useful to shorten long generic types. For instance, it\'s often tempting to shrink collection types:</p><div class="code-block" data-lang="kotlin" id="type-aliases.md-dc392569"         >typealias NodeSet = Set&lt;Network.Node&gt;\n\ntypealias FileTable&lt;K&gt; = MutableMap&lt;K, MutableList&lt;File&gt;&gt;\n</div><p id="type-aliases.md-4ef888ef" >You can provide different aliases for function types:</p><div class="code-block" data-lang="kotlin" id="type-aliases.md-f81d4600"         >typealias MyHandler = (Int, String, Any) -&gt; Unit\n\ntypealias Predicate&lt;T&gt; = (T) -&gt; Boolean\n</div><p id="type-aliases.md-34a47a5e" >You can have new names for inner and nested classes:</p><div class="code-block" data-lang="kotlin" id="type-aliases.md-f0d76597"         >class A {\n    inner class Inner\n}\nclass B {\n    inner class Inner\n}\n\ntypealias AInner = A.Inner\ntypealias BInner = B.Inner\n</div><p id="type-aliases.md-d2d20ba5" >Type aliases do not introduce new types. They are equivalent to the corresponding underlying types. When you add <code class="code " id="type-aliases.md-e9f70d7c"  >typealias Predicate&lt;T&gt;</code> and use <code class="code " id="type-aliases.md-c1ca5cd8"  >Predicate&lt;Int&gt;</code> in your code, the Kotlin compiler always expands it to <code class="code " id="type-aliases.md-bd609243"  >(Int) -&gt; Boolean</code>. Thus you can pass a variable of your type whenever a general function type is required and vice versa:</p><div class="code-block" data-lang="kotlin" id="type-aliases.md-43ed926d"        data-runnable="true"  >typealias Predicate&lt;T&gt; = (T) -&gt; Boolean\n\nfun foo(p: Predicate&lt;Int&gt;) = p(42)\n\nfun main() {\n    val f: (Int) -&gt; Boolean = { it &gt; 0 }\n    println(foo(f)) // prints &quot;true&quot;\n\n    val p: Predicate&lt;Int&gt; = { it &gt; 0 }\n    println(listOf(1, -2).filter(p)) // prints &quot;[1]&quot;\n}\n</div></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="functions.md"  >Functions</h1><p id="functions.md-7149d75b" >Functions in Kotlin are declared using the <code class="code " id="functions.md-8693d684"  >fun</code> keyword:</p><div class="code-block" data-lang="kotlin" id="functions.md-71e67482"         >fun double(x: Int): Int {\n    return 2 * x\n}\n</div><section class="chapter"  ><h2 id="functions.md-function-usage" data-toc="functions#functions.md-function-usage"  >Function usage</h2><p id="functions.md-288ff9a3" >Calling functions uses the traditional approach:</p><div class="code-block" data-lang="kotlin" id="functions.md-2d357734"         >val result = double(2)\n</div><p id="functions.md-6a1665d3" >Calling member functions uses the dot notation:</p><div class="code-block" data-lang="kotlin" id="functions.md-73102a84"         >Stream().read() // create instance of class Stream and call read()\n</div><section class="chapter"  ><h3 id="functions.md-parameters" data-toc="functions#functions.md-parameters"  >Parameters</h3><p id="functions.md-4fd6b0fb" >Function parameters are defined using Pascal notation - <em id="functions.md-30c05fad" class=""  >name</em>: <em id="functions.md-a25bf517" class=""  >type</em>. Parameters are separated using commas. Each parameter must be explicitly typed:</p><div class="code-block" data-lang="kotlin" id="functions.md-73663f07"         >fun powerOf(number: Int, exponent: Int): Int { /*...*/ }\n</div><p id="functions.md-281a6cac" >You can use a <a href="#coding-conventions.md-trailing-commas" id="functions.md-a1ed9672"   >trailing comma</a> when you declare function parameters:</p><div class="code-block" data-lang="kotlin" id="functions.md-3ca7cdf0"         >fun powerOf(\n    number: Int,\n    exponent: Int, // trailing comma\n) { /*...*/ }\n</div></section><section class="chapter"  ><h3 id="functions.md-default-arguments" data-toc="functions#functions.md-default-arguments"  >Default arguments</h3><p id="functions.md-330b3a61" >Function parameters can have default values, which are used when you skip the corresponding argument. This reduces a number of overloads compared to other languages:</p><div class="code-block" data-lang="kotlin" id="functions.md-895ee317"         >fun read(\n    b: ByteArray, \n    off: Int = 0,\n    len: Int = b.size,\n) { /*...*/ }\n</div><p id="functions.md-a480f6d0" >A default value is defined using the <code class="code " id="functions.md-90191077"  >=</code> after the type.</p><p id="functions.md-a610fb09" >Overriding methods always use the same default parameter values as the base method. When overriding a method with default parameter values, the default parameter values must be omitted from the signature:</p><div class="code-block" data-lang="kotlin" id="functions.md-931fd239"         >open class A {\n    open fun foo(i: Int = 10) { /*...*/ }\n}\n\nclass B : A() {\n    override fun foo(i: Int) { /*...*/ }  // No default value is allowed.\n}\n</div><p id="functions.md-3df6c0be" >If a default parameter precedes a parameter with no default value, the default value can only be used by calling the function with <a href="#functions.md-named-arguments" id="functions.md-101e1b37"   >named arguments</a>:</p><div class="code-block" data-lang="kotlin" id="functions.md-7fd0db01"         >fun foo(\n    bar: Int = 0, \n    baz: Int,\n) { /*...*/ }\n\nfoo(baz = 1) // The default value bar = 0 is used\n</div><p id="functions.md-6b30faf5" >If the last argument after default parameters is a <a href="#lambdas.md-lambda-expression-syntax" id="functions.md-13c880e1"   >lambda</a>, you can pass it either as a named argument or <a href="#lambdas.md-passing-trailing-lambdas" id="functions.md-ccf366db"   >outside the parentheses</a>:</p><div class="code-block" data-lang="kotlin" id="functions.md-f23f80af"         >fun foo(\n    bar: Int = 0,\n    baz: Int = 1,\n    qux: () -&gt; Unit,\n) { /*...*/ }\n\nfoo(1) { println(&quot;hello&quot;) }     // Uses the default value baz = 1\nfoo(qux = { println(&quot;hello&quot;) }) // Uses both default values bar = 0 and baz = 1 \nfoo { println(&quot;hello&quot;) }        // Uses both default values bar = 0 and baz = 1\n</div></section><section class="chapter"  ><h3 id="functions.md-named-arguments" data-toc="functions#functions.md-named-arguments"  >Named arguments</h3><p id="functions.md-a54c0317" >When calling a function, you can name one or more of its arguments. This may be helpful when a function has a large number of arguments, and it\'s difficult to associate a value with an argument, especially if it\'s a boolean or <code class="code " id="functions.md-cf95e441"  >null</code> value.</p><p id="functions.md-92961d1" >When you use named arguments in a function call, you can freely change the order they are listed in, and if you want to use their default values you can just leave them out altogether.</p><p id="functions.md-4e70bbac" >Consider the following function <code class="code " id="functions.md-7f0bf396"  >reformat()</code> that has 4 arguments with default values.</p><div class="code-block" data-lang="kotlin" id="functions.md-fb5a9340"         >fun reformat(\n    str: String,\n    normalizeCase: Boolean = true,\n    upperCaseFirstLetter: Boolean = true,\n    divideByCamelHumps: Boolean = false,\n    wordSeparator: Char = \' \',\n) { /*...*/ }\n</div><p id="functions.md-d039e22a" >When calling this function, you don’t have to name all its arguments:</p><div class="code-block" data-lang="kotlin" id="functions.md-1cbbdada"         >reformat(\n    &quot;String!&quot;,\n    false,\n    upperCaseFirstLetter = false,\n    divideByCamelHumps = true,\n    \'_\'\n)\n</div><p id="functions.md-7f2bd719" >You can skip all arguments with default values:</p><div class="code-block" data-lang="kotlin" id="functions.md-ab3247c7"         >reformat(&quot;This is a long String!&quot;)\n</div><p id="functions.md-fae851c3" >You can skip some arguments with default values. However, after the first skipped argument, you must name all subsequent arguments:</p><div class="code-block" data-lang="kotlin" id="functions.md-4a86cfbb"         >reformat(&quot;This is a short String!&quot;, upperCaseFirstLetter = false, wordSeparator = \'_\')\n</div><p id="functions.md-e0323cbc" >You can pass a <a href="#functions.md-variable-number-of-arguments-varargs" id="functions.md-848b92c1"   >variable number of arguments (<code class="code " id="functions.md-7c35f8a9"  >vararg</code>)</a> with names using the <code class="code " id="functions.md-b54fb301"  >spread</code> operator:</p><div class="code-block" data-lang="kotlin" id="functions.md-e10ba313"         >fun foo(vararg strings: String) { /*...*/ }\n\nfoo(strings = *arrayOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;))\n</div><aside data-type="note" class="prompt" data-title="" id="functions.md-ebbd04cc" ><p id="functions.md-6a6609b9" >On the JVM: You can\'t use the named argument syntax when calling Java functions because Java bytecode does not always preserve names of function parameters.</p></aside></section><section class="chapter"  ><h3 id="functions.md-unit-returning-functions" data-toc="functions#functions.md-unit-returning-functions"  >Unit-returning functions</h3><p id="functions.md-83f17e60" >If a function does not return any useful value, its return type is <code class="code " id="functions.md-adb20f6e"  >Unit</code>. <code class="code " id="functions.md-ff7ae2d"  >Unit</code> is a type with only one value - <code class="code " id="functions.md-81235587"  >Unit</code>. This value does not have to be returned explicitly:</p><div class="code-block" data-lang="kotlin" id="functions.md-119a0fab"         >fun printHello(name: String?): Unit {\n    if (name != null)\n        println(&quot;Hello $name&quot;)\n    else\n        println(&quot;Hi there!&quot;)\n    // `return Unit` or `return` is optional\n}\n</div><p id="functions.md-9f20555e" >The <code class="code " id="functions.md-1dcd2a05"  >Unit</code> return type declaration is also optional. The above code is equivalent to:</p><div class="code-block" data-lang="kotlin" id="functions.md-7e93c781"         >fun printHello(name: String?) { ... }\n</div></section><section class="chapter"  ><h3 id="functions.md-single-expression-functions" data-toc="functions#functions.md-single-expression-functions"  >Single-expression functions</h3><p id="functions.md-a6b4c91e" >When a function returns a single expression, the curly braces can be omitted and the body is specified after a <code class="code " id="functions.md-68b3d278"  >=</code> symbol:</p><div class="code-block" data-lang="kotlin" id="functions.md-712ea8c2"         >fun double(x: Int): Int = x * 2\n</div><p id="functions.md-cb441153" >Explicitly declaring the return type is <a href="#functions.md-explicit-return-types" id="functions.md-6c6e62f8"   >optional</a> when this can be inferred by the compiler:</p><div class="code-block" data-lang="kotlin" id="functions.md-c207a258"         >fun double(x: Int) = x * 2\n</div></section><section class="chapter"  ><h3 id="functions.md-explicit-return-types" data-toc="functions#functions.md-explicit-return-types"  >Explicit return types</h3><p id="functions.md-442dadd7" >Functions with block body must always specify return types explicitly, unless it\'s intended for them to return <code class="code " id="functions.md-698288c"  >Unit</code>, <a href="#functions.md-unit-returning-functions" id="functions.md-54abc24d"   >in which case it is optional</a>.</p><p id="functions.md-d3808ee8" >Kotlin does not infer return types for functions with block bodies because such functions may have complex control flow in the body, and the return type will be non-obvious to the reader (and sometimes even for the compiler).</p></section><section class="chapter"  ><h3 id="functions.md-variable-number-of-arguments-varargs" data-toc="functions#functions.md-variable-number-of-arguments-varargs"  >Variable number of arguments (Varargs)</h3><p id="functions.md-171e74af" >You can mark a parameter of a function (usually the last one) with the <code class="code " id="functions.md-ed137a80"  >vararg</code> modifier:</p><div class="code-block" data-lang="kotlin" id="functions.md-9396e919"         >fun &lt;T&gt; asList(vararg ts: T): List&lt;T&gt; {\n    val result = ArrayList&lt;T&gt;()\n    for (t in ts) // ts is an Array\n        result.add(t)\n    return result\n}\n</div><p id="functions.md-417140e2" >In this case, you can pass a variable number of arguments to the function:</p><div class="code-block" data-lang="kotlin" id="functions.md-244730de"         >val list = asList(1, 2, 3)\n</div><p id="functions.md-5595fa70" >Inside a function a <code class="code " id="functions.md-8e825398"  >vararg</code> -parameter of type <code class="code " id="functions.md-a327492"  >T</code> is visible as an array of <code class="code " id="functions.md-4c469d99"  >T</code>, i.e. the <code class="code " id="functions.md-d4d96de8"  >ts</code> variable in the example above has type <code class="code " id="functions.md-2f1456d4"  >Array&lt;out T&gt;</code>.</p><p id="functions.md-6f0336e0" >Only one parameter can be marked as <code class="code " id="functions.md-6c0f9068"  >vararg</code>. If a <code class="code " id="functions.md-b54c9b68"  >vararg</code> parameter is not the last one in the list, values for the following parameters can be passed using the named argument syntax, or, if the parameter has a function type, by passing a lambda outside parentheses.</p><p id="functions.md-8eb1547e" >When you call a <code class="code " id="functions.md-fa416e8d"  >vararg</code> -function, you can pass arguments one-by-one, for example <code class="code " id="functions.md-50fe8319"  >asList(1, 2, 3)</code>. If you already have an array and want to pass its contents to the function, use the <em id="functions.md-3203f46" class=""  >spread</em> operator (prefix the array with <code class="code " id="functions.md-3634d801"  >*</code> ):</p><div class="code-block" data-lang="kotlin" id="functions.md-17cb35bd"         >val a = arrayOf(1, 2, 3)\nval list = asList(-1, 0, *a, 4)\n</div></section><section class="chapter"  ><h3 id="functions.md-infix-notation" data-toc="functions#functions.md-infix-notation"  >Infix notation</h3><p id="functions.md-e6948f8" >Functions marked with the <code class="code " id="functions.md-3b33ead2"  >infix</code> keyword can also be called using the infix notation (omitting the dot and the parentheses for the call). Infix functions must meet the following requirements:</p><ul class="list _ul" id="functions.md-5676f0d4"   ><li class="list__item" id="functions.md-125dc7b5" ><p>They must be member functions or <a href="#extensions.md" id="functions.md-5158633c"   >extension functions</a>.</p></li><li class="list__item" id="functions.md-e5cf31ba" ><p>They must have a single parameter.</p></li><li class="list__item" id="functions.md-981c5e0f" ><p>The parameter must not <a href="#functions.md-variable-number-of-arguments-varargs" id="functions.md-1acf06e4"   >accept variable number of arguments</a> and must have no <a href="#functions.md-default-arguments" id="functions.md-261ca8c3"   >default value</a>.</p></li></ul><div class="code-block" data-lang="kotlin" id="functions.md-ddf5c9b0"         >infix fun Int.shl(x: Int): Int { ... }\n\n// calling the function using the infix notation\n1 shl 2\n\n// is the same as\n1.shl(2)\n</div><aside data-type="note" class="prompt" data-title="" id="functions.md-72055f41" ><p id="functions.md-4adf27" >Infix function calls have lower precedence than the arithmetic operators, type casts, and the <code class="code " id="functions.md-1f6b3501"  >rangeTo</code> operator. The following expressions are equivalent:</p><ul class="list _ul" id="functions.md-f1eb8049"   ><li class="list__item" id="functions.md-76983e7f" ><p><code class="code " id="functions.md-b38e0848"  >1 shl 2 + 3</code> is equivalent to <code class="code " id="functions.md-cad4d236"  >1 shl (2 + 3)</code></p></li><li class="list__item" id="functions.md-c3672b28" ><p><code class="code " id="functions.md-2661e7c0"  >0 until n * 2</code> is equivalent to <code class="code " id="functions.md-96abecc7"  >0 until (n * 2)</code></p></li><li class="list__item" id="functions.md-2a0d52df" ><p><code class="code " id="functions.md-9441f65b"  >xs union ys as Set&lt;*&gt;</code> is equivalent to <code class="code " id="functions.md-93582168"  >xs union (ys as Set&lt;*&gt;)</code></p></li></ul><p id="functions.md-ff85b8dd" >On the other hand, infix function call\'s precedence is higher than that of the boolean operators <code class="code " id="functions.md-86ca8e6e"  >&amp;&amp;</code> and <code class="code " id="functions.md-e162b504"  >||</code>, <code class="code " id="functions.md-50ae3a22"  >is</code>- and <code class="code " id="functions.md-80f4d5bd"  >in</code> -checks, and some other operators. These expressions are equivalent as well:</p><ul class="list _ul" id="functions.md-5f49f53c"   ><li class="list__item" id="functions.md-177b183b" ><p><code class="code " id="functions.md-b8e63ff2"  >a &amp;&amp; b xor c</code> is equivalent to <code class="code " id="functions.md-560b551c"  >a &amp;&amp; (b xor c)</code></p></li><li class="list__item" id="functions.md-8706efbe" ><p><code class="code " id="functions.md-3626f033"  >a xor b in c</code> is equivalent to <code class="code " id="functions.md-bbd61489"  >(a xor b) in c</code></p></li></ul></aside><p id="functions.md-3ff110f3" >Note that infix functions always require both the receiver and the parameter to be specified. When you\'re calling a method on the current receiver using the infix notation, use <code class="code " id="functions.md-891b7cf7"  >this</code> explicitly. This is required to ensure unambiguous parsing.</p><div class="code-block" data-lang="kotlin" id="functions.md-2c5bdb9b"         >class MyStringCollection {\n    infix fun add(s: String) { /*...*/ }\n    \n    fun build() {\n        this add &quot;abc&quot;   // Correct\n        add(&quot;abc&quot;)       // Correct\n        //add &quot;abc&quot;        // Incorrect: the receiver must be specified\n    }\n}\n</div></section></section><section class="chapter"  ><h2 id="functions.md-function-scope" data-toc="functions#functions.md-function-scope"  >Function scope</h2><p id="functions.md-4ee22277" >Kotlin functions can be declared at the top level in a file, meaning you do not need to create a class to hold a function, which you are required to do in languages such as Java, C# or Scala. In addition to top level functions, Kotlin functions can also be declared locally, as member functions and extension functions.</p><section class="chapter"  ><h3 id="functions.md-local-functions" data-toc="functions#functions.md-local-functions"  >Local functions</h3><p id="functions.md-f9f8f2db" >Kotlin supports local functions, which are functions inside another function:</p><div class="code-block" data-lang="kotlin" id="functions.md-e20c8383"         >fun dfs(graph: Graph) {\n    fun dfs(current: Vertex, visited: MutableSet&lt;Vertex&gt;) {\n        if (!visited.add(current)) return\n        for (v in current.neighbors)\n            dfs(v, visited)\n    }\n\n    dfs(graph.vertices[0], HashSet())\n}\n</div><p id="functions.md-3367c42d" >A local function can access local variables of outer functions (the closure). In the case above, the <code class="code " id="functions.md-f1a0946"  >visited</code> can be a local variable:</p><div class="code-block" data-lang="kotlin" id="functions.md-96db39ef"         >fun dfs(graph: Graph) {\n    val visited = HashSet&lt;Vertex&gt;()\n    fun dfs(current: Vertex) {\n        if (!visited.add(current)) return\n        for (v in current.neighbors)\n            dfs(v)\n    }\n\n    dfs(graph.vertices[0])\n}\n</div></section><section class="chapter"  ><h3 id="functions.md-member-functions" data-toc="functions#functions.md-member-functions"  >Member functions</h3><p id="functions.md-5929b99" >A member function is a function that is defined inside a class or object:</p><div class="code-block" data-lang="kotlin" id="functions.md-3a348ddf"         >class Sample {\n    fun foo() { print(&quot;Foo&quot;) }\n}\n</div><p id="functions.md-d734f00d" >Member functions are called with dot notation:</p><div class="code-block" data-lang="kotlin" id="functions.md-9af790f5"         >Sample().foo() // creates instance of class Sample and calls foo\n</div><p id="functions.md-8d891113" >For more information on classes and overriding members see <a href="#classes.md" id="functions.md-96cfd7f5"   >Classes</a> and <a href="#classes.md-inheritance" id="functions.md-f1520f4"   >Inheritance</a>.</p></section></section><section class="chapter"  ><h2 id="functions.md-generic-functions" data-toc="functions#functions.md-generic-functions"  >Generic functions</h2><p id="functions.md-19849a0c" >Functions can have generic parameters which are specified using angle brackets before the function name:</p><div class="code-block" data-lang="kotlin" id="functions.md-1055c45f"         >fun &lt;T&gt; singletonList(item: T): List&lt;T&gt; { /*...*/ }\n</div><p id="functions.md-b3ee78d1" >For more information on generic functions, see <a href="#generics.md" id="functions.md-339b89d"   >Generics</a>.</p></section><section class="chapter"  ><h2 id="functions.md-tail-recursive-functions" data-toc="functions#functions.md-tail-recursive-functions"  >Tail recursive functions</h2><p id="functions.md-b00aa4e1" >Kotlin supports a style of functional programming known as <a href="https://en.wikipedia.org/wiki/Tail_call" id="functions.md-6afafda2"   data-external="true" rel="noopener noreferrer" >tail recursion</a>. For some algorithms that would normally use loops you can use a recursive function instead without a risk of stack overflow. When a function is marked with the <code class="code " id="functions.md-8fe1f939"  >tailrec</code> modifier and meets the required form, the compiler optimizes out the recursion, leaving behind a fast and efficient loop based version instead:</p><div class="code-block" data-lang="kotlin" id="functions.md-fb6ec343"         >val eps = 1E-10 // &quot;good enough&quot;, could be 10^-15\n\ntailrec fun findFixPoint(x: Double = 1.0): Double =\n    if (Math.abs(x - Math.cos(x)) &lt; eps) x else findFixPoint(Math.cos(x))\n</div><p id="functions.md-4c416bfb" >This code calculates the <code class="code " id="functions.md-23c2978b"  >fixpoint</code> of cosine, which is a mathematical constant. It simply calls <code class="code " id="functions.md-5acc9da5"  >Math.cos</code> repeatedly starting at <code class="code " id="functions.md-b6d7bdd0"  >1.0</code> until the result doesn\'t change anymore, yielding a result of <code class="code " id="functions.md-e32d0805"  >0.7390851332151611</code> for the specified <code class="code " id="functions.md-e7992c96"  >eps</code> precision. The resulting code is equivalent to this more traditional style:</p><div class="code-block" data-lang="kotlin" id="functions.md-aed6bd4"         >val eps = 1E-10 // &quot;good enough&quot;, could be 10^-15\n\nprivate fun findFixPoint(): Double {\n    var x = 1.0\n    while (true) {\n        val y = Math.cos(x)\n        if (Math.abs(x - y) &lt; eps) return x\n        x = Math.cos(x)\n    }\n}\n</div><p id="functions.md-fdc2cd2" >To be eligible for the <code class="code " id="functions.md-681e80b4"  >tailrec</code> modifier, a function must call itself as the last operation it performs. You cannot use tail recursion when there is more code after the recursive call, and you cannot use it within <code class="code " id="functions.md-a7f05e44"  >try</code>/ <code class="code " id="functions.md-e54f783e"  >catch</code>/ <code class="code " id="functions.md-26ff0eef"  >finally</code> blocks. Currently, tail recursion is supported by Kotlin for JVM and Kotlin/Native.</p><p id="functions.md-a82b3b1" ><b id="functions.md-995f4766" class=""  >See also</b>:</p><ul class="list _ul" id="functions.md-f15cd905"   ><li class="list__item" id="functions.md-58081945" ><a href="#inline-functions.md" id="functions.md-683e2480"   >Inline functions</a></li><li class="list__item" id="functions.md-28f66ab" ><a href="#extensions.md" id="functions.md-546a4aa7"   >Extension functions</a></li><li class="list__item" id="functions.md-e730a87c" ><a href="#lambdas.md" id="functions.md-13b9369a"   >Higher-order functions and lambdas</a></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="lambdas.md"  >High-order functions and lambdas</h1><p id="lambdas.md-9f800d9d" >Kotlin functions are <a href="https://en.wikipedia.org/wiki/First-class_function" id="lambdas.md-7ceff6ab"   data-external="true" rel="noopener noreferrer" >first-class</a>, which means that they can be stored in variables and data structures, passed as arguments to and returned from other <a href="#lambdas.md-higher-order-functions" id="lambdas.md-9aad9f0b"   >higher-order functions</a>. You can operate with functions in any way that is possible for other non-function values.</p><p id="lambdas.md-a2f91dfd" >To facilitate this, Kotlin, as a statically typed programming language, uses a family of <a href="#lambdas.md-function-types" id="lambdas.md-44ab33e2"   >function types</a> to represent functions and provides a set of specialized language constructs, such as <a href="#lambdas.md-lambda-expressions-and-anonymous-functions" id="lambdas.md-f6871ef2"   >lambda expressions</a>.</p><section class="chapter"  ><h2 id="lambdas.md-higher-order-functions" data-toc="lambdas#lambdas.md-higher-order-functions"  >Higher-order functions</h2><p id="lambdas.md-bcb5d38b" >A higher-order function is a function that takes functions as parameters, or returns a function.</p><p id="lambdas.md-1e3b9c5b" >A good example is the <a href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)" id="lambdas.md-8b4e3644"   data-external="true" rel="noopener noreferrer" >functional programming idiom <code class="code " id="lambdas.md-40f36efd"  >fold</code></a> for collections, which takes an initial accumulator value and a combining function and builds its return value by consecutively combining current accumulator value with each collection element, replacing the accumulator:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-4360aa46"         >fun &lt;T, R&gt; Collection&lt;T&gt;.fold(\n    initial: R, \n    combine: (acc: R, nextElement: T) -&gt; R\n): R {\n    var accumulator: R = initial\n    for (element: T in this) {\n        accumulator = combine(accumulator, element)\n    }\n    return accumulator\n}\n</div><p id="lambdas.md-6c04b942" >In the code above, the parameter <code class="code " id="lambdas.md-8742a33c"  >combine</code> has a <a href="#lambdas.md-function-types" id="lambdas.md-ac774f55"   >function type</a> <code class="code " id="lambdas.md-3ebacdbf"  >(R, T) -&gt; R</code>, so it accepts a function that takes two arguments of types <code class="code " id="lambdas.md-8f54bf88"  >R</code> and <code class="code " id="lambdas.md-2542cef"  >T</code> and returns a value of type <code class="code " id="lambdas.md-e483aa53"  >R</code>. It is <a href="#lambdas.md-invoking-a-function-type-instance" id="lambdas.md-43c5aa62"   >invoked</a> inside the <code class="code " id="lambdas.md-c4cec30b"  >for</code> -loop, and the return value is then assigned to <code class="code " id="lambdas.md-88fe2244"  >accumulator</code>.</p><p id="lambdas.md-76c5b7d0" >To call <code class="code " id="lambdas.md-a9243cdb"  >fold</code>, you need to pass it an <a href="#lambdas.md-instantiating-a-function-type" id="lambdas.md-5ff44696"   >instance of the function type</a> as an argument, and lambda expressions (<a href="#lambdas.md-lambda-expressions-and-anonymous-functions" id="lambdas.md-dc35c36b"   >described in more detail below</a>) are widely used for this purpose at higher-order function call sites:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-f396f69c"        data-runnable="true"  >fun main() {\n    //sampleStart\n    val items = listOf(1, 2, 3, 4, 5)\n    \n    // Lambdas are code blocks enclosed in curly braces.\n    items.fold(0, { \n        // When a lambda has parameters, they go first, followed by \'-&gt;\'\n        acc: Int, i: Int -&gt; \n        print(&quot;acc = $acc, i = $i, &quot;) \n        val result = acc + i\n        println(&quot;result = $result&quot;)\n        // The last expression in a lambda is considered the return value:\n        result\n    })\n    \n    // Parameter types in a lambda are optional if they can be inferred:\n    val joinedToString = items.fold(&quot;Elements:&quot;, { acc, i -&gt; acc + &quot; &quot; + i })\n    \n    // Function references can also be used for higher-order function calls:\n    val product = items.fold(1, Int::times)\n    //sampleEnd\n    println(&quot;joinedToString = $joinedToString&quot;)\n    println(&quot;product = $product&quot;)\n}\n</div><p id="lambdas.md-7eec3cdd" >The following sections explain in more detail the concepts mentioned so far.</p></section><section class="chapter"  ><h2 id="lambdas.md-function-types" data-toc="lambdas#lambdas.md-function-types"  >Function types</h2><p id="lambdas.md-607de283" >Kotlin uses a family of function types like <code class="code " id="lambdas.md-17f74b50"  >(Int) -&gt; String</code> for declarations that deal with functions: <code class="code " id="lambdas.md-8187baff"  >val onClick: () -&gt; Unit = ...</code>.</p><p id="lambdas.md-b90e4302" >These types have a special notation that corresponds to the signatures of the functions - their parameters and return values:</p><ul class="list _ul" id="lambdas.md-a1188f9d"   ><li class="list__item" id="lambdas.md-de8aea74" ><p id="lambdas.md-c44fde83" >All function types have a parenthesized parameter types list and a return type: <code class="code " id="lambdas.md-beb9ba57"  >(A, B) -&gt; C</code> denotes a type that represents functions taking two arguments of types <code class="code " id="lambdas.md-7f6c7c25"  >A</code> and <code class="code " id="lambdas.md-3a054d9c"  >B</code> and returning a value of type <code class="code " id="lambdas.md-f106656c"  >C</code>. The parameter types list may be empty, as in <code class="code " id="lambdas.md-97cf73c6"  >() -&gt; A</code>. The <a href="#functions.md-unit-returning-functions" id="lambdas.md-439935ea"   ><code class="code " id="lambdas.md-7d970246"  >Unit</code> return type</a> cannot be omitted.</p></li><li class="list__item" id="lambdas.md-4db76bfe" ><p id="lambdas.md-22d2166" >Function types can optionally have an additional <em id="lambdas.md-326c0143" class=""  >receiver</em> type, which is specified before a dot in the notation: the type <code class="code " id="lambdas.md-19defd96"  >A.(B) -&gt; C</code> represents functions that can be called on a receiver object of <code class="code " id="lambdas.md-9f924c97"  >A</code> with a parameter of <code class="code " id="lambdas.md-11a844ce"  >B</code> and return a value of <code class="code " id="lambdas.md-a2720de5"  >C</code>. <a href="#lambdas.md-function-literals-with-receiver" id="lambdas.md-1edad133"   >Function literals with receiver</a> are often used along with these types.</p></li><li class="list__item" id="lambdas.md-2452241a" ><p id="lambdas.md-7b799d1a" ><span id="913ca7e7">${linkTitle}</span> belong to function types of a special kind, which have a <em id="lambdas.md-8db6a19" class=""  >suspend</em> modifier in the notation, such as <code class="code " id="lambdas.md-7d558a3a"  >suspend () -&gt; Unit</code> or <code class="code " id="lambdas.md-d593b3d9"  >suspend A.(B) -&gt; C</code>.</p></li></ul><p id="lambdas.md-81c866ef" >The function type notation can optionally include names for the function parameters: <code class="code " id="lambdas.md-e6ce73a4"  >(x: Int, y: Int) -&gt; Point</code>. These names can be used for documenting the meaning of the parameters.</p><p id="lambdas.md-8afc425b" >To specify that a function type is <a href="#null-safety.md-nullable-types-and-non-null-types" id="lambdas.md-880668ae"   >nullable</a>, use parentheses: <code class="code " id="lambdas.md-614309f8"  >((Int, Int) -&gt; Int)?</code>.</p><p id="lambdas.md-49565339" >Function types can be combined using parentheses: <code class="code " id="lambdas.md-8fa0c54b"  >(Int) -&gt; ((Int) -&gt; Unit)</code>.</p><aside data-type="note" class="prompt" data-title="" id="lambdas.md-23e2b2d" ><p id="lambdas.md-c04603e6" >The arrow notation is right-associative, <code class="code " id="lambdas.md-2f0c6613"  >(Int) -&gt; (Int) -&gt; Unit</code> is equivalent to the previous example, but not to <code class="code " id="lambdas.md-835e1e6a"  >((Int) -&gt; (Int)) -&gt; Unit</code>.</p></aside><p id="lambdas.md-6a48a9fc" >You can also give a function type an alternative name by using <a href="#type-aliases.md" id="lambdas.md-c9fa77cb"   >a type alias</a>:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-54e2afe4"         >typealias ClickHandler = (Button, ClickEvent) -&gt; Unit\n</div><section class="chapter"  ><h3 id="lambdas.md-instantiating-a-function-type" data-toc="lambdas#lambdas.md-instantiating-a-function-type"  >Instantiating a function type</h3><p id="lambdas.md-3d192e40" >There are several ways to obtain an instance of a function type:</p><ul class="list _ul" id="lambdas.md-a76dbabd"   ><li class="list__item" id="lambdas.md-7a8b7bd" ><p id="lambdas.md-fd21168a" >Using a code block within a function literal, in one of the forms:</p><ul class="list _ul" id="lambdas.md-2186c1ba"   ><li class="list__item" id="lambdas.md-9d2c9a43" ><p>a <a href="#lambdas.md-lambda-expressions-and-anonymous-functions" id="lambdas.md-62298c7c"   >lambda expression</a>: <code class="code " id="lambdas.md-1a5f437d"  >{ a, b -&gt; a + b }</code>,</p></li><li class="list__item" id="lambdas.md-731a83b3" ><p>an <a href="#lambdas.md-anonymous-functions" id="lambdas.md-d2649878"   >anonymous function</a>: <code class="code " id="lambdas.md-d66fbb11"  >fun(s: String): Int { return s.toIntOrNull() ?: 0 }</code></p></li></ul><p id="lambdas.md-77a25498" ><a href="#lambdas.md-function-literals-with-receiver" id="lambdas.md-4b799703"   >Function literals with receiver</a> can be used as values of function types with receiver.</p></li><li class="list__item" id="lambdas.md-d22cebbc" ><p id="lambdas.md-e6f07f8c" >Using a callable reference to an existing declaration:</p><ul class="list _ul" id="lambdas.md-f45ed03c"   ><li class="list__item" id="lambdas.md-286bb15f" ><p>a top-level, local, member, or extension <a href="#reflection.md-function-references" id="lambdas.md-3aac008f"   >function</a>: <code class="code " id="lambdas.md-da6401a3"  >::isOdd</code>, <code class="code " id="lambdas.md-86dbbced"  >String::toInt</code>,</p></li><li class="list__item" id="lambdas.md-5077c301" ><p>a top-level, member, or extension <a href="#reflection.md-property-references" id="lambdas.md-15983266"   >property</a>: <code class="code " id="lambdas.md-4c127ef9"  >List&lt;Int&gt;::size</code>,</p></li><li class="list__item" id="lambdas.md-efb6b847" ><p>a <a href="#reflection.md-constructor-references" id="lambdas.md-afb0f488"   >constructor</a>: <code class="code " id="lambdas.md-cdcabdc2"  >::Regex</code></p></li></ul><p id="lambdas.md-435355a2" >These include <a href="#reflection.md-bound-function-and-property-references" id="lambdas.md-81e0932"   >bound callable references</a> that point to a member of a particular instance: <code class="code " id="lambdas.md-32bb1f1c"  >foo::toString</code>.</p></li><li class="list__item" id="lambdas.md-ed473f7d" ><p id="lambdas.md-1293b2e6" >Using instances of a custom class that implements a function type as an interface:</p></li></ul><div class="code-block" data-lang="kotlin" id="lambdas.md-cd5d2154"         >class IntTransformer: (Int) -&gt; Int {\n    override operator fun invoke(x: Int): Int = TODO()\n}\n\nval intFunction: (Int) -&gt; Int = IntTransformer()\n</div><p id="lambdas.md-dcdc22d5" >The compiler can infer the function types for variables if there is enough information:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-726b5566"         >val a = { i: Int -&gt; i + 1 } // The inferred type is (Int) -&gt; Int\n</div><p id="lambdas.md-c752ea45" ><em id="lambdas.md-752b41c7" class=""  >Non-literal</em> values of function types with and without receiver are interchangeable, so that the receiver can stand in for the first parameter, and vice versa. For instance, a value of type <code class="code " id="lambdas.md-361bf5d"  >(A, B) -&gt; C</code> can be passed or assigned where a <code class="code " id="lambdas.md-8a1f3410"  >A.(B) -&gt; C</code> is expected and the other way around:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-edeb8bb"        data-runnable="true"  >fun main() {\n    //sampleStart\n    val repeatFun: String.(Int) -&gt; String = { times -&gt; this.repeat(times) }\n    val twoParameters: (String, Int) -&gt; String = repeatFun // OK\n    \n    fun runTransformation(f: (String, Int) -&gt; String): String {\n        return f(&quot;hello&quot;, 3)\n    }\n    val result = runTransformation(repeatFun) // OK\n    //sampleEnd\n    println(&quot;result = $result&quot;)\n}\n</div><aside data-type="note" class="prompt" data-title="" id="lambdas.md-f0f3370b" ><p id="lambdas.md-82f9d2d3" >A function type with no receiver is inferred by default, even if a variable is initialized with a reference to an extension function. To alter that, specify the variable type explicitly.</p></aside></section><section class="chapter"  ><h3 id="lambdas.md-invoking-a-function-type-instance" data-toc="lambdas#lambdas.md-invoking-a-function-type-instance"  >Invoking a function type instance</h3><p id="lambdas.md-411945e7" >A value of a function type can be invoked by using its <a href="#operator-overloading.md-invoke-operator" id="lambdas.md-6f79f845"   ><code class="code " id="lambdas.md-fe46603e"  >invoke(...)</code> operator</a>: <code class="code " id="lambdas.md-d51522f2"  >f.invoke(x)</code> or just <code class="code " id="lambdas.md-4d42783"  >f(x)</code>.</p><p id="lambdas.md-a73c87a3" >If the value has a receiver type, the receiver object should be passed as the first argument. Another way to invoke a value of a function type with receiver is to prepend it with the receiver object, as if the value were an <a href="#extensions.md" id="lambdas.md-571c758a"   >extension function</a>: <code class="code " id="lambdas.md-724b1472"  >1.foo(2)</code>,</p><p id="lambdas.md-e6f79540" >Example:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-1a36a5e"        data-runnable="true"  >fun main() {\n    //sampleStart\n    val stringPlus: (String, String) -&gt; String = String::plus\n    val intPlus: Int.(Int) -&gt; Int = Int::plus\n    \n    println(stringPlus.invoke(&quot;&lt;-&quot;, &quot;-&gt;&quot;))\n    println(stringPlus(&quot;Hello, &quot;, &quot;world!&quot;)) \n    \n    println(intPlus.invoke(1, 1))\n    println(intPlus(1, 2))\n    println(2.intPlus(3)) // extension-like call\n    //sampleEnd\n}\n</div></section><section class="chapter"  ><h3 id="lambdas.md-inline-functions" data-toc="lambdas#lambdas.md-inline-functions"  >Inline functions</h3><p id="lambdas.md-98a4c1de" >Sometimes it is beneficial to use <a href="#inline-functions.md" id="lambdas.md-5d36f4ae"   >inline functions</a>, which provide flexible control flow, for higher-order functions.</p></section></section><section class="chapter"  ><h2 id="lambdas.md-lambda-expressions-and-anonymous-functions" data-toc="lambdas#lambdas.md-lambda-expressions-and-anonymous-functions"  >Lambda expressions and anonymous functions</h2><p id="lambdas.md-edbe861f" >Lambda expressions and anonymous functions are <em id="lambdas.md-a8ea1e0d" class=""  >function literals</em>. Function literals are functions that are not declared but passed immediately as an expression. Consider the following example:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-692c83dc"         >max(strings, { a, b -&gt; a.length &lt; b.length })\n</div><p id="lambdas.md-a8e3d100" >Function <code class="code " id="lambdas.md-deb4650c"  >max</code> is a higher-order function, it takes a function value as the second argument. This second argument is an expression that is itself a function, called a function literal, which is equivalent to the following named function:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-92aaed9f"         >fun compare(a: String, b: String): Boolean = a.length &lt; b.length\n</div><section class="chapter"  ><h3 id="lambdas.md-lambda-expression-syntax" data-toc="lambdas#lambdas.md-lambda-expression-syntax"  >Lambda expression syntax</h3><p id="lambdas.md-d284c3df" >The full syntactic form of lambda expressions is as follows:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-5dadb986"         >val sum: (Int, Int) -&gt; Int = { x: Int, y: Int -&gt; x + y }\n</div><ul class="list _ul" id="lambdas.md-da4aaf84"   ><li class="list__item" id="lambdas.md-5b0899d2" ><p>A lambda expression is always surrounded by curly braces.</p></li><li class="list__item" id="lambdas.md-5dab6a21" ><p>Parameter declarations in the full syntactic form go inside curly braces and have optional type annotations.</p></li><li class="list__item" id="lambdas.md-d8b55b86" ><p>The body goes after an <code class="code " id="lambdas.md-596e4f3b"  >-&gt;</code> sign.</p></li><li class="list__item" id="lambdas.md-ab45e929" ><p>If the inferred return type of the lambda is not <code class="code " id="lambdas.md-89f5e91"  >Unit</code>, the last (or possibly single) expression inside the lambda body is treated as the return value.</p></li></ul><p id="lambdas.md-2c952e47" >If you leave all the optional annotations out, what\'s left looks like this:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-69ef9559"         >val sum = { x: Int, y: Int -&gt; x + y }\n</div></section><section class="chapter"  ><h3 id="lambdas.md-passing-trailing-lambdas" data-toc="lambdas#lambdas.md-passing-trailing-lambdas"  >Passing trailing lambdas</h3><p id="lambdas.md-f7c71ae5" >In Kotlin, there is a convention: if the last parameter of a function is a function, then a lambda expression passed as the corresponding argument can be placed outside the parentheses:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-faa21536"         >val product = items.fold(1) { acc, e -&gt; acc * e }\n</div><p id="lambdas.md-8be8db15" >Such syntax is also known as <em id="lambdas.md-5022bc6b" class=""  >trailing lambda</em>.</p><p id="lambdas.md-42af1373" >If the lambda is the only argument to that call, the parentheses can be omitted entirely:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-fe689218"         >run { println(&quot;...&quot;) }\n</div></section><section class="chapter"  ><h3 id="lambdas.md-it-implicit-name-of-a-single-parameter" data-toc="lambdas#lambdas.md-it-implicit-name-of-a-single-parameter"  >it: implicit name of a single parameter</h3><p id="lambdas.md-e515e1d1" >It\'s very common that a lambda expression has only one parameter.</p><p id="lambdas.md-fa1a5a78" >If the compiler can figure the signature out itself, it is allowed not to declare the only parameter and omit <code class="code " id="lambdas.md-93a39962"  >-&gt;</code>. The parameter will be implicitly declared under the name <code class="code " id="lambdas.md-7bc61a7f"  >it</code>:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-ff1dc419"         >ints.filter { it &gt; 0 } // this literal is of type \'(it: Int) -&gt; Boolean\'\n</div></section><section class="chapter"  ><h3 id="lambdas.md-returning-a-value-from-a-lambda-expression" data-toc="lambdas#lambdas.md-returning-a-value-from-a-lambda-expression"  >Returning a value from a lambda expression</h3><p id="lambdas.md-15161752" >You can explicitly return a value from the lambda using the <a href="#returns.md-return-at-labels" id="lambdas.md-7d306f24"   >qualified return</a> syntax. Otherwise, the value of the last expression is implicitly returned.</p><p id="lambdas.md-4b44560" >Therefore, the two following snippets are equivalent:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-87c53ea5"         >ints.filter {\n    val shouldFilter = it &gt; 0 \n    shouldFilter\n}\n\nints.filter {\n    val shouldFilter = it &gt; 0 \n    return@filter shouldFilter\n}\n</div><p id="lambdas.md-f1f5f42f" >This convention, along with <a href="#lambdas.md-passing-trailing-lambdas" id="lambdas.md-489bc514"   >passing a lambda expression outside parentheses</a>, allows for <a href="https://docs.microsoft.com/en-us/previous-versions/dotnet/articles/bb308959(v=msdn.10)" id="lambdas.md-70e71f14"   data-external="true" rel="noopener noreferrer" >LINQ-style</a> code:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-ebab34f3"         >strings.filter { it.length == 5 }.sortedBy { it }.map { it.toUpperCase() }\n</div></section><section class="chapter"  ><h3 id="lambdas.md-underscore-for-unused-variables" data-toc="lambdas#lambdas.md-underscore-for-unused-variables"  >Underscore for unused variables</h3><p id="lambdas.md-91e1f877" >If the lambda parameter is unused, you can place an underscore instead of its name:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-2a0147bb"         >map.forEach { _, value -&gt; println(&quot;$value!&quot;) }\n</div></section><section class="chapter"  ><h3 id="lambdas.md-destructuring-in-lambdas" data-toc="lambdas#lambdas.md-destructuring-in-lambdas"  >Destructuring in lambdas</h3><p id="lambdas.md-7ad3544b" >Destructuring in lambdas is described as a part of <a href="#destructuring-declarations.md-destructuring-in-lambdas" id="lambdas.md-ed703326"   >destructuring declarations</a>.</p></section><section class="chapter"  ><h3 id="lambdas.md-anonymous-functions" data-toc="lambdas#lambdas.md-anonymous-functions"  >Anonymous functions</h3><p id="lambdas.md-f6ff57de" >One thing missing from the lambda expression syntax presented above is the ability to specify the return type of the function. In most cases, this is unnecessary because the return type can be inferred automatically. However, if you do need to specify it explicitly, you can use an alternative syntax: an <em id="lambdas.md-d0194e4e" class=""  >anonymous function</em>.</p><div class="code-block" data-lang="kotlin" id="lambdas.md-44f7983f"         >fun(x: Int, y: Int): Int = x + y\n</div><p id="lambdas.md-a7b9aa2b" >An anonymous function looks very much like a regular function declaration, except that its name is omitted. Its body can be either an expression (as shown above) or a block:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-910965b5"         >fun(x: Int, y: Int): Int {\n    return x + y\n}\n</div><p id="lambdas.md-3565ed7b" >The parameters and the return type are specified in the same way as for regular functions, except that the parameter types can be omitted if they can be inferred from context:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-2d99ba2c"         >ints.filter(fun(item) = item &gt; 0)\n</div><p id="lambdas.md-f4ea4a1d" >The return type inference for anonymous functions works just like for normal functions: the return type is inferred automatically for anonymous functions with an expression body and has to be specified explicitly (or is assumed to be <code class="code " id="lambdas.md-1435e97d"  >Unit</code>) for anonymous functions with a block body.</p><aside data-type="note" class="prompt" data-title="" id="lambdas.md-93d7f264" ><p id="lambdas.md-a53b1dfe" >Anonymous function parameters are always passed inside the parentheses. The shorthand syntax allowing to leave the function outside the parentheses works only for lambda expressions.</p></aside><p id="lambdas.md-c11b1eea" >One other difference between lambda expressions and anonymous functions is the behavior of <a href="#inline-functions.md-non-local-returns" id="lambdas.md-cf31a8bd"   >non-local returns</a>. A <code class="code " id="lambdas.md-cc9a09eb"  >return</code> statement without a label always returns from the function declared with the <code class="code " id="lambdas.md-100f8c4c"  >fun</code> keyword. This means that a <code class="code " id="lambdas.md-15775336"  >return</code> inside a lambda expression will return from the enclosing function, whereas a <code class="code " id="lambdas.md-547b3a15"  >return</code> inside an anonymous function will return from the anonymous function itself.</p></section><section class="chapter"  ><h3 id="lambdas.md-closures" data-toc="lambdas#lambdas.md-closures"  >Closures</h3><p id="lambdas.md-bd09830" >A lambda expression or anonymous function (as well as a <a href="#functions.md-local-functions" id="lambdas.md-fffc8d85"   >local function</a> and an <a href="#object-declarations.md-object-expressions" id="lambdas.md-61d6bd7f"   >object expression</a>) can access its <em id="lambdas.md-12f7592" class=""  >closure</em>, which includes the variables declared in the outer scope. The variables captured in the closure can be modified in the lambda:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-40010457"         >var sum = 0\nints.filter { it &gt; 0 }.forEach {\n    sum += it\n}\nprint(sum)\n</div></section><section class="chapter"  ><h3 id="lambdas.md-function-literals-with-receiver" data-toc="lambdas#lambdas.md-function-literals-with-receiver"  >Function literals with receiver</h3><p id="lambdas.md-aa56c468" ><a href="#lambdas.md-function-types" id="lambdas.md-b8919b81"   >Function types</a> with receiver, such as <code class="code " id="lambdas.md-28bc1642"  >A.(B) -&gt; C</code>, can be instantiated with a special form of function literals – function literals with receiver.</p><p id="lambdas.md-7ebb7c8e" >As said above, Kotlin provides the ability <a href="#lambdas.md-invoking-a-function-type-instance" id="lambdas.md-75f5fbb9"   >to call an instance</a> of a function type with receiver providing the <em id="lambdas.md-b4a1fdb" class=""  >receiver object</em>.</p><p id="lambdas.md-d722610b" >Inside the body of the function literal, the receiver object passed to a call becomes an <em id="lambdas.md-404e764d" class=""  >implicit</em> <code class="code " id="lambdas.md-e28fdb31"  >this</code>, so that you can access the members of that receiver object without any additional qualifiers, or access the receiver object using a <a href="#this-expressions.md" id="lambdas.md-940eb5f1"   ><code class="code " id="lambdas.md-abbce4b8"  >this</code> expression</a>.</p><p id="lambdas.md-9afb6edf" >This behavior is similar to <a href="#extensions.md" id="lambdas.md-14d477b5"   >extension functions</a>, which also allow you to access the members of the receiver object inside the body of the function.</p><p id="lambdas.md-2f022014" >Here is an example of a function literal with receiver along with its type, where <code class="code " id="lambdas.md-1218a754"  >plus</code> is called on the receiver object:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-3798b022"         >val sum: Int.(Int) -&gt; Int = { other -&gt; plus(other) } \n</div><p id="lambdas.md-b2c732cb" >The anonymous function syntax allows you to specify the receiver type of a function literal directly. This can be useful if you need to declare a variable of a function type with receiver, and to use it later.</p><div class="code-block" data-lang="kotlin" id="lambdas.md-9be4d3e0"         >val sum = fun Int.(other: Int): Int = this + other\n</div><p id="lambdas.md-76a354bb" >Lambda expressions can be used as function literals with receiver when the receiver type can be inferred from context. One of the most important examples of their usage is <a href="#type-safe-builders.md" id="lambdas.md-86041d8a"   >type-safe builders</a>:</p><div class="code-block" data-lang="kotlin" id="lambdas.md-d4819d49"         >class HTML {\n    fun body() { ... }\n}\n\nfun html(init: HTML.() -&gt; Unit): HTML {\n    val html = HTML()  // create the receiver object\n    html.init()        // pass the receiver object to the lambda\n    return html\n}\n\nhtml {       // lambda with receiver begins here\n    body()   // calling a method on the receiver object\n}\n</div></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="inline-functions.md"  >Inline functions</h1><p id="inline-functions.md-695777d3" >Using <a href="#lambdas.md" id="inline-functions.md-d958ea19"   >higher-order functions</a> imposes certain runtime penalties: each function is an object, and it captures a closure. A closure means those variables that are accessed in the body of the function. Memory allocations (both for function objects and classes) and virtual calls introduce runtime overhead.</p><p id="inline-functions.md-5dc8a3f8" >But it appears that in many cases this kind of overhead can be eliminated by inlining the lambda expressions. The functions shown below are good examples of this situation. The <code class="code " id="inline-functions.md-eb2eb0a7"  >lock()</code> function could be easily inlined at call-sites. Consider the following case:</p><div class="code-block" data-lang="kotlin" id="inline-functions.md-cea28c10"         >lock(l) { foo() }\n</div><p id="inline-functions.md-8245407b" >Instead of creating a function object for the parameter and generating a call, the compiler could emit the following code:</p><div class="code-block" data-lang="kotlin" id="inline-functions.md-f50bcfa4"         >l.lock()\ntry {\n    foo()\n} finally {\n    l.unlock()\n}\n</div><p id="inline-functions.md-361d6729" >To make the compiler do this, you need to mark the <code class="code " id="inline-functions.md-12f3a58e"  >lock()</code> function with the <code class="code " id="inline-functions.md-130ee95e"  >inline</code> modifier:</p><div class="code-block" data-lang="kotlin" id="inline-functions.md-8066058d"         >inline fun &lt;T&gt; lock(lock: Lock, body: () -&gt; T): T { ... }\n</div><p id="inline-functions.md-7e637213" >The <code class="code " id="inline-functions.md-1c2c6fa7"  >inline</code> modifier affects both the function itself and the lambdas passed to it: all of those will be inlined into the call site.</p><p id="inline-functions.md-f28679b2" >Inlining may cause the generated code to grow; however, if you do it in a reasonable way (avoiding inlining large functions), it will pay off in performance, especially at &quot;megamorphic&quot; call-sites inside loops.</p><section class="chapter"  ><h2 id="inline-functions.md-noinline" data-toc="inline-functions#inline-functions.md-noinline"  >noinline</h2><p id="inline-functions.md-97659849" >In case you want only some of the lambdas passed to an inline function to be inlined, you can mark some of your function parameters with the <code class="code " id="inline-functions.md-2ead38e5"  >noinline</code> modifier:</p><div class="code-block" data-lang="kotlin" id="inline-functions.md-105ec60b"         >inline fun foo(inlined: () -&gt; Unit, noinline notInlined: () -&gt; Unit) { ... }\n</div><p id="inline-functions.md-eb01e3e" >Inlinable lambdas can only be called inside the inline functions or passed as inlinable arguments, but <code class="code " id="inline-functions.md-36f5426d"  >noinline</code> ones can be manipulated in any way you like such as stored in fields or passed around.</p><aside data-type="note" class="prompt" data-title="" id="inline-functions.md-c8f450f" ><p id="inline-functions.md-eb874d6b" >If an inline function has no inlinable function parameters and no <a href="#inline-functions.md-reified-type-parameters" id="inline-functions.md-f635514e"   >reified type parameters</a>, the compiler will issue a warning, since inlining such functions is very unlikely to be beneficial (you can suppress the warning if you are sure the inlining is needed using the annotation <code class="code " id="inline-functions.md-912ad89"  >@Suppress(&quot;NOTHING_TO_INLINE&quot;)</code> ).</p></aside></section><section class="chapter"  ><h2 id="inline-functions.md-non-local-returns" data-toc="inline-functions#inline-functions.md-non-local-returns"  >Non-local returns</h2><p id="inline-functions.md-1b6717fd" >In Kotlin, you can only use a normal, unqualified <code class="code " id="inline-functions.md-42975ca5"  >return</code> to exit a named function or an anonymous function. To exit a lambda, use a <a href="#returns.md-return-at-labels" id="inline-functions.md-f08d7277"   >label</a>. A bare <code class="code " id="inline-functions.md-9c1cf776"  >return</code> is forbidden inside a lambda because a lambda cannot make the enclosing function <code class="code " id="inline-functions.md-56c9762d"  >return</code>:</p><div class="code-block" data-lang="kotlin" id="inline-functions.md-90827a2"        data-runnable="true"  >fun ordinaryFunction(block: () -&gt; Unit) {\n    println(&quot;hi!&quot;)\n}\n//sampleStart\nfun foo() {\n    ordinaryFunction {\n        return // ERROR: cannot make `foo` return here\n    }\n}\n//sampleEnd\nfun main() {\n    foo()\n}\n</div><p id="inline-functions.md-e5f8c7dc" >But if the function the lambda is passed to is inlined, the return can be inlined as well. So it is allowed:</p><div class="code-block" data-lang="kotlin" id="inline-functions.md-49e3170b"        data-runnable="true"  >inline fun inlined(block: () -&gt; Unit) {\n    println(&quot;hi!&quot;)\n}\n//sampleStart\nfun foo() {\n    inlined {\n        return // OK: the lambda is inlined\n    }\n}\n//sampleEnd\nfun main() {\n    foo()\n}\n</div><p id="inline-functions.md-bfdcb322" >Such returns (located in a lambda, but exiting the enclosing function) are called <em id="inline-functions.md-469250aa" class=""  >non-local</em> returns. This sort of construct in loops, which inline functions often enclose:</p><div class="code-block" data-lang="kotlin" id="inline-functions.md-a9f776c9"         >fun hasZeros(ints: List&lt;Int&gt;): Boolean {\n    ints.forEach {\n        if (it == 0) return true // returns from hasZeros\n    }\n    return false\n}\n</div><p id="inline-functions.md-3d25be1b" >Note that some inline functions may call the lambdas passed to them as parameters not directly from the function body, but from another execution context, such as a local object or a nested function. In such cases, non-local control flow is also not allowed in the lambdas. To indicate that, the lambda parameter needs to be marked with the <code class="code " id="inline-functions.md-4a0fd984"  >crossinline</code> modifier:</p><div class="code-block" data-lang="kotlin" id="inline-functions.md-c47add0"         >inline fun f(crossinline body: () -&gt; Unit) {\n    val f = object: Runnable {\n        override fun run() = body()\n    }\n    // ...\n}\n</div><aside data-type="note" class="prompt" data-title="" id="inline-functions.md-51a45f8c" ><p id="inline-functions.md-b75beb48" ><code class="code " id="inline-functions.md-616bfa8d"  >break</code> and <code class="code " id="inline-functions.md-5158864"  >continue</code> are not yet available in inlined lambdas, but we are planning to support them too.</p></aside></section><section class="chapter"  ><h2 id="inline-functions.md-reified-type-parameters" data-toc="inline-functions#inline-functions.md-reified-type-parameters"  >Reified type parameters</h2><p id="inline-functions.md-699cbd83" >Sometimes you need to access a type passed as a parameter:</p><div class="code-block" data-lang="kotlin" id="inline-functions.md-206c8847"         >fun &lt;T&gt; TreeNode.findParentOfType(clazz: Class&lt;T&gt;): T? {\n    var p = parent\n    while (p != null &amp;&amp; !clazz.isInstance(p)) {\n        p = p.parent\n    }\n    @Suppress(&quot;UNCHECKED_CAST&quot;)\n    return p as T?\n}\n</div><p id="inline-functions.md-2408c9e8" >Here, you walk up a tree and use reflection to check if a node has a certain type. It’s all fine, but the call site is not very pretty:</p><div class="code-block" data-lang="kotlin" id="inline-functions.md-55a90fa8"         >treeNode.findParentOfType(MyTreeNode::class.java)\n</div><p id="inline-functions.md-666ef5dc" >What you actually want is simply pass a type to this function. You can call it like this:</p><div class="code-block" data-lang="kotlin" id="inline-functions.md-32cc6441"         >treeNode.findParentOfType&lt;MyTreeNode&gt;()\n</div><p id="inline-functions.md-ad62e75a" >To enable this, inline functions support <em id="inline-functions.md-7625ff92" class=""  >reified type parameters</em>, so you can write something like this:</p><div class="code-block" data-lang="kotlin" id="inline-functions.md-280b7805"         >inline fun &lt;reified T&gt; TreeNode.findParentOfType(): T? {\n    var p = parent\n    while (p != null &amp;&amp; p !is T) {\n        p = p.parent\n    }\n    return p as T?\n}\n</div><p id="inline-functions.md-da6cbb19" >You qualified the type parameter with the <code class="code " id="inline-functions.md-86cf32f3"  >reified</code> modifier to make it accessible inside the function, almost as if it were a normal class. Since the function is inlined, no reflection is needed, normal operators like <code class="code " id="inline-functions.md-79eff56c"  >!is</code> and <code class="code " id="inline-functions.md-2859cb31"  >as</code> are working now. Also, you can call it as mentioned above: <code class="code " id="inline-functions.md-3e72840c"  >myTree.findParentOfType&lt;MyTreeNodeType&gt;()</code>.</p><p id="inline-functions.md-eefe71a6" >Though reflection may not be needed in many cases, you can still use it with a reified type parameter:</p><div class="code-block" data-lang="kotlin" id="inline-functions.md-7ab7f3fb"         >inline fun &lt;reified T&gt; membersOf() = T::class.members\n\nfun main(s: Array&lt;String&gt;) {\n    println(membersOf&lt;StringBuilder&gt;().joinToString(&quot;\\n&quot;))\n}\n</div><p id="inline-functions.md-7dd32915" >Normal functions (not marked as inline) cannot have reified parameters. A type that does not have a run-time representation (for example, a non-reified type parameter or a fictitious type like <code class="code " id="inline-functions.md-4fc9be3a"  >Nothing</code>) cannot be used as an argument for a reified type parameter.</p></section><section class="chapter"  ><h2 id="inline-functions.md-inline-properties" data-toc="inline-functions#inline-functions.md-inline-properties"  >Inline properties</h2><p id="inline-functions.md-295a5a30" >The <code class="code " id="inline-functions.md-624c7a6f"  >inline</code> modifier can be used on accessors of properties that don\'t have a backing field. You can annotate individual property accessors:</p><div class="code-block" data-lang="kotlin" id="inline-functions.md-3d9aeb31"         >val foo: Foo\n    inline get() = Foo()\n\nvar bar: Bar\n    get() = ...\n    inline set(v) { ... }\n</div><p id="inline-functions.md-142896fd" >You can also annotate an entire property, which marks both of its accessors as <code class="code " id="inline-functions.md-8dcc97f9"  >inline</code>:</p><div class="code-block" data-lang="kotlin" id="inline-functions.md-43f10133"         >inline var bar: Bar\n    get() = ...\n    set(v) { ... }\n</div><p id="inline-functions.md-9aebf57a" >At the call site, inline accessors are inlined as regular inline functions.</p></section><section class="chapter"  ><h2 id="inline-functions.md-restrictions-for-public-api-inline-functions" data-toc="inline-functions#inline-functions.md-restrictions-for-public-api-inline-functions"  >Restrictions for public API inline functions</h2><p id="inline-functions.md-970e125d" >When an inline function is <code class="code " id="inline-functions.md-ef67b4e"  >public</code> or <code class="code " id="inline-functions.md-bbe120ab"  >protected</code> and is not a part of a <code class="code " id="inline-functions.md-ecdff649"  >private</code> or <code class="code " id="inline-functions.md-21ce8c7f"  >internal</code> declaration, it is considered a <a href="#visibility-modifiers.md-modules" id="inline-functions.md-b068e567"   >module</a> \'s public API. It can be called in other modules and is inlined at such call sites as well.</p><p id="inline-functions.md-abc1ddcb" >This imposes certain risks of binary incompatibility caused by changes in the module that declares an inline function in case the calling module is not re-compiled after the change.</p><p id="inline-functions.md-cb683ae7" >To eliminate the risk of such incompatibility being introduced by a change in <em id="inline-functions.md-398f3b16" class=""  >non</em> -public API of a module, the public API inline functions are not allowed to use non-public-API declarations, i.e. <code class="code " id="inline-functions.md-2e738d18"  >private</code> and <code class="code " id="inline-functions.md-ee206dfa"  >internal</code> declarations and their parts, in their bodies.</p><p id="inline-functions.md-29c1afa6" >An <code class="code " id="inline-functions.md-a2c84d1f"  >internal</code> declaration can be annotated with <code class="code " id="inline-functions.md-70c0883d"  >@PublishedApi</code>, which allows its use in public API inline functions. When an <code class="code " id="inline-functions.md-c5ab7b0e"  >internal</code> inline function is marked as <code class="code " id="inline-functions.md-cabfa6e3"  >@PublishedApi</code>, its body is checked too, as if it were public.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="null-safety.md"  >Null safety</h1><section class="chapter"  ><h2 id="null-safety.md-nullable-types-and-non-null-types" data-toc="null-safety#null-safety.md-nullable-types-and-non-null-types"  >Nullable types and non-null types</h2><p id="null-safety.md-e47db14e" >Kotlin\'s type system is aimed at eliminating the danger of null references from code, also known as the <a href="https://en.wikipedia.org/wiki/Tony_Hoare#Apologies_and_retractions" id="null-safety.md-5bb8d33b"   data-external="true" rel="noopener noreferrer" >The Billion Dollar Mistake</a>.</p><p id="null-safety.md-88186219" >One of the most common pitfalls in many programming languages, including Java, is that accessing a member of a null reference will result in a null reference exception. In Java this would be the equivalent of a <code class="code " id="null-safety.md-a9ae00c8"  >NullPointerException</code> or NPE for short.</p><p id="null-safety.md-4039b69" >Kotlin\'s type system is aimed to eliminate <code class="code " id="null-safety.md-258a5b53"  >NullPointerException</code> \'s from our code. The only possible causes of NPE\'s may be:</p><ul class="list _ul" id="null-safety.md-a40711f0"   ><li class="list__item" id="null-safety.md-1bac4e10" ><p>An explicit call to <code class="code " id="null-safety.md-dca129ff"  >throw NullPointerException()</code>.</p></li><li class="list__item" id="null-safety.md-16dcca7b" ><p>Usage of the <code class="code " id="null-safety.md-6aa7792a"  >!!</code> operator that is described below.</p></li><li class="list__item" id="null-safety.md-6b200b02" >Some data inconsistency with regard to initialization, such as when: <ul class="list _ul" id="null-safety.md-29d44f3"   ><li class="list__item" id="null-safety.md-ea0d26aa" ><p>An uninitialized <code class="code " id="null-safety.md-5a168f52"  >this</code> available in a constructor is passed and used somewhere (&quot;leaking <code class="code " id="null-safety.md-505e6b7a"  >this</code> &quot;).</p></li><li class="list__item" id="null-safety.md-3685c0ea" ><p><a href="#inheritance.md-derived-class-initialization-order" id="null-safety.md-4a8553eb"   >A superclass constructor calls an open member</a> whose implementation in the derived class uses uninitialized state.</p></li></ul></li><li class="list__item" id="null-safety.md-b00199ae" >Java interoperation: <ul class="list _ul" id="null-safety.md-94bc7e51"   ><li class="list__item" id="null-safety.md-99b7483f" ><p>Attempts to access a member on a <code class="code " id="null-safety.md-f0bc570d"  >null</code> reference of a <a href="#java-interop.md-null-safety-and-platform-types" id="null-safety.md-b0db9d27"   >platform type</a>;</p></li><li class="list__item" id="null-safety.md-a406c789" ><p>Generic types used for Java interoperation with incorrect nullability, for example, a piece of Java code might add <code class="code " id="null-safety.md-d5357761"  >null</code> into a Kotlin <code class="code " id="null-safety.md-d333df49"  >MutableList&lt;String&gt;</code>, meaning that <code class="code " id="null-safety.md-fd1d89d1"  >MutableList&lt;String?&gt;</code> should be used for working with it.</p></li><li class="list__item" id="null-safety.md-1849e19e" ><p>Other issues caused by external Java code.</p></li></ul></li></ul><p id="null-safety.md-e96a56f1" >In Kotlin, the type system distinguishes between references that can hold <code class="code " id="null-safety.md-70790592"  >null</code> (nullable references) and those that cannot (non-null references). For example, a regular variable of type <code class="code " id="null-safety.md-e18fb9b7"  >String</code> cannot hold <code class="code " id="null-safety.md-52ec9b4c"  >null</code>:</p><div class="code-block" data-lang="kotlin" id="null-safety.md-83273d36"        data-runnable="true"  >fun main() {\n//sampleStart\n    var a: String = &quot;abc&quot; // Regular initialization means non-null by default\n    a = null // compilation error\n//sampleEnd\n}\n</div><p id="null-safety.md-f9508563" >To allow nulls, you can declare a variable as nullable string, written <code class="code " id="null-safety.md-3c736022"  >String?</code>:</p><div class="code-block" data-lang="kotlin" id="null-safety.md-b9e62193"        data-runnable="true"  >fun main() {\n//sampleStart\n    var b: String? = &quot;abc&quot; // can be set null\n    b = null // ok\n    print(b)\n//sampleEnd\n}\n</div><p id="null-safety.md-2ee5b161" >Now, if you call a method or access a property on <code class="code " id="null-safety.md-33f135eb"  >a</code>, it\'s guaranteed not to cause an NPE, so you can safely say:</p><div class="code-block" data-lang="kotlin" id="null-safety.md-11da5ca4"         >val l = a.length\n</div><p id="null-safety.md-a0f1f3fb" >But if you want to access the same property on <code class="code " id="null-safety.md-e8ec8803"  >b</code>, that would not be safe, and the compiler reports an error:</p><div class="code-block" data-lang="kotlin" id="null-safety.md-4411d87c"         >val l = b.length // error: variable \'b\' can be null\n</div><p id="null-safety.md-d2e9aa8c" >But you still need to access that property, right? There are a few ways of doing that.</p></section><section class="chapter"  ><h2 id="null-safety.md-checking-for-null-in-conditions" data-toc="null-safety#null-safety.md-checking-for-null-in-conditions"  >Checking for null in conditions</h2><p id="null-safety.md-6f110be9" >First, you can explicitly check if <code class="code " id="null-safety.md-351bdb6c"  >b</code> is <code class="code " id="null-safety.md-2a85c788"  >null</code>, and handle the two options separately:</p><div class="code-block" data-lang="kotlin" id="null-safety.md-59f9a210"         >val l = if (b != null) b.length else -1\n</div><p id="null-safety.md-c0b2f53f" >The compiler tracks the information about the check you performed, and allows the call to <code class="code " id="null-safety.md-53cd4a3"  >length</code> inside the <code class="code " id="null-safety.md-fe5eae60"  >if</code>. More complex conditions are supported as well:</p><div class="code-block" data-lang="kotlin" id="null-safety.md-c8f22b16"        data-runnable="true"  >fun main() {\n//sampleStart\n    val b: String? = &quot;Kotlin&quot;\n    if (b != null &amp;&amp; b.length &gt; 0) {\n        print(&quot;String of length ${b.length}&quot;)\n    } else {\n        print(&quot;Empty string&quot;)\n    }\n//sampleEnd\n}\n</div><p id="null-safety.md-a45ec7a7" >Note that this only works where <code class="code " id="null-safety.md-41f0ab1c"  >b</code> is immutable (that means a local variable which is not modified between the check and the usage or a member <code class="code " id="null-safety.md-3a73ae3f"  >val</code> which has a backing field and is not overridable), because otherwise it might happen that <code class="code " id="null-safety.md-d09f4490"  >b</code> changes to <code class="code " id="null-safety.md-fd9dacbb"  >null</code> after the check.</p></section><section class="chapter"  ><h2 id="null-safety.md-safe-calls" data-toc="null-safety#null-safety.md-safe-calls"  >Safe calls</h2><p id="null-safety.md-d315e1c2" >Your second option is the safe call operator, written <code class="code " id="null-safety.md-682c757f"  >?.</code>:</p><div class="code-block" data-lang="kotlin" id="null-safety.md-aa3d564e"        data-runnable="true"  >fun main() {\n//sampleStart\n    val a = &quot;Kotlin&quot;\n    val b: String? = null\n    println(b?.length)\n    println(a?.length) // Unnecessary safe call\n//sampleEnd\n}\n</div><p id="null-safety.md-aeb5a77d" >This returns <code class="code " id="null-safety.md-ab635b02"  >b.length</code> if <code class="code " id="null-safety.md-287a60ec"  >b</code> is not null, and <code class="code " id="null-safety.md-96f5734"  >null</code> otherwise. The type of this expression is <code class="code " id="null-safety.md-8c5bf157"  >Int?</code>.</p><p id="null-safety.md-409dadea" >Safe calls are useful in chains. For example, if Bob, an Employee, may be assigned to a Department (or not), that in turn may have another Employee as a department head, then to obtain the name of Bob\'s department head (if any), you write the following:</p><div class="code-block" data-lang="kotlin" id="null-safety.md-bd46e838"         >bob?.department?.head?.name\n</div><p id="null-safety.md-41635467" >Such a chain returns <code class="code " id="null-safety.md-3b5d746e"  >null</code> if any of the properties in it is <code class="code " id="null-safety.md-de375c"  >null</code>.</p><p id="null-safety.md-66f6db7d" >To perform a certain operation only for non-null values, you can use the safe call operator together with <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/let.html" id="null-safety.md-7ca9a1c9"   data-external="true" rel="noopener noreferrer" ><code class="code " id="null-safety.md-a58e94aa"  >let</code></a>:</p><div class="code-block" data-lang="kotlin" id="null-safety.md-29c71fc1"        data-runnable="true"  >fun main() {\n//sampleStart\n    val listWithNulls: List&lt;String?&gt; = listOf(&quot;Kotlin&quot;, null)\n    for (item in listWithNulls) {\n         item?.let { println(it) } // prints Kotlin and ignores null\n    }\n//sampleEnd\n}\n</div><p id="null-safety.md-12b6919d" >A safe call can also be placed on the left side of an assignment. Then, if one of the receivers in the safe calls chain is <code class="code " id="null-safety.md-67e95d4"  >null</code>, the assignment is skipped, and the expression on the right is not evaluated at all:</p><div class="code-block" data-lang="kotlin" id="null-safety.md-bcbfd04e"         >// If either `person` or `person.department` is null, the function is not called:\nperson?.department?.head = managersPool.getManager()\n</div></section><section class="chapter"  ><h2 id="null-safety.md-elvis-operator" data-toc="null-safety#null-safety.md-elvis-operator"  >Elvis operator</h2><p id="null-safety.md-e72c57b5" >When you have a nullable reference <code class="code " id="null-safety.md-4ecbde2e"  >b</code>, you can say &quot;if <code class="code " id="null-safety.md-44d8f354"  >b</code> is not <code class="code " id="null-safety.md-d59f1ea2"  >null</code>, use it, otherwise use some non-null value&quot;:</p><div class="code-block" data-lang="kotlin" id="null-safety.md-81bc680f"         >val l: Int = if (b != null) b.length else -1\n</div><p id="null-safety.md-6979e16a" >Along with the complete <code class="code " id="null-safety.md-dfecdd50"  >if</code> -expression, this can be expressed with the Elvis operator, written <code class="code " id="null-safety.md-d8d8eae2"  >?:</code>:</p><div class="code-block" data-lang="kotlin" id="null-safety.md-9526e7bc"         >val l = b?.length ?: -1\n</div><p id="null-safety.md-a160c589" >If the expression to the left of <code class="code " id="null-safety.md-4e0433b7"  >?:</code> is not <code class="code " id="null-safety.md-a0605bb5"  >null</code>, the elvis operator returns it, otherwise it returns the expression to the right. Note that the right-hand side expression is evaluated only if the left-hand side is <code class="code " id="null-safety.md-114fc71a"  >null</code>.</p><p id="null-safety.md-85f27ba2" >Since <code class="code " id="null-safety.md-75b54ceb"  >throw</code> and <code class="code " id="null-safety.md-8e70954"  >return</code> are expressions in Kotlin, they can also be used on the right hand side of the elvis operator. This can be very handy, for example, for checking function arguments:</p><div class="code-block" data-lang="kotlin" id="null-safety.md-e8b3c2ea"         >fun foo(node: Node): String? {\n    val parent = node.getParent() ?: return null\n    val name = node.getName() ?: throw IllegalArgumentException(&quot;name expected&quot;)\n    // ...\n}\n</div></section><section class="chapter"  ><h2 id="null-safety.md-the-operator" data-toc="null-safety#null-safety.md-the-operator"  >The !! operator</h2><p id="null-safety.md-10188597" >The third option is for NPE-lovers: the not-null assertion operator (<code class="code " id="null-safety.md-a48f8805"  >!!</code>) converts any value to a non-null type and throws an exception if the value is <code class="code " id="null-safety.md-4a99ea1b"  >null</code>. You can write <code class="code " id="null-safety.md-94ed90b6"  >b!!</code>, and this will return a non-null value of <code class="code " id="null-safety.md-6d8df9c3"  >b</code> (for example, a <code class="code " id="null-safety.md-3b9ff408"  >String</code> in our example) or throw an NPE if <code class="code " id="null-safety.md-a0d969c3"  >b</code> is <code class="code " id="null-safety.md-cb5fceeb"  >null</code>:</p><div class="code-block" data-lang="kotlin" id="null-safety.md-6c79054a"         >val l = b!!.length\n</div><p id="null-safety.md-75912684" >Thus, if you want an NPE, you can have it, but you have to ask for it explicitly, and it does not appear out of the blue.</p></section><section class="chapter"  ><h2 id="null-safety.md-safe-casts" data-toc="null-safety#null-safety.md-safe-casts"  >Safe casts</h2><p id="null-safety.md-e804cdfb" >Regular casts may result into a <code class="code " id="null-safety.md-62c761bf"  >ClassCastException</code> if the object is not of the target type. Another option is to use safe casts that return <code class="code " id="null-safety.md-3089cf6b"  >null</code> if the attempt was not successful:</p><div class="code-block" data-lang="kotlin" id="null-safety.md-e9cf4162"         >val aInt: Int? = a as? Int\n</div></section><section class="chapter"  ><h2 id="null-safety.md-collections-of-a-nullable-type" data-toc="null-safety#null-safety.md-collections-of-a-nullable-type"  >Collections of a nullable type</h2><p id="null-safety.md-e03b8a94" >If you have a collection of elements of a nullable type and want to filter non-null elements, you can do so by using <code class="code " id="null-safety.md-f0bd3119"  >filterNotNull</code>:</p><div class="code-block" data-lang="kotlin" id="null-safety.md-41c73a91"         >val nullableList: List&lt;Int?&gt; = listOf(1, 2, null, 4)\nval intList: List&lt;Int&gt; = nullableList.filterNotNull()\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="equality.md"  >Equality</h1><p id="equality.md-edac1411" >In Kotlin there are two types of equality:</p><ul class="list _ul" id="equality.md-791941f6"   ><li class="list__item" id="equality.md-8a469af7" ><p><em id="equality.md-4779cbf2" class=""  >Structural</em> equality (<code class="code " id="equality.md-92977860"  >==</code>- a check for <code class="code " id="equality.md-7c003e33"  >equals()</code>)</p></li><li class="list__item" id="equality.md-4e1a9349" ><p><em id="equality.md-4dca4b13" class=""  >Referential</em> equality (<code class="code " id="equality.md-5dbb0bb8"  >===</code>- two references point to the same object)</p></li></ul><section class="chapter"  ><h2 id="equality.md-structural-equality" data-toc="equality#equality.md-structural-equality"  >Structural equality</h2><p id="equality.md-d3793980" >Structural equality is checked by the <code class="code " id="equality.md-4c0cd18f"  >==</code> operation and its negated counterpart <code class="code " id="equality.md-34111c25"  >!=</code>. By convention, an expression like <code class="code " id="equality.md-6b1dec27"  >a == b</code> is translated to:</p><div class="code-block" data-lang="kotlin" id="equality.md-2fd01772"         >a?.equals(b) ?: (b === null)\n</div><p id="equality.md-d3d952d9" >If <code class="code " id="equality.md-a45dddb2"  >a</code> is not <code class="code " id="equality.md-b6b613b5"  >null</code>, it calls the <code class="code " id="equality.md-d0731268"  >equals(Any?)</code> function, otherwise (<code class="code " id="equality.md-34e0121"  >a</code> is <code class="code " id="equality.md-71b6a521"  >null</code>) it checks that <code class="code " id="equality.md-d2d0d4b5"  >b</code> is referentially equal to <code class="code " id="equality.md-a1ece368"  >null</code>.</p><p id="equality.md-1b9402e7" >Note that there\'s no point in optimizing your code when comparing to <code class="code " id="equality.md-2bc35737"  >null</code> explicitly: <code class="code " id="equality.md-a408e198"  >a == null</code> will be automatically translated to <code class="code " id="equality.md-4654d21c"  >a === null</code>.</p><p id="equality.md-5f05ef9" >To provide a custom equals check implementation, override the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/equals.html" id="equality.md-1c8b10fc"   data-external="true" rel="noopener noreferrer" ><code class="code " id="equality.md-8205b15a"  >equals(other: Any?): Boolean</code></a> function. Functions with the same name and other signatures, like <code class="code " id="equality.md-c785bbbb"  >equals(other: Foo)</code>, don\'t affect equality checks with the operators <code class="code " id="equality.md-f97df897"  >==</code> and <code class="code " id="equality.md-f80740ca"  >!=</code>.</p><p id="equality.md-7e9fc06f" >Structural equality has nothing to do with comparison defined by the <code class="code " id="equality.md-20235ece"  >Comparable&lt;...&gt;</code> interface, so only a custom <code class="code " id="equality.md-60201a48"  >equals(Any?)</code> implementation may affect the behavior of the operator.</p></section><section class="chapter"  ><h2 id="equality.md-referential-equality" data-toc="equality#equality.md-referential-equality"  >Referential equality</h2><p id="equality.md-b02d949a" >Referential equality is checked by the <code class="code " id="equality.md-e8aaeea4"  >===</code> operation and its negated counterpart <code class="code " id="equality.md-721702ea"  >!==</code>. <code class="code " id="equality.md-f5e326fc"  >a === b</code> evaluates to true if and only if <code class="code " id="equality.md-fd1e835b"  >a</code> and <code class="code " id="equality.md-2c8d168c"  >b</code> point to the same object. For values represented by primitive types at runtime (for example, <code class="code " id="equality.md-518ddec9"  >Int</code> ), the <code class="code " id="equality.md-50089e86"  >===</code> equality check is equivalent to the <code class="code " id="equality.md-fc134ded"  >==</code> check.</p></section><section class="chapter"  ><h2 id="equality.md-floating-point-numbers-equality" data-toc="equality#equality.md-floating-point-numbers-equality"  >Floating-point numbers equality</h2><p id="equality.md-ff147cb2" >When an equality check operands are statically known to be <code class="code " id="equality.md-18023b90"  >Float</code> or <code class="code " id="equality.md-f198ca4f"  >Double</code> (nullable or not), the check follows the <a href="https://en.wikipedia.org/wiki/IEEE_754" id="equality.md-1ae0399c"   data-external="true" rel="noopener noreferrer" >IEEE 754 Standard for Floating-Point Arithmetic</a>.</p><p id="equality.md-88049f55" >Otherwise, the structural equality is used, which disagrees with the standard so that <code class="code " id="equality.md-7467e79d"  >NaN</code> is equal to itself, and <code class="code " id="equality.md-ebbf5e62"  >-0.0</code> is not equal to <code class="code " id="equality.md-48176f44"  >0.0</code>.</p><p id="equality.md-e11c4e78" >See: <a href="#basic-types.md-floating-point-numbers-comparison" id="equality.md-7ac9af8d"   >Floating-point numbers comparison</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="this-expressions.md"  >This expressions</h1><p id="this-expressions.md-665f45f9" >To denote the current <em id="this-expressions.md-2a221092" class=""  >receiver</em>, you use <code class="code " id="this-expressions.md-20d62591"  >this</code> expressions:</p><ul class="list _ul" id="this-expressions.md-e328ddb8"   ><li class="list__item" id="this-expressions.md-d2bf7fb6" ><p>In a member of a <a href="#classes.md-inheritance" id="this-expressions.md-a43032b3"   >class</a>, <code class="code " id="this-expressions.md-367754d6"  >this</code> refers to the current object of that class.</p></li><li class="list__item" id="this-expressions.md-5b508be5" ><p>In an <a href="#extensions.md" id="this-expressions.md-db79e2ef"   >extension function</a> or a <a href="#lambdas.md-function-literals-with-receiver" id="this-expressions.md-31cc83a1"   >function literal with receiver</a> <code class="code " id="this-expressions.md-9ec74061"  >this</code> denotes the <em id="this-expressions.md-ab9f30d9" class=""  >receiver</em> parameter that is passed on the left-hand side of a dot.</p></li></ul><p id="this-expressions.md-942d1f19" >If <code class="code " id="this-expressions.md-f1a9d3f5"  >this</code> has no qualifiers, it refers to the <em id="this-expressions.md-8389377" class=""  >innermost enclosing scope</em>. To refer to <code class="code " id="this-expressions.md-9952d393"  >this</code> in other scopes, <em id="this-expressions.md-423b0e49" class=""  >label qualifiers</em> are used:</p><section class="chapter"  ><h2 id="this-expressions.md-qualified-this" data-toc="this-expressions#this-expressions.md-qualified-this"  >Qualified this</h2><p id="this-expressions.md-99a79abd" >To access <code class="code " id="this-expressions.md-29cfb400"  >this</code> from an outer scope (a <a href="#classes.md" id="this-expressions.md-8dabc725"   >class</a>, <a href="#extensions.md" id="this-expressions.md-ae06eb4b"   >extension function</a>, or labeled <a href="#lambdas.md-function-literals-with-receiver" id="this-expressions.md-669da2a1"   >function literal with receiver</a>) you write <code class="code " id="this-expressions.md-761f72af"  >this@label</code>, where <code class="code " id="this-expressions.md-33ab68c6"  >@label</code> is a <a href="#returns.md" id="this-expressions.md-54001648"   >label</a> on the scope <code class="code " id="this-expressions.md-351ca26"  >this</code> is meant to be from:</p><div class="code-block" data-lang="kotlin" id="this-expressions.md-25520bef"         >class A { // implicit label @A\n    inner class B { // implicit label @B\n        fun Int.foo() { // implicit label @foo\n            val a = this@A // A\'s this\n            val b = this@B // B\'s this\n\n            val c = this // foo()\'s receiver, an Int\n            val c1 = this@foo // foo()\'s receiver, an Int\n\n            val funLit = lambda@ fun String.() {\n                val d = this // funLit\'s receiver\n            }\n\n            val funLit2 = { s: String -&gt;\n                // foo()\'s receiver, since enclosing lambda expression\n                // doesn\'t have any receiver\n                val d1 = this\n            }\n        }\n    }\n}\n</div></section><section class="chapter"  ><h2 id="this-expressions.md-implicit-this" data-toc="this-expressions#this-expressions.md-implicit-this"  >Implicit this</h2><p id="this-expressions.md-d6ff4b5f" >When you call a member function on <code class="code " id="this-expressions.md-8ec1724"  >this</code>, you can skip the <code class="code " id="this-expressions.md-8f8aa522"  >this.</code> part. If you have a non-member function with the same name, use this with caution because in some cases it can be called instead:</p><div class="code-block" data-lang="kotlin" id="this-expressions.md-bc04130"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    fun printLine() { println(&quot;Top-level function&quot;) }\n    \n    class A {\n        fun printLine() { println(&quot;Member function&quot;) }\n\n        fun invokePrintLine(omitThis: Boolean = false)  { \n            if (omitThis) printLine()\n            else this.printLine()\n        }\n    }\n    \n    A().invokePrintLine() // Member function\n    A().invokePrintLine(omitThis = true) // Top-level function\n//sampleEnd()\n}\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="coroutines-overview.md"  >Coroutines</h1><p id="coroutines-overview.md-c9a648de" >Asynchronous or non-blocking programming is the new reality. When creating server-side, desktop or mobile applications, it\'s important to provide an experience that is not only fluid from the user\'s perspective, but scalable when needed.</p><p id="coroutines-overview.md-b7b20b3c" >Kotlin solves this problem in a flexible way by providing <a href="https://en.wikipedia.org/wiki/Coroutine" id="coroutines-overview.md-4862de80"   data-external="true" rel="noopener noreferrer" >coroutine</a> support at the language level and delegating most of the functionality to libraries.</p><p id="coroutines-overview.md-e54b7096" >As a bonus, coroutines not only open the doors to asynchronous programming, but also provide a wealth of other possibilities such as concurrency and actors.</p><section class="chapter"  ><h2 id="coroutines-overview.md-how-to-start" data-toc="coroutines-overview#coroutines-overview.md-how-to-start"  >How to start</h2><p id="coroutines-overview.md-bc49ef1a" >New to Kotlin? Take a look at the <a href="#getting-started.md" id="coroutines-overview.md-ad31936a"   >Getting started</a> page.</p><section class="chapter"  ><h3 id="coroutines-overview.md-documentation" data-toc="coroutines-overview#coroutines-overview.md-documentation"  >Documentation</h3><ul class="list _ul" id="coroutines-overview.md-32b12bd0"   ><li class="list__item" id="coroutines-overview.md-f3fea19" ><span id="475c6c9c">${linkTitle}</span></li><li class="list__item" id="coroutines-overview.md-e697f73b" ><span id="f203bc71">${linkTitle}</span></li><li class="list__item" id="coroutines-overview.md-aeead3bd" ><span id="471fd26f">${linkTitle}</span></li><li class="list__item" id="coroutines-overview.md-dfd0dc49" ><span id="f8403875">${linkTitle}</span></li><li class="list__item" id="coroutines-overview.md-91c34db" ><span id="7a87d905">${linkTitle}</span></li><li class="list__item" id="coroutines-overview.md-fc305ae5" ><span id="667a3a57">${linkTitle}</span></li></ul></section><section class="chapter"  ><h3 id="coroutines-overview.md-tutorials" data-toc="coroutines-overview#coroutines-overview.md-tutorials"  >Tutorials</h3><ul class="list _ul" id="coroutines-overview.md-8c5eae3b"   ><li class="list__item" id="coroutines-overview.md-72832f89" ><span id="ae4fb926">${linkTitle}</span></li><li class="list__item" id="coroutines-overview.md-2176c456" ><span id="967e7a48">${linkTitle}</span></li><li class="list__item" id="coroutines-overview.md-2409b4ba" ><a href="https://play.kotlinlang.org/hands-on/Introduction%20to%20Coroutines%20and%20Channels/01_Introduction" id="coroutines-overview.md-cc889734"   data-external="true" rel="noopener noreferrer" >Introduction to coroutines and channels</a></li><li class="list__item" id="coroutines-overview.md-3a933168" ><span id="54493cf2">${linkTitle}</span></li><li class="list__item" id="coroutines-overview.md-dfbed302" ><span id="1a401bc2">${linkTitle}</span></li></ul></section></section><section class="chapter"  ><h2 id="coroutines-overview.md-sample-projects" data-toc="coroutines-overview#coroutines-overview.md-sample-projects"  >Sample projects</h2><ul class="list _ul" id="coroutines-overview.md-eebab90"   ><li class="list__item" id="coroutines-overview.md-7075c16f" ><a href="https://github.com/Kotlin/kotlin-coroutines/tree/master/examples" id="coroutines-overview.md-82a06dd5"   data-external="true" rel="noopener noreferrer" >kotlinx.coroutines examples and sources</a></li><li class="list__item" id="coroutines-overview.md-235509c7" ><a href="https://github.com/JetBrains/kotlinconf-app" id="coroutines-overview.md-4e19e4dc"   data-external="true" rel="noopener noreferrer" >KotlinConf app</a></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="type-safe-builders.md"  >Type-safe builders</h1><p id="type-safe-builders.md-5ea37d70" >By using well-named functions as builders in combination with <a href="#lambdas.md-function-literals-with-receiver" id="type-safe-builders.md-6b25cb40"   >function literals with receiver</a> it is possible to create type-safe, statically-typed builders in Kotlin.</p><p id="type-safe-builders.md-60a67c1b" >Type-safe builders allow creating Kotlin-based domain-specific languages (DSLs) suitable for building complex hierarchical data structures in a semi-declarative way. Sample use cases for the builders are:</p><ul class="list _ul" id="type-safe-builders.md-2a404613"   ><li class="list__item" id="type-safe-builders.md-bb2c2503" ><p>Generating markup with Kotlin code, such as <a href="https://github.com/Kotlin/kotlinx.html" id="type-safe-builders.md-83be34aa"   data-external="true" rel="noopener noreferrer" >HTML</a> or XML</p></li><li class="list__item" id="type-safe-builders.md-d7ddf171" ><p>Programmatically laying out UI components: <a href="https://github.com/Kotlin/anko/wiki/Anko-Layouts" id="type-safe-builders.md-1045c09a"   data-external="true" rel="noopener noreferrer" >Anko</a></p></li><li class="list__item" id="type-safe-builders.md-87156ba4" ><p>Configuring routes for a web server: <a href="https://ktor.io/docs/routing.html" id="type-safe-builders.md-179037ff"   data-external="true" rel="noopener noreferrer" >Ktor</a></p></li></ul><p id="type-safe-builders.md-66f3c408" >Consider the following code:</p><div class="code-block" data-lang="kotlin" id="type-safe-builders.md-2fa9c2ba"         >import com.example.html.* // see declarations below\n\nfun result() =\n    html {\n        head {\n            title {+&quot;XML encoding with Kotlin&quot;}\n        }\n        body {\n            h1 {+&quot;XML encoding with Kotlin&quot;}\n            p  {+&quot;this format can be used as an alternative markup to XML&quot;}\n\n            // an element with attributes and text content\n            a(href = &quot;http://kotlinlang.org&quot;) {+&quot;Kotlin&quot;}\n\n            // mixed content\n            p {\n                +&quot;This is some&quot;\n                b {+&quot;mixed&quot;}\n                +&quot;text. For more see the&quot;\n                a(href = &quot;http://kotlinlang.org&quot;) {+&quot;Kotlin&quot;}\n                +&quot;project&quot;\n            }\n            p {+&quot;some text&quot;}\n\n            // content generated by\n            p {\n                for (arg in args)\n                    +arg\n            }\n        }\n    }\n</div><p id="type-safe-builders.md-8d88a4b4" >This is completely legitimate Kotlin code. You can play with this code online (modify it and run in the browser) <a href="https://play.kotlinlang.org/byExample/09_Kotlin_JS/06_HtmlBuilder" id="type-safe-builders.md-705ab509"   data-external="true" rel="noopener noreferrer" >here</a>.</p><section class="chapter"  ><h2 id="type-safe-builders.md-how-it-works" data-toc="type-safe-builders#type-safe-builders.md-how-it-works"  >How it works</h2><p id="type-safe-builders.md-c325e2e" >Assume that you need to implement a type-safe builder in Kotlin. First of all, define the model you want to build. In this case you need to model HTML tags. It is easily done with a bunch of classes. For example, <code class="code " id="type-safe-builders.md-e062c0e2"  >HTML</code> is a class that describes the <code class="code " id="type-safe-builders.md-4602a6d"  >&lt;html&gt;</code> tag defining children like <code class="code " id="type-safe-builders.md-245b2f9d"  >&lt;head&gt;</code> and <code class="code " id="type-safe-builders.md-65897c0a"  >&lt;body&gt;</code>. (See its declaration <a href="#type-safe-builders.md-full-definition-of-the-com-example-html-package" id="type-safe-builders.md-37f73d3"   >below</a> .)</p><p id="type-safe-builders.md-e1018a58" >Now, let\'s recall why you can say something like this in the code:</p><div class="code-block" data-lang="kotlin" id="type-safe-builders.md-85f62fd9"         >html {\n // ...\n}\n</div><p id="type-safe-builders.md-eb85ace1" ><code class="code " id="type-safe-builders.md-70b83714"  >html</code> is actually a function call that takes a <a href="#lambdas.md" id="type-safe-builders.md-21068cd0"   >lambda expression</a> as an argument. This function is defined as follows:</p><div class="code-block" data-lang="kotlin" id="type-safe-builders.md-38886e68"         >fun html(init: HTML.() -&gt; Unit): HTML {\n    val html = HTML()\n    html.init()\n    return html\n}\n</div><p id="type-safe-builders.md-84de90b6" >This function takes one parameter named <code class="code " id="type-safe-builders.md-94b0bcbb"  >init</code>, which is itself a function. The type of the function is <code class="code " id="type-safe-builders.md-c22c0ccf"  >HTML.() -&gt; Unit</code>, which is a <em id="type-safe-builders.md-4b07e535" class=""  >function type with receiver</em>. This means that you need to pass an instance of type <code class="code " id="type-safe-builders.md-6642bcde"  >HTML</code> (a <em id="type-safe-builders.md-b6352fb7" class=""  >receiver</em>) to the function, and you can call members of that instance inside the function.</p><p id="type-safe-builders.md-5487cb3c" >The receiver can be accessed through the <code class="code " id="type-safe-builders.md-911c8fd6"  >this</code> keyword:</p><div class="code-block" data-lang="kotlin" id="type-safe-builders.md-3c91cdf9"         >html {\n    this.head { ... }\n    this.body { ... }\n}\n</div><p id="type-safe-builders.md-61d3379f" >(<code class="code " id="type-safe-builders.md-ec141614"  >head</code> and <code class="code " id="type-safe-builders.md-cce70093"  >body</code> are member functions of <code class="code " id="type-safe-builders.md-b33f7102"  >HTML</code> .)</p><p id="type-safe-builders.md-2cfdbfd3" >Now, <code class="code " id="type-safe-builders.md-e357f7d5"  >this</code> can be omitted, as usual, and you get something that looks very much like a builder already:</p><div class="code-block" data-lang="kotlin" id="type-safe-builders.md-4d40814c"         >html {\n    head { ... }\n    body { ... }\n}\n</div><p id="type-safe-builders.md-d969d8a" >So, what does this call do? Let\'s look at the body of <code class="code " id="type-safe-builders.md-c564755b"  >html</code> function as defined above. It creates a new instance of <code class="code " id="type-safe-builders.md-9f8ef07a"  >HTML</code>, then it initializes it by calling the function that is passed as an argument (in this example this boils down to calling <code class="code " id="type-safe-builders.md-e6fcffd6"  >head</code> and <code class="code " id="type-safe-builders.md-feb2d4e3"  >body</code> on the <code class="code " id="type-safe-builders.md-e259f40a"  >HTML</code> instance), and then it returns this instance. This is exactly what a builder should do.</p><p id="type-safe-builders.md-859bc7e7" >The <code class="code " id="type-safe-builders.md-b4940ec7"  >head</code> and <code class="code " id="type-safe-builders.md-9d2634b7"  >body</code> functions in the <code class="code " id="type-safe-builders.md-685f0ac7"  >HTML</code> class are defined similarly to <code class="code " id="type-safe-builders.md-603d7eab"  >html</code>. The only difference is that they add the built instances to the <code class="code " id="type-safe-builders.md-d3f41377"  >children</code> collection of the enclosing <code class="code " id="type-safe-builders.md-c6a504c3"  >HTML</code> instance:</p><div class="code-block" data-lang="kotlin" id="type-safe-builders.md-363c782f"         >fun head(init: Head.() -&gt; Unit) : Head {\n    val head = Head()\n    head.init()\n    children.add(head)\n    return head\n}\n\nfun body(init: Body.() -&gt; Unit) : Body {\n    val body = Body()\n    body.init()\n    children.add(body)\n    return body\n}\n</div><p id="type-safe-builders.md-461574b" >Actually these two functions do just the same thing, so you can have a generic version, <code class="code " id="type-safe-builders.md-8cda73bd"  >initTag</code>:</p><div class="code-block" data-lang="kotlin" id="type-safe-builders.md-9d951eae"         >protected fun &lt;T : Element&gt; initTag(tag: T, init: T.() -&gt; Unit): T {\n    tag.init()\n    children.add(tag)\n    return tag\n}\n</div><p id="type-safe-builders.md-b33b58e0" >So, now your functions are very simple:</p><div class="code-block" data-lang="kotlin" id="type-safe-builders.md-5cdf7358"         >fun head(init: Head.() -&gt; Unit) = initTag(Head(), init)\n\nfun body(init: Body.() -&gt; Unit) = initTag(Body(), init)\n</div><p id="type-safe-builders.md-d898be52" >And you can use them to build <code class="code " id="type-safe-builders.md-59c762ca"  >&lt;head&gt;</code> and <code class="code " id="type-safe-builders.md-c40d56b5"  >&lt;body&gt;</code> tags.</p><p id="type-safe-builders.md-dde48910" >One other thing to be discussed here is how you add text to tag bodies. In the example above you say something like:</p><div class="code-block" data-lang="kotlin" id="type-safe-builders.md-c53ad25e"         >html {\n    head {\n        title {+&quot;XML encoding with Kotlin&quot;}\n    }\n    // ...\n}\n</div><p id="type-safe-builders.md-20ccbbc4" >So basically, you just put a string inside a tag body, but there is this little <code class="code " id="type-safe-builders.md-7994264e"  >+</code> in front of it, so it is a function call that invokes a prefix <code class="code " id="type-safe-builders.md-8ade6b79"  >unaryPlus()</code> operation. That operation is actually defined by an extension function <code class="code " id="type-safe-builders.md-25b317a4"  >unaryPlus()</code> that is a member of the <code class="code " id="type-safe-builders.md-d2ccfd7f"  >TagWithText</code> abstract class (a parent of <code class="code " id="type-safe-builders.md-35336aae"  >Title</code> ):</p><div class="code-block" data-lang="kotlin" id="type-safe-builders.md-3c99098"         >operator fun String.unaryPlus() {\n    children.add(TextElement(this))\n}\n</div><p id="type-safe-builders.md-d12736e3" >So, what the prefix <code class="code " id="type-safe-builders.md-528e866c"  >+</code> does here is wrapping a string into an instance of <code class="code " id="type-safe-builders.md-80fa5e1e"  >TextElement</code> and adding it to the <code class="code " id="type-safe-builders.md-fc80cc89"  >children</code> collection, so that it becomes a proper part of the tag tree.</p><p id="type-safe-builders.md-d255534c" >All this is defined in a package <code class="code " id="type-safe-builders.md-ee76152"  >com.example.html</code> that is imported at the top of the builder example above. In the last section you can read through the full definition of this package.</p></section><section class="chapter"  ><h2 id="type-safe-builders.md-scope-control-dslmarker" data-toc="type-safe-builders#type-safe-builders.md-scope-control-dslmarker"  >Scope control: @DslMarker</h2><p id="type-safe-builders.md-14cccde1" >When using DSLs, one might have come across the problem that too many functions can be called in the context. You can call methods of every available implicit receiver inside a lambda and therefore get an inconsistent result, like the tag <code class="code " id="type-safe-builders.md-2944f945"  >head</code> inside another <code class="code " id="type-safe-builders.md-378debf8"  >head</code>:</p><div class="code-block" data-lang="kotlin" id="type-safe-builders.md-b3ee1ef3"         >html {\n    head {\n        head {} // should be forbidden\n    }\n    // ...\n}\n</div><p id="type-safe-builders.md-fcbfe15" >In this example only members of the nearest implicit receiver <code class="code " id="type-safe-builders.md-9838c561"  >this@head</code> must be available; <code class="code " id="type-safe-builders.md-e0279819"  >head()</code> is a member of the outer receiver <code class="code " id="type-safe-builders.md-6b3f74ba"  >this@html</code>, so it must be illegal to call it.</p><p id="type-safe-builders.md-229fe4cd" >To address this problem, there is a special mechanism to control receiver scope.</p><p id="type-safe-builders.md-4894366a" >To make the compiler start controlling scopes you only have to annotate the types of all receivers used in the DSL with the same marker annotation. For instance, for HTML Builders you declare an annotation <code class="code " id="type-safe-builders.md-79111642"  >@HTMLTagMarker</code>:</p><div class="code-block" data-lang="kotlin" id="type-safe-builders.md-a2e0129d"         >@DslMarker\nannotation class HtmlTagMarker\n</div><p id="type-safe-builders.md-15af68c3" >An annotation class is called a DSL marker if it is annotated with the <code class="code " id="type-safe-builders.md-c1c2f1d3"  >@DslMarker</code> annotation.</p><p id="type-safe-builders.md-b8d6bba3" >In our DSL all the tag classes extend the same superclass <code class="code " id="type-safe-builders.md-d7a00ce0"  >Tag</code>. It\'s enough to annotate only the superclass with <code class="code " id="type-safe-builders.md-6f577987"  >@HtmlTagMarker</code> and after that the Kotlin compiler will treat all the inherited classes as annotated:</p><div class="code-block" data-lang="kotlin" id="type-safe-builders.md-279841fc"         >@HtmlTagMarker\nabstract class Tag(val name: String) { ... }\n</div><p id="type-safe-builders.md-4116273b" >You don\'t have to annotate the <code class="code " id="type-safe-builders.md-55812f0e"  >HTML</code> or <code class="code " id="type-safe-builders.md-450e018e"  >Head</code> classes with <code class="code " id="type-safe-builders.md-d6ffa45d"  >@HtmlTagMarker</code> because their superclass is already annotated:</p> <code class="code " id="type-safe-builders.md-ddb380ef"  >class HTML() : Tag(&quot;html&quot;) { ... } class Head() : Tag(&quot;head&quot;) { ... }</code><p id="type-safe-builders.md-d4f2abd4" >After you\'ve added this annotation, the Kotlin compiler knows which implicit receivers are part of the same DSL and allows to call members of the nearest receivers only:</p><div class="code-block" data-lang="kotlin" id="type-safe-builders.md-2bc691e9"         >html {\n    head {\n        head { } // error: a member of outer receiver\n    }\n    // ...\n}\n</div><p id="type-safe-builders.md-c8f5011b" >Note that it\'s still possible to call the members of the outer receiver, but to do that you have to specify this receiver explicitly:</p><div class="code-block" data-lang="kotlin" id="type-safe-builders.md-3a5c236f"         >html {\n    head {\n        this@html.head { } // possible\n    }\n    // ...\n}\n</div></section><section class="chapter"  ><h2 id="type-safe-builders.md-full-definition-of-the-com-example-html-package" data-toc="type-safe-builders#type-safe-builders.md-full-definition-of-the-com-example-html-package"  >Full definition of the com.example.html package</h2><p id="type-safe-builders.md-322fb28a" >This is how the package <code class="code " id="type-safe-builders.md-5a1d68b6"  >com.example.html</code> is defined (only the elements used in the example above). It builds an HTML tree. It makes heavy use of <a href="#extensions.md" id="type-safe-builders.md-e7088a66"   >extension functions</a> and <a href="#lambdas.md-function-literals-with-receiver" id="type-safe-builders.md-2c659e07"   >lambdas with receiver</a>.</p><div class="code-block" data-lang="kotlin" id="type-safe-builders.md-fc60aa4a"         >package com.example.html\n\ninterface Element {\n    fun render(builder: StringBuilder, indent: String)\n}\n\nclass TextElement(val text: String) : Element {\n    override fun render(builder: StringBuilder, indent: String) {\n        builder.append(&quot;$indent$text\\n&quot;)\n    }\n}\n\n@DslMarker\nannotation class HtmlTagMarker\n\n@HtmlTagMarker\nabstract class Tag(val name: String) : Element {\n    val children = arrayListOf&lt;Element&gt;()\n    val attributes = hashMapOf&lt;String, String&gt;()\n\n    protected fun &lt;T : Element&gt; initTag(tag: T, init: T.() -&gt; Unit): T {\n        tag.init()\n        children.add(tag)\n        return tag\n    }\n\n    override fun render(builder: StringBuilder, indent: String) {\n        builder.append(&quot;$indent&lt;$name${renderAttributes()}&gt;\\n&quot;)\n        for (c in children) {\n            c.render(builder, indent + &quot;  &quot;)\n        }\n        builder.append(&quot;$indent&lt;/$name&gt;\\n&quot;)\n    }\n\n    private fun renderAttributes(): String {\n        val builder = StringBuilder()\n        for ((attr, value) in attributes) {\n            builder.append(&quot; $attr=\\&quot;$value\\&quot;&quot;)\n        }\n        return builder.toString()\n    }\n\n    override fun toString(): String {\n        val builder = StringBuilder()\n        render(builder, &quot;&quot;)\n        return builder.toString()\n    }\n}\n\nabstract class TagWithText(name: String) : Tag(name) {\n    operator fun String.unaryPlus() {\n        children.add(TextElement(this))\n    }\n}\n\nclass HTML : TagWithText(&quot;html&quot;) {\n    fun head(init: Head.() -&gt; Unit) = initTag(Head(), init)\n\n    fun body(init: Body.() -&gt; Unit) = initTag(Body(), init)\n}\n\nclass Head : TagWithText(&quot;head&quot;) {\n    fun title(init: Title.() -&gt; Unit) = initTag(Title(), init)\n}\n\nclass Title : TagWithText(&quot;title&quot;)\n\nabstract class BodyTag(name: String) : TagWithText(name) {\n    fun b(init: B.() -&gt; Unit) = initTag(B(), init)\n    fun p(init: P.() -&gt; Unit) = initTag(P(), init)\n    fun h1(init: H1.() -&gt; Unit) = initTag(H1(), init)\n    fun a(href: String, init: A.() -&gt; Unit) {\n        val a = initTag(A(), init)\n        a.href = href\n    }\n}\n\nclass Body : BodyTag(&quot;body&quot;)\nclass B : BodyTag(&quot;b&quot;)\nclass P : BodyTag(&quot;p&quot;)\nclass H1 : BodyTag(&quot;h1&quot;)\n\nclass A : BodyTag(&quot;a&quot;) {\n    var href: String\n        get() = attributes[&quot;href&quot;]!!\n        set(value) {\n            attributes[&quot;href&quot;] = value\n        }\n}\n\nfun html(init: HTML.() -&gt; Unit): HTML {\n    val html = HTML()\n    html.init()\n    return html\n}\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="operator-overloading.md"  >Operator overloading</h1><p id="operator-overloading.md-f660a3bd" >Kotlin allows you to provide custom implementations for the predefined set of operators on types. These operators have prefedined symbolic representation (like <code class="code " id="operator-overloading.md-68e90e28"  >+</code> or <code class="code " id="operator-overloading.md-41d7ba3a"  >*</code>) and precedence. To implement an operator, provide a <a href="#functions.md-member-functions" id="operator-overloading.md-abb9cd5a"   >member function</a> or an <a href="#extensions.md" id="operator-overloading.md-ed104c94"   >extension function</a> with a specific name for the corresponding type. This type becomes the left-hand side type for binary operations and the argument type for the unary ones.</p><p id="operator-overloading.md-1e461d7c" >To overload an operator, mark the corresponding function with the <code class="code " id="operator-overloading.md-c3b2fd09"  >operator</code> modifier:</p><div class="code-block" data-lang="kotlin" id="operator-overloading.md-3a6b802"         >interface IndexedContainer {\n    operator fun get(index: Int)\n}\n</div><p id="operator-overloading.md-57feb60d" >When <a href="#inheritance.md-overriding-methods" id="operator-overloading.md-5bd6d00"   >overriding</a> your operator overloads, you can omit <code class="code " id="operator-overloading.md-ff31a96a"  >operator</code>:</p><div class="code-block" data-lang="kotlin" id="operator-overloading.md-455413af"         >class OrdersList: IndexedContainer {\n    override fun get(index: Int) { /*...*/ }   \n}\n</div><section class="chapter"  ><h2 id="operator-overloading.md-unary-operations" data-toc="operator-overloading#operator-overloading.md-unary-operations"  >Unary operations</h2><section class="chapter"  ><h3 id="operator-overloading.md-unary-prefix-operators" data-toc="operator-overloading#operator-overloading.md-unary-prefix-operators"  >Unary prefix operators</h3><div class="table-wrapper" ><table class=" wide" id="operator-overloading.md-4436ba2b"  ><thead><tr class="ijRowHead" id="operator-overloading.md-955dd421" ><th id="operator-overloading.md-adc85e80"    >Expression</th><th id="operator-overloading.md-fcc5989d"    >Translated to</th></tr></thead><tbody ><tr class="" id="operator-overloading.md-35861e25" ><td id="operator-overloading.md-6b8cd335"    ><code class="code " id="operator-overloading.md-4763f330"  >+a</code></td><td id="operator-overloading.md-3faf56fd"    ><code class="code " id="operator-overloading.md-84f012f6"  >a.unaryPlus()</code></td></tr><tr class="" id="operator-overloading.md-dc0b5ff8" ><td id="operator-overloading.md-59cad49d"    ><code class="code " id="operator-overloading.md-fabf21c7"  >-a</code></td><td id="operator-overloading.md-96a221f0"    ><code class="code " id="operator-overloading.md-49f7004c"  >a.unaryMinus()</code></td></tr><tr class="" id="operator-overloading.md-9666fd37" ><td id="operator-overloading.md-c8f53971"    ><code class="code " id="operator-overloading.md-c007d81d"  >!a</code></td><td id="operator-overloading.md-db743f74"    ><code class="code " id="operator-overloading.md-b3af2ae8"  >a.not()</code></td></tr></tbody ></table ></div><p id="operator-overloading.md-3a80d56b" >This table says that when the compiler processes, for example, an expression <code class="code " id="operator-overloading.md-dfa3c093"  >+a</code>, it performs the following steps:</p><ul class="list _ul" id="operator-overloading.md-af68bbd7"   ><li class="list__item" id="operator-overloading.md-1e6cd389" ><p>Determines the type of <code class="code " id="operator-overloading.md-1c197184"  >a</code>, let it be <code class="code " id="operator-overloading.md-9cd300c"  >T</code>.</p></li><li class="list__item" id="operator-overloading.md-f3a1cd04" ><p>Looks up a function <code class="code " id="operator-overloading.md-a5086c97"  >unaryPlus()</code> with the <code class="code " id="operator-overloading.md-20d50d8b"  >operator</code> modifier and no parameters for the receiver <code class="code " id="operator-overloading.md-3946b5b5"  >T</code>, that means a member function or an extension function.</p></li><li class="list__item" id="operator-overloading.md-19b105f6" ><p>If the function is absent or ambiguous, it is a compilation error.</p></li><li class="list__item" id="operator-overloading.md-2525fa26" ><p>If the function is present and its return type is <code class="code " id="operator-overloading.md-d7304339"  >R</code>, the expression <code class="code " id="operator-overloading.md-cd8a4546"  >+a</code> has type <code class="code " id="operator-overloading.md-2d981798"  >R</code>.</p></li></ul><aside data-type="note" class="prompt" data-title="" id="operator-overloading.md-2a071915" ><p id="operator-overloading.md-ade7564e" >These operations, as well as all the others, are optimized for <a href="#basic-types.md" id="operator-overloading.md-b8e56e52"   >basic types</a> and do not introduce overhead of function calls for them.</p></aside><p id="operator-overloading.md-aaf1d78b" >As an example, here\'s how you can overload the unary minus operator:</p><div class="code-block" data-lang="kotlin" id="operator-overloading.md-bfc6f882"        data-runnable="true"  >data class Point(val x: Int, val y: Int)\n\noperator fun Point.unaryMinus() = Point(-x, -y)\n\nval point = Point(10, 20)\n\nfun main() {\n   println(-point)  // prints &quot;Point(x=-10, y=-20)&quot;\n}\n</div></section><section class="chapter"  ><h3 id="operator-overloading.md-increments-and-decrements" data-toc="operator-overloading#operator-overloading.md-increments-and-decrements"  >Increments and decrements</h3><div class="table-wrapper" ><table class=" wide" id="operator-overloading.md-558da2f9"  ><thead><tr class="ijRowHead" id="operator-overloading.md-975134df" ><th id="operator-overloading.md-23de6f25"    >Expression</th><th id="operator-overloading.md-87d7f680"    >Translated to</th></tr></thead><tbody ><tr class="" id="operator-overloading.md-e2c30e7c" ><td id="operator-overloading.md-51965f39"    ><code class="code " id="operator-overloading.md-ecd4f6bd"  >a++</code></td><td id="operator-overloading.md-4d71d407"    ><code class="code " id="operator-overloading.md-80bd5e0f"  >a.inc()</code> + see below</td></tr><tr class="" id="operator-overloading.md-58084d03" ><td id="operator-overloading.md-99dd0125"    ><code class="code " id="operator-overloading.md-201ab42b"  >a--</code></td><td id="operator-overloading.md-2ed59805"    ><code class="code " id="operator-overloading.md-222dab8e"  >a.dec()</code> + see below</td></tr></tbody ></table ></div><p id="operator-overloading.md-d6db77" >The <code class="code " id="operator-overloading.md-f6645a91"  >inc()</code> and <code class="code " id="operator-overloading.md-3c27d32d"  >dec()</code> functions must return a value, which will be assigned to the variable on which the <code class="code " id="operator-overloading.md-4e4f9b6d"  >++</code> or <code class="code " id="operator-overloading.md-41a18514"  >--</code> operation was used. They shouldn\'t mutate the object on which the <code class="code " id="operator-overloading.md-5e9a5d1e"  >inc</code> or <code class="code " id="operator-overloading.md-ec56187a"  >dec</code> was invoked.</p><p id="operator-overloading.md-1a5d1b48" >The compiler performs the following steps for resolution of an operator in the <em id="operator-overloading.md-e459a3e9" class=""  >postfix</em> form, for example <code class="code " id="operator-overloading.md-15b53cf0"  >a++</code>:</p><ul class="list _ul" id="operator-overloading.md-be653ae6"   ><li class="list__item" id="operator-overloading.md-b819cbf0" ><p>Determines the type of <code class="code " id="operator-overloading.md-cfdcf8f4"  >a</code>, let it be <code class="code " id="operator-overloading.md-f9b19a91"  >T</code>.</p></li><li class="list__item" id="operator-overloading.md-2cb4c992" ><p>Looks up a function <code class="code " id="operator-overloading.md-3e6c61b4"  >inc()</code> with the <code class="code " id="operator-overloading.md-d3721906"  >operator</code> modifier and no parameters, applicable to the receiver of type <code class="code " id="operator-overloading.md-a2a9f969"  >T</code>.</p></li><li class="list__item" id="operator-overloading.md-c9818031" ><p>Checks that the return type of the function is a subtype of <code class="code " id="operator-overloading.md-521256f2"  >T</code>.</p></li></ul><p id="operator-overloading.md-e62c6dca" >The effect of computing the expression is:</p><ul class="list _ul" id="operator-overloading.md-a104c675"   ><li class="list__item" id="operator-overloading.md-5873d9a7" ><p>Store the initial value of <code class="code " id="operator-overloading.md-8643b3f0"  >a</code> to a temporary storage <code class="code " id="operator-overloading.md-81a0c305"  >a0</code>.</p></li><li class="list__item" id="operator-overloading.md-85ef9636" ><p>Assign the result of <code class="code " id="operator-overloading.md-d9b2a8ec"  >a0.inc()</code> to <code class="code " id="operator-overloading.md-732affec"  >a</code>.</p></li><li class="list__item" id="operator-overloading.md-8bfee41f" ><p>Return <code class="code " id="operator-overloading.md-417bcdeb"  >a0</code> as the result of the expression.</p></li></ul><p id="operator-overloading.md-700bdc36" >For <code class="code " id="operator-overloading.md-71c2af71"  >a--</code> the steps are completely analogous.</p><p id="operator-overloading.md-d3e90de1" >For the <em id="operator-overloading.md-46402c01" class=""  >prefix</em> forms <code class="code " id="operator-overloading.md-1043ce57"  >++a</code> and <code class="code " id="operator-overloading.md-43eaa3eb"  >--a</code> resolution works the same way, and the effect is:</p><ul class="list _ul" id="operator-overloading.md-e6aa387f"   ><li class="list__item" id="operator-overloading.md-38a5e3ca" ><p>Assign the result of <code class="code " id="operator-overloading.md-dbdca63"  >a.inc()</code> to <code class="code " id="operator-overloading.md-f19d907e"  >a</code>.</p></li><li class="list__item" id="operator-overloading.md-3f87dd9" ><p>Return the new value of <code class="code " id="operator-overloading.md-9f3f406d"  >a</code> as a result of the expression.</p></li></ul></section></section><section class="chapter"  ><h2 id="operator-overloading.md-binary-operations" data-toc="operator-overloading#operator-overloading.md-binary-operations"  >Binary operations</h2><section class="chapter"  ><h3 id="operator-overloading.md-arithmetic-operators" data-toc="operator-overloading#operator-overloading.md-arithmetic-operators"  >Arithmetic operators</h3><div class="table-wrapper" ><table class=" wide" id="operator-overloading.md-d6b6a595"  ><thead><tr class="ijRowHead" id="operator-overloading.md-2a575812" ><th id="operator-overloading.md-a1811ffd"    >Expression</th><th id="operator-overloading.md-2cf1031d"    >Translated to</th></tr></thead><tbody ><tr class="" id="operator-overloading.md-a2749372" ><td id="operator-overloading.md-313ab8b2"    ><code class="code " id="operator-overloading.md-984ff3f0"  >a + b</code></td><td id="operator-overloading.md-6496f08d"    ><code class="code " id="operator-overloading.md-f45d982f"  >a.plus(b)</code></td></tr><tr class="" id="operator-overloading.md-495d816" ><td id="operator-overloading.md-fefc34ae"    ><code class="code " id="operator-overloading.md-c35f41a3"  >a - b</code></td><td id="operator-overloading.md-ca183d4f"    ><code class="code " id="operator-overloading.md-234a857e"  >a.minus(b)</code></td></tr><tr class="" id="operator-overloading.md-69a1026e" ><td id="operator-overloading.md-8a9feb6b"    ><code class="code " id="operator-overloading.md-16f06c90"  >a * b</code></td><td id="operator-overloading.md-359844c0"    ><code class="code " id="operator-overloading.md-dc481229"  >a.times(b)</code></td></tr><tr class="" id="operator-overloading.md-16a3f24e" ><td id="operator-overloading.md-fdf49507"    ><code class="code " id="operator-overloading.md-701376a4"  >a / b</code></td><td id="operator-overloading.md-1d1515d"    ><code class="code " id="operator-overloading.md-4d1e3c83"  >a.div(b)</code></td></tr><tr class="" id="operator-overloading.md-9cdd7e89" ><td id="operator-overloading.md-d876326f"    ><code class="code " id="operator-overloading.md-8ca820d"  >a % b</code></td><td id="operator-overloading.md-a6d297c4"    ><code class="code " id="operator-overloading.md-5e156f4d"  >a.rem(b)</code>, <code class="code " id="operator-overloading.md-89aca4bd"  >a.mod(b)</code> (deprecated)</td></tr><tr class="" id="operator-overloading.md-fd56130d" ><td id="operator-overloading.md-33dce645"    ><code class="code " id="operator-overloading.md-c65987cf"  >a..b</code></td><td id="operator-overloading.md-a8480793"    ><code class="code " id="operator-overloading.md-3370b87b"  >a.rangeTo(b)</code></td></tr></tbody ></table ></div><p id="operator-overloading.md-7409a6e1" >For the operations in this table, the compiler just resolves the expression in the <em id="operator-overloading.md-c4ba78f6" class=""  >Translated to</em> column.</p><p id="operator-overloading.md-37a087b4" >Below is an example <code class="code " id="operator-overloading.md-bbd98890"  >Counter</code> class that starts at a given value and can be incremented using the overloaded <code class="code " id="operator-overloading.md-24324c96"  >+</code> operator:</p><div class="code-block" data-lang="kotlin" id="operator-overloading.md-506ff878"         >data class Counter(val dayIndex: Int) {\n    operator fun plus(increment: Int): Counter {\n        return Counter(dayIndex + increment)\n    }\n}\n</div></section><section class="chapter"  ><h3 id="operator-overloading.md-in-operator" data-toc="operator-overloading#operator-overloading.md-in-operator"  >in operator</h3><div class="table-wrapper" ><table class=" wide" id="operator-overloading.md-4b9fab33"  ><thead><tr class="ijRowHead" id="operator-overloading.md-57d8a098" ><th id="operator-overloading.md-19c31933"    >Expression</th><th id="operator-overloading.md-d944977d"    >Translated to</th></tr></thead><tbody ><tr class="" id="operator-overloading.md-e0b20d49" ><td id="operator-overloading.md-995c963e"    ><code class="code " id="operator-overloading.md-c5b76f4f"  >a in b</code></td><td id="operator-overloading.md-e395df82"    ><code class="code " id="operator-overloading.md-bbf88368"  >b.contains(a)</code></td></tr><tr class="" id="operator-overloading.md-5a7390d" ><td id="operator-overloading.md-bb4cf7d"    ><code class="code " id="operator-overloading.md-623ed980"  >a !in b</code></td><td id="operator-overloading.md-36bdff90"    ><code class="code " id="operator-overloading.md-1d466833"  >!b.contains(a)</code></td></tr></tbody ></table ></div><p id="operator-overloading.md-3fbbf4bd" >For <code class="code " id="operator-overloading.md-ad81634d"  >in</code> and <code class="code " id="operator-overloading.md-72b8c3e0"  >!in</code> the procedure is the same, but the order of arguments is reversed.</p></section><section class="chapter"  ><h3 id="operator-overloading.md-indexed-access-operator" data-toc="operator-overloading#operator-overloading.md-indexed-access-operator"  >Indexed access operator</h3><div class="table-wrapper" ><table class=" wide" id="operator-overloading.md-149e0087"  ><thead><tr class="ijRowHead" id="operator-overloading.md-886ac434" ><th id="operator-overloading.md-a864f741"    >Expression</th><th id="operator-overloading.md-adf2bb6f"    >Translated to</th></tr></thead><tbody ><tr class="" id="operator-overloading.md-91426cc" ><td id="operator-overloading.md-bc41041f"    ><code class="code " id="operator-overloading.md-f447ca1b"  >a[i]</code></td><td id="operator-overloading.md-de9e0c5c"    ><code class="code " id="operator-overloading.md-58417237"  >a.get(i)</code></td></tr><tr class="" id="operator-overloading.md-71050e05" ><td id="operator-overloading.md-56c96326"    ><code class="code " id="operator-overloading.md-55d83723"  >a[i, j]</code></td><td id="operator-overloading.md-f49abb2e"    ><code class="code " id="operator-overloading.md-2c84f02c"  >a.get(i, j)</code></td></tr><tr class="" id="operator-overloading.md-6f041297" ><td id="operator-overloading.md-65af5732"    ><code class="code " id="operator-overloading.md-ae229252"  >a[i_1, ..., i_n]</code></td><td id="operator-overloading.md-f8c3b24d"    ><code class="code " id="operator-overloading.md-e67cea39"  >a.get(i_1, ..., i_n)</code></td></tr><tr class="" id="operator-overloading.md-3fe258bb" ><td id="operator-overloading.md-320ca3bf"    ><code class="code " id="operator-overloading.md-8269b18a"  >a[i] = b</code></td><td id="operator-overloading.md-b6881c4b"    ><code class="code " id="operator-overloading.md-e10e37cb"  >a.set(i, b)</code></td></tr><tr class="" id="operator-overloading.md-521d8a92" ><td id="operator-overloading.md-a4a479f"    ><code class="code " id="operator-overloading.md-4e59e4a8"  >a[i, j] = b</code></td><td id="operator-overloading.md-9c879c9b"    ><code class="code " id="operator-overloading.md-835d8ab"  >a.set(i, j, b)</code></td></tr><tr class="" id="operator-overloading.md-f1403158" ><td id="operator-overloading.md-2eda6028"    ><code class="code " id="operator-overloading.md-11416926"  >a[i_1, ..., i_n] = b</code></td><td id="operator-overloading.md-bc1f56b3"    ><code class="code " id="operator-overloading.md-53c56842"  >a.set(i_1, ..., i_n, b)</code></td></tr></tbody ></table ></div><p id="operator-overloading.md-61d4f646" >Square brackets are translated to calls to <code class="code " id="operator-overloading.md-1d160bfb"  >get</code> and <code class="code " id="operator-overloading.md-ed9fc060"  >set</code> with appropriate numbers of arguments.</p></section><section class="chapter"  ><h3 id="operator-overloading.md-invoke-operator" data-toc="operator-overloading#operator-overloading.md-invoke-operator"  >invoke operator</h3><div class="table-wrapper" ><table class=" wide" id="operator-overloading.md-cfc263a5"  ><thead><tr class="ijRowHead" id="operator-overloading.md-60823902" ><th id="operator-overloading.md-2d2ac54"    >Expression</th><th id="operator-overloading.md-6b4480f7"    >Translated to</th></tr></thead><tbody ><tr class="" id="operator-overloading.md-265bf4b0" ><td id="operator-overloading.md-3f55f08"    ><code class="code " id="operator-overloading.md-f5c08366"  >a()</code></td><td id="operator-overloading.md-538f3412"    ><code class="code " id="operator-overloading.md-644631f6"  >a.invoke()</code></td></tr><tr class="" id="operator-overloading.md-d6e4bc12" ><td id="operator-overloading.md-bc59f6fa"    ><code class="code " id="operator-overloading.md-ea62eea3"  >a(i)</code></td><td id="operator-overloading.md-b8962619"    ><code class="code " id="operator-overloading.md-15d6db8a"  >a.invoke(i)</code></td></tr><tr class="" id="operator-overloading.md-109e493c" ><td id="operator-overloading.md-bc0e9438"    ><code class="code " id="operator-overloading.md-3b7335c4"  >a(i, j)</code></td><td id="operator-overloading.md-3f342172"    ><code class="code " id="operator-overloading.md-d84ff1d2"  >a.invoke(i, j)</code></td></tr><tr class="" id="operator-overloading.md-a50bc80" ><td id="operator-overloading.md-e6a470de"    ><code class="code " id="operator-overloading.md-d2571588"  >a(i_1, ..., i_n)</code></td><td id="operator-overloading.md-9f96f430"    ><code class="code " id="operator-overloading.md-4a75ed0d"  >a.invoke(i_1, ..., i_n)</code></td></tr></tbody ></table ></div><p id="operator-overloading.md-a90542fb" >Parentheses are translated to calls to <code class="code " id="operator-overloading.md-b1b3bca4"  >invoke</code> with appropriate number of arguments.</p></section><section class="chapter"  ><h3 id="operator-overloading.md-augmented-assignments" data-toc="operator-overloading#operator-overloading.md-augmented-assignments"  >Augmented assignments</h3><div class="table-wrapper" ><table class=" wide" id="operator-overloading.md-de41c72a"  ><thead><tr class="ijRowHead" id="operator-overloading.md-c67a2b5a" ><th id="operator-overloading.md-3eb03716"    >Expression</th><th id="operator-overloading.md-1ad0a465"    >Translated to</th></tr></thead><tbody ><tr class="" id="operator-overloading.md-4074a1ca" ><td id="operator-overloading.md-ba232b10"    ><code class="code " id="operator-overloading.md-b965c27d"  >a += b</code></td><td id="operator-overloading.md-c552850c"    ><code class="code " id="operator-overloading.md-48404163"  >a.plusAssign(b)</code></td></tr><tr class="" id="operator-overloading.md-88989c84" ><td id="operator-overloading.md-2a04b0c"    ><code class="code " id="operator-overloading.md-13059da7"  >a -= b</code></td><td id="operator-overloading.md-53967ce5"    ><code class="code " id="operator-overloading.md-ab545f84"  >a.minusAssign(b)</code></td></tr><tr class="" id="operator-overloading.md-2a25dc9d" ><td id="operator-overloading.md-4bde2e71"    ><code class="code " id="operator-overloading.md-22a43973"  >a *= b</code></td><td id="operator-overloading.md-889c9e53"    ><code class="code " id="operator-overloading.md-cbfb41be"  >a.timesAssign(b)</code></td></tr><tr class="" id="operator-overloading.md-4c9bb578" ><td id="operator-overloading.md-fafd9432"    ><code class="code " id="operator-overloading.md-825614f1"  >a /= b</code></td><td id="operator-overloading.md-f6a373a5"    ><code class="code " id="operator-overloading.md-5b50d180"  >a.divAssign(b)</code></td></tr><tr class="" id="operator-overloading.md-1d825564" ><td id="operator-overloading.md-d61d089e"    ><code class="code " id="operator-overloading.md-a9d19560"  >a %= b</code></td><td id="operator-overloading.md-accbef27"    ><code class="code " id="operator-overloading.md-74ae00b4"  >a.remAssign(b)</code>, <code class="code " id="operator-overloading.md-a977b3a1"  >a.modAssign(b)</code> (deprecated)</td></tr></tbody ></table ></div><p id="operator-overloading.md-a562ee50" >For the assignment operations, for example <code class="code " id="operator-overloading.md-96fb2449"  >a += b</code>, the compiler performs the following steps:</p><ul class="list _ul" id="operator-overloading.md-b86816d3"   ><li class="list__item" id="operator-overloading.md-30dd2945" >If the function from the right column is available: <ul class="list _ul" id="operator-overloading.md-e3d997d7"   ><li class="list__item" id="operator-overloading.md-2927dda5" ><p>If the corresponding binary function (that means <code class="code " id="operator-overloading.md-289e5c43"  >plus()</code> for <code class="code " id="operator-overloading.md-e277f624"  >plusAssign()</code>) is available too, report error (ambiguity).</p></li><li class="list__item" id="operator-overloading.md-c9e7d250" ><p>Make sure its return type is <code class="code " id="operator-overloading.md-818d42c0"  >Unit</code>, and report an error otherwise.</p></li><li class="list__item" id="operator-overloading.md-ea3c3971" ><p>Generate code for <code class="code " id="operator-overloading.md-363c00a7"  >a.plusAssign(b)</code>.</p></li></ul></li><li class="list__item" id="operator-overloading.md-927353f" ><p>Otherwise, try to generate code for <code class="code " id="operator-overloading.md-72967409"  >a = a + b</code> (this includes a type check: the type of <code class="code " id="operator-overloading.md-cfaf8809"  >a + b</code> must be a subtype of <code class="code " id="operator-overloading.md-785b6dcc"  >a</code> ).</p></li></ul><aside data-type="note" class="prompt" data-title="" id="operator-overloading.md-1e162ec9" ><p id="operator-overloading.md-ff40073d" >Assignments are <em id="operator-overloading.md-485c6185" class=""  >NOT</em> expressions in Kotlin.</p></aside></section><section class="chapter"  ><h3 id="operator-overloading.md-equality-and-inequality-operators" data-toc="operator-overloading#operator-overloading.md-equality-and-inequality-operators"  >Equality and inequality operators</h3><div class="table-wrapper" ><table class=" wide" id="operator-overloading.md-919e8e2a"  ><thead><tr class="ijRowHead" id="operator-overloading.md-94298666" ><th id="operator-overloading.md-a7ea660c"    >Expression</th><th id="operator-overloading.md-8e66c307"    >Translated to</th></tr></thead><tbody ><tr class="" id="operator-overloading.md-8edf1732" ><td id="operator-overloading.md-2d66d6d4"    ><code class="code " id="operator-overloading.md-15a0f2fd"  >a == b</code></td><td id="operator-overloading.md-39521a69"    ><code class="code " id="operator-overloading.md-ce272cb6"  >a?.equals(b) ?: (b === null)</code></td></tr><tr class="" id="operator-overloading.md-38d8334e" ><td id="operator-overloading.md-33b4188e"    ><code class="code " id="operator-overloading.md-bb641091"  >a != b</code></td><td id="operator-overloading.md-80f8feaf"    ><code class="code " id="operator-overloading.md-cb786bfd"  >!(a?.equals(b) ?: (b === null))</code></td></tr></tbody ></table ></div><p id="operator-overloading.md-64c2a69e" >These operators only work with the function <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/equals.html" id="operator-overloading.md-30b92509"   data-external="true" rel="noopener noreferrer" ><code class="code " id="operator-overloading.md-204bff3a"  >equals(other: Any?): Boolean</code></a>, which can be overridden to provide custom equality check implementation. Any other function with the same name (like <code class="code " id="operator-overloading.md-e53aa5af"  >equals(other: Foo)</code>) will not be called.</p><aside data-type="note" class="prompt" data-title="" id="operator-overloading.md-b31220f" ><p id="operator-overloading.md-4eceeece" ><code class="code " id="operator-overloading.md-3c18f4e3"  >===</code> and <code class="code " id="operator-overloading.md-76c738c6"  >!==</code> (identity checks) are not overloadable, so no conventions exist for them.</p></aside><p id="operator-overloading.md-cbd3eaa7" >The <code class="code " id="operator-overloading.md-4b311667"  >==</code> operation is special: it is translated to a complex expression that screens for <code class="code " id="operator-overloading.md-fe1e6d26"  >null</code> \'s. <code class="code " id="operator-overloading.md-97b30b72"  >null == null</code> is always true, and <code class="code " id="operator-overloading.md-9e7b5b36"  >x == null</code> for a non-null <code class="code " id="operator-overloading.md-a5335d39"  >x</code> is always false and won\'t invoke <code class="code " id="operator-overloading.md-ca1b5332"  >x.equals()</code>.</p></section><section class="chapter"  ><h3 id="operator-overloading.md-comparison-operators" data-toc="operator-overloading#operator-overloading.md-comparison-operators"  >Comparison operators</h3><div class="table-wrapper" ><table class=" wide" id="operator-overloading.md-5795db22"  ><thead><tr class="ijRowHead" id="operator-overloading.md-295f47fe" ><th id="operator-overloading.md-e2744619"    >Expression</th><th id="operator-overloading.md-a555aef0"    >Translated to</th></tr></thead><tbody ><tr class="" id="operator-overloading.md-71b72937" ><td id="operator-overloading.md-ec597f4e"    ><code class="code " id="operator-overloading.md-55893323"  >a &gt; b</code></td><td id="operator-overloading.md-c81fd042"    ><code class="code " id="operator-overloading.md-c250befa"  >a.compareTo(b) &gt; 0</code></td></tr><tr class="" id="operator-overloading.md-2db5306f" ><td id="operator-overloading.md-daee0cc9"    ><code class="code " id="operator-overloading.md-be6e6a8f"  >a &lt; b</code></td><td id="operator-overloading.md-d8e0fcd0"    ><code class="code " id="operator-overloading.md-56535cc4"  >a.compareTo(b) &lt; 0</code></td></tr><tr class="" id="operator-overloading.md-575fc62e" ><td id="operator-overloading.md-5cb6647f"    ><code class="code " id="operator-overloading.md-3f668ac"  >a &gt;= b</code></td><td id="operator-overloading.md-c442b72c"    ><code class="code " id="operator-overloading.md-7d6a52b4"  >a.compareTo(b) &gt;= 0</code></td></tr><tr class="" id="operator-overloading.md-24716003" ><td id="operator-overloading.md-b812fc4"    ><code class="code " id="operator-overloading.md-3eb95ab"  >a &lt;= b</code></td><td id="operator-overloading.md-9b67e0d3"    ><code class="code " id="operator-overloading.md-5c143e97"  >a.compareTo(b) &lt;= 0</code></td></tr></tbody ></table ></div><p id="operator-overloading.md-c64e8f87" >All comparisons are translated into calls to <code class="code " id="operator-overloading.md-aed6d948"  >compareTo</code>, that is required to return <code class="code " id="operator-overloading.md-a8b86e2c"  >Int</code>.</p></section><section class="chapter"  ><h3 id="operator-overloading.md-property-delegation-operators" data-toc="operator-overloading#operator-overloading.md-property-delegation-operators"  >Property delegation operators</h3><p id="operator-overloading.md-793325cb" ><code class="code " id="operator-overloading.md-491d59cd"  >provideDelegate</code>, <code class="code " id="operator-overloading.md-de20f038"  >getValue</code> and <code class="code " id="operator-overloading.md-85d608dd"  >setValue</code> operator functions are described in <a href="#delegated-properties.md" id="operator-overloading.md-ad42c7ff"   >Delegated properties</a>.</p></section></section><section class="chapter"  ><h2 id="operator-overloading.md-infix-calls-for-named-functions" data-toc="operator-overloading#operator-overloading.md-infix-calls-for-named-functions"  >Infix calls for named functions</h2><p id="operator-overloading.md-896d06d0" >You can simulate custom infix operations by using <a href="#functions.md-infix-notation" id="operator-overloading.md-88fa0850"   >infix function calls</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="annotations.md"  >Annotations</h1><p id="annotations.md-8fde4f72" >Annotations are means of attaching metadata to code. To declare an annotation, put the <code class="code " id="annotations.md-8b78ad0b"  >annotation</code> modifier in front of a class:</p><div class="code-block" data-lang="kotlin" id="annotations.md-9731b16b"         >annotation class Fancy\n</div><p id="annotations.md-6d8ef145" >Additional attributes of the annotation can be specified by annotating the annotation class with meta-annotations:</p><ul class="list _ul" id="annotations.md-6fc751e9"   ><li class="list__item" id="annotations.md-32b5c9f1" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/-target/index.html" id="annotations.md-8c18563b"   data-external="true" rel="noopener noreferrer" ><code class="code " id="annotations.md-85b5216"  >@Target</code></a> specifies the possible kinds of elements which can be annotated with the annotation (such as classes, functions, properties, and expressions);</p></li><li class="list__item" id="annotations.md-fede22b" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/-retention/index.html" id="annotations.md-961ef56d"   data-external="true" rel="noopener noreferrer" ><code class="code " id="annotations.md-9284135a"  >@Retention</code></a> specifies whether the annotation is stored in the compiled class files and whether it\'s visible through reflection at runtime (by default, both are true);</p></li><li class="list__item" id="annotations.md-4e5ac759" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/-repeatable/index.html" id="annotations.md-6e993745"   data-external="true" rel="noopener noreferrer" ><code class="code " id="annotations.md-6f5715ec"  >@Repeatable</code></a> allows using the same annotation on a single element multiple times;</p></li><li class="list__item" id="annotations.md-1d30be4e" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/-must-be-documented/index.html" id="annotations.md-af7ab96b"   data-external="true" rel="noopener noreferrer" ><code class="code " id="annotations.md-83a57fbf"  >@MustBeDocumented</code></a> specifies that the annotation is part of the public API and should be included in the class or method signature shown in the generated API documentation.</p></li></ul><div class="code-block" data-lang="kotlin" id="annotations.md-9cbd59e1"         >@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION,\n        AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.EXPRESSION)\n@Retention(AnnotationRetention.SOURCE)\n@MustBeDocumented\nannotation class Fancy\n</div><section class="chapter"  ><h2 id="annotations.md-usage" data-toc="annotations#annotations.md-usage"  >Usage</h2><div class="code-block" data-lang="kotlin" id="annotations.md-f15d8065"         >@Fancy class Foo {\n    @Fancy fun baz(@Fancy foo: Int): Int {\n        return (@Fancy 1)\n    }\n}\n</div><p id="annotations.md-8d608681" >If you need to annotate the primary constructor of a class, you need to add the <code class="code " id="annotations.md-a8ae1861"  >constructor</code> keyword to the constructor declaration, and add the annotations before it:</p><div class="code-block" data-lang="kotlin" id="annotations.md-b578510a"         >class Foo @Inject constructor(dependency: MyDependency) { ... }\n</div><p id="annotations.md-40366402" >You can also annotate property accessors:</p><div class="code-block" data-lang="kotlin" id="annotations.md-1ee27ee6"         >class Foo {\n    var x: MyDependency? = null\n        @Inject set\n}\n</div></section><section class="chapter"  ><h2 id="annotations.md-constructors" data-toc="annotations#annotations.md-constructors"  >Constructors</h2><p id="annotations.md-b5371ffe" >Annotations can have constructors that take parameters.</p><div class="code-block" data-lang="kotlin" id="annotations.md-2cc61600"         >annotation class Special(val why: String)\n\n@Special(&quot;example&quot;) class Foo {}\n</div><p id="annotations.md-b6bfe8bf" >Allowed parameter types are:</p><ul class="list _ul" id="annotations.md-21ac10e1"   ><li class="list__item" id="annotations.md-c6a10c6d" ><p>Types that correspond to Java primitive types (Int, Long etc.)</p></li><li class="list__item" id="annotations.md-19de87f1" ><p>Strings</p></li><li class="list__item" id="annotations.md-1060d80e" ><p>Classes (<code class="code " id="annotations.md-3817aad2"  >Foo::class</code>)</p></li><li class="list__item" id="annotations.md-6e9117f4" ><p>Enums</p></li><li class="list__item" id="annotations.md-531d3f59" ><p>Other annotations</p></li><li class="list__item" id="annotations.md-c4e90503" ><p>Arrays of the types listed above</p></li></ul><p id="annotations.md-373f8163" >Annotation parameters cannot have nullable types, because the JVM does not support storing <code class="code " id="annotations.md-a8dc2d7b"  >null</code> as a value of an annotation attribute.</p><p id="annotations.md-a56da0be" >If an annotation is used as a parameter of another annotation, its name is not prefixed with the <code class="code " id="annotations.md-e1bb94bd"  >@</code> character:</p><div class="code-block" data-lang="kotlin" id="annotations.md-31c487f2"         >annotation class ReplaceWith(val expression: String)\n\nannotation class Deprecated(\n        val message: String,\n        val replaceWith: ReplaceWith = ReplaceWith(&quot;&quot;))\n\n@Deprecated(&quot;This function is deprecated, use === instead&quot;, ReplaceWith(&quot;this === other&quot;))\n</div><p id="annotations.md-6f48bf4a" >If you need to specify a class as an argument of an annotation, use a Kotlin class (<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/index.html" id="annotations.md-4b710266"   data-external="true" rel="noopener noreferrer" >KClass</a> ). The Kotlin compiler will automatically convert it to a Java class, so that the Java code can access the annotations and arguments normally.</p><div class="code-block" data-lang="kotlin" id="annotations.md-38712154"         >\nimport kotlin.reflect.KClass\n\nannotation class Ann(val arg1: KClass&lt;*&gt;, val arg2: KClass&lt;out Any&gt;)\n\n@Ann(String::class, Int::class) class MyClass\n</div></section><section class="chapter"  ><h2 id="annotations.md-lambdas" data-toc="annotations#annotations.md-lambdas"  >Lambdas</h2><p id="annotations.md-262e13ee" >Annotations can also be used on lambdas. They will be applied to the <code class="code " id="annotations.md-6279b93f"  >invoke()</code> method into which the body of the lambda is generated. This is useful for frameworks like <a href="https://docs.paralleluniverse.co/quasar/" id="annotations.md-70210080"   data-external="true" rel="noopener noreferrer" >Quasar</a>, which uses annotations for concurrency control.</p><div class="code-block" data-lang="kotlin" id="annotations.md-115fe53e"         >annotation class Suspendable\n\nval f = @Suspendable { Fiber.sleep(10) }\n</div></section><section class="chapter"  ><h2 id="annotations.md-annotation-use-site-targets" data-toc="annotations#annotations.md-annotation-use-site-targets"  >Annotation use-site targets</h2><p id="annotations.md-5b3ff64" >When you\'re annotating a property or a primary constructor parameter, there are multiple Java elements which are generated from the corresponding Kotlin element, and therefore multiple possible locations for the annotation in the generated Java bytecode. To specify how exactly the annotation should be generated, use the following syntax:</p><div class="code-block" data-lang="kotlin" id="annotations.md-60dc148f"         >class Example(@field:Ann val foo,    // annotate Java field\n              @get:Ann val bar,      // annotate Java getter\n              @param:Ann val quux)   // annotate Java constructor parameter\n</div><p id="annotations.md-ab26ac12" >The same syntax can be used to annotate the entire file. To do this, put an annotation with the target <code class="code " id="annotations.md-316a8dbb"  >file</code> at the top level of a file, before the package directive or before all imports if the file is in the default package:</p><div class="code-block" data-lang="kotlin" id="annotations.md-c70b6ebc"         >@file:JvmName(&quot;Foo&quot;)\n\npackage org.jetbrains.demo\n</div><p id="annotations.md-808e1e99" >If you have multiple annotations with the same target, you can avoid repeating the target by adding brackets after the target and putting all the annotations inside the brackets:</p><div class="code-block" data-lang="kotlin" id="annotations.md-61c8ef30"         >class Example {\n     @set:[Inject VisibleForTesting]\n     var collaborator: Collaborator\n}\n</div><p id="annotations.md-887cc170" >The full list of supported use-site targets is:</p><ul class="list _ul" id="annotations.md-60fe69d9"   ><li class="list__item" id="annotations.md-d5fd2e88" ><code class="code " id="annotations.md-889e643a"  >file</code></li><li class="list__item" id="annotations.md-4e974f2c" ><p><code class="code " id="annotations.md-e4b4eaa8"  >property</code> (annotations with this target are not visible to Java)</p></li><li class="list__item" id="annotations.md-4b82f25c" ><code class="code " id="annotations.md-7500e078"  >field</code></li><li class="list__item" id="annotations.md-5beef414" ><p><code class="code " id="annotations.md-9a91eb5e"  >get</code> (property getter)</p></li><li class="list__item" id="annotations.md-96ea4879" ><p><code class="code " id="annotations.md-8fb850fa"  >set</code> (property setter)</p></li><li class="list__item" id="annotations.md-5e50fb7d" ><p><code class="code " id="annotations.md-46588465"  >receiver</code> (receiver parameter of an extension function or property)</p></li><li class="list__item" id="annotations.md-15195a69" ><p><code class="code " id="annotations.md-fca3e1f7"  >param</code> (constructor parameter)</p></li><li class="list__item" id="annotations.md-f51567fa" ><p><code class="code " id="annotations.md-2cff70cc"  >setparam</code> (property setter parameter)</p></li><li class="list__item" id="annotations.md-40b08ff5" ><p><code class="code " id="annotations.md-bae460cb"  >delegate</code> (the field storing the delegate instance for a delegated property)</p></li></ul><p id="annotations.md-56c69789" >To annotate the receiver parameter of an extension function, use the following syntax:</p><div class="code-block" data-lang="kotlin" id="annotations.md-61ef630"         >fun @receiver:Fancy String.myExtension() { ... }\n</div><p id="annotations.md-540b754a" >If you don\'t specify a use-site target, the target is chosen according to the <code class="code " id="annotations.md-eafe1d59"  >@Target</code> annotation of the annotation being used. If there are multiple applicable targets, the first applicable target from the following list is used:</p><ul class="list _ul" id="annotations.md-a3876a7d"   ><li class="list__item" id="annotations.md-196c0d3c" ><code class="code " id="annotations.md-1ee1cea5"  >param</code></li><li class="list__item" id="annotations.md-6542df2f" ><code class="code " id="annotations.md-e47b15bf"  >property</code></li><li class="list__item" id="annotations.md-c6b5049" ><code class="code " id="annotations.md-a0fdad86"  >field</code></li></ul></section><section class="chapter"  ><h2 id="annotations.md-java-annotations" data-toc="annotations#annotations.md-java-annotations"  >Java annotations</h2><p id="annotations.md-13ee2464" >Java annotations are 100% compatible with Kotlin:</p><div class="code-block" data-lang="kotlin" id="annotations.md-143d652e"         >import org.junit.Test\nimport org.junit.Assert.*\nimport org.junit.Rule\nimport org.junit.rules.*\n\nclass Tests {\n    // apply @Rule annotation to property getter\n    @get:Rule val tempFolder = TemporaryFolder()\n\n    @Test fun simple() {\n        val f = tempFolder.newFile()\n        assertEquals(42, getTheAnswer())\n    }\n}\n</div><p id="annotations.md-8c447e52" >Since the order of parameters for an annotation written in Java is not defined, you can\'t use a regular function call syntax for passing the arguments. Instead, you need to use the named argument syntax:</p><div class="code-block" data-lang="java" id="annotations.md-21639870"         >// Java\npublic @interface Ann {\n    int intValue();\n    String stringValue();\n}\n</div><div class="code-block" data-lang="kotlin" id="annotations.md-cde7227c"         >// Kotlin\n@Ann(intValue = 1, stringValue = &quot;abc&quot;) class C\n</div><p id="annotations.md-7fccc72" >Just like in Java, a special case is the <code class="code " id="annotations.md-4881d5ab"  >value</code> parameter; its value can be specified without an explicit name:</p><div class="code-block" data-lang="java" id="annotations.md-28ecc85c"         >// Java\npublic @interface AnnWithValue {\n    String value();\n}\n</div><div class="code-block" data-lang="kotlin" id="annotations.md-a57a66f9"         >// Kotlin\n@AnnWithValue(&quot;abc&quot;) class C\n</div><section class="chapter"  ><h3 id="annotations.md-arrays-as-annotation-parameters" data-toc="annotations#annotations.md-arrays-as-annotation-parameters"  >Arrays as annotation parameters</h3><p id="annotations.md-201a4512" >If the <code class="code " id="annotations.md-ad1740b"  >value</code> argument in Java has an array type, it becomes a <code class="code " id="annotations.md-86b9a12d"  >vararg</code> parameter in Kotlin:</p><div class="code-block" data-lang="java" id="annotations.md-d2797948"         >// Java\npublic @interface AnnWithArrayValue {\n    String[] value();\n}\n</div><div class="code-block" data-lang="kotlin" id="annotations.md-5487ce96"         >// Kotlin\n@AnnWithArrayValue(&quot;abc&quot;, &quot;foo&quot;, &quot;bar&quot;) class C\n</div><p id="annotations.md-7ef224ed" >For other arguments that have an array type, you need to use the array literal syntax or <code class="code " id="annotations.md-dbde63fc"  >arrayOf(...)</code>:</p><div class="code-block" data-lang="java" id="annotations.md-ddb73888"         >// Java\npublic @interface AnnWithArrayMethod {\n    String[] names();\n}\n</div><div class="code-block" data-lang="kotlin" id="annotations.md-f6a970da"         >@AnnWithArrayMethod(names = [&quot;abc&quot;, &quot;foo&quot;, &quot;bar&quot;]) \nclass C\n</div></section><section class="chapter"  ><h3 id="annotations.md-accessing-properties-of-an-annotation-instance" data-toc="annotations#annotations.md-accessing-properties-of-an-annotation-instance"  >Accessing properties of an annotation instance</h3><p id="annotations.md-e36c49c4" >Values of an annotation instance are exposed as properties to Kotlin code:</p><div class="code-block" data-lang="java" id="annotations.md-913e1ea3"         >// Java\npublic @interface Ann {\n    int value();\n}\n</div><div class="code-block" data-lang="kotlin" id="annotations.md-cc63939a"         >// Kotlin\nfun foo(ann: Ann) {\n    val i = ann.value\n}\n</div></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="destructuring-declarations.md"  >Destructuring declarations</h1><p id="destructuring-declarations.md-54001b15" >Sometimes it is convenient to <em id="destructuring-declarations.md-f359cb2d" class=""  >destructure</em> an object into a number of variables, for example:</p><div class="code-block" data-lang="kotlin" id="destructuring-declarations.md-55d6db55"         >val (name, age) = person \n</div><p id="destructuring-declarations.md-adaaa2c7" >This syntax is called a <em id="destructuring-declarations.md-38ed857f" class=""  >destructuring declaration</em>. A destructuring declaration creates multiple variables at once. You have declared two new variables: <code class="code " id="destructuring-declarations.md-649aaa05"  >name</code> and <code class="code " id="destructuring-declarations.md-23683d73"  >age</code>, and can use them independently:</p><div class="code-block" data-lang="kotlin" id="destructuring-declarations.md-9bffa15"         >println(name)\nprintln(age)\n</div><p id="destructuring-declarations.md-d2d51666" >A destructuring declaration is compiled down to the following code:</p><div class="code-block" data-lang="kotlin" id="destructuring-declarations.md-8dd599d1"         >val name = person.component1()\nval age = person.component2()\n</div><p id="destructuring-declarations.md-cbd644ad" >The <code class="code " id="destructuring-declarations.md-a9766308"  >component1()</code> and <code class="code " id="destructuring-declarations.md-1cee3068"  >component2()</code> functions are another example of the <em id="destructuring-declarations.md-9bd59aa1" class=""  >principle of conventions</em> widely used in Kotlin (see operators like <code class="code " id="destructuring-declarations.md-c9da0b6d"  >+</code> and <code class="code " id="destructuring-declarations.md-a2e3045b"  >*</code>, <code class="code " id="destructuring-declarations.md-626049e8"  >for</code> -loops as an example). Anything can be on the right-hand side of a destructuring declaration, as long as the required number of component functions can be called on it. And, of course, there can be <code class="code " id="destructuring-declarations.md-fdb84f00"  >component3()</code> and <code class="code " id="destructuring-declarations.md-dd627c84"  >component4()</code> and so on.</p><aside data-type="note" class="prompt" data-title="" id="destructuring-declarations.md-c5f0843d" ><p id="destructuring-declarations.md-2b415c21" >The <code class="code " id="destructuring-declarations.md-95aa4bd5"  >componentN()</code> functions need to be marked with the <code class="code " id="destructuring-declarations.md-6961b923"  >operator</code> keyword to allow using them in a destructuring declaration.</p></aside><p id="destructuring-declarations.md-a37f3f7c" >Destructuring declarations also work in <code class="code " id="destructuring-declarations.md-e7c6aa5e"  >for</code> -loops:</p><div class="code-block" data-lang="kotlin" id="destructuring-declarations.md-1416e179"         >for ((a, b) in collection) { ... }\n</div><p id="destructuring-declarations.md-c823af7e" >Variables <code class="code " id="destructuring-declarations.md-4735266"  >a</code> and <code class="code " id="destructuring-declarations.md-6269e576"  >b</code> get the values returned by <code class="code " id="destructuring-declarations.md-fb553ad7"  >component1()</code> and <code class="code " id="destructuring-declarations.md-5fc39927"  >component2()</code> called on elements of the collection.</p><section class="chapter"  ><h2 id="destructuring-declarations.md-example-returning-two-values-from-a-function" data-toc="destructuring-declarations#destructuring-declarations.md-example-returning-two-values-from-a-function"  >Example: returning two values from a function</h2><p id="destructuring-declarations.md-26e17bd5" >Assume that you need to return two things from a function - for example, a result object and a status of some sort. A compact way of doing this in Kotlin is to declare a <a href="#data-classes.md" id="destructuring-declarations.md-50c614e9"   >data class</a> and return its instance:</p><div class="code-block" data-lang="kotlin" id="destructuring-declarations.md-ebe6460b"         >data class Result(val result: Int, val status: Status)\nfun function(...): Result {\n    // computations\n    \n    return Result(result, status)\n}\n\n// Now, to use this function:\nval (result, status) = function(...)\n</div><p id="destructuring-declarations.md-b2f628c2" >Since data classes automatically declare <code class="code " id="destructuring-declarations.md-f1b0c3c9"  >componentN()</code> functions, destructuring declarations work here.</p><aside data-type="note" class="prompt" data-title="" id="destructuring-declarations.md-b25afddf" ><p id="destructuring-declarations.md-207a654b" >You could also use the standard class <code class="code " id="destructuring-declarations.md-e4e46fed"  >Pair</code> and have <code class="code " id="destructuring-declarations.md-ef77daac"  >function()</code> return <code class="code " id="destructuring-declarations.md-5647e636"  >Pair&lt;Int, Status&gt;</code>, but it\'s often better to have your data named properly.</p></aside></section><section class="chapter"  ><h2 id="destructuring-declarations.md-example-destructuring-declarations-and-maps" data-toc="destructuring-declarations#destructuring-declarations.md-example-destructuring-declarations-and-maps"  >Example: destructuring declarations and maps</h2><p id="destructuring-declarations.md-45a3e9f1" >Probably the nicest way to traverse a map is this:</p><div class="code-block" data-lang="kotlin" id="destructuring-declarations.md-c7e99d13"         >for ((key, value) in map) {\n   // do something with the key and the value\n}\n</div><p id="destructuring-declarations.md-e60d8d2a" >To make this work, you should</p><ul class="list _ul" id="destructuring-declarations.md-1829ae0c"   ><li class="list__item" id="destructuring-declarations.md-12978f75" ><p>Present the map as a sequence of values by providing an <code class="code " id="destructuring-declarations.md-34e81d2a"  >iterator()</code> function.</p></li><li class="list__item" id="destructuring-declarations.md-72525526" ><p>Present each of the elements as a pair by providing functions <code class="code " id="destructuring-declarations.md-49519dc6"  >component1()</code> and <code class="code " id="destructuring-declarations.md-db2b95e0"  >component2()</code>.</p></li></ul><p id="destructuring-declarations.md-ed5b316d" >And indeed, the standard library provides such extensions:</p><div class="code-block" data-lang="kotlin" id="destructuring-declarations.md-303c0070"         >operator fun &lt;K, V&gt; Map&lt;K, V&gt;.iterator(): Iterator&lt;Map.Entry&lt;K, V&gt;&gt; = entrySet().iterator()\noperator fun &lt;K, V&gt; Map.Entry&lt;K, V&gt;.component1() = getKey()\noperator fun &lt;K, V&gt; Map.Entry&lt;K, V&gt;.component2() = getValue()\n</div><p id="destructuring-declarations.md-6d28fdab" >So you can freely use destructuring declarations in <code class="code " id="destructuring-declarations.md-61a0171e"  >for</code> -loops with maps (as well as collections of data class instances or similar).</p></section><section class="chapter"  ><h2 id="destructuring-declarations.md-underscore-for-unused-variables" data-toc="destructuring-declarations#destructuring-declarations.md-underscore-for-unused-variables"  >Underscore for unused variables</h2><p id="destructuring-declarations.md-221eef17" >If you don\'t need a variable in the destructuring declaration, you can place an underscore instead of its name:</p><div class="code-block" data-lang="kotlin" id="destructuring-declarations.md-276f3e55"         >val (_, status) = getResult()\n</div><p id="destructuring-declarations.md-69266661" >The <code class="code " id="destructuring-declarations.md-acf30c71"  >componentN()</code> operator functions are not called for the components that are skipped in this way.</p></section><section class="chapter"  ><h2 id="destructuring-declarations.md-destructuring-in-lambdas" data-toc="destructuring-declarations#destructuring-declarations.md-destructuring-in-lambdas"  >Destructuring in lambdas</h2><p id="destructuring-declarations.md-149a2bee" >You can use the destructuring declarations syntax for lambda parameters. If a lambda has a parameter of the <code class="code " id="destructuring-declarations.md-7812605d"  >Pair</code> type (or <code class="code " id="destructuring-declarations.md-9be5d494"  >Map.Entry</code>, or any other type that has the appropriate <code class="code " id="destructuring-declarations.md-ea1f0d97"  >componentN</code> functions), you can introduce several new parameters instead of one by putting them in parentheses:</p><div class="code-block" data-lang="kotlin" id="destructuring-declarations.md-d581c5f6"         >map.mapValues { entry -&gt; &quot;${entry.value}!&quot; }\nmap.mapValues { (key, value) -&gt; &quot;$value!&quot; }\n</div><p id="destructuring-declarations.md-2c280d09" >Note the difference between declaring two parameters and declaring a destructuring pair instead of a parameter:</p><div class="code-block" data-lang="kotlin" id="destructuring-declarations.md-d3e3043b"         >{ a -&gt; ... } // one parameter\n{ a, b -&gt; ... } // two parameters\n{ (a, b) -&gt; ... } // a destructured pair\n{ (a, b), c -&gt; ... } // a destructured pair and another parameter\n</div><p id="destructuring-declarations.md-d154f04f" >If a component of the destructured parameter is unused, you can replace it with the underscore to avoid inventing its name:</p><div class="code-block" data-lang="kotlin" id="destructuring-declarations.md-b33ad706"         >map.mapValues { (_, value) -&gt; &quot;$value!&quot; }\n</div><p id="destructuring-declarations.md-baa6f88" >You can specify the type for the whole destructured parameter or for a specific component separately:</p><div class="code-block" data-lang="kotlin" id="destructuring-declarations.md-ce286457"         >map.mapValues { (_, value): Map.Entry&lt;Int, String&gt; -&gt; &quot;$value!&quot; }\n\nmap.mapValues { (_, value: String) -&gt; &quot;$value!&quot; }\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="reflection.md"  >Reflection</h1><p id="reflection.md-b9d0dac0" ><em id="reflection.md-a23bef1d" class=""  >Reflection</em> is a set of language and library features that allows for introspecting the structure of your own program at runtime. Kotlin makes functions and properties first-class citizens in the language, and introspecting them (for example, learning a name or a type of a property or function at runtime) is closely intertwined with simply using a functional or reactive style.</p><aside data-type="note" class="prompt" data-title="" id="reflection.md-37a562f1" ><p id="reflection.md-597b674e" >Kotlin/JS provides the limited support for reflection features. <a href="#js-reflection.md" id="reflection.md-63c914c"   >Learn more about reflection in Kotlin/JS</a>.</p></aside><section class="chapter"  ><h2 id="reflection.md-jvm-dependency" data-toc="reflection#reflection.md-jvm-dependency"  >JVM dependency</h2><p id="reflection.md-24f86dec" >On the JVM platform, the runtime component required for using the reflection features is distributed as a separate artifact <code class="code " id="reflection.md-f0e1e34b"  >kotlin-reflect.jar</code> in the Kotlin compiler distribution. This is done to reduce the required size of the runtime library for applications that do not use reflection features.</p><p id="reflection.md-c7ae89df" >To use reflection in a Gradle or Maven project, add the dependency on <code class="code " id="reflection.md-4ab49d79"  >kotlin-reflect</code>:</p><ul class="list _ul" id="reflection.md-940b947"   ><li class="list__item" id="reflection.md-e18f0d86" ><p id="reflection.md-e0d6fb1f" >In Gradle:</p><div class="tabs" id="reflection.md-b6c85b06" ><div class="tabs__content" data-gtm="tab" id="reflection.md-a4e50ff6"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="reflection.md-a4e50ff6"   data-title="Groovy"      >dependencies {\n    implementation &quot;org.jetbrains.kotlin:kotlin-reflect:1.4.32&quot;\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="reflection.md-12ada9d1"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="reflection.md-12ada9d1"   data-title="Kotlin"      >dependencies {\n    implementation(&quot;org.jetbrains.kotlin:kotlin-reflect:1.4.32&quot;)\n}\n</div></div></div></li><li class="list__item" id="reflection.md-bf2bc23c" ><p id="reflection.md-88838219" >In Maven:</p><div class="code-block" data-lang="markup" id="reflection.md-717646db"         >&lt;dependencies&gt;\n  &lt;dependency&gt;\n      &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n      &lt;artifactId&gt;kotlin-reflect&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</div></li></ul><p id="reflection.md-703a463" >If you don\'t use Gradle or Maven, make sure you have <code class="code " id="reflection.md-fea15d67"  >kotlin-reflect.jar</code> in the classpath of your project. In other supported cases (IntelliJ IDEA projects, using command-line compiler or Ant), it is added by default. In command-line compiler and Ant, you can use <code class="code " id="reflection.md-3cce7a67"  >-no-reflect</code> compiler option to exclude <code class="code " id="reflection.md-93609b5c"  >kotlin-reflect.jar</code> from the classpath.</p></section><section class="chapter"  ><h2 id="reflection.md-class-references" data-toc="reflection#reflection.md-class-references"  >Class references</h2><p id="reflection.md-652e689f" >The most basic reflection feature is getting the runtime reference to a Kotlin class. To obtain the reference to a statically known Kotlin class, you can use the <em id="reflection.md-a5d70080" class=""  >class literal</em> syntax:</p><div class="code-block" data-lang="kotlin" id="reflection.md-4853e950"         >val c = MyClass::class\n</div><p id="reflection.md-80a61b74" >The reference is a value of type <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/index.html" id="reflection.md-1ffa7a94"   data-external="true" rel="noopener noreferrer" >KClass</a>.</p><aside data-type="note" class="prompt" data-title="" id="reflection.md-f060dd40" ><p id="reflection.md-e6583198" >On JVM: a Kotlin class reference is not the same as a Java class reference. To obtain a Java class reference, use the <code class="code " id="reflection.md-c777e365"  >.java</code> property on a <code class="code " id="reflection.md-da13252e"  >KClass</code> instance.</p></aside><section class="chapter"  ><h3 id="reflection.md-bound-class-references" data-toc="reflection#reflection.md-bound-class-references"  >Bound class references</h3><p id="reflection.md-e5033b96" >You can get the reference to a class of a specific object with the same <code class="code " id="reflection.md-5cd376fe"  >::class</code> syntax by using the object as a receiver:</p><div class="code-block" data-lang="kotlin" id="reflection.md-eaa9253e"         >val widget: Widget = ...\nassert(widget is GoodWidget) { &quot;Bad widget: ${widget::class.qualifiedName}&quot; }\n</div><p id="reflection.md-79e8cfbd" >You obtain the reference to an exact class of an object, for instance <code class="code " id="reflection.md-aaa7c86f"  >GoodWidget</code> or <code class="code " id="reflection.md-d7334e47"  >BadWidget</code>, despite the type of the receiver expression (<code class="code " id="reflection.md-d1806658"  >Widget</code> ).</p></section></section><section class="chapter"  ><h2 id="reflection.md-callable-references" data-toc="reflection#reflection.md-callable-references"  >Callable references</h2><p id="reflection.md-4313c164" >References to functions, properties, and constructors, apart from introspecting the program structure, can also be called or used as instances of <a href="#lambdas.md-function-types" id="reflection.md-8d92bc7d"   >function types</a>.</p><p id="reflection.md-a21692ab" >The common supertype for all callable references is <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-callable/index.html" id="reflection.md-c7845fc"   data-external="true" rel="noopener noreferrer" ><code class="code " id="reflection.md-4b2f931e"  >KCallable&lt;out R&gt;</code></a>, where <code class="code " id="reflection.md-fc24ddbe"  >R</code> is the return value type, which is the property type for properties, and the constructed type for constructors.</p><section class="chapter"  ><h3 id="reflection.md-function-references" data-toc="reflection#reflection.md-function-references"  >Function references</h3><p id="reflection.md-39904259" >When you have a named function declared like this:</p><div class="code-block" data-lang="kotlin" id="reflection.md-dbd44246"         >fun isOdd(x: Int) = x % 2 != 0\n</div><p id="reflection.md-638590f5" >You can call it directly (<code class="code " id="reflection.md-58e3aa8d"  >isOdd(5)</code> ). Alternatively, you can use it as a function type value: pass it to another function. To do this, use the <code class="code " id="reflection.md-fe913a39"  >::</code> operator:</p><div class="code-block" data-lang="kotlin" id="reflection.md-51701217"        data-runnable="true" data-min-compiler-version="1.3"  >fun isOdd(x: Int) = x % 2 != 0\n\nfun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3)\n    println(numbers.filter(::isOdd))\n//sampleEnd\n}\n</div><p id="reflection.md-443d304" >Here <code class="code " id="reflection.md-f10afda3"  >::isOdd</code> is a value of function type <code class="code " id="reflection.md-c42e78a8"  >(Int) -&gt; Boolean</code>.</p><p id="reflection.md-b659f3d0" >Function references belong to one of the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-function/index.html" id="reflection.md-d2b47090"   data-external="true" rel="noopener noreferrer" ><code class="code " id="reflection.md-8ee1aa95"  >KFunction&lt;out R&gt;</code></a> subtypes, depending on the parameter count, for example, <code class="code " id="reflection.md-287dbdb7"  >KFunction3&lt;T1, T2, T3, R&gt;</code>.</p><p id="reflection.md-dae0b79" ><code class="code " id="reflection.md-e5e95970"  >::</code> can be used with overloaded functions when the expected type is known from the context. For example:</p><div class="code-block" data-lang="kotlin" id="reflection.md-f7d253e6"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    fun isOdd(x: Int) = x % 2 != 0\n    fun isOdd(s: String) = s == &quot;brillig&quot; || s == &quot;slithy&quot; || s == &quot;tove&quot;\n    \n    val numbers = listOf(1, 2, 3)\n    println(numbers.filter(::isOdd)) // refers to isOdd(x: Int)\n//sampleEnd\n}\n</div><p id="reflection.md-e61a3f20" >Alternatively, you can provide the necessary context by storing the method reference in a variable with an explicitly specified type:</p><div class="code-block" data-lang="kotlin" id="reflection.md-c3858c1a"         >val predicate: (String) -&gt; Boolean = ::isOdd   // refers to isOdd(x: String)\n</div><p id="reflection.md-132266cc" >If you need to use a member of a class, or an extension function, it needs to be qualified: <code class="code " id="reflection.md-93a0a676"  >String::toCharArray</code>.</p><p id="reflection.md-402930ad" >Note that even if you initialize a variable with a reference to an extension function, the inferred function type will have no receiver (it will have an additional parameter accepting a receiver object). To have a function type with receiver instead, specify the type explicitly:</p><div class="code-block" data-lang="kotlin" id="reflection.md-319ea248"         >val isEmptyStringList: List&lt;String&gt;.() -&gt; Boolean = List&lt;String&gt;::isEmpty \n</div><section class="chapter"  ><h4 id="reflection.md-example-function-composition" data-toc="reflection#reflection.md-example-function-composition"  >Example: function composition</h4><p id="reflection.md-de7d3428" >Consider the following function:</p><div class="code-block" data-lang="kotlin" id="reflection.md-6bf25838"         >fun &lt;A, B, C&gt; compose(f: (B) -&gt; C, g: (A) -&gt; B): (A) -&gt; C {\n    return { x -&gt; f(g(x)) }\n}\n</div><p id="reflection.md-ca73eeda" >It returns a composition of two functions passed to it: <code class="code " id="reflection.md-dbfff402"  >compose(f, g) = f(g(*))</code>. Now, you can apply it to callable references:</p><div class="code-block" data-lang="kotlin" id="reflection.md-e0db04a0"        data-runnable="true" data-min-compiler-version="1.3"  >fun &lt;A, B, C&gt; compose(f: (B) -&gt; C, g: (A) -&gt; B): (A) -&gt; C {\n    return { x -&gt; f(g(x)) }\n}\n\nfun isOdd(x: Int) = x % 2 != 0\n\nfun main() {\n//sampleStart\n    fun length(s: String) = s.length\n    \n    val oddLength = compose(::isOdd, ::length)\n    val strings = listOf(&quot;a&quot;, &quot;ab&quot;, &quot;abc&quot;)\n    \n    println(strings.filter(oddLength))\n//sampleEnd\n}\n</div></section></section><section class="chapter"  ><h3 id="reflection.md-property-references" data-toc="reflection#reflection.md-property-references"  >Property references</h3><p id="reflection.md-6ddcde28" >To access properties as first-class objects in Kotlin, use the <code class="code " id="reflection.md-f927afb9"  >::</code> operator:</p><div class="code-block" data-lang="kotlin" id="reflection.md-a8b3c9bd"         >val x = 1\n\nfun main() {\n    println(::x.get())\n    println(::x.name) \n}\n</div><p id="reflection.md-dfe93874" >The expression <code class="code " id="reflection.md-cc40d7b"  >::x</code> evaluates to a property object of type <code class="code " id="reflection.md-3264de15"  >KProperty&lt;Int&gt;</code>. You can read its value using <code class="code " id="reflection.md-62e434bc"  >get()</code> or retrieve the property name using the <code class="code " id="reflection.md-18fd16c7"  >name</code> property. For more information, see the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-property/index.html" id="reflection.md-91e51c17"   data-external="true" rel="noopener noreferrer" >docs on the <code class="code " id="reflection.md-91c682da"  >KProperty</code> class</a>.</p><p id="reflection.md-8462c6a5" >For a mutable property such as <code class="code " id="reflection.md-933befa3"  >var y = 1</code>, <code class="code " id="reflection.md-f9acb445"  >::y</code> returns a value of type <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-mutable-property/index.html" id="reflection.md-bdac60b3"   data-external="true" rel="noopener noreferrer" ><code class="code " id="reflection.md-4e3bae51"  >KMutableProperty&lt;Int&gt;</code></a>, which has a <code class="code " id="reflection.md-2d94da40"  >set()</code> method:</p><div class="code-block" data-lang="kotlin" id="reflection.md-a6ae0fa4"         >var y = 1\n\nfun main() {\n    ::y.set(2)\n    println(y)\n}\n</div><p id="reflection.md-8d98a5f5" >A property reference can be used where a function with a single generic parameter is expected:</p><div class="code-block" data-lang="kotlin" id="reflection.md-829d4de3"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val strs = listOf(&quot;a&quot;, &quot;bc&quot;, &quot;def&quot;)\n    println(strs.map(String::length))\n//sampleEnd\n}\n</div><p id="reflection.md-89a19386" >To access a property that is a member of a class, qualify it:</p><div class="code-block" data-lang="kotlin" id="reflection.md-4fc4d60"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    class A(val p: Int)\n    val prop = A::p\n    println(prop.get(A(1)))\n//sampleEnd\n}\n</div><p id="reflection.md-6a9c58bb" >For an extension property:</p><div class="code-block" data-lang="kotlin" id="reflection.md-c55a9e1b"        data-runnable="true" data-min-compiler-version="1.3"  >val String.lastChar: Char\n    get() = this[length - 1]\n\nfun main() {\n    println(String::lastChar.get(&quot;abc&quot;))\n}\n</div></section><section class="chapter"  ><h3 id="reflection.md-interoperability-with-java-reflection" data-toc="reflection#reflection.md-interoperability-with-java-reflection"  >Interoperability with Java reflection</h3><p id="reflection.md-b1d840cf" >On the JVM platform, standard library contains extensions for reflection classes that provide a mapping to and from Java reflection objects (see package <code class="code " id="reflection.md-870677a4"  >kotlin.reflect.jvm</code> ). For example, to find a backing field or a Java method that serves as a getter for a Kotlin property, you can write something like this:</p><div class="code-block" data-lang="kotlin" id="reflection.md-44dbe151"         >import kotlin.reflect.jvm.*\n \nclass A(val p: Int)\n \nfun main() {\n    println(A::p.javaGetter) // prints &quot;public final int A.getP()&quot;\n    println(A::p.javaField)  // prints &quot;private final int A.p&quot;\n}\n</div><p id="reflection.md-85dff2ec" >To get the Kotlin class corresponding to a Java class, use the <code class="code " id="reflection.md-2fd01af0"  >.kotlin</code> extension property:</p><div class="code-block" data-lang="kotlin" id="reflection.md-f229ec4c"         >fun getKClass(o: Any): KClass&lt;Any&gt; = o.javaClass.kotlin\n</div></section><section class="chapter"  ><h3 id="reflection.md-constructor-references" data-toc="reflection#reflection.md-constructor-references"  >Constructor references</h3><p id="reflection.md-55e756d5" >Constructors can be referenced just like methods and properties. You can use them wherever an object of function type is expected that takes the same parameters as the constructor and returns an object of the appropriate type. Constructors are referenced by using the <code class="code " id="reflection.md-f2d6f54b"  >::</code> operator and adding the class name. Consider the following function that expects a function parameter with no parameters and return type <code class="code " id="reflection.md-42f74579"  >Foo</code>:</p><div class="code-block" data-lang="kotlin" id="reflection.md-74361cdf"         >class Foo\n\nfun function(factory: () -&gt; Foo) {\n    val x: Foo = factory()\n}\n</div><p id="reflection.md-3538721b" >Using <code class="code " id="reflection.md-7e2fe649"  >::Foo</code>, the zero-argument constructor of the class <code class="code " id="reflection.md-9938563c"  >Foo</code>, you can call it like this:</p><div class="code-block" data-lang="kotlin" id="reflection.md-5f57d9bc"         >function(::Foo)\n</div><p id="reflection.md-ace24ad1" >Callable references to constructors are typed as one of the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-function/index.html" id="reflection.md-e5137f63"   data-external="true" rel="noopener noreferrer" ><code class="code " id="reflection.md-a5f2510c"  >KFunction&lt;out R&gt;</code></a> subtypes depending on the parameter count.</p></section><section class="chapter"  ><h3 id="reflection.md-bound-function-and-property-references" data-toc="reflection#reflection.md-bound-function-and-property-references"  >Bound function and property references</h3><p id="reflection.md-e919c92" >You can refer to an instance method of a particular object:</p><div class="code-block" data-lang="kotlin" id="reflection.md-4e9d42e3"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numberRegex = &quot;\\\\d+&quot;.toRegex()\n    println(numberRegex.matches(&quot;29&quot;))\n     \n    val isNumber = numberRegex::matches\n    println(isNumber(&quot;29&quot;))\n//sampleEnd\n}\n</div><p id="reflection.md-13a20419" >Instead of calling the method <code class="code " id="reflection.md-d08e1bc6"  >matches</code> directly, the example uses a reference to it. Such reference is bound to its receiver. It can be called directly (like in the example above) or used whenever an expression of function type is expected:</p><div class="code-block" data-lang="kotlin" id="reflection.md-6d498615"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numberRegex = &quot;\\\\d+&quot;.toRegex()\n    val strings = listOf(&quot;abc&quot;, &quot;124&quot;, &quot;a70&quot;)\n    println(strings.filter(numberRegex::matches))\n//sampleEnd\n}\n</div><p id="reflection.md-b71bc420" >Compare the types of bound and the corresponding unbound references. Bound callable reference has its receiver &quot;attached&quot; to it, so the type of the receiver is no longer a parameter:</p><div class="code-block" data-lang="kotlin" id="reflection.md-fd9958bc"         >val isNumber: (CharSequence) -&gt; Boolean = numberRegex::matches\n\nval matches: (Regex, CharSequence) -&gt; Boolean = Regex::matches\n</div><p id="reflection.md-cf28ae95" >Property reference can be bound as well:</p><div class="code-block" data-lang="kotlin" id="reflection.md-efcd02ee"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val prop = &quot;abc&quot;::length\n    println(prop.get())\n//sampleEnd\n}\n</div><p id="reflection.md-4d3ab41d" >You don\'t need to specify <code class="code " id="reflection.md-1c45328c"  >this</code> as the receiver: <code class="code " id="reflection.md-bb798470"  >this::foo</code> and <code class="code " id="reflection.md-b4354bf2"  >::foo</code> are equivalent.</p></section><section class="chapter"  ><h3 id="reflection.md-bound-constructor-references" data-toc="reflection#reflection.md-bound-constructor-references"  >Bound constructor references</h3><p id="reflection.md-d66ac259" >A bound callable reference to a constructor of an <a href="#nested-classes.md-inner-classes" id="reflection.md-7cb9b502"   >inner class</a> can be obtained by providing an instance of the outer class:</p><div class="code-block" data-lang="kotlin" id="reflection.md-b2173596"         >class Outer {\n    inner class Inner\n}\n\nval o = Outer()\nval boundInnerCtor = o::Inner\n</div></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="mpp-intro.md"  >Kotlin Multiplatform</h1><aside data-type="note" class="prompt" data-title="" id="mpp-intro.md-989a790" ><p id="mpp-intro.md-2b778e5" >Multiplatform projects are in <a href="#components-stability.md" id="mpp-intro.md-f7ce221b"   >Alpha</a>. Language features and tooling may change in future Kotlin versions.</p></aside><p id="mpp-intro.md-193f386f" >Support for multiplatform programming is one of Kotlin’s key benefits. It reduces time spent writing and maintaining the same code for <a href="#mpp-supported-platforms.md" id="mpp-intro.md-9c764471"   >different platforms</a> while retaining the flexibility and benefits of native programming. Learn more about <a href="#multiplatform.md" id="mpp-intro.md-aa7af62"   >Kotlin Mutliplatform benefits</a>.</p><p id="mpp-intro.md-2a1539dd" >With Kotlin Multiplatform, share the code using the mechanisms Kotlin provides:</p><ul class="list _ul" id="mpp-intro.md-d9c1a3bd"   ><li class="list__item" id="mpp-intro.md-e774b9c4" ><p id="mpp-intro.md-c6482e25" ><a href="#mpp-share-on-platforms.md-share-code-on-all-platforms" id="mpp-intro.md-c02eea2c"   >Share code among all platforms used in your project</a>. Use it for sharing the common business logic that applies to all platforms.</p><p id="mpp-intro.md-888a1069" ><figure title="Code shared for all platforms"><img alt="Code shared for all platforms" title="Code shared for all platforms" id="mpp-intro.md-8fddf4a1" src="images/flat-structure.png"  class="" width="2322" height="992" /></figure></p></li><li class="list__item" id="mpp-intro.md-31815b26" ><p id="mpp-intro.md-fa81f389" ><a href="#mpp-share-on-platforms.md-share-code-on-similar-platforms" id="mpp-intro.md-868dca3c"   >Share code among some platforms</a> included in your project but not all. You can reuse much of the code in similar platforms using a hierarchical structure. You can use <a href="#mpp-share-on-platforms.md-use-target-shortcuts" id="mpp-intro.md-d29060a8"   >target shortcuts</a> for common combinations of targets or <a href="#mpp-share-on-platforms.md-configure-the-hierarchical-structure-manually" id="mpp-intro.md-31fd4f94"   >create the hierarchical structure manually</a>.</p><p id="mpp-intro.md-b71c02a2" ><figure title="Code shared for iOS targets"><img alt="Code shared for iOS targets" title="Code shared for iOS targets" id="mpp-intro.md-c783381f" src="images/iosmain-hierarchy.png"  class="" width="400" height="343" /></figure></p><p id="mpp-intro.md-2c31f5b2" ><figure title="Hierarchical structure"><img alt="Hierarchical structure" title="Hierarchical structure" id="mpp-intro.md-5ed715b6" src="images/hierarchical-structure.png"  class="" width="1328" height="796" /></figure></p></li></ul><p id="mpp-intro.md-faea3b2" >If you need to access platform-specific APIs from the shared code, use the Kotlin mechanism of <a href="#mpp-connect-to-apis.md" id="mpp-intro.md-56605979"   >expected and actual declarations</a>.</p><section class="chapter"  ><h2 id="mpp-intro.md-tutorials" data-toc="mpp-intro#mpp-intro.md-tutorials"  >Tutorials</h2><ul class="list _ul" id="mpp-intro.md-243acef5"   ><li class="list__item" id="mpp-intro.md-8cc10a3" ><p id="mpp-intro.md-991320a" ><a href="#multiplatform-library.md" id="mpp-intro.md-baac04a6"   >Creating a multiplatform Kotlin library</a> teaches how to create a multiplatform library available for JVM, JS, and Native and which can be used from any other common code (for example, shared with Android and iOS). It also shows how to write tests which will be executed on all platforms and use an efficient implementation provided by a specific platform.</p></li><li class="list__item" id="mpp-intro.md-1092a9dd" ><p id="mpp-intro.md-ad8f3759" ><a href="https://play.kotlinlang.org/hands-on/Full%20Stack%20Web%20App%20with%20Kotlin%20Multiplatform/01_Introduction" id="mpp-intro.md-196e2634"   data-external="true" rel="noopener noreferrer" >Building a Full Stack Web App with Kotlin Multiplatform</a> teaches the concepts behind building an application that targets Kotlin/JVM and Kotlin/JS by building a client-server application that makes use of shared code, serialization, and other multiplatform paradigms. It also provides a brief introduction to working with Ktor both as a server- and client-side framework.</p></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="mpp-create-lib.md"  >Create a multiplatform library</h1><p id="mpp-create-lib.md-8ffa3490" >This section provides steps for creating a multiplatform library. You can also complete the <a href="#multiplatform-library.md" id="mpp-create-lib.md-e088c3a2"   >tutorial</a> where you will create a multiplatform library, test it, and publish it to Maven.</p><ol class="list _decimal" id="mpp-create-lib.md-7f215ca1"   ><li class="list__item" id="mpp-create-lib.md-d612db5a" ><p id="mpp-create-lib.md-ad60db5c" >In IntelliJ IDEA, select <b id="mpp-create-lib.md-c7750bf8" class=""  >File</b> | <b id="mpp-create-lib.md-9a9147c4" class=""  >New</b> | <b id="mpp-create-lib.md-8da1503" class=""  >Project</b>.</p></li><li class="list__item" id="mpp-create-lib.md-cb14de11" ><p id="mpp-create-lib.md-5852934" >In the panel on the left, select <b id="mpp-create-lib.md-edf9e85e" class=""  >Kotlin</b>.</p></li><li class="list__item" id="mpp-create-lib.md-ab2a5092" ><p id="mpp-create-lib.md-a31d32f6" >Enter a project name, then in the <b id="mpp-create-lib.md-5ff78c27" class=""  >Multiplatform</b> section select <b id="mpp-create-lib.md-9c5371a7" class=""  >Library</b> as the project template.</p><p id="mpp-create-lib.md-1bd042f7" ><figure title="Select a project template"><img alt="Select a project template" title="Select a project template" id="mpp-create-lib.md-97182e3b" src="images/mpp-project-1.png"  class="" width="2028" height="1262" /></figure></p></li><li class="list__item" id="mpp-create-lib.md-765b2fe9" ><p id="mpp-create-lib.md-69fb9c7e" >Select the Gradle DSL – Kotlin or Groovy.</p></li><li class="list__item" id="mpp-create-lib.md-46ce5465" ><p id="mpp-create-lib.md-f447062" >Click <b id="mpp-create-lib.md-505edd84" class=""  >Next</b>.</p></li></ol><p id="mpp-create-lib.md-592d7a58" >You can finish creating the project by clicking <b id="mpp-create-lib.md-3d2a5642" class=""  >Finish</b> on the next screen or configure it if necessary:</p><ol class="list _decimal" id="mpp-create-lib.md-3472df"   start="6"><li class="list__item" id="mpp-create-lib.md-bc7a0df1" ><p id="mpp-create-lib.md-142ef2a0" >Add the target platforms and modules by clicking the + icon.</p></li><li class="list__item" id="mpp-create-lib.md-76f4881b" ><p id="mpp-create-lib.md-65afefcc" >Configure target settings, such as the target template, JVM target version, and test framework.</p><p id="mpp-create-lib.md-a3fce0d5" ><figure title="Configure the project"><img alt="Configure the project" title="Configure the project" id="mpp-create-lib.md-1035467a" src="images/mpp-project-2.png"  class="" width="2046" height="1120" /></figure></p></li><li class="list__item" id="mpp-create-lib.md-6421dfc1" ><p id="mpp-create-lib.md-2f4611a2" >If necessary, specify dependencies between modules:</p><ul class="list _ul" id="mpp-create-lib.md-4f52e273"   ><li class="list__item" id="mpp-create-lib.md-72915d64" ><p>Multiplatform and Android modules</p></li><li class="list__item" id="mpp-create-lib.md-6344f63e" ><p>Multiplatform and iOS modules</p></li><li class="list__item" id="mpp-create-lib.md-da8ff469" ><p>JVM modules</p></li></ul><p id="mpp-create-lib.md-c9b480b8" ><figure title="Add module dependencies"><img alt="Add module dependencies" title="Add module dependencies" id="mpp-create-lib.md-7b34ca1a" src="images/mpp-project-3.png"  class="" width="2046" height="1120" /></figure></p></li><li class="list__item" id="mpp-create-lib.md-39dad4f" ><p id="mpp-create-lib.md-7702d767" >Click <b id="mpp-create-lib.md-b6572ae2" class=""  >Finish</b>.</p></li></ol><p id="mpp-create-lib.md-8a5abdf" >The new project opens.</p><section class="chapter"  ><h2 id="mpp-create-lib.md-what-s-next" data-toc="mpp-create-lib#mpp-create-lib.md-what-s-next"  >What\'s next?</h2><ul class="list _ul" id="mpp-create-lib.md-65553616"   ><li class="list__item" id="mpp-create-lib.md-6494700b" ><p><a href="#mpp-discover-project.md" id="mpp-create-lib.md-bfd8a0fb"   >Understand the multiplatform project structure</a>.</p></li><li class="list__item" id="mpp-create-lib.md-8a5a4b4f" ><p><a href="#multiplatform-library.md" id="mpp-create-lib.md-b08c614f"   >Create and publish a multiplatform library – tutorial</a>.</p></li><li class="list__item" id="mpp-create-lib.md-b046e1b5" ><p><a href="https://kotlinlang.org/docs/mobile/create-first-app.html" id="mpp-create-lib.md-78541bde"   data-external="true" rel="noopener noreferrer" >Create your first KMM application for Android and iOS – tutorial</a>.</p></li><li class="list__item" id="mpp-create-lib.md-d6213f" ><p><a href="https://play.kotlinlang.org/hands-on/Full%20Stack%20Web%20App%20with%20Kotlin%20Multiplatform/01_Introduction" id="mpp-create-lib.md-28c79ef2"   data-external="true" rel="noopener noreferrer" >Create a full-stack web app with Kotlin Multiplatform – hands-on tutorial</a>.</p></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="mpp-discover-project.md"  >Discover your project</h1><p id="mpp-discover-project.md-23e95523" >Discover main parts of your multiplatform project:</p><ul class="list _ul" id="mpp-discover-project.md-3e91ece8"   ><li class="list__item" id="mpp-discover-project.md-e0b818e1" ><a href="#mpp-discover-project.md-multiplatform-plugin" id="mpp-discover-project.md-78aa7e3c"   >Multiplatform plugin</a></li><li class="list__item" id="mpp-discover-project.md-4b9e7353" ><a href="#mpp-discover-project.md-targets" id="mpp-discover-project.md-452b8de5"   >Targets</a></li><li class="list__item" id="mpp-discover-project.md-dd618072" ><a href="#mpp-discover-project.md-source-sets" id="mpp-discover-project.md-b38b6cfd"   >Source sets</a></li><li class="list__item" id="mpp-discover-project.md-8d11191f" ><a href="#mpp-discover-project.md-compilations" id="mpp-discover-project.md-23e80dc1"   >Compilations</a></li></ul><section class="chapter"  ><h2 id="mpp-discover-project.md-multiplatform-plugin" data-toc="mpp-discover-project#mpp-discover-project.md-multiplatform-plugin"  >Multiplatform plugin</h2><p id="mpp-discover-project.md-c141695" >When you <a href="#mpp-create-lib.md" id="mpp-discover-project.md-3fba71b"   >create a multiplatform project</a>, the Project Wizard automatically applies the <code class="code " id="mpp-discover-project.md-d387a27b"  >kotlin-multiplatform</code> Gradle plugin in the file <code class="code " id="mpp-discover-project.md-f189366a"  >build.gradle</code> (<code class="code " id="mpp-discover-project.md-55882d68"  >.kts</code> ).</p><p id="mpp-discover-project.md-e0f63fac" >You can also apply it manually.</p><aside data-type="note" class="prompt" data-title="" id="mpp-discover-project.md-c0936de2" ><p id="mpp-discover-project.md-e540218f" >The <code class="code " id="mpp-discover-project.md-4c9e5cd3"  >kotlin-multiplatform</code> plugin works with Gradle 6.0 or later.</p></aside><div class="tabs" id="mpp-discover-project.md-ec112152" ><div class="tabs__content" data-gtm="tab" id="mpp-discover-project.md-1fb8beb4"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-discover-project.md-1fb8beb4"   data-title="Groovy"      >plugins {\n    id \'org.jetbrains.kotlin.multiplatform\' version \'1.4.32\'\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-discover-project.md-6ec40448"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-discover-project.md-6ec40448"   data-title="Kotlin"      >plugins {\n    kotlin(&quot;multiplatform&quot;) version &quot;1.4.32&quot;\n}\n</div></div></div><p id="mpp-discover-project.md-156d3ad5" >The <code class="code " id="mpp-discover-project.md-46febd7c"  >kotlin-multiplatform</code> plugin configures the project for creating an application or library to work on multiple platforms and prepares it for building on these platforms.</p><p id="mpp-discover-project.md-aa93008e" >In the file <code class="code " id="mpp-discover-project.md-256947d6"  >build.gradle</code> (<code class="code " id="mpp-discover-project.md-4e63bafd"  >.kts</code> ), it creates the <code class="code " id="mpp-discover-project.md-a78c097a"  >kotlin</code> extension at the top level, which includes configuration for <a href="#mpp-discover-project.md-targets" id="mpp-discover-project.md-b931a3c2"   >targets</a>, <a href="#mpp-discover-project.md-source-sets" id="mpp-discover-project.md-1235c008"   >source sets</a>, and dependencies.</p></section><section class="chapter"  ><h2 id="mpp-discover-project.md-targets" data-toc="mpp-discover-project#mpp-discover-project.md-targets"  >Targets</h2><p id="mpp-discover-project.md-e9f19b47" >A multiplatform project is aimed at multiple platforms that are represented by different targets. A target is part of the build that is responsible for building, testing, and packaging the application for a specific platform, such as macOS, iOS, or Android. See the list of <a href="#mpp-supported-platforms.md" id="mpp-discover-project.md-4a151b25"   >supported platforms</a>.</p><p id="mpp-discover-project.md-d5d16931" >When you create a multiplatform project, targets are added to the <code class="code " id="mpp-discover-project.md-c079f152"  >kotlin</code> block in the file <code class="code " id="mpp-discover-project.md-3e17648a"  >build.gradle</code> (<code class="code " id="mpp-discover-project.md-5bf78556"  >build.gradle.kts</code> ).</p><div class="code-block" data-lang="kotlin" id="mpp-discover-project.md-31deee4d"         >kotlin {\n    jvm()    \n    js {\n        browser {}\n    }\n }\n</div><p id="mpp-discover-project.md-11aeddff" >Learn how to <a href="#mpp-set-up-targets.md" id="mpp-discover-project.md-77673238"   >set up targets manually</a>.</p></section><section class="chapter"  ><h2 id="mpp-discover-project.md-source-sets" data-toc="mpp-discover-project#mpp-discover-project.md-source-sets"  >Source sets</h2><p id="mpp-discover-project.md-98382acb" >The project includes the directory <code class="code " id="mpp-discover-project.md-b4e01ec2"  >src</code> with Kotlin source sets, which are collections of Kotlin code files, along with their resources, dependencies, and language settings. A source set can be used in Kotlin compilations for one or more target platforms.</p><p id="mpp-discover-project.md-75ce1759" >Each source set directory includes Kotlin code files (the <code class="code " id="mpp-discover-project.md-3ad616e2"  >kotlin</code> directory) and <code class="code " id="mpp-discover-project.md-588c2511"  >resources</code>. The Project Wizard creates default source sets for the <code class="code " id="mpp-discover-project.md-cca77228"  >main</code> and <code class="code " id="mpp-discover-project.md-42144700"  >test</code> compilations of the common code and all added targets.</p><p id="mpp-discover-project.md-af5c404d" ><figure title="Source sets"><img alt="Source sets" title="Source sets" id="mpp-discover-project.md-ebc1a84a" src="images/source-sets.png"  class="" width="300" height="367" /></figure></p><aside data-type="note" class="prompt" data-title="" id="mpp-discover-project.md-e56be1" ><p id="mpp-discover-project.md-34785d8c" >Source set names are case sensitive.</p></aside><p id="mpp-discover-project.md-56110cdb" >Source sets are added to the <code class="code " id="mpp-discover-project.md-803c803a"  >sourceSets</code> block of the top-level <code class="code " id="mpp-discover-project.md-174daebb"  >kotlin</code> block.</p><div class="tabs" id="mpp-discover-project.md-26472a41" ><div class="tabs__content" data-gtm="tab" id="mpp-discover-project.md-f24e2b66"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-discover-project.md-f24e2b66"   data-title="Groovy"      >kotlin {\n    sourceSets {\n        commonMain { /* ... */} \n        commonTest { /* ... */}\n        jvmMain { /* ... */}\n        jvmTest { /* ... */ }\n        jsMain { /* ... */}\n        jsTest { /* ... */}    \n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-discover-project.md-a1f56513"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-discover-project.md-a1f56513"   data-title="Kotlin"      >kotlin {\n    sourceSets {\n        val commonMain by getting { /* ... */ }\n        val commonTest by getting { /* ... */ }\n        val jvmMain by getting { /* ... */ }\n        val jvmTest by getting { /* ... */ } \n        val jsMain by getting { /* ... */ }\n        val jsTest by getting { /* ... */ } \n    }\n}\n</div></div></div><p id="mpp-discover-project.md-be28a3df" >Source sets form a hierarchy, which is used for sharing the common code. In a source set shared among several targets, you can use the platform-specific language features and dependencies that are available for all these targets.</p><p id="mpp-discover-project.md-ccec2377" >For example, all Kotlin/Native features are available in the <code class="code " id="mpp-discover-project.md-9bd9f200"  >desktopMain</code> source set, which targets the Linux (<code class="code " id="mpp-discover-project.md-c8b01bc6"  >linuxX64</code> ), Windows (<code class="code " id="mpp-discover-project.md-6b9d8d9a"  >mingwX64</code> ), and macOS (<code class="code " id="mpp-discover-project.md-cd722f1e"  >macosX64</code>) platforms.</p><p id="mpp-discover-project.md-4b7c5561" ><figure title="Hierarchical structure"><img alt="Hierarchical structure" title="Hierarchical structure" id="mpp-discover-project.md-1ef79ed1" src="images/hierarchical-structure.png"  class="" width="1328" height="796" /></figure></p><p id="mpp-discover-project.md-7a297759" >Learn how to <a href="#mpp-share-on-platforms.md-share-code-on-similar-platforms" id="mpp-discover-project.md-a0a8da86"   >build the hierarchy of source sets</a>.</p></section><section class="chapter"  ><h2 id="mpp-discover-project.md-compilations" data-toc="mpp-discover-project#mpp-discover-project.md-compilations"  >Compilations</h2><p id="mpp-discover-project.md-6b76ea1c" >Each target can have one or more compilations, for example, for production and test purposes.</p><p id="mpp-discover-project.md-5c9a7128" >For each target, default compilations include:</p><ul class="list _ul" id="mpp-discover-project.md-2e4c3038"   ><li class="list__item" id="mpp-discover-project.md-363c7a9b" ><p><code class="code " id="mpp-discover-project.md-a608c1ee"  >main</code> and <code class="code " id="mpp-discover-project.md-2fbbf08"  >test</code> compilations for JVM, JS, and Native targets.</p></li><li class="list__item" id="mpp-discover-project.md-4a2291e8" ><p>A compilation per <a href="https://developer.android.com/studio/build/build-variants" id="mpp-discover-project.md-d1122abf"   data-external="true" rel="noopener noreferrer" >Android build variant</a>, for Android targets.</p></li></ul><p id="mpp-discover-project.md-f265f870" ><figure title="Compilations"><img alt="Compilations" title="Compilations" id="mpp-discover-project.md-5f75884e" src="images/compilations.png"  class="" width="1462" height="874" /></figure></p><p id="mpp-discover-project.md-574d0dbb" >Each compilation has a default source set, which contains sources and dependencies specific to that compilation.</p><p id="mpp-discover-project.md-483e5a83" >Learn how to <a href="#mpp-configure-compilations.md" id="mpp-discover-project.md-81178409"   >configure compilations</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="mpp-share-on-platforms.md"  >Share code on platforms</h1><p id="mpp-share-on-platforms.md-2a0728dc" >With Kotlin Multiplatform, you can share the code using the mechanisms Kotlin provides:</p><ul class="list _ul" id="mpp-share-on-platforms.md-37a60b55"   ><li class="list__item" id="mpp-share-on-platforms.md-1aa0a3ea" ><p><a href="#mpp-share-on-platforms.md-share-code-on-all-platforms" id="mpp-share-on-platforms.md-5e05d05c"   >Share code among all platforms used in your project</a>. Use it for sharing the common business logic that applies to all platforms.</p></li><li class="list__item" id="mpp-share-on-platforms.md-bc870083" ><p><a href="#mpp-share-on-platforms.md-share-code-on-similar-platforms" id="mpp-share-on-platforms.md-23c2a803"   >Share code among some platforms</a> included in your project but not all. You can reuse much of the code in similar platforms using a hierarchical structure. You can use <a href="#mpp-share-on-platforms.md-use-target-shortcuts" id="mpp-share-on-platforms.md-bca8b033"   >target shortcuts</a> for common combinations of targets or <a href="#mpp-share-on-platforms.md-configure-the-hierarchical-structure-manually" id="mpp-share-on-platforms.md-91ced07"   >create the hierarchical structure manually</a>.</p></li></ul><p id="mpp-share-on-platforms.md-3d7ab961" >If you need to access platform-specific APIs from the shared code, use the Kotlin mechanism of <a href="#mpp-connect-to-apis.md" id="mpp-share-on-platforms.md-ff1187c1"   >expected and actual declarations</a>.</p><section class="chapter"  ><h2 id="mpp-share-on-platforms.md-share-code-on-all-platforms" data-toc="mpp-share-on-platforms#mpp-share-on-platforms.md-share-code-on-all-platforms"  >Share code on all platforms</h2><p id="mpp-share-on-platforms.md-8d890660" >If you have business logic that is common for all platforms, you don’t need to write the same code for each platform – just share it in the common source set.</p><p id="mpp-share-on-platforms.md-921e8213" ><figure title="Code shared for all platforms"><img alt="Code shared for all platforms" title="Code shared for all platforms" id="mpp-share-on-platforms.md-36defbaf" src="images/flat-structure.png"  class="" width="2322" height="992" /></figure></p><p id="mpp-share-on-platforms.md-d27354a6" >All platform-specific source sets depend on the common source set by default. You don’t need to specify any <code class="code " id="mpp-share-on-platforms.md-e74a7fbe"  >dependsOn</code> relations manually for default source sets, such as <code class="code " id="mpp-share-on-platforms.md-2f5d80fb"  >jvmMain</code>, <code class="code " id="mpp-share-on-platforms.md-438ccb11"  >macosX64Main</code>, and others.</p><p id="mpp-share-on-platforms.md-7cc5cf73" >If you need to access platform-specific APIs from the shared code, use the Kotlin mechanism of <a href="#mpp-connect-to-apis.md" id="mpp-share-on-platforms.md-8b95083f"   >expected and actual declarations</a>.</p></section><section class="chapter"  ><h2 id="mpp-share-on-platforms.md-share-code-on-similar-platforms" data-toc="mpp-share-on-platforms#mpp-share-on-platforms.md-share-code-on-similar-platforms"  >Share code on similar platforms</h2><p id="mpp-share-on-platforms.md-95a18ab2" >You often need to create several native targets that could potentially reuse a lot of the common logic and third-party APIs.</p><p id="mpp-share-on-platforms.md-44a102d3" >For example, in a typical multiplatform project targeting iOS, there are two iOS-related targets: one is for iOS ARM64 devices, the other is for the x64 simulator. They have separate platform-specific source sets, but in practice there is rarely a need for different code for the device and simulator, and their dependencies are much the same. So iOS-specific code could be shared between them.</p><p id="mpp-share-on-platforms.md-9ae5fca" >Evidently, in this setup it would be desirable to have a shared source set for two iOS targets, with Kotlin/Native code that could still directly call any of the APIs that are common to both the iOS device and the simulator.</p><p id="mpp-share-on-platforms.md-aeeb3c9d" >In this case, you can share code across native targets in your project using the hierarchical structure.</p><p id="mpp-share-on-platforms.md-db875ae6" >To enable the hierarchy structure support, add the following flag to your <code class="code " id="mpp-share-on-platforms.md-d86e4043"  >gradle.properties</code>.</p><div class="code-block" data-lang="kotlin" id="mpp-share-on-platforms.md-4a36da1c"         >kotlin.mpp.enableGranularSourceSetsMetadata=true\n</div><p id="mpp-share-on-platforms.md-5d6dcedd" >There are two ways you can create the hierarchical structure:</p><ul class="list _ul" id="mpp-share-on-platforms.md-c348927e"   ><li class="list__item" id="mpp-share-on-platforms.md-a35951b1" ><p><a href="#mpp-share-on-platforms.md-use-target-shortcuts" id="mpp-share-on-platforms.md-7d3a27ef"   >Use target shortcuts</a> to easily create the hierarchy structure for common combinations of native targets.</p></li><li class="list__item" id="mpp-share-on-platforms.md-f49f1b80" ><p><a href="#mpp-share-on-platforms.md-configure-the-hierarchical-structure-manually" id="mpp-share-on-platforms.md-43b1ae89"   >Configure the hierarchical structure manually</a>.</p></li></ul><p id="mpp-share-on-platforms.md-9103c345" >Learn more about <a href="#mpp-share-on-platforms.md-share-code-in-libraries" id="mpp-share-on-platforms.md-3447edc9"   >sharing code in libraries</a> and <a href="#mpp-share-on-platforms.md-use-native-libraries-in-the-hierarchical-structure" id="mpp-share-on-platforms.md-f774a40f"   >using Native libraries in the hierarchical structure</a>.</p><aside data-type="note" class="prompt" data-title="" id="mpp-share-on-platforms.md-cf42e42" ><p id="mpp-share-on-platforms.md-f646e847" >Due to a <a href="https://youtrack.jetbrains.com/issue/KT-40975" id="mpp-share-on-platforms.md-7e709997"   data-external="true" rel="noopener noreferrer" >known issue</a>, you won\'t be able to use IDE features, such as code completion and highlighting, for the shared native source set in a multiplatform project with hierarchical structure support if your project depends on:</p><ul class="list _ul" id="mpp-share-on-platforms.md-760e15a5"   ><li class="list__item" id="mpp-share-on-platforms.md-72f7f0c6" ><p>Multiplatform libraries that don\'t support the hierarchical structure.</p></li><li class="list__item" id="mpp-share-on-platforms.md-f0d2ae31" ><p>Third-party native libraries, with the exception of <a href="#native-platform-libs.md" id="mpp-share-on-platforms.md-388d9741"   >platform libraries</a> supported out of the box.</p></li></ul><p id="mpp-share-on-platforms.md-337cfa" >This issue applies only to the shared native source set. The IDE will correctly support the rest of the code.</p><p id="mpp-share-on-platforms.md-a7e35884" >Learn how to <a href="https://kotlinlang.org/docs/mobile/add-dependencies.html#workaround-to-enable-ide-support-for-the-shared-ios-source-set" id="mpp-share-on-platforms.md-7f57a5ac"   data-external="true" rel="noopener noreferrer" >work around this issue</a> for similar source sets, such as <code class="code " id="mpp-share-on-platforms.md-f3d7fad0"  >iosArm64</code> and <code class="code " id="mpp-share-on-platforms.md-7714269f"  >iosX64</code>.</p></aside><section class="chapter"  ><h3 id="mpp-share-on-platforms.md-use-target-shortcuts" data-toc="mpp-share-on-platforms#mpp-share-on-platforms.md-use-target-shortcuts"  >Use target shortcuts</h3><p id="mpp-share-on-platforms.md-7ae5011" >In a typical multiplatform project with two iOS-related targets – <code class="code " id="mpp-share-on-platforms.md-aa0ef1f1"  >iosArm64</code> and <code class="code " id="mpp-share-on-platforms.md-688811e1"  >iosX64</code>, the hierarchical structure includes an intermediate source set (<code class="code " id="mpp-share-on-platforms.md-cdab29a8"  >iosMain</code> ), which is used by the platform-specific source sets.</p><p id="mpp-share-on-platforms.md-8e6011e0" ><figure title="Code shared for iOS targets"><img alt="Code shared for iOS targets" title="Code shared for iOS targets" id="mpp-share-on-platforms.md-e9b5077f" src="images/iosmain-hierarchy.png"  class="" width="400" height="343" /></figure></p><p id="mpp-share-on-platforms.md-f3fe5819" >The <code class="code " id="mpp-share-on-platforms.md-c5b33e31"  >kotlin-multiplatform</code> plugin provides target shortcuts for creating structures for common combinations of targets.</p><div class="table-wrapper" ><table class=" wide" id="mpp-share-on-platforms.md-bf47cb8d"  ><thead><tr class="ijRowHead" id="mpp-share-on-platforms.md-e9c33b3" ><th id="mpp-share-on-platforms.md-e03af2ea"    >Target shortcut</th><th id="mpp-share-on-platforms.md-36fe7a0e"    >Targets</th></tr></thead><tbody ><tr class="" id="mpp-share-on-platforms.md-17fc2dca" ><td id="mpp-share-on-platforms.md-afa25c81"    ><code class="code " id="mpp-share-on-platforms.md-ce44b27b"  >ios</code></td><td id="mpp-share-on-platforms.md-66e2694c"    ><code class="code " id="mpp-share-on-platforms.md-e8e63d10"  >iosArm64</code>, <code class="code " id="mpp-share-on-platforms.md-65e01ec8"  >iosX64</code></td></tr><tr class="" id="mpp-share-on-platforms.md-c980a2af" ><td id="mpp-share-on-platforms.md-568dfac8"    ><code class="code " id="mpp-share-on-platforms.md-91f83a3f"  >watchos</code></td><td id="mpp-share-on-platforms.md-3cf58a46"    ><code class="code " id="mpp-share-on-platforms.md-2eb993db"  >watchosArm32</code>, <code class="code " id="mpp-share-on-platforms.md-ccfc9aa8"  >watchosArm64</code>, <code class="code " id="mpp-share-on-platforms.md-66a65abf"  >watchosX64</code></td></tr><tr class="" id="mpp-share-on-platforms.md-437f0319" ><td id="mpp-share-on-platforms.md-376d0985"    ><code class="code " id="mpp-share-on-platforms.md-d9ebf3d3"  >tvos</code></td><td id="mpp-share-on-platforms.md-2b485ee8"    ><code class="code " id="mpp-share-on-platforms.md-f6f0224d"  >tvosArm64</code>, <code class="code " id="mpp-share-on-platforms.md-ec31d16f"  >tvosX64</code></td></tr></tbody ></table ></div><p id="mpp-share-on-platforms.md-e6e7d4a3" >All shortcuts create similar hierarchical structures in the code. For example, the <code class="code " id="mpp-share-on-platforms.md-f493aaa4"  >ios</code> shortcut creates the following hierarchical structure:</p><div class="tabs" id="mpp-share-on-platforms.md-be38bb7" ><div class="tabs__content" data-gtm="tab" id="mpp-share-on-platforms.md-204286d3"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-share-on-platforms.md-204286d3"   data-title="Groovy"      >kotlin {\n    sourceSets{\n        iosMain {\n            dependsOn(commonMain)\n            iosX64Main.dependsOn(it)\n            iosArm64Main.dependsOn(it)\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-share-on-platforms.md-3de32ad9"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-share-on-platforms.md-3de32ad9"   data-title="Kotlin"      >kotlin {\n    sourceSets{\n        val commonMain by sourceSets.getting\n        val iosX64Main by sourceSets.getting\n        val iosArm64Main by sourceSets.getting\n        val iosMain by sourceSets.creating {\n            dependsOn(commonMain)\n            iosX64Main.dependsOn(this)\n            iosArm64Main.dependsOn(this)\n        }\n    }\n}\n</div></div></div></section><section class="chapter"  ><h3 id="mpp-share-on-platforms.md-configure-the-hierarchical-structure-manually" data-toc="mpp-share-on-platforms#mpp-share-on-platforms.md-configure-the-hierarchical-structure-manually"  >Configure the hierarchical structure manually</h3><p id="mpp-share-on-platforms.md-c60bc453" >To create the hierarchical structure manually, introduce an intermediate source set that holds the shared code for several targets and create a structure of the source sets including the intermediate one.</p><p id="mpp-share-on-platforms.md-abc5a8b" ><figure title="Hierarchical structure"><img alt="Hierarchical structure" title="Hierarchical structure" id="mpp-share-on-platforms.md-ff23f1c6" src="images/hierarchical-structure.png"  class="" width="1328" height="796" /></figure></p><p id="mpp-share-on-platforms.md-a831cd00" >For example, if you want to share code among native Linux, Windows, and macOS targets – <code class="code " id="mpp-share-on-platforms.md-b81685ef"  >linuxX64M</code>, <code class="code " id="mpp-share-on-platforms.md-78d04ad1"  >mingwX64</code>, and <code class="code " id="mpp-share-on-platforms.md-a1c15dee"  >macosX64</code>:</p><ol class="list _decimal" id="mpp-share-on-platforms.md-5eae9a04"   ><li class="list__item" id="mpp-share-on-platforms.md-529813c3" ><p>Add the intermediate source set <code class="code " id="mpp-share-on-platforms.md-d619f5f6"  >desktopMain</code> that holds the shared logic for these targets.</p></li><li class="list__item" id="mpp-share-on-platforms.md-c6964c6e" ><p>Specify the hierarchy of source sets using the <code class="code " id="mpp-share-on-platforms.md-8a8cfa5c"  >dependsOn</code> relation.</p></li></ol><div class="tabs" id="mpp-share-on-platforms.md-902ebe18" ><div class="tabs__content" data-gtm="tab" id="mpp-share-on-platforms.md-c601d477"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-share-on-platforms.md-c601d477"   data-title="Groovy"      >kotlin {\n    sourceSets {\n        desktopMain {\n            dependsOn(commonMain)\n        }\n        linuxX64Main {\n            dependsOn(desktopMain)\n        }\n        mingwX64Main {\n            dependsOn(desktopMain)\n        }\n        macosX64Main {\n            dependsOn(desktopMain)\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-share-on-platforms.md-cbf116e"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-share-on-platforms.md-cbf116e"   data-title="Kotlin"      >kotlin{\n    sourceSets {\n        val desktopMain by creating {\n            dependsOn(commonMain)\n        }\n        val linuxX64Main by getting {\n            dependsOn(desktopMain)\n        }\n        val mingwX64Main by getting {\n            dependsOn(desktopMain)\n        }\n        val macosX64Main by getting {\n            dependsOn(desktopMain)\n        }\n    }\n}\n</div></div></div><p id="mpp-share-on-platforms.md-2f603c39" >You can have a shared source set for the following combinations of targets:</p><ul class="list _ul" id="mpp-share-on-platforms.md-c137c4"   ><li class="list__item" id="mpp-share-on-platforms.md-f400563a" ><p>JVM + JS + Native</p></li><li class="list__item" id="mpp-share-on-platforms.md-a0db0f" ><p>JVM + Native</p></li><li class="list__item" id="mpp-share-on-platforms.md-7bb8c073" ><p>JS + Native</p></li><li class="list__item" id="mpp-share-on-platforms.md-1a42352c" ><p>JVM + JS</p></li><li class="list__item" id="mpp-share-on-platforms.md-908d2f10" ><p>Native</p></li></ul><p id="mpp-share-on-platforms.md-4b51e1b" >Kotlin doesn’t currently support sharing a source set for these combinations:</p><ul class="list _ul" id="mpp-share-on-platforms.md-4b8f3e1"   ><li class="list__item" id="mpp-share-on-platforms.md-20900d0a" ><p>Several JVM targets</p></li><li class="list__item" id="mpp-share-on-platforms.md-2276e22a" ><p>JVM + Android targets</p></li><li class="list__item" id="mpp-share-on-platforms.md-420a2e6c" ><p>Several JS targets</p></li></ul><p id="mpp-share-on-platforms.md-e9f009ea" >If you need to access platform-specific APIs from a shared native source set, IntelliJ IDEA will help you detect common declarations that you can use in the shared native code. For other cases, use the Kotlin mechanism of <a href="#mpp-connect-to-apis.md" id="mpp-share-on-platforms.md-45a72170"   >expected and actual declarations</a>.</p></section><section class="chapter"  ><h3 id="mpp-share-on-platforms.md-share-code-in-libraries" data-toc="mpp-share-on-platforms#mpp-share-on-platforms.md-share-code-in-libraries"  >Share code in libraries</h3><p id="mpp-share-on-platforms.md-ce6310cc" >Thanks to the hierarchical project structure, libraries can also provide common APIs for a subset of targets. When a <a href="#mpp-publish-lib.md" id="mpp-share-on-platforms.md-68a798e"   >library is published</a>, the API of its intermediate source sets is embedded into the library artifacts along with information about the project structure. When you use this library, the intermediate source sets of your project access only those APIs of the library which are available to the targets of each source set.</p><p id="mpp-share-on-platforms.md-3f8d4c5c" >For example, check out the following source set hierarchy from the <code class="code " id="mpp-share-on-platforms.md-6aa3550d"  >kotlinx.coroutines</code> repository:</p><p id="mpp-share-on-platforms.md-f8a48f05" ><figure title="Library hierarchical structure"><img alt="Library hierarchical structure" title="Library hierarchical structure" id="mpp-share-on-platforms.md-4a469164" src="images/lib-hierarchical-structure.png"  class="" width="1910" height="1072" /></figure></p><p id="mpp-share-on-platforms.md-e6788040" >The <code class="code " id="mpp-share-on-platforms.md-c6aa47a3"  >concurrent</code> source set declares the function runBlocking and is compiled for the JVM and the native targets. Once the <code class="code " id="mpp-share-on-platforms.md-6ad8147c"  >kotlinx.coroutines</code> library is updated and published with the hierarchical project structure, you can depend on it and call <code class="code " id="mpp-share-on-platforms.md-3f0d10ad"  >runBlocking</code> from a source set that is shared between the JVM and native targets since it matches the “targets signature” of the library’s <code class="code " id="mpp-share-on-platforms.md-fecf0b0c"  >concurrent</code> source set.</p></section><section class="chapter"  ><h3 id="mpp-share-on-platforms.md-use-native-libraries-in-the-hierarchical-structure" data-toc="mpp-share-on-platforms#mpp-share-on-platforms.md-use-native-libraries-in-the-hierarchical-structure"  >Use native libraries in the hierarchical structure</h3><p id="mpp-share-on-platforms.md-d7b62687" >You can use platform-dependent libraries like Foundation, UIKit, and POSIX in source sets shared among several native targets. This helps you share more native code without being limited by platform-specific dependencies.</p><p id="mpp-share-on-platforms.md-e705c15d" >No additional steps are required – everything is done automatically. IntelliJ IDEA will help you detect common declarations that you can use in the shared code.</p><p id="mpp-share-on-platforms.md-38b29d06" >However, note that there are some limitations:</p><ul class="list _ul" id="mpp-share-on-platforms.md-7450f166"   ><li class="list__item" id="mpp-share-on-platforms.md-efa6334" ><p>This approach works only for a native source set that is shared among platform-specific source sets. It doesn’t work for native source sets shared at higher levels of the source set hierarchy. <br/> For example, if you have <code class="code " id="mpp-share-on-platforms.md-3b16d4b0"  >nativeDarwinMain</code> that is a parent of <code class="code " id="mpp-share-on-platforms.md-be7c3ce8"  >watchosMain</code> and <code class="code " id="mpp-share-on-platforms.md-529e3566"  >iosMain</code>, where <code class="code " id="mpp-share-on-platforms.md-7d84f56c"  >iosMain</code> has two children – <code class="code " id="mpp-share-on-platforms.md-3e8a7275"  >iosArm64Main</code> and <code class="code " id="mpp-share-on-platforms.md-702a2b7f"  >iosX64Main</code>, you can use platform-dependent libraries only for <code class="code " id="mpp-share-on-platforms.md-49938181"  >iosMain</code> but not for <code class="code " id="mpp-share-on-platforms.md-27cd2a37"  >nativeDarwinMain</code>.</p></li><li class="list__item" id="mpp-share-on-platforms.md-dc957fcb" ><p>It works only for interop libraries shipped with Kotlin/Native.</p></li></ul><p id="mpp-share-on-platforms.md-136dd5a9" >To enable usage of platform-dependent libraries in shared source sets, add the following to your <code class="code " id="mpp-share-on-platforms.md-52a654b2"  >gradle.properties</code>:</p><div class="code-block" data-lang="kotlin" id="mpp-share-on-platforms.md-ceae3865"         >kotlin.mpp.enableGranularSourceSetsMetadata=true\nkotlin.native.enableDependencyPropagation=false\n</div><p id="mpp-share-on-platforms.md-1daaa79d" >Learn more about the <a href="https://github.com/JetBrains/kotlin/blob/1.4.0/native/commonizer/README.md" id="mpp-share-on-platforms.md-1ffa83df"   data-external="true" rel="noopener noreferrer" >technical details</a>.</p></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="mpp-connect-to-apis.md"  >Connect to platform-specific APIs</h1><aside data-type="warning" class="prompt" data-title="" id="mpp-connect-to-apis.md-cf5c58da"><p id="mpp-connect-to-apis.md-250a544f" >The <code class="code " id="mpp-connect-to-apis.md-bdc57f55"  >expect</code>/ <code class="code " id="mpp-connect-to-apis.md-530122b9"  >actual</code> feature is in <a href="#components-stability.md" id="mpp-connect-to-apis.md-3767151"   >Beta</a>. It is almost stable, but migration steps may be required in the future. We\'ll do our best to minimize any changes you will have to make.</p></aside><p id="mpp-connect-to-apis.md-392d0975" >If you’re developing a multiplatform application that needs to access platform-specific APIs that implement the required functionality, use the Kotlin mechanism of <em id="mpp-connect-to-apis.md-40808018" class=""  >expected and actual declarations</em>.</p><p id="mpp-connect-to-apis.md-fdec76d5" >With this mechanism, a common source set defines an <em id="mpp-connect-to-apis.md-4b6e2663" class=""  >expected declaration</em>, and platform source sets must provide the <em id="mpp-connect-to-apis.md-65d520c6" class=""  >actual declaration</em> that corresponds to the expected declaration. This works for most Kotlin declarations, such as functions, classes, interfaces, enumerations, properties, and annotations.</p><p id="mpp-connect-to-apis.md-15aceab8" ><figure title="Expect and actual declarations"><img alt="Expect and actual declarations" title="Expect and actual declarations" id="mpp-connect-to-apis.md-d94ba270" src="images/expect-actual.png"  class="" width="1336" height="720" /></figure></p><div class="code-block" data-lang="kotlin" id="mpp-connect-to-apis.md-7a609d89"         >// Common\nexpect fun randomUUID(): String\n</div><div class="code-block" data-lang="kotlin" id="mpp-connect-to-apis.md-6b3ecfcb"         >// Android\nimport java.util.*\nactual fun randomUUID() = UUID.randomUUID().toString()\n</div><div class="code-block" data-lang="kotlin" id="mpp-connect-to-apis.md-7ac81b83"         >// iOS\nimport platform.Foundation.NSUUID\nactual fun randomUUID(): String = NSUUID().UUIDString()\n</div><p id="mpp-connect-to-apis.md-93a68793" >Here\'s another example of code sharing and interaction between the common and platform logic in a minimalistic logging framework.</p><div class="code-block" data-lang="kotlin" id="mpp-connect-to-apis.md-3e1e20b4"         >// Common\nenum class LogLevel {\n    DEBUG, WARN, ERROR\n}\n\ninternal expect fun writeLogMessage(message: String, logLevel: LogLevel) \n\nfun logDebug(message: String) = writeLogMessage(message, LogLevel.DEBUG)\nfun logWarn(message: String) = writeLogMessage(message, LogLevel.WARN)\nfun logError(message: String) = writeLogMessage(message, LogLevel.ERROR)\n</div><div class="code-block" data-lang="kotlin" id="mpp-connect-to-apis.md-c9871b2d"         >// JVM\ninternal actual fun writeLogMessage(message: String, logLevel: LogLevel) {\n    println(&quot;[$logLevel]: $message&quot;)\n}\n</div><p id="mpp-connect-to-apis.md-6eb4666" >For JavaScript, a completely different set of APIs is available, and the <code class="code " id="mpp-connect-to-apis.md-1b121d5b"  >actual</code> declaration will look like this.</p><div class="code-block" data-lang="kotlin" id="mpp-connect-to-apis.md-58cdc0de"         >// JS\ninternal actual fun writeLogMessage(message: String, logLevel: LogLevel) {\n    when (logLevel) {\n        LogLevel.DEBUG -&gt; console.log(message)\n        LogLevel.WARN -&gt; console.warn(message)\n        LogLevel.ERROR -&gt; console.error(message)\n    }\n}\n</div><section class="chapter"  ><h2 id="mpp-connect-to-apis.md-rules-for-expected-and-actual-declarations" data-toc="mpp-connect-to-apis#mpp-connect-to-apis.md-rules-for-expected-and-actual-declarations"  >Rules for expected and actual declarations</h2><p id="mpp-connect-to-apis.md-33ba09bb" >The main rules regarding expected and actual declarations are:</p><ul class="list _ul" id="mpp-connect-to-apis.md-c06b9a5f"   ><li class="list__item" id="mpp-connect-to-apis.md-ed95674f" ><p>An expected declaration is marked with the <code class="code " id="mpp-connect-to-apis.md-904ff196"  >expect</code> keyword; the actual declaration is marked with the <code class="code " id="mpp-connect-to-apis.md-7c465df8"  >actual</code> keyword.</p></li><li class="list__item" id="mpp-connect-to-apis.md-1fb8a806" ><p><code class="code " id="mpp-connect-to-apis.md-6c1da9cd"  >expect</code> and <code class="code " id="mpp-connect-to-apis.md-6bc8be5a"  >actual</code> declarations have the same name and are located in the same package (have the same fully qualified name).</p></li><li class="list__item" id="mpp-connect-to-apis.md-5013e402" ><p><code class="code " id="mpp-connect-to-apis.md-a1b6721d"  >expect</code> declarations never contain any implementation code.</p></li></ul><p id="mpp-connect-to-apis.md-6838da52" >During each platform compilation, the compiler ensures that every declaration marked with the <code class="code " id="mpp-connect-to-apis.md-83f1090b"  >expect</code> keyword in the common or intermediate source set has the corresponding declarations marked with the <code class="code " id="mpp-connect-to-apis.md-280de85f"  >actual</code> keyword in all platform source sets. The IDE provides tools that help you create the missing actual declarations.</p><p id="mpp-connect-to-apis.md-17172b28" >If you have a platform-specific library that you want to use in shared code while providing your own implementation for another platform, you can provide a <code class="code " id="mpp-connect-to-apis.md-4ce8e427"  >typealias</code> to an existing class as the actual declaration:</p><div class="code-block" data-lang="kotlin" id="mpp-connect-to-apis.md-bc6715c4"         >expect class AtomicRef&lt;V&gt;(value: V) {\n    fun get(): V\n    fun set(value: V)\n    fun getAndSet(value: V): V\n    fun compareAndSet(expect: V, update: V): Boolean\n}\n</div><div class="code-block" data-lang="kotlin" id="mpp-connect-to-apis.md-c74ffa3f"         >actual typealias AtomicRef&lt;V&gt; = java.util.concurrent.atomic.AtomicReference&lt;V&gt;\n</div><aside data-type="note" class="prompt" data-title="" id="mpp-connect-to-apis.md-232a77e1" ><p id="mpp-connect-to-apis.md-f837dcfb" >Use expected and actual declarations only for Kotlin declarations that have platform-specific dependencies. It is better to implement as much functionality as possible in the shared module even if doing so takes more time.</p><p id="mpp-connect-to-apis.md-ab227108" >Don’t overuse expected and actual declarations – in some cases, an <a href="#interfaces.md" id="mpp-connect-to-apis.md-654c5da1"   >interface</a> may be a better choice because it is more flexible and easier to test.</p></aside></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="mpp-set-up-targets.md"  >Set up targets manually</h1><p id="mpp-set-up-targets.md-ed231945" >You can add targets when <a href="#mpp-create-lib.md" id="mpp-set-up-targets.md-67fadfa8"   >creating a project with the Project Wizard</a>. If you need to add a target later, you can do this manually using target presets for <a href="#mpp-supported-platforms.md" id="mpp-set-up-targets.md-3462fdb1"   >supported platforms</a>.</p><p id="mpp-set-up-targets.md-329ff902" >Learn more about <a href="#mpp-dsl-reference.md-common-target-configuration" id="mpp-set-up-targets.md-da87e419"   >additional settings for targets</a>.</p><div class="code-block" data-lang="kotlin" id="mpp-set-up-targets.md-ab68f5ac"         >kotlin {\n    jvm() // Create a JVM target with the default name \'jvm\'\n        \n    linuxX64() {\n        /* Specify additional settings for the \'linux\' target here */\n    }\n}\n</div><p id="mpp-set-up-targets.md-a0757e7a" >Each target can have one or more <a href="#mpp-configure-compilations.md" id="mpp-set-up-targets.md-50ece839"   >compilations</a>. In addition to default compilations for test and production purposes, you can <a href="#mpp-configure-compilations.md-create-a-custom-compilation" id="mpp-set-up-targets.md-479a1c9c"   >create custom compilations</a>.</p><section class="chapter"  ><h2 id="mpp-set-up-targets.md-distinguish-several-targets-for-one-platform" data-toc="mpp-set-up-targets#mpp-set-up-targets.md-distinguish-several-targets-for-one-platform"  >Distinguish several targets for one platform</h2><p id="mpp-set-up-targets.md-bb09c50e" >You can have several targets for one platform in a multiplatform library. For example, these targets can provide the same API but use different libraries during runtime, such as testing frameworks and logging solutions. Dependencies on such a multiplatform library may fail to resolve because it isn’t clear which target to choose.</p><p id="mpp-set-up-targets.md-b5e63601" >To solve this, mark the targets on both the library author and consumer sides with a custom attribute, which Gradle uses during dependency resolution.</p><p id="mpp-set-up-targets.md-87f200c4" >For example, consider a testing library that supports both JUnit and TestNG in the two targets. The library author needs to add an attribute to both targets as follows:</p><div class="tabs" id="mpp-set-up-targets.md-e3b34f04" ><div class="tabs__content" data-gtm="tab" id="mpp-set-up-targets.md-3b1ba4b3"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-set-up-targets.md-3b1ba4b3"   data-title="Groovy"      >def testFrameworkAttribute = Attribute.of(\'com.example.testFramework\', String)\n\nkotlin {\n    jvm(\'junit\') {\n        attributes.attribute(testFrameworkAttribute, \'junit\')\n    }\n    jvm(\'testng\') {\n        attributes.attribute(testFrameworkAttribute, \'testng\')\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-set-up-targets.md-cbebe10c"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-set-up-targets.md-cbebe10c"   data-title="Kotlin"      >val testFrameworkAttribute = Attribute.of(&quot;com.example.testFramework&quot;, String::class.java)\n\nkotlin {\n    jvm(&quot;junit&quot;) {\n        attributes.attribute(testFrameworkAttribute, &quot;junit&quot;)\n    }\n    jvm(&quot;testng&quot;) {\n        attributes.attribute(testFrameworkAttribute, &quot;testng&quot;)\n    }\n}\n</div></div></div><p id="mpp-set-up-targets.md-df3e0859" >The consumer has to add the attribute to a single target where the ambiguity arises.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="mpp-add-dependencies.md"  >Add dependencies</h1><p id="mpp-add-dependencies.md-9cc72f12" >To add a dependency on a library, set a dependency of the required <a href="#gradle.md-dependency-types" id="mpp-add-dependencies.md-b9f4b711"   >type</a> (for example, <code class="code " id="mpp-add-dependencies.md-f07f5423"  >implementation</code>) in the <a href="#mpp-dsl-reference.md-dependencies" id="mpp-add-dependencies.md-bbaa46fa"   ><code class="code " id="mpp-add-dependencies.md-895b49c6"  >dependencies</code></a> block in your <a href="#gradle.md" id="mpp-add-dependencies.md-b8420fde"   >Gradle</a> build script.</p><div class="tabs" id="mpp-add-dependencies.md-1382546f" ><div class="tabs__content" data-gtm="tab" id="mpp-add-dependencies.md-6c82d50d"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-add-dependencies.md-6c82d50d"   data-title="Groovy"      >kotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation \'com.example:my-library:1.0\'\n            }\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-add-dependencies.md-d7f23a12"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-add-dependencies.md-d7f23a12"   data-title="Kotlin"      >kotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation(&quot;com.example:my-library:1.0&quot;)\n            }\n        }\n    }\n}\n</div></div></div><p id="mpp-add-dependencies.md-6688046" >Alternatively, you can <a href="#gradle.md-set-dependencies-at-the-top-level" id="mpp-add-dependencies.md-51bc9a08"   >set dependencies at the top level</a>.</p><section class="chapter"  ><h2 id="mpp-add-dependencies.md-dependency-on-the-standard-library" data-toc="mpp-add-dependencies#mpp-add-dependencies.md-dependency-on-the-standard-library"  >Dependency on the standard library</h2><p id="mpp-add-dependencies.md-ad13e4fd" >A dependency on a standard library (<code class="code " id="mpp-add-dependencies.md-78adc4ff"  >stdlib</code>) in each source set is added automatically. The version of the standard library is the same as the version of the <code class="code " id="mpp-add-dependencies.md-e4cb69ca"  >kotlin-multiplatform</code> plugin.</p><p id="mpp-add-dependencies.md-1f052a8d" >For platform-specific source sets, the corresponding platform-specific variant of the library is used, while a common standard library is added to the rest. The Kotlin Gradle plugin will select the appropriate JVM standard library depending on the <code class="code " id="mpp-add-dependencies.md-4a3a220a"  >kotlinOptions.jvmTarget</code> <a href="#gradle.md-compiler-options" id="mpp-add-dependencies.md-7c976c3f"   >compiler option</a> of your Gradle build script</p><p id="mpp-add-dependencies.md-2ae3058" >Learn how to <a href="#gradle.md-dependency-on-the-standard-library" id="mpp-add-dependencies.md-3763021e"   >change the default behavior</a>.</p></section><section class="chapter"  ><h2 id="mpp-add-dependencies.md-set-dependencies-on-test-libraries" data-toc="mpp-add-dependencies#mpp-add-dependencies.md-set-dependencies-on-test-libraries"  >Set dependencies on test libraries</h2><p id="mpp-add-dependencies.md-4bd91f0f" >The <a href="https://kotlinlang.org/api/latest/kotlin.test/" id="mpp-add-dependencies.md-4a09757b"   data-external="true" rel="noopener noreferrer" ><code class="code " id="mpp-add-dependencies.md-9b39ef7e"  >kotlin.test</code> API</a> is available for multiplatform tests. When you <a href="#mpp-create-lib.md" id="mpp-add-dependencies.md-af76f299"   >create a multiplatform project</a>, the Project Wizard automatically adds test dependencies to common and platform-specific source sets.</p><p id="mpp-add-dependencies.md-4827d578" >If you didn’t use the Project Wizard to create your project, you can <a href="#gradle.md-set-dependencies-on-test-libraries" id="mpp-add-dependencies.md-78938d"   >add the dependencies manually</a>.</p></section><section class="chapter"  ><h2 id="mpp-add-dependencies.md-set-a-dependency-on-a-kotlinx-library" data-toc="mpp-add-dependencies#mpp-add-dependencies.md-set-a-dependency-on-a-kotlinx-library"  >Set a dependency on a kotlinx library</h2><p id="mpp-add-dependencies.md-21899c72" >If you use a kotlinx library and need a platform-specific dependency, you can use platform-specific variants of libraries with suffixes such as <code class="code " id="mpp-add-dependencies.md-9e09750e"  >-jvm</code> or <code class="code " id="mpp-add-dependencies.md-d2fa4987"  >-js</code>, for example, <code class="code " id="mpp-add-dependencies.md-e5e05798"  >kotlinx-coroutines-core-jvm</code>. You can also use the library base artifact name instead – <code class="code " id="mpp-add-dependencies.md-1d102f2a"  >kotlinx-coroutines-core</code>.</p><div class="tabs" id="mpp-add-dependencies.md-731e4319" ><div class="tabs__content" data-gtm="tab" id="mpp-add-dependencies.md-e65aefa0"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-add-dependencies.md-e65aefa0"   data-title="Groovy"      >kotlin {\n    sourceSets {\n        jvmMain {\n            dependencies {\n                implementation \'org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.4.2\'\n            }\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-add-dependencies.md-9ebeedd9"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-add-dependencies.md-9ebeedd9"   data-title="Kotlin"      >kotlin {\n    sourceSets {\n        val jvmMain by getting {\n            dependencies {\n                implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.4.2&quot;)\n            }\n        }\n    }\n}\n\n</div></div></div><p id="mpp-add-dependencies.md-b57bde35" >If you use a multiplatform library and need to depend on the shared code, set the dependency only once in the shared source set. Use the library base artifact name, such as <code class="code " id="mpp-add-dependencies.md-91609953"  >kotlinx-coroutines-core</code> or <code class="code " id="mpp-add-dependencies.md-e26d40c3"  >ktor-client-core</code>.</p><div class="tabs" id="mpp-add-dependencies.md-2ee7a8b3" ><div class="tabs__content" data-gtm="tab" id="mpp-add-dependencies.md-ab3289f2"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-add-dependencies.md-ab3289f2"   data-title="Groovy"      >kotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation \'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2\'\n            }\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-add-dependencies.md-8692b108"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-add-dependencies.md-8692b108"   data-title="Kotlin"      >kotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2&quot;)\n            }\n        }\n    }\n}\n\n</div></div></div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="mpp-configure-compilations.md"  >Configure compilations</h1><p id="mpp-configure-compilations.md-f207db7c" >Kotlin multiplatform projects use compilations for producing artifacts. Each target can have one or more compilations, for example, for production and test purposes.</p><p id="mpp-configure-compilations.md-51362184" >For each target, default compilations include:</p><ul class="list _ul" id="mpp-configure-compilations.md-dd28a660"   ><li class="list__item" id="mpp-configure-compilations.md-ad2ec631" ><p><code class="code " id="mpp-configure-compilations.md-c7368a7f"  >main</code> and <code class="code " id="mpp-configure-compilations.md-8c1490c8"  >test</code> compilations for JVM, JS, and Native targets.</p></li><li class="list__item" id="mpp-configure-compilations.md-83583cea" ><p>A <a href="#mpp-configure-compilations.md-compilation-for-android" id="mpp-configure-compilations.md-a041e5ea"   >compilation</a> per <a href="https://developer.android.com/studio/build/build-variants" id="mpp-configure-compilations.md-9f74ed82"   data-external="true" rel="noopener noreferrer" >Android build variant</a>, for Android targets.</p></li></ul><p id="mpp-configure-compilations.md-956bf9d3" ><figure title="Compilations"><img alt="Compilations" title="Compilations" id="mpp-configure-compilations.md-758e629e" src="images/compilations.png"  class="" width="1462" height="874" /></figure></p><p id="mpp-configure-compilations.md-ae2dd5b0" >If you need to compile something other than production code and unit tests, for example, integration or performance tests, you can <a href="#mpp-configure-compilations.md-create-a-custom-compilation" id="mpp-configure-compilations.md-b4d32a93"   >create a custom compilation</a>.</p><p id="mpp-configure-compilations.md-20076efc" >You can configure how artifacts are produced in:</p><ul class="list _ul" id="mpp-configure-compilations.md-ad2a6d57"   ><li class="list__item" id="mpp-configure-compilations.md-55a5e445" ><p><a href="#mpp-configure-compilations.md-configure-all-compilations" id="mpp-configure-compilations.md-7af48b40"   >All compilations</a> in your project at once.</p></li><li class="list__item" id="mpp-configure-compilations.md-290e4b3c" ><p><a href="#mpp-configure-compilations.md-configure-compilations-for-one-target" id="mpp-configure-compilations.md-5d4536fe"   >Compilations for one target</a> since one target can have multiple compilations.</p></li><li class="list__item" id="mpp-configure-compilations.md-1f573c7e" ><p><a href="#mpp-configure-compilations.md-configure-one-compilation" id="mpp-configure-compilations.md-8c91d1f2"   >A specific compilation</a>.</p></li></ul><p id="mpp-configure-compilations.md-d4f162c2" >See the <a href="#mpp-dsl-reference.md-compilation-parameters" id="mpp-configure-compilations.md-3dce37c5"   >list of compilation parameters</a> and <a href="#gradle.md-compiler-options" id="mpp-configure-compilations.md-b4d35c2d"   >compiler options</a> available for all or specific targets.</p><section class="chapter"  ><h2 id="mpp-configure-compilations.md-configure-all-compilations" data-toc="mpp-configure-compilations#mpp-configure-compilations.md-configure-all-compilations"  >Configure all compilations</h2><p><div class="code-block" data-lang="kotlin" id="mpp-configure-compilations.md-2b6d25c"         >kotlin {\n    targets.all {\n        compilations.all {\n            kotlinOptions {\n                allWarningsAsErrors = true\n            }\n        }\n    }\n}\n</div></p></section><section class="chapter"  ><h2 id="mpp-configure-compilations.md-configure-compilations-for-one-target" data-toc="mpp-configure-compilations#mpp-configure-compilations.md-configure-compilations-for-one-target"  >Configure compilations for one target</h2><p><div class="tabs" id="mpp-configure-compilations.md-2f8e269a" ><div class="tabs__content" data-gtm="tab" id="mpp-configure-compilations.md-f593563a"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-configure-compilations.md-f593563a"   data-title="Groovy"      >kotlin {\n    jvm().compilations.all {\n        kotlinOptions {\n            sourceMap = true\n            metaInfo = true\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-configure-compilations.md-dfbe8042"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-configure-compilations.md-dfbe8042"   data-title="Kotlin"      >kotlin {\n    targets.jvm.compilations.all {\n        kotlinOptions {\n            sourceMap = true\n            metaInfo = true\n        }\n    }\n}\n</div></div></div></p></section><section class="chapter"  ><h2 id="mpp-configure-compilations.md-configure-one-compilation" data-toc="mpp-configure-compilations#mpp-configure-compilations.md-configure-one-compilation"  >Configure one compilation</h2><p><div class="tabs" id="mpp-configure-compilations.md-ae397467" ><div class="tabs__content" data-gtm="tab" id="mpp-configure-compilations.md-21fc8cba"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-configure-compilations.md-21fc8cba"   data-title="Groovy"      >kotlin {\n    jvm().compilations.main {\n        kotlinOptions {\n            jvmTarget = &quot;1.8&quot;\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-configure-compilations.md-a3ef59cb"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-configure-compilations.md-a3ef59cb"   data-title="Kotlin"      >kotlin {\n    jvm {\n        val main by compilations.getting {\n            kotlinOptions {\n                jvmTarget = &quot;1.8&quot;\n            }\n        }\n    }\n}\n</div></div></div></p></section><section class="chapter"  ><h2 id="mpp-configure-compilations.md-create-a-custom-compilation" data-toc="mpp-configure-compilations#mpp-configure-compilations.md-create-a-custom-compilation"  >Create a custom compilation</h2><p id="mpp-configure-compilations.md-89b29001" >If you need to compile something other than production code and unit tests, for example, integration or performance tests, create a custom compilation.</p><p id="mpp-configure-compilations.md-5f832d69" >For example, to create a custom compilation for integration tests of the <code class="code " id="mpp-configure-compilations.md-c835fe22"  >jvm()</code> target, add a new item to the <code class="code " id="mpp-configure-compilations.md-688f156e"  >compilations</code> collection.</p><aside data-type="note" class="prompt" data-title="" id="mpp-configure-compilations.md-be9f1110" ><p id="mpp-configure-compilations.md-2bf96425" >For custom compilations, you need to set up all dependencies manually. The default source set of a custom compilation does not depend on the <code class="code " id="mpp-configure-compilations.md-28c7840f"  >commonMain</code> and the <code class="code " id="mpp-configure-compilations.md-db8e1e09"  >commonTest</code> source sets.</p></aside><div class="tabs" id="mpp-configure-compilations.md-fe34f8a7" ><div class="tabs__content" data-gtm="tab" id="mpp-configure-compilations.md-e98193b4"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-configure-compilations.md-e98193b4"   data-title="Groovy"      >kotlin {\n    jvm() {\n        compilations.create(\'integrationTest\') {\n            defaultSourceSet {\n                dependencies {\n                    def main = compilations.main\n                    // Compile against the main compilation\'s compile classpath and outputs:\n                    implementation(main.compileDependencyFiles + main.output.classesDirs)\n                    implementation kotlin(\'test-junit\')\n                    /* ... */\n                }\n            }\n           \n            // Create a test task to run the tests produced by this compilation:\n            tasks.register(\'jvmIntegrationTest\', Test) {\n                // Run the tests with the classpath containing the compile dependencies (including \'main\'),\n                // runtime dependencies, and the outputs of this compilation:\n                classpath = compileDependencyFiles + runtimeDependencyFiles + output.allOutputs\n                \n                // Run only the tests from this compilation\'s outputs:\n                testClassesDirs = output.classesDirs\n            }\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-configure-compilations.md-5de7a243"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-configure-compilations.md-5de7a243"   data-title="Kotlin"      >kotlin {\n    jvm() {\n        compilations {\n            val main by getting\n            \n            val integrationTest by compilations.creating {\n                defaultSourceSet {\n                    dependencies {\n                        // Compile against the main compilation\'s compile classpath and outputs:\n                        implementation(main.compileDependencyFiles + main.output.classesDirs)\n                        implementation(kotlin(&quot;test-junit&quot;))\n                        /* ... */\n                    }\n                }\n                \n                // Create a test task to run the tests produced by this compilation:\n                tasks.register&lt;Test&gt;(&quot;integrationTest&quot;) {\n                    // Run the tests with the classpath containing the compile dependencies (including \'main\'),\n                    // runtime dependencies, and the outputs of this compilation:\n                    classpath = compileDependencyFiles + runtimeDependencyFiles + output.allOutputs\n                    \n                    // Run only the tests from this compilation\'s outputs:\n                    testClassesDirs = output.classesDirs\n                }\n            }\n        }\n    }\n}\n</div></div></div><p id="mpp-configure-compilations.md-335b86be" >You also need to create a custom compilation in other cases, for example, if you want to combine compilations for different JVM versions in your final artifact, or you have already set up source sets in Gradle and want to migrate to a multiplatform project.</p></section><section class="chapter"  ><h2 id="mpp-configure-compilations.md-include-java-sources-in-jvm-compilations" data-toc="mpp-configure-compilations#mpp-configure-compilations.md-include-java-sources-in-jvm-compilations"  >Include Java sources in JVM compilations</h2><p id="mpp-configure-compilations.md-c94e6fc6" >By default, the JVM target ignores Java sources and compiles only Kotlin source files.</p><p id="mpp-configure-compilations.md-bd647703" >To include Java sources in the compilations of the JVM target, explicitly enable the Java language support for the target:</p><ul class="list _ul" id="mpp-configure-compilations.md-4767936c"   ><li class="list__item" id="mpp-configure-compilations.md-10e3337d" ><p id="mpp-configure-compilations.md-92e2270e" >When <a href="#mpp-create-lib.md" id="mpp-configure-compilations.md-4bbe4ffe"   >creating a project with the Project Wizard</a>.</p><p id="mpp-configure-compilations.md-97f82f00" ><figure title="Enable Java language support"><img alt="Enable Java language support" title="Enable Java language support" id="mpp-configure-compilations.md-7b5e532a" src="images/enable-java-support.png"  class="" width="1750" height="854" /></figure></p></li><li class="list__item" id="mpp-configure-compilations.md-45a57f73" ><p id="mpp-configure-compilations.md-af88789" >In the build script of an existing project.</p><div class="code-block" data-lang="kotlin" id="mpp-configure-compilations.md-d4ddc7d0"         >kotlin {\n    jvm {\n        withJava()\n    }\n}\n</div><p id="mpp-configure-compilations.md-7ca61c01" >This applies the Gradle <code class="code " id="mpp-configure-compilations.md-3703391e"  >java</code> plugin and configures the target to cooperate with it.</p></li></ul><p id="mpp-configure-compilations.md-5e053325" >The Java source files are placed in the child directories of the Kotlin source roots. For example, the paths are:</p><p id="mpp-configure-compilations.md-e595fda9" ><figure title="Java source files"><img alt="Java source files" title="Java source files" id="mpp-configure-compilations.md-8acfa806" src="images/java-source-paths.png"  class="" width="200" height="227" /></figure></p><p id="mpp-configure-compilations.md-1fd3016d" >The common source sets cannot include Java sources.</p><p id="mpp-configure-compilations.md-3222f86c" >Due to current limitations, the Kotlin plugin replaces some tasks configured by the Java plugin:</p><ul class="list _ul" id="mpp-configure-compilations.md-7de414a"   ><li class="list__item" id="mpp-configure-compilations.md-985e6db2" ><p>The target\'s JAR task instead of <code class="code " id="mpp-configure-compilations.md-21dbe55a"  >jar</code> (for example, <code class="code " id="mpp-configure-compilations.md-6a8d1bfd"  >jvmJar</code> ).</p></li><li class="list__item" id="mpp-configure-compilations.md-26b7841b" ><p>The target\'s test task instead of <code class="code " id="mpp-configure-compilations.md-4e660ed2"  >test</code> (for example, <code class="code " id="mpp-configure-compilations.md-89903430"  >jvmTest</code> ).</p></li><li class="list__item" id="mpp-configure-compilations.md-21c7eaf5" ><p>The resources are processed by the equivalent tasks of the compilations instead of <code class="code " id="mpp-configure-compilations.md-e90617ee"  >*ProcessResources</code> tasks.</p></li></ul><p id="mpp-configure-compilations.md-5d37225f" >The publication of this target is handled by the Kotlin plugin and doesn\'t require steps that are specific for the Java plugin.</p></section><section class="chapter"  ><h2 id="mpp-configure-compilations.md-configure-interop-with-native-languages" data-toc="mpp-configure-compilations#mpp-configure-compilations.md-configure-interop-with-native-languages"  >Configure interop with native languages</h2><p id="mpp-configure-compilations.md-c52f8820" >Kotlin provides <a href="#native-c-interop.md" id="mpp-configure-compilations.md-1ff4a9ab"   >interoperability with native languages</a> and DSL to configure this for a specific compilation.</p><div class="table-wrapper" ><table class=" wide" id="mpp-configure-compilations.md-3e2d96cf"  ><thead><tr class="ijRowHead" id="mpp-configure-compilations.md-93098e1b" ><th id="mpp-configure-compilations.md-2e60537e"    >Native language</th><th id="mpp-configure-compilations.md-cca19f96"    >Supported platforms</th><th id="mpp-configure-compilations.md-3d3973e"    >Comments</th></tr></thead><tbody ><tr class="" id="mpp-configure-compilations.md-66b39a2c" ><td id="mpp-configure-compilations.md-576d716d"    >C</td><td id="mpp-configure-compilations.md-b769cb37"    >All platforms, except for WebAssembly</td><td id="mpp-configure-compilations.md-70a725a5"    ></td></tr><tr class="" id="mpp-configure-compilations.md-f27c7100" ><td id="mpp-configure-compilations.md-3b5fbad0"    >Objective-C</td><td id="mpp-configure-compilations.md-dbc657f8"    >Apple platforms (macOS, iOS, watchOS, tvOS)</td><td id="mpp-configure-compilations.md-5bf7cc1f"    ></td></tr><tr class="" id="mpp-configure-compilations.md-1ff9c144" ><td id="mpp-configure-compilations.md-de502421"    >Swift via Objective-C</td><td id="mpp-configure-compilations.md-e2d0322e"    >Apple platforms (macOS, iOS, watchOS, tvOS)</td><td id="mpp-configure-compilations.md-d3920c6c"    >Kotlin can use only Swift declarations marked with the <code class="code " id="mpp-configure-compilations.md-d81d387b"  >@objc</code> attribute.</td></tr></tbody ></table ></div><p id="mpp-configure-compilations.md-ed04d266" >A compilation can interact with several native libraries. Configure interoperability in the <code class="code " id="mpp-configure-compilations.md-e0a0d3b8"  >cinterops</code> block of the compilation with <a href="#mpp-dsl-reference.md-cinterops" id="mpp-configure-compilations.md-96e815ba"   >available parameters</a>.</p><div class="tabs" id="mpp-configure-compilations.md-671a8193" ><div class="tabs__content" data-gtm="tab" id="mpp-configure-compilations.md-87f2955b"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-configure-compilations.md-87f2955b"   data-title="Groovy"      >kotlin {\n    linuxX64 { // Replace with a target you need.\n        compilations.main {\n            cinterops {\n                myInterop {\n                    // Def-file describing the native API.\n                    // The default path is src/nativeInterop/cinterop/&lt;interop-name&gt;.def\n                    defFile project.file(&quot;def-file.def&quot;)\n                    \n                    // Package to place the Kotlin API generated.\n                    packageName \'org.sample\'\n                    \n                    // Options to be passed to compiler by cinterop tool.\n                    compilerOpts \'-Ipath/to/headers\'\n                    \n                    // Directories for header search (an eqivalent of the -I&lt;path&gt; compiler option).\n                    includeDirs.allHeaders(&quot;path1&quot;, &quot;path2&quot;)\n                    \n                    // Additional directories to search headers listed in the \'headerFilter\' def-file option.\n                    // -headerFilterAdditionalSearchPrefix command line option equivalent.\n                    includeDirs.headerFilterOnly(&quot;path1&quot;, &quot;path2&quot;)\n                    \n                    // A shortcut for includeDirs.allHeaders.\n                    includeDirs(&quot;include/directory&quot;, &quot;another/directory&quot;)\n                }\n                \n                anotherInterop { /* ... */ }\n            }\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-configure-compilations.md-52c033fe"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-configure-compilations.md-52c033fe"   data-title="Kotlin"      >kotlin {\n    linuxX64 {  // Replace with a target you need.\n        compilations.getByName(&quot;main&quot;) {\n            val myInterop by cinterops.creating {\n                // Def-file describing the native API.\n                // The default path is src/nativeInterop/cinterop/&lt;interop-name&gt;.def\n                defFile(project.file(&quot;def-file.def&quot;))\n                \n                // Package to place the Kotlin API generated.\n                packageName(&quot;org.sample&quot;)\n                \n                // Options to be passed to compiler by cinterop tool.\n                compilerOpts(&quot;-Ipath/to/headers&quot;)\n              \n                // Directories to look for headers.\n                includeDirs.apply {\n                    // Directories for header search (an equivalent of the -I&lt;path&gt; compiler option).\n                    allHeaders(&quot;path1&quot;, &quot;path2&quot;)\n                    \n                    // Additional directories to search headers listed in the \'headerFilter\' def-file option.\n                    // -headerFilterAdditionalSearchPrefix command line option equivalent.\n                    headerFilterOnly(&quot;path1&quot;, &quot;path2&quot;)\n                }\n                // A shortcut for includeDirs.allHeaders.\n                includeDirs(&quot;include/directory&quot;, &quot;another/directory&quot;)\n            }\n            \n            val anotherInterop by cinterops.creating { /* ... */ }\n        }\n    }\n}\n\n</div></div></div></section><section class="chapter"  ><h2 id="mpp-configure-compilations.md-compilation-for-android" data-toc="mpp-configure-compilations#mpp-configure-compilations.md-compilation-for-android"  >Compilation for Android</h2><p id="mpp-configure-compilations.md-ed8163b3" >The compilations created for an Android target by default are tied to <a href="https://developer.android.com/studio/build/build-variants" id="mpp-configure-compilations.md-86311881"   data-external="true" rel="noopener noreferrer" >Android build variants</a>: for each build variant, a Kotlin compilation is created under the same name.</p><p id="mpp-configure-compilations.md-9f00b612" >Then, for each <a href="https://developer.android.com/studio/build/build-variants#sourcesets" id="mpp-configure-compilations.md-2a6c50ae"   data-external="true" rel="noopener noreferrer" >Android source set</a> compiled for each of the variants, a Kotlin source set is created under that source set name prepended by the target name, like the Kotlin source set <code class="code " id="mpp-configure-compilations.md-dbb97aa0"  >androidDebug</code> for an Android source set <code class="code " id="mpp-configure-compilations.md-7e4afe44"  >debug</code> and the Kotlin target named <code class="code " id="mpp-configure-compilations.md-8c4d97ef"  >android</code>. These Kotlin source sets are added to the variants’ compilations accordingly.</p><p id="mpp-configure-compilations.md-761da1eb" >The default source set <code class="code " id="mpp-configure-compilations.md-d358c36"  >commonMain</code> is added to each production (application or library) variant\'s compilation. The <code class="code " id="mpp-configure-compilations.md-d07895eb"  >commonTest</code> source set is similarly added to the compilations of unit test and instrumented test variants.</p><p id="mpp-configure-compilations.md-b04ed8d0" >Annotation processing with <a href="#kapt.md" id="mpp-configure-compilations.md-153c1c63"   ><code class="code " id="mpp-configure-compilations.md-d1a0e730"  >kapt</code></a> is also supported, but due to current limitations it requires that the Android target is created before the <code class="code " id="mpp-configure-compilations.md-eb9cbfb5"  >kapt</code> dependencies are configured, which needs to be done in a top-level <code class="code " id="mpp-configure-compilations.md-51de6535"  >dependencies</code> block rather than within Kotlin source set dependencies.</p><div class="code-block" data-lang="kotlin" id="mpp-configure-compilations.md-f4836ab6"         >kotlin {\n    android { /* ... */ }\n}\n\ndependencies {\n    kapt(&quot;com.my.annotation:processor:1.0.0&quot;)\n}\n</div></section><section class="chapter"  ><h2 id="mpp-configure-compilations.md-compilation-of-the-source-set-hierarchy" data-toc="mpp-configure-compilations#mpp-configure-compilations.md-compilation-of-the-source-set-hierarchy"  >Compilation of the source set hierarchy</h2><p id="mpp-configure-compilations.md-dbd0fd2e" >Kotlin can build a <a href="#mpp-share-on-platforms.md-share-code-on-similar-platforms" id="mpp-configure-compilations.md-f0986fd6"   >source set hierarchy</a> with the <code class="code " id="mpp-configure-compilations.md-46f803a2"  >dependsOn</code> relation.</p><p id="mpp-configure-compilations.md-528fe7d8" ><figure title="Source set hierarchy"><img alt="Source set hierarchy" title="Source set hierarchy" id="mpp-configure-compilations.md-eb1002f7" src="images/jvm-js-main.png"  class="" width="400" height="245" /></figure></p><p id="mpp-configure-compilations.md-524fd544" >If the source set <code class="code " id="mpp-configure-compilations.md-594ab22e"  >jvmMain</code> depends on a source set <code class="code " id="mpp-configure-compilations.md-5e7ffa5c"  >commonMain</code> then:</p><ul class="list _ul" id="mpp-configure-compilations.md-da8b0e2c"   ><li class="list__item" id="mpp-configure-compilations.md-7953080" ><p>Whenever <code class="code " id="mpp-configure-compilations.md-74f15e84"  >jvmMain</code> is compiled for a certain target, <code class="code " id="mpp-configure-compilations.md-e333ade5"  >commonMain</code> takes part in that compilation as well and is also compiled into the same target binary form, such as JVM class files.</p></li><li class="list__item" id="mpp-configure-compilations.md-a699cff2" ><p>Sources of <code class="code " id="mpp-configure-compilations.md-525902f1"  >jvmMain</code> \'see\' the declarations of <code class="code " id="mpp-configure-compilations.md-e46ff0"  >commonMain</code>, including internal declarations, and also see the <a href="#mpp-add-dependencies.md" id="mpp-configure-compilations.md-c5284a45"   >dependencies</a> of <code class="code " id="mpp-configure-compilations.md-c6489751"  >commonMain</code>, even those specified as <code class="code " id="mpp-configure-compilations.md-efc1aee7"  >implementation</code> dependencies.</p></li><li class="list__item" id="mpp-configure-compilations.md-1dbb0509" ><p><code class="code " id="mpp-configure-compilations.md-628e7004"  >jvmMain</code> can contain platform-specific implementations for the <a href="#mpp-connect-to-apis.md" id="mpp-configure-compilations.md-ef3853f2"   >expected declarations</a> of <code class="code " id="mpp-configure-compilations.md-c0f03a16"  >commonMain</code>.</p></li><li class="list__item" id="mpp-configure-compilations.md-4b54bd70" ><p>The resources of <code class="code " id="mpp-configure-compilations.md-6563fb84"  >commonMain</code> are always processed and copied along with the resources of <code class="code " id="mpp-configure-compilations.md-e6d957fe"  >jvmMain</code>.</p></li><li class="list__item" id="mpp-configure-compilations.md-71356b2b" ><p>The <a href="#mpp-dsl-reference.md-language-settings" id="mpp-configure-compilations.md-73a06bfb"   >language settings</a> of <code class="code " id="mpp-configure-compilations.md-2cdea17c"  >jvmMain</code> and <code class="code " id="mpp-configure-compilations.md-c70ff625"  >commonMain</code> should be consistent.</p></li></ul><p id="mpp-configure-compilations.md-9075c7f8" >Language settings are checked for consistency in the following ways:</p><ul class="list _ul" id="mpp-configure-compilations.md-e1ec8c4e"   ><li class="list__item" id="mpp-configure-compilations.md-2214f90e" ><p><code class="code " id="mpp-configure-compilations.md-8f1e4ea8"  >jvmMain</code> should set a <code class="code " id="mpp-configure-compilations.md-412f9d7"  >languageVersion</code> that is greater than or equal to that of <code class="code " id="mpp-configure-compilations.md-194cfcaf"  >commonMain</code>.</p></li><li class="list__item" id="mpp-configure-compilations.md-c1b5ea67" ><p><code class="code " id="mpp-configure-compilations.md-ee3951cf"  >jvmMain</code> should enable all unstable language features that <code class="code " id="mpp-configure-compilations.md-9b46d4dc"  >commonMain</code> enables (there\'s no such requirement for bugfix features).</p></li><li class="list__item" id="mpp-configure-compilations.md-2c4a4dd0" ><p><code class="code " id="mpp-configure-compilations.md-427ae964"  >jvmMain</code> should use all experimental annotations that <code class="code " id="mpp-configure-compilations.md-f114d297"  >commonMain</code> uses.</p></li><li class="list__item" id="mpp-configure-compilations.md-2313e8e" ><p><code class="code " id="mpp-configure-compilations.md-fc88293f"  >apiVersion</code>, bugfix language features, and <code class="code " id="mpp-configure-compilations.md-54e58fb8"  >progressiveMode</code> can be set arbitrarily.</p></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="mpp-run-tests.md"  >Run tests</h1><p id="mpp-run-tests.md-50be01c6" >By default, Kotlin supports running tests for JVM, JS, Android, Linux, Windows, macOS as well as iOS, watchOS, and tvOS simulators. To run tests for other Kotlin/Native targets, you need to configure them manually in an appropriate environment, emulator, or test framework.</p><section class="chapter"  ><h2 id="mpp-run-tests.md-required-dependencies" data-toc="mpp-run-tests#mpp-run-tests.md-required-dependencies"  >Required dependencies</h2><p id="mpp-run-tests.md-ef60493a" >The <a href="https://kotlinlang.org/api/latest/kotlin.test/" id="mpp-run-tests.md-ef4f94aa"   data-external="true" rel="noopener noreferrer" ><code class="code " id="mpp-run-tests.md-18acd455"  >kotlin.test</code> API</a> is available for multiplatform tests. When you <a href="#mpp-create-lib.md" id="mpp-run-tests.md-945cfb09"   >create a multiplatform project</a>, the Project Wizard automatically adds test dependencies to common and platform-specific source sets.</p><p id="mpp-run-tests.md-3ea5eecb" >If you didn’t use the Project Wizard to create your project, you can <a href="#gradle.md-set-dependencies-on-test-libraries" id="mpp-run-tests.md-593eee6"   >add the dependencies manually</a>.</p></section><section class="chapter"  ><h2 id="mpp-run-tests.md-run-tests-for-one-or-more-targets" data-toc="mpp-run-tests#mpp-run-tests.md-run-tests-for-one-or-more-targets"  >Run tests for one or more targets</h2><p id="mpp-run-tests.md-295c8063" >To run tests for all targets, run the <code class="code " id="mpp-run-tests.md-dc13df2c"  >check</code> task.</p><p id="mpp-run-tests.md-f8991119" >To run tests for a particular target suitable for testing, run a test task <code class="code " id="mpp-run-tests.md-2c8750dd"  >&lt;targetName&gt;Test</code>.</p></section><section class="chapter"  ><h2 id="mpp-run-tests.md-test-shared-code" data-toc="mpp-run-tests#mpp-run-tests.md-test-shared-code"  >Test shared code</h2><p id="mpp-run-tests.md-2b78581b" >For testing shared code, you can use <a href="#mpp-connect-to-apis.md" id="mpp-run-tests.md-6332c3a1"   >actual declarations</a> in your tests.</p><p id="mpp-run-tests.md-4d46e463" >For example, to test the shared code in <code class="code " id="mpp-run-tests.md-5857d8be"  >commonMain</code>:</p><div class="code-block" data-lang="kotlin" id="mpp-run-tests.md-e35b5036"         >expect object Platform {\n    val name: String\n}\n\nfun hello(): String = &quot;Hello from ${Platform.name}&quot;\n\nclass Proxy {\n    fun proxyHello() = hello()\n}\n</div><p id="mpp-run-tests.md-345e0872" >You can use the following test in <code class="code " id="mpp-run-tests.md-8bd7f4e8"  >commonTest</code>:</p><div class="code-block" data-lang="kotlin" id="mpp-run-tests.md-c4b06a56"         >import kotlin.test.Test\nimport kotlin.test.assertTrue\n\nclass SampleTests {\n    @Test\n    fun testProxy() {\n        assertTrue(Proxy().proxyHello().isNotEmpty())\n    }\n}\n</div><p id="mpp-run-tests.md-77f54e0b" >And the following test in <code class="code " id="mpp-run-tests.md-8063723d"  >iosTest</code>:</p><div class="code-block" data-lang="kotlin" id="mpp-run-tests.md-2ec04243"         >import kotlin.test.Test\nimport kotlin.test.assertTrue\n\nclass SampleTestsIOS {\n    @Test\n    fun testHello() {\n        assertTrue(&quot;iOS&quot; in hello())\n    }\n}\n</div><p id="mpp-run-tests.md-fe7f0e37" >You can also learn how to create and run multiplatform tests in the <a href="#multiplatform-library.md-test-your-library" id="mpp-run-tests.md-1aa6d3c"   >Create and publish a multiplatform library – tutorial</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="mpp-publish-lib.md"  >Publish a multiplatform library</h1><p id="mpp-publish-lib.md-23c4c433" >You can publish a multiplatform library to a Maven repository with the <a href="https://docs.gradle.org/current/userguide/publishing_maven.html" id="mpp-publish-lib.md-c9bc79fb"   data-external="true" rel="noopener noreferrer" ><code class="code " id="mpp-publish-lib.md-b5bac28"  >maven-publish</code> Gradle plugin</a>. Specify the group, version, and the <a href="https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:repositories" id="mpp-publish-lib.md-ff6997f8"   data-external="true" rel="noopener noreferrer" >repositories</a> where the library should be published. The plugin creates publications automatically.</p><div class="code-block" data-lang="kotlin" id="mpp-publish-lib.md-16c2e109"         >plugins {\n    //...\n    id(&quot;maven-publish&quot;)\n}\n\ngroup = &quot;com.example&quot;\nversion = &quot;1.0&quot;\n\npublishing {\n    repositories {\n        maven {\n            //...\n        }\n    }\n}\n</div><p id="mpp-publish-lib.md-1294036a" >Complete the <a href="#multiplatform-library.md" id="mpp-publish-lib.md-2d6457fa"   >tutorial on creating and publishing a multiplatform library</a> to get hands-on experience.</p><section class="chapter"  ><h2 id="mpp-publish-lib.md-structure-of-publications" data-toc="mpp-publish-lib#mpp-publish-lib.md-structure-of-publications"  >Structure of publications</h2><p id="mpp-publish-lib.md-c02c388" >When used with <code class="code " id="mpp-publish-lib.md-97b15bcc"  >maven-publish</code>, the Kotlin plugin automatically creates publications for each target that can be built on the current host, except for the Android target, which needs an <a href="#mpp-publish-lib.md-publish-an-android-library" id="mpp-publish-lib.md-5f509e5c"   >additional step to configure publishing</a>.</p><p id="mpp-publish-lib.md-cb763b04" >Publications of a multiplatform library include an additional <em id="mpp-publish-lib.md-b0ea25b" class=""  >root</em> publication <code class="code " id="mpp-publish-lib.md-8240aa20"  >kotlinMultiplatform</code> that stands for the whole library and is automatically resolved to the appropriate platform-specific artifacts when added as a dependency to the common source set. Learn more about <a href="#mpp-add-dependencies.md" id="mpp-publish-lib.md-9150a797"   >adding dependencies</a>.</p><p id="mpp-publish-lib.md-40057b1e" >This <code class="code " id="mpp-publish-lib.md-6d0de98f"  >kotlinMultiplatform</code> publication includes metadata artifacts and references the other publications as its variants.</p><aside data-type="note" class="prompt" data-title="" id="mpp-publish-lib.md-ea13d84b" ><p id="mpp-publish-lib.md-d904f9a9" >Some repositories, such as Maven Central, require that the root module contains a JAR artifact without a classifier, for example <code class="code " id="mpp-publish-lib.md-1d5f1700"  >kotlinMultiplatform-1.0.jar</code>. <br/> The Kotlin Multiplatform plugin automatically produces the required artifact with the embedded metadata artifacts. <br/> This means you don\'t have to customize your build by adding an empty artifact to the root module of your library to meet the repository’s requirements.</p></aside><p id="mpp-publish-lib.md-f297a6fe" >The <code class="code " id="mpp-publish-lib.md-ce058b06"  >kotlinMultiplatform</code> publication may also need the sources and documentation artifacts if that is required by the repository. In that case, add those artifacts by using <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/publish/maven/MavenPublication.html#artifact-java.lang.Object-" id="mpp-publish-lib.md-2510ac05"   data-external="true" rel="noopener noreferrer" ><code class="code " id="mpp-publish-lib.md-a06fb8f9"  >artifact(...)</code></a> in the publication\'s scope.</p></section><section class="chapter"  ><h2 id="mpp-publish-lib.md-avoid-duplicate-publications" data-toc="mpp-publish-lib#mpp-publish-lib.md-avoid-duplicate-publications"  >Avoid duplicate publications</h2><p id="mpp-publish-lib.md-5539a545" >To avoid duplicate publications of modules that can be built on several platforms (like JVM and JS), configure the publishing tasks for these modules to run conditionally.</p><p id="mpp-publish-lib.md-b864db09" >You can detect the platform in the script, introduce a flag such as <code class="code " id="mpp-publish-lib.md-f5ece6a"  >isMainHost</code> and set it to <code class="code " id="mpp-publish-lib.md-930e41e3"  >true</code> for the main target platform. Alternatively, you can pass the flag from an external source, for example, from CI configuration.</p><p id="mpp-publish-lib.md-767fd4c6" >This simplified example ensures that publications are only uploaded when <code class="code " id="mpp-publish-lib.md-e8721d0b"  >isMainHost=true</code> is passed. This means that a publication that can be published from multiple platforms will be published only once – from the main host.</p><div class="tabs" id="mpp-publish-lib.md-6e343094" ><div class="tabs__content" data-gtm="tab" id="mpp-publish-lib.md-811f0904"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-publish-lib.md-811f0904"   data-title="Groovy"      >kotlin {\n    jvm()\n    js()\n    mingwX64()\n    linuxX64()\n    def publicationsFromMainHost = \n        [jvm(), js()].collect { it.name } + &quot;kotlinMultiplatform&quot;\n    publishing {\n        publications {\n            matching { it.name in publicationsFromMainHost }.all { targetPublication -&gt;\n                tasks.withType(AbstractPublishToMaven)\n                        .matching { it.publication == targetPublication }\n                        .configureEach { onlyIf { findProperty(&quot;isMainHost&quot;) == &quot;true&quot; } }\n            }\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-publish-lib.md-13e3243e"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-publish-lib.md-13e3243e"   data-title="Kotlin"      >kotlin {\n    jvm()\n    js()\n    mingwX64()\n    linuxX64()\n    val publicationsFromMainHost = \n        listOf(jvm(), js()).map { it.name } + &quot;kotlinMultiplatform&quot;\n    publishing {\n        publications {\n            matching { it.name in publicationsFromMainHost }.all {\n                val targetPublication = this@all\n                tasks.withType&lt;AbstractPublishToMaven&gt;()\n                        .matching { it.publication == targetPublication }\n                        .configureEach { onlyIf { findProperty(&quot;isMainHost&quot;) == &quot;true&quot; } }\n            }\n        }\n    }\n}\n</div></div></div><p id="mpp-publish-lib.md-7da7fac" >By default, each publication includes a sources JAR that contains the sources used by the main compilation of the target.</p></section><section class="chapter"  ><h2 id="mpp-publish-lib.md-publish-an-android-library" data-toc="mpp-publish-lib#mpp-publish-lib.md-publish-an-android-library"  >Publish an Android library</h2><p id="mpp-publish-lib.md-cf7495f7" >To publish an Android library, you need to provide additional configuration.</p><p id="mpp-publish-lib.md-b5bce844" >By default, no artifacts of an Android library are published. To publish artifacts produced by a set of <a href="https://developer.android.com/studio/build/build-variants" id="mpp-publish-lib.md-ee8880d0"   data-external="true" rel="noopener noreferrer" >Android variants</a>, specify the variant names in the Android target block:</p><div class="code-block" data-lang="kotlin" id="mpp-publish-lib.md-bf0e845"         >kotlin {\n    android {\n        publishLibraryVariants(&quot;release&quot;, &quot;debug&quot;)\n    }\n}\n\n</div><p id="mpp-publish-lib.md-8c4e40e2" >The example works for Android libraries without <a href="https://developer.android.com/studio/build/build-variants#product-flavors" id="mpp-publish-lib.md-b290b69b"   data-external="true" rel="noopener noreferrer" >product flavors</a>. For a library with product flavors, the variant names also contain the flavors, like <code class="code " id="mpp-publish-lib.md-a94b3f06"  >fooBarDebug</code> or <code class="code " id="mpp-publish-lib.md-b6948e8e"  >fooBazRelease</code>.</p><aside data-type="note" class="prompt" data-title="" id="mpp-publish-lib.md-79bbb78" ><p id="mpp-publish-lib.md-2aacea52" >If a library consumer defines variants that are missing in the library, they need to provide matching fallbacks. For example, if a library does not have or does not publish a staging build type, the library consumer must provide a fallback for the consumers who have such a build type, specifying at least one of the build types that the library publishes:</p><div class="tabs" id="mpp-publish-lib.md-4c55827" ><div class="tabs__content" data-gtm="tab" id="mpp-publish-lib.md-4bc7be2a"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-publish-lib.md-4bc7be2a"   data-title="Groovy"      >android {\n    buildTypes {\n        staging {\n            // ...\n            matchingFallbacks = [\'release\', \'debug\']\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-publish-lib.md-d4aab447"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-publish-lib.md-d4aab447"   data-title="Kotlin"      >android {\n    buildTypes {\n        val staging by creating {\n            // ...\n            matchingFallbacks = listOf(&quot;release&quot;, &quot;debug&quot;)\n        }\n    }\n}\n</div></div></div></aside><p id="mpp-publish-lib.md-614cd840" >Similarly, a library consumer needs to provide matching fallbacks for custom product flavors if some are missing in the library publications.</p><p id="mpp-publish-lib.md-fac242a0" >You can also publish variants grouped by the product flavor, so that the outputs of the different build types are placed in a single module, with the build type becoming a classifier for the artifacts (the release build type is still published with no classifier). This mode is disabled by default and can be enabled as follows:</p><div class="code-block" data-lang="kotlin" id="mpp-publish-lib.md-d3d3329d"         >kotlin {\n    android {\n        publishLibraryVariantsGroupedByFlavor = true\n    }\n}\n</div><aside data-type="note" class="prompt" data-title="" id="mpp-publish-lib.md-86ab38d0" ><p id="mpp-publish-lib.md-fa1a62f9" >It is not recommended that you publish variants grouped by the product flavor in case they have different dependencies, as those will be merged into one dependencies list.</p></aside></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="multiplatform-library.md"  >Create and publish a multiplatform library – tutorial</h1><p id="multiplatform-library.md-726674ba" >In this tutorial, you will learn how to create a multiplatform library for JVM, JS, and Native platforms, write common tests for all platforms, and publish the library to a local Maven repository.</p><p id="multiplatform-library.md-9069ccde" >This library converts raw data – strings and byte arrays – to the <a href="https://en.wikipedia.org/wiki/Base64" id="multiplatform-library.md-5aaa2e22"   data-external="true" rel="noopener noreferrer" >Base64</a> format. It can be used on Kotlin/JVM, Kotlin/JS, and any available Kotlin/Native platform.</p><p id="multiplatform-library.md-a001b532" >You will use different ways to implement the conversion to the Base64 format on different platforms:</p><ul class="list _ul" id="multiplatform-library.md-4301125e"   ><li class="list__item" id="multiplatform-library.md-7c458636" ><p>For JVM – the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Base64.html" id="multiplatform-library.md-124dd2f7"   data-external="true" rel="noopener noreferrer" ><code class="code " id="multiplatform-library.md-f0e27175"  >java.util.Base64</code> class</a>.</p></li><li class="list__item" id="multiplatform-library.md-46111d0b" ><p>For JS – the <a href="https://nodejs.org/docs/latest/api/buffer.html" id="multiplatform-library.md-5a12cfc7"   data-external="true" rel="noopener noreferrer" >Buffer API</a>.</p></li><li class="list__item" id="multiplatform-library.md-54947d2d" ><p>For Kotlin/Native – your own implementation.</p></li></ul><p id="multiplatform-library.md-bc1b02e6" >You will also test your code using common tests, and then publish the library to your local Maven repository.</p><section class="chapter"  ><h2 id="multiplatform-library.md-set-up-the-environment" data-toc="multiplatform-library#multiplatform-library.md-set-up-the-environment"  >Set up the environment</h2><p id="multiplatform-library.md-7faafa70" >You can complete this tutorial on any operating system. Download and install the <a href="http://www.jetbrains.com/idea/download/index.html" id="multiplatform-library.md-7e1fdb59"   data-external="true" rel="noopener noreferrer" >latest version of IntelliJ IDEA</a> with the <a href="#releases.md" id="multiplatform-library.md-2f6b31a3"   >latest Kotlin plugin</a>.</p></section><section class="chapter"  ><h2 id="multiplatform-library.md-create-a-project" data-toc="multiplatform-library#multiplatform-library.md-create-a-project"  >Create a project</h2><ol class="list _decimal" id="multiplatform-library.md-955e424a"   ><li class="list__item" id="multiplatform-library.md-8746107c" ><p id="multiplatform-library.md-bbcd8af0" >In IntelliJ IDEA, select <b id="multiplatform-library.md-350c7292" class=""  >File | New | Project</b>.</p></li><li class="list__item" id="multiplatform-library.md-bbb0dd63" ><p id="multiplatform-library.md-556d4f0e" >In the left-hand panel, select <b id="multiplatform-library.md-903443cd" class=""  >Kotlin</b>.</p></li><li class="list__item" id="multiplatform-library.md-ced581e2" ><p id="multiplatform-library.md-744e9cd9" >Enter a project name, then in the <b id="multiplatform-library.md-ee21f303" class=""  >Multiplatform</b> section select <b id="multiplatform-library.md-e8cded7" class=""  >Library</b> as the project template.</p><p id="multiplatform-library.md-b0655be7" ><figure title="Select a project template"><img alt="Select a project template" title="Select a project template" id="multiplatform-library.md-d94e4e93" src="images/mpp-project-1.png"  class="" width="2028" height="1262" /></figure></p></li><li class="list__item" id="multiplatform-library.md-a02f4767" ><p id="multiplatform-library.md-9773d6" >Select the Gradle DSL – Kotlin or Groovy.</p></li><li class="list__item" id="multiplatform-library.md-c625f115" ><p id="multiplatform-library.md-78d86393" >Specify the <a href="https://www.jetbrains.com/help/idea/sdk.html#jdk" id="multiplatform-library.md-783ca6c7"   data-external="true" rel="noopener noreferrer" >JDK</a>, which is required for developing Kotlin projects.</p></li><li class="list__item" id="multiplatform-library.md-dd55f1f5" ><p id="multiplatform-library.md-9991a7f1" >Click <b id="multiplatform-library.md-aaa43cbf" class=""  >Next</b>, and then click <b id="multiplatform-library.md-d4fad098" class=""  >Finish</b>.</p></li></ol><p id="multiplatform-library.md-86d73166" >The wizard will create a sample multiplatform library with the following structure:</p><p id="multiplatform-library.md-bc44afbb" ><figure title="Multiplatform library structure"><img alt="Multiplatform library structure" title="Multiplatform library structure" id="multiplatform-library.md-5712a0b2" src="images/mpp-lib-structure.png"  class="" width="250" height="183" /></figure></p></section><section class="chapter"  ><h2 id="multiplatform-library.md-write-cross-platform-code" data-toc="multiplatform-library#multiplatform-library.md-write-cross-platform-code"  >Write cross-platform code</h2><p id="multiplatform-library.md-d840f1b8" >Define the classes and interfaces you are going to implement in the common code.</p><ol class="list _decimal" id="multiplatform-library.md-ed988f6d"   ><li class="list__item" id="multiplatform-library.md-e4f3b536" ><p id="multiplatform-library.md-f100a5fc" >In the <code class="code " id="multiplatform-library.md-fa6db693"  >commonMain/kotlin</code> directory, create the <code class="code " id="multiplatform-library.md-eb90a10b"  >org.jetbrains.base64</code> package.</p></li><li class="list__item" id="multiplatform-library.md-799a9b41" ><p id="multiplatform-library.md-90a2a42d" >Create the <code class="code " id="multiplatform-library.md-cf80d62e"  >Base64.kt</code> file in the new package.</p></li><li class="list__item" id="multiplatform-library.md-8dac0bfa" ><p id="multiplatform-library.md-b6af8abd" >Define the <code class="code " id="multiplatform-library.md-4bd4b6cd"  >Base64Encoder</code> interface that converts bytes to the <code class="code " id="multiplatform-library.md-48b23513"  >Base64</code> format:</p><div class="code-block" data-lang="kotlin" id="multiplatform-library.md-8bec550"         >package org.jetbrains.base64\n\ninterface Base64Encoder {\n    fun encode(src: ByteArray): ByteArray\n}\n</div></li><li class="list__item" id="multiplatform-library.md-f11ffde1" ><p id="multiplatform-library.md-6916467d" >Define the <code class="code " id="multiplatform-library.md-eb169fd4"  >Base64Factory</code> object to provide an instance of the <code class="code " id="multiplatform-library.md-e8b28ba7"  >Base64Encoder</code> interface to the common code:</p><div class="code-block" data-lang="kotlin" id="multiplatform-library.md-a065224a"         >expect object Base64Factory {\n    fun createEncoder(): Base64Encoder\n}\n</div></li></ol><p id="multiplatform-library.md-19e32c87" >The factory object is marked with the <code class="code " id="multiplatform-library.md-d666157d"  >expect</code> keyword in the cross-platform code. For each platform, you should provide an <code class="code " id="multiplatform-library.md-53096c0c"  >actual</code> implementation of the <code class="code " id="multiplatform-library.md-ddc4f932"  >Base64Factory</code> object with the platform-specific encoder. Learn more about <a href="#mpp-connect-to-apis.md" id="multiplatform-library.md-4f8a20f"   >platform-specific implementations</a>.</p></section><section class="chapter"  ><h2 id="multiplatform-library.md-provide-platform-specific-implementations" data-toc="multiplatform-library#multiplatform-library.md-provide-platform-specific-implementations"  >Provide platform-specific implementations</h2><p id="multiplatform-library.md-55f03ae2" >Now you will create the <code class="code " id="multiplatform-library.md-ac13d52a"  >actual</code> implementations of the <code class="code " id="multiplatform-library.md-816db991"  >Base64Factory</code> object for each platform:</p><ul class="list _ul" id="multiplatform-library.md-5ca3c9b4"   ><li class="list__item" id="multiplatform-library.md-75d4fedc" ><a href="#multiplatform-library.md-jvm" id="multiplatform-library.md-68246a12"   >JVM</a></li><li class="list__item" id="multiplatform-library.md-b1d70fc8" ><a href="#multiplatform-library.md-js" id="multiplatform-library.md-952612ea"   >JS</a></li><li class="list__item" id="multiplatform-library.md-116a6db1" ><a href="#multiplatform-library.md-native" id="multiplatform-library.md-95d80198"   >Native</a></li></ul><section class="chapter"  ><h3 id="multiplatform-library.md-jvm" data-toc="multiplatform-library#multiplatform-library.md-jvm"  >JVM</h3><ol class="list _decimal" id="multiplatform-library.md-ffc46a81"   ><li class="list__item" id="multiplatform-library.md-8120fe" ><p id="multiplatform-library.md-e62327d" >In the <code class="code " id="multiplatform-library.md-f8c3471c"  >jvmMain/kotlin</code> directory, create the <code class="code " id="multiplatform-library.md-e6c683ae"  >org.jetbrains.base64</code> package.</p></li><li class="list__item" id="multiplatform-library.md-fb11660e" ><p id="multiplatform-library.md-3b027b2" >Create the <code class="code " id="multiplatform-library.md-649fa65f"  >Base64.kt</code> file in the new package.</p></li><li class="list__item" id="multiplatform-library.md-acff154" ><p id="multiplatform-library.md-ad5133e5" >Provide a simple implementation of the <code class="code " id="multiplatform-library.md-b551a18e"  >Base64Factory</code> object that delegates to the <code class="code " id="multiplatform-library.md-478e1bc3"  >java.util.Base64</code> class:</p><aside data-type="note" class="prompt" data-title="" id="multiplatform-library.md-c85023f0" ><p id="multiplatform-library.md-6bd3514d" >IDEA inspections help create <code class="code " id="multiplatform-library.md-1b9a187d"  >actual</code> implementations for an <code class="code " id="multiplatform-library.md-730198d9"  >expect</code> declaration.</p></aside><div class="code-block" data-lang="kotlin" id="multiplatform-library.md-66cd3177"         >package org.jetbrains.base64\nimport java.util.*\n\nactual object Base64Factory {\n    actual fun createEncoder(): Base64Encoder = JvmBase64Encoder\n}\n\nobject JvmBase64Encoder : Base64Encoder {\n    override fun encode(src: ByteArray): ByteArray = Base64.getEncoder().encode(src)\n}\n</div></li></ol><p id="multiplatform-library.md-ed402c5" >Pretty simple, right? You\'ve provided a platform-specific implementation by using a straightforward delegation to a third-party implementation.</p></section><section class="chapter"  ><h3 id="multiplatform-library.md-js" data-toc="multiplatform-library#multiplatform-library.md-js"  >JS</h3><p id="multiplatform-library.md-17b595bb" >The JS implementation will be very similar to the JVM one.</p><ol class="list _decimal" id="multiplatform-library.md-84129e38"   ><li class="list__item" id="multiplatform-library.md-4820cc97" ><p id="multiplatform-library.md-c0056a70" >In the <code class="code " id="multiplatform-library.md-bed2c63d"  >jsMain/kotlin</code> directory, create the <code class="code " id="multiplatform-library.md-d3921e90"  >org.jetbrains.base64</code> package.</p></li><li class="list__item" id="multiplatform-library.md-c6f6ec43" ><p id="multiplatform-library.md-66ad734f" >Create the <code class="code " id="multiplatform-library.md-3020d7d1"  >Base64.kt</code> file in the new package.</p></li><li class="list__item" id="multiplatform-library.md-bcfefefe" ><p id="multiplatform-library.md-2410e76e" >Provide a simple implementation of the <code class="code " id="multiplatform-library.md-88dabbb2"  >Base64Factory</code> object that delegates to the NodeJS <code class="code " id="multiplatform-library.md-bdeb8483"  >Buffer</code> API:</p><div class="code-block" data-lang="kotlin" id="multiplatform-library.md-89e2c8a1"         >package org.jetbrains.base64\n\nactual object Base64Factory {\n    actual fun createEncoder(): Base64Encoder = JsBase64Encoder\n}\n\nobject JsBase64Encoder : Base64Encoder {\n    override fun encode(src: ByteArray): ByteArray {\n        val buffer = js(&quot;Buffer&quot;).from(src)\n        val string = buffer.toString(&quot;base64&quot;) as String\n        return ByteArray(string.length) { string[it].toByte() }\n    }\n}\n</div></li></ol></section><section class="chapter"  ><h3 id="multiplatform-library.md-native" data-toc="multiplatform-library#multiplatform-library.md-native"  >Native</h3><p id="multiplatform-library.md-10b80915" >Unfortunately, there is no third-party implementation available for all Kotlin/Native targets, so you need to write it yourself.</p><ol class="list _decimal" id="multiplatform-library.md-1ad932eb"   ><li class="list__item" id="multiplatform-library.md-81e1f043" ><p id="multiplatform-library.md-ca4f5f6c" >In the <code class="code " id="multiplatform-library.md-b1f6e083"  >nativeMain/kotlin</code> directory, create the <code class="code " id="multiplatform-library.md-53665e45"  >org.jetbrains.base64</code> package.</p></li><li class="list__item" id="multiplatform-library.md-d63b3cc4" ><p id="multiplatform-library.md-d480d23d" >Create the <code class="code " id="multiplatform-library.md-83e0d1d0"  >Base64.kt</code> file in the new package.</p></li><li class="list__item" id="multiplatform-library.md-6eb07934" ><p id="multiplatform-library.md-5b35f7a6" >Provide your own implementation for the <code class="code " id="multiplatform-library.md-5a43982e"  >Base64Factory</code> object:</p><div class="code-block" data-lang="kotlin" id="multiplatform-library.md-32a3aaaa"         >package org.jetbrains.base64\n\nprivate val BASE64_ALPHABET: String = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;\nprivate val BASE64_MASK: Byte = 0x3f\nprivate val BASE64_PAD: Char = \'=\'\nprivate val BASE64_INVERSE_ALPHABET = IntArray(256) {\n    BASE64_ALPHABET.indexOf(it.toChar())\n}\n\nprivate fun Int.toBase64(): Char = BASE64_ALPHABET[this]\n\nactual object Base64Factory {\n    actual fun createEncoder(): Base64Encoder = NativeBase64Encoder\n}\n\nobject NativeBase64Encoder : Base64Encoder {\n    override fun encode(src: ByteArray): ByteArray {\n        fun ByteArray.getOrZero(index: Int): Int = if (index &gt;= size) 0 else get(index).toInt()\n        // 4n / 3 is expected Base64 payload\n        val result = ArrayList&lt;Byte&gt;(4 * src.size / 3)\n        var index = 0\n        while (index &lt; src.size) {\n            val symbolsLeft = src.size - index\n            val padSize = if (symbolsLeft &gt;= 3) 0 else (3 - symbolsLeft) * 8 / 6\n            val chunk = (src.getOrZero(index) shl 16) or (src.getOrZero(index + 1) shl 8) or src.getOrZero(index + 2)\n            index += 3\n\n            for (i in 3 downTo padSize) {\n                val char = (chunk shr (6 * i)) and BASE64_MASK.toInt()\n                result.add(char.toBase64().toByte())\n            }\n            // Fill the pad with \'=\'\n            repeat(padSize) { result.add(BASE64_PAD.toByte()) }\n        }\n\n        return result.toByteArray()\n    }\n}\n</div></li></ol></section></section><section class="chapter"  ><h2 id="multiplatform-library.md-test-your-library" data-toc="multiplatform-library#multiplatform-library.md-test-your-library"  >Test your library</h2><p id="multiplatform-library.md-e9e98a22" >Now when you have <code class="code " id="multiplatform-library.md-32ae4cd"  >actual</code> implementations of the <code class="code " id="multiplatform-library.md-489dc6d6"  >Base64Factory</code> object for all platforms, it\'s time to test your multiplatform library.</p><p id="multiplatform-library.md-93dad477" >To save time on testing, you can write common tests that will be executed on all platforms instead of testing each platform separately.</p><section class="chapter"  ><h3 id="multiplatform-library.md-prerequisites" data-toc="multiplatform-library#multiplatform-library.md-prerequisites"  >Prerequisites</h3><p id="multiplatform-library.md-dbf0cf2b" >Before writing tests, add the <code class="code " id="multiplatform-library.md-38973f57"  >encodeToString</code> method with the default implementation to the <code class="code " id="multiplatform-library.md-8cf59a78"  >Base64Encoder</code> interface, which is defined in <code class="code " id="multiplatform-library.md-8fd4f735"  >commonMain/kotlin/org/jetbrains/base64/Base64.kt</code>. This implementation converts byte arrays to strings, which are much easier to test.</p><div class="code-block" data-lang="kotlin" id="multiplatform-library.md-73d74fc5"         >interface Base64Encoder {\n    fun encode(src: ByteArray): ByteArray\n\n    fun encodeToString(src: ByteArray): String {\n        val encoded = encode(src)\n        return buildString(encoded.size) {\n            encoded.forEach { append(it.toChar()) }\n        }\n    }\n}\n</div><p id="multiplatform-library.md-13b53fa" >You can also provide a more efficient implementation of this method for a specific platform, for example, for JVM in <code class="code " id="multiplatform-library.md-763c95e3"  >jvmMain/kotlin/org/jetbrains/base64/Base64.kt</code>:</p><div class="code-block" data-lang="kotlin" id="multiplatform-library.md-6a95d177"         >object JvmBase64Encoder : Base64Encoder {\n    override fun encode(src: ByteArray): ByteArray = Base64.getEncoder().encode(src)\n    override fun encodeToString(src: ByteArray): String = Base64.getEncoder().encodeToString(src)\n}\n</div><p id="multiplatform-library.md-4b01aa44" >One of the benefits of a multiplatform library is having a default implementation with optional platform-specific overrides.</p></section><section class="chapter"  ><h3 id="multiplatform-library.md-write-common-tests" data-toc="multiplatform-library#multiplatform-library.md-write-common-tests"  >Write common tests</h3><p id="multiplatform-library.md-29545614" >Now you have a string-based API that you can cover with basic tests.</p><ol class="list _decimal" id="multiplatform-library.md-afcf6a39"   ><li class="list__item" id="multiplatform-library.md-2779d94d" ><p id="multiplatform-library.md-9eb66102" >In the <code class="code " id="multiplatform-library.md-a85baa4d"  >commonTest/kotlin</code> directory, create the <code class="code " id="multiplatform-library.md-e4807693"  >org.jetbrains.base64</code> package.</p></li><li class="list__item" id="multiplatform-library.md-85935ac6" ><p id="multiplatform-library.md-c610f3f6" >Create the <code class="code " id="multiplatform-library.md-b7809274"  >Base64Test.kt</code> file in the new package.</p></li><li class="list__item" id="multiplatform-library.md-26de6dae" ><p id="multiplatform-library.md-8e47e9f2" >Add tests to this file:</p><div class="code-block" data-lang="kotlin" id="multiplatform-library.md-25e7918f"         >package org.jetbrains.base64\n\nimport kotlin.test.Test\n\nclass Base64Test {\n    @Test\n    fun testEncodeToString() {\n        checkEncodeToString(&quot;Kotlin is awesome&quot;, &quot;S290bGluIGlzIGF3ZXNvbWU=&quot;)\n    }\n\n    @Test\n    fun testPaddedStrings() {\n        checkEncodeToString(&quot;&quot;, &quot;&quot;)\n        checkEncodeToString(&quot;1&quot;, &quot;MQ==&quot;)\n        checkEncodeToString(&quot;22&quot;, &quot;MjI=&quot;)\n        checkEncodeToString(&quot;333&quot;, &quot;MzMz&quot;)\n        checkEncodeToString(&quot;4444&quot;, &quot;NDQ0NA==&quot;)\n    }\n\n    private fun checkEncodeToString(input: String, expectedOutput: String) {\n        assertEquals(expectedOutput, Base64Factory.createEncoder().encodeToString(input.asciiToByteArray()))\n    }\n\n    private fun String.asciiToByteArray() = ByteArray(length) {\n        get(it).toByte()\n    }\n}\n</div></li><li class="list__item" id="multiplatform-library.md-e2c2efc4" ><p id="multiplatform-library.md-52d224de" >In the Terminal, execute the <code class="code " id="multiplatform-library.md-4e60b8c8"  >check</code> Gradle task:</p><div class="code-block" data-lang="plaintext" id="multiplatform-library.md-901a80c3"         >./gradlew check \n</div><aside data-type="note" class="prompt" data-title="" id="multiplatform-library.md-19816569" ><p id="multiplatform-library.md-16d5de43" >You can also run the <code class="code " id="multiplatform-library.md-ef2fe749"  >check</code> Gradle task by double-clicking it in the list of Gradle tasks.</p></aside></li></ol><p id="multiplatform-library.md-97a79866" >The tests will run on all platforms (JVM, JS, and Native).</p></section><section class="chapter"  ><h3 id="multiplatform-library.md-add-platform-specific-tests" data-toc="multiplatform-library#multiplatform-library.md-add-platform-specific-tests"  >Add platform-specific tests</h3><p id="multiplatform-library.md-d1689f41" >You can also add tests that will be run only for a specific platform. For example, you can add UTF-16 tests on JVM. Just follow the same steps as for common tests, but create the <code class="code " id="multiplatform-library.md-21a8239"  >Base64Test</code> file in <code class="code " id="multiplatform-library.md-bcf831e4"  >jvmTest/kotlin/org/jetbrains/base64</code>:</p><div class="code-block" data-lang="kotlin" id="multiplatform-library.md-edad57bf"         >package org.jetbrains.base64\n\nimport org.junit.Test\nimport kotlin.test.assertEquals\n\nclass Base64JvmTest {\n    @Test\n    fun testNonAsciiString() {\n        val utf8String = &quot;Gödel&quot;\n        val actual = Base64Factory.createEncoder().encodeToString(utf8String.toByteArray())\n        assertEquals(&quot;R8O2ZGVs&quot;, actual)\n    }\n}\n</div><p id="multiplatform-library.md-6949c0e6" >This test will automatically run on the JVM platform in addition to the common tests.</p></section></section><section class="chapter"  ><h2 id="multiplatform-library.md-publish-your-library-to-the-local-maven-repository" data-toc="multiplatform-library#multiplatform-library.md-publish-your-library-to-the-local-maven-repository"  >Publish your library to the local Maven repository</h2><p id="multiplatform-library.md-229fca16" >Your multiplatform library is ready for publishing so that you can use it in other projects.</p><p id="multiplatform-library.md-fbcdcbd8" >To publish your library, use the <a href="https://docs.gradle.org/current/userguide/publishing_maven.html" id="multiplatform-library.md-11427c14"   data-external="true" rel="noopener noreferrer" ><code class="code " id="multiplatform-library.md-82b6a21c"  >maven-publish</code> Gradle plugin</a>.</p><ol class="list _decimal" id="multiplatform-library.md-860985fe"   ><li class="list__item" id="multiplatform-library.md-ba2e7457" ><p>In the <code class="code " id="multiplatform-library.md-3d3a40ec"  >build.gradle(.kts)</code> file, apply the <code class="code " id="multiplatform-library.md-f9a12e0d"  >maven-publish</code> plugin and specify the group and version of your library:</p></li></ol><div class="tabs" id="multiplatform-library.md-e2944acb" ><div class="tabs__content" data-gtm="tab" id="multiplatform-library.md-13442567"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="multiplatform-library.md-13442567"   data-title="Groovy"      >plugins {\n   id \'org.jetbrains.kotlin.multiplatform\' version \'1.4.32\'\n   id \'maven-publish\'\n}\n\ngroup = \'org.jetbrains.base64\'\nversion = \'1.0.0\'\n</div></div><div class="tabs__content" data-gtm="tab" id="multiplatform-library.md-ff1ff114"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="multiplatform-library.md-ff1ff114"   data-title="Kotlin"      >plugins {\n    kotlin(&quot;multiplatform&quot;) version &quot;1.4.32&quot;\n    id(&quot;maven-publish&quot;)\n}\n\ngroup = &quot;org.jetbrains.base64&quot;\nversion = &quot;1.0.0&quot;\n</div></div></div><ol class="list _decimal" id="multiplatform-library.md-9d0ae030"   start="2"><li class="list__item" id="multiplatform-library.md-1abfb467" ><p id="multiplatform-library.md-e693076" >In the Terminal, run the <code class="code " id="multiplatform-library.md-c6bf2e59"  >publishToMavenLocal</code> Gradle task to publish your library to your local Maven repository:</p><div class="code-block" data-lang="plaintext" id="multiplatform-library.md-aa591287"         >./gradlew publishToMavenLocal\n</div><aside data-type="note" class="prompt" data-title="" id="multiplatform-library.md-8eee4eaf" ><p id="multiplatform-library.md-ab22d035" >You can also run the <code class="code " id="multiplatform-library.md-6f8bc402"  >publishToMavenLocal</code> Gradle task by double-clicking it in the list of Gradle tasks.</p></aside></li></ol><p id="multiplatform-library.md-cd7e14f8" >Your library will be published to the local Maven repository.</p></section><section class="chapter"  ><h2 id="multiplatform-library.md-add-a-dependency-on-the-published-library" data-toc="multiplatform-library#multiplatform-library.md-add-a-dependency-on-the-published-library"  >Add a dependency on the published library</h2><p id="multiplatform-library.md-628f3679" >Now you can add your library to other multiplatform projects as a dependency.</p><p id="multiplatform-library.md-25a307b" >Add the <code class="code " id="multiplatform-library.md-dc9dc481"  >mavenLocal()</code> repository and add a dependency on your library to the <code class="code " id="multiplatform-library.md-79891966"  >build.gradle(.kts)</code> file.</p><div class="tabs" id="multiplatform-library.md-d2f568cf" ><div class="tabs__content" data-gtm="tab" id="multiplatform-library.md-e667806f"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="multiplatform-library.md-e667806f"   data-title="Groovy"      >repositories {\n   mavenCentral()\n   mavenLocal()\n}\n\nkotlin {\n   sourceSets {\n      commonMain {\n         dependencies {\n            implementation \'org.jetbrains.base64:Base64:1.0.0\'\n         }\n      }\n   }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="multiplatform-library.md-c63aa393"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="multiplatform-library.md-c63aa393"   data-title="Kotlin"      >repositories {\n   mavenCentral()\n   mavenLocal()\n}\n\nkotlin {\n   sourceSets {\n      val commonMain by getting {\n         dependencies {\n            implementation(&quot;org.jetbrains.base64:Base64:1.0.0&quot;)\n         }\n      }\n   }\n}\n</div></div></div></section><section class="chapter"  ><h2 id="multiplatform-library.md-summary" data-toc="multiplatform-library#multiplatform-library.md-summary"  >Summary</h2><p id="multiplatform-library.md-f26de21e" >In this tutorial, you:</p><ul class="list _ul" id="multiplatform-library.md-ca17dd3d"   ><li class="list__item" id="multiplatform-library.md-be7144ec" ><p>Created a multiplatform library with platform-specific implementations.</p></li><li class="list__item" id="multiplatform-library.md-439f28ba" ><p>Wrote common tests that are executed on all platforms.</p></li><li class="list__item" id="multiplatform-library.md-36763382" ><p>Published your library to the local Maven repository.</p></li></ul></section><section class="chapter"  ><h2 id="multiplatform-library.md-what-s-next" data-toc="multiplatform-library#multiplatform-library.md-what-s-next"  >What’s next?</h2><ul class="list _ul" id="multiplatform-library.md-e84870d8"   ><li class="list__item" id="multiplatform-library.md-5d8e5847" ><p>Learn more about <a href="#mpp-publish-lib.md" id="multiplatform-library.md-b7e827d7"   >publishing multiplatform libraries</a>.</p></li><li class="list__item" id="multiplatform-library.md-6e114fe7" ><p>Learn more about <a href="#mpp-intro.md" id="multiplatform-library.md-21ffcf39"   >Kotlin Multiplatform</a>.</p></li><li class="list__item" id="multiplatform-library.md-d1df6d80" ><p><a href="https://kotlinlang.org/docs/mobile/create-first-app.html" id="multiplatform-library.md-148e08d2"   data-external="true" rel="noopener noreferrer" >Create your first KMM application for Android and iOS – tutorial</a>.</p></li><li class="list__item" id="multiplatform-library.md-92019ff" ><p><a href="https://play.kotlinlang.org/hands-on/Full%20Stack%20Web%20App%20with%20Kotlin%20Multiplatform/01_Introduction" id="multiplatform-library.md-1ca303a"   data-external="true" rel="noopener noreferrer" >Create a full-stack web app with Kotlin Multiplatform – hands-on tutorial</a>.</p></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="mpp-build-native-binaries.md"  >Build final native binaries</h1><p id="mpp-build-native-binaries.md-3df95a34" >By default, a Kotlin/Native target is compiled down to a <code class="code " id="mpp-build-native-binaries.md-ffcd569d"  >*.klib</code> library artifact, which can be consumed by Kotlin/Native itself as a dependency but cannot be executed or used as a native library.</p><p id="mpp-build-native-binaries.md-81cd989f" >To declare final native binaries such as executables or shared libraries, use the <code class="code " id="mpp-build-native-binaries.md-cfb647bd"  >binaries</code> property of a native target. This property represents a collection of native binaries built for this target in addition to the default <code class="code " id="mpp-build-native-binaries.md-cb2e116d"  >*.klib</code> artifact and provides a set of methods for declaring and configuring them.</p><aside data-type="note" class="prompt" data-title="" id="mpp-build-native-binaries.md-c77e0f66" ><p id="mpp-build-native-binaries.md-5425966d" >The <code class="code " id="mpp-build-native-binaries.md-778f1f2f"  >kotlin-multiplatform</code> plugin doesn\'t create any production binaries by default. The only binary available by default is a debug test executable that lets you run unit tests from the <code class="code " id="mpp-build-native-binaries.md-a8e47d7b"  >test</code> compilation.</p></aside><section class="chapter"  ><h2 id="mpp-build-native-binaries.md-declare-binaries" data-toc="mpp-build-native-binaries#mpp-build-native-binaries.md-declare-binaries"  >Declare binaries</h2><p id="mpp-build-native-binaries.md-f37df705" >Use the following factory methods to declare elements of the <code class="code " id="mpp-build-native-binaries.md-31da0aed"  >binaries</code> collection.</p><div class="table-wrapper" ><table class=" wide" id="mpp-build-native-binaries.md-aa6ccb5"  ><thead><tr class="ijRowHead" id="mpp-build-native-binaries.md-debb70c3" ><th id="mpp-build-native-binaries.md-4d4a2c79"    >Factory method</th><th id="mpp-build-native-binaries.md-69461d59"    >Binary kind</th><th id="mpp-build-native-binaries.md-593e6cb7"    >Available for</th></tr></thead><tbody ><tr class="" id="mpp-build-native-binaries.md-32c66695" ><td id="mpp-build-native-binaries.md-4ed3b097"    ><code class="code " id="mpp-build-native-binaries.md-9351b2e8"  >executable</code></td><td id="mpp-build-native-binaries.md-cb692d02"    >Product executable</td><td id="mpp-build-native-binaries.md-8d4c8c2f"    >All native targets</td></tr><tr class="" id="mpp-build-native-binaries.md-7e2a25fd" ><td id="mpp-build-native-binaries.md-f0aee9f4"    ><code class="code " id="mpp-build-native-binaries.md-5f608edb"  >test</code></td><td id="mpp-build-native-binaries.md-1418c93f"    >Test executable</td><td id="mpp-build-native-binaries.md-8156f7bd"    >All native targets</td></tr><tr class="" id="mpp-build-native-binaries.md-453f0f2a" ><td id="mpp-build-native-binaries.md-2265b4b3"    ><code class="code " id="mpp-build-native-binaries.md-8459ce55"  >sharedLib</code></td><td id="mpp-build-native-binaries.md-9d5b452e"    >Shared native library</td><td id="mpp-build-native-binaries.md-70e1b4eb"    >All native targets, except for <code class="code " id="mpp-build-native-binaries.md-303546ab"  >WebAssembly</code></td></tr><tr class="" id="mpp-build-native-binaries.md-9a39f7d9" ><td id="mpp-build-native-binaries.md-18b2bbc8"    ><code class="code " id="mpp-build-native-binaries.md-871e5163"  >staticLib</code></td><td id="mpp-build-native-binaries.md-3cb5b912"    >Static native library</td><td id="mpp-build-native-binaries.md-bd1dec3f"    >All native targets, except for <code class="code " id="mpp-build-native-binaries.md-c40fab52"  >WebAssembly</code></td></tr><tr class="" id="mpp-build-native-binaries.md-ca8129da" ><td id="mpp-build-native-binaries.md-df64f72b"    ><code class="code " id="mpp-build-native-binaries.md-9726978"  >framework</code></td><td id="mpp-build-native-binaries.md-c81b83e"    >Objective-C framework</td><td id="mpp-build-native-binaries.md-578b1f49"    >macOS, iOS, watchOS, and tvOS targets only</td></tr></tbody ></table ></div><p id="mpp-build-native-binaries.md-bf131799" >The simplest version doesn\'t require any additional parameters and creates one binary for each build type. Currently, two build types are available:</p><ul class="list _ul" id="mpp-build-native-binaries.md-b2082eea"   ><li class="list__item" id="mpp-build-native-binaries.md-bdaf7633" ><p><code class="code " id="mpp-build-native-binaries.md-9284f5ab"  >DEBUG</code> – produces a non-optimized binary with debug information</p></li><li class="list__item" id="mpp-build-native-binaries.md-b16ad053" ><p><code class="code " id="mpp-build-native-binaries.md-70f93030"  >RELEASE</code> – produces an optimized binary without debug information</p></li></ul><p id="mpp-build-native-binaries.md-9405df3c" >The following snippet creates two executable binaries: debug and release.</p><div class="code-block" data-lang="kotlin" id="mpp-build-native-binaries.md-cb73e81a"         >kotlin {\n    linuxX64 { // Use your target instead.\n        binaries {\n            executable {\n                // Binary configuration.\n            }\n        }\n    }\n}\n</div><p id="mpp-build-native-binaries.md-a803125f" >You can drop the lambda if there is no need for <a href="#mpp-dsl-reference.md-native-targets" id="mpp-build-native-binaries.md-cb76f4a1"   >additional configuration</a>:</p><div class="code-block" data-lang="kotlin" id="mpp-build-native-binaries.md-c9312c16"         >binaries {\n    executable()\n}\n</div><p id="mpp-build-native-binaries.md-a8f5ef98" >You can specify for which build types to create binaries. In the following example, only the <code class="code " id="mpp-build-native-binaries.md-366a6725"  >debug</code> executable is created.</p><div class="tabs" id="mpp-build-native-binaries.md-9568c060" ><div class="tabs__content" data-gtm="tab" id="mpp-build-native-binaries.md-8bc458c"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-build-native-binaries.md-8bc458c"   data-title="Groovy"      >binaries {\n    executable([DEBUG]) {\n        // Binary configuration.\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-build-native-binaries.md-f621c3a6"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-build-native-binaries.md-f621c3a6"   data-title="Kotlin"      >binaries {\n    executable(listOf(DEBUG)) {\n        // Binary configuration.\n    }\n}\n</div></div></div><p id="mpp-build-native-binaries.md-14f2adf6" >You can also declare binaries with custom names.</p><div class="tabs" id="mpp-build-native-binaries.md-96b6c131" ><div class="tabs__content" data-gtm="tab" id="mpp-build-native-binaries.md-10af69af"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-build-native-binaries.md-10af69af"   data-title="Groovy"      >binaries {\n    executable(\'foo\', [DEBUG]) {\n        // Binary configuration.\n    }\n\n    // It\'s possible to drop the list of build types (in which case, all the available build types will be used).\n    executable(\'bar\') {\n        // Binary configuration.\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-build-native-binaries.md-6b1778d"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-build-native-binaries.md-6b1778d"   data-title="Kotlin"      >binaries {\n    executable(&quot;foo&quot;, listOf(DEBUG)) {\n        // Binary configuration.\n    }\n\n    // It\'s possible to drop the list of build types (in which case, all the available build types will be used).\n    executable(&quot;bar&quot;) {\n        // Binary configuration.\n    }\n}\n</div></div></div><p id="mpp-build-native-binaries.md-acbfa129" >The first argument sets a name prefix, which is the default name for the binary file. For example, for Windows the code produces the files <code class="code " id="mpp-build-native-binaries.md-cf303340"  >foo.exe</code> and <code class="code " id="mpp-build-native-binaries.md-117311b1"  >bar.exe</code>. You can also use the name prefix to <a href="#mpp-build-native-binaries.md-access-binaries" id="mpp-build-native-binaries.md-8c5ce919"   >access the binary in the build script</a>.</p></section><section class="chapter"  ><h2 id="mpp-build-native-binaries.md-access-binaries" data-toc="mpp-build-native-binaries#mpp-build-native-binaries.md-access-binaries"  >Access binaries</h2><p id="mpp-build-native-binaries.md-29a26025" >You can access binaries to <a href="#mpp-dsl-reference.md-native-targets" id="mpp-build-native-binaries.md-f9ced65b"   >configure them</a> or get their properties (for example, the path to an output file).</p><p id="mpp-build-native-binaries.md-f7cab40d" >You can get a binary by its unique name. This name is based on the name prefix (if it is specified), build type, and binary kind following the pattern: <code class="code " id="mpp-build-native-binaries.md-66d19182"  >&lt;optional-name-prefix&gt;&lt;build-type&gt;&lt;binary-kind&gt;</code>, for example, <code class="code " id="mpp-build-native-binaries.md-b1ff3cd7"  >releaseFramework</code> or <code class="code " id="mpp-build-native-binaries.md-c0a57f24"  >testDebugExecutable</code>.</p><aside data-type="note" class="prompt" data-title="" id="mpp-build-native-binaries.md-1e89f682" ><p id="mpp-build-native-binaries.md-e6136e8a" >Static and shared libraries have the suffixes static and shared respectively, for example, <code class="code " id="mpp-build-native-binaries.md-4e679aca"  >fooDebugStatic</code> or <code class="code " id="mpp-build-native-binaries.md-ccb7f0f5"  >barReleaseShared</code>.</p></aside><div class="tabs" id="mpp-build-native-binaries.md-efcdf14f" ><div class="tabs__content" data-gtm="tab" id="mpp-build-native-binaries.md-4d5648e1"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-build-native-binaries.md-4d5648e1"   data-title="Groovy"      >// Fails if there is no such binary.\nbinaries[\'fooDebugExecutable\']\nbinaries.fooDebugExecutable\nbinaries.getByName(\'fooDebugExecutable\')\n\n// Returns null if there is no such binary.\nbinaries.findByName(\'fooDebugExecutable\')\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-build-native-binaries.md-36d4d38b"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-build-native-binaries.md-36d4d38b"   data-title="Kotlin"      >// Fails if there is no such binary.\nbinaries[&quot;fooDebugExecutable&quot;]\nbinaries.getByName(&quot;fooDebugExecutable&quot;)\n\n// Returns null if there is no such binary.\nbinaries.findByName(&quot;fooDebugExecutable&quot;)\n</div></div></div><p id="mpp-build-native-binaries.md-83e95b45" >Alternatively, you can access a binary by its name prefix and build type using typed getters.</p><div class="tabs" id="mpp-build-native-binaries.md-1bae4b51" ><div class="tabs__content" data-gtm="tab" id="mpp-build-native-binaries.md-9e7f67d4"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-build-native-binaries.md-9e7f67d4"   data-title="Groovy"      >// Fails if there is no such binary.\nbinaries.getExecutable(\'foo\', DEBUG)\nbinaries.getExecutable(DEBUG)          // Skip the first argument if the name prefix isn\'t set.\nbinaries.getExecutable(\'bar\', \'DEBUG\') // You also can use a string for build type.\n\n// Similar getters are available for other binary kinds:\n// getFramework, getStaticLib and getSharedLib.\n\n// Returns null if there is no such binary.\nbinaries.findExecutable(\'foo\', DEBUG)\n\n// Similar getters are available for other binary kinds:\n// findFramework, findStaticLib and findSharedLib.\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-build-native-binaries.md-a9c49b4e"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-build-native-binaries.md-a9c49b4e"   data-title="Kotlin"      >// Fails if there is no such binary.\nbinaries.getExecutable(&quot;foo&quot;, DEBUG)\nbinaries.getExecutable(DEBUG)          // Skip the first argument if the name prefix isn\'t set.\nbinaries.getExecutable(&quot;bar&quot;, &quot;DEBUG&quot;) // You also can use a string for build type.\n\n// Similar getters are available for other binary kinds:\n// getFramework, getStaticLib and getSharedLib.\n\n// Returns null if there is no such binary.\nbinaries.findExecutable(&quot;foo&quot;, DEBUG)\n\n// Similar getters are available for other binary kinds:\n// findFramework, findStaticLib and findSharedLib.\n</div></div></div></section><section class="chapter"  ><h2 id="mpp-build-native-binaries.md-export-dependencies-to-binaries" data-toc="mpp-build-native-binaries#mpp-build-native-binaries.md-export-dependencies-to-binaries"  >Export dependencies to binaries</h2><p id="mpp-build-native-binaries.md-64ab8d54" >When building an Objective-C framework or a native library (shared or static), you may need to pack not just the classes of the current project, but also the classes of its dependencies. Specify which dependencies to export to a binary using the <code class="code " id="mpp-build-native-binaries.md-5e6b4cb2"  >export</code> method.</p><div class="tabs" id="mpp-build-native-binaries.md-e4960f6d" ><div class="tabs__content" data-gtm="tab" id="mpp-build-native-binaries.md-1a7b097d"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-build-native-binaries.md-1a7b097d"   data-title="Groovy"      >kotlin {\n    sourceSets {\n        macosMain.dependencies {\n            // Will be exported.\n            api project(\':dependency\')\n            api \'org.example:exported-library:1.0\'\n            // Will not be exported.\n            api \'org.example:not-exported-library:1.0\'\n        }\n    }\n    macosX64(&quot;macos&quot;).binaries {\n        framework {\n            export project(\':dependency\')\n            export \'org.example:exported-library:1.0\'\n        }\n        sharedLib {\n            // It\'s possible to export different sets of dependencies to different binaries.\n            export project(\':dependency\')\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-build-native-binaries.md-af18e5c7"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-build-native-binaries.md-af18e5c7"   data-title="Kotlin"      >kotlin {\n    sourceSets {\n        macosMain.dependencies {\n            // Will be exported.\n            api(project(&quot;:dependency&quot;))\n            api(&quot;org.example:exported-library:1.0&quot;)\n            // Will not be exported.\n            api(&quot;org.example:not-exported-library:1.0&quot;)\n        }\n    }\n    macosX64(&quot;macos&quot;).binaries {\n        framework {\n            export(project(&quot;:dependency&quot;))\n            export(&quot;org.example:exported-library:1.0&quot;)\n        }\n        sharedLib {\n            // It\'s possible to export different sets of dependencies to different binaries.\n            export(project(\':dependency\'))\n        }\n    }\n}\n</div></div></div><aside data-type="note" class="prompt" data-title="" id="mpp-build-native-binaries.md-73cb7c7f" ><p id="mpp-build-native-binaries.md-f57b8fe6" >You can export only <a href="#gradle.md-dependency-types" id="mpp-build-native-binaries.md-ff1dd70d"   ><code class="code " id="mpp-build-native-binaries.md-43a61c9b"  >api</code> dependencies</a> of the corresponding source set. <br/> You can export maven dependencies, but due to current limitations of Gradle metadata, such a dependency should be either a platform dependency (for example, <code class="code " id="mpp-build-native-binaries.md-cc37b010"  >kotlinx-coroutines-core-native_debug_macos_x64</code> instead of <code class="code " id="mpp-build-native-binaries.md-fff55f7f"  >kotlinx-coroutines-core-native</code>) or be exported transitively.</p></aside><p id="mpp-build-native-binaries.md-b21b3e47" >By default, export works non-transitively. This means that if you export the library <code class="code " id="mpp-build-native-binaries.md-a3d13bf5"  >foo</code> depending on the library <code class="code " id="mpp-build-native-binaries.md-88816bb3"  >bar</code>, only methods of <code class="code " id="mpp-build-native-binaries.md-39c96646"  >foo</code> are added to the output framework.</p><p id="mpp-build-native-binaries.md-a6fca040" >You can change this behavior using the <code class="code " id="mpp-build-native-binaries.md-bb9339f4"  >transitiveExport</code> flag. If set to <code class="code " id="mpp-build-native-binaries.md-9a004b63"  >true</code>, the declarations of the library <code class="code " id="mpp-build-native-binaries.md-7cb99ad0"  >bar</code> are exported as well.</p><div class="tabs" id="mpp-build-native-binaries.md-e418b1db" ><div class="tabs__content" data-gtm="tab" id="mpp-build-native-binaries.md-71db0b38"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-build-native-binaries.md-71db0b38"   data-title="Groovy"      >binaries {\n   framework {\n       export project(\':dependency\')\n       // Export transitively.\n       transitiveExport = true\n   }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-build-native-binaries.md-d2b19835"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-build-native-binaries.md-d2b19835"   data-title="Kotlin"      >binaries {\n    framework {\n        export(project(&quot;:dependency&quot;))\n        // Export transitively.\n        transitiveExport = true\n    }\n}\n</div></div></div><p id="mpp-build-native-binaries.md-62f02958" >For example, assume that you write several modules in Kotlin and then want to access them from Swift. Since usage of several Kotlin/Native frameworks in one Swift application is limited, you can create a single umbrella framework and export all these modules to it.</p></section><section class="chapter"  ><h2 id="mpp-build-native-binaries.md-build-universal-frameworks" data-toc="mpp-build-native-binaries#mpp-build-native-binaries.md-build-universal-frameworks"  >Build universal frameworks</h2><p id="mpp-build-native-binaries.md-64c75b5c" >By default, an Objective-C framework produced by Kotlin/Native supports only one platform. However, you can merge such frameworks into a single universal (fat) binary using the <a href="https://llvm.org/docs/CommandGuide/llvm-lipo.html" id="mpp-build-native-binaries.md-f76020b5"   data-external="true" rel="noopener noreferrer" ><code class="code " id="mpp-build-native-binaries.md-f164ed2a"  >lipo</code> tool</a>. This operation especially makes sense for 32-bit and 64-bit iOS frameworks. In this case, you can use the resulting universal framework on both 32-bit and 64-bit devices.</p><aside data-type="note" class="prompt" data-title="" id="mpp-build-native-binaries.md-c74283b2" ><p id="mpp-build-native-binaries.md-7b8e0827" >The fat framework must have the same base name as the initial frameworks.</p></aside><div class="tabs" id="mpp-build-native-binaries.md-3eef4620" ><div class="tabs__content" data-gtm="tab" id="mpp-build-native-binaries.md-e8529fb1"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-build-native-binaries.md-e8529fb1"   data-title="Groovy"      >import org.jetbrains.kotlin.gradle.tasks.FatFrameworkTask\n\nkotlin {\n    // Create and configure the targets.\n    targets {\n        iosArm32(&quot;ios32&quot;)\n        iosArm64(&quot;ios64&quot;)\n        configure([ios32, ios64]) {\n            binaries.framework {\n                baseName = &quot;my_framework&quot;\n            }\n        }\n    }\n    // Create a task building a fat framework.\n    tasks.register(&quot;debugFatFramework&quot;, FatFrameworkTask) {\n        // The fat framework must have the same base name as the initial frameworks.\n        baseName = &quot;my_framework&quot;\n        // The default destination directory is &quot;&lt;build directory&gt;/fat-framework&quot;.\n        destinationDir = file(&quot;$buildDir/fat-framework/debug&quot;)\n        // Specify the frameworks to be merged.\n        from(\n                targets.ios32.binaries.getFramework(&quot;DEBUG&quot;),\n                targets.ios64.binaries.getFramework(&quot;DEBUG&quot;)\n        )\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-build-native-binaries.md-7590e02f"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-build-native-binaries.md-7590e02f"   data-title="Kotlin"      >import org.jetbrains.kotlin.gradle.tasks.FatFrameworkTask\n\nkotlin {\n    // Create and configure the targets.\n    val ios32 = iosArm32(&quot;ios32&quot;)\n    val ios64 = iosArm64(&quot;ios64&quot;)\n    configure(listOf(ios32, ios64)) {\n        binaries.framework {\n            baseName = &quot;my_framework&quot;\n        }\n    }\n    // Create a task to build a fat framework.\n    tasks.register&lt;FatFrameworkTask&gt;(&quot;debugFatFramework&quot;) {\n        // The fat framework must have the same base name as the initial frameworks.\n        baseName = &quot;my_framework&quot;\n        // The default destination directory is &quot;&lt;build directory&gt;/fat-framework&quot;.\n        destinationDir = buildDir.resolve(&quot;fat-framework/debug&quot;)\n        // Specify the frameworks to be merged.\n        from(\n                ios32.binaries.getFramework(&quot;DEBUG&quot;),\n                ios64.binaries.getFramework(&quot;DEBUG&quot;)\n        )\n    }\n}\n</div></div></div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="mpp-supported-platforms.md"  >Supported platforms</h1><p id="mpp-supported-platforms.md-f8f4a03f" >Kotlin supports the following platforms and provides target presets for each platform. See how to <a href="#mpp-set-up-targets.md" id="mpp-supported-platforms.md-7b6b4239"   >use a target preset</a>.</p><div class="table-wrapper" ><table class=" wide" id="mpp-supported-platforms.md-b869aaa5"  ><thead><tr class="ijRowHead" id="mpp-supported-platforms.md-b8ff7061" ><th id="mpp-supported-platforms.md-433490d7"    >Target platform</th><th id="mpp-supported-platforms.md-d9174a72"    >Target preset</th><th id="mpp-supported-platforms.md-73a4977f"    >Comments</th></tr></thead><tbody ><tr class="" id="mpp-supported-platforms.md-224b74f1" ><td id="mpp-supported-platforms.md-f9d52c34"    >Kotlin/JVM</td><td id="mpp-supported-platforms.md-7a5c146f"    ><code class="code " id="mpp-supported-platforms.md-6176dc70"  >jvm</code></td><td id="mpp-supported-platforms.md-21ec72a3"    ></td></tr><tr class="" id="mpp-supported-platforms.md-f6dc325c" ><td id="mpp-supported-platforms.md-6cd81c40"    >Kotlin/JS</td><td id="mpp-supported-platforms.md-46aac4f2"    ><code class="code " id="mpp-supported-platforms.md-a7cfb781"  >js</code></td><td id="mpp-supported-platforms.md-c0183a8f"    ><p id="mpp-supported-platforms.md-63672f1b" >Select the execution environment:</p><ul class="list _ul" id="mpp-supported-platforms.md-464285e9"   ><li class="list__item" id="mpp-supported-platforms.md-d6a2235f" ><p><code class="code " id="mpp-supported-platforms.md-bdaf1ded"  >browser {}</code> for applications running in the browser.</p></li><li class="list__item" id="mpp-supported-platforms.md-209cac4b" ><p><code class="code " id="mpp-supported-platforms.md-742187ca"  >nodejs{}</code> for applications running on Node.js.</p></li></ul><p id="mpp-supported-platforms.md-567c36b9" >Learn more in <a href="#js-project-setup.md-execution-environments" id="mpp-supported-platforms.md-99ed279b"   >Setting up a Kotlin/JS project</a>.</p></td></tr><tr class="" id="mpp-supported-platforms.md-8b93b0" ><td id="mpp-supported-platforms.md-20ca28c9"    >Android applications and libraries</td><td id="mpp-supported-platforms.md-6f2680a0"    ><code class="code " id="mpp-supported-platforms.md-44d94d02"  >android</code></td><td id="mpp-supported-platforms.md-bc34e1f6"    ><p id="mpp-supported-platforms.md-d53a22f8" >Manually apply an Android Gradle plugin – <code class="code " id="mpp-supported-platforms.md-ba8d4aeb"  >com.android.application</code> or <code class="code " id="mpp-supported-platforms.md-12228585"  >com.android.library</code>.</p><p id="mpp-supported-platforms.md-aae16a5b" >You can only create one Android target per Gradle subproject.</p></td></tr><tr class="" id="mpp-supported-platforms.md-30a28e13" ><td id="mpp-supported-platforms.md-2edae9d2"    >Android NDK</td><td id="mpp-supported-platforms.md-905c0ec4"    ><code class="code " id="mpp-supported-platforms.md-524f9fbc"  >androidNativeArm32</code>, <code class="code " id="mpp-supported-platforms.md-5b27b8eb"  >androidNativeArm64</code></td><td id="mpp-supported-platforms.md-28544364"    ><p id="mpp-supported-platforms.md-2b175945" >The 64-bit target requires a Linux or macOS host.</p><p id="mpp-supported-platforms.md-33c8c8e2" >You can build the 32-bit target on any supported host.</p></td></tr><tr class="" id="mpp-supported-platforms.md-516cef1e" ><td id="mpp-supported-platforms.md-8a5e208d"    >iOS</td><td id="mpp-supported-platforms.md-822c867c"    ><code class="code " id="mpp-supported-platforms.md-95c627"  >iosArm32</code>, <code class="code " id="mpp-supported-platforms.md-511f2ec7"  >iosArm64</code>, <code class="code " id="mpp-supported-platforms.md-10ed4b38"  >iosX64</code></td><td id="mpp-supported-platforms.md-1cb91b9f"    >Requires a macOS host.</td></tr><tr class="" id="mpp-supported-platforms.md-3edbaee4" ><td id="mpp-supported-platforms.md-9a321fab"    >watchOS</td><td id="mpp-supported-platforms.md-e53b6be2"    ><code class="code " id="mpp-supported-platforms.md-c99e3672"  >watchosArm32</code>, <code class="code " id="mpp-supported-platforms.md-c6e19940"  >watchosArm64</code>, <code class="code " id="mpp-supported-platforms.md-12518be"  >watchosX86</code>, <code class="code " id="mpp-supported-platforms.md-5bfe20ac"  >watchosX64</code></td><td id="mpp-supported-platforms.md-a12cf413"    ></td></tr><tr class="" id="mpp-supported-platforms.md-26f80246" ><td id="mpp-supported-platforms.md-657bef2f"    >tvOS</td><td id="mpp-supported-platforms.md-f6be0557"    ><code class="code " id="mpp-supported-platforms.md-ec404e2b"  >tvosArm64</code>, <code class="code " id="mpp-supported-platforms.md-5240334e"  >tvosX64</code></td><td id="mpp-supported-platforms.md-287b554f"    ></td></tr><tr class="" id="mpp-supported-platforms.md-84b62ff7" ><td id="mpp-supported-platforms.md-e9c43523"    >macOS</td><td id="mpp-supported-platforms.md-50e645cc"    ><code class="code " id="mpp-supported-platforms.md-2561d5f1"  >macosX64</code></td><td id="mpp-supported-platforms.md-3092f18c"    >Requires a macOS host.</td></tr><tr class="" id="mpp-supported-platforms.md-465c2f4c" ><td id="mpp-supported-platforms.md-32c0d464"    >Linux</td><td id="mpp-supported-platforms.md-de914276"    ><code class="code " id="mpp-supported-platforms.md-339515eb"  >linuxArm64</code>, <code class="code " id="mpp-supported-platforms.md-dc88690b"  >linuxArm32Hfp</code>, <code class="code " id="mpp-supported-platforms.md-228b7716"  >linuxMips32</code>, <code class="code " id="mpp-supported-platforms.md-77a8fedb"  >linuxMipsel32</code>, <code class="code " id="mpp-supported-platforms.md-58eaff0f"  >linuxX64</code></td><td id="mpp-supported-platforms.md-b081d0a2"    ><p id="mpp-supported-platforms.md-c771b253" >Linux MIPS targets (<code class="code " id="mpp-supported-platforms.md-3237dd10"  >linuxMips32</code> and <code class="code " id="mpp-supported-platforms.md-733e4116"  >linuxMipsel32</code>) require a Linux host.</p><p id="mpp-supported-platforms.md-de5db089" >You can build other Linux targets on any supported host.</p></td></tr><tr class="" id="mpp-supported-platforms.md-6f1d0bab" ><td id="mpp-supported-platforms.md-8ff467f7"    >Windows</td><td id="mpp-supported-platforms.md-a7a9735f"    ><code class="code " id="mpp-supported-platforms.md-344b9dea"  >mingwX64</code>, <code class="code " id="mpp-supported-platforms.md-4bdb0f52"  >mingwX86</code></td><td id="mpp-supported-platforms.md-949ba887"    >Requires a Windows host.</td></tr><tr class="" id="mpp-supported-platforms.md-e2c20839" ><td id="mpp-supported-platforms.md-b724925c"    >WebAssembly</td><td id="mpp-supported-platforms.md-b5ec7821"    ><code class="code " id="mpp-supported-platforms.md-2542b816"  >wasm32</code></td><td id="mpp-supported-platforms.md-ef0c4f4e"    ></td></tr></tbody ></table ></div><aside data-type="note" class="prompt" data-title="" id="mpp-supported-platforms.md-5ae5bf48" ><p id="mpp-supported-platforms.md-a5f3dfc" >A target that is not supported by the current host is ignored during building and therefore not published.</p></aside></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="mpp-dsl-reference.md"  >Multiplatform Gradle DSL reference</h1><aside data-type="note" class="prompt" data-title="" id="mpp-dsl-reference.md-f6e3799" ><p id="mpp-dsl-reference.md-8755a380" >Multiplatform projects are in <a href="#components-stability.md" id="mpp-dsl-reference.md-2d371835"   >Alpha</a>. Language features and tooling may change in future Kotlin versions.</p></aside><p id="mpp-dsl-reference.md-2fccc22d" >The Kotlin Multiplatform Gradle plugin is a tool for creating <a href="#multiplatform.md" id="mpp-dsl-reference.md-4b06690a"   >Kotlin multiplatform</a> projects. Here we provide a reference of its contents; use it as a reminder when writing Gradle build scripts for Kotlin multiplatform projects. Learn the <a href="#mpp-intro.md" id="mpp-dsl-reference.md-43f25837"   >concepts of Kotlin multiplatform projects, how to create and configure them</a>.</p><section class="chapter"  ><h2 id="mpp-dsl-reference.md-id-and-version" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-id-and-version"  >Id and version</h2><p id="mpp-dsl-reference.md-f9a2f439" >The fully qualified name of the Kotlin Multiplatform Gradle plugin is <code class="code " id="mpp-dsl-reference.md-e78d45c7"  >org.jetbrains.kotlin.multiplatform</code>. If you use the Kotlin Gradle DSL, you can apply the plugin with <code class="code " id="mpp-dsl-reference.md-a8a22ff0"  >kotlin(“multiplatform”)</code>. The plugin versions match the Kotlin release versions. The most recent version is 1.4.32.</p><div class="tabs" id="mpp-dsl-reference.md-d0947374" ><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-1998bcc9"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-dsl-reference.md-1998bcc9"   data-title="Groovy"      >plugins {\n    id \'org.jetbrains.kotlin.multiplatform\' version \'1.4.32\'\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-81b254e"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-dsl-reference.md-81b254e"   data-title="Kotlin"      >plugins {\n    kotlin(&quot;multiplatform&quot;) version &quot;1.4.32&quot;\n}\n</div></div></div></section><section class="chapter"  ><h2 id="mpp-dsl-reference.md-top-level-blocks" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-top-level-blocks"  >Top-level blocks</h2><p id="mpp-dsl-reference.md-aa819359" ><code class="code " id="mpp-dsl-reference.md-9d51eb60"  >kotlin</code> is the top-level block for multiplatform project configuration in the Gradle build script. Inside <code class="code " id="mpp-dsl-reference.md-a1bc0eaf"  >kotlin</code>, you can write the following blocks:</p><div class="table-wrapper" ><table class=" wide" id="mpp-dsl-reference.md-4a320a82"  ><thead><tr class="ijRowHead" id="mpp-dsl-reference.md-82385344" ><th id="mpp-dsl-reference.md-8442860d"    ><b id="mpp-dsl-reference.md-8ff6432c" class=""  >Block</b></th><th id="mpp-dsl-reference.md-c0d8aec6"    ><b id="mpp-dsl-reference.md-cc6799c4" class=""  >Description</b></th></tr></thead><tbody ><tr class="" id="mpp-dsl-reference.md-6a4e65f1" ><td id="mpp-dsl-reference.md-889954ac"    ><em id="mpp-dsl-reference.md-79dd6887" class=""  >&lt;targetName&gt;</em></td><td id="mpp-dsl-reference.md-592d2927"    >Declares a particular target of a project. The names of available targets are listed in the <a href="#mpp-dsl-reference.md-targets" id="mpp-dsl-reference.md-3b669fe9"   >Targets</a> section.</td></tr><tr class="" id="mpp-dsl-reference.md-99860065" ><td id="mpp-dsl-reference.md-ccbfcc90"    ><code class="code " id="mpp-dsl-reference.md-a19dc78a"  >targets</code></td><td id="mpp-dsl-reference.md-64453fe3"    >All targets of the project.</td></tr><tr class="" id="mpp-dsl-reference.md-fcf423e3" ><td id="mpp-dsl-reference.md-4fcd9185"    ><code class="code " id="mpp-dsl-reference.md-70fc55ea"  >presets</code></td><td id="mpp-dsl-reference.md-f78009a2"    >All predefined targets. Use this for <a href="#mpp-supported-platforms.md" id="mpp-dsl-reference.md-98e97a00"   >configuring multiple predefined targets</a> at once.</td></tr><tr class="" id="mpp-dsl-reference.md-169928ff" ><td id="mpp-dsl-reference.md-ae38740d"    ><code class="code " id="mpp-dsl-reference.md-de318d4"  >sourceSets</code></td><td id="mpp-dsl-reference.md-5c11bb65"    >Configures predefined and declares custom <a href="#mpp-dsl-reference.md-source-sets" id="mpp-dsl-reference.md-d8e62fc3"   >source sets</a> of the project.</td></tr></tbody ></table ></div></section><section class="chapter"  ><h2 id="mpp-dsl-reference.md-targets" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-targets"  >Targets</h2><p id="mpp-dsl-reference.md-25b84ef0" ><em id="mpp-dsl-reference.md-e358fea2" class=""  >Target</em> is a part of the build responsible for compiling, testing, and packaging a piece of software aimed for one of the <a href="#mpp-supported-platforms.md" id="mpp-dsl-reference.md-9d4cee63"   >supported platforms</a>.</p><p id="mpp-dsl-reference.md-a8a6a181" >Each target can have one or more <a href="#mpp-dsl-reference.md-compilations" id="mpp-dsl-reference.md-8ed9c351"   >compilations</a>. In addition to default compilations for test and production purposes, you can <a href="#mpp-configure-compilations.md-create-a-custom-compilation" id="mpp-dsl-reference.md-baf02d36"   >create custom compilations</a>.</p><p id="mpp-dsl-reference.md-aa085aaf" >The targets of a multiplatform project are described in the corresponding blocks inside <code class="code " id="mpp-dsl-reference.md-2a8dcba7"  >kotlin</code>, for example, <code class="code " id="mpp-dsl-reference.md-bcad7f0b"  >jvm</code>, <code class="code " id="mpp-dsl-reference.md-b691bc99"  >android</code>, <code class="code " id="mpp-dsl-reference.md-af195610"  >iosArm64</code>. The complete list of available targets is the following:</p><div class="table-wrapper" ><table class=" wide" id="mpp-dsl-reference.md-7fae5d01"  ><thead><tr class="ijRowHead" id="mpp-dsl-reference.md-5e76490a" ><th id="mpp-dsl-reference.md-1bcf172c"    ><b id="mpp-dsl-reference.md-f2169aef" class=""  >Name</b></th><th id="mpp-dsl-reference.md-efb64650"    ><b id="mpp-dsl-reference.md-3e0e193" class=""  >Description</b></th></tr></thead><tbody ><tr class="" id="mpp-dsl-reference.md-38a927e0" ><td id="mpp-dsl-reference.md-78c36466"    ><code class="code " id="mpp-dsl-reference.md-1186e66f"  >jvm</code></td><td id="mpp-dsl-reference.md-29214c00"    >Java Virtual Machine</td></tr><tr class="" id="mpp-dsl-reference.md-2f6a5150" ><td id="mpp-dsl-reference.md-916f0f35"    ><code class="code " id="mpp-dsl-reference.md-abbbefd8"  >js</code></td><td id="mpp-dsl-reference.md-985a2871"    >JavaScript</td></tr><tr class="" id="mpp-dsl-reference.md-17683e43" ><td id="mpp-dsl-reference.md-6843f7ba"    ><code class="code " id="mpp-dsl-reference.md-3c6bc496"  >android</code></td><td id="mpp-dsl-reference.md-8f89006"    >Android (APK)</td></tr><tr class="" id="mpp-dsl-reference.md-baf924f7" ><td id="mpp-dsl-reference.md-5b8a32c2"    ><code class="code " id="mpp-dsl-reference.md-6f508e4e"  >androidNativeArm32</code></td><td id="mpp-dsl-reference.md-2f667ac6"    ><a href="https://developer.android.com/ndk" id="mpp-dsl-reference.md-34240134"   data-external="true" rel="noopener noreferrer" >Android NDK</a> on ARM (ARM32) platforms</td></tr><tr class="" id="mpp-dsl-reference.md-e94e4007" ><td id="mpp-dsl-reference.md-1bd4d870"    ><code class="code " id="mpp-dsl-reference.md-7ae31fc2"  >androidNativeArm64</code></td><td id="mpp-dsl-reference.md-151db9d"    ><a href="https://developer.android.com/ndk" id="mpp-dsl-reference.md-5e61e0f9"   data-external="true" rel="noopener noreferrer" >Android NDK</a> on ARM64 platforms</td></tr><tr class="" id="mpp-dsl-reference.md-7e1319a9" ><td id="mpp-dsl-reference.md-3ebeb379"    ><code class="code " id="mpp-dsl-reference.md-7cfbb248"  >androidNativeX86</code></td><td id="mpp-dsl-reference.md-cacd17c1"    ><a href="https://developer.android.com/ndk" id="mpp-dsl-reference.md-5fbfe09b"   data-external="true" rel="noopener noreferrer" >Android NDK</a> on x86 platforms</td></tr><tr class="" id="mpp-dsl-reference.md-d029287e" ><td id="mpp-dsl-reference.md-1ef5d691"    ><code class="code " id="mpp-dsl-reference.md-dca19282"  >androidNativeX64</code></td><td id="mpp-dsl-reference.md-113d97d0"    ><a href="https://developer.android.com/ndk" id="mpp-dsl-reference.md-9299d657"   data-external="true" rel="noopener noreferrer" >Android NDK</a> on x86_64 platforms</td></tr><tr class="" id="mpp-dsl-reference.md-76b2d42b" ><td id="mpp-dsl-reference.md-e88306e1"    ><code class="code " id="mpp-dsl-reference.md-639414eb"  >iosArm32</code></td><td id="mpp-dsl-reference.md-ecd02aa8"    >Apple iOS on ARM (ARM32) platforms (Apple iPhone 5 and earlier)</td></tr><tr class="" id="mpp-dsl-reference.md-a0e53577" ><td id="mpp-dsl-reference.md-2b5b41c7"    ><code class="code " id="mpp-dsl-reference.md-e8f56720"  >iosArm64</code></td><td id="mpp-dsl-reference.md-fdcbc891"    >Apple iOS on ARM64 platforms (Apple iPhone 5s and newer)</td></tr><tr class="" id="mpp-dsl-reference.md-e988b918" ><td id="mpp-dsl-reference.md-cad8ef65"    ><code class="code " id="mpp-dsl-reference.md-ee1c98e5"  >iosX64</code></td><td id="mpp-dsl-reference.md-961cba53"    >Apple iOS 64-bit simulator</td></tr><tr class="" id="mpp-dsl-reference.md-fad0ccc7" ><td id="mpp-dsl-reference.md-26c45f78"    ><code class="code " id="mpp-dsl-reference.md-2a6a58e9"  >watchosArm32</code></td><td id="mpp-dsl-reference.md-4cd29939"    >Apple watchOS on ARM (ARM32) platforms (Apple Watch Series 3 and earlier)</td></tr><tr class="" id="mpp-dsl-reference.md-23036163" ><td id="mpp-dsl-reference.md-c25c9cd"    ><code class="code " id="mpp-dsl-reference.md-8a6ebe45"  >watchosArm64</code></td><td id="mpp-dsl-reference.md-7a5bcfb5"    >Apple watchOS on ARM64_32 platforms (Apple Watch Series 4 and newer)</td></tr><tr class="" id="mpp-dsl-reference.md-ec246c4b" ><td id="mpp-dsl-reference.md-70ecd707"    ><code class="code " id="mpp-dsl-reference.md-a7ce9bf1"  >watchosX86</code></td><td id="mpp-dsl-reference.md-d51459c8"    >Apple watchOS 32-bit simulator (watchOS 6.3 and earlier)</td></tr><tr class="" id="mpp-dsl-reference.md-19c7a9f0" ><td id="mpp-dsl-reference.md-b38171a0"    ><code class="code " id="mpp-dsl-reference.md-1d661778"  >watchosX64</code></td><td id="mpp-dsl-reference.md-5d55a7a7"    >Apple watchOS 64-bit simulator (watchOS 7.0 and newer)</td></tr><tr class="" id="mpp-dsl-reference.md-98a375a5" ><td id="mpp-dsl-reference.md-59a2232d"    ><code class="code " id="mpp-dsl-reference.md-867176ef"  >tvosArm64</code></td><td id="mpp-dsl-reference.md-1fcf869b"    >Apple tvOS on ARM64 platforms (Apple TV 4th generation and newer)</td></tr><tr class="" id="mpp-dsl-reference.md-89d8cab9" ><td id="mpp-dsl-reference.md-e57481e5"    ><code class="code " id="mpp-dsl-reference.md-66a05a23"  >tvosX64</code></td><td id="mpp-dsl-reference.md-1f0c3428"    >Apple tvOS simulator</td></tr><tr class="" id="mpp-dsl-reference.md-3691c2c6" ><td id="mpp-dsl-reference.md-42f07263"    ><code class="code " id="mpp-dsl-reference.md-b686d311"  >linuxArm64</code></td><td id="mpp-dsl-reference.md-de7fff71"    >Linux on ARM64 platforms, for example, Raspberry Pi</td></tr><tr class="" id="mpp-dsl-reference.md-d0d9254b" ><td id="mpp-dsl-reference.md-431741ab"    ><code class="code " id="mpp-dsl-reference.md-4f23119a"  >linuxArm32Hfp</code></td><td id="mpp-dsl-reference.md-a4a71cda"    >Linux on hard-float ARM (ARM32) platforms</td></tr><tr class="" id="mpp-dsl-reference.md-b9a2dc78" ><td id="mpp-dsl-reference.md-91f3db6a"    ><code class="code " id="mpp-dsl-reference.md-d7659677"  >linuxMips32</code></td><td id="mpp-dsl-reference.md-8cba8fef"    >Linux on MIPS platforms</td></tr><tr class="" id="mpp-dsl-reference.md-eb266349" ><td id="mpp-dsl-reference.md-1071a081"    ><code class="code " id="mpp-dsl-reference.md-43152169"  >linuxMipsel32</code></td><td id="mpp-dsl-reference.md-5af4f84"    >Linux on little-endian MIPS (mipsel) platforms</td></tr><tr class="" id="mpp-dsl-reference.md-cf2980d6" ><td id="mpp-dsl-reference.md-bfeba1c4"    ><code class="code " id="mpp-dsl-reference.md-f246ceb5"  >linuxX64</code></td><td id="mpp-dsl-reference.md-e1c1081c"    >Linux on x86_64 platforms</td></tr><tr class="" id="mpp-dsl-reference.md-73eae4e8" ><td id="mpp-dsl-reference.md-c32e42fe"    ><code class="code " id="mpp-dsl-reference.md-573617cf"  >macosX64</code></td><td id="mpp-dsl-reference.md-c1fc208e"    >Apple macOS</td></tr><tr class="" id="mpp-dsl-reference.md-d54179cf" ><td id="mpp-dsl-reference.md-ebc18a38"    ><code class="code " id="mpp-dsl-reference.md-eccfab55"  >mingwX64</code></td><td id="mpp-dsl-reference.md-7a50e4e5"    >64-bit Microsoft Windows</td></tr><tr class="" id="mpp-dsl-reference.md-f37e7f72" ><td id="mpp-dsl-reference.md-eaf29f3a"    ><code class="code " id="mpp-dsl-reference.md-a5fd503e"  >mingwX86</code></td><td id="mpp-dsl-reference.md-2ef3fb88"    >32-bit Microsoft Windows</td></tr><tr class="" id="mpp-dsl-reference.md-33edc3a6" ><td id="mpp-dsl-reference.md-60773f52"    ><code class="code " id="mpp-dsl-reference.md-b3f04853"  >wasm32</code></td><td id="mpp-dsl-reference.md-f16e889a"    >WebAssembly</td></tr></tbody ></table ></div><div class="code-block" data-lang="groovy" id="mpp-dsl-reference.md-ba74af21"         >kotlin {\n    jvm()\n    iosX64()\n    macosX64()\n    js().browser()\n}\n</div><p id="mpp-dsl-reference.md-93b0884" >Configuration of a target can include two parts:</p><ul class="list _ul" id="mpp-dsl-reference.md-600437dc"   ><li class="list__item" id="mpp-dsl-reference.md-18b08bc3" ><p><a href="#mpp-dsl-reference.md-common-target-configuration" id="mpp-dsl-reference.md-7cee2953"   >Common configuration</a> available for all targets.</p></li><li class="list__item" id="mpp-dsl-reference.md-238ae5dd" ><p>Target-specific configuration.</p></li></ul><p id="mpp-dsl-reference.md-a3e0d719" >Each target can have one or more <a href="#mpp-dsl-reference.md-compilations" id="mpp-dsl-reference.md-bd02a3a3"   >compilations</a>.</p><section class="chapter"  ><h3 id="mpp-dsl-reference.md-common-target-configuration" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-common-target-configuration"  >Common target configuration</h3><p id="mpp-dsl-reference.md-a4650374" >In any target block, you can use the following declarations:</p><div class="table-wrapper" ><table class=" wide" id="mpp-dsl-reference.md-e12bc5e0"  ><thead><tr class="ijRowHead" id="mpp-dsl-reference.md-e6e1489f" ><th id="mpp-dsl-reference.md-f52f036f"    ><b id="mpp-dsl-reference.md-b2d544cf" class=""  >Name</b></th><th id="mpp-dsl-reference.md-6c728fea"    ><b id="mpp-dsl-reference.md-22d47606" class=""  >Description</b></th></tr></thead><tbody ><tr class="" id="mpp-dsl-reference.md-30670436" ><td id="mpp-dsl-reference.md-80064da5"    ><code class="code " id="mpp-dsl-reference.md-2fab0176"  >attributes</code></td><td id="mpp-dsl-reference.md-394a409e"    >Attributes used for <a href="#mpp-set-up-targets.md-distinguish-several-targets-for-one-platform" id="mpp-dsl-reference.md-c2c26bfc"   >disambiguating targets</a> for a single platform.</td></tr><tr class="" id="mpp-dsl-reference.md-63b0761a" ><td id="mpp-dsl-reference.md-22a708a3"    ><code class="code " id="mpp-dsl-reference.md-e9b7b2c8"  >preset</code></td><td id="mpp-dsl-reference.md-6aba913a"    >The preset that the target has been created from, if any.</td></tr><tr class="" id="mpp-dsl-reference.md-25b03c77" ><td id="mpp-dsl-reference.md-2eb948eb"    ><code class="code " id="mpp-dsl-reference.md-dadaf0aa"  >platformType</code></td><td id="mpp-dsl-reference.md-db40c7be"    >Designates the Kotlin platform of this target. Avaiable values: <code class="code " id="mpp-dsl-reference.md-9977a3e"  >jvm</code>, <code class="code " id="mpp-dsl-reference.md-d7a8aca8"  >androidJvm</code>, <code class="code " id="mpp-dsl-reference.md-fcdcc566"  >js</code>, <code class="code " id="mpp-dsl-reference.md-ecd437cf"  >native</code>, <code class="code " id="mpp-dsl-reference.md-e174567e"  >common</code>.</td></tr><tr class="" id="mpp-dsl-reference.md-358d0ada" ><td id="mpp-dsl-reference.md-f1e14f8d"    ><code class="code " id="mpp-dsl-reference.md-b0fb8394"  >artifactsTaskName</code></td><td id="mpp-dsl-reference.md-d3648969"    >The name of the task that builds the resulting artifacts of this target.</td></tr><tr class="" id="mpp-dsl-reference.md-7a9e527" ><td id="mpp-dsl-reference.md-3f9280d5"    ><code class="code " id="mpp-dsl-reference.md-cae8deb5"  >components</code></td><td id="mpp-dsl-reference.md-87e0c523"    >The components used to setup Gradle publications.</td></tr></tbody ></table ></div></section><section class="chapter"  ><h3 id="mpp-dsl-reference.md-jvm-targets" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-jvm-targets"  >JVM targets</h3><p id="mpp-dsl-reference.md-a6288222" >In addition to <a href="#mpp-dsl-reference.md-common-target-configuration" id="mpp-dsl-reference.md-9da6650a"   >common target configuration</a>, <code class="code " id="mpp-dsl-reference.md-83557c42"  >jvm</code> targets have a specific function:</p><div class="table-wrapper" ><table class=" wide" id="mpp-dsl-reference.md-c91557dc"  ><thead><tr class="ijRowHead" id="mpp-dsl-reference.md-3ee2e7cf" ><th id="mpp-dsl-reference.md-9f0e6442"    ><b id="mpp-dsl-reference.md-670b76d4" class=""  >Name</b></th><th id="mpp-dsl-reference.md-235a5b20"    ><b id="mpp-dsl-reference.md-9c857a67" class=""  >Description</b></th></tr></thead><tbody ><tr class="" id="mpp-dsl-reference.md-49bf454" ><td id="mpp-dsl-reference.md-9d6396f1"    ><code class="code " id="mpp-dsl-reference.md-552f046d"  >withJava()</code></td><td id="mpp-dsl-reference.md-3f654357"    >Includes Java sources into the JVM target’s compilations.</td></tr></tbody ></table ></div><p id="mpp-dsl-reference.md-c3ba6d8a" >Use this function for projects that contain both Java and Kotlin source files. Note that the default source directories for Java sources don\'t follow the Java plugin\'s defaults. Instead, they are derived from the Kotlin source sets. For example, if the JVM target has the default name <code class="code " id="mpp-dsl-reference.md-e86e9bb4"  >jvm</code>, the paths are <code class="code " id="mpp-dsl-reference.md-a740eb05"  >src/jvmMain/java</code> (for production Java sources) and <code class="code " id="mpp-dsl-reference.md-98c5248e"  >src/jvmTest/java</code> for test Java sources. Learn how to <a href="#mpp-configure-compilations.md-include-java-sources-in-jvm-compilations" id="mpp-dsl-reference.md-a9a4f695"   >include Java sources in JVM compilations</a>.</p><div class="code-block" data-lang="kotlin" id="mpp-dsl-reference.md-b1d7e9ad"         >kotlin {\n    jvm {\n        withJava()\n    } \n}\n</div></section><section class="chapter"  ><h3 id="mpp-dsl-reference.md-javascript-targets" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-javascript-targets"  >JavaScript targets</h3><p id="mpp-dsl-reference.md-4415706" >The <code class="code " id="mpp-dsl-reference.md-14247bf8"  >js</code> block describes the configuration of JavaScript targets. It can contain one of two blocks depending on the target execution environment:</p><div class="table-wrapper" ><table class=" wide" id="mpp-dsl-reference.md-2e7abbc1"  ><thead><tr class="ijRowHead" id="mpp-dsl-reference.md-1009c405" ><th id="mpp-dsl-reference.md-99d7edb7"    ><b id="mpp-dsl-reference.md-5ad5fb45" class=""  >Name</b></th><th id="mpp-dsl-reference.md-a302e569"    ><b id="mpp-dsl-reference.md-1cf973e6" class=""  >Description</b></th></tr></thead><tbody ><tr class="" id="mpp-dsl-reference.md-41234f23" ><td id="mpp-dsl-reference.md-fcc5b7ee"    ><code class="code " id="mpp-dsl-reference.md-3b1501ac"  >browser</code></td><td id="mpp-dsl-reference.md-bd840219"    >Configuration of the browser target.</td></tr><tr class="" id="mpp-dsl-reference.md-b2d78ec" ><td id="mpp-dsl-reference.md-c241b778"    ><code class="code " id="mpp-dsl-reference.md-54b1d560"  >nodejs</code></td><td id="mpp-dsl-reference.md-6baa66f0"    >Configuration of the Node.js target.</td></tr></tbody ></table ></div><p id="mpp-dsl-reference.md-4dc30258" >Learn more about <a href="#js-project-setup.md" id="mpp-dsl-reference.md-3e087bfa"   >configuring Kotlin/JS projects</a>.</p><section class="chapter"  ><h4 id="mpp-dsl-reference.md-browser" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-browser"  >Browser</h4><p id="mpp-dsl-reference.md-bc23c846" ><code class="code " id="mpp-dsl-reference.md-31865465"  >browser</code> can contain the following configuration blocks:</p><div class="table-wrapper" ><table class=" wide" id="mpp-dsl-reference.md-fc7985af"  ><thead><tr class="ijRowHead" id="mpp-dsl-reference.md-691554dd" ><th id="mpp-dsl-reference.md-ff3d607f"    ><b id="mpp-dsl-reference.md-a4befe83" class=""  >Name</b></th><th id="mpp-dsl-reference.md-19a2cac9"    ><b id="mpp-dsl-reference.md-cada77e3" class=""  >Description</b></th></tr></thead><tbody ><tr class="" id="mpp-dsl-reference.md-483f813f" ><td id="mpp-dsl-reference.md-dcd78604"    ><code class="code " id="mpp-dsl-reference.md-90af86e2"  >testRuns</code></td><td id="mpp-dsl-reference.md-dd15266a"    >Configuration of test execution.</td></tr><tr class="" id="mpp-dsl-reference.md-cb5860bf" ><td id="mpp-dsl-reference.md-7826e93b"    ><code class="code " id="mpp-dsl-reference.md-e05dc5b0"  >runTask</code></td><td id="mpp-dsl-reference.md-6a6862f0"    >Configuration of project running.</td></tr><tr class="" id="mpp-dsl-reference.md-db476978" ><td id="mpp-dsl-reference.md-55e39f34"    ><code class="code " id="mpp-dsl-reference.md-fc3c4fb7"  >webpackTask</code></td><td id="mpp-dsl-reference.md-ceaefad9"    >Configuration of project bundling with <a href="https://webpack.js.org/" id="mpp-dsl-reference.md-f9c17a8d"   data-external="true" rel="noopener noreferrer" >Webpack</a>.</td></tr><tr class="" id="mpp-dsl-reference.md-a5ab4118" ><td id="mpp-dsl-reference.md-abcda1db"    ><code class="code " id="mpp-dsl-reference.md-77bde870"  >dceTask</code></td><td id="mpp-dsl-reference.md-21f43b88"    >Configuration of <a href="#javascript-dce.md" id="mpp-dsl-reference.md-e090e5d6"   >Dead Code Elimination</a>.</td></tr><tr class="" id="mpp-dsl-reference.md-2f2a4a37" ><td id="mpp-dsl-reference.md-495c512b"    ><code class="code " id="mpp-dsl-reference.md-863e7749"  >distribution</code></td><td id="mpp-dsl-reference.md-a3431400"    >Path to output files.</td></tr></tbody ></table ></div><div class="code-block" data-lang="kotlin" id="mpp-dsl-reference.md-eeabbe2c"         >kotlin {\n    js().browser {\n        webpackTask { /* ... */ }\n        testRuns { /* ... */ }\n        dceTask {\n            keep(&quot;myKotlinJsApplication.org.example.keepFromDce&quot;)\n        }\n        distribution {\n            directory = File(&quot;$projectDir/customdir/&quot;)\n        }        \n    }\n}\n</div></section><section class="chapter"  ><h4 id="mpp-dsl-reference.md-node-js" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-node-js"  >Node.js</h4><p id="mpp-dsl-reference.md-97c6a432" ><code class="code " id="mpp-dsl-reference.md-a11eb23a"  >nodejs</code> can contain configurations of test and run tasks:</p><div class="table-wrapper" ><table class=" wide" id="mpp-dsl-reference.md-ce846df2"  ><thead><tr class="ijRowHead" id="mpp-dsl-reference.md-a225fdbb" ><th id="mpp-dsl-reference.md-d669d22"    ><b id="mpp-dsl-reference.md-dbb86fc7" class=""  >Name</b></th><th id="mpp-dsl-reference.md-c9407c38"    ><b id="mpp-dsl-reference.md-6dc79817" class=""  >Description</b></th></tr></thead><tbody ><tr class="" id="mpp-dsl-reference.md-cac22f0d" ><td id="mpp-dsl-reference.md-ed63db0d"    ><code class="code " id="mpp-dsl-reference.md-e0383a31"  >testRuns</code></td><td id="mpp-dsl-reference.md-841ce575"    >Configuration of test execution.</td></tr><tr class="" id="mpp-dsl-reference.md-6f3f9bc5" ><td id="mpp-dsl-reference.md-2ec2c6d1"    ><code class="code " id="mpp-dsl-reference.md-10d848ef"  >runTask</code></td><td id="mpp-dsl-reference.md-972c8a27"    >Configuration of project running.</td></tr></tbody ></table ></div><div class="code-block" data-lang="kotlin" id="mpp-dsl-reference.md-e7d3b59"         >kotlin {\n    js().nodejs {\n        runTask { /* ... */ }\n        testRuns { /* ... */ }\n    }\n}\n</div></section></section><section class="chapter"  ><h3 id="mpp-dsl-reference.md-native-targets" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-native-targets"  >Native targets</h3><p id="mpp-dsl-reference.md-531138b3" >For native targets, the following specific blocks are available:</p><div class="table-wrapper" ><table class=" wide" id="mpp-dsl-reference.md-b984ec61"  ><thead><tr class="ijRowHead" id="mpp-dsl-reference.md-c37096e8" ><th id="mpp-dsl-reference.md-b4dfb7e0"    ><b id="mpp-dsl-reference.md-b316f3a2" class=""  >Name</b></th><th id="mpp-dsl-reference.md-bfc636b4"    ><b id="mpp-dsl-reference.md-37d0da79" class=""  >Description</b></th></tr></thead><tbody ><tr class="" id="mpp-dsl-reference.md-5ee1c174" ><td id="mpp-dsl-reference.md-a182b592"    ><code class="code " id="mpp-dsl-reference.md-6e8105f5"  >binaries</code></td><td id="mpp-dsl-reference.md-12f8386c"    >Configuration of <a href="#mpp-dsl-reference.md-binaries" id="mpp-dsl-reference.md-c5dc7e81"   >binaries</a> to produce.</td></tr><tr class="" id="mpp-dsl-reference.md-27cf1c6c" ><td id="mpp-dsl-reference.md-320fb7fa"    ><code class="code " id="mpp-dsl-reference.md-39a8193f"  >cinterops</code></td><td id="mpp-dsl-reference.md-42b03c3f"    >Configuration of <a href="#mpp-dsl-reference.md-cinterops" id="mpp-dsl-reference.md-485c6646"   >interop with C libraries</a>.</td></tr></tbody ></table ></div><section class="chapter"  ><h4 id="mpp-dsl-reference.md-binaries" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-binaries"  >Binaries</h4><p id="mpp-dsl-reference.md-27d7b882" >There are the following kinds of binaries:</p><div class="table-wrapper" ><table class=" wide" id="mpp-dsl-reference.md-184a47ab"  ><thead><tr class="ijRowHead" id="mpp-dsl-reference.md-2729237c" ><th id="mpp-dsl-reference.md-256980d3"    ><b id="mpp-dsl-reference.md-51274d9b" class=""  >Name</b></th><th id="mpp-dsl-reference.md-b532cf3e"    ><b id="mpp-dsl-reference.md-3a73f59f" class=""  >Description</b></th></tr></thead><tbody ><tr class="" id="mpp-dsl-reference.md-984a1c1d" ><td id="mpp-dsl-reference.md-dff94644"    ><code class="code " id="mpp-dsl-reference.md-6608b027"  >executable</code></td><td id="mpp-dsl-reference.md-a7b315e8"    >Product executable.</td></tr><tr class="" id="mpp-dsl-reference.md-2fdeb471" ><td id="mpp-dsl-reference.md-2df26f52"    ><code class="code " id="mpp-dsl-reference.md-2ae57c50"  >test</code></td><td id="mpp-dsl-reference.md-580462fc"    >Test executable.</td></tr><tr class="" id="mpp-dsl-reference.md-c42ec799" ><td id="mpp-dsl-reference.md-44c6f297"    ><code class="code " id="mpp-dsl-reference.md-c22931b2"  >sharedLib</code></td><td id="mpp-dsl-reference.md-d74ca4a0"    >Shared library.</td></tr><tr class="" id="mpp-dsl-reference.md-ce54a950" ><td id="mpp-dsl-reference.md-a174043f"    ><code class="code " id="mpp-dsl-reference.md-2a00e5e3"  >staticLib</code></td><td id="mpp-dsl-reference.md-fd2591c4"    >Static library.</td></tr><tr class="" id="mpp-dsl-reference.md-32edaaf2" ><td id="mpp-dsl-reference.md-db9c827d"    ><code class="code " id="mpp-dsl-reference.md-7d7416f3"  >framework</code></td><td id="mpp-dsl-reference.md-5d97b2c3"    >Objective-C framework.</td></tr></tbody ></table ></div><div class="code-block" data-lang="kotlin" id="mpp-dsl-reference.md-d1388a73"         >kotlin {\n    linuxX64 { // Use your target instead.\n        binaries {\n            executable {\n                // Binary configuration.\n            }\n        }\n    }\n}\n</div><p id="mpp-dsl-reference.md-ce1d6b67" >For binaries configuration, the following parameters are available:</p><div class="table-wrapper" ><table class=" wide" id="mpp-dsl-reference.md-3b5b579"  ><thead><tr class="ijRowHead" id="mpp-dsl-reference.md-4019a3e9" ><th id="mpp-dsl-reference.md-cd375c91"    ><b id="mpp-dsl-reference.md-9fd94d1f" class=""  >Name</b></th><th id="mpp-dsl-reference.md-4eb33be8"    ><b id="mpp-dsl-reference.md-8ae27c35" class=""  >Description</b></th></tr></thead><tbody ><tr class="" id="mpp-dsl-reference.md-7ec9664d" ><td id="mpp-dsl-reference.md-da081432"    ><code class="code " id="mpp-dsl-reference.md-6aad6726"  >compilation</code></td><td id="mpp-dsl-reference.md-bd355c5f"    >The compilation from which the binary is built. By default, <code class="code " id="mpp-dsl-reference.md-36049996"  >test</code> binaries are based on the <code class="code " id="mpp-dsl-reference.md-764adc44"  >test</code> compilation while other binaries - on the <code class="code " id="mpp-dsl-reference.md-394b645f"  >main</code> compilation.</td></tr><tr class="" id="mpp-dsl-reference.md-9286a1c" ><td id="mpp-dsl-reference.md-955da947"    ><code class="code " id="mpp-dsl-reference.md-4099a6eb"  >linkerOpts</code></td><td id="mpp-dsl-reference.md-8528815"    >Options passed to a system linker during binary building.</td></tr><tr class="" id="mpp-dsl-reference.md-acc9bb9f" ><td id="mpp-dsl-reference.md-47a8e854"    ><code class="code " id="mpp-dsl-reference.md-fa1b1cdb"  >baseName</code></td><td id="mpp-dsl-reference.md-8439e27b"    >Custom base name for the output file. The final file name will be formed by adding system-dependent prefix and postfix to this base name.</td></tr><tr class="" id="mpp-dsl-reference.md-67a8f763" ><td id="mpp-dsl-reference.md-f1ed683f"    ><code class="code " id="mpp-dsl-reference.md-a854bd44"  >entryPoint</code></td><td id="mpp-dsl-reference.md-22724503"    >The entry point function for executable binaries. By default, it\'s <code class="code " id="mpp-dsl-reference.md-ecf4ac27"  >main()</code> in the root package.</td></tr><tr class="" id="mpp-dsl-reference.md-c2a70ad0" ><td id="mpp-dsl-reference.md-5a241f77"    ><code class="code " id="mpp-dsl-reference.md-abb08d35"  >outputFile</code></td><td id="mpp-dsl-reference.md-57c6a53a"    >Access to the output file.</td></tr><tr class="" id="mpp-dsl-reference.md-30ab7b04" ><td id="mpp-dsl-reference.md-3fd82acf"    ><code class="code " id="mpp-dsl-reference.md-651148c2"  >linkTask</code></td><td id="mpp-dsl-reference.md-4f2abef8"    >Access to the link task.</td></tr><tr class="" id="mpp-dsl-reference.md-d6b14145" ><td id="mpp-dsl-reference.md-37cb68ce"    ><code class="code " id="mpp-dsl-reference.md-84ca06d9"  >runTask</code></td><td id="mpp-dsl-reference.md-d61fff94"    >Access to the run task for executable binaries. For targets other than <code class="code " id="mpp-dsl-reference.md-ccb766db"  >linuxX64</code>, <code class="code " id="mpp-dsl-reference.md-434ed586"  >macosX64</code>, or <code class="code " id="mpp-dsl-reference.md-c58deab8"  >mingwX64</code> the value is <code class="code " id="mpp-dsl-reference.md-e18bf817"  >null</code>.</td></tr><tr class="" id="mpp-dsl-reference.md-117f5ca2" ><td id="mpp-dsl-reference.md-bac6d23a"    ><code class="code " id="mpp-dsl-reference.md-80105385"  >isStatic</code></td><td id="mpp-dsl-reference.md-2714b1a7"    >For Objective-C frameworks. Includes a static library instead of a dynamic one.</td></tr></tbody ></table ></div><div class="tabs" id="mpp-dsl-reference.md-1b3218fd" ><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-71d21e44"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-dsl-reference.md-71d21e44"   data-title="Groovy"      >binaries {\n    executable(\'my_executable\', [RELEASE]) {\n        // Build a binary on the basis of the test compilation.\n        compilation = compilations.test\n\n        // Custom command line options for the linker.\n        linkerOpts = [\'-L/lib/search/path\', \'-L/another/search/path\', \'-lmylib\']\n\n        // Base name for the output file.\n        baseName = \'foo\'\n\n        // Custom entry point function.\n        entryPoint = \'org.example.main\'\n\n        // Accessing the output file.\n        println(&quot;Executable path: ${outputFile.absolutePath}&quot;)\n\n        // Accessing the link task.\n        linkTask.dependsOn(additionalPreprocessingTask)\n\n        // Accessing the run task.\n        // Note that the runTask is null for non-host platforms.\n        runTask?.dependsOn(prepareForRun)\n    }\n\n    framework(\'my_framework\' [RELEASE]) {\n        // Include a static library instead of a dynamic one into the framework.\n        isStatic = true\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-3d69ad5d"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-dsl-reference.md-3d69ad5d"   data-title="Kotlin"      >binaries {\n    executable(&quot;my_executable&quot;, listOf(RELEASE)) {\n        // Build a binary on the basis of the test compilation.\n        compilation = compilations[&quot;test&quot;]\n\n        // Custom command line options for the linker.\n        linkerOpts = mutableListOf(&quot;-L/lib/search/path&quot;, &quot;-L/another/search/path&quot;, &quot;-lmylib&quot;)\n\n        // Base name for the output file.\n        baseName = &quot;foo&quot;\n\n        // Custom entry point function.\n        entryPoint = &quot;org.example.main&quot;\n\n        // Accessing the output file.\n        println(&quot;Executable path: ${outputFile.absolutePath}&quot;)\n\n        // Accessing the link task.\n        linkTask.dependsOn(additionalPreprocessingTask)\n\n        // Accessing the run task.\n        // Note that the runTask is null for non-host platforms.\n        runTask?.dependsOn(prepareForRun)\n    }\n\n    framework(&quot;my_framework&quot; listOf(RELEASE)) {\n        // Include a static library instead of a dynamic one into the framework.\n        isStatic = true\n    }\n}\n</div></div></div><p id="mpp-dsl-reference.md-1c55ab0c" >Learn more about <a href="#mpp-build-native-binaries.md" id="mpp-dsl-reference.md-4a64a10a"   >building native binaries</a>.</p></section><section class="chapter"  ><h4 id="mpp-dsl-reference.md-cinterops" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-cinterops"  >CInterops</h4><p id="mpp-dsl-reference.md-576cfa38" ><code class="code " id="mpp-dsl-reference.md-14cfbfad"  >cinterops</code> is a collection of descriptions for interop with native libraries. To provide an interop with a library, add an entry to <code class="code " id="mpp-dsl-reference.md-8228aa70"  >cinterops</code> and define its parameters:</p><div class="table-wrapper" ><table class=" wide" id="mpp-dsl-reference.md-fd3f7116"  ><thead><tr class="ijRowHead" id="mpp-dsl-reference.md-e880d949" ><th id="mpp-dsl-reference.md-cc540cc1"    ><b id="mpp-dsl-reference.md-d4036766" class=""  >Name</b></th><th id="mpp-dsl-reference.md-54cf7853"    ><b id="mpp-dsl-reference.md-177344eb" class=""  >Description</b></th></tr></thead><tbody ><tr class="" id="mpp-dsl-reference.md-e470169a" ><td id="mpp-dsl-reference.md-83f7512d"    ><code class="code " id="mpp-dsl-reference.md-4bbe9bc8"  >defFile</code></td><td id="mpp-dsl-reference.md-f4cd6b9"    ><code class="code " id="mpp-dsl-reference.md-ca509d03"  >def</code> file describing the native API.</td></tr><tr class="" id="mpp-dsl-reference.md-90f0f534" ><td id="mpp-dsl-reference.md-9f1cf488"    ><code class="code " id="mpp-dsl-reference.md-8f3b6c99"  >packageName</code></td><td id="mpp-dsl-reference.md-124e28e6"    >Package prefix for the generated Kotlin API.</td></tr><tr class="" id="mpp-dsl-reference.md-2a8c9e0" ><td id="mpp-dsl-reference.md-cec33d26"    ><code class="code " id="mpp-dsl-reference.md-1c0fb1e"  >compilerOpts</code></td><td id="mpp-dsl-reference.md-141278db"    >Options to pass to the compiler by the cinterop tool.</td></tr><tr class="" id="mpp-dsl-reference.md-758f618d" ><td id="mpp-dsl-reference.md-666a2267"    ><code class="code " id="mpp-dsl-reference.md-c12a22d"  >includeDirs</code></td><td id="mpp-dsl-reference.md-a1cfa301"    >Directories to look for headers.</td></tr></tbody ></table ></div><p id="mpp-dsl-reference.md-ad1b49d3" >Learn more how to <a href="#mpp-configure-compilations.md-configure-interop-with-native-languages" id="mpp-dsl-reference.md-a196b39"   >configure interop with native languages</a>.</p><div class="tabs" id="mpp-dsl-reference.md-2441e7e2" ><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-4e70011"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-dsl-reference.md-4e70011"   data-title="Groovy"      >kotlin {\n    linuxX64 { // Replace with a target you need.\n        compilations.main {\n            cinterops {\n                myInterop {\n                    // Def-file describing the native API.\n                    // The default path is src/nativeInterop/cinterop/&lt;interop-name&gt;.def\n                    defFile project.file(&quot;def-file.def&quot;)\n\n                    // Package to place the Kotlin API generated.\n                    packageName \'org.sample\'\n\n                    // Options to be passed to compiler by cinterop tool.\n                    compilerOpts \'-Ipath/to/headers\'\n\n                    // Directories for header search (an analogue of the -I&lt;path&gt; compiler option).\n                    includeDirs.allHeaders(&quot;path1&quot;, &quot;path2&quot;)\n\n                    // A shortcut for includeDirs.allHeaders.\n                    includeDirs(&quot;include/directory&quot;, &quot;another/directory&quot;)\n                }\n\n                anotherInterop { /* ... */ }\n            }\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-2c7f1b0a"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-dsl-reference.md-2c7f1b0a"   data-title="Kotlin"      >kotlin {\n    linuxX64 {  // Replace with a target you need.\n        compilations.getByName(&quot;main&quot;) {\n            val myInterop by cinterops.creating {\n                // Def-file describing the native API.\n                // The default path is src/nativeInterop/cinterop/&lt;interop-name&gt;.def\n                defFile(project.file(&quot;def-file.def&quot;))\n\n                // Package to place the Kotlin API generated.\n                packageName(&quot;org.sample&quot;)\n\n                // Options to be passed to compiler by cinterop tool.\n                compilerOpts(&quot;-Ipath/to/headers&quot;)\n\n                // Directories for header search (an analogue of the -I&lt;path&gt; compiler option).\n                includeDirs.allHeaders(&quot;path1&quot;, &quot;path2&quot;)\n\n                // A shortcut for includeDirs.allHeaders.\n                includeDirs(&quot;include/directory&quot;, &quot;another/directory&quot;)\n            }\n\n            val anotherInterop by cinterops.creating { /* ... */ }\n        }\n    }\n}\n\n</div></div></div></section></section><section class="chapter"  ><h3 id="mpp-dsl-reference.md-android-targets" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-android-targets"  >Android targets</h3><p id="mpp-dsl-reference.md-d34d2be4" >The Kotlin multiplatform plugin contains two specific functions for android targets. Two functions help you configure <a href="https://developer.android.com/studio/build/build-variants" id="mpp-dsl-reference.md-f2043db4"   data-external="true" rel="noopener noreferrer" >build variants</a>:</p><div class="table-wrapper" ><table class=" wide" id="mpp-dsl-reference.md-69ab33af"  ><thead><tr class="ijRowHead" id="mpp-dsl-reference.md-f1327c0f" ><th id="mpp-dsl-reference.md-475e787f"    ><b id="mpp-dsl-reference.md-648b33d6" class=""  >Name</b></th><th id="mpp-dsl-reference.md-82c9e603"    ><b id="mpp-dsl-reference.md-70211e47" class=""  >Description</b></th></tr></thead><tbody ><tr class="" id="mpp-dsl-reference.md-26a04aa4" ><td id="mpp-dsl-reference.md-b221fee0"    ><code class="code " id="mpp-dsl-reference.md-509f0288"  >publishLibraryVariants()</code></td><td id="mpp-dsl-reference.md-1fef5e3"    >Specifies build variants to publish. Learn more about <a href="#mpp-publish-lib.md-publish-an-android-library" id="mpp-dsl-reference.md-d788e67"   >publishing Android libraries</a>.</td></tr><tr class="" id="mpp-dsl-reference.md-fa6b33ae" ><td id="mpp-dsl-reference.md-9a7c9023"    ><code class="code " id="mpp-dsl-reference.md-9d713265"  >publishAllLibraryVariants()</code></td><td id="mpp-dsl-reference.md-18c88a83"    >Publishes all build variants.</td></tr></tbody ></table ></div><div class="code-block" data-lang="kotlin" id="mpp-dsl-reference.md-3c63dd88"         >kotlin {\n    android {\n        publishLibraryVariants(&quot;release&quot;, &quot;debug&quot;)\n    }\n}\n</div><p id="mpp-dsl-reference.md-150f7677" >Learn more about <a href="#mpp-configure-compilations.md-compilation-for-android" id="mpp-dsl-reference.md-7aafbb63"   >compilation for Android</a>.</p><aside data-type="note" class="prompt" data-title="" id="mpp-dsl-reference.md-a47717d6" ><p id="mpp-dsl-reference.md-5bff5283" >The <code class="code " id="mpp-dsl-reference.md-4abac477"  >android</code> configuration inside <code class="code " id="mpp-dsl-reference.md-6c3b358b"  >kotlin</code> doesn’t replace the build configuration of any Android project. Learn more about writing build scripts for Android projects in <a href="https://developer.android.com/studio/build" id="mpp-dsl-reference.md-b1225c0f"   data-external="true" rel="noopener noreferrer" >Android developer documentation</a>.</p></aside></section></section><section class="chapter"  ><h2 id="mpp-dsl-reference.md-source-sets" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-source-sets"  >Source sets</h2><p id="mpp-dsl-reference.md-e3904dfb" >The <code class="code " id="mpp-dsl-reference.md-52816a26"  >sourceSets</code> block describes source sets of the project. A source set contains Kotlin source files that participate in compilations together, along with their resources, dependencies, and language settings.</p><p id="mpp-dsl-reference.md-b239be9" >A multiplatform project contains <a href="#mpp-dsl-reference.md-predefined-source-sets" id="mpp-dsl-reference.md-d6484c3c"   >predefined</a> source sets for its targets; developers can also create <a href="#mpp-dsl-reference.md-custom-source-sets" id="mpp-dsl-reference.md-77fd3e6"   >custom</a> source sets for their needs.</p><section class="chapter"  ><h3 id="mpp-dsl-reference.md-predefined-source-sets" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-predefined-source-sets"  >Predefined source sets</h3><p id="mpp-dsl-reference.md-5c25fba5" >Predefined source sets are set up automatically upon creation of a multiplatform project. Available predefined source sets are the following:</p><div class="table-wrapper" ><table class=" wide" id="mpp-dsl-reference.md-7ef2fa4f"  ><thead><tr class="ijRowHead" id="mpp-dsl-reference.md-26e6a818" ><th id="mpp-dsl-reference.md-56fd7960"    ><b id="mpp-dsl-reference.md-267df70a" class=""  >Name</b></th><th id="mpp-dsl-reference.md-ab66be57"    ><b id="mpp-dsl-reference.md-f359fcea" class=""  >Description</b></th></tr></thead><tbody ><tr class="" id="mpp-dsl-reference.md-b211ee88" ><td id="mpp-dsl-reference.md-adda720"    ><code class="code " id="mpp-dsl-reference.md-6e830c74"  >commonMain</code></td><td id="mpp-dsl-reference.md-6ac60db3"    >Code and resources shared between all platforms. Available in all multiplatform projects. Used in all main <a href="#mpp-dsl-reference.md-compilations" id="mpp-dsl-reference.md-750a2f93"   >compilations</a> of a project.</td></tr><tr class="" id="mpp-dsl-reference.md-ccd58ceb" ><td id="mpp-dsl-reference.md-6926fd5f"    ><code class="code " id="mpp-dsl-reference.md-98cd7469"  >commonTest</code></td><td id="mpp-dsl-reference.md-eaec16a6"    >Test code and resources shared between all platforms. Available in all multiplatform projects. Used in all test compilations of a project.</td></tr><tr class="" id="mpp-dsl-reference.md-a159e888" ><td id="mpp-dsl-reference.md-b447ea36"    ><em id="mpp-dsl-reference.md-f22b140b" class=""  >&lt;targetName&gt;&lt;compilationName&gt;</em></td><td id="mpp-dsl-reference.md-89b9e654"    >Target-specific sources for a compilation. <em id="mpp-dsl-reference.md-afa74b5e" class=""  >&lt;targetName&gt;</em> is the name of a predefined target and <em id="mpp-dsl-reference.md-fd8e64a2" class=""  >&lt;compilationName&gt;</em> is the name of a compilation for this target. Examples: <code class="code " id="mpp-dsl-reference.md-83a817f5"  >jsTest</code>, <code class="code " id="mpp-dsl-reference.md-2e057864"  >jvmMain</code>.</td></tr></tbody ></table ></div><p id="mpp-dsl-reference.md-bfa19992" >With Kotlin Gradle DSL, the sections of predefined source sets should be marked <code class="code " id="mpp-dsl-reference.md-10080d3c"  >by getting</code>.</p><div class="tabs" id="mpp-dsl-reference.md-48a21475" ><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-d3c114d8"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-dsl-reference.md-d3c114d8"   data-title="Groovy"      >kotlin { \n    sourceSets { \n        commonMain { /* ... */ } \n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-3b9d2ec0"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-dsl-reference.md-3b9d2ec0"   data-title="Kotlin"      >kotlin { \n    sourceSets { \n        val commonMain by getting { /* ... */ } \n    }\n}\n</div></div></div><p id="mpp-dsl-reference.md-3bb5ec2c" >Learn more about <a href="#mpp-discover-project.md-source-sets" id="mpp-dsl-reference.md-157a1c9d"   >source sets</a>.</p></section><section class="chapter"  ><h3 id="mpp-dsl-reference.md-custom-source-sets" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-custom-source-sets"  >Custom source sets</h3><p id="mpp-dsl-reference.md-2c98352a" >Custom source sets are created by the project developers manually. To create a custom source set, add a section with its name inside the <code class="code " id="mpp-dsl-reference.md-ee4919e7"  >sourceSets</code> section. If using Kotlin Gradle DSL, mark custom source sets <code class="code " id="mpp-dsl-reference.md-81153013"  >by creating</code>.</p><div class="tabs" id="mpp-dsl-reference.md-ae7ee15a" ><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-b7fab7d8"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-dsl-reference.md-b7fab7d8"   data-title="Groovy"      >kotlin { \n    sourceSets { \n        myMain { /* ... */ } // create or configure a source set by the name \'myMain\' \n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-456ca4a3"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-dsl-reference.md-456ca4a3"   data-title="Kotlin"      >kotlin { \n    sourceSets { \n        val myMain by creating { /* ... */ } // create a new source set by the name \'MyMain\'\n    }\n}\n</div></div></div><p id="mpp-dsl-reference.md-ff3a772a" >Note that a newly created source set isn’t connected to other ones. To use it in the project’s compilations, <a href="#mpp-share-on-platforms.md-configure-the-hierarchical-structure-manually" id="mpp-dsl-reference.md-d2712dc5"   >connect it with other source sets</a>.</p></section><section class="chapter"  ><h3 id="mpp-dsl-reference.md-source-set-parameters" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-source-set-parameters"  >Source set parameters</h3><p id="mpp-dsl-reference.md-baa94823" >Configurations of source sets are stored inside the corresponding blocks of <code class="code " id="mpp-dsl-reference.md-7e9999a2"  >sourceSets</code>. A source set has the following parameters:</p><div class="table-wrapper" ><table class=" wide" id="mpp-dsl-reference.md-b1f606ab"  ><thead><tr class="ijRowHead" id="mpp-dsl-reference.md-81e354b8" ><th id="mpp-dsl-reference.md-bb39fe12"    ><b id="mpp-dsl-reference.md-cf17fe50" class=""  >Name</b></th><th id="mpp-dsl-reference.md-83f9946f"    ><b id="mpp-dsl-reference.md-c7a963a4" class=""  >Description</b></th></tr></thead><tbody ><tr class="" id="mpp-dsl-reference.md-5af87abd" ><td id="mpp-dsl-reference.md-1b6733d5"    ><code class="code " id="mpp-dsl-reference.md-6d5e86d8"  >kotlin.srcDir</code></td><td id="mpp-dsl-reference.md-f3992ea2"    >Location of Kotlin source files inside the source set directory.</td></tr><tr class="" id="mpp-dsl-reference.md-5ef504c7" ><td id="mpp-dsl-reference.md-27fbb340"    ><code class="code " id="mpp-dsl-reference.md-4375cef0"  >resources.srcDir</code></td><td id="mpp-dsl-reference.md-253689c7"    >Location of resources inside the source set directory.</td></tr><tr class="" id="mpp-dsl-reference.md-284a692b" ><td id="mpp-dsl-reference.md-c39fd904"    ><code class="code " id="mpp-dsl-reference.md-e1b8c0d2"  >dependsOn</code></td><td id="mpp-dsl-reference.md-50d943bc"    ><a href="#mpp-share-on-platforms.md-configure-the-hierarchical-structure-manually" id="mpp-dsl-reference.md-5cdaa43b"   >Connection with another source set.</a></td></tr><tr class="" id="mpp-dsl-reference.md-675173a2" ><td id="mpp-dsl-reference.md-ef448e48"    ><code class="code " id="mpp-dsl-reference.md-8c9fb58c"  >dependencies</code></td><td id="mpp-dsl-reference.md-73e96e6"    ><a href="#mpp-dsl-reference.md-dependencies" id="mpp-dsl-reference.md-3edd09a7"   >Dependencies</a> of the source set.</td></tr><tr class="" id="mpp-dsl-reference.md-1ec047b5" ><td id="mpp-dsl-reference.md-7459fbbf"    ><code class="code " id="mpp-dsl-reference.md-6da54c39"  >languageSettings</code></td><td id="mpp-dsl-reference.md-cc130ad9"    ><a href="#mpp-dsl-reference.md-language-settings" id="mpp-dsl-reference.md-ea278735"   >Language settings</a> applied to the source set.</td></tr></tbody ></table ></div><div class="tabs" id="mpp-dsl-reference.md-31c72ca8" ><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-80239328"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-dsl-reference.md-80239328"   data-title="Groovy"      >kotlin { \n    sourceSets { \n        commonMain {\n            kotlin.srcDir(\'src\')\n            resources.srcDir(\'res\')\n            \n            dependencies {\n                /* ... */\n            }           \n        } \n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-1b8260ad"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-dsl-reference.md-1b8260ad"   data-title="Kotlin"      >kotlin { \n    sourceSets { \n        val commonMain by getting {\n            kotlin.srcDir(&quot;src&quot;)\n            resources.srcDir(&quot;res&quot;)\n            \n            dependencies {\n                /* ... */\n            } \n        } \n    }\n}\n</div></div></div></section></section><section class="chapter"  ><h2 id="mpp-dsl-reference.md-compilations" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-compilations"  >Compilations</h2><p id="mpp-dsl-reference.md-74f9fd22" >A target can have one or more compilations, for example, for production or testing. There are <a href="#mpp-dsl-reference.md-predefined-compilations" id="mpp-dsl-reference.md-66f22a02"   >predefined compilations</a> that are added automatically upon target creation. You can additionally create <a href="#mpp-dsl-reference.md-custom-compilations" id="mpp-dsl-reference.md-223f1ffb"   >custom compilations</a>.</p><p id="mpp-dsl-reference.md-8b6421a0" >To refer to all or some particular compilations of a target, use the <code class="code " id="mpp-dsl-reference.md-3fbcf08d"  >compilations</code> object collection. From <code class="code " id="mpp-dsl-reference.md-406711fb"  >compilations</code>, you can refer to a compilation by its name.</p><p id="mpp-dsl-reference.md-d9d16166" >Learn more about <a href="#mpp-configure-compilations.md" id="mpp-dsl-reference.md-73b3bc19"   >configuring compilations</a>.</p><section class="chapter"  ><h3 id="mpp-dsl-reference.md-predefined-compilations" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-predefined-compilations"  >Predefined compilations</h3><p id="mpp-dsl-reference.md-f1789ba2" >Predefined compilations are created automatically for each target of a project except for Android targets. Available predefined compilations are the following:</p><div class="table-wrapper" ><table class=" wide" id="mpp-dsl-reference.md-5c7b2d6f"  ><thead><tr class="ijRowHead" id="mpp-dsl-reference.md-ed32edf4" ><th id="mpp-dsl-reference.md-a4d37a1c"    ><b id="mpp-dsl-reference.md-2bc4f9d0" class=""  >Name</b></th><th id="mpp-dsl-reference.md-827a0587"    ><b id="mpp-dsl-reference.md-1a017253" class=""  >Description</b></th></tr></thead><tbody ><tr class="" id="mpp-dsl-reference.md-94a80d7a" ><td id="mpp-dsl-reference.md-ee179c55"    ><code class="code " id="mpp-dsl-reference.md-2820ba00"  >main</code></td><td id="mpp-dsl-reference.md-d1a760d2"    >Compilation for production sources.</td></tr><tr class="" id="mpp-dsl-reference.md-925066cc" ><td id="mpp-dsl-reference.md-38c0c134"    ><code class="code " id="mpp-dsl-reference.md-f31b8c7e"  >test</code></td><td id="mpp-dsl-reference.md-3421b7df"    >Compilation for tests.</td></tr></tbody ></table ></div><div class="tabs" id="mpp-dsl-reference.md-bc555a82" ><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-18288c72"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-dsl-reference.md-18288c72"   data-title="Groovy"      >kotlin {\n    jvm {\n        compilations.main.output // get the main compilation output\n        compilations.test.runtimeDependencyFiles // get the test runtime classpath\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-2436662"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-dsl-reference.md-2436662"   data-title="Kotlin"      >kotlin {\n    jvm {\n        val main by compilations.getting {\n            output // get the main compilation output\n        }\n        \n        compilations[&quot;test&quot;].runtimeDependencyFiles // get the test runtime classpath\n    }\n}\n</div></div></div></section><section class="chapter"  ><h3 id="mpp-dsl-reference.md-custom-compilations" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-custom-compilations"  >Custom compilations</h3><p id="mpp-dsl-reference.md-392f028f" >In addition to predefined compilations, you can create your own custom compilations. To create a custom compilation, add a new item into the <code class="code " id="mpp-dsl-reference.md-e6b5e3be"  >compilations</code> collection. If using Kotlin Gradle DSL, mark custom compilations <code class="code " id="mpp-dsl-reference.md-fe505b30"  >by creating</code>.</p><p id="mpp-dsl-reference.md-28c2304b" >Learn more about creating a <a href="#mpp-configure-compilations.md-create-a-custom-compilation" id="mpp-dsl-reference.md-ab1933d2"   >custom compilation</a>.</p><div class="tabs" id="mpp-dsl-reference.md-e9ba317f" ><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-45adb3fc"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-dsl-reference.md-45adb3fc"   data-title="Groovy"      >kotlin {\n    jvm() {\n        compilations.create(\'integrationTest\') {\n            defaultSourceSet {\n                dependencies {\n                    /* ... */\n                }\n            }\n\n            // Create a test task to run the tests produced by this compilation:\n            tasks.register(\'jvmIntegrationTest\', Test) {\n                /* ... */\n            }\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-bea69ddf"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-dsl-reference.md-bea69ddf"   data-title="Kotlin"      >kotlin {\n    jvm() {\n        compilations {\n            val integrationTest by compilations.creating {\n                defaultSourceSet {\n                    dependencies {\n                        /* ... */\n                    }\n                }\n\n                // Create a test task to run the tests produced by this compilation:\n                tasks.register&lt;Test&gt;(&quot;integrationTest&quot;) {\n                    /* ... */\n                }\n            }\n        }\n    }\n}\n</div></div></div></section><section class="chapter"  ><h3 id="mpp-dsl-reference.md-compilation-parameters" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-compilation-parameters"  >Compilation parameters</h3><p id="mpp-dsl-reference.md-8f6580e8" >A compilation has the following parameters:</p><div class="table-wrapper" ><table class=" wide" id="mpp-dsl-reference.md-2e07e202"  ><thead><tr class="ijRowHead" id="mpp-dsl-reference.md-7b536863" ><th id="mpp-dsl-reference.md-750271ca"    ><b id="mpp-dsl-reference.md-d482ef13" class=""  >Name</b></th><th id="mpp-dsl-reference.md-2d341064"    ><b id="mpp-dsl-reference.md-2092bbca" class=""  >Description</b></th></tr></thead><tbody ><tr class="" id="mpp-dsl-reference.md-33da7e06" ><td id="mpp-dsl-reference.md-a7e7888e"    ><code class="code " id="mpp-dsl-reference.md-c2b6188c"  >defaultSourceSet</code></td><td id="mpp-dsl-reference.md-8c87a37d"    >The compilation’s default source set.</td></tr><tr class="" id="mpp-dsl-reference.md-8edfe45d" ><td id="mpp-dsl-reference.md-8a976cbd"    ><code class="code " id="mpp-dsl-reference.md-49e83547"  >kotlinSourceSets</code></td><td id="mpp-dsl-reference.md-41a07408"    >Source sets participating in the compilation.</td></tr><tr class="" id="mpp-dsl-reference.md-b75e5b2b" ><td id="mpp-dsl-reference.md-c2102fa5"    ><code class="code " id="mpp-dsl-reference.md-c0f15cb3"  >allKotlinSourceSets</code></td><td id="mpp-dsl-reference.md-cb628fc5"    >Source sets participating in the compilation and their connections via <code class="code " id="mpp-dsl-reference.md-e6437a68"  >dependsOn()</code>.</td></tr><tr class="" id="mpp-dsl-reference.md-84463c9d" ><td id="mpp-dsl-reference.md-4045fee1"    ><code class="code " id="mpp-dsl-reference.md-42b2eab6"  >kotlinOptions</code></td><td id="mpp-dsl-reference.md-34df54e6"    >Compiler options applied to the compilation. For the list of available options, see <a href="#gradle.md-compiler-options" id="mpp-dsl-reference.md-8e093045"   >Compiler options</a>.</td></tr><tr class="" id="mpp-dsl-reference.md-b1238ab6" ><td id="mpp-dsl-reference.md-34027794"    ><code class="code " id="mpp-dsl-reference.md-6e3ee1d6"  >compileKotlinTask</code></td><td id="mpp-dsl-reference.md-3eff5db7"    >Gradle task for compiling Kotlin sources.</td></tr><tr class="" id="mpp-dsl-reference.md-9544dd11" ><td id="mpp-dsl-reference.md-702bd227"    ><code class="code " id="mpp-dsl-reference.md-204fa90"  >compileKotlinTaskName</code></td><td id="mpp-dsl-reference.md-dcb7f2fd"    >Name of <code class="code " id="mpp-dsl-reference.md-154bfe32"  >compileKotlinTask</code>.</td></tr><tr class="" id="mpp-dsl-reference.md-7fd0bad8" ><td id="mpp-dsl-reference.md-64aef092"    ><code class="code " id="mpp-dsl-reference.md-f25670c2"  >compileAllTaskName</code></td><td id="mpp-dsl-reference.md-3c3fd159"    >Name of the Gradle task for compiling all sources of a compilation.</td></tr><tr class="" id="mpp-dsl-reference.md-6db3784" ><td id="mpp-dsl-reference.md-8c7dffc9"    ><code class="code " id="mpp-dsl-reference.md-8b51694b"  >output</code></td><td id="mpp-dsl-reference.md-fb429aad"    >The compilation output.</td></tr><tr class="" id="mpp-dsl-reference.md-7baf6d92" ><td id="mpp-dsl-reference.md-1e0f210f"    ><code class="code " id="mpp-dsl-reference.md-20e9baa7"  >compileDependencyFiles</code></td><td id="mpp-dsl-reference.md-23907f5f"    >Compile-time dependency files (classpath) of the compilation.</td></tr><tr class="" id="mpp-dsl-reference.md-98d88947" ><td id="mpp-dsl-reference.md-443f00f5"    ><code class="code " id="mpp-dsl-reference.md-ca9eb825"  >runtimeDependencyFiles</code></td><td id="mpp-dsl-reference.md-3423640f"    >Runtime dependency files (classpath) of the compilation.</td></tr></tbody ></table ></div><div class="tabs" id="mpp-dsl-reference.md-e1cc4658" ><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-24901ec1"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-dsl-reference.md-24901ec1"   data-title="Groovy"      >kotlin {\n    jvm {\n        compilations.main.kotlinOptions { \n            // Setup the Kotlin compiler options for the \'main\' compilation:\n            jvmTarget = &quot;1.8&quot;\n        }\n        \n        compilations.main.compileKotlinTask // get the Kotlin task \'compileKotlinJvm\' \n        compilations.main.output // get the main compilation output\n        compilations.test.runtimeDependencyFiles // get the test runtime classpath\n    }\n    \n    // Configure all compilations of all targets:\n    targets.all {\n        compilations.all {\n            kotlinOptions {\n                allWarningsAsErrors = true\n            }\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-9d36f706"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-dsl-reference.md-9d36f706"   data-title="Kotlin"      >kotlin {\n    jvm {\n        val main by compilations.getting {\n            kotlinOptions { \n                // Setup the Kotlin compiler options for the \'main\' compilation:\n                jvmTarget = &quot;1.8&quot;\n            }\n        \n            compileKotlinTask // get the Kotlin task \'compileKotlinJvm\' \n            output // get the main compilation output\n        }\n        \n        compilations[&quot;test&quot;].runtimeDependencyFiles // get the test runtime classpath\n    }\n    \n    // Configure all compilations of all targets:\n    targets.all {\n        compilations.all {\n            kotlinOptions {\n                allWarningsAsErrors = true\n            }\n        }\n    }\n}\n</div></div></div></section></section><section class="chapter"  ><h2 id="mpp-dsl-reference.md-dependencies" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-dependencies"  >Dependencies</h2><p id="mpp-dsl-reference.md-e88f7314" >The <code class="code " id="mpp-dsl-reference.md-864bcd6e"  >dependencies</code> block of the source set declaration contains the dependencies of this source set.</p><p id="mpp-dsl-reference.md-ca2256d0" >Learn more about <a href="#gradle.md-configuring-dependencies" id="mpp-dsl-reference.md-4905edc0"   >configuring dependencies</a>.</p><p id="mpp-dsl-reference.md-e1a624af" >There are four types of dependencies:</p><div class="table-wrapper" ><table class=" wide" id="mpp-dsl-reference.md-ba1f4747"  ><thead><tr class="ijRowHead" id="mpp-dsl-reference.md-b02557ba" ><th id="mpp-dsl-reference.md-193cb273"    ><b id="mpp-dsl-reference.md-d764a723" class=""  >Name</b></th><th id="mpp-dsl-reference.md-6872dcd4"    ><b id="mpp-dsl-reference.md-9c362a2" class=""  >Description</b></th></tr></thead><tbody ><tr class="" id="mpp-dsl-reference.md-4447fab0" ><td id="mpp-dsl-reference.md-4fc214f2"    ><code class="code " id="mpp-dsl-reference.md-a37e994"  >api</code></td><td id="mpp-dsl-reference.md-6f6fff83"    >Dependencies used in the API of the current module.</td></tr><tr class="" id="mpp-dsl-reference.md-27602392" ><td id="mpp-dsl-reference.md-4659b21b"    ><code class="code " id="mpp-dsl-reference.md-c8783842"  >implementation</code></td><td id="mpp-dsl-reference.md-226ddfae"    >Dependencies used in the module but not exposed outside it.</td></tr><tr class="" id="mpp-dsl-reference.md-4361262e" ><td id="mpp-dsl-reference.md-fa4e300"    ><code class="code " id="mpp-dsl-reference.md-f43b5638"  >compileOnly</code></td><td id="mpp-dsl-reference.md-6c08a00"    >Dependencies used only for compilation of the current module.</td></tr><tr class="" id="mpp-dsl-reference.md-61e8e9d2" ><td id="mpp-dsl-reference.md-fb241d09"    ><code class="code " id="mpp-dsl-reference.md-7719adf6"  >runtimeOnly</code></td><td id="mpp-dsl-reference.md-453bf67"    >Dependencies available at runtime but not visible during compilation of any module.</td></tr></tbody ></table ></div><div class="tabs" id="mpp-dsl-reference.md-a3c34d4e" ><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-791ba839"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-dsl-reference.md-791ba839"   data-title="Groovy"      >kotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                api \'com.example:foo-metadata:1.0\'\n            }\n        }\n        jvm6Main {\n            dependencies {\n                implementation \'com.example:foo-jvm6:1.0\'\n            }\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-37f448cb"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-dsl-reference.md-37f448cb"   data-title="Kotlin"      >kotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                api(&quot;com.example:foo-metadata:1.0&quot;)\n            }\n        }\n        val jvm6Main by getting {\n            dependencies {\n                implementation(&quot;com.example:foo-jvm6:1.0&quot;)\n            }\n        }\n    }\n}\n</div></div></div><p id="mpp-dsl-reference.md-7977322f" >Additionally, source sets can depend on each other and form a hierarchy. In this case, the <a href="#mpp-dsl-reference.md-source-set-parameters" id="mpp-dsl-reference.md-e33a87a"   >dependsOn()</a> relation is used.</p><p id="mpp-dsl-reference.md-cb3daebb" >Source set dependencies can also be declared in the top-level <code class="code " id="mpp-dsl-reference.md-bb9623a4"  >dependencies</code> block of the build script. In this case, their declarations follow the pattern <code class="code " id="mpp-dsl-reference.md-11cde0f9"  >&lt;sourceSetName&gt;&lt;DependencyKind&gt;</code>, for example, <code class="code " id="mpp-dsl-reference.md-c55a267"  >commonMainApi</code>.</p><div class="tabs" id="mpp-dsl-reference.md-f686a102" ><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-b0690fd4"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-dsl-reference.md-b0690fd4"   data-title="Groovy"      >dependencies {\n    commonMainApi \'com.example:foo-common:1.0\'\n    jvm6MainApi \'com.example:foo-jvm6:1.0\'\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-60f2e51"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-dsl-reference.md-60f2e51"   data-title="Kotlin"      >dependencies {\n    &quot;commonMainApi&quot;(&quot;com.example:foo-common:1.0&quot;)\n    &quot;jvm6MainApi&quot;(&quot;com.example:foo-jvm6:1.0&quot;)\n}\n</div></div></div></section><section class="chapter"  ><h2 id="mpp-dsl-reference.md-language-settings" data-toc="mpp-dsl-reference#mpp-dsl-reference.md-language-settings"  >Language settings</h2><p id="mpp-dsl-reference.md-ac41e0f9" >The <code class="code " id="mpp-dsl-reference.md-65959040"  >languageSettings</code> block of a source set defines certain aspects of project analysis and build. The following language settings are available:</p><div class="table-wrapper" ><table class=" wide" id="mpp-dsl-reference.md-7af62ea2"  ><thead><tr class="ijRowHead" id="mpp-dsl-reference.md-a015bc30" ><th id="mpp-dsl-reference.md-a30b86f9"    ><b id="mpp-dsl-reference.md-6d74a826" class=""  >Name</b></th><th id="mpp-dsl-reference.md-d42b9cbf"    ><b id="mpp-dsl-reference.md-74c48790" class=""  >Description</b></th></tr></thead><tbody ><tr class="" id="mpp-dsl-reference.md-38a02ad6" ><td id="mpp-dsl-reference.md-31443877"    ><code class="code " id="mpp-dsl-reference.md-28a1b0e5"  >languageVersion</code></td><td id="mpp-dsl-reference.md-92b6882b"    >Provides source compatibility with the specified version of Kotlin.</td></tr><tr class="" id="mpp-dsl-reference.md-51f1b0a8" ><td id="mpp-dsl-reference.md-5029c700"    ><code class="code " id="mpp-dsl-reference.md-ae7ff350"  >apiVersion</code></td><td id="mpp-dsl-reference.md-dd549544"    >Allows using declarations only from the specified version of Kotlin bundled libraries.</td></tr><tr class="" id="mpp-dsl-reference.md-ebf5958a" ><td id="mpp-dsl-reference.md-fc3b5e5"    ><code class="code " id="mpp-dsl-reference.md-40215280"  >enableLanguageFeature</code></td><td id="mpp-dsl-reference.md-fe5bcd60"    >Enables the specified language feature. The available values correspond to the language features that are currently experimental or have been introduced as such at some point.</td></tr><tr class="" id="mpp-dsl-reference.md-921c334f" ><td id="mpp-dsl-reference.md-a6e237f3"    ><code class="code " id="mpp-dsl-reference.md-29dc57cd"  >useExperimentalAnnotation</code></td><td id="mpp-dsl-reference.md-dcb6a028"    >Allows using the specified <a href="#opt-in-requirements.md" id="mpp-dsl-reference.md-cdccce91"   >opt-in annotation</a>.</td></tr><tr class="" id="mpp-dsl-reference.md-7c6f472b" ><td id="mpp-dsl-reference.md-13f1b59a"    ><code class="code " id="mpp-dsl-reference.md-bac21293"  >progressiveMode</code></td><td id="mpp-dsl-reference.md-4e4bf20a"    >Enables the <a href="#whatsnew13.md-progressive-mode" id="mpp-dsl-reference.md-2400ff81"   >progressive mode</a>.</td></tr></tbody ></table ></div><div class="tabs" id="mpp-dsl-reference.md-7a0af8e6" ><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-af1904cb"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mpp-dsl-reference.md-af1904cb"   data-title="Groovy"      >kotlin {\n    sourceSets.all {\n        languageSettings {\n            languageVersion = \'1.4\' // possible values: \'1.0\', \'1.1\', \'1.2\', \'1.3\', \'1.4\'\n            apiVersion = \'1.4\' // possible values: \'1.0\', \'1.1\', \'1.2\', \'1.3\', \'1.4\'\n            enableLanguageFeature(\'InlineClasses\') // language feature name\n            useExperimentalAnnotation(\'kotlin.ExperimentalUnsignedTypes\') // annotation FQ-name\n            progressiveMode = true // false by default\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mpp-dsl-reference.md-5f60a144"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mpp-dsl-reference.md-5f60a144"   data-title="Kotlin"      >kotlin {\n    sourceSets.all {\n        languageSettings.apply {\n            languageVersion = &quot;1.4&quot; // possible values: &quot;1.0&quot;, &quot;1.1&quot;, &quot;1.2&quot;, &quot;1.3&quot;, &quot;1.4&quot;\n            apiVersion = &quot;1.4&quot; // possible values: &quot;1.0&quot;, &quot;1.1&quot;, &quot;1.2&quot;, &quot;1.3&quot;, &quot;1.4&quot;\n            enableLanguageFeature(&quot;InlineClasses&quot;) // language feature name\n            useExperimentalAnnotation(&quot;kotlin.ExperimentalUnsignedTypes&quot;) // annotation FQ-name\n            progressiveMode = true // false by default\n        }\n    }\n}\n</div></div></div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="migrating-multiplatform-project-to-14.md"  >Migrating multiplatform projects to Kotlin 1.4.0</h1><p id="migrating-multiplatform-project-to-14.md-74652340" >Kotlin 1.4.0 comes with lots of features and improvements in the tooling for multiplatform programming. Some of them just work out of the box on existing projects, and some require additional configuration steps. This guide will help you migrate your multiplatform projects to 1.4.0 or higher and get the benefits of all its new features.</p><section class="chapter"  ><h2 id="migrating-multiplatform-project-to-14.md-for-multiplatform-project-authors" data-toc="migrating-multiplatform-project-to-14#migrating-multiplatform-project-to-14.md-for-multiplatform-project-authors"  >For multiplatform project authors</h2><section class="chapter"  ><h3 id="migrating-multiplatform-project-to-14.md-update-gradle" data-toc="migrating-multiplatform-project-to-14#migrating-multiplatform-project-to-14.md-update-gradle"  >Update Gradle</h3><p id="migrating-multiplatform-project-to-14.md-c95bab22" >Starting with 1.4.0, Kotlin multiplatform projects require Gradle 6.0 or later. Make sure that your projects use the proper version of Gradle and upgrade it if needed. See the <a href="https://docs.gradle.org/current/userguide/upgrading_version_5.html" id="migrating-multiplatform-project-to-14.md-28f061e1"   data-external="true" rel="noopener noreferrer" >Gradle documentation</a> for non-Kotlin-specific migration instructions.</p></section><section class="chapter"  ><h3 id="migrating-multiplatform-project-to-14.md-simplify-your-build-configuration" data-toc="migrating-multiplatform-project-to-14#migrating-multiplatform-project-to-14.md-simplify-your-build-configuration"  >Simplify your build configuration</h3><p id="migrating-multiplatform-project-to-14.md-e0176573" >Gradle module metadata provides rich publishing and dependency resolution features that are used in Kotlin Multiplatform Projects. In Gradle 6.0 and above, module metadata is used in dependency resolution and included in publications by default. Thus, once you update to Gradle 6.0, you can remove <code class="code " id="migrating-multiplatform-project-to-14.md-376e6530"  >enableFeaturePreview(&quot;GRADLE_METADATA&quot;)</code> from the project’s <code class="code " id="migrating-multiplatform-project-to-14.md-91ca7bc8"  >settings.gradle</code> file.</p><p id="migrating-multiplatform-project-to-14.md-5deac372" >If you use libraries published with metadata, you only have to specify dependencies on them only once in the shared source set, as opposed to specifying dependencies on different variants of the same library in the shared and platform-specific source sets prior to 1.4.0.</p><p id="migrating-multiplatform-project-to-14.md-d552f6d2" >Starting from 1.4.0, you also no longer need to declare a dependency on <code class="code " id="migrating-multiplatform-project-to-14.md-30405e83"  >stdlib</code> in each source set manually – it <a href="#mpp-add-dependencies.md-dependency-on-the-standard-library" id="migrating-multiplatform-project-to-14.md-bf1f1584"   >will now be added by default</a>. The version of the automatically added standard library will be the same as the version of the Kotlin Gradle plugin, since they have the same versioning.</p><p id="migrating-multiplatform-project-to-14.md-d9946d1d" >With these features, you can make your Gradle build file much more concise and easy to read:</p><div class="code-block" data-lang="kotlin" id="migrating-multiplatform-project-to-14.md-39115a7e"         >//...\nandroid()\nios()\njs()\n\nsourceSets {\n    commonMain {\n        dependencies {\n            implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion&quot;)\n        }\n    }\n}\n//...\n</div><p id="migrating-multiplatform-project-to-14.md-521309c4" >Don’t use kotlinx library artifact names with suffixes <code class="code " id="migrating-multiplatform-project-to-14.md-fddc31cd"  >-common</code> or <code class="code " id="migrating-multiplatform-project-to-14.md-dd372f50"  >-native</code>, as they are no longer supported. Instead, use the library root artifact name, which in the example above is <code class="code " id="migrating-multiplatform-project-to-14.md-733eb6df"  >kotlinx-coroutines-core</code>.</p></section><section class="chapter"  ><h3 id="migrating-multiplatform-project-to-14.md-try-the-hierarchical-project-structure" data-toc="migrating-multiplatform-project-to-14#migrating-multiplatform-project-to-14.md-try-the-hierarchical-project-structure"  >Try the hierarchical project structure</h3><p id="migrating-multiplatform-project-to-14.md-68eaa336" >With <a href="#mpp-share-on-platforms.md-share-code-on-similar-platforms" id="migrating-multiplatform-project-to-14.md-cbb91b97"   >the new hierarchical project structure support</a>, you can share code among several targets in a multiplatform project. You can use platform-dependent libraries, such as <code class="code " id="migrating-multiplatform-project-to-14.md-70dfedfe"  >Foundation</code>, <code class="code " id="migrating-multiplatform-project-to-14.md-397dece0"  >UIKit</code>, and <code class="code " id="migrating-multiplatform-project-to-14.md-85a9bc81"  >posix</code> in source sets shared among several native targets. This can help you share more native code without being limited by platform-specific dependencies.</p><p id="migrating-multiplatform-project-to-14.md-e3e0be30" >By enabling the hierarchical structure along with its ability to use platform-dependent libraries in shared source sets, you can eliminate the need to use certain workarounds to get IDE support for sharing source sets among several native targets, for example <code class="code " id="migrating-multiplatform-project-to-14.md-a4fa68ea"  >iosArm64</code> and <code class="code " id="migrating-multiplatform-project-to-14.md-b19f4e2"  >iosX64</code>:</p><div class="code-block" data-lang="kotlin" id="migrating-multiplatform-project-to-14.md-e6490892"         >kotlin {\n    // workaround 1: select iOS target platform depending on the Xcode environment variables\n    val iOSTarget: (String, KotlinNativeTarget.() -&gt; Unit) -&gt; KotlinNativeTarget =\n        if (System.getenv(&quot;SDK_NAME&quot;)?.startsWith(&quot;iphoneos&quot;) == true)\n            ::iosArm64\n        else\n            ::iosX64\n\n    iOSTarget(&quot;ios&quot;) \n}\n</div><div class="code-block" data-lang="bash" id="migrating-multiplatform-project-to-14.md-ee124d4c"         ># workaround 2: make symbolic links to use one source set for two targets\nln -s iosMain iosArm64Main &amp;&amp; ln -s iosMain iosX64Main\n</div><p id="migrating-multiplatform-project-to-14.md-c4aac425" >Instead of doing this, you can create a hierarchical structure with <a href="#mpp-share-on-platforms.md-use-target-shortcuts" id="migrating-multiplatform-project-to-14.md-637b96f4"   >target shortcuts</a> available for typical multi-target scenarios, or you can manually declare and connect the source sets. For example, you can create two iOS targets and a shared source set with the <code class="code " id="migrating-multiplatform-project-to-14.md-1d6581be"  >ios()</code> shortcut:</p><div class="code-block" data-lang="kotlin" id="migrating-multiplatform-project-to-14.md-6d9bda5e"         >kotlin {\n   ios() // iOS device and simulator targets; iosMain and iosTest source sets\n}\n</div><p id="migrating-multiplatform-project-to-14.md-ba1894d5" >To enable the hierarchical project structure along with the use of platform-dependent libraries in shared source sets, just add the following to your <code class="code " id="migrating-multiplatform-project-to-14.md-9845f241"  >gradle.properties</code>:</p><div class="code-block" data-lang="kotlin" id="migrating-multiplatform-project-to-14.md-bd084e2d"         >kotlin.mpp.enableGranularSourceSetsMetadata=true\nkotlin.native.enableDependencyPropagation=false\n</div><p id="migrating-multiplatform-project-to-14.md-53d86b28" >In future versions, the hierarchical project structure will become default for Kotlin multiplatform project, so we strongly encourage you to start using it now.</p></section></section><section class="chapter"  ><h2 id="migrating-multiplatform-project-to-14.md-for-library-authors" data-toc="migrating-multiplatform-project-to-14#migrating-multiplatform-project-to-14.md-for-library-authors"  >For library authors</h2><section class="chapter"  ><h3 id="migrating-multiplatform-project-to-14.md-migrate-from-gradle-bintray-plugin-to-maven-publish-plugin" data-toc="migrating-multiplatform-project-to-14#migrating-multiplatform-project-to-14.md-migrate-from-gradle-bintray-plugin-to-maven-publish-plugin"  >Migrate from Gradle Bintray plugin to Maven Publish plugin</h3><p id="migrating-multiplatform-project-to-14.md-ded77637" >If you\'re using <code class="code " id="migrating-multiplatform-project-to-14.md-636f87c9"  >gradle-bintray-plugin</code> for library publication, migrate your projects to <code class="code " id="migrating-multiplatform-project-to-14.md-98de0675"  >maven-publish</code> plugin instead. <a href="https://github.com/Kotlin/kotlinx.serialization/commit/c5f1af6ad78a77fe5861588d9fb00b7d3a9bc3e5#diff-439aadfed1f3c340acdcc871c00258aeL5" id="migrating-multiplatform-project-to-14.md-32606595"   data-external="true" rel="noopener noreferrer" >See how we\'ve done this for <code class="code " id="migrating-multiplatform-project-to-14.md-1ad56ae6"  >kotlinx.serialization</code></a>. Learn more about <a href="#mpp-publish-lib.md" id="migrating-multiplatform-project-to-14.md-dcd4bc53"   >publishing multiplatform libraries</a>.</p><p id="migrating-multiplatform-project-to-14.md-f494285" >If for some reason you need to publish to Bintray and use the Gradle Bintray plugin, remember that this plugin doesn’t support publishing Gradle module metadata. Use <a href="https://github.com/bintray/gradle-bintray-plugin/issues/229#issuecomment-473123891" id="migrating-multiplatform-project-to-14.md-9cb464c6"   data-external="true" rel="noopener noreferrer" >this workaround</a> to fix this.</p></section><section class="chapter"  ><h3 id="migrating-multiplatform-project-to-14.md-follow-the-default-libraries-layout" data-toc="migrating-multiplatform-project-to-14#migrating-multiplatform-project-to-14.md-follow-the-default-libraries-layout"  >Follow the default libraries’ layout</h3><p id="migrating-multiplatform-project-to-14.md-bbf78e5c" >The layout of kotlinx libraries has changed and now corresponds to the default layout, which we recommend using: The <em id="migrating-multiplatform-project-to-14.md-2d1c05a2" class=""  >root</em> or <em id="migrating-multiplatform-project-to-14.md-f91690c4" class=""  >umbrella</em> library module now has a name without a suffix (for example, <code class="code " id="migrating-multiplatform-project-to-14.md-f517cb6a"  >kotlinx-coroutines-core</code> instead of <code class="code " id="migrating-multiplatform-project-to-14.md-cc11dab9"  >kotlinx-coroutines-core-native</code> ). Publishing libraries with <a href="https://docs.gradle.org/current/userguide/publishing_maven.html" id="migrating-multiplatform-project-to-14.md-c9336e6"   data-external="true" rel="noopener noreferrer" >maven-publish Gradle plugin</a> follows this layout by default. Learn more about <a href="#mpp-publish-lib.md" id="migrating-multiplatform-project-to-14.md-93563b79"   >publishing multiplatform libraries</a>.</p></section><section class="chapter"  ><h3 id="migrating-multiplatform-project-to-14.md-migrate-to-the-hierarchical-project-structure" data-toc="migrating-multiplatform-project-to-14#migrating-multiplatform-project-to-14.md-migrate-to-the-hierarchical-project-structure"  >Migrate to the hierarchical project structure</h3><p id="migrating-multiplatform-project-to-14.md-55d1a752" >A hierarchical project structure allows reusing code in similar targets, as well as publishing and consuming libraries with granular APIs targeting similar platforms. We recommend that you switch to the hierarchical project structure in your libraries when migrating to Kotlin 1.4.0 or higher:</p><ul class="list _ul" id="migrating-multiplatform-project-to-14.md-d26f06c3"   ><li class="list__item" id="migrating-multiplatform-project-to-14.md-5f30a075" ><p id="migrating-multiplatform-project-to-14.md-4042806d" >By default, libraries published with the hierarchical project structure are compatible only with projects that have hierarchical project structure. To enable compatibility with non-hierarchical projects, add the following to the <code class="code " id="migrating-multiplatform-project-to-14.md-c5fba44"  >gradle.properties</code> file in your library project:</p><div class="code-block" data-lang="none" id="migrating-multiplatform-project-to-14.md-1de9c02d"      data-disable-link-processing="true"   >kotlin.mpp.enableCompatibilityMetadataVariant=true\n</div></li><li class="list__item" id="migrating-multiplatform-project-to-14.md-1a59f6ba" ><p id="migrating-multiplatform-project-to-14.md-915f1ece" >Libraries published without the hierarchical project structure can’t be used in a shared native source set. For example, users with <code class="code " id="migrating-multiplatform-project-to-14.md-c890bc0e"  >ios()</code> shortcuts in their <code class="code " id="migrating-multiplatform-project-to-14.md-ace8c61c"  >build.gradle.(kts)</code> files won’t be able to use your library in their iOS-shared code.</p></li></ul><p id="migrating-multiplatform-project-to-14.md-74be346d" >The compatibility between multiplatform projects and libraries is as follows:</p><div class="table-wrapper" ><table class=" wide" id="migrating-multiplatform-project-to-14.md-8695f55"  ><thead><tr class="ijRowHead" id="migrating-multiplatform-project-to-14.md-233829de" ><th id="migrating-multiplatform-project-to-14.md-da3a7e6"    >Library with hierarchical project structure</th><th id="migrating-multiplatform-project-to-14.md-fbaeec04"    >Project with hierarchical project structure</th><th id="migrating-multiplatform-project-to-14.md-1c7dfaab"    >Compatibility</th></tr></thead><tbody ><tr class="" id="migrating-multiplatform-project-to-14.md-f87f36d0" ><td id="migrating-multiplatform-project-to-14.md-ab2e2c1c"    >Yes</td><td id="migrating-multiplatform-project-to-14.md-f38bc69"    >Yes</td><td id="migrating-multiplatform-project-to-14.md-b74c8208"    >✅</td></tr><tr class="" id="migrating-multiplatform-project-to-14.md-95fbb1c9" ><td id="migrating-multiplatform-project-to-14.md-b724a3ca"    >Yes</td><td id="migrating-multiplatform-project-to-14.md-ee01dcec"    >No</td><td id="migrating-multiplatform-project-to-14.md-d1862e1d"    >Need to enable with <code class="code " id="migrating-multiplatform-project-to-14.md-55eef482"  >enableCompatibilityMetadataVariant</code></td></tr><tr class="" id="migrating-multiplatform-project-to-14.md-8cb3adfd" ><td id="migrating-multiplatform-project-to-14.md-8ef0f47a"    >No</td><td id="migrating-multiplatform-project-to-14.md-80303833"    >Yes</td><td id="migrating-multiplatform-project-to-14.md-ac9c2fe7"    >Library can’t be used in a shared native source set</td></tr><tr class="" id="migrating-multiplatform-project-to-14.md-1c5a2f84" ><td id="migrating-multiplatform-project-to-14.md-280db00f"    >No</td><td id="migrating-multiplatform-project-to-14.md-74602194"    >Yes</td><td id="migrating-multiplatform-project-to-14.md-3bc6a9a1"    >✅</td></tr></tbody ></table ></div><p id="migrating-multiplatform-project-to-14.md-c06c82fb" >In future versions, the hierarchical project structure with the usage of platform-dependent libraries in shared source sets will be the default in multiplatform projects. So the sooner you support it, the sooner users will be able to migrate. We’ll also be very grateful if you report any bugs you find to our issue tracker.</p><p id="migrating-multiplatform-project-to-14.md-432fcc69" >To enable hierarchical project structure support, add the following to your <code class="code " id="migrating-multiplatform-project-to-14.md-166a8d29"  >gradle.properties</code> file:</p><div class="code-block" data-lang="none" id="migrating-multiplatform-project-to-14.md-585dbef1"      data-disable-link-processing="true"   >kotlin.mpp.enableGranularSourceSetsMetadata=true\nkotlin.mpp.enableCompatibilityMetadataVariant=true // to enable compatibility with projects without hierarchical structure\n</div></section></section><section class="chapter"  ><h2 id="migrating-multiplatform-project-to-14.md-for-build-authors" data-toc="migrating-multiplatform-project-to-14#migrating-multiplatform-project-to-14.md-for-build-authors"  >For build authors</h2><section class="chapter"  ><h3 id="migrating-multiplatform-project-to-14.md-check-task-names" data-toc="migrating-multiplatform-project-to-14#migrating-multiplatform-project-to-14.md-check-task-names"  >Check task names</h3><p id="migrating-multiplatform-project-to-14.md-254c2505" >The introduction of the hierarchical project structure in multiplatform projects resulted in a couple of changes to the names of some Gradle tasks:</p><ul class="list _ul" id="migrating-multiplatform-project-to-14.md-692886fd"   ><li class="list__item" id="migrating-multiplatform-project-to-14.md-5af38f64" ><p>The <code class="code " id="migrating-multiplatform-project-to-14.md-c865c0bf"  >metadataJar</code> task has been renamed to <code class="code " id="migrating-multiplatform-project-to-14.md-95b760d8"  >allMetadataJar</code>.</p></li><li class="list__item" id="migrating-multiplatform-project-to-14.md-b65daa2e" ><p>There are new <code class="code " id="migrating-multiplatform-project-to-14.md-add99860"  >compile&lt;SourceSet&gt;KotlinMetadata</code> tasks for all published intermediate source sets.</p></li></ul><p id="migrating-multiplatform-project-to-14.md-e889fcf2" >These changes are relevant only for projects with the hierarchical project structure.</p></section></section><section class="chapter"  ><h2 id="migrating-multiplatform-project-to-14.md-for-using-the-kotlin-js-target" data-toc="migrating-multiplatform-project-to-14#migrating-multiplatform-project-to-14.md-for-using-the-kotlin-js-target"  >For using the Kotlin/JS target</h2><section class="chapter"  ><h3 id="migrating-multiplatform-project-to-14.md-changes-related-to-npm-dependency-management" data-toc="migrating-multiplatform-project-to-14#migrating-multiplatform-project-to-14.md-changes-related-to-npm-dependency-management"  >Changes related to npm dependency management</h3><p id="migrating-multiplatform-project-to-14.md-9fc8c0fd" >When declaring dependencies on npm packages, you are now required to explicitly specify a version or version range based on <a href="https://docs.npmjs.com/misc/semver#versions" id="migrating-multiplatform-project-to-14.md-878ca8bc"   data-external="true" rel="noopener noreferrer" >npm’s semver syntax</a>. Specifying multiple version ranges is also supported.</p><p id="migrating-multiplatform-project-to-14.md-b2e25c45" >While we don’t recommend it, you can use a wildcard <code class="code " id="migrating-multiplatform-project-to-14.md-2b58902"  >*</code> in place of a version number if you do not want to specify a version or version range explicitly.</p></section><section class="chapter"  ><h3 id="migrating-multiplatform-project-to-14.md-changes-related-to-the-kotlin-js-ir-compiler" data-toc="migrating-multiplatform-project-to-14#migrating-multiplatform-project-to-14.md-changes-related-to-the-kotlin-js-ir-compiler"  >Changes related to the Kotlin/JS IR compiler</h3><p id="migrating-multiplatform-project-to-14.md-52764858" >Kotlin 1.4.0 introduces the Alpha IR compiler for Kotlin/JS. Learn more about the <a href="#js-ir-compiler.md" id="migrating-multiplatform-project-to-14.md-fddf7c7a"   >Kotlin/JS IR compiler’s backend and how to configure it</a>.</p><p id="migrating-multiplatform-project-to-14.md-a8a35df1" >To choose between the different Kotlin/JS compiler options, set the key <code class="code " id="migrating-multiplatform-project-to-14.md-5ed5a1ca"  >kotlin.js.compiler</code> in your <code class="code " id="migrating-multiplatform-project-to-14.md-31dcb766"  >gradle.properties</code> to <code class="code " id="migrating-multiplatform-project-to-14.md-75e43c43"  >legacy</code>, <code class="code " id="migrating-multiplatform-project-to-14.md-5595ffd4"  >ir</code>, or <code class="code " id="migrating-multiplatform-project-to-14.md-85c1b4a2"  >both</code>. Alternatively, pass <code class="code " id="migrating-multiplatform-project-to-14.md-e2a361c6"  >LEGACY</code>, <code class="code " id="migrating-multiplatform-project-to-14.md-80939d2e"  >IR</code>, or <code class="code " id="migrating-multiplatform-project-to-14.md-1be13f1b"  >BOTH</code> to the <code class="code " id="migrating-multiplatform-project-to-14.md-a97265ad"  >js</code> function in your <code class="code " id="migrating-multiplatform-project-to-14.md-a68957fa"  >build.gradle(.kts)</code>.</p><div class="code-block" data-lang="groovy" id="migrating-multiplatform-project-to-14.md-37a1d300"         >kotlin {\n    js(IR) { // or: LEGACY, BOTH\n        // . . .\n    }\n    binaries.executable()\n}\n</div><section class="chapter"  ><h4 id="migrating-multiplatform-project-to-14.md-changes-in-both-mode" data-toc="migrating-multiplatform-project-to-14#migrating-multiplatform-project-to-14.md-changes-in-both-mode"  >Changes in both mode</h4><p id="migrating-multiplatform-project-to-14.md-c617d10" >Choosing <code class="code " id="migrating-multiplatform-project-to-14.md-1e72276f"  >both</code> as the compiler option (so that it will compile with both the legacy and the IR backend) means that some Gradle tasks are renamed to explicitly mark them as only affecting the legacy compilation. <code class="code " id="migrating-multiplatform-project-to-14.md-4df4e96e"  >compileKotlinJs</code> is renamed to <code class="code " id="migrating-multiplatform-project-to-14.md-5a1883e2"  >compileKotlinJsLegacy</code>, and <code class="code " id="migrating-multiplatform-project-to-14.md-2718fac0"  >compileTestKotlinJs</code> is renamed to <code class="code " id="migrating-multiplatform-project-to-14.md-e0737a1"  >compileTestKotlinJsLegacy</code>.</p></section><section class="chapter"  ><h4 id="migrating-multiplatform-project-to-14.md-explicitly-toggling-the-creation-of-executable-files" data-toc="migrating-multiplatform-project-to-14#migrating-multiplatform-project-to-14.md-explicitly-toggling-the-creation-of-executable-files"  >Explicitly toggling the creation of executable files</h4><p id="migrating-multiplatform-project-to-14.md-b86ac2b8" >When using the IR compiler, the <code class="code " id="migrating-multiplatform-project-to-14.md-e2efc353"  >binaries.executable()</code> instruction must be present in the <code class="code " id="migrating-multiplatform-project-to-14.md-dcb9eadd"  >js</code> target configuration block of your <code class="code " id="migrating-multiplatform-project-to-14.md-e0401548"  >build.gradle(.kts)</code>. If this option is omitted, only Kotlin-internal library files are generated. These files can be used from other projects, but not run on their own.</p><p id="migrating-multiplatform-project-to-14.md-60622c20" >For backwards compatibility, when using the legacy compiler for Kotlin/JS, including or omitting <code class="code " id="migrating-multiplatform-project-to-14.md-5c47485f"  >binaries.executable()</code> will have no effect – executable files will be generated in either case. To make the legacy backend stop producing executable files without the presence of <code class="code " id="migrating-multiplatform-project-to-14.md-f4a53de6"  >binaries.executable()</code> (for example, to improve build times where runnable artifacts aren\'t required), set <code class="code " id="migrating-multiplatform-project-to-14.md-7e08c403"  >kotlin.js.generate.executable.default=false</code> in your <code class="code " id="migrating-multiplatform-project-to-14.md-82402c63"  >gradle.properties</code>.</p></section></section><section class="chapter"  ><h3 id="migrating-multiplatform-project-to-14.md-changes-related-to-dukat" data-toc="migrating-multiplatform-project-to-14#migrating-multiplatform-project-to-14.md-changes-related-to-dukat"  >Changes related to Dukat</h3><p id="migrating-multiplatform-project-to-14.md-1e405311" >The Dukat integration for Gradle has received minor naming and functionality changes with Kotlin 1.4.0.</p><ul class="list _ul" id="migrating-multiplatform-project-to-14.md-32c78c84"   ><li class="list__item" id="migrating-multiplatform-project-to-14.md-370070a5" ><p>The <code class="code " id="migrating-multiplatform-project-to-14.md-fa9b93b4"  >kotlin.js.experimental.generateKotlinExternals</code> flag has been renamed to <code class="code " id="migrating-multiplatform-project-to-14.md-b38bf525"  >kotlin.js.generate.externals</code>. It controls the default behavior of Dukat for all specified npm dependencies.</p></li><li class="list__item" id="migrating-multiplatform-project-to-14.md-1b6fc437" ><p>The <code class="code " id="migrating-multiplatform-project-to-14.md-622c4b03"  >npm</code> dependency function now takes a third parameter after the package name and version: <code class="code " id="migrating-multiplatform-project-to-14.md-9883303"  >generateExternals</code>. This allows you to individually control whether Dukat should generate declarations for a specific dependency, and it overrides the <code class="code " id="migrating-multiplatform-project-to-14.md-7ec8b201"  >generateKotlinExternals</code> setting.</p></li></ul><p id="migrating-multiplatform-project-to-14.md-86d17a31" >Learn how to <a href="#js-external-declarations-with-dukat.md" id="migrating-multiplatform-project-to-14.md-651da90e"   >manually trigger the generation of Kotlin externals</a>.</p></section><section class="chapter"  ><h3 id="migrating-multiplatform-project-to-14.md-using-artifacts-built-with-kotlin-1-4-x-in-a-kotlin-1-3-x-project" data-toc="migrating-multiplatform-project-to-14#migrating-multiplatform-project-to-14.md-using-artifacts-built-with-kotlin-1-4-x-in-a-kotlin-1-3-x-project"  >Using artifacts built with Kotlin 1.4.x in a Kotlin 1.3.x project</h3><p id="migrating-multiplatform-project-to-14.md-4fc7c380" >The choice between the <code class="code " id="migrating-multiplatform-project-to-14.md-5e05a9e6"  >IR</code> and <code class="code " id="migrating-multiplatform-project-to-14.md-49f0881"  >LEGACY</code> compilers was not yet available in Kotlin 1.3.xx. Because of this, you may encounter a Gradle error <code class="code " id="migrating-multiplatform-project-to-14.md-a7eec723"  >Cannot choose between the following variants...</code> if one of your dependencies (or any transitive dependency) was built using Kotlin 1.4+ but your project uses Kotlin 1.3.xx. A workaround is provided <a href="https://youtrack.jetbrains.com/issue/KT-40226" id="migrating-multiplatform-project-to-14.md-eba34262"   data-external="true" rel="noopener noreferrer" >here</a>.</p></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="mpp-tutorials.md"  >Tutorials for Kotlin Multiplatform</h1><p id="mpp-tutorials.md-94cd6a0b" >A number of tutorials are available to help you get acquainted with <a href="#mpp-intro.md" id="mpp-tutorials.md-74367d08"   >Kotlin Multiplatform</a>. These tutorials come in two varieties:</p><ul class="list _ul" id="mpp-tutorials.md-deeb9c93"   ><li class="list__item" id="mpp-tutorials.md-a11c1df2" ><p>Plain tutorials describe how to complete a specific task from start to finish, with screenshots and code samples.</p></li><li class="list__item" id="mpp-tutorials.md-254f2bb9" ><p>Hands-on tutorials provide a self-contained project related to a specific topic.</p></li></ul><div class="table-wrapper" ><table class=" wide" id="mpp-tutorials.md-72d164"  ><thead><tr class="ijRowHead" id="mpp-tutorials.md-403fce37" ><th id="mpp-tutorials.md-cc70c462"    >Name</th><th id="mpp-tutorials.md-6845d974"    >Type</th><th id="mpp-tutorials.md-aedab9a1"    >You will learn how to</th></tr></thead><tbody ><tr class="" id="mpp-tutorials.md-4f150094" ><td id="mpp-tutorials.md-ee17c4e4"    ><a href="https://kotlinlang.org/docs/mobile/create-first-app.html" id="mpp-tutorials.md-f8988e09"   data-external="true" rel="noopener noreferrer" >Creating your first KMM application</a></td><td id="mpp-tutorials.md-ea198537"    >Tutorial</td><td id="mpp-tutorials.md-816a63bc"    >Create a basic Kotlin Multiplatform Mobile (KMM) application using the KMM plugin for Android Studio.</td></tr><tr class="" id="mpp-tutorials.md-6b48d972" ><td id="mpp-tutorials.md-122e088f"    ><a href="https://play.kotlinlang.org/hands-on/Networking%20and%20Data%20Storage%20with%20Kotlin%20Multiplatfrom%20Mobile/" id="mpp-tutorials.md-7701bd64"   data-external="true" rel="noopener noreferrer" >Networking and data storage</a></td><td id="mpp-tutorials.md-af60a5c1"    >Hands-on</td><td id="mpp-tutorials.md-2c798790"    >Create a KMM application for Android and iOS that will retrieve data over the internet from a public API, save it in a local database, and display it in a list in the application.</td></tr><tr class="" id="mpp-tutorials.md-ee0e4ac0" ><td id="mpp-tutorials.md-d00443be"    ><a href="#multiplatform-library.md" id="mpp-tutorials.md-e05b9328"   >Creating and publishing a multiplatform library</a></td><td id="mpp-tutorials.md-fd0084ef"    >Tutorial</td><td id="mpp-tutorials.md-54f44378"    >Create a multiplatform library that is available for JVM, JS, and Native, and that can be used from any other common code.</td></tr><tr class="" id="mpp-tutorials.md-5207f176" ><td id="mpp-tutorials.md-7785fa5f"    ><a href="https://play.kotlinlang.org/hands-on/Full%20Stack%20Web%20App%20with%20Kotlin%20Multiplatform/" id="mpp-tutorials.md-779d89aa"   data-external="true" rel="noopener noreferrer" >Building a full-stack web application</a></td><td id="mpp-tutorials.md-f4b308f0"    >Hands-on</td><td id="mpp-tutorials.md-de5e90a1"    >Create a client-server application that targets Kotlin/JVM and Kotlin/JS and uses common code, serialization, and other multiplatform paradigms.</td></tr></tbody ></table ></div></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="jvm-get-started.md"  >Get started with Kotlin/JVM</h1><p id="jvm-get-started.md-67d35eb6" >This tutorial demonstrates how to use IntelliJ IDEA for creating a console application.</p><p id="jvm-get-started.md-5d3f1b0e" >To get started, first download and install the latest version of <a href="http://www.jetbrains.com/idea/download/index.html" id="jvm-get-started.md-7da5754d"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA</a>.</p><section class="chapter"  ><h2 id="jvm-get-started.md-create-an-application" data-toc="jvm-get-started#jvm-get-started.md-create-an-application"  >Create an application</h2><p id="jvm-get-started.md-893eda6e" >Once you\'ve installed IntelliJ IDEA, it\'s time to create your first Kotlin application.</p><ol class="list _decimal" id="jvm-get-started.md-918438b7"   ><li class="list__item" id="jvm-get-started.md-440d8d21" ><p id="jvm-get-started.md-1da9a424" >In IntelliJ IDEA, select <b id="jvm-get-started.md-4dd86606" class=""  >File</b> | <b id="jvm-get-started.md-b2e8c99" class=""  >New</b> | <b id="jvm-get-started.md-edf156a8" class=""  >Project</b>.</p></li><li class="list__item" id="jvm-get-started.md-e00fa9d3" ><p id="jvm-get-started.md-fa27ad7" >In the panel on the left, select <b id="jvm-get-started.md-95d31897" class=""  >Kotlin</b>.</p></li><li class="list__item" id="jvm-get-started.md-458482e2" ><p id="jvm-get-started.md-aa30f97f" >Enter a project name, select <b id="jvm-get-started.md-db9a4779" class=""  >Console Application</b> as the project template, and click <b id="jvm-get-started.md-201842b0" class=""  >Next</b>.</p><p id="jvm-get-started.md-4a0c0792" ><figure title="Create a console application"><img alt="Create a console application" title="Create a console application" id="jvm-get-started.md-dc45daf6" src="images/jvm-new-project-1.png"  class="" width="1750" height="978" /></figure></p><p id="jvm-get-started.md-7dc6c684" >By default, your project will use the Gradle build system with Kotlin DSL.</p></li><li class="list__item" id="jvm-get-started.md-70c909ce" ><p id="jvm-get-started.md-5e0e93ba" >Go through and accept the default configuration, then click <b id="jvm-get-started.md-140bff38" class=""  >Finish</b>.</p><p id="jvm-get-started.md-70a9e7e7" ><figure title="Configure a console application"><img alt="Configure a console application" title="Configure a console application" id="jvm-get-started.md-cf3c96d9" src="images/jvm-new-project-2.png"  class="" width="1750" height="978" /></figure></p><p id="jvm-get-started.md-2f345f30" >Your project will open. By default, you see the file <code class="code " id="jvm-get-started.md-889fb310"  >build.gradle.kts</code>, which is the build script created by the Project Wizard based on your configuration. It includes the <code class="code " id="jvm-get-started.md-86a21fde"  >kotlin(&quot;jvm&quot;)</code> plugin and dependencies required for your console application.</p></li><li class="list__item" id="jvm-get-started.md-2ada70f4" ><p id="jvm-get-started.md-52aeee8" >Open the <code class="code " id="jvm-get-started.md-d9bd48e9"  >main.kt</code> file in <code class="code " id="jvm-get-started.md-cb9c0bfc"  >src/main/kotlin</code>. <br/> The <code class="code " id="jvm-get-started.md-a32eeb5b"  >src</code> directory contains Kotlin source files and resources. The <code class="code " id="jvm-get-started.md-df560352"  >main.kt</code> file contains sample code that will print <code class="code " id="jvm-get-started.md-2f5be6ff"  >Hello World!</code>.</p><p id="jvm-get-started.md-278be9ac" ><figure title="main.kt with main fun"><img alt="main.kt with main fun" title="main.kt with main fun" id="jvm-get-started.md-540d43bd" src="images/jvm-main-kt-initial.png"  class="" width="600" height="421" /></figure></p></li><li class="list__item" id="jvm-get-started.md-e7eb02b1" ><p id="jvm-get-started.md-acc7a266" >Modify the code so that it requests your name and says <code class="code " id="jvm-get-started.md-89df8be8"  >Hello</code> to you specifically, and not to the whole world.</p><ul class="list _ul" id="jvm-get-started.md-46519c01"   ><li class="list__item" id="jvm-get-started.md-112722ee" ><p>Introduce a local variable <code class="code " id="jvm-get-started.md-1e001ac0"  >name</code> with the keyword <code class="code " id="jvm-get-started.md-9a88ea27"  >val</code>. It will get its value from an input where you will enter your name – <code class="code " id="jvm-get-started.md-41e2e919"  >readLine()</code>.</p></li><li class="list__item" id="jvm-get-started.md-554db716" ><p>Use a string template by adding a dollar sign <code class="code " id="jvm-get-started.md-65f862d6"  >$</code> before this variable name directly in the text output like this – <code class="code " id="jvm-get-started.md-5e1619f9"  >$name</code>.</p></li></ul><div class="code-block" data-lang="kotlin" id="jvm-get-started.md-dae53b00"         >fun main() {\n    println(&quot;What\'s your name?&quot;)\n    val name= readLine()\n    println(&quot;Hello $name!&quot;)\n}\n</div><p id="jvm-get-started.md-d7b51b70" ><figure title="Updated main fun"><img alt="Updated main fun" title="Updated main fun" id="jvm-get-started.md-bc70f8ca" src="images/jvm-main-kt-updated.png"  class="" width="400" height="183" /></figure></p></li></ol></section><section class="chapter"  ><h2 id="jvm-get-started.md-run-the-application" data-toc="jvm-get-started#jvm-get-started.md-run-the-application"  >Run the application</h2><p id="jvm-get-started.md-20cba047" >Now the application is ready to run. The easiest way to do this is to click the green <b id="jvm-get-started.md-7e3314ec" class=""  >Run</b> icon in the gutter and select <b id="jvm-get-started.md-94dbf7cf" class=""  >Run \'MainKt\'</b>.</p><p id="jvm-get-started.md-fc2acacf" ><figure title="Running a console app"><img alt="Running a console app" title="Running a console app" id="jvm-get-started.md-a5e8a103" src="images/jvm-run-app.png"  class="" width="400" height="202" /></figure></p><p id="jvm-get-started.md-6986504d" >You can see the result in the <b id="jvm-get-started.md-d80c9dca" class=""  >Run</b> tool window.</p><p id="jvm-get-started.md-f7328cd4" ><figure title="Kotlin run output"><img alt="Kotlin run output" title="Kotlin run output" id="jvm-get-started.md-1e931cdd" src="images/jvm-output-1.png"  class="" width="600" height="217" /></figure></p><p id="jvm-get-started.md-aaf87767" >Enter your name and accept the greetings from your application!</p><p id="jvm-get-started.md-1fa05537" ><figure title="Kotlin run output"><img alt="Kotlin run output" title="Kotlin run output" id="jvm-get-started.md-ee8d2649" src="images/jvm-output-2.png"  class="" width="600" height="212" /></figure></p><p id="jvm-get-started.md-ef80a529" >Congratulations! You have just run your first Kotlin application.</p></section><section class="chapter"  ><h2 id="jvm-get-started.md-what-s-next" data-toc="jvm-get-started#jvm-get-started.md-what-s-next"  >What\'s next?</h2><p id="jvm-get-started.md-dec57460" >Once you’ve created this application, you can start to dive deeper into Kotlin syntax:</p><ul class="list _ul" id="jvm-get-started.md-de6d9b43"   ><li class="list__item" id="jvm-get-started.md-d611f555" ><p>Add sample code from <a href="https://play.kotlinlang.org/byExample/overview" id="jvm-get-started.md-717b7fe8"   data-external="true" rel="noopener noreferrer" >Kotlin examples</a></p></li><li class="list__item" id="jvm-get-started.md-836460fe" ><p>Install the <a href="https://plugins.jetbrains.com/plugin/10081-edutools" id="jvm-get-started.md-71145b19"   data-external="true" rel="noopener noreferrer" >EduTools plugin</a> for IDEA and complete exercises from the <a href="https://www.jetbrains.com/help/education/learner-start-guide.html?section=Kotlin%20Koans" id="jvm-get-started.md-97424321"   data-external="true" rel="noopener noreferrer" >Kotlin Koans course</a></p></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="jvm-test-using-junit.md"  >Test code using JUnit in JVM – tutorial</h1><p id="jvm-test-using-junit.md-42f65791" >This tutorial will show you how to write a simple unit test and run it with the Gradle build tool.</p><p id="jvm-test-using-junit.md-848b770f" >The example in the tutorial has the <a href="https://kotlinlang.org/api/latest/kotlin.test/index.html" id="jvm-test-using-junit.md-8f6c5154"   data-external="true" rel="noopener noreferrer" >kotlin.test</a> library under the hood and runs the test using JUnit.</p><p id="jvm-test-using-junit.md-4614ec67" >To get started, first download and install the latest version of <a href="http://www.jetbrains.com/idea/download/index.html" id="jvm-test-using-junit.md-3b12120"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA</a>.</p><section class="chapter"  ><h2 id="jvm-test-using-junit.md-add-dependencies" data-toc="jvm-test-using-junit#jvm-test-using-junit.md-add-dependencies"  >Add dependencies</h2><ol class="list _decimal" id="jvm-test-using-junit.md-f73cee5c"   ><li class="list__item" id="jvm-test-using-junit.md-96cfd281" ><p id="jvm-test-using-junit.md-7581323" >Open a Kotlin project in IntelliJ IDEA. If you don\'t already have a project, <a href="#jvm-get-started.md-create-an-application" id="jvm-test-using-junit.md-edb7ba26"   >create one</a>.</p><aside data-type="note" class="prompt" data-title="" id="jvm-test-using-junit.md-f49fd9b4" ><p id="jvm-test-using-junit.md-1e92ee03" >Specify <b id="jvm-test-using-junit.md-89c065b7" class=""  >JUnit 5</b> as your test framework when creating your project.</p></aside></li><li class="list__item" id="jvm-test-using-junit.md-2c545815" ><p id="jvm-test-using-junit.md-87c5a9bd" >Open the <code class="code " id="jvm-test-using-junit.md-c1364364"  >build.gradle(.kts)</code> file and add the following dependencies to the Gradle configuration. They will allow you to work with <code class="code " id="jvm-test-using-junit.md-cd438fa8"  >kotlin.test</code> and <code class="code " id="jvm-test-using-junit.md-131bd28"  >JUnit</code>:</p><div class="tabs" id="jvm-test-using-junit.md-e71af021" ><div class="tabs__content" data-gtm="tab" id="jvm-test-using-junit.md-4c3cc638"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="jvm-test-using-junit.md-4c3cc638"   data-title="Groovy"      >dependencies {\n    // Other dependencies.\n    testImplementation \'org.jetbrains.kotlin:kotlin-test-junit5\'\n    testImplementation \'org.junit.jupiter:junit-jupiter-api:5.6.0\'\n    testRuntimeOnly \'org.junit.jupiter:junit-jupiter-engine:5.6.0\'\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="jvm-test-using-junit.md-a0ba0298"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="jvm-test-using-junit.md-a0ba0298"   data-title="Kotlin"      >dependencies {\n    // Other dependencies.\n    testImplementation(kotlin(&quot;test-junit5&quot;))\n    testImplementation(&quot;org.junit.jupiter:junit-jupiter-api:5.6.0&quot;)\n    testRuntimeOnly(&quot;org.junit.jupiter:junit-jupiter-engine:5.6.0&quot;)\n}\n</div></div></div></li><li class="list__item" id="jvm-test-using-junit.md-2f971fbe" ><p id="jvm-test-using-junit.md-43961a86" >Add the <code class="code " id="jvm-test-using-junit.md-7f84fc3b"  >test</code> task to the <code class="code " id="jvm-test-using-junit.md-700ac7f4"  >build.gradle(.kts)</code> file:</p><div class="tabs" id="jvm-test-using-junit.md-29682667" ><div class="tabs__content" data-gtm="tab" id="jvm-test-using-junit.md-378fb4a1"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="jvm-test-using-junit.md-378fb4a1"   data-title="Groovy"      >test {\n    useJUnitPlatform()\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="jvm-test-using-junit.md-d4915171"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="jvm-test-using-junit.md-d4915171"   data-title="Kotlin"      >tasks.test {\n    useJUnitPlatform()\n}\n</div></div></div><aside data-type="note" class="prompt" data-title="" id="jvm-test-using-junit.md-e2bfac42" ><p id="jvm-test-using-junit.md-7c98d2a6" >If you created the project using the <b id="jvm-test-using-junit.md-eab975a3" class=""  >Project Wizard</b>, the task will be added automatically.</p></aside></li></ol></section><section class="chapter"  ><h2 id="jvm-test-using-junit.md-add-the-code-to-test-it" data-toc="jvm-test-using-junit#jvm-test-using-junit.md-add-the-code-to-test-it"  >Add the code to test it</h2><ol class="list _decimal" id="jvm-test-using-junit.md-f261d00a"   ><li class="list__item" id="jvm-test-using-junit.md-c3bf0a8e" ><p id="jvm-test-using-junit.md-de604bbc" >Open the <code class="code " id="jvm-test-using-junit.md-91aed3f8"  >main.kt</code> file in <code class="code " id="jvm-test-using-junit.md-5f7430f4"  >src/main/kotlin</code>.</p><p id="jvm-test-using-junit.md-e60f7997" >The <code class="code " id="jvm-test-using-junit.md-6d98d422"  >src</code> directory contains Kotlin source files and resources. The <code class="code " id="jvm-test-using-junit.md-70d68714"  >main.kt</code> file contains sample code that will print <code class="code " id="jvm-test-using-junit.md-84c79e1e"  >Hello, World!</code>.</p></li><li class="list__item" id="jvm-test-using-junit.md-263d58c8" ><p id="jvm-test-using-junit.md-582a8fcc" >Create the <code class="code " id="jvm-test-using-junit.md-1eb22575"  >Sample</code> class with the <code class="code " id="jvm-test-using-junit.md-24fa2c0b"  >sum()</code> function that adds two integers together:</p><div class="code-block" data-lang="kotlin" id="jvm-test-using-junit.md-8b126fb8"         >class Sample() {\n\n    fun sum(a: Int, b: Int): Int {\n        return a + b\n    }\n}\n</div></li></ol></section><section class="chapter"  ><h2 id="jvm-test-using-junit.md-create-a-test" data-toc="jvm-test-using-junit#jvm-test-using-junit.md-create-a-test"  >Create a test</h2><ol class="list _decimal" id="jvm-test-using-junit.md-54680992"   ><li class="list__item" id="jvm-test-using-junit.md-606bd338" ><p id="jvm-test-using-junit.md-b0f18dfe" >In IntelliJ IDEA, select <b id="jvm-test-using-junit.md-2f6de915" class=""  >Code</b> | <b id="jvm-test-using-junit.md-8df65373" class=""  >Generate</b> | <b id="jvm-test-using-junit.md-8d8fe6ba" class=""  >Test...</b> for the <code class="code " id="jvm-test-using-junit.md-582bfc7f"  >Sample</code> class.</p><p id="jvm-test-using-junit.md-bd562130" ><figure title="Create a test"><img alt="Create a test" title="Create a test" id="jvm-test-using-junit.md-7adc7fad" src="images/create-test.png"  class="" width="1288" height="448" /></figure></p></li><li class="list__item" id="jvm-test-using-junit.md-460c287a" ><p id="jvm-test-using-junit.md-718e1c8f" >Specify the name of the test class. For example, <code class="code " id="jvm-test-using-junit.md-99bdec87"  >SampleTest</code>.</p><p id="jvm-test-using-junit.md-4de5066c" >IntelliJ IDEA creates the <code class="code " id="jvm-test-using-junit.md-7388aef5"  >SampleTest.kt</code> file in the <code class="code " id="jvm-test-using-junit.md-7f84cc12"  >test</code> directory. This directory contains Kotlin test source files and resources.</p><aside data-type="note" class="prompt" data-title="" id="jvm-test-using-junit.md-5f1d9219" ><p id="jvm-test-using-junit.md-ac2e4c49" >You can also manually create a <code class="code " id="jvm-test-using-junit.md-6da2d529"  >*.kt</code> file for tests in <code class="code " id="jvm-test-using-junit.md-5d51eb59"  >src/test/kotlin</code>.</p></aside></li><li class="list__item" id="jvm-test-using-junit.md-300200d9" ><p id="jvm-test-using-junit.md-87f04958" >Add the test code for the <code class="code " id="jvm-test-using-junit.md-c4121dca"  >sum()</code> function in <code class="code " id="jvm-test-using-junit.md-f101fe0"  >SampleTest.kt</code>:</p><ul class="list _ul" id="jvm-test-using-junit.md-7bc46efb"   ><li class="list__item" id="jvm-test-using-junit.md-aacb3a2e" ><p>Define the test <code class="code " id="jvm-test-using-junit.md-fce15aa6"  >testSum()</code> function using the <a href="https://kotlinlang.org/api/latest/kotlin.test/kotlin.test/-test/index.html" id="jvm-test-using-junit.md-853d85f8"   data-external="true" rel="noopener noreferrer" >@Test annotation</a>.</p></li><li class="list__item" id="jvm-test-using-junit.md-b1187629" ><p>Check that the <code class="code " id="jvm-test-using-junit.md-ce075882"  >sum()</code> function returns the expected value by using the <a href="https://kotlinlang.org/api/latest/kotlin.test/kotlin.test/-test/assert-equals.html" id="jvm-test-using-junit.md-81e89de9"   data-external="true" rel="noopener noreferrer" >assertEquals()</a> function.</p></li></ul><div class="code-block" data-lang="kotlin" id="jvm-test-using-junit.md-ab1a82b6"         >import kotlin.test.Test\nimport kotlin.test.assertEquals\n\ninternal class SampleTest {\n\n    private val testSample: Sample = Sample()\n\n    @Test\n    fun testSum() {\n        val expected = 42\n        assertEquals(expected, testSample.sum(40, 2))\n    }\n}\n</div></li></ol></section><section class="chapter"  ><h2 id="jvm-test-using-junit.md-run-a-test" data-toc="jvm-test-using-junit#jvm-test-using-junit.md-run-a-test"  >Run a test</h2><ol class="list _decimal" id="jvm-test-using-junit.md-49766ec6"   ><li class="list__item" id="jvm-test-using-junit.md-f7cae944" ><p id="jvm-test-using-junit.md-b1fcb05e" >Run the test using the gutter icon.</p><p id="jvm-test-using-junit.md-307fd06c" ><figure title="Run the test"><img alt="Run the test" title="Run the test" id="jvm-test-using-junit.md-bf9b5a4b" src="images/run-test.png"  class="" width="1228" height="318" /></figure></p><aside data-type="note" class="prompt" data-title="" id="jvm-test-using-junit.md-7f2c8048" ><p id="jvm-test-using-junit.md-ba1e7b9c" >You can also run all project tests via the command-line interface using the <code class="code " id="jvm-test-using-junit.md-ccf412e"  >./gradlew check</code> command.</p></aside></li><li class="list__item" id="jvm-test-using-junit.md-21fa758a" ><p id="jvm-test-using-junit.md-c41dbf14" >Check the result in the <b id="jvm-test-using-junit.md-3fc691fe" class=""  >Run</b> tool window:</p><p id="jvm-test-using-junit.md-9f770251" ><figure title="Check the test result. The test passed successfully"><img alt="Check the test result. The test passed successfully" title="Check the test result. The test passed successfully" id="jvm-test-using-junit.md-ab60a450" src="images/check-the-result.png"  class="" width="1544" height="612" /></figure></p><p id="jvm-test-using-junit.md-7dfd5f6e" >The test function was executed successfully.</p></li><li class="list__item" id="jvm-test-using-junit.md-7a4f4ee1" ><p id="jvm-test-using-junit.md-3d4020a2" >Make sure that the test works correctly by changing the <code class="code " id="jvm-test-using-junit.md-745d2644"  >expected</code> variable value to 43:</p><div class="code-block" data-lang="kotlin" id="jvm-test-using-junit.md-46c1fab7"         >@Test\nfun testSum() {\n    val expected = 43\n    assertEquals(expected, classForTesting.sum(40, 2))\n}\n</div></li><li class="list__item" id="jvm-test-using-junit.md-e3c15235" ><p id="jvm-test-using-junit.md-1f760b73" >Run the test again and check the result:</p><p id="jvm-test-using-junit.md-dce096a8" ><figure title="Check the test result. The test has been failed"><img alt="Check the test result. The test has been failed" title="Check the test result. The test has been failed" id="jvm-test-using-junit.md-f253e001" src="images/check-the-result-2.png"  class="" width="1544" height="612" /></figure></p><p id="jvm-test-using-junit.md-65a777de" >The test execution failed.</p></li></ol></section><section class="chapter"  ><h2 id="jvm-test-using-junit.md-what-s-next" data-toc="jvm-test-using-junit#jvm-test-using-junit.md-what-s-next"  >What\'s next</h2><p id="jvm-test-using-junit.md-38460d4b" >Once you\'ve finished your first test, you can:</p><ul class="list _ul" id="jvm-test-using-junit.md-736c145"   ><li class="list__item" id="jvm-test-using-junit.md-d7fa66b2" ><p>Try to write another test using other <a href="https://kotlinlang.org/api/latest/kotlin.test/kotlin.test/" id="jvm-test-using-junit.md-41140eb9"   data-external="true" rel="noopener noreferrer" >kotlin.test</a> functions. For example, you could use the <a href="https://kotlinlang.org/api/latest/kotlin.test/kotlin.test/assert-not-equals.html" id="jvm-test-using-junit.md-8a4ddfa0"   data-external="true" rel="noopener noreferrer" ><code class="code " id="jvm-test-using-junit.md-60b82a09"  >assertNotEquals()</code></a> function.</p></li><li class="list__item" id="jvm-test-using-junit.md-3061fe5" ><p><a href="#jvm-spring-boot-restful.md" id="jvm-test-using-junit.md-8cfb1728"   >Create your first application</a> with Kotlin and Spring Boot.</p></li><li class="list__item" id="jvm-test-using-junit.md-611f6f71" ><p>Watch <a href="https://www.youtube.com/playlist?list=PL6gx4Cwl9DGDPsneZWaOFg0H2wsundyGr" id="jvm-test-using-junit.md-b87a76ec"   data-external="true" rel="noopener noreferrer" >these video tutorials</a> on YouTube, which demonstrate how to use Spring Boot with Kotlin and JUnit 5.</p></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="jvm-spring-boot-restful.md"  >Create a RESTful web service with Spring Boot – tutorial</h1><p id="jvm-spring-boot-restful.md-9adebb64" >This tutorial walks you through the process of creating a simple application with Spring Boot.</p><p id="jvm-spring-boot-restful.md-76c4fea9" >You will create an application with an HTTP endpoint that returns a data objects list in JSON format.</p><p id="jvm-spring-boot-restful.md-5a71e4cf" >This tutorial consists of two parts:</p><ul class="list _ul" id="jvm-spring-boot-restful.md-b8621074"   ><li class="list__item" id="jvm-spring-boot-restful.md-a12be755" ><p>Create a RESTful Web Service with Spring Boot</p></li><li class="list__item" id="jvm-spring-boot-restful.md-611f3a14" ><a href="#jvm-spring-boot-restful-db.md" id="jvm-spring-boot-restful.md-20e5607f"   >Add a database to a Spring Boot RESTful web service</a></li></ul><p id="jvm-spring-boot-restful.md-e7a2c2a3" >To get started, first download and install the latest version of <a href="http://www.jetbrains.com/idea/download/index.html" id="jvm-spring-boot-restful.md-54e35a37"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA</a>.</p><p id="jvm-spring-boot-restful.md-fc623de9" >You can also watch a video of this tutorial:</p><p id="jvm-spring-boot-restful.md-d01c199a" ><figure  title="" class="video"><img src="https://img.youtube.com/vi/gf-kjD2ZmZk/0.jpg" width="560" height="315"/></figure><p ><a href="https://youtube.com/v/gf-kjD2ZmZk">Watch video online.</a></p></p><section class="chapter"  ><h2 id="jvm-spring-boot-restful.md-bootstrap-the-project" data-toc="jvm-spring-boot-restful#jvm-spring-boot-restful.md-bootstrap-the-project"  >Bootstrap the project</h2><p id="jvm-spring-boot-restful.md-3499e722" >Use Spring Initializr to create a new project:</p><aside data-type="note" class="prompt" data-title="" id="jvm-spring-boot-restful.md-91f91821" ><p id="jvm-spring-boot-restful.md-f0deee65" >You can also create a new project using <a href="https://www.jetbrains.com/help/idea/spring-boot.html" id="jvm-spring-boot-restful.md-987fb45"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA with the Spring Boot plugin</a></p></aside><ol class="list _decimal" id="jvm-spring-boot-restful.md-245fa780"   ><li class="list__item" id="jvm-spring-boot-restful.md-ea053baa" ><p id="jvm-spring-boot-restful.md-f76d1721" >Open <a href="https://start.spring.io/#!type=gradle-project&language=kotlin&platformVersion=2.4.3.RELEASE&packaging=jar&jvmVersion=11&groupId=com.example&artifactId=demo&name=demo&description=Demo%20project%20for%20Spring%20Boot&packageName=demo&dependencies=web,data-jdbc,h2" id="jvm-spring-boot-restful.md-8e19c41d"   data-external="true" rel="noopener noreferrer" >Spring Initializr</a>. This link opens the page with the project settings for this tutorial already filled in. This project uses <b id="jvm-spring-boot-restful.md-cde1416a" class=""  >Gradle</b>, <b id="jvm-spring-boot-restful.md-e39478b0" class=""  >Kotlin</b>, <b id="jvm-spring-boot-restful.md-14cad4a1" class=""  >Spring Web</b>, <b id="jvm-spring-boot-restful.md-7dcb1ddf" class=""  >Spring Data JDBC</b>, and <b id="jvm-spring-boot-restful.md-374ed6a7" class=""  >H2 Database</b>:</p><p id="jvm-spring-boot-restful.md-f31498ec" ><figure title="Create a new project with Spring Initializr"><img alt="Create a new project with Spring Initializr" title="Create a new project with Spring Initializr" id="jvm-spring-boot-restful.md-12f760db" src="images/spring-boot-create-project-with-initializr.png"  class="" width="800" height="500" /></figure></p></li><li class="list__item" id="jvm-spring-boot-restful.md-a796bbf5" ><p id="jvm-spring-boot-restful.md-818afc47" >Click <b id="jvm-spring-boot-restful.md-ac555ad2" class=""  >GENERATE</b> at the bottom of the screen. Spring Initializr will generate the project with the specified settings. The download starts automatically.</p></li><li class="list__item" id="jvm-spring-boot-restful.md-ba1a1924" ><p id="jvm-spring-boot-restful.md-5fb74651" >Unpack the <b id="jvm-spring-boot-restful.md-b5851eda" class=""  >.zip</b> file and open it in IntelliJ IDEA.</p><p id="jvm-spring-boot-restful.md-25b03b80" >The project has the following structure: <figure title="The Spring Boot project structure"><img alt="The Spring Boot project structure" title="The Spring Boot project structure" id="jvm-spring-boot-restful.md-29746f3e" src="images/spring-boot-project-structure.png"  class="" width="500" height="478" /></figure></p><p id="jvm-spring-boot-restful.md-9e4e9094" >There are packages and classes under the <code class="code " id="jvm-spring-boot-restful.md-6f1088b1"  >main/kotlin</code> folder that belong to the application. The entry point to the application is the <code class="code " id="jvm-spring-boot-restful.md-43e3202c"  >main()</code> method of the <code class="code " id="jvm-spring-boot-restful.md-467dfd10"  >DemoApplication.kt</code> file.</p></li></ol></section><section class="chapter"  ><h2 id="jvm-spring-boot-restful.md-explore-the-project-build-file" data-toc="jvm-spring-boot-restful#jvm-spring-boot-restful.md-explore-the-project-build-file"  >Explore the project build file</h2><p id="jvm-spring-boot-restful.md-18f5bd4b" >Open the <code class="code " id="jvm-spring-boot-restful.md-39d7c0b3"  >build.gradle.kts</code> file.</p><p id="jvm-spring-boot-restful.md-1eca0ec0" >This is the Gradle Kotlin build script, which contains a list of the dependencies required for the application.</p><p id="jvm-spring-boot-restful.md-d53d3834" >The Gradle file is standard for Spring Boot, but it also contains necessary Kotlin dependencies, including the <a href="#all-open-plugin.md-spring-support" id="jvm-spring-boot-restful.md-de08af32"   >kotlin-spring</a> Gradle plugin.</p></section><section class="chapter"  ><h2 id="jvm-spring-boot-restful.md-explore-the-spring-boot-application" data-toc="jvm-spring-boot-restful#jvm-spring-boot-restful.md-explore-the-spring-boot-application"  >Explore the Spring Boot application</h2><p id="jvm-spring-boot-restful.md-8baec45c" >Open the <code class="code " id="jvm-spring-boot-restful.md-ccccec54"  >DemoApplication.kt</code> file:</p><div class="code-block" data-lang="kotlin" id="jvm-spring-boot-restful.md-7fc635b9"         >package demo\n\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.runApplication\n\n@SpringBootApplication\nclass DemoApplication\n\nfun main(args: Array&lt;String&gt;) {\n    runApplication&lt;DemoApplication&gt;(*args)\n}\n</div><p id="jvm-spring-boot-restful.md-796746d9" >Note that the Kotlin application file differs from a Java application file:</p><ul class="list _ul" id="jvm-spring-boot-restful.md-7e40617f"   ><li class="list__item" id="jvm-spring-boot-restful.md-472d1fa8" ><p>While Spring Boot looks for a public static <code class="code " id="jvm-spring-boot-restful.md-53b2e0dd"  >main()</code> method, the Kotlin application uses a <a href="#functions.md-function-scope" id="jvm-spring-boot-restful.md-39496a9c"   >top-level function</a> defined outside <code class="code " id="jvm-spring-boot-restful.md-b622f439"  >DemoApplication</code> class.</p></li><li class="list__item" id="jvm-spring-boot-restful.md-df57ebc5" ><p>The <code class="code " id="jvm-spring-boot-restful.md-eacc04fd"  >DemoApplication</code> class is not declared as <code class="code " id="jvm-spring-boot-restful.md-eb01b9d"  >open</code>, since the <a href="#all-open-plugin.md-spring-support" id="jvm-spring-boot-restful.md-6f2e17eb"   >kotlin-spring</a> plugin does that automatically.</p></li></ul></section><section class="chapter"  ><h2 id="jvm-spring-boot-restful.md-create-a-data-class-and-a-controller" data-toc="jvm-spring-boot-restful#jvm-spring-boot-restful.md-create-a-data-class-and-a-controller"  >Create a data class and a controller</h2><p id="jvm-spring-boot-restful.md-d46811f9" >To create an endpoint, add a <a href="#data-classes.md" id="jvm-spring-boot-restful.md-2a714893"   >data class</a> and a controller to your project:</p><ol class="list _decimal" id="jvm-spring-boot-restful.md-34f3588e"   ><li class="list__item" id="jvm-spring-boot-restful.md-9f12196" ><p id="jvm-spring-boot-restful.md-8110c059" >In the <code class="code " id="jvm-spring-boot-restful.md-f6fa3397"  >DemoApplication.kt</code> file, create a <code class="code " id="jvm-spring-boot-restful.md-4db17077"  >Message</code> data class with two properties: <code class="code " id="jvm-spring-boot-restful.md-89dad6e4"  >id</code> and <code class="code " id="jvm-spring-boot-restful.md-49a6cac6"  >text</code>:</p><div class="code-block" data-lang="kotlin" id="jvm-spring-boot-restful.md-4760d950"         >data class Message(val id: String?, val text: String)\n</div></li><li class="list__item" id="jvm-spring-boot-restful.md-e73d2188" ><p id="jvm-spring-boot-restful.md-dd544a41" >In the same file, create a <code class="code " id="jvm-spring-boot-restful.md-928c8836"  >MessageResource</code> class which will serve the requests and return a JSON document containing a collection of <code class="code " id="jvm-spring-boot-restful.md-755f6313"  >Message</code> objects:</p><div class="code-block" data-lang="kotlin" id="jvm-spring-boot-restful.md-3aaae13d"         >@RestController\nclass MessageResource {\n    @GetMapping\n    fun index(): List&lt;Message&gt; = listOf(\n        Message(&quot;1&quot;, &quot;Hello!&quot;),\n        Message(&quot;2&quot;, &quot;Bonjour!&quot;),\n        Message(&quot;3&quot;, &quot;Privet!&quot;),\n    )\n}\n</div></li></ol><p id="jvm-spring-boot-restful.md-245962f8" >Full code of the <code class="code " id="jvm-spring-boot-restful.md-42bcb1ca"  >DemoApplication.kt</code>:</p><div class="code-block" data-lang="kotlin" id="jvm-spring-boot-restful.md-2315fbb9"         >package demo\n\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.runApplication\nimport org.springframework.data.annotation.Id\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.RestController\n\n@SpringBootApplication\nclass DemoApplication\n\nfun main(args: Array&lt;String&gt;) {\n    runApplication&lt;DemoApplication&gt;(*args)\n}\n\n@RestController\nclass MessageResource {\n    @GetMapping\n    fun index(): List&lt;Message&gt; = listOf(\n        Message(&quot;1&quot;, &quot;Hello!&quot;),\n        Message(&quot;2&quot;, &quot;Bonjour!&quot;),\n        Message(&quot;3&quot;, &quot;Privet!&quot;),\n    )\n}\n\ndata class Message(val id: String?, val text: String)\n</div></section><section class="chapter"  ><h2 id="jvm-spring-boot-restful.md-run-the-application" data-toc="jvm-spring-boot-restful#jvm-spring-boot-restful.md-run-the-application"  >Run the application</h2><p id="jvm-spring-boot-restful.md-b2e6287d" >The application is now ready to run:</p><ol class="list _decimal" id="jvm-spring-boot-restful.md-72236262"   ><li class="list__item" id="jvm-spring-boot-restful.md-7c7c7a88" ><p id="jvm-spring-boot-restful.md-6188ee35" >Click the green <b id="jvm-spring-boot-restful.md-bc2da105" class=""  >Run</b> icon in the gutter beside the <code class="code " id="jvm-spring-boot-restful.md-e8ec4766"  >main()</code> method or use the <b id="jvm-spring-boot-restful.md-5ca37642" class=""  >Alt+Enter</b> shortcut to invoke the launch menu in IntelliJ IDEA:</p><p id="jvm-spring-boot-restful.md-e3c26d48" ><figure title="Run the application"><img alt="Run the application" title="Run the application" id="jvm-spring-boot-restful.md-80936686" src="images/spring-boot-run-the-application.png"  class="" width="800" height="500" /></figure></p><aside data-type="note" class="prompt" data-title="" id="jvm-spring-boot-restful.md-cf2ce094" ><p id="jvm-spring-boot-restful.md-341aa7fe" >You can also run the <code class="code " id="jvm-spring-boot-restful.md-78c8460"  >./gradlew bootRun</code> command in the terminal.</p></aside></li><li class="list__item" id="jvm-spring-boot-restful.md-eaabf3cb" ><p id="jvm-spring-boot-restful.md-13ea0f35" >Once the application starts, open the following URL: <a href="http://localhost:8080" id="jvm-spring-boot-restful.md-e43644c5"   data-external="true" rel="noopener noreferrer" >http://localhost:8080</a>.</p><p id="jvm-spring-boot-restful.md-c289844a" >You will see a page with a collection of messages in JSON format:</p><p id="jvm-spring-boot-restful.md-22ea8fa5" ><figure title="Application output"><img alt="Application output" title="Application output" id="jvm-spring-boot-restful.md-dc21006e" src="images/spring-boot-output.png"  class="" width="2386" height="1098" /></figure></p></li></ol></section><section class="chapter"  ><h2 id="jvm-spring-boot-restful.md-proceed-to-the-next-tutorial" data-toc="jvm-spring-boot-restful#jvm-spring-boot-restful.md-proceed-to-the-next-tutorial"  >Proceed to the next tutorial</h2><p id="jvm-spring-boot-restful.md-257c827" >In the next part of this tutorial you will add a database for storing objects, as well as two endpoints for writing and retrieving those objects: <a href="#jvm-spring-boot-restful-db.md" id="jvm-spring-boot-restful.md-1c949683"   >Add a database to a Spring Boot RESTful web service</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="jvm-spring-boot-restful-db.md"  >Add a database to a Spring Boot RESTful web service – tutorial</h1><p id="jvm-spring-boot-restful-db.md-1e5a356a" >This tutorial walks you through the process of adding a database to a RESTful web service with Spring Boot and shows you how to work with it.</p><p id="jvm-spring-boot-restful-db.md-aced79cd" >On completing this tutorial you\'ll have an application with a database for storing objects, as well as endpoints for writing and retrieving them.</p><aside data-type="note" class="prompt" data-title="" id="jvm-spring-boot-restful-db.md-ab923349" ><p id="jvm-spring-boot-restful-db.md-695d98fc" >This tutorial is a continuation of the previous tutorial – <a href="#jvm-spring-boot-restful.md" id="jvm-spring-boot-restful-db.md-b23843bf"   >Create a RESTful web service with Spring Boot</a>. Complete the previous tutorial before proceeding with this one.</p></aside><p id="jvm-spring-boot-restful-db.md-dbe4599d" >You can also watch a video of this tutorial (starting from 4:17):</p><p id="jvm-spring-boot-restful-db.md-148a8730" ><figure  title="" class="video"><img src="https://img.youtube.com/vi/gf-kjD2ZmZk/0.jpg" width="560" height="315"/></figure><p ><a href="https://youtube.com/v/gf-kjD2ZmZk">Watch video online.</a></p></p><section class="chapter"  ><h2 id="jvm-spring-boot-restful-db.md-add-database-support" data-toc="jvm-spring-boot-restful-db#jvm-spring-boot-restful-db.md-add-database-support"  >Add database support</h2><p id="jvm-spring-boot-restful-db.md-23661dd9" >In this section, you will create two endpoints: one for saving messages to the database, and one for retrieving them:</p><ol class="list _decimal" id="jvm-spring-boot-restful-db.md-855c4cd4"   ><li class="list__item" id="jvm-spring-boot-restful-db.md-a42d84fa" ><p id="jvm-spring-boot-restful-db.md-6b26eaee" >Add the <code class="code " id="jvm-spring-boot-restful-db.md-a7458167"  >@Table</code> annotation to the <code class="code " id="jvm-spring-boot-restful-db.md-c544a05e"  >Message</code> class to declare mapping to a database table. Add the <code class="code " id="jvm-spring-boot-restful-db.md-5cde3569"  >@Id</code> annotation before the <code class="code " id="jvm-spring-boot-restful-db.md-ec3e0e10"  >id</code> field. These annotations also require additional imports:</p><div class="code-block" data-lang="kotlin" id="jvm-spring-boot-restful-db.md-50a32d0a"         >import org.springframework.data.annotation.Id\nimport org.springframework.data.relational.core.mapping.Table\n\n@Table(&quot;MESSAGES&quot;)\ndata class Message(@Id val id: String?, val text: String)\n</div></li><li class="list__item" id="jvm-spring-boot-restful-db.md-5bb49e33" ><p id="jvm-spring-boot-restful-db.md-e9234ac1" >Use the <a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/CrudRepository.html" id="jvm-spring-boot-restful-db.md-68cde272"   data-external="true" rel="noopener noreferrer" >Spring Data Repository API</a> to access the database:</p><div class="code-block" data-lang="kotlin" id="jvm-spring-boot-restful-db.md-6c75746f"         >import org.springframework.data.jdbc.repository.query.Query\nimport org.springframework.data.repository.CrudRepository\n\ninterface MessageRepository : CrudRepository&lt;Message, String&gt;{\n\n    @Query(&quot;select * from messages&quot;)\n    fun findMessages(): List&lt;Message&gt;\n}\n</div><p id="jvm-spring-boot-restful-db.md-f3da0041" >When you call the <code class="code " id="jvm-spring-boot-restful-db.md-c461ae1c"  >findMessages()</code> method on an instance of <code class="code " id="jvm-spring-boot-restful-db.md-347d0aed"  >MessageRepository</code>, it will execute the corresponding database query:</p><div class="code-block" data-lang="sql" id="jvm-spring-boot-restful-db.md-35846f9a"         >select * from messages\n</div><p id="jvm-spring-boot-restful-db.md-30b59577" >This query retrieves a list of all <code class="code " id="jvm-spring-boot-restful-db.md-cdc0ea64"  >Message</code> objects in the database table.</p></li><li class="list__item" id="jvm-spring-boot-restful-db.md-fdad2987" ><p id="jvm-spring-boot-restful-db.md-86d6b77b" >Create the <code class="code " id="jvm-spring-boot-restful-db.md-532a85fd"  >MessageService</code> class:</p><div class="code-block" data-lang="kotlin" id="jvm-spring-boot-restful-db.md-1bec9116"         >import org.springframework.stereotype.Service\n\n@Service\nclass MessageService(val db: MessageRepository) {\n\n    fun findMessages(): List&lt;Message&gt; = db.findMessages()\n\n    fun post(message: Message){\n        db.save(message)\n    }\n}\n</div><p id="jvm-spring-boot-restful-db.md-940adee3" >This class contains two methods:</p><ul class="list _ul" id="jvm-spring-boot-restful-db.md-dd736250"   ><li class="list__item" id="jvm-spring-boot-restful-db.md-a688a1d0" ><p><code class="code " id="jvm-spring-boot-restful-db.md-3f00a748"  >post()</code> for writing a new <code class="code " id="jvm-spring-boot-restful-db.md-5bd9ccfa"  >Message</code> object to the database</p></li><li class="list__item" id="jvm-spring-boot-restful-db.md-501ce248" ><p><code class="code " id="jvm-spring-boot-restful-db.md-56548490"  >findMessages()</code> for getting all the messages from the database</p></li></ul></li><li class="list__item" id="jvm-spring-boot-restful-db.md-f6615eec" ><p id="jvm-spring-boot-restful-db.md-4df1910b" >Update the <code class="code " id="jvm-spring-boot-restful-db.md-db88aa69"  >MessageResource</code> class:</p><div class="code-block" data-lang="kotlin" id="jvm-spring-boot-restful-db.md-9a4da298"         >import org.springframework.web.bind.annotation.RequestBody\nimport org.springframework.web.bind.annotation.PostMapping\n\n\n@RestController\nclass MessageResource(val service: MessageService) {\n    @GetMapping\n    fun index(): List&lt;Message&gt; = service.findMessages()\n\n    @PostMapping\n    fun post(@RequestBody message: Message) {\n        service.post(message)\n    }\n}\n</div><p id="jvm-spring-boot-restful-db.md-c57ea056" >Now it uses <code class="code " id="jvm-spring-boot-restful-db.md-3a3be8d0"  >MessageService</code> to work with the database.</p></li></ol></section><section class="chapter"  ><h2 id="jvm-spring-boot-restful-db.md-configure-the-database" data-toc="jvm-spring-boot-restful-db#jvm-spring-boot-restful-db.md-configure-the-database"  >Configure the database</h2><p id="jvm-spring-boot-restful-db.md-9aeb4d32" >Configure the database in the application:</p><ol class="list _decimal" id="jvm-spring-boot-restful-db.md-b4b08e6e"   ><li class="list__item" id="jvm-spring-boot-restful-db.md-a5bfd4ad" ><p id="jvm-spring-boot-restful-db.md-6b71bdb2" >Create a new folder called <code class="code " id="jvm-spring-boot-restful-db.md-6d1f934f"  >sql</code> in the <code class="code " id="jvm-spring-boot-restful-db.md-638827fb"  >src/main/resources</code> with the <code class="code " id="jvm-spring-boot-restful-db.md-92d376f2"  >scheme.sql</code> file inside. It will store the database scheme:</p><p id="jvm-spring-boot-restful-db.md-6fc07669" ><figure title="Create a new folder"><img alt="Create a new folder" title="Create a new folder" id="jvm-spring-boot-restful-db.md-bee4fd60" src="images/spring-boot-sql-scheme.png"  class="" width="300" height="173" /></figure></p></li><li class="list__item" id="jvm-spring-boot-restful-db.md-ae228c83" ><p id="jvm-spring-boot-restful-db.md-4b2d2cbd" >Update the <code class="code " id="jvm-spring-boot-restful-db.md-371f3c7b"  >src/main/resources/sql/schema.sql</code> file with the following code:</p><div class="code-block" data-lang="sql" id="jvm-spring-boot-restful-db.md-3e5dabd"         >CREATE TABLE IF NOT EXISTS messages (\n  id                     VARCHAR(60)  DEFAULT RANDOM_UUID() PRIMARY KEY,\n  text                   VARCHAR      NOT NULL\n);\n</div><p id="jvm-spring-boot-restful-db.md-d2f4c43d" >It creates the <code class="code " id="jvm-spring-boot-restful-db.md-c6b94461"  >messages</code> table with two fields: <code class="code " id="jvm-spring-boot-restful-db.md-a45f40e0"  >id</code> and <code class="code " id="jvm-spring-boot-restful-db.md-2f730f17"  >text</code>. The table structure matches the structure of the <code class="code " id="jvm-spring-boot-restful-db.md-8b0bf525"  >Message</code> class.</p></li><li class="list__item" id="jvm-spring-boot-restful-db.md-2e9a2940" ><p id="jvm-spring-boot-restful-db.md-2966a728" >Open the <code class="code " id="jvm-spring-boot-restful-db.md-e72f44ae"  >application.properties</code> file located in the <code class="code " id="jvm-spring-boot-restful-db.md-d87a328d"  >src/main/resources</code> folder and add the following application properties:</p><div class="code-block" data-lang="none" id="jvm-spring-boot-restful-db.md-81e22b41"      data-disable-link-processing="true"   >spring.datasource.driver-class-name=org.h2.Driver\nspring.datasource.url=jdbc:h2:file:./data/testdb\nspring.datasource.username=sa\nspring.datasource.password=password\nspring.datasource.schema=classpath:sql/schema.sql\nspring.datasource.initialization-mode=always\n</div><p id="jvm-spring-boot-restful-db.md-201e0700" >These settings enable the database for the Spring Boot application. See the full list of common application properties in the <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html" id="jvm-spring-boot-restful-db.md-816bab70"   data-external="true" rel="noopener noreferrer" >Spring documentation</a>.</p></li></ol></section><section class="chapter"  ><h2 id="jvm-spring-boot-restful-db.md-run-the-application" data-toc="jvm-spring-boot-restful-db#jvm-spring-boot-restful-db.md-run-the-application"  >Run the application</h2><p id="jvm-spring-boot-restful-db.md-ed50ed6e" >You should use an HTTP client to work with previously created endpoints. In IntelliJ IDEA, you can use the embedded <a href="https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html" id="jvm-spring-boot-restful-db.md-a94c1135"   data-external="true" rel="noopener noreferrer" >HTTP client</a>:</p><ol class="list _decimal" id="jvm-spring-boot-restful-db.md-d776653b"   ><li class="list__item" id="jvm-spring-boot-restful-db.md-76b8c3b8" ><p id="jvm-spring-boot-restful-db.md-83935cd2" ><a href="#jvm-spring-boot-restful-db.md-run-the-application" id="jvm-spring-boot-restful-db.md-6b3ddf40"   >Run the application</a>. Once the application is up and running, you can execute POST requests to store messages in the database.</p></li><li class="list__item" id="jvm-spring-boot-restful-db.md-cbeba7ee" ><p id="jvm-spring-boot-restful-db.md-4a453340" >Create the <code class="code " id="jvm-spring-boot-restful-db.md-981bb501"  >requests.http</code> file and add the following HTTP requests:</p><div class="code-block" data-lang="http" id="jvm-spring-boot-restful-db.md-d964ebe6"         >### Post \'Hello!&quot;\nPOST http://localhost:8080/\nContent-Type: application/json\n\n{\n  &quot;text&quot;: &quot;Hello!&quot;\n}\n\n### Post &quot;Bonjour!&quot;\n\nPOST http://localhost:8080/\nContent-Type: application/json\n\n{\n  &quot;text&quot;: &quot;Bonjour!&quot;\n}\n\n### Post &quot;Privet!&quot;\n\nPOST http://localhost:8080/\nContent-Type: application/json\n\n{\n  &quot;text&quot;: &quot;Privet!&quot;\n}\n\n### Get all the messages\nGET http://localhost:8080/\n</div></li><li class="list__item" id="jvm-spring-boot-restful-db.md-112ef127" ><p id="jvm-spring-boot-restful-db.md-3f207680" >Execute all POST requests. Use the green <b id="jvm-spring-boot-restful-db.md-4c44a8cd" class=""  >Run</b> icon in the gutter next to the request declaration. These requests write the text messages to the database.</p><p id="jvm-spring-boot-restful-db.md-7ca78750" ><figure title="Run HTTP POST requests"><img alt="Run HTTP POST requests" title="Run HTTP POST requests" id="jvm-spring-boot-restful-db.md-a478e2df" src="images/spring-boot-run-http-request.png"  class="" width="2880" height="1800" /></figure></p></li><li class="list__item" id="jvm-spring-boot-restful-db.md-83c1c48" ><p id="jvm-spring-boot-restful-db.md-9fcdc773" >Execute the GET request and see the result in the <b id="jvm-spring-boot-restful-db.md-9de61c46" class=""  >Run</b> tool window:</p><p id="jvm-spring-boot-restful-db.md-d7b2528" ><figure title="Run HTTP GET request"><img alt="Run HTTP GET request" title="Run HTTP GET request" id="jvm-spring-boot-restful-db.md-e9d491a7" src="images/spring-boot-output-2.png"  class="" width="2882" height="1802" /></figure></p></li></ol><section class="chapter"  ><h3 id="jvm-spring-boot-restful-db.md-alternative-way-to-execute-requests" data-toc="jvm-spring-boot-restful-db#jvm-spring-boot-restful-db.md-alternative-way-to-execute-requests"  >Alternative way to execute requests</h3><p id="jvm-spring-boot-restful-db.md-23ec56cd" >You can also use any other HTTP client or cURL command-line tool. For example, you can run the following commands in the terminal to get the same result:</p><div class="code-block" data-lang="bash" id="jvm-spring-boot-restful-db.md-dff34600"         >curl -X POST --location &quot;http://localhost:8080&quot; -H &quot;Content-Type: application/json&quot; -d &quot;{ \\&quot;text\\&quot;: \\&quot;Hello!\\&quot; }&quot;\n\ncurl -X POST --location &quot;http://localhost:8080&quot; -H &quot;Content-Type: application/json&quot; -d &quot;{ \\&quot;text\\&quot;: \\&quot;Bonjour!\\&quot; }&quot;\n\ncurl -X POST --location &quot;http://localhost:8080&quot; -H &quot;Content-Type: application/json&quot; -d &quot;{ \\&quot;text\\&quot;: \\&quot;Privet!\\&quot; }&quot;\n\ncurl -X GET --location &quot;http://localhost:8080&quot;\n</div></section></section><section class="chapter"  ><h2 id="jvm-spring-boot-restful-db.md-what-s-next" data-toc="jvm-spring-boot-restful-db#jvm-spring-boot-restful-db.md-what-s-next"  >What\'s next?</h2><p id="jvm-spring-boot-restful-db.md-470909ca" >If you encountered any difficulties while following this tutorial, you can download and explore the <a href="https://github.com/kotlin-hands-on/spring-time-in-kotlin-episode1" id="jvm-spring-boot-restful-db.md-6d0c474f"   data-external="true" rel="noopener noreferrer" >completed project</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="jvm-records.md"  >Records</h1><aside data-type="warning" class="prompt" data-title="" id="jvm-records.md-c44e0213"><p id="jvm-records.md-e1c19982" >JVM records are <a href="#components-stability.md" id="jvm-records.md-514b08d4"   >Experimental</a>. They may be dropped or changed at any time. Opt-in is required (see the details <a href="#jvm-records.md-enabling-jvm-records" id="jvm-records.md-f8e3dc35"   >below</a> ), and you should use them only for evaluation purposes. We would appreciate your feedback on them in <a href="https://youtrack.jetbrains.com/issue/KT-42430" id="jvm-records.md-ce9094bd"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="jvm-records.md-d5181221" ><em id="jvm-records.md-a1a5c0bf" class=""  >Records</em> are <a href="https://openjdk.java.net/jeps/395" id="jvm-records.md-396fb83"   data-external="true" rel="noopener noreferrer" >classes</a> in Java for storing immutable data. Records carry a fixed set of values – the <em id="jvm-records.md-60c6e3f3" class=""  >records components</em>. They have a concise syntax in Java and save you from having to write boilerplate code:</p><div class="code-block" data-lang="java" id="jvm-records.md-fadb06a3"         >// Java\npublic record Person (String name, int age) {}\n</div><p id="jvm-records.md-f2732246" >The compiler automatically generates a final class inherited from <a href="https://download.java.net/java/early_access/jdk16/docs/api/java.base/java/lang/Record.html" id="jvm-records.md-8508afc7"   data-external="true" rel="noopener noreferrer" ><code class="code " id="jvm-records.md-42feeb07"  >java.lang.Record</code></a> with the following members:</p><ul class="list _ul" id="jvm-records.md-7751bffb"   ><li class="list__item" id="jvm-records.md-5a8bdba9" ><p>a private final field for each record component</p></li><li class="list__item" id="jvm-records.md-9f6eb7f0" ><p>a public constructor with parameters for all fields</p></li><li class="list__item" id="jvm-records.md-cdb25b21" ><p>a set of methods to implement structural equality: <code class="code " id="jvm-records.md-7f0d9947"  >equals()</code>, <code class="code " id="jvm-records.md-37a2c53c"  >hashCode()</code>, <code class="code " id="jvm-records.md-eb3d41fa"  >toString()</code></p></li><li class="list__item" id="jvm-records.md-bb44a3b4" ><p>a public method for reading each record component</p></li></ul><p id="jvm-records.md-ae9c5d16" >Records are very similar to Kotlin <a href="#data-classes.md" id="jvm-records.md-69d97bc2"   >data classes</a>.</p><section class="chapter"  ><h2 id="jvm-records.md-using-java-records-from-kotlin-code" data-toc="jvm-records#jvm-records.md-using-java-records-from-kotlin-code"  >Using Java records from Kotlin code</h2><p id="jvm-records.md-c99af360" >You can use record classes with components that are declared in Java the same way you would use classes with properties in Kotlin. To access the record component, just use its name like you do for <a href="#properties.md" id="jvm-records.md-e4457098"   >Kotlin properties</a>:</p><div class="code-block" data-lang="kotlin" id="jvm-records.md-f667eddd"         >val firstName = Person.name\n</div></section><section class="chapter"  ><h2 id="jvm-records.md-declare-records-in-kotlin" data-toc="jvm-records#jvm-records.md-declare-records-in-kotlin"  >Declare records in Kotlin</h2><p id="jvm-records.md-8050f63b" >Kotlin supports record declaration only for data classes, and the data class must meet the <a href="#jvm-records.md-requirements" id="jvm-records.md-a455ed8c"   >requirements</a>.</p><p id="jvm-records.md-11ef3da5" >To declare a record class in Kotlin, use the <code class="code " id="jvm-records.md-c3e3636a"  >@JvmRecord</code> annotation:</p><aside data-type="note" class="prompt" data-title="" id="jvm-records.md-761f2b75" ><p id="jvm-records.md-e57931d9" >Applying <code class="code " id="jvm-records.md-53202210"  >@JvmRecord</code> to an existing class is not a binary compatible change. It alters the naming convention of the class property accessors.</p></aside><div class="code-block" data-lang="kotlin" id="jvm-records.md-cc1863de"         >@JvmRecord\ndata class Person(val name: String, val age: Int)\n</div><p id="jvm-records.md-1bf3f18c" >This JVM-specific annotation enables generating:</p><ul class="list _ul" id="jvm-records.md-2de47b00"   ><li class="list__item" id="jvm-records.md-9f961fd" ><p>the record components corresponding to the class properties in the class file</p></li><li class="list__item" id="jvm-records.md-d2ca1d72" ><p>the property accessor methods named according to the Java record naming convention</p></li></ul><p id="jvm-records.md-7ef39c46" >The data class provides <code class="code " id="jvm-records.md-cc6640f9"  >equals()</code>, <code class="code " id="jvm-records.md-bffd9e50"  >hashCode()</code>, and <code class="code " id="jvm-records.md-c5e922d2"  >toString()</code> method implementations.</p><section class="chapter"  ><h3 id="jvm-records.md-requirements" data-toc="jvm-records#jvm-records.md-requirements"  >Requirements</h3><p id="jvm-records.md-66646f96" >To declare a data class with the <code class="code " id="jvm-records.md-d2654709"  >@JvmRecord</code> annotation, it must meet the following requirements:</p><ul class="list _ul" id="jvm-records.md-9c15ea13"   ><li class="list__item" id="jvm-records.md-203202d7" ><p>The class must be in a module that targets JVM 16 bytecode (or 15 if the <code class="code " id="jvm-records.md-2f6d0e49"  >-Xjvm-enable-preview</code> compiler option is enabled).</p></li><li class="list__item" id="jvm-records.md-cbe82e9d" ><p>The class cannot explicitly inherit any other class (including <code class="code " id="jvm-records.md-29b70d2e"  >Any</code>) because all JVM records implicitly inherit <code class="code " id="jvm-records.md-cb96895f"  >java.lang.Record</code>. However, the class can implement interfaces.</p></li><li class="list__item" id="jvm-records.md-845d0f15" ><p>The class cannot declare any properties with backing fields – except those initialized from the corresponding primary constructor parameters.</p></li><li class="list__item" id="jvm-records.md-36ad3644" ><p>The class cannot declare any mutable properties with backing fields.</p></li><li class="list__item" id="jvm-records.md-2367c019" ><p>The class cannot be local.</p></li><li class="list__item" id="jvm-records.md-a4e76b77" ><p>The primary constructor of the class must be as visible as the class itself.</p></li></ul></section></section><section class="chapter"  ><h2 id="jvm-records.md-enabling-jvm-records" data-toc="jvm-records#jvm-records.md-enabling-jvm-records"  >Enabling JVM records</h2><p id="jvm-records.md-ff510c09" >To start using JVM records, add the compiler options <code class="code " id="jvm-records.md-2aec3bbe"  >-Xjvm-enable-preview</code> and <code class="code " id="jvm-records.md-2d44aed9"  >-language-version 1.5</code>.</p><p id="jvm-records.md-6bd07f95" >See <a href="#gradle.md-compiler-options" id="jvm-records.md-e248edad"   >compiler options in Gradle</a> for details.</p></section><section class="chapter"  ><h2 id="jvm-records.md-further-discussion" data-toc="jvm-records#jvm-records.md-further-discussion"  >Further discussion</h2><p id="jvm-records.md-eff78ca3" >See this <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/jvm-records.md" id="jvm-records.md-3dcde45f"   data-external="true" rel="noopener noreferrer" >language proposal for JVM records</a> for further technical details and discussion.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="java-interop.md"  >Calling Java from Kotlin</h1><p id="java-interop.md-8e026c1" >Kotlin is designed with Java Interoperability in mind. Existing Java code can be called from Kotlin in a natural way, and Kotlin code can be used from Java rather smoothly as well. In this section, we describe some details about calling Java code from Kotlin.</p><p id="java-interop.md-e101e822" >Pretty much all Java code can be used without any issues:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-4862b92e"         >import java.util.*\n\nfun demo(source: List&lt;Int&gt;) {\n    val list = ArrayList&lt;Int&gt;()\n    // \'for\'-loops work for Java collections:\n    for (item in source) {\n        list.add(item)\n    }\n    // Operator conventions work as well:\n    for (i in 0..source.size - 1) {\n        list[i] = source[i] // get and set are called\n    }\n}\n</div><section class="chapter"  ><h2 id="java-interop.md-getters-and-setters" data-toc="java-interop#java-interop.md-getters-and-setters"  >Getters and setters</h2><p id="java-interop.md-8ccc4ee6" >Methods that follow the Java conventions for getters and setters (no-argument methods with names starting with <code class="code " id="java-interop.md-5ea0f3a8"  >get</code> and single-argument methods with names starting with <code class="code " id="java-interop.md-f703cb19"  >set</code>) are represented as properties in Kotlin. <code class="code " id="java-interop.md-83670d2f"  >Boolean</code> accessor methods (where the name of the getter starts with <code class="code " id="java-interop.md-4afea135"  >is</code> and the name of the setter starts with <code class="code " id="java-interop.md-de323f75"  >set</code>) are represented as properties which have the same name as the getter method.</p><div class="code-block" data-lang="kotlin" id="java-interop.md-d906e334"         >import java.util.Calendar\n\nfun calendarDemo() {\n    val calendar = Calendar.getInstance()\n    if (calendar.firstDayOfWeek == Calendar.SUNDAY) {  // call getFirstDayOfWeek()\n        calendar.firstDayOfWeek = Calendar.MONDAY // call setFirstDayOfWeek()\n    }\n    if (!calendar.isLenient) { // call isLenient()\n        calendar.isLenient = true // call setLenient()\n    }\n}\n</div><p id="java-interop.md-3db95421" >Note that, if the Java class only has a setter, it isn\'t visible as a property in Kotlin because Kotlin doesn\'t support set-only properties.</p></section><section class="chapter"  ><h2 id="java-interop.md-methods-returning-void" data-toc="java-interop#java-interop.md-methods-returning-void"  >Methods returning void</h2><p id="java-interop.md-294910ed" >If a Java method returns <code class="code " id="java-interop.md-2b9c5476"  >void</code>, it will return <code class="code " id="java-interop.md-e738988c"  >Unit</code> when called from Kotlin. If by any chance someone uses that return value, it will be assigned at the call site by the Kotlin compiler since the value itself is known in advance (being <code class="code " id="java-interop.md-a0333f3"  >Unit</code> ).</p></section><section class="chapter"  ><h2 id="java-interop.md-escaping-for-java-identifiers-that-are-keywords-in-kotlin" data-toc="java-interop#java-interop.md-escaping-for-java-identifiers-that-are-keywords-in-kotlin"  >Escaping for Java identifiers that are keywords in Kotlin</h2><p id="java-interop.md-ad17a811" >Some of the Kotlin keywords are valid identifiers in Java: <code class="code " id="java-interop.md-d084faf2"  >in</code>, <code class="code " id="java-interop.md-fcba592a"  >object</code>, <code class="code " id="java-interop.md-869722e6"  >is</code>, and other. If a Java library uses a Kotlin keyword for a method, you can still call the method escaping it with the backtick (`) character:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-71da31dc"         >foo.`is`(bar)\n</div></section><section class="chapter"  ><h2 id="java-interop.md-null-safety-and-platform-types" data-toc="java-interop#java-interop.md-null-safety-and-platform-types"  >Null-safety and platform types</h2><p id="java-interop.md-65be0d35" >Any reference in Java may be <code class="code " id="java-interop.md-f333419b"  >null</code>, which makes Kotlin\'s requirements of strict null-safety impractical for objects coming from Java. Types of Java declarations are treated in Kotlin in a specific manner and called <em id="java-interop.md-1b373933" class=""  >platform types</em>. Null-checks are relaxed for such types, so that safety guarantees for them are the same as in Java (see more <a href="#java-interop.md-mapped-types" id="java-interop.md-d486278e"   >below</a> ).</p><p id="java-interop.md-ea56e7db" >Consider the following examples:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-361290fe"         >val list = ArrayList&lt;String&gt;() // non-null (constructor result)\nlist.add(&quot;Item&quot;)\nval size = list.size // non-null (primitive int)\nval item = list[0] // platform type inferred (ordinary Java object)\n</div><p id="java-interop.md-f50ac0bb" >When you call methods on variables of platform types, Kotlin does not issue nullability errors at compile time, but the call may fail at runtime, because of a null-pointer exception or an assertion that Kotlin generates to prevent nulls from propagating:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-7014250c"         >item.substring(1) // allowed, may throw an exception if item == null\n</div><p id="java-interop.md-1ef396b" >Platform types are <em id="java-interop.md-4154d34f" class=""  >non-denotable</em>, meaning that you can\'t write them down explicitly in the language. When a platform value is assigned to a Kotlin variable, you can rely on the type inference (the variable will have an inferred platform type then, as <code class="code " id="java-interop.md-2055dfb0"  >item</code> has in the example above), or you can choose the type you expect (both nullable and non-null types are allowed):</p><div class="code-block" data-lang="kotlin" id="java-interop.md-18283fd"         >val nullable: String? = item // allowed, always works\nval notNull: String = item // allowed, may fail at runtime\n</div><p id="java-interop.md-4ef9aae" >If you choose a non-null type, the compiler will emit an assertion upon assignment. This prevents Kotlin\'s non-null variables from holding nulls. Assertions are also emitted when you pass platform values to Kotlin functions expecting non-null values and in other cases. Overall, the compiler does its best to prevent nulls from propagating far through the program although sometimes this is impossible to eliminate entirely, because of generics.</p><section class="chapter"  ><h3 id="java-interop.md-notation-for-platform-types" data-toc="java-interop#java-interop.md-notation-for-platform-types"  >Notation for platform types</h3><p id="java-interop.md-ce3b46fc" >As mentioned above, platform types can\'t be mentioned explicitly in the program, so there\'s no syntax for them in the language. Nevertheless, the compiler and IDE need to display them sometimes (for example, in error messages or parameter info), so there is a mnemonic notation for them:</p><ul class="list _ul" id="java-interop.md-56fa2aab"   ><li class="list__item" id="java-interop.md-c46847d3" ><p><code class="code " id="java-interop.md-faf6d4e8"  >T!</code> means &quot;<code class="code " id="java-interop.md-b435ef62"  >T</code> or <code class="code " id="java-interop.md-ae17c11"  >T?</code> &quot;,</p></li><li class="list__item" id="java-interop.md-7cc524bb" ><p><code class="code " id="java-interop.md-3e02b11e"  >(Mutable)Collection&lt;T&gt;!</code> means &quot;Java collection of <code class="code " id="java-interop.md-ec69e6b1"  >T</code> may be mutable or not, may be nullable or not&quot;,</p></li><li class="list__item" id="java-interop.md-a74d3ee7" ><p><code class="code " id="java-interop.md-5097d410"  >Array&lt;(out) T&gt;!</code> means &quot;Java array of <code class="code " id="java-interop.md-87f7f08d"  >T</code> (or a subtype of <code class="code " id="java-interop.md-db347f90"  >T</code> ), nullable or not&quot;</p></li></ul></section><section class="chapter"  ><h3 id="java-interop.md-nullability-annotations" data-toc="java-interop#java-interop.md-nullability-annotations"  >Nullability annotations</h3><p id="java-interop.md-b89c1843" >Java types that have nullability annotations are represented not as platform types, but as actual nullable or non-null Kotlin types. The compiler supports several flavors of nullability annotations, including:</p><ul class="list _ul" id="java-interop.md-5eff395e"   ><li class="list__item" id="java-interop.md-852a9e3b" ><p><a href="https://www.jetbrains.com/idea/help/nullable-and-notnull-annotations.html" id="java-interop.md-47be0e63"   data-external="true" rel="noopener noreferrer" >JetBrains</a> (<code class="code " id="java-interop.md-161058bb"  >@Nullable</code> and <code class="code " id="java-interop.md-a6c75db9"  >@NotNull</code> from the <code class="code " id="java-interop.md-af7b29b2"  >org.jetbrains.annotations</code> package)</p></li><li class="list__item" id="java-interop.md-5ac29ef0" ><p>Android (<code class="code " id="java-interop.md-5ba6ab3c"  >com.android.annotations</code> and <code class="code " id="java-interop.md-cb545804"  >android.support.annotations</code>)</p></li><li class="list__item" id="java-interop.md-49b863f5" ><p>JSR-305 (<code class="code " id="java-interop.md-797de044"  >javax.annotation</code>, more details below)</p></li><li class="list__item" id="java-interop.md-44a85d19" ><p>FindBugs (<code class="code " id="java-interop.md-dc1cf570"  >edu.umd.cs.findbugs.annotations</code>)</p></li><li class="list__item" id="java-interop.md-53efd7b2" ><p>Eclipse (<code class="code " id="java-interop.md-e30f6ad7"  >org.eclipse.jdt.annotation</code>)</p></li><li class="list__item" id="java-interop.md-a7919367" ><p>Lombok (<code class="code " id="java-interop.md-6b08e643"  >lombok.NonNull</code>)</p></li></ul><p id="java-interop.md-ea6ef0b3" >You can find the full list in the <a href="https://github.com/JetBrains/kotlin/blob/master/core/compiler.common.jvm/src/org/jetbrains/kotlin/load/java/JvmAnnotationNames.kt" id="java-interop.md-245ac4ee"   data-external="true" rel="noopener noreferrer" >Kotlin compiler source code</a>.</p></section><section class="chapter"  ><h3 id="java-interop.md-annotating-type-parameters" data-toc="java-interop#java-interop.md-annotating-type-parameters"  >Annotating type parameters</h3><p id="java-interop.md-d4950187" >You can annotate type arguments of generic types to provide nullability information for them as well. For example, consider these annotations on a Java declaration:</p><div class="code-block" data-lang="java" id="java-interop.md-c8fe72da"         >@NotNull\nSet&lt;@NotNull String&gt; toSet(@NotNull Collection&lt;@NotNull String&gt; elements) { ... }\n</div><p id="java-interop.md-b66aa69a" >It leads to the following signature seen in Kotlin:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-28b8c940"         >fun toSet(elements: (Mutable)Collection&lt;String&gt;) : (Mutable)Set&lt;String&gt; { ... }\n</div><p id="java-interop.md-ea8bf503" >Note the <code class="code " id="java-interop.md-9a27fcf0"  >@NotNull</code> annotations on <code class="code " id="java-interop.md-a46a9ecd"  >String</code> type arguments. Without them, you get platform types in the type arguments:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-b0653dc"         >fun toSet(elements: (Mutable)Collection&lt;String!&gt;) : (Mutable)Set&lt;String!&gt; { ... }\n</div><p id="java-interop.md-23baca9e" >Annotating type arguments works with Java 8 target or higher and requires the nullability annotations to support the <code class="code " id="java-interop.md-4d39d120"  >TYPE_USE</code> target (<code class="code " id="java-interop.md-4eff9ae"  >org.jetbrains.annotations</code> supports this in version 15 and above).</p><aside data-type="note" class="prompt" data-title="" id="java-interop.md-1cf65949" ><p id="java-interop.md-41bf20a5" >Due to the current technical limitations, the IDE does not correctly recognize these annotations on type arguments in compiled Java libraries that are used as dependencies.</p></aside></section><section class="chapter"  ><h3 id="java-interop.md-jsr-305-support" data-toc="java-interop#java-interop.md-jsr-305-support"  >JSR-305 support</h3><p id="java-interop.md-4e850ca8" >The <a href="https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/Nonnull.html" id="java-interop.md-e9f3f0f"   data-external="true" rel="noopener noreferrer" ><code class="code " id="java-interop.md-904bcbee"  >@Nonnull</code></a> annotation defined in <a href="https://jcp.org/en/jsr/detail?id=305" id="java-interop.md-cf7e5a8b"   data-external="true" rel="noopener noreferrer" >JSR-305</a> is supported for denoting nullability of Java types.</p><p id="java-interop.md-92c9b6f" >If the <code class="code " id="java-interop.md-a1b81de5"  >@Nonnull(when = ...)</code> value is <code class="code " id="java-interop.md-1901f3b4"  >When.ALWAYS</code>, the annotated type is treated as non-null; <code class="code " id="java-interop.md-6e4049b4"  >When.MAYBE</code> and <code class="code " id="java-interop.md-2a9d9249"  >When.NEVER</code> denote a nullable type; and <code class="code " id="java-interop.md-521cf33b"  >When.UNKNOWN</code> forces the type to be <a href="#java-interop.md-null-safety-and-platform-types" id="java-interop.md-f6b01be9"   >platform one</a>.</p><p id="java-interop.md-698b0f90" >A library can be compiled against the JSR-305 annotations, but there\'s no need to make the annotations artifact (e.g. <code class="code " id="java-interop.md-e6bc6978"  >jsr305.jar</code>) a compile dependency for the library consumers. The Kotlin compiler can read the JSR-305 annotations from a library without the annotations present on the classpath.</p><p id="java-interop.md-7ad74c68" ><a href="https://github.com/Kotlin/KEEP/blob/41091f1cc7045142181d8c89645059f4a15cc91a/proposals/jsr-305-custom-nullability-qualifiers.md" id="java-interop.md-70dfbb67"   data-external="true" rel="noopener noreferrer" >Custom nullability qualifiers (KEEP-79)</a> are also supported (see below).</p><section class="chapter"  ><h4 id="java-interop.md-type-qualifier-nicknames" data-toc="java-interop#java-interop.md-type-qualifier-nicknames"  >Type qualifier nicknames</h4><p id="java-interop.md-49128cec" >If an annotation type is annotated with both <a href="https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/meta/TypeQualifierNickname.html" id="java-interop.md-b24cdb75"   data-external="true" rel="noopener noreferrer" ><code class="code " id="java-interop.md-4325d884"  >@TypeQualifierNickname</code></a> and JSR-305 <code class="code " id="java-interop.md-b3da7af5"  >@Nonnull</code> (or its another nickname, such as <code class="code " id="java-interop.md-8a5ef284"  >@CheckForNull</code> ), then the annotation type is itself used for retrieving precise nullability and has the same meaning as that nullability annotation:</p><div class="code-block" data-lang="java" id="java-interop.md-95326bf1"         >@TypeQualifierNickname\n@Nonnull(when = When.ALWAYS)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyNonnull {\n}\n\n@TypeQualifierNickname\n@CheckForNull // a nickname to another type qualifier nickname\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyNullable {\n}\n\ninterface A {\n    @MyNullable String foo(@MyNonnull String x);\n    // in Kotlin (strict mode): `fun foo(x: String): String?`\n\n    String bar(List&lt;@MyNonnull String&gt; x);\n    // in Kotlin (strict mode): `fun bar(x: List&lt;String&gt;!): String!`\n}\n</div></section><section class="chapter"  ><h4 id="java-interop.md-type-qualifier-defaults" data-toc="java-interop#java-interop.md-type-qualifier-defaults"  >Type qualifier defaults</h4><p id="java-interop.md-8cf37d17" ><a href="https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/meta/TypeQualifierDefault.html" id="java-interop.md-83e7bdec"   data-external="true" rel="noopener noreferrer" ><code class="code " id="java-interop.md-69f346dc"  >@TypeQualifierDefault</code></a> allows introducing annotations that, when being applied, define the default nullability within the scope of the annotated element.</p><p id="java-interop.md-a383db16" >Such annotation type should itself be annotated with both <code class="code " id="java-interop.md-365e8213"  >@Nonnull</code> (or its nickname) and <code class="code " id="java-interop.md-b247911d"  >@TypeQualifierDefault(...)</code> with one or more <code class="code " id="java-interop.md-16f5f54f"  >ElementType</code> values:</p><ul class="list _ul" id="java-interop.md-ab4c0911"   ><li class="list__item" id="java-interop.md-96f20904" ><p><code class="code " id="java-interop.md-bb323f2"  >ElementType.METHOD</code> for return types of methods</p></li><li class="list__item" id="java-interop.md-91eaba68" ><p><code class="code " id="java-interop.md-c9770dd4"  >ElementType.PARAMETER</code> for value parameters</p></li><li class="list__item" id="java-interop.md-cca34385" ><p><code class="code " id="java-interop.md-6a092fd2"  >ElementType.FIELD</code> for fields</p></li><li class="list__item" id="java-interop.md-202e8170" ><p><code class="code " id="java-interop.md-7b128918"  >ElementType.TYPE_USE</code> for any type including type arguments, upper bounds of type parameters and wildcard types</p></li></ul><p id="java-interop.md-17c71cf5" >The default nullability is used when a type itself is not annotated by a nullability annotation, and the default is determined by the innermost enclosing element annotated with a type qualifier default annotation with the <code class="code " id="java-interop.md-1c4ef1ca"  >ElementType</code> matching the type usage.</p><div class="code-block" data-lang="java" id="java-interop.md-cfdb0747"         >@Nonnull\n@TypeQualifierDefault({ElementType.METHOD, ElementType.PARAMETER})\npublic @interface NonNullApi {\n}\n\n@Nonnull(when = When.MAYBE)\n@TypeQualifierDefault({ElementType.METHOD, ElementType.PARAMETER, ElementType.TYPE_USE})\npublic @interface NullableApi {\n}\n\n@NullableApi\ninterface A {\n    String foo(String x); // fun foo(x: String?): String?\n\n    @NotNullApi // overriding default from the interface\n    String bar(String x, @Nullable String y); // fun bar(x: String, y: String?): String\n\n    // The List&lt;String&gt; type argument is seen as nullable because of `@NullableApi`\n    // having the `TYPE_USE` element type:\n    String baz(List&lt;String&gt; x); // fun baz(List&lt;String?&gt;?): String?\n\n    // The type of `x` parameter remains platform because there\'s an explicit\n    // UNKNOWN-marked nullability annotation:\n    String qux(@Nonnull(when = When.UNKNOWN) String x); // fun baz(x: String!): String?\n}\n</div><aside data-type="note" class="prompt" data-title="" id="java-interop.md-3cf46ea1" ><p id="java-interop.md-f74c4b6b" >The types in this example only take place with the strict mode enabled; otherwise, the platform types remain. See the <a href="#java-interop.md-undermigration-annotation" id="java-interop.md-4f949a69"   ><code class="code " id="java-interop.md-3bc15677"  >@UnderMigration</code> annotation</a> and <a href="#java-interop.md-compiler-configuration" id="java-interop.md-c34bd2c5"   >Compiler configuration</a> sections.</p></aside><p id="java-interop.md-ead0fbe6" >Package-level default nullability is also supported:</p><div class="code-block" data-lang="java" id="java-interop.md-2d657ea"         >// FILE: test/package-info.java\n@NonNullApi // declaring all types in package \'test\' as non-nullable by default\npackage test;\n</div></section><section class="chapter"  ><h4 id="java-interop.md-undermigration-annotation" data-toc="java-interop#java-interop.md-undermigration-annotation"  >@UnderMigration annotation</h4><p id="java-interop.md-22877085" >The <code class="code " id="java-interop.md-e8d37b2e"  >@UnderMigration</code> annotation (provided in a separate artifact <code class="code " id="java-interop.md-25ea8dc8"  >kotlin-annotations-jvm</code>) can be used by library maintainers to define the migration status for the nullability type qualifiers.</p><p id="java-interop.md-35e15e98" >The status value in <code class="code " id="java-interop.md-97e6b88a"  >@UnderMigration(status = ...)</code> specifies how the compiler treats inappropriate usages of the annotated types in Kotlin (e.g. using a <code class="code " id="java-interop.md-529637de"  >@MyNullable</code> -annotated type value as non-null):</p><ul class="list _ul" id="java-interop.md-3a691185"   ><li class="list__item" id="java-interop.md-f1d6936e" ><p><code class="code " id="java-interop.md-90cdf303"  >MigrationStatus.STRICT</code> makes annotation work as any plain nullability annotation, i.e. report errors for the inappropriate usages and affect the types in the annotated declarations as they are seen in Kotlin</p></li><li class="list__item" id="java-interop.md-55b14873" ><p><code class="code " id="java-interop.md-e5c77e97"  >MigrationStatus.WARN</code>: the inappropriate usages are reported as compilation warnings instead of errors, but the types in the annotated declarations remain platform</p></li><li class="list__item" id="java-interop.md-e75abcfd" ><p><code class="code " id="java-interop.md-5402eee4"  >MigrationStatus.IGNORE</code> makes the compiler ignore the nullability annotation completely</p></li></ul><p id="java-interop.md-608151ac" >A library maintainer can add <code class="code " id="java-interop.md-b94d4b5"  >@UnderMigration</code> status to both type qualifier nicknames and type qualifier defaults:</p><div class="code-block" data-lang="java" id="java-interop.md-351e5e92"         >@Nonnull(when = When.ALWAYS)\n@TypeQualifierDefault({ElementType.METHOD, ElementType.PARAMETER})\n@UnderMigration(status = MigrationStatus.WARN)\npublic @interface NonNullApi {\n}\n\n// The types in the class are non-null, but only warnings are reported\n// because `@NonNullApi` is annotated `@UnderMigration(status = MigrationStatus.WARN)`\n@NonNullApi\npublic class Test {}\n</div><aside data-type="note" class="prompt" data-title="" id="java-interop.md-4e0d2bf2" ><p id="java-interop.md-346aa72b" >The migration status of a nullability annotation is not inherited by its type qualifier nicknames but is applied to its usages in default type qualifiers.</p></aside><p id="java-interop.md-3ab19c43" >If a default type qualifier uses a type qualifier nickname and they are both <code class="code " id="java-interop.md-6765a197"  >@UnderMigration</code>, the status from the default type qualifier is used.</p></section><section class="chapter"  ><h4 id="java-interop.md-compiler-configuration" data-toc="java-interop#java-interop.md-compiler-configuration"  >Compiler configuration</h4><p id="java-interop.md-d9f41252" >The JSR-305 checks can be configured by adding the <code class="code " id="java-interop.md-d935ed7c"  >-Xjsr305</code> compiler flag with the following options (and their combination):</p><ul class="list _ul" id="java-interop.md-59007a0b"   ><li class="list__item" id="java-interop.md-78daf139" ><p id="java-interop.md-85f08f5c" ><code class="code " id="java-interop.md-db065855"  >-Xjsr305={strict|warn|ignore}</code> to set up the behavior for non- <code class="code " id="java-interop.md-9fdfca2d"  >@UnderMigration</code> annotations. Custom nullability qualifiers, especially <code class="code " id="java-interop.md-47d2c4b"  >@TypeQualifierDefault</code>, are already spread among many well-known libraries, and users may need to migrate smoothly when updating to the Kotlin version containing JSR-305 support. Since Kotlin 1.1.60, this flag only affects non- <code class="code " id="java-interop.md-cdb2bb4"  >@UnderMigration</code> annotations.</p></li><li class="list__item" id="java-interop.md-187f091f" ><p id="java-interop.md-8ead7654" ><code class="code " id="java-interop.md-8a249169"  >-Xjsr305=under-migration:{strict|warn|ignore}</code> to override the behavior for the <code class="code " id="java-interop.md-d81cee9b"  >@UnderMigration</code> annotations. Users may have different view on the migration status for the libraries: they may want to have errors while the official migration status is <code class="code " id="java-interop.md-ec0151b4"  >WARN</code>, or vice versa, they may wish to postpone errors reporting for some until they complete their migration.</p></li><li class="list__item" id="java-interop.md-eef57b2a" ><p id="java-interop.md-a127c960" ><code class="code " id="java-interop.md-237aa282"  >-Xjsr305=@&lt;fq.name&gt;:{strict|warn|ignore}</code> to override the behavior for a single annotation, where <code class="code " id="java-interop.md-9945df6a"  >&lt;fq.name&gt;</code> is the fully qualified class name of the annotation. May appear several times for different annotations. This is useful for managing the migration state for a particular library.</p></li></ul><p id="java-interop.md-3afed10d" >The <code class="code " id="java-interop.md-d95cb3cd"  >strict</code>, <code class="code " id="java-interop.md-61774ee0"  >warn</code> and <code class="code " id="java-interop.md-ac2f1250"  >ignore</code> values have the same meaning as those of <code class="code " id="java-interop.md-6271ac02"  >MigrationStatus</code>, and only the <code class="code " id="java-interop.md-6046da03"  >strict</code> mode affects the types in the annotated declarations as they are seen in Kotlin.</p><aside data-type="note" class="prompt" data-title="" id="java-interop.md-ed83fb44" ><p id="java-interop.md-eed304b7" >Note: the built-in JSR-305 annotations <a href="https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/Nonnull.html" id="java-interop.md-f50d46e9"   data-external="true" rel="noopener noreferrer" ><code class="code " id="java-interop.md-f0ffac32"  >@Nonnull</code></a>, <a href="https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/Nullable.html" id="java-interop.md-6e000fad"   data-external="true" rel="noopener noreferrer" ><code class="code " id="java-interop.md-1fa006f4"  >@Nullable</code></a> and <a href="https://aalmiray.github.io/jsr-305/apidocs/javax/annotation/CheckForNull.html" id="java-interop.md-8812adf2"   data-external="true" rel="noopener noreferrer" ><code class="code " id="java-interop.md-2f82ecc4"  >@CheckForNull</code></a> are always enabled and affect the types of the annotated declarations in Kotlin, regardless of compiler configuration with the <code class="code " id="java-interop.md-146ee619"  >-Xjsr305</code> flag.</p></aside><p id="java-interop.md-f5669363" >For example, adding <code class="code " id="java-interop.md-cb6d3c4f"  >-Xjsr305=ignore -Xjsr305=under-migration:ignore -Xjsr305=@org.library.MyNullable:warn</code> to the compiler arguments makes the compiler generate warnings for inappropriate usages of types annotated by <code class="code " id="java-interop.md-5cbee0a"  >@org.library.MyNullable</code> and ignore all other JSR-305 annotations.</p><p id="java-interop.md-937c615b" >The default behavior is the same to <code class="code " id="java-interop.md-e23ffead"  >-Xjsr305=warn</code>. The <code class="code " id="java-interop.md-3ef8c12b"  >strict</code> value should be considered experimental (more checks may be added to it in the future).</p></section></section></section><section class="chapter"  ><h2 id="java-interop.md-mapped-types" data-toc="java-interop#java-interop.md-mapped-types"  >Mapped types</h2><p id="java-interop.md-efc76551" >Kotlin treats some Java types specifically. Such types are not loaded from Java &quot;as is&quot;, but are <em id="java-interop.md-80d68617" class=""  >mapped</em> to corresponding Kotlin types. The mapping only matters at compile time, the runtime representation remains unchanged. Java\'s primitive types are mapped to corresponding Kotlin types (keeping <a href="#java-interop.md-null-safety-and-platform-types" id="java-interop.md-a1b39d31"   >platform types</a> in mind):</p><div class="table-wrapper" ><table class=" wide" id="java-interop.md-bcc992a7"  ><thead><tr class="ijRowHead" id="java-interop.md-87f9684e" ><th id="java-interop.md-9d07fda"    ><b id="java-interop.md-bf60dcec" class=""  >Java type</b></th><th id="java-interop.md-2680b95"    ><b id="java-interop.md-d51eaf51" class=""  >Kotlin type</b></th></tr></thead><tbody ><tr class="" id="java-interop.md-cc917f51" ><td id="java-interop.md-e27978d5"    ><code class="code " id="java-interop.md-b5829353"  >byte</code></td><td id="java-interop.md-31396f5e"    ><code class="code " id="java-interop.md-c72ddcd7"  >kotlin.Byte</code></td></tr><tr class="" id="java-interop.md-5ab72d11" ><td id="java-interop.md-4fe983db"    ><code class="code " id="java-interop.md-259449f6"  >short</code></td><td id="java-interop.md-aa9615fc"    ><code class="code " id="java-interop.md-aaeceb8"  >kotlin.Short</code></td></tr><tr class="" id="java-interop.md-e2537258" ><td id="java-interop.md-3e12fffc"    ><code class="code " id="java-interop.md-79587dca"  >int</code></td><td id="java-interop.md-5214d3d9"    ><code class="code " id="java-interop.md-d8c25401"  >kotlin.Int</code></td></tr><tr class="" id="java-interop.md-e7b41f76" ><td id="java-interop.md-efa6513a"    ><code class="code " id="java-interop.md-5b3740e2"  >long</code></td><td id="java-interop.md-12e569ae"    ><code class="code " id="java-interop.md-50594995"  >kotlin.Long</code></td></tr><tr class="" id="java-interop.md-be311ee9" ><td id="java-interop.md-c85e8844"    ><code class="code " id="java-interop.md-2275d0ad"  >char</code></td><td id="java-interop.md-79bf54f2"    ><code class="code " id="java-interop.md-1b4a760b"  >kotlin.Char</code></td></tr><tr class="" id="java-interop.md-d66a4056" ><td id="java-interop.md-398accd6"    ><code class="code " id="java-interop.md-105fd01a"  >float</code></td><td id="java-interop.md-a5db109f"    ><code class="code " id="java-interop.md-fe8d37a"  >kotlin.Float</code></td></tr><tr class="" id="java-interop.md-4d201fdc" ><td id="java-interop.md-2a89a84c"    ><code class="code " id="java-interop.md-9d65ece4"  >double</code></td><td id="java-interop.md-fe378e7e"    ><code class="code " id="java-interop.md-48da01e5"  >kotlin.Double</code></td></tr><tr class="" id="java-interop.md-e496f880" ><td id="java-interop.md-c9f0a0b"    ><code class="code " id="java-interop.md-c72ab144"  >boolean</code></td><td id="java-interop.md-bdb78f5d"    ><code class="code " id="java-interop.md-290244ab"  >kotlin.Boolean</code></td></tr></tbody ></table ></div><p id="java-interop.md-429f75f7" >Some non-primitive built-in classes are also mapped:</p><div class="table-wrapper" ><table class=" wide" id="java-interop.md-3d7793be"  ><thead><tr class="ijRowHead" id="java-interop.md-a864bc2d" ><th id="java-interop.md-1b9365a4"    ><b id="java-interop.md-1f1dc007" class=""  >Java type</b></th><th id="java-interop.md-a67da541"    ><b id="java-interop.md-fe65cb7e" class=""  >Kotlin type</b></th></tr></thead><tbody ><tr class="" id="java-interop.md-2ff3c090" ><td id="java-interop.md-a5b23b54"    ><code class="code " id="java-interop.md-9752a6fb"  >java.lang.Object</code></td><td id="java-interop.md-bcadd2c3"    ><code class="code " id="java-interop.md-fb0f3178"  >kotlin.Any!</code></td></tr><tr class="" id="java-interop.md-1f1e9df8" ><td id="java-interop.md-2479e2da"    ><code class="code " id="java-interop.md-b0f49101"  >java.lang.Cloneable</code></td><td id="java-interop.md-980803f0"    ><code class="code " id="java-interop.md-f24a04b9"  >kotlin.Cloneable!</code></td></tr><tr class="" id="java-interop.md-b845926a" ><td id="java-interop.md-e3242276"    ><code class="code " id="java-interop.md-41a0d790"  >java.lang.Comparable</code></td><td id="java-interop.md-2a1ff089"    ><code class="code " id="java-interop.md-e06aa44b"  >kotlin.Comparable!</code></td></tr><tr class="" id="java-interop.md-5d5554cd" ><td id="java-interop.md-e443321b"    ><code class="code " id="java-interop.md-7ad8d7d7"  >java.lang.Enum</code></td><td id="java-interop.md-91e814ed"    ><code class="code " id="java-interop.md-bbc08a8c"  >kotlin.Enum!</code></td></tr><tr class="" id="java-interop.md-1ada8fe3" ><td id="java-interop.md-9029f921"    ><code class="code " id="java-interop.md-e3048f9a"  >java.lang.Annotation</code></td><td id="java-interop.md-2414e1d0"    ><code class="code " id="java-interop.md-91a5966b"  >kotlin.Annotation!</code></td></tr><tr class="" id="java-interop.md-fb0742cd" ><td id="java-interop.md-c969bb9"    ><code class="code " id="java-interop.md-5c8e923c"  >java.lang.CharSequence</code></td><td id="java-interop.md-28154d4e"    ><code class="code " id="java-interop.md-54fb6439"  >kotlin.CharSequence!</code></td></tr><tr class="" id="java-interop.md-ac4bda50" ><td id="java-interop.md-3340b62f"    ><code class="code " id="java-interop.md-c9ec815e"  >java.lang.String</code></td><td id="java-interop.md-82c75c10"    ><code class="code " id="java-interop.md-89e817ca"  >kotlin.String!</code></td></tr><tr class="" id="java-interop.md-7c95f334" ><td id="java-interop.md-464fb60f"    ><code class="code " id="java-interop.md-d93c17df"  >java.lang.Number</code></td><td id="java-interop.md-41bd35fa"    ><code class="code " id="java-interop.md-984eb5be"  >kotlin.Number!</code></td></tr><tr class="" id="java-interop.md-7b984916" ><td id="java-interop.md-8b55f8e7"    ><code class="code " id="java-interop.md-2b29325f"  >java.lang.Throwable</code></td><td id="java-interop.md-8d7af414"    ><code class="code " id="java-interop.md-f6c3ac4d"  >kotlin.Throwable!</code></td></tr></tbody ></table ></div><p id="java-interop.md-f79e776" >Java\'s boxed primitive types are mapped to nullable Kotlin types:</p><div class="table-wrapper" ><table class=" wide" id="java-interop.md-f6b2c8ac"  ><thead><tr class="ijRowHead" id="java-interop.md-90cb5234" ><th id="java-interop.md-1af7cca9"    ><b id="java-interop.md-8358ac8a" class=""  >Java type</b></th><th id="java-interop.md-bf81d9d9"    ><b id="java-interop.md-cdbc33ee" class=""  >Kotlin type</b></th></tr></thead><tbody ><tr class="" id="java-interop.md-8359917b" ><td id="java-interop.md-35df92f1"    ><code class="code " id="java-interop.md-f474668d"  >java.lang.Byte</code></td><td id="java-interop.md-f04317ee"    ><code class="code " id="java-interop.md-35fa4d72"  >kotlin.Byte?</code></td></tr><tr class="" id="java-interop.md-4455a150" ><td id="java-interop.md-3861d691"    ><code class="code " id="java-interop.md-4c8b4394"  >java.lang.Short</code></td><td id="java-interop.md-3cdd2c66"    ><code class="code " id="java-interop.md-15cf7fd3"  >kotlin.Short?</code></td></tr><tr class="" id="java-interop.md-c737183e" ><td id="java-interop.md-250af2d7"    ><code class="code " id="java-interop.md-ec4508ef"  >java.lang.Integer</code></td><td id="java-interop.md-f63af803"    ><code class="code " id="java-interop.md-82eb494c"  >kotlin.Int?</code></td></tr><tr class="" id="java-interop.md-bfcca09c" ><td id="java-interop.md-4f53b02b"    ><code class="code " id="java-interop.md-ddc0e737"  >java.lang.Long</code></td><td id="java-interop.md-f2f82a2f"    ><code class="code " id="java-interop.md-7c94004c"  >kotlin.Long?</code></td></tr><tr class="" id="java-interop.md-3a731dbd" ><td id="java-interop.md-9f2f644a"    ><code class="code " id="java-interop.md-3f5be3bd"  >java.lang.Character</code></td><td id="java-interop.md-b7607ca0"    ><code class="code " id="java-interop.md-be47f418"  >kotlin.Char?</code></td></tr><tr class="" id="java-interop.md-87f40c8d" ><td id="java-interop.md-b83f0313"    ><code class="code " id="java-interop.md-98984fbe"  >java.lang.Float</code></td><td id="java-interop.md-c1cb4fc"    ><code class="code " id="java-interop.md-8839abff"  >kotlin.Float?</code></td></tr><tr class="" id="java-interop.md-b7a3cfb9" ><td id="java-interop.md-55448889"    ><code class="code " id="java-interop.md-7da97e40"  >java.lang.Double</code></td><td id="java-interop.md-f33bb4bb"    ><code class="code " id="java-interop.md-39326004"  >kotlin.Double?</code></td></tr><tr class="" id="java-interop.md-af779134" ><td id="java-interop.md-c6144ed2"    ><code class="code " id="java-interop.md-b21539b1"  >java.lang.Boolean</code></td><td id="java-interop.md-a7870fbc"    ><code class="code " id="java-interop.md-767d0b18"  >kotlin.Boolean?</code></td></tr></tbody ></table ></div><p id="java-interop.md-1efdbdd5" >Note that a boxed primitive type used as a type parameter is mapped to a platform type: for example, <code class="code " id="java-interop.md-54217fc"  >List&lt;java.lang.Integer&gt;</code> becomes a <code class="code " id="java-interop.md-35786098"  >List&lt;Int!&gt;</code> in Kotlin.</p><p id="java-interop.md-7dd4a6b6" >Collection types may be read-only or mutable in Kotlin, so Java\'s collections are mapped as follows (all Kotlin types in this table reside in the package <code class="code " id="java-interop.md-3c9f3cfd"  >kotlin.collections</code> ):</p><div class="table-wrapper" ><table class=" wide" id="java-interop.md-81dde4b2"  ><thead><tr class="ijRowHead" id="java-interop.md-210b13c8" ><th id="java-interop.md-b9511ee8"    ><b id="java-interop.md-98167f23" class=""  >Java type</b></th><th id="java-interop.md-365a6f62"    ><b id="java-interop.md-7e9a4761" class=""  >Kotlin read-only type</b></th><th id="java-interop.md-50997265"    ><b id="java-interop.md-bb505772" class=""  >Kotlin mutable type</b></th><th id="java-interop.md-b6c44d5f"    ><b id="java-interop.md-998b1425" class=""  >Loaded platform type</b></th></tr></thead><tbody ><tr class="" id="java-interop.md-611878eb" ><td id="java-interop.md-e54927cb"    ><code class="code " id="java-interop.md-c43e03ee"  >Iterator&lt;T&gt;</code></td><td id="java-interop.md-bf14334b"    ><code class="code " id="java-interop.md-84f8dadc"  >Iterator&lt;T&gt;</code></td><td id="java-interop.md-b1ee8189"    ><code class="code " id="java-interop.md-b5e4046d"  >MutableIterator&lt;T&gt;</code></td><td id="java-interop.md-d55f5b10"    ><code class="code " id="java-interop.md-4f384d0c"  >(Mutable)Iterator&lt;T&gt;!</code></td></tr><tr class="" id="java-interop.md-5b321b53" ><td id="java-interop.md-c6f73cc6"    ><code class="code " id="java-interop.md-a0f67e11"  >Iterable&lt;T&gt;</code></td><td id="java-interop.md-3b80ff83"    ><code class="code " id="java-interop.md-46d21291"  >Iterable&lt;T&gt;</code></td><td id="java-interop.md-4edf2dd0"    ><code class="code " id="java-interop.md-d9f52bdc"  >MutableIterable&lt;T&gt;</code></td><td id="java-interop.md-7164b481"    ><code class="code " id="java-interop.md-ecdf501c"  >(Mutable)Iterable&lt;T&gt;!</code></td></tr><tr class="" id="java-interop.md-94cc83f4" ><td id="java-interop.md-4c96e6c3"    ><code class="code " id="java-interop.md-7983c3c2"  >Collection&lt;T&gt;</code></td><td id="java-interop.md-f90434"    ><code class="code " id="java-interop.md-ac5a1613"  >Collection&lt;T&gt;</code></td><td id="java-interop.md-20f482f4"    ><code class="code " id="java-interop.md-eb0a8e02"  >MutableCollection&lt;T&gt;</code></td><td id="java-interop.md-fc2f6db6"    ><code class="code " id="java-interop.md-a6046ea7"  >(Mutable)Collection&lt;T&gt;!</code></td></tr><tr class="" id="java-interop.md-884fe2c6" ><td id="java-interop.md-b59424c2"    ><code class="code " id="java-interop.md-d5ef608e"  >Set&lt;T&gt;</code></td><td id="java-interop.md-712e4327"    ><code class="code " id="java-interop.md-c46ea455"  >Set&lt;T&gt;</code></td><td id="java-interop.md-17292a4c"    ><code class="code " id="java-interop.md-ba7b3f6a"  >MutableSet&lt;T&gt;</code></td><td id="java-interop.md-87ea7db0"    ><code class="code " id="java-interop.md-ec799450"  >(Mutable)Set&lt;T&gt;!</code></td></tr><tr class="" id="java-interop.md-e3fe2df5" ><td id="java-interop.md-a48d5caf"    ><code class="code " id="java-interop.md-352abce1"  >List&lt;T&gt;</code></td><td id="java-interop.md-33dffa10"    ><code class="code " id="java-interop.md-660508a2"  >List&lt;T&gt;</code></td><td id="java-interop.md-e90af6b0"    ><code class="code " id="java-interop.md-767b6e06"  >MutableList&lt;T&gt;</code></td><td id="java-interop.md-581b10ed"    ><code class="code " id="java-interop.md-6998fd8c"  >(Mutable)List&lt;T&gt;!</code></td></tr><tr class="" id="java-interop.md-6e6e431d" ><td id="java-interop.md-164e577"    ><code class="code " id="java-interop.md-5b1f42cd"  >ListIterator&lt;T&gt;</code></td><td id="java-interop.md-b2c5a347"    ><code class="code " id="java-interop.md-99013db9"  >ListIterator&lt;T&gt;</code></td><td id="java-interop.md-541b1942"    ><code class="code " id="java-interop.md-c70df7fd"  >MutableListIterator&lt;T&gt;</code></td><td id="java-interop.md-24d8ff"    ><code class="code " id="java-interop.md-6a2e4f"  >(Mutable)ListIterator&lt;T&gt;!</code></td></tr><tr class="" id="java-interop.md-579be207" ><td id="java-interop.md-6d941043"    ><code class="code " id="java-interop.md-5d504c05"  >Map&lt;K, V&gt;</code></td><td id="java-interop.md-15a619e6"    ><code class="code " id="java-interop.md-80f5e623"  >Map&lt;K, V&gt;</code></td><td id="java-interop.md-478e5933"    ><code class="code " id="java-interop.md-ba75189"  >MutableMap&lt;K, V&gt;</code></td><td id="java-interop.md-b99c9333"    ><code class="code " id="java-interop.md-7e709311"  >(Mutable)Map&lt;K, V&gt;!</code></td></tr><tr class="" id="java-interop.md-b94e95c1" ><td id="java-interop.md-ecf218a9"    ><code class="code " id="java-interop.md-d73b9e4e"  >Map.Entry&lt;K, V&gt;</code></td><td id="java-interop.md-e5efc90c"    ><code class="code " id="java-interop.md-d270eb17"  >Map.Entry&lt;K, V&gt;</code></td><td id="java-interop.md-9c7778aa"    ><code class="code " id="java-interop.md-c7c19ba8"  >MutableMap.MutableEntry&lt;K,V&gt;</code></td><td id="java-interop.md-82741cf7"    ><code class="code " id="java-interop.md-fedac6a9"  >(Mutable)Map.(Mutable)Entry&lt;K, V&gt;!</code></td></tr></tbody ></table ></div><p id="java-interop.md-2afe2258" >Java\'s arrays are mapped as mentioned <a href="#java-interop.md-java-arrays" id="java-interop.md-40aadf84"   >below</a>:</p><div class="table-wrapper" ><table class=" wide" id="java-interop.md-e4248e22"  ><thead><tr class="ijRowHead" id="java-interop.md-37c66e3c" ><th id="java-interop.md-6142d481"    ><b id="java-interop.md-36799185" class=""  >Java type</b></th><th id="java-interop.md-5dec24a3"    ><b id="java-interop.md-7ef45105" class=""  >Kotlin type</b></th></tr></thead><tbody ><tr class="" id="java-interop.md-9a4f0084" ><td id="java-interop.md-cbe8c4ef"    ><code class="code " id="java-interop.md-5a2b43ec"  >int[]</code></td><td id="java-interop.md-a6740faf"    ><code class="code " id="java-interop.md-a52f59ae"  >kotlin.IntArray!</code></td></tr><tr class="" id="java-interop.md-1c8c342c" ><td id="java-interop.md-fdde44fd"    ><code class="code " id="java-interop.md-6a179691"  >String[]</code></td><td id="java-interop.md-6282c362"    ><code class="code " id="java-interop.md-40249f9e"  >kotlin.Array&lt;(out) String&gt;!</code></td></tr></tbody ></table ></div><aside data-type="note" class="prompt" data-title="" id="java-interop.md-460717f4" ><p id="java-interop.md-a0d7d2b9" >The static members of these Java types are not directly accessible on the <a href="#object-declarations.md-companion-objects" id="java-interop.md-41890dd9"   >companion objects</a> of the Kotlin types. To call them, use the full qualified names of the Java types, e.g. <code class="code " id="java-interop.md-835f98e0"  >java.lang.Integer.toHexString(foo)</code>.</p></aside></section><section class="chapter"  ><h2 id="java-interop.md-java-generics-in-kotlin" data-toc="java-interop#java-interop.md-java-generics-in-kotlin"  >Java generics in Kotlin</h2><p id="java-interop.md-4aae024d" >Kotlin\'s generics are a little different from Java\'s (see <a href="#generics.md" id="java-interop.md-67b1e511"   >Generics</a> ). When importing Java types to Kotlin, the following conversions are done:</p><ul class="list _ul" id="java-interop.md-6172e941"   ><li class="list__item" id="java-interop.md-2d714703" ><p id="java-interop.md-5073f408" >Java\'s wildcards are converted into type projections:</p><ul class="list _ul" id="java-interop.md-b38828a2"   ><li class="list__item" id="java-interop.md-74d76153" ><p><code class="code " id="java-interop.md-12632ec8"  >Foo&lt;? extends Bar&gt;</code> becomes <code class="code " id="java-interop.md-1200eba1"  >Foo&lt;out Bar!&gt;!</code></p></li><li class="list__item" id="java-interop.md-91e10209" ><p><code class="code " id="java-interop.md-d92c5709"  >Foo&lt;? super Bar&gt;</code> becomes <code class="code " id="java-interop.md-37d38a43"  >Foo&lt;in Bar!&gt;!</code></p></li></ul></li><li class="list__item" id="java-interop.md-b454301c" ><p id="java-interop.md-ab4bf939" >Java\'s raw types are converted into star projections:</p><ul class="list _ul" id="java-interop.md-792b6ec0"   ><li class="list__item" id="java-interop.md-36d14d7b" ><p><code class="code " id="java-interop.md-9f49e621"  >List</code> becomes <code class="code " id="java-interop.md-10d50540"  >List&lt;*&gt;!</code> that is <code class="code " id="java-interop.md-ee11a442"  >List&lt;out Any?&gt;!</code></p></li></ul></li></ul><p id="java-interop.md-91dfe4ee" >Like Java\'s, Kotlin\'s generics are not retained at runtime: objects do not carry information about actual type arguments passed to their constructors. For example, <code class="code " id="java-interop.md-4fe8e510"  >ArrayList&lt;Integer&gt;()</code> is indistinguishable from <code class="code " id="java-interop.md-3daabaf2"  >ArrayList&lt;Character&gt;()</code>. This makes it impossible to perform <code class="code " id="java-interop.md-e14c5c7d"  >is</code> -checks that take generics into account. Kotlin only allows <code class="code " id="java-interop.md-762e352a"  >is</code> -checks for star-projected generic types:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-17777184"         >if (a is List&lt;Int&gt;) // Error: cannot check if it is really a List of Ints\n// but\nif (a is List&lt;*&gt;) // OK: no guarantees about the contents of the list\n</div></section><section class="chapter"  ><h2 id="java-interop.md-java-arrays" data-toc="java-interop#java-interop.md-java-arrays"  >Java arrays</h2><p id="java-interop.md-f3279e1b" >Arrays in Kotlin are invariant, unlike Java. This means that Kotlin won\'t let you assign an <code class="code " id="java-interop.md-d5f5c337"  >Array&lt;String&gt;</code> to an <code class="code " id="java-interop.md-34c68728"  >Array&lt;Any&gt;</code>, which prevents a possible runtime failure. Passing an array of a subclass as an array of superclass to a Kotlin method is also prohibited, but for Java methods this is allowed through <a href="#java-interop.md-null-safety-and-platform-types" id="java-interop.md-fa3b733f"   >platform types</a> of the form <code class="code " id="java-interop.md-612a64ba"  >Array&lt;(out) String&gt;!</code>.</p><p id="java-interop.md-68cd95e8" >Arrays are used with primitive datatypes on the Java platform to avoid the cost of boxing/unboxing operations. As Kotlin hides those implementation details, a workaround is required to interface with Java code. There are specialized classes for every type of primitive array (<code class="code " id="java-interop.md-22113903"  >IntArray</code>, <code class="code " id="java-interop.md-1b09e8a1"  >DoubleArray</code>, <code class="code " id="java-interop.md-a2d8c0ac"  >CharArray</code>, and so on) to handle this case. They are not related to the <code class="code " id="java-interop.md-16e928ec"  >Array</code> class and are compiled down to Java\'s primitive arrays for maximum performance.</p><p id="java-interop.md-a8e715f6" >Suppose there is a Java method that accepts an int array of indices:</p><div class="code-block" data-lang="java" id="java-interop.md-a32bac6a"         >public class JavaArrayExample {\n    public void removeIndices(int[] indices) {\n        // code here...\n    }\n}\n</div><p id="java-interop.md-eb3edf45" >To pass an array of primitive values, you can do the following in Kotlin:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-6dab0b2e"         >val javaObj = JavaArrayExample()\nval array = intArrayOf(0, 1, 2, 3)\njavaObj.removeIndices(array)  // passes int[] to method\n</div><p id="java-interop.md-2b5f5301" >When compiling to the JVM byte code, the compiler optimizes access to arrays so that there\'s no overhead introduced:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-bc151b3e"         >val array = arrayOf(1, 2, 3, 4)\narray[1] = array[1] * 2 // no actual calls to get() and set() generated\nfor (x in array) { // no iterator created\n    print(x)\n}\n</div><p id="java-interop.md-4dfc8f4e" >Even when you navigate with an index, it does not introduce any overhead:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-6f279506"         >for (i in array.indices) { // no iterator created\n    array[i] += 2\n}\n</div><p id="java-interop.md-353d68c" >Finally, <code class="code " id="java-interop.md-5cbf1fe5"  >in</code> -checks have no overhead either:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-75b9e9fe"         >if (i in array.indices) { // same as (i &gt;= 0 &amp;&amp; i &lt; array.size)\n    print(array[i])\n}\n</div></section><section class="chapter"  ><h2 id="java-interop.md-java-varargs" data-toc="java-interop#java-interop.md-java-varargs"  >Java varargs</h2><p id="java-interop.md-e7f1ff55" >Java classes sometimes use a method declaration for the indices with a variable number of arguments (varargs):</p><div class="code-block" data-lang="java" id="java-interop.md-70e29e6b"         >public class JavaArrayExample {\n\n    public void removeIndicesVarArg(int... indices) {\n        // code here...\n    }\n}\n</div><p id="java-interop.md-f8b394a9" >In that case you need to use the spread operator <code class="code " id="java-interop.md-fdff07b8"  >*</code> to pass the <code class="code " id="java-interop.md-2f786de3"  >IntArray</code>:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-9856471f"         >val javaObj = JavaArrayExample()\nval array = intArrayOf(0, 1, 2, 3)\njavaObj.removeIndicesVarArg(*array)\n</div><p id="java-interop.md-aaaf7d97" >It\'s currently not possible to pass <code class="code " id="java-interop.md-990c14c6"  >null</code> to a method that is declared as varargs.</p></section><section class="chapter"  ><h2 id="java-interop.md-operators" data-toc="java-interop#java-interop.md-operators"  >Operators</h2><p id="java-interop.md-dfb35294" >Since Java has no way of marking methods for which it makes sense to use the operator syntax, Kotlin allows using any Java methods with the right name and signature as operator overloads and other conventions (<code class="code " id="java-interop.md-eb7d1776"  >invoke()</code> etc.) Calling Java methods using the infix call syntax is not allowed.</p></section><section class="chapter"  ><h2 id="java-interop.md-checked-exceptions" data-toc="java-interop#java-interop.md-checked-exceptions"  >Checked exceptions</h2><p id="java-interop.md-8efe9623" >In Kotlin, all <a href="#exceptions.md" id="java-interop.md-a278fbb7"   >exceptions are unchecked</a>, meaning that the compiler does not force you to catch any of them. So, when you call a Java method that declares a checked exception, Kotlin does not force you to do anything:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-be89e5"         >fun render(list: List&lt;*&gt;, to: Appendable) {\n    for (item in list) {\n        to.append(item.toString()) // Java would require us to catch IOException here\n    }\n}\n</div></section><section class="chapter"  ><h2 id="java-interop.md-object-methods" data-toc="java-interop#java-interop.md-object-methods"  >Object methods</h2><p id="java-interop.md-dbee1f38" >When Java types are imported into Kotlin, all the references of the type <code class="code " id="java-interop.md-83365365"  >java.lang.Object</code> are turned into <code class="code " id="java-interop.md-c22c13f2"  >Any</code>. Since <code class="code " id="java-interop.md-98e15b73"  >Any</code> is not platform-specific, it only declares <code class="code " id="java-interop.md-11ac8289"  >toString()</code>, <code class="code " id="java-interop.md-ca77e8b0"  >hashCode()</code> and <code class="code " id="java-interop.md-8fa9cb8d"  >equals()</code> as its members, so to make other members of <code class="code " id="java-interop.md-54c27607"  >java.lang.Object</code> available, Kotlin uses <a href="#extensions.md" id="java-interop.md-62efffb3"   >extension functions</a>.</p><section class="chapter"  ><h3 id="java-interop.md-wait-notify" data-toc="java-interop#java-interop.md-wait-notify"  >wait()/notify()</h3><p id="java-interop.md-81ab0a2c" >Methods <code class="code " id="java-interop.md-8ce2b43f"  >wait()</code> and <code class="code " id="java-interop.md-f1b15250"  >notify()</code> are not available on references of type <code class="code " id="java-interop.md-9f07f685"  >Any</code>. Their usage is generally discouraged in favor of <code class="code " id="java-interop.md-b290b94b"  >java.util.concurrent</code>. If you really need to call these methods, you can cast to <code class="code " id="java-interop.md-6dd5418b"  >java.lang.Object</code>:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-91a3731c"         >(foo as java.lang.Object).wait()\n</div></section><section class="chapter"  ><h3 id="java-interop.md-getclass" data-toc="java-interop#java-interop.md-getclass"  >getClass()</h3><p id="java-interop.md-6684738c" >To retrieve the Java class of an object, use the <code class="code " id="java-interop.md-85b13aea"  >java</code> extension property on a <a href="#reflection.md-class-references" id="java-interop.md-d0faa67"   >class reference</a>:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-8d4351f2"         >val fooClass = foo::class.java\n</div><p id="java-interop.md-b407194a" >The code above uses a <a href="#reflection.md-bound-class-references" id="java-interop.md-b78937fd"   >bound class reference</a>. You can also use the <code class="code " id="java-interop.md-2a6a270f"  >javaClass</code> extension property:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-d4392a59"         >val fooClass = foo.javaClass\n</div></section><section class="chapter"  ><h3 id="java-interop.md-clone" data-toc="java-interop#java-interop.md-clone"  >clone()</h3><p id="java-interop.md-9c90c428" >To override <code class="code " id="java-interop.md-f7d5c46c"  >clone()</code>, your class needs to extend <code class="code " id="java-interop.md-5ec6b815"  >kotlin.Cloneable</code>:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-e11eb554"         >class Example : Cloneable {\n    override fun clone(): Any { ... }\n}\n</div><p id="java-interop.md-7e70f9ab" >Don\'t forget about <a href="http://www.oracle.com/technetwork/java/effectivejava-136174.html" id="java-interop.md-9f5f7037"   data-external="true" rel="noopener noreferrer" >Effective Java, 3rd Edition</a>, Item 13: <em id="java-interop.md-fa1dcabc" class=""  >Override clone judiciously</em>.</p></section><section class="chapter"  ><h3 id="java-interop.md-finalize" data-toc="java-interop#java-interop.md-finalize"  >finalize()</h3><p id="java-interop.md-f5f4992b" >To override <code class="code " id="java-interop.md-426096e6"  >finalize()</code>, all you need to do is simply declare it, without using the <code class="code " id="java-interop.md-cc02c6df"  >override</code> keyword:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-bdc04e87"         >class C {\n    protected fun finalize() {\n        // finalization logic\n    }\n}\n</div><p id="java-interop.md-6189170" >According to Java\'s rules, <code class="code " id="java-interop.md-7cf4722f"  >finalize()</code> must not be <code class="code " id="java-interop.md-c5b6e108"  >private</code>.</p></section></section><section class="chapter"  ><h2 id="java-interop.md-inheritance-from-java-classes" data-toc="java-interop#java-interop.md-inheritance-from-java-classes"  >Inheritance from Java classes</h2><p id="java-interop.md-2a699d66" >At most one Java class (and as many Java interfaces as you like) can be a supertype for a class in Kotlin.</p></section><section class="chapter"  ><h2 id="java-interop.md-accessing-static-members" data-toc="java-interop#java-interop.md-accessing-static-members"  >Accessing static members</h2><p id="java-interop.md-78cb61e6" >Static members of Java classes form &quot;companion objects&quot; for these classes. You can\'t pass such a &quot;companion object&quot; around as a value but can access the members explicitly, for example:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-8d0ce9f4"         >if (Character.isLetter(a)) { ... }\n</div><p id="java-interop.md-82e5e242" >To access static members of a Java type that is <a href="#java-interop.md-mapped-types" id="java-interop.md-422d100c"   >mapped</a> to a Kotlin type, use the full qualified name of the Java type: <code class="code " id="java-interop.md-55279340"  >java.lang.Integer.bitCount(foo)</code>.</p></section><section class="chapter"  ><h2 id="java-interop.md-java-reflection" data-toc="java-interop#java-interop.md-java-reflection"  >Java reflection</h2><p id="java-interop.md-85ba3f2a" >Java reflection works on Kotlin classes and vice versa. As mentioned above, you can use <code class="code " id="java-interop.md-a82be415"  >instance::class.java</code>, <code class="code " id="java-interop.md-6838ec5a"  >ClassName::class.java</code> or <code class="code " id="java-interop.md-f606d0d"  >instance.javaClass</code> to enter Java reflection through <code class="code " id="java-interop.md-c72771c9"  >java.lang.Class</code>. Do not use <code class="code " id="java-interop.md-d0aa6b91"  >ClassName.javaClass</code> for this purpose because it refers to <code class="code " id="java-interop.md-260dcda9"  >ClassName</code> \'s companion object class, which is the same as <code class="code " id="java-interop.md-d62b5c8"  >ClassName.Companion::class.java</code> and not <code class="code " id="java-interop.md-4a07c70d"  >ClassName::class.java</code>.</p><p id="java-interop.md-5eef189d" >For each primitive type, there are two different Java classes, and Kotlin provides ways to get both. For example, <code class="code " id="java-interop.md-df6ae17a"  >Int::class.java</code> will return the class instance representing the primitive type itself, corresponding to <code class="code " id="java-interop.md-70f94155"  >Integer.TYPE</code> in Java. To get the class of the corresponding wrapper type, use <code class="code " id="java-interop.md-9a4acf8d"  >Int::class.javaObjectType</code>, which is equivalent of Java\'s <code class="code " id="java-interop.md-cb4224e5"  >Integer.class</code>.</p><p id="java-interop.md-a4ba9c25" >Other supported cases include acquiring a Java getter/setter method or a backing field for a Kotlin property, a <code class="code " id="java-interop.md-c2adef3e"  >KProperty</code> for a Java field, a Java method or constructor for a <code class="code " id="java-interop.md-ec1c1df2"  >KFunction</code> and vice versa.</p></section><section class="chapter"  ><h2 id="java-interop.md-sam-conversions" data-toc="java-interop#java-interop.md-sam-conversions"  >SAM conversions</h2><p id="java-interop.md-56556bed" >Kotlin supports SAM conversions for both Java and <a href="#fun-interfaces.md" id="java-interop.md-b82fec91"   >Kotlin interfaces</a>. This support for Java means that Kotlin function literals can be automatically converted into implementations of Java interfaces with a single non-default method, as long as the parameter types of the interface method match the parameter types of the Kotlin function.</p><p id="java-interop.md-992be77f" >You can use this for creating instances of SAM interfaces:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-f899269c"         >val runnable = Runnable { println(&quot;This runs in a runnable&quot;) }\n</div><p id="java-interop.md-146d689d" >...and in method calls:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-ba50e720"         >val executor = ThreadPoolExecutor()\n// Java signature: void execute(Runnable command)\nexecutor.execute { println(&quot;This runs in a thread pool&quot;) }\n</div><p id="java-interop.md-5c68b92" >If the Java class has multiple methods taking functional interfaces, you can choose the one you need to call by using an adapter function that converts a lambda to a specific SAM type. Those adapter functions are also generated by the compiler when needed:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-7b5db001"         >executor.execute(Runnable { println(&quot;This runs in a thread pool&quot;) })\n</div><aside data-type="note" class="prompt" data-title="" id="java-interop.md-8c00e1c" ><p id="java-interop.md-425dd247" >SAM conversions only work for interfaces, not for abstract classes, even if those also have just a single abstract method.</p></aside></section><section class="chapter"  ><h2 id="java-interop.md-using-jni-with-kotlin" data-toc="java-interop#java-interop.md-using-jni-with-kotlin"  >Using JNI with Kotlin</h2><p id="java-interop.md-fa41c738" >To declare a function that is implemented in native (C or C++) code, you need to mark it with the <code class="code " id="java-interop.md-b6ccbcce"  >external</code> modifier:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-65a56b8b"         >external fun foo(x: Int): Double\n</div><p id="java-interop.md-3c381b15" >The rest of the procedure works in exactly the same way as in Java.</p><p id="java-interop.md-30dd0692" >You can also mark property getters and setters as <code class="code " id="java-interop.md-aae19d2a"  >external</code>:</p><div class="code-block" data-lang="kotlin" id="java-interop.md-a1d97307"         >var myProperty: String\n    external get\n    external set\n</div><p id="java-interop.md-509f7b4a" >Behind the scenes, this will create two functions <code class="code " id="java-interop.md-f1de6d02"  >getMyProperty</code> and <code class="code " id="java-interop.md-6a9b98cb"  >setMyProperty</code>, both marked as <code class="code " id="java-interop.md-9cb409da"  >external</code>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="java-to-kotlin-interop.md"  >Calling Kotlin from Java</h1><p id="java-to-kotlin-interop.md-97415cf7" >Kotlin code can be easily called from Java. For example, instances of a Kotlin class can be seamlessly created and operated in Java methods. However, there are certain differences between Java and Kotlin that require attention when integrating Kotlin code into Java. On this page, we\'ll describe the ways to tailor the interop of your Kotlin code with its Java clients.</p><section class="chapter"  ><h2 id="java-to-kotlin-interop.md-properties" data-toc="java-to-kotlin-interop#java-to-kotlin-interop.md-properties"  >Properties</h2><p id="java-to-kotlin-interop.md-f2880f7" >A Kotlin property is compiled to the following Java elements:</p><ul class="list _ul" id="java-to-kotlin-interop.md-b3551c1e"   ><li class="list__item" id="java-to-kotlin-interop.md-effdcee2" ><p>a getter method, with the name calculated by prepending the <code class="code " id="java-to-kotlin-interop.md-a5d13d5b"  >get</code> prefix</p></li><li class="list__item" id="java-to-kotlin-interop.md-8752666a" ><p>a setter method, with the name calculated by prepending the <code class="code " id="java-to-kotlin-interop.md-e75b263e"  >set</code> prefix (only for <code class="code " id="java-to-kotlin-interop.md-cf3d9a9b"  >var</code> properties)</p></li><li class="list__item" id="java-to-kotlin-interop.md-cd3245f8" ><p>a private field, with the same name as the property name (only for properties with backing fields)</p></li></ul><p id="java-to-kotlin-interop.md-d5412252" >For example, <code class="code " id="java-to-kotlin-interop.md-b7cdc789"  >var firstName: String</code> compiles to the following Java declarations:</p><div class="code-block" data-lang="java" id="java-to-kotlin-interop.md-616bec7b"         >private String firstName;\n\npublic String getFirstName() {\n    return firstName;\n}\n\npublic void setFirstName(String firstName) {\n    this.firstName = firstName;\n}\n</div><p id="java-to-kotlin-interop.md-e4afa45b" >If the name of the property starts with <code class="code " id="java-to-kotlin-interop.md-26cd7dbb"  >is</code>, a different name mapping rule is used: the name of the getter will be the same as the property name, and the name of the setter will be obtained by replacing <code class="code " id="java-to-kotlin-interop.md-d60af31a"  >is</code> with <code class="code " id="java-to-kotlin-interop.md-55b9bfed"  >set</code>. For example, for a property <code class="code " id="java-to-kotlin-interop.md-ed0b7d35"  >isOpen</code>, the getter will be called <code class="code " id="java-to-kotlin-interop.md-7d94aae9"  >isOpen()</code> and the setter will be called <code class="code " id="java-to-kotlin-interop.md-678e204b"  >setOpen()</code>. This rule applies for properties of any type, not just <code class="code " id="java-to-kotlin-interop.md-1a6d8312"  >Boolean</code>.</p></section><section class="chapter"  ><h2 id="java-to-kotlin-interop.md-package-level-functions" data-toc="java-to-kotlin-interop#java-to-kotlin-interop.md-package-level-functions"  >Package-level functions</h2><p id="java-to-kotlin-interop.md-a91464f" >All the functions and properties declared in a file <code class="code " id="java-to-kotlin-interop.md-5c5b3b0"  >app.kt</code> inside a package <code class="code " id="java-to-kotlin-interop.md-77bc456c"  >org.example</code>, including extension functions, are compiled into static methods of a Java class named <code class="code " id="java-to-kotlin-interop.md-e47f4362"  >org.example.AppKt</code>.</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-998d8705"         >// app.kt\npackage org.example\n\nclass Util\n\nfun getTime() { /*...*/ }\n\n</div><div class="code-block" data-lang="java" id="java-to-kotlin-interop.md-f0517f4f"         >// Java\nnew org.example.Util();\norg.example.AppKt.getTime();\n</div><p id="java-to-kotlin-interop.md-70e0703c" >To set a custom name to the generated Java class, use the <code class="code " id="java-to-kotlin-interop.md-1dbea162"  >@JvmName</code> annotation:</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-d74fc36d"         >@file:JvmName(&quot;DemoUtils&quot;)\n\npackage org.example\n\nclass Util\n\nfun getTime() { /*...*/ }\n\n</div><div class="code-block" data-lang="java" id="java-to-kotlin-interop.md-dbacd911"         >// Java\nnew org.example.Util();\norg.example.DemoUtils.getTime();\n</div><p id="java-to-kotlin-interop.md-363cf55f" >Having multiple files with the same generated Java class name (the same package and the same name or the same <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-name/index.html" id="java-to-kotlin-interop.md-300b9d2c"   data-external="true" rel="noopener noreferrer" ><code class="code " id="java-to-kotlin-interop.md-5887df66"  >@JvmName</code></a> annotation) is normally an error. However, the compiler can generate a single Java facade class which has the specified name and contains all the declarations from all the files which have that name. To enable the generation of such a facade, use the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-multifile-class/index.html" id="java-to-kotlin-interop.md-82497943"   data-external="true" rel="noopener noreferrer" ><code class="code " id="java-to-kotlin-interop.md-2094e385"  >@JvmMultifileClass</code></a> annotation in all such files.</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-836ece17"         >// oldutils.kt\n@file:JvmName(&quot;Utils&quot;)\n@file:JvmMultifileClass\n\npackage org.example\n\nfun getTime() { /*...*/ }\n</div><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-15fb2755"         >// newutils.kt\n@file:JvmName(&quot;Utils&quot;)\n@file:JvmMultifileClass\n\npackage org.example\n\nfun getDate() { /*...*/ }\n</div><div class="code-block" data-lang="java" id="java-to-kotlin-interop.md-e3104f2a"         >// Java\norg.example.Utils.getTime();\norg.example.Utils.getDate();\n</div></section><section class="chapter"  ><h2 id="java-to-kotlin-interop.md-instance-fields" data-toc="java-to-kotlin-interop#java-to-kotlin-interop.md-instance-fields"  >Instance fields</h2><p id="java-to-kotlin-interop.md-3e5d167a" >If you need to expose a Kotlin property as a field in Java, annotate it with the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-field/index.html" id="java-to-kotlin-interop.md-bb8274d6"   data-external="true" rel="noopener noreferrer" ><code class="code " id="java-to-kotlin-interop.md-4886e62c"  >@JvmField</code></a> annotation. The field will have the same visibility as the underlying property. You can annotate a property with <code class="code " id="java-to-kotlin-interop.md-3533f24"  >@JvmField</code> if it:</p><ul class="list _ul" id="java-to-kotlin-interop.md-7f80a841"   ><li class="list__item" id="java-to-kotlin-interop.md-22bcfaaa" ><p>has a backing field</p></li><li class="list__item" id="java-to-kotlin-interop.md-90852e15" ><p>is not private</p></li><li class="list__item" id="java-to-kotlin-interop.md-10395a3b" ><p>does not have <code class="code " id="java-to-kotlin-interop.md-5955fd6f"  >open</code>, <code class="code " id="java-to-kotlin-interop.md-eb277b9a"  >override</code> or <code class="code " id="java-to-kotlin-interop.md-96f95413"  >const</code> modifiers</p></li><li class="list__item" id="java-to-kotlin-interop.md-a733926c" ><p>is not a delegated property</p></li></ul><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-e95ef832"         >class User(id: String) {\n    @JvmField val ID = id\n}\n</div><div class="code-block" data-lang="java" id="java-to-kotlin-interop.md-25ebcbf9"         >\n// Java\nclass JavaClient {\n    public String getID(User user) {\n        return user.ID;\n    }\n}\n</div><p id="java-to-kotlin-interop.md-14b30635" ><a href="#properties.md-late-initialized-properties-and-variables" id="java-to-kotlin-interop.md-c4e8dcec"   >Late-Initialized</a> properties are also exposed as fields. The visibility of the field will be the same as the visibility of <code class="code " id="java-to-kotlin-interop.md-e6b3f70a"  >lateinit</code> property setter.</p></section><section class="chapter"  ><h2 id="java-to-kotlin-interop.md-static-fields" data-toc="java-to-kotlin-interop#java-to-kotlin-interop.md-static-fields"  >Static fields</h2><p id="java-to-kotlin-interop.md-e68419f6" >Kotlin properties declared in a named object or a companion object will have static backing fields either in that named object or in the class containing the companion object.</p><p id="java-to-kotlin-interop.md-d17c1efb" >Usually these fields are private but they can be exposed in one of the following ways:</p><ul class="list _ul" id="java-to-kotlin-interop.md-b0705e53"   ><li class="list__item" id="java-to-kotlin-interop.md-5013dd7c" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-field/index.html" id="java-to-kotlin-interop.md-b3de7e67"   data-external="true" rel="noopener noreferrer" ><code class="code " id="java-to-kotlin-interop.md-d1014a1f"  >@JvmField</code></a> annotation</p></li><li class="list__item" id="java-to-kotlin-interop.md-8c24c330" ><p><code class="code " id="java-to-kotlin-interop.md-98b0f884"  >lateinit</code> modifier</p></li><li class="list__item" id="java-to-kotlin-interop.md-b7d51c55" ><p><code class="code " id="java-to-kotlin-interop.md-c86dcaee"  >const</code> modifier</p></li></ul><p id="java-to-kotlin-interop.md-9119920f" >Annotating such a property with <code class="code " id="java-to-kotlin-interop.md-e88d4a98"  >@JvmField</code> makes it a static field with the same visibility as the property itself.</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-9bb00cb2"         >class Key(val value: Int) {\n    companion object {\n        @JvmField\n        val COMPARATOR: Comparator&lt;Key&gt; = compareBy&lt;Key&gt; { it.value }\n    }\n}\n</div><div class="code-block" data-lang="java" id="java-to-kotlin-interop.md-d8155c40"         >// Java\nKey.COMPARATOR.compare(key1, key2);\n// public static final field in Key class\n</div><p id="java-to-kotlin-interop.md-ea3210ae" >A <a href="#properties.md-late-initialized-properties-and-variables" id="java-to-kotlin-interop.md-128e132f"   >late-initialized</a> property in an object or a companion object has a static backing field with the same visibility as the property setter.</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-b2f0bdd5"         >object Singleton {\n    lateinit var provider: Provider\n}\n</div><div class="code-block" data-lang="java" id="java-to-kotlin-interop.md-3060d6bf"         >\n// Java\nSingleton.provider = new Provider();\n// public static non-final field in Singleton class\n</div><p id="java-to-kotlin-interop.md-d307c526" >Properties declared as <code class="code " id="java-to-kotlin-interop.md-97b715d9"  >const</code> (in classes as well as at the top level) are turned into static fields in Java:</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-dd6bbd0"         >// file example.kt\n\nobject Obj {\n    const val CONST = 1\n}\n\nclass C {\n    companion object {\n        const val VERSION = 9\n    }\n}\n\nconst val MAX = 239\n</div><p id="java-to-kotlin-interop.md-fdcb3248" >In Java:</p><div class="code-block" data-lang="java" id="java-to-kotlin-interop.md-6287af0f"         >\nint const = Obj.CONST;\nint max = ExampleKt.MAX;\nint version = C.VERSION;\n</div></section><section class="chapter"  ><h2 id="java-to-kotlin-interop.md-static-methods" data-toc="java-to-kotlin-interop#java-to-kotlin-interop.md-static-methods"  >Static methods</h2><p id="java-to-kotlin-interop.md-fb3f8cb0" >As mentioned above, Kotlin represents package-level functions as static methods. Kotlin can also generate static methods for functions defined in named objects or companion objects if you annotate those functions as <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-static/index.html" id="java-to-kotlin-interop.md-c760a87"   data-external="true" rel="noopener noreferrer" ><code class="code " id="java-to-kotlin-interop.md-fa55f437"  >@JvmStatic</code></a>. If you use this annotation, the compiler will generate both a static method in the enclosing class of the object and an instance method in the object itself. For example:</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-ded2d0c8"         >class C {\n    companion object {\n        @JvmStatic fun callStatic() {}\n        fun callNonStatic() {}\n    }\n}\n</div><p id="java-to-kotlin-interop.md-3d3171fc" >Now, <code class="code " id="java-to-kotlin-interop.md-b1e5a3cc"  >callStatic()</code> is static in Java while <code class="code " id="java-to-kotlin-interop.md-2e53b840"  >callNonStatic()</code> is not:</p><div class="code-block" data-lang="java" id="java-to-kotlin-interop.md-527d0a4b"         >\nC.callStatic(); // works fine\nC.callNonStatic(); // error: not a static method\nC.Companion.callStatic(); // instance method remains\nC.Companion.callNonStatic(); // the only way it works\n</div><p id="java-to-kotlin-interop.md-fd599d3f" >Same for named objects:</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-ebd44e22"         >object Obj {\n    @JvmStatic fun callStatic() {}\n    fun callNonStatic() {}\n}\n</div><p id="java-to-kotlin-interop.md-868f882" >In Java:</p><div class="code-block" data-lang="java" id="java-to-kotlin-interop.md-71f3352b"         >\nObj.callStatic(); // works fine\nObj.callNonStatic(); // error\nObj.INSTANCE.callNonStatic(); // works, a call through the singleton instance\nObj.INSTANCE.callStatic(); // works too\n</div><p id="java-to-kotlin-interop.md-cb06c65b" >Starting from Kotlin 1.3, <code class="code " id="java-to-kotlin-interop.md-41153f80"  >@JvmStatic</code> applies to functions defined in companion objects of interfaces as well. Such functions compile to static methods in interfaces. Note that static method in interfaces were introduced in Java 1.8, so be sure to use the corresponding targets.</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-f9cb5455"         >interface ChatBot {\n    companion object {\n        @JvmStatic fun greet(username: String) {\n            println(&quot;Hello, $username&quot;)\n        }\n    }\n}\n</div><p id="java-to-kotlin-interop.md-7d6ba7c9" ><code class="code " id="java-to-kotlin-interop.md-5f0df8c0"  >@JvmStatic</code> annotation can also be applied on a property of an object or a companion object making its getter and setter methods static members in that object or the class containing the companion object.</p></section><section class="chapter"  ><h2 id="java-to-kotlin-interop.md-default-methods-in-interfaces" data-toc="java-to-kotlin-interop#java-to-kotlin-interop.md-default-methods-in-interfaces"  >Default methods in interfaces</h2><aside data-type="note" class="prompt" data-title="" id="java-to-kotlin-interop.md-fbc7c008" ><p id="java-to-kotlin-interop.md-c6e075c1" >Default methods are available only for targets JVM 1.8 and above.</p></aside><p id="java-to-kotlin-interop.md-4a4d82b3" >Starting from JDK 1.8, interfaces in Java can contain <a href="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html" id="java-to-kotlin-interop.md-d98fbbf6"   data-external="true" rel="noopener noreferrer" >default methods</a>. To make all non-abstract members of Kotlin interfaces default for the Java classes implementing them, compile the Kotlin code with the <code class="code " id="java-to-kotlin-interop.md-32f2503f"  >-Xjvm-default=all</code> compiler option.</p><p id="java-to-kotlin-interop.md-be830d80" >Here is an example of a Kotlin interface with a default method:</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-c61e27c1"         >// compile with -Xjvm-default=all\n\ninterface Robot {\n    fun move() { println(&quot;~walking~&quot;) }  // will be default in the Java interface\n    fun speak(): Unit\n}\n</div><p id="java-to-kotlin-interop.md-e9478fae" >The default implementation is available for Java classes implementing the interface.</p><div class="code-block" data-lang="java" id="java-to-kotlin-interop.md-46139a62"         >//Java implementation\npublic class C3PO implements Robot {\n    // move() implementation from Robot is available implicitly\n    @Override\n    public void speak() {\n        System.out.println(&quot;I beg your pardon, sir&quot;);\n    }\n}\n</div><div class="code-block" data-lang="java" id="java-to-kotlin-interop.md-81b4dc55"         >C3PO c3po = new C3PO();\nc3po.move(); // default implementation from the Robot interface\nc3po.speak();\n</div><p id="java-to-kotlin-interop.md-ca9a1c40" >Implementations of the interface can override default methods.</p><div class="code-block" data-lang="java" id="java-to-kotlin-interop.md-ee62a777"         >//Java\npublic class BB8 implements Robot {\n    //own implementation of the default method\n    @Override\n    public void move() {\n        System.out.println(&quot;~rolling~&quot;);\n    }\n\n    @Override\n    public void speak() {\n        System.out.println(&quot;Beep-beep&quot;);\n    }\n}\n</div><aside data-type="note" class="prompt" data-title="" id="java-to-kotlin-interop.md-fa292573" ><p id="java-to-kotlin-interop.md-72f4b936" >Prior to Kotlin 1.4, to generate default methods, you could use the <code class="code " id="java-to-kotlin-interop.md-f7487e8e"  >@JvmDefault</code> annotation on these methods. Compiling with <code class="code " id="java-to-kotlin-interop.md-4e9b8f3b"  >-Xjvm-default=all</code> in 1.4+ generally works as if you annotated all non-abstract methods of interfaces with <code class="code " id="java-to-kotlin-interop.md-ef8b599b"  >@JvmDefault</code> and compiled with <code class="code " id="java-to-kotlin-interop.md-da96ac1"  >-Xjvm-default=enable</code>. However, there are cases when their behavior differs. Detailed information about the changes in default methods generation in Kotlin 1.4 is provided in <a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/" id="java-to-kotlin-interop.md-a9257f0b"   data-external="true" rel="noopener noreferrer" >this post</a> on the Kotlin blog.</p></aside><section class="chapter"  ><h3 id="java-to-kotlin-interop.md-compatibility-mode-for-default-methods" data-toc="java-to-kotlin-interop#java-to-kotlin-interop.md-compatibility-mode-for-default-methods"  >Compatibility mode for default methods</h3><p id="java-to-kotlin-interop.md-5a371817" >If there are clients that use your Kotlin interfaces compiled without the new <code class="code " id="java-to-kotlin-interop.md-e7407bc3"  >-Xjvm-default=all</code> option, then they can be incompatible with the same code compiled with this option.</p><p id="java-to-kotlin-interop.md-4f092bc5" >To avoid breaking the compatibility with such clients, compile your Kotlin code in the <em id="java-to-kotlin-interop.md-8aabf4f4" class=""  >compatibility mode</em> by specifying the <code class="code " id="java-to-kotlin-interop.md-8c1b218b"  >-Xjvm-default=all-compatibility</code> compiler option. In this case, all the code that uses the previous version will work fine with the new one. However, the compatibility mode adds some overhead to the resulting bytecode size.</p><p id="java-to-kotlin-interop.md-6544115e" >There is no need to consider compatibility for new interfaces, as no clients have used them before. You can minimize the compatibility overhead by excluding these interfaces from the compatibility mode. To do this, annotate them with the <code class="code " id="java-to-kotlin-interop.md-8f30d631"  >@JvmDefaultWithoutCompatibility</code> annotation. Such interfaces compile the same way as with <code class="code " id="java-to-kotlin-interop.md-236b20a7"  >-Xjvm-default=all</code>.</p><p id="java-to-kotlin-interop.md-a96fe808" >Additionally, in the <code class="code " id="java-to-kotlin-interop.md-e134b4f3"  >all-compatibility</code> mode you can use <code class="code " id="java-to-kotlin-interop.md-2e192314"  >@JvmDefaultWithoutCompatibility</code> to annotate all interfaces which are not exposed in the public API and therefore aren’t used by the existing clients.</p></section></section><section class="chapter"  ><h2 id="java-to-kotlin-interop.md-visibility" data-toc="java-to-kotlin-interop#java-to-kotlin-interop.md-visibility"  >Visibility</h2><p id="java-to-kotlin-interop.md-6bab0655" >The Kotlin visibility modifiers map to Java in the following way:</p><ul class="list _ul" id="java-to-kotlin-interop.md-d14b5529"   ><li class="list__item" id="java-to-kotlin-interop.md-a62f232b" ><p><code class="code " id="java-to-kotlin-interop.md-54bb7924"  >private</code> members are compiled to <code class="code " id="java-to-kotlin-interop.md-fb87b88b"  >private</code> members</p></li><li class="list__item" id="java-to-kotlin-interop.md-3798f375" ><p><code class="code " id="java-to-kotlin-interop.md-ced87874"  >private</code> top-level declarations are compiled to package-local declarations</p></li><li class="list__item" id="java-to-kotlin-interop.md-c929da8b" ><p><code class="code " id="java-to-kotlin-interop.md-8f30f395"  >protected</code> remains <code class="code " id="java-to-kotlin-interop.md-3102d263"  >protected</code> (note that Java allows accessing protected members from other classes in the same package and Kotlin doesn\'t, so Java classes will have broader access to the code)</p></li><li class="list__item" id="java-to-kotlin-interop.md-33ba51e4" ><p><code class="code " id="java-to-kotlin-interop.md-2ebc2c33"  >internal</code> declarations become <code class="code " id="java-to-kotlin-interop.md-825f0b08"  >public</code> in Java. Members of <code class="code " id="java-to-kotlin-interop.md-db50044a"  >internal</code> classes go through name mangling, to make it harder to accidentally use them from Java and to allow overloading for members with the same signature that don\'t see each other according to Kotlin rules</p></li><li class="list__item" id="java-to-kotlin-interop.md-9b259515" ><p><code class="code " id="java-to-kotlin-interop.md-bc0b39d3"  >public</code> remains <code class="code " id="java-to-kotlin-interop.md-a3f197ce"  >public</code></p></li></ul></section><section class="chapter"  ><h2 id="java-to-kotlin-interop.md-kclass" data-toc="java-to-kotlin-interop#java-to-kotlin-interop.md-kclass"  >KClass</h2><p id="java-to-kotlin-interop.md-788a0094" >Sometimes you need to call a Kotlin method with a parameter of type <code class="code " id="java-to-kotlin-interop.md-c11cb788"  >KClass</code>. There is no automatic conversion from <code class="code " id="java-to-kotlin-interop.md-23de82d5"  >Class</code> to <code class="code " id="java-to-kotlin-interop.md-141d2f95"  >KClass</code>, so you have to do it manually by invoking the equivalent of the <code class="code " id="java-to-kotlin-interop.md-4dc0cf60"  >Class&lt;T&gt;.kotlin</code> extension property:</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-40a2b2a7"         >kotlin.jvm.JvmClassMappingKt.getKotlinClass(MainView.class)\n</div></section><section class="chapter"  ><h2 id="java-to-kotlin-interop.md-handling-signature-clashes-with-jvmname" data-toc="java-to-kotlin-interop#java-to-kotlin-interop.md-handling-signature-clashes-with-jvmname"  >Handling signature clashes with @JvmName</h2><p id="java-to-kotlin-interop.md-88274d3d" >Sometimes we have a named function in Kotlin, for which we need a different JVM name in the byte code. The most prominent example happens due to <em id="java-to-kotlin-interop.md-5fde2a3f" class=""  >type erasure</em>:</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-f7ed5cca"         >fun List&lt;String&gt;.filterValid(): List&lt;String&gt;\nfun List&lt;Int&gt;.filterValid(): List&lt;Int&gt;\n</div><p id="java-to-kotlin-interop.md-fcc302ad" >These two functions can not be defined side-by-side, because their JVM signatures are the same: <code class="code " id="java-to-kotlin-interop.md-2e974a71"  >filterValid(Ljava/util/List;)Ljava/util/List;</code>. If we really want them to have the same name in Kotlin, we can annotate one (or both) of them with <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-name/index.html" id="java-to-kotlin-interop.md-8a95660a"   data-external="true" rel="noopener noreferrer" ><code class="code " id="java-to-kotlin-interop.md-fb2492ad"  >@JvmName</code></a> and specify a different name as an argument:</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-cee89675"         >fun List&lt;String&gt;.filterValid(): List&lt;String&gt;\n\n@JvmName(&quot;filterValidInt&quot;)\nfun List&lt;Int&gt;.filterValid(): List&lt;Int&gt;\n</div><p id="java-to-kotlin-interop.md-d6952bc0" >From Kotlin they will be accessible by the same name <code class="code " id="java-to-kotlin-interop.md-8f4d96c"  >filterValid</code>, but from Java it will be <code class="code " id="java-to-kotlin-interop.md-476a0d36"  >filterValid</code> and <code class="code " id="java-to-kotlin-interop.md-e180795d"  >filterValidInt</code>.</p><p id="java-to-kotlin-interop.md-49690886" >The same trick applies when we need to have a property <code class="code " id="java-to-kotlin-interop.md-f1a30740"  >x</code> alongside with a function <code class="code " id="java-to-kotlin-interop.md-f6ca0d38"  >getX()</code>:</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-e62171ad"         >val x: Int\n    @JvmName(&quot;getX_prop&quot;)\n    get() = 15\n\nfun getX() = 10\n</div><p id="java-to-kotlin-interop.md-62bda651" >To change the names of generated accessor methods for properties without explicitly implemented getters and setters, you can use <code class="code " id="java-to-kotlin-interop.md-e4f11634"  >@get:JvmName</code> and <code class="code " id="java-to-kotlin-interop.md-c96e1fcb"  >@set:JvmName</code>:</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-1cd6a975"         >@get:JvmName(&quot;x&quot;)\n@set:JvmName(&quot;changeX&quot;)\nvar x: Int = 23\n</div></section><section class="chapter"  ><h2 id="java-to-kotlin-interop.md-overloads-generation" data-toc="java-to-kotlin-interop#java-to-kotlin-interop.md-overloads-generation"  >Overloads generation</h2><p id="java-to-kotlin-interop.md-8267efb3" >Normally, if you write a Kotlin function with default parameter values, it will be visible in Java only as a full signature, with all parameters present. If you wish to expose multiple overloads to Java callers, you can use the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-overloads/index.html" id="java-to-kotlin-interop.md-4d8d1ea1"   data-external="true" rel="noopener noreferrer" ><code class="code " id="java-to-kotlin-interop.md-d549568e"  >@JvmOverloads</code></a> annotation.</p><p id="java-to-kotlin-interop.md-1791e4d6" >The annotation also works for constructors, static methods, and so on. It can\'t be used on abstract methods, including methods defined in interfaces.</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-adfe431"         >class Circle @JvmOverloads constructor(centerX: Int, centerY: Int, radius: Double = 1.0) {\n    @JvmOverloads fun draw(label: String, lineWidth: Int = 1, color: String = &quot;red&quot;) { /*...*/ }\n}\n</div><p id="java-to-kotlin-interop.md-c375fa12" >For every parameter with a default value, this will generate one additional overload, which has this parameter and all parameters to the right of it in the parameter list removed. In this example, the following will be generated:</p><div class="code-block" data-lang="java" id="java-to-kotlin-interop.md-436decc5"         >// Constructors:\nCircle(int centerX, int centerY, double radius)\nCircle(int centerX, int centerY)\n\n// Methods\nvoid draw(String label, int lineWidth, String color) { }\nvoid draw(String label, int lineWidth) { }\nvoid draw(String label) { }\n</div><p id="java-to-kotlin-interop.md-6fec1b1b" >Note that, as described in <a href="#classes.md-secondary-constructors" id="java-to-kotlin-interop.md-c7444a45"   >Secondary constructors</a>, if a class has default values for all constructor parameters, a public constructor with no arguments will be generated for it. This works even if the <code class="code " id="java-to-kotlin-interop.md-c1ad7352"  >@JvmOverloads</code> annotation is not specified.</p></section><section class="chapter"  ><h2 id="java-to-kotlin-interop.md-checked-exceptions" data-toc="java-to-kotlin-interop#java-to-kotlin-interop.md-checked-exceptions"  >Checked exceptions</h2><p id="java-to-kotlin-interop.md-7009de4c" >Kotlin does not have checked exceptions. So, normally the Java signatures of Kotlin functions do not declare exceptions thrown. Thus, if you have a function in Kotlin like this:</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-67f55bda"         >// example.kt\npackage demo\n\nfun writeToFile() {\n    /*...*/\n    throw IOException()\n}\n</div><p id="java-to-kotlin-interop.md-c9a70cab" >And you want to call it from Java and catch the exception:</p><div class="code-block" data-lang="java" id="java-to-kotlin-interop.md-e6e5c0ae"         >\n// Java\ntry {\n  demo.Example.writeToFile();\n} catch (IOException e) { // error: writeToFile() does not declare IOException in the throws list\n  // ...\n}\n</div><p id="java-to-kotlin-interop.md-c243c724" >You get an error message from the Java compiler, because <code class="code " id="java-to-kotlin-interop.md-afd1affa"  >writeToFile()</code> does not declare <code class="code " id="java-to-kotlin-interop.md-48fbd1ed"  >IOException</code>. To work around this problem, use the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throws/index.html" id="java-to-kotlin-interop.md-700f144d"   data-external="true" rel="noopener noreferrer" ><code class="code " id="java-to-kotlin-interop.md-b297a2a8"  >@Throws</code></a> annotation in Kotlin:</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-5f99e954"         >@Throws(IOException::class)\nfun writeToFile() {\n    /*...*/\n    throw IOException()\n}\n</div></section><section class="chapter"  ><h2 id="java-to-kotlin-interop.md-null-safety" data-toc="java-to-kotlin-interop#java-to-kotlin-interop.md-null-safety"  >Null-safety</h2><p id="java-to-kotlin-interop.md-419a9079" >When calling Kotlin functions from Java, nobody prevents us from passing <code class="code " id="java-to-kotlin-interop.md-c3b607fd"  >null</code> as a non-null parameter. That\'s why Kotlin generates runtime checks for all public functions that expect non-nulls. This way we get a <code class="code " id="java-to-kotlin-interop.md-e14437e"  >NullPointerException</code> in the Java code immediately.</p></section><section class="chapter"  ><h2 id="java-to-kotlin-interop.md-variant-generics" data-toc="java-to-kotlin-interop#java-to-kotlin-interop.md-variant-generics"  >Variant generics</h2><p id="java-to-kotlin-interop.md-51f379d6" >When Kotlin classes make use of <a href="#generics.md-declaration-site-variance" id="java-to-kotlin-interop.md-766251c2"   >declaration-site variance</a>, there are two options of how their usages are seen from the Java code. For example, imagine you have the following class and two functions that use it:</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-8fdf89c6"         >class Box&lt;out T&gt;(val value: T)\n\ninterface Base\nclass Derived : Base\n\nfun boxDerived(value: Derived): Box&lt;Derived&gt; = Box(value)\nfun unboxBase(box: Box&lt;Base&gt;): Base = box.value\n</div><p id="java-to-kotlin-interop.md-61a5523d" >A naive way of translating these functions into Java would be this:</p><div class="code-block" data-lang="java" id="java-to-kotlin-interop.md-36d9e546"         >Box&lt;Derived&gt; boxDerived(Derived value) { ... }\nBase unboxBase(Box&lt;Base&gt; box) { ... }\n</div><p id="java-to-kotlin-interop.md-62af4706" >The problem is that in Kotlin you can write <code class="code " id="java-to-kotlin-interop.md-ba203d6e"  >unboxBase(boxDerived(Derived()))</code> but in Java that would be impossible because in Java the class <code class="code " id="java-to-kotlin-interop.md-54ad1305"  >Box</code> is <em id="java-to-kotlin-interop.md-a6186068" class=""  >invariant</em> in its parameter <code class="code " id="java-to-kotlin-interop.md-11a036e"  >T</code>, and thus <code class="code " id="java-to-kotlin-interop.md-92a18fa5"  >Box&lt;Derived&gt;</code> is not a subtype of <code class="code " id="java-to-kotlin-interop.md-9474857b"  >Box&lt;Base&gt;</code>. To make this work in Java, you would have to define <code class="code " id="java-to-kotlin-interop.md-58c4d963"  >unboxBase</code> as follows:</p><div class="code-block" data-lang="java" id="java-to-kotlin-interop.md-af6b5e50"         >Base unboxBase(Box&lt;? extends Base&gt; box) { ... }  \n</div><p id="java-to-kotlin-interop.md-76bdafbe" >This declaration uses Java\'s <em id="java-to-kotlin-interop.md-21e6c673" class=""  >wildcards types</em> (<code class="code " id="java-to-kotlin-interop.md-e04ec060"  >? extends Base</code>) to emulate declaration-site variance through use-site variance, because it is all Java has.</p><p id="java-to-kotlin-interop.md-83ccb657" >To make Kotlin APIs work in Java, the compiler generates <code class="code " id="java-to-kotlin-interop.md-231a67a"  >Box&lt;Super&gt;</code> as <code class="code " id="java-to-kotlin-interop.md-808efa8b"  >Box&lt;? extends Super&gt;</code> for covariantly defined <code class="code " id="java-to-kotlin-interop.md-d875990"  >Box</code> (or <code class="code " id="java-to-kotlin-interop.md-a21ca7bb"  >Foo&lt;? super Bar&gt;</code> for contravariantly defined <code class="code " id="java-to-kotlin-interop.md-82bda0b6"  >Foo</code>) when it appears <em id="java-to-kotlin-interop.md-bdfff476" class=""  >as a parameter</em>. When it\'s a return value, wildcards are not generated, because otherwise Java clients will have to deal with them (and it\'s against the common Java coding style). Therefore, the functions from our example are actually translated as follows:</p><div class="code-block" data-lang="java" id="java-to-kotlin-interop.md-a38962b"         >\n// return type - no wildcards\nBox&lt;Derived&gt; boxDerived(Derived value) { ... }\n \n// parameter - wildcards \nBase unboxBase(Box&lt;? extends Base&gt; box) { ... }\n</div><aside data-type="note" class="prompt" data-title="" id="java-to-kotlin-interop.md-b09aa2b4" ><p id="java-to-kotlin-interop.md-b3beb2a2" >When the argument type is final, there\'s usually no point in generating the wildcard, so <code class="code " id="java-to-kotlin-interop.md-4a8d900b"  >Box&lt;String&gt;</code> is always <code class="code " id="java-to-kotlin-interop.md-32eb7d99"  >Box&lt;String&gt;</code>, no matter what position it takes.</p></aside><p id="java-to-kotlin-interop.md-b81e7e1" >If you need wildcards where they are not generated by default, use the <code class="code " id="java-to-kotlin-interop.md-1c532288"  >@JvmWildcard</code> annotation:</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-d3297d7c"         >fun boxDerived(value: Derived): Box&lt;@JvmWildcard Derived&gt; = Box(value)\n// is translated to \n// Box&lt;? extends Derived&gt; boxDerived(Derived value) { ... }\n</div><p id="java-to-kotlin-interop.md-bf739545" >In the opposite case, if you don\'t need wildcards where they are generated, use <code class="code " id="java-to-kotlin-interop.md-3757686c"  >@JvmSuppressWildcards</code>:</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-21dcfbba"         >fun unboxBase(box: Box&lt;@JvmSuppressWildcards Base&gt;): Base = box.value\n// is translated to \n// Base unboxBase(Box&lt;Base&gt; box) { ... }\n</div><aside data-type="note" class="prompt" data-title="" id="java-to-kotlin-interop.md-413c5441" ><p id="java-to-kotlin-interop.md-62db5656" ><code class="code " id="java-to-kotlin-interop.md-3c902eae"  >@JvmSuppressWildcards</code> can be used not only on individual type arguments, but on entire declarations, such as functions or classes, causing all wildcards inside them to be suppressed.</p></aside><section class="chapter"  ><h3 id="java-to-kotlin-interop.md-translation-of-type-nothing" data-toc="java-to-kotlin-interop#java-to-kotlin-interop.md-translation-of-type-nothing"  >Translation of type Nothing</h3><p id="java-to-kotlin-interop.md-5e81e285" >The type <a href="#exceptions.md-the-nothing-type" id="java-to-kotlin-interop.md-744d749a"   ><code class="code " id="java-to-kotlin-interop.md-82be9e05"  >Nothing</code></a> is special, because it has no natural counterpart in Java. Indeed, every Java reference type, including <code class="code " id="java-to-kotlin-interop.md-10b74942"  >java.lang.Void</code>, accepts <code class="code " id="java-to-kotlin-interop.md-5b7cd167"  >null</code> as a value, and <code class="code " id="java-to-kotlin-interop.md-9c439202"  >Nothing</code> doesn\'t accept even that. So, this type cannot be accurately represented in the Java world. This is why Kotlin generates a raw type where an argument of type <code class="code " id="java-to-kotlin-interop.md-3fc90bd8"  >Nothing</code> is used:</p><div class="code-block" data-lang="kotlin" id="java-to-kotlin-interop.md-52f55848"         >fun emptyList(): List&lt;Nothing&gt; = listOf()\n// is translated to\n// List emptyList() { ... }\n</div></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="mixing-java-kotlin-intellij.md"  >Mixing Java and Kotlin in one project – tutorial</h1><p id="mixing-java-kotlin-intellij.md-43bc35ba" >Kotlin provides the first-class interoperability with Java, and modern IDEs make it even better. In this tutorial, you\'ll learn how to use both Kotlin and Java sources in the same project in IntelliJ IDEA. To learn how to start a new Kotlin project in IntelliJ IDEA, see <a href="#jvm-get-started.md" id="mixing-java-kotlin-intellij.md-a6529a39"   >Getting started with IntellJ IDEA</a>.</p><section class="chapter"  ><h2 id="mixing-java-kotlin-intellij.md-adding-java-source-code-to-an-existing-kotlin-project" data-toc="mixing-java-kotlin-intellij#mixing-java-kotlin-intellij.md-adding-java-source-code-to-an-existing-kotlin-project"  >Adding Java source code to an existing Kotlin project</h2><p id="mixing-java-kotlin-intellij.md-cd58024b" >Adding Java classes to a Kotlin project is pretty straightforward. All you need to do is create a new Java file (<b id="mixing-java-kotlin-intellij.md-148fd83" class=""  >Alt + Insert</b>/ <b id="mixing-java-kotlin-intellij.md-d3ce8d16" class=""  >Cmd + N</b>) in a directory or package inside your project.</p><p id="mixing-java-kotlin-intellij.md-e88ca001" ><figure title="Add new Java class"><img alt="Add new Java class" title="Add new Java class" id="mixing-java-kotlin-intellij.md-5bfb8171" src="images/new-java-class.png"  class="" width="400" height="253" /></figure></p><p id="mixing-java-kotlin-intellij.md-f5131429" >If you already have the Java classes, you can just copy them to the project directories.</p><p id="mixing-java-kotlin-intellij.md-cdadb3e4" >You can now consume the Java сlass from Kotlin or vice versa without any further actions.</p><p id="mixing-java-kotlin-intellij.md-d07800eb" >For example, adding the following Java class:</p><div class="code-block" data-lang="java" id="mixing-java-kotlin-intellij.md-c1fd10fe"         >public class Customer {\n\n    private String name;\n\n    public Customer(String s){\n        name = s;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public void placeOrder() {\n        System.out.println(&quot;A new order is placed by &quot; + name);\n    }\n}\n</div><p id="mixing-java-kotlin-intellij.md-3ac36b1f" >lets you call it from Kotlin like any other type in Kotlin.</p><div class="code-block" data-lang="kotlin" id="mixing-java-kotlin-intellij.md-84d9b873"         >val customer = Customer(&quot;Phase&quot;)\nprintln(customer.name)\nprintln(customer.placeOrder())\n</div></section><section class="chapter"  ><h2 id="mixing-java-kotlin-intellij.md-adding-kotlin-source-code-to-an-existing-java-project" data-toc="mixing-java-kotlin-intellij#mixing-java-kotlin-intellij.md-adding-kotlin-source-code-to-an-existing-java-project"  >Adding Kotlin source code to an existing Java project</h2><p id="mixing-java-kotlin-intellij.md-d1908587" >Adding a Kotlin file to an existing Java project is pretty much the same.</p><p id="mixing-java-kotlin-intellij.md-ef06b048" ><figure title="Add new Kotlin file class"><img alt="Add new Kotlin file class" title="Add new Kotlin file class" id="mixing-java-kotlin-intellij.md-f7f9bb2d" src="images/new-kotlin-file.png"  class="" width="600" height="277" /></figure></p><p id="mixing-java-kotlin-intellij.md-5a771b8e" >If this is the first time you\'re adding a Kotlin file to this project, IntelliJ IDEA will prompt you to add the required Kotlin runtime. For a Java project, configure the Kotlin runtime as a <b id="mixing-java-kotlin-intellij.md-7d626814" class=""  >Kotlin Java Module</b>.</p><p id="mixing-java-kotlin-intellij.md-9b7164f1" >The next step is to decide which modules to configure (if the project has more than one module) and whether you want to add the runtime library to the project or use those provided by the current Kotlin plugin.</p><p id="mixing-java-kotlin-intellij.md-4f4dcb70" ><figure title="Bundling Kotlin runtime"><img alt="Bundling Kotlin runtime" title="Bundling Kotlin runtime" id="mixing-java-kotlin-intellij.md-1c33bc19" src="images/bundling-kotlin-option.png"  class="" width="600" height="280" /></figure></p><p id="mixing-java-kotlin-intellij.md-de4b05cd" >You can also open the Kotlin runtime configuration manually from <b id="mixing-java-kotlin-intellij.md-c159b2cc" class=""  >Tools | Kotlin | Configure Kotlin in Project</b>.</p></section><section class="chapter"  ><h2 id="mixing-java-kotlin-intellij.md-converting-an-existing-java-file-to-kotlin-with-j2k" data-toc="mixing-java-kotlin-intellij#mixing-java-kotlin-intellij.md-converting-an-existing-java-file-to-kotlin-with-j2k"  >Converting an existing Java file to Kotlin with J2K</h2><p id="mixing-java-kotlin-intellij.md-211538aa" >The Kotlin plugin also bundles a Java to Kotlin converter (<em id="mixing-java-kotlin-intellij.md-1c04adb0" class=""  >J2K</em>) that automatically converts Java files to Kotlin. To use J2K on a file, click <b id="mixing-java-kotlin-intellij.md-4dad9231" class=""  >Convert Java File to Kotlin File</b> in its context menu or in the <b id="mixing-java-kotlin-intellij.md-116eeec5" class=""  >Code</b> menu of IntelliJ IDEA.</p><p id="mixing-java-kotlin-intellij.md-79d86221" ><figure title="Convert Java to Kotlin"><img alt="Convert Java to Kotlin" title="Convert Java to Kotlin" id="mixing-java-kotlin-intellij.md-1572e87d" src="images/convert-java-to-kotlin.png"  class="" width="500" height="444" /></figure></p><p id="mixing-java-kotlin-intellij.md-124441a7" >While the converter is not fool-proof, it does a pretty decent job of converting most boilerplate code from Java to Kotlin. Some manual tweaking however is sometimes required.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="comparison-to-java.md"  >Comparison to Java</h1><section class="chapter"  ><h2 id="comparison-to-java.md-some-java-issues-addressed-in-kotlin" data-toc="comparison-to-java#comparison-to-java.md-some-java-issues-addressed-in-kotlin"  >Some Java issues addressed in Kotlin</h2><p id="comparison-to-java.md-57015b57" >Kotlin fixes a series of issues that Java suffers from:</p><ul class="list _ul" id="comparison-to-java.md-3b5ec1ce"   ><li class="list__item" id="comparison-to-java.md-cdff88f3" ><p>Null references are <a href="#null-safety.md" id="comparison-to-java.md-9934710d"   >controlled by the type system</a>.</p></li><li class="list__item" id="comparison-to-java.md-3068b9ae" ><a href="#java-interop.md-java-generics-in-kotlin" id="comparison-to-java.md-801834d3"   >No raw types</a></li><li class="list__item" id="comparison-to-java.md-c0c0e865" ><p>Arrays in Kotlin are <a href="#basic-types.md-arrays" id="comparison-to-java.md-f47e00cb"   >invariant</a></p></li><li class="list__item" id="comparison-to-java.md-d39b7efe" ><p>Kotlin has proper <a href="#lambdas.md-function-types" id="comparison-to-java.md-b9aa8fbd"   >function types</a>, as opposed to Java\'s SAM-conversions</p></li><li class="list__item" id="comparison-to-java.md-82375772" ><p><a href="#generics.md-use-site-variance-type-projections" id="comparison-to-java.md-6d2af088"   >Use-site variance</a> without wildcards</p></li><li class="list__item" id="comparison-to-java.md-6c1a8595" ><p>Kotlin does not have checked <a href="#exceptions.md" id="comparison-to-java.md-d273052"   >exceptions</a></p></li></ul></section><section class="chapter"  ><h2 id="comparison-to-java.md-what-java-has-that-kotlin-does-not" data-toc="comparison-to-java#comparison-to-java.md-what-java-has-that-kotlin-does-not"  >What Java has that Kotlin does not</h2><ul class="list _ul" id="comparison-to-java.md-c129428d"   ><li class="list__item" id="comparison-to-java.md-f195f0a4" ><a href="#exceptions.md" id="comparison-to-java.md-21fbdfe1"   >Checked exceptions</a></li><li class="list__item" id="comparison-to-java.md-afdaacf2" ><p><a href="#basic-types.md" id="comparison-to-java.md-79534066"   >Primitive types</a> that are not classes. The byte-code uses primitives where possible, but they are not explicitly available.</p></li><li class="list__item" id="comparison-to-java.md-76b8c06c" ><p><a href="#classes.md" id="comparison-to-java.md-9b04b14b"   >Static members</a> are replaced with <a href="#object-declarations.md-companion-objects" id="comparison-to-java.md-c566e0dc"   >companion objects</a>, <a href="#functions.md" id="comparison-to-java.md-71aea7c2"   >top-level functions</a>, <a href="#extensions.md-extension-functions" id="comparison-to-java.md-bd19d8fe"   >extension functions</a>, or <a href="#java-to-kotlin-interop.md-static-methods" id="comparison-to-java.md-a214da23"   >@JvmStatic</a>.</p></li><li class="list__item" id="comparison-to-java.md-4aac29ed" ><p><a href="#generics.md" id="comparison-to-java.md-cbddac5c"   >Wildcard-types</a> are replaced with <a href="#generics.md-declaration-site-variance" id="comparison-to-java.md-77a94078"   >declaration-site variance</a> and <a href="#generics.md-type-projections" id="comparison-to-java.md-66cc2002"   >type projections</a>.</p></li><li class="list__item" id="comparison-to-java.md-b557c254" ><p><a href="#control-flow.md-if-expression" id="comparison-to-java.md-6b0fe1c7"   >Ternary-operator <code class="code " id="comparison-to-java.md-2db31d49"  >a ? b : c</code></a> is replaced with <a href="#control-flow.md-if-expression" id="comparison-to-java.md-2cad5756"   >if expression</a>.</p></li></ul></section><section class="chapter"  ><h2 id="comparison-to-java.md-what-kotlin-has-that-java-does-not" data-toc="comparison-to-java#comparison-to-java.md-what-kotlin-has-that-java-does-not"  >What Kotlin has that Java does not</h2><ul class="list _ul" id="comparison-to-java.md-a9fbb15a"   ><li class="list__item" id="comparison-to-java.md-507b32d5" ><p><a href="#lambdas.md" id="comparison-to-java.md-e8a21bec"   >Lambda expressions</a> + <a href="#inline-functions.md" id="comparison-to-java.md-5dd1c4d0"   >Inline functions</a> = performant custom control structures</p></li><li class="list__item" id="comparison-to-java.md-5c85f72e" ><a href="#extensions.md" id="comparison-to-java.md-d3e6bc14"   >Extension functions</a></li><li class="list__item" id="comparison-to-java.md-42e058fa" ><a href="#null-safety.md" id="comparison-to-java.md-639f9043"   >Null-safety</a></li><li class="list__item" id="comparison-to-java.md-109a9654" ><a href="#typecasts.md" id="comparison-to-java.md-b1ea9013"   >Smart casts</a></li><li class="list__item" id="comparison-to-java.md-fa7d69a" ><a href="#basic-types.md-strings" id="comparison-to-java.md-49b69bd2"   >String templates</a></li><li class="list__item" id="comparison-to-java.md-b175a5a0" ><a href="#properties.md" id="comparison-to-java.md-34339ff9"   >Properties</a></li><li class="list__item" id="comparison-to-java.md-cff8c667" ><a href="#classes.md" id="comparison-to-java.md-39cad40b"   >Primary constructors</a></li><li class="list__item" id="comparison-to-java.md-2936fb8b" ><a href="#delegation.md" id="comparison-to-java.md-d0810215"   >First-class delegation</a></li><li class="list__item" id="comparison-to-java.md-7e8a559d" ><a href="#basic-types.md" id="comparison-to-java.md-628cf580"   >Type inference for variable and property types</a></li><li class="list__item" id="comparison-to-java.md-9a180502" ><a href="#object-declarations.md" id="comparison-to-java.md-7e3b3421"   >Singletons</a></li><li class="list__item" id="comparison-to-java.md-f56afc0f" ><a href="#generics.md" id="comparison-to-java.md-a4cb62a6"   >Declaration-site variance &amp; Type projections</a></li><li class="list__item" id="comparison-to-java.md-7bc1af7c" ><a href="#ranges.md" id="comparison-to-java.md-86c6bdca"   >Range expressions</a></li><li class="list__item" id="comparison-to-java.md-28e2465e" ><a href="#operator-overloading.md" id="comparison-to-java.md-12ff3ff"   >Operator overloading</a></li><li class="list__item" id="comparison-to-java.md-f74e604e" ><a href="#classes.md-companion-objects" id="comparison-to-java.md-4ffff76f"   >Companion objects</a></li><li class="list__item" id="comparison-to-java.md-c7688f67" ><a href="#data-classes.md" id="comparison-to-java.md-d448267b"   >Data classes</a></li><li class="list__item" id="comparison-to-java.md-4ca38d3d" ><a href="#collections-overview.md" id="comparison-to-java.md-2e5f929"   >Separate interfaces for read-only and mutable collections</a></li><li class="list__item" id="comparison-to-java.md-92dc5cfd" ><a href="#coroutines-overview.md" id="comparison-to-java.md-51774c1b"   >Coroutines</a></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="js-get-started.md"  >Get started with Kotlin/JS for React</h1><p id="js-get-started.md-b500bab7" >This tutorial demonstrates how to use IntelliJ IDEA for creating a frontend application with Kotlin/JS for React.</p><p id="js-get-started.md-308296a0" >To get started, install the latest version of <a href="http://www.jetbrains.com/idea/download/index.html" id="js-get-started.md-32bccdde"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA</a>.</p><section class="chapter"  ><h2 id="js-get-started.md-create-an-application" data-toc="js-get-started#js-get-started.md-create-an-application"  >Create an application</h2><p id="js-get-started.md-d8a7c8ae" >Once you\'ve installed IntelliJ IDEA, it\'s time to create your first frontend application based on Kotlin/JS with React.</p><ol class="list _decimal" id="js-get-started.md-77af1b42"   ><li class="list__item" id="js-get-started.md-85c8268" ><p id="js-get-started.md-e370b1c9" >In IntelliJ IDEA, select <b id="js-get-started.md-84827764" class=""  >File</b> | <b id="js-get-started.md-2dca1a8c" class=""  >New</b> | <b id="js-get-started.md-568cf649" class=""  >Project</b>.</p></li><li class="list__item" id="js-get-started.md-e130001a" ><p id="js-get-started.md-cdf8aace" >In the panel on the left, select <b id="js-get-started.md-187944b1" class=""  >Kotlin</b>.</p></li><li class="list__item" id="js-get-started.md-b56453d8" ><p id="js-get-started.md-1671779d" >Enter a project name, select <b id="js-get-started.md-421793ea" class=""  >React Application</b> as the project template, and click <b id="js-get-started.md-73399a4e" class=""  >Next</b>.</p><p id="js-get-started.md-fc56f60b" ><figure title="Create a react application"><img alt="Create a react application" title="Create a react application" id="js-get-started.md-d273ca54" src="images/js-new-project-1.png"  class="" width="2222" height="1264" /></figure></p><p id="js-get-started.md-e02439f3" >By default, your project will use Gradle with Kotlin DSL as the build system.</p></li><li class="list__item" id="js-get-started.md-7b2087aa" ><p id="js-get-started.md-eecb7b1f" >Select the <b id="js-get-started.md-bc88b4dc" class=""  >CSS Support</b> and <b id="js-get-started.md-a920fbe9" class=""  >Use styled-components</b> checkboxes and click <b id="js-get-started.md-8c2b40d9" class=""  >Finish</b>.</p><p id="js-get-started.md-a5f360f8" ><figure title="Configure a frontend application"><img alt="Configure a frontend application" title="Configure a frontend application" id="js-get-started.md-2548a2d8" src="images/js-new-project-2.png"  class="" width="2258" height="1264" /></figure></p></li></ol><p id="js-get-started.md-9fba0972" >Your project opens. By default, you see the file <code class="code " id="js-get-started.md-49b45914"  >build.gradle.kts</code>, which is the build script created by the Project Wizard based on your configuration. It includes the <a href="#js-project-setup.md" id="js-get-started.md-73eb0eab"   ><code class="code " id="js-get-started.md-9e32209f"  >kotlin(&quot;js&quot;)</code> plugin and dependencies</a> required for your frontend application.</p></section><section class="chapter"  ><h2 id="js-get-started.md-run-the-application" data-toc="js-get-started#js-get-started.md-run-the-application"  >Run the application</h2><p id="js-get-started.md-438a2d6e" >Start the application by clicking <b id="js-get-started.md-48ce8b8a" class=""  >Run</b> next to the run configuration at the top of the screen.</p><p id="js-get-started.md-2b980dbf" ><figure title="Running a frontend app"><img alt="Running a frontend app" title="Running a frontend app" id="js-get-started.md-97e7f6cc" src="images/js-run-app.png"  class="" width="500" height="60" /></figure></p><p id="js-get-started.md-3db1727c" >Your default web browser opens the URL <a href="http://localhost:8080/" id="js-get-started.md-e189b679"   data-external="true" rel="noopener noreferrer" >http://localhost:8080/</a> with your frontend application.</p><p id="js-get-started.md-1731b3eb" ><figure title="Web browser with JS application"><img alt="Web browser with JS application" title="Web browser with JS application" id="js-get-started.md-9e9175c2" src="images/js-output-1.png"  class="" width="600" height="68" /></figure></p><p id="js-get-started.md-b84ce1b" >Enter your name in the text box and accept the greetings from your application!</p></section><section class="chapter"  ><h2 id="js-get-started.md-update-the-application" data-toc="js-get-started#js-get-started.md-update-the-application"  >Update the application</h2><section class="chapter"  ><h3 id="js-get-started.md-show-your-name-backwards" data-toc="js-get-started#js-get-started.md-show-your-name-backwards"  >Show your name backwards</h3><ol class="list _decimal" id="js-get-started.md-8231ac6b"   ><li class="list__item" id="js-get-started.md-f7f8a53d" ><p id="js-get-started.md-73ca3449" >Open the file <code class="code " id="js-get-started.md-872b22ba"  >welcome.kt</code> in <code class="code " id="js-get-started.md-8ae8698f"  >src/main/kotlin</code>. <br/> The <code class="code " id="js-get-started.md-16a5b14b"  >src</code> directory contains Kotlin source files and resources. The file <code class="code " id="js-get-started.md-156c2566"  >welcome.kt</code> includes sample code that renders the web page you\'ve just seen.</p><p id="js-get-started.md-91caaddf" ><figure title="Source code for frontend application"><img alt="Source code for frontend application" title="Source code for frontend application" id="js-get-started.md-9d56c439" src="images/js-welcome-kt.png"  class="" width="2074" height="1058" /></figure></p></li><li class="list__item" id="js-get-started.md-317251dc" ><p id="js-get-started.md-797d492c" >Change the code of <code class="code " id="js-get-started.md-89664d83"  >styledDiv</code> to show your name backwards.</p><ul class="list _ul" id="js-get-started.md-5dda7986"   ><li class="list__item" id="js-get-started.md-b2c20910" ><p>Use the standard library function <code class="code " id="js-get-started.md-2927a873"  >reversed()</code> to reverse your name.</p></li><li class="list__item" id="js-get-started.md-e67166ee" ><p>Use a <a href="#basic-types.md-string-templates" id="js-get-started.md-5910bbc4"   >string template</a> for your reversed name by adding a dollar sign <code class="code " id="js-get-started.md-fe7c67fb"  >$</code> and enclosing it in curly braces – <code class="code " id="js-get-started.md-b35a5c43"  >${state.name.reversed()}</code>.</p></li></ul><div class="code-block" data-lang="kotlin" id="js-get-started.md-9f7d85d0"         >styledDiv {\n    css {\n        +WelcomeStyles.textContainer\n    }\n    +&quot;Hello ${state.name}!&quot;\n    +&quot; Your name backwards is ${state.name.reversed()}!&quot;\n}\n</div></li><li class="list__item" id="js-get-started.md-b92a3fea" ><p id="js-get-started.md-110f8661" >Save your changes to the file.</p></li><li class="list__item" id="js-get-started.md-fcc0150e" ><p id="js-get-started.md-99d98f1d" >Go to the browser and enjoy the result. <br/> You will see the changes only if your previous application is still running. If you\'ve stopped your application, <a href="#js-get-started.md-run-the-application" id="js-get-started.md-8a5e4dfd"   >run it again</a>.</p></li></ol><p id="js-get-started.md-9bac86cb" ><figure title="Web browser with a reversed name"><img alt="Web browser with a reversed name" title="Web browser with a reversed name" id="js-get-started.md-59d3766a" src="images/js-output-2.png"  class="" width="600" height="66" /></figure></p></section><section class="chapter"  ><h3 id="js-get-started.md-add-an-image" data-toc="js-get-started#js-get-started.md-add-an-image"  >Add an image</h3><ol class="list _decimal" id="js-get-started.md-8fc0f37c"   ><li class="list__item" id="js-get-started.md-a00a391b" ><p id="js-get-started.md-8add7155" >Open the file <code class="code " id="js-get-started.md-7b63b9c8"  >welcome.kt</code> in <code class="code " id="js-get-started.md-208b9058"  >src/main/kotlin</code>.</p></li><li class="list__item" id="js-get-started.md-a3b7a644" ><p id="js-get-started.md-b4a6a932" >Add a <code class="code " id="js-get-started.md-1e34457a"  >div</code> container with a child image element <code class="code " id="js-get-started.md-75920fca"  >img</code> after the <code class="code " id="js-get-started.md-e61f4a70"  >styledInput</code> block.</p><aside data-type="note" class="prompt" data-title="" id="js-get-started.md-c2c2eb8b" ><p id="js-get-started.md-1d285150" >Make sure that you import the <code class="code " id="js-get-started.md-bae8b3cb"  >react.dom.*</code> and <code class="code " id="js-get-started.md-9dc7e33"  >styled.*</code> packages.</p></aside><div class="code-block" data-lang="kotlin" id="js-get-started.md-ce707168"         >div {\n    img(src = &quot;https://placekitten.com/408/287&quot;) {}\n}\n</div></li><li class="list__item" id="js-get-started.md-49627e10" ><p id="js-get-started.md-3bd6a1d4" >Save your changes to the file.</p></li><li class="list__item" id="js-get-started.md-811c6483" ><p id="js-get-started.md-53e7e523" >Go to the browser and enjoy the result. <br/> You will only see the changes if your previous application is still running. If you\'ve stopped your application, <a href="#js-get-started.md-run-the-application" id="js-get-started.md-15c0cfd8"   >run it again</a>.</p></li></ol><p id="js-get-started.md-b1436c85" ><figure title="Web page with with an image"><img alt="Web page with with an image" title="Web page with with an image" id="js-get-started.md-7aa78cd2" src="images/js-output-3.png"  class="" width="600" height="520" /></figure></p></section><section class="chapter"  ><h3 id="js-get-started.md-add-a-button-that-changes-text" data-toc="js-get-started#js-get-started.md-add-a-button-that-changes-text"  >Add a button that changes text</h3><ol class="list _decimal" id="js-get-started.md-d578069e"   ><li class="list__item" id="js-get-started.md-2d791a84" ><p id="js-get-started.md-39fb51df" >Open the file <code class="code " id="js-get-started.md-6da24c75"  >welcome.kt</code> in <code class="code " id="js-get-started.md-24f9ca2a"  >src/main/kotlin</code>.</p></li><li class="list__item" id="js-get-started.md-d832b40a" ><p id="js-get-started.md-dda5cc7" >Add a <code class="code " id="js-get-started.md-34c45665"  >button</code> element with an <code class="code " id="js-get-started.md-8081a59d"  >onClickFunction</code> event handler.</p><aside data-type="note" class="prompt" data-title="" id="js-get-started.md-afce498b" ><p id="js-get-started.md-e000920e" >Make sure that you import the package <code class="code " id="js-get-started.md-7d9bf73a"  >kotlinx.html.js.*</code>.</p></aside><div class="code-block" data-lang="kotlin" id="js-get-started.md-dd0db6de"         >button {\n    attrs.onClickFunction = {\n        setState(\n            WelcomeState(name = &quot;Some name&quot;)\n        )\n    }\n    +&quot;Change name&quot;\n}   \n</div></li><li class="list__item" id="js-get-started.md-f91fe3ff" ><p id="js-get-started.md-b000c21f" >Save your changes to the file.</p></li><li class="list__item" id="js-get-started.md-9dda154a" ><p id="js-get-started.md-29a3202c" >Go to the browser and enjoy the result. <br/> You will only see the changes if your previous application is still running. If you\'ve stopped your application, <a href="#js-get-started.md-run-the-application" id="js-get-started.md-95d1e344"   >run it again</a>.</p></li></ol><p id="js-get-started.md-3046031b" ><figure title="Web page with a button"><img alt="Web page with a button" title="Web page with a button" id="js-get-started.md-105133f3" src="images/js-output-4.png"  class="" width="600" height="520" /></figure></p></section></section><section class="chapter"  ><h2 id="js-get-started.md-what-s-next" data-toc="js-get-started#js-get-started.md-what-s-next"  >What\'s next?</h2><p id="js-get-started.md-46857de4" >Once you have created your first application, you can go to Kotlin hands-on labs and complete long-form tutorials on Kotlin/JS. They include sample projects, which can serve as nice jumping-off points for your own projects, and contain useful snippets and patterns.</p><p id="js-get-started.md-5cbf9c13" >For Kotlin/JS, the following hands-on labs are currently available:</p><ul class="list _ul" id="js-get-started.md-889871e6"   ><li class="list__item" id="js-get-started.md-ea1630e7" ><p id="js-get-started.md-20ed4f3f" ><a href="https://play.kotlinlang.org/hands-on/Building%20Web%20Applications%20with%20React%20and%20Kotlin%20JS/01_Introduction" id="js-get-started.md-219b9d14"   data-external="true" rel="noopener noreferrer" >Building Web Applications with React and Kotlin/JS</a> guides you through the process of building a simple web application using the React framework, shows how a type-safe Kotlin DSL for HTML makes it easy to build reactive DOM elements, and illustrates how to use third-party React components, and how to obtain information from APIs, while writing the whole application logic in pure Kotlin/JS.</p></li><li class="list__item" id="js-get-started.md-f26aa76c" ><p id="js-get-started.md-394b40d3" ><a href="https://play.kotlinlang.org/hands-on/Full%20Stack%20Web%20App%20with%20Kotlin%20Multiplatform/01_Introduction" id="js-get-started.md-466812ac"   data-external="true" rel="noopener noreferrer" >Building a Full Stack Web App with Kotlin Multiplatform</a> teaches the concepts behind building an application that targets Kotlin/JVM and Kotlin/JS by building a client-server application that makes use of shared code, serialization, and other multiplatform paradigms. It also provides a brief introduction to working with Ktor both as a server- and client-side framework.</p></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="js-project-setup.md"  >Set up a Kotlin/JS project</h1><p id="js-project-setup.md-5e160b5e" >Kotlin/JS projects use Gradle as a build system. To let developers easily manage their Kotlin/JS projects, we offer the <code class="code " id="js-project-setup.md-ad845d37"  >kotlin.js</code> Gradle plugin that provides project configuration tools together with helper tasks for automating routines typical for JavaScript development. For example, the plugin downloads the <a href="https://yarnpkg.com/" id="js-project-setup.md-e3ba4d0e"   data-external="true" rel="noopener noreferrer" >Yarn</a> package manager for managing <a href="https://www.npmjs.com/" id="js-project-setup.md-30e8a699"   data-external="true" rel="noopener noreferrer" >npm</a> dependencies in background and can build a JavaScript bundle from a Kotlin project using <a href="https://webpack.js.org/" id="js-project-setup.md-441df79b"   data-external="true" rel="noopener noreferrer" >webpack</a>. Dependency management and configuration adjustments can be done to a large part directly from the Gradle build file, with the option to override automatically generated configurations for full control.</p><p id="js-project-setup.md-f0c4fa54" >To create a Kotlin/JS project in IntelliJ IDEA, go to <b id="js-project-setup.md-dc508646" class=""  >File | New | Project</b>. Then select <b id="js-project-setup.md-4b9e2ffa" class=""  >Kotlin</b> and choose a Kotlin/JS target that suits you best. Don\'t forget to choose the language for the build script: Groovy or Kotlin.</p><p id="js-project-setup.md-dac7d5b9" ><figure title="New project wizard"><img alt="New project wizard" title="New project wizard" id="js-project-setup.md-deb66a5f" src="images/js-project-wizard.png"  class="" width="700" height="398" /></figure></p><p id="js-project-setup.md-a4653a14" >Alternatively, you can apply the <code class="code " id="js-project-setup.md-4fcdac5d"  >org.jetbrains.kotlin.js</code> plugin to a Gradle project manually in the Gradle build file (<code class="code " id="js-project-setup.md-aa3417f5"  >build.gradle</code> or <code class="code " id="js-project-setup.md-e8ca814c"  >build.gradle.kts</code> ).</p><div class="tabs" id="js-project-setup.md-bd3d194b" ><div class="tabs__content" data-gtm="tab" id="js-project-setup.md-d5b7f661"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="js-project-setup.md-d5b7f661"   data-title="Groovy"      >plugins {\n    id \'org.jetbrains.kotlin.js\' version \'1.4.32\'\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="js-project-setup.md-d4c2f7f3"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="js-project-setup.md-d4c2f7f3"   data-title="Kotlin"      >plugins {\n     kotlin(&quot;js&quot;) version &quot;\'1.4.32&quot;\n}\n</div></div></div><p id="js-project-setup.md-d54a8a5a" >The Kotlin/JS Gradle plugin lets you manage aspects of your project in the <code class="code " id="js-project-setup.md-3287bb68"  >kotlin</code> section of the build script.</p><div class="code-block" data-lang="groovy" id="js-project-setup.md-d7befb0d"         >kotlin {\n    //...\n}\n</div><p id="js-project-setup.md-58e7fc16" >Inside the <code class="code " id="js-project-setup.md-91a084df"  >kotlin</code> section, you can manage the following aspects:</p><ul class="list _ul" id="js-project-setup.md-ecd69608"   ><li class="list__item" id="js-project-setup.md-684f4e35" ><p><a href="#js-project-setup.md-execution-environments" id="js-project-setup.md-11fe5757"   >Target execution environment</a>: browser or Node.js</p></li><li class="list__item" id="js-project-setup.md-e51ffe10" ><p><a href="#js-project-setup.md-dependencies" id="js-project-setup.md-405a2a2f"   >Project dependencies</a>: Maven and npm</p></li><li class="list__item" id="js-project-setup.md-e470e94b" ><a href="#js-project-setup.md-run-task" id="js-project-setup.md-c5e161f2"   >Run configuration</a></li><li class="list__item" id="js-project-setup.md-c547779a" ><a href="#js-project-setup.md-test-task" id="js-project-setup.md-7d4b218d"   >Test configuration</a></li><li class="list__item" id="js-project-setup.md-71a42122" ><p><a href="#js-project-setup.md-webpack-bundling" id="js-project-setup.md-c2315a33"   >Bundling</a> and <a href="#js-project-setup.md-css" id="js-project-setup.md-5b2efb0f"   >CSS support</a> for browser projects</p></li><li class="list__item" id="js-project-setup.md-252886bc" ><p><a href="#js-project-setup.md-distribution-target-directory" id="js-project-setup.md-96764e41"   >Target directory</a> and <a href="#js-project-setup.md-module-name" id="js-project-setup.md-1b3f960"   >module name</a></p></li><li class="list__item" id="js-project-setup.md-8a1d3a66" ><a href="#js-project-setup.md-package-json-customization" id="js-project-setup.md-7835458a"   >Project\'s <code class="code " id="js-project-setup.md-d9ce0801"  >package.json</code> file</a></li></ul><section class="chapter"  ><h2 id="js-project-setup.md-execution-environments" data-toc="js-project-setup#js-project-setup.md-execution-environments"  >Execution environments</h2><p id="js-project-setup.md-da4f7954" >Kotlin/JS projects can target two different execution environments:</p><ul class="list _ul" id="js-project-setup.md-ca817f71"   ><li class="list__item" id="js-project-setup.md-b541cf06" ><p>Browser for client-side scripting in browsers</p></li><li class="list__item" id="js-project-setup.md-9cf5362f" ><p><a href="https://nodejs.org/" id="js-project-setup.md-9e0bef97"   data-external="true" rel="noopener noreferrer" >Node.js</a> for running JavaScript code outside of a browser, for example, for server-side scripting.</p></li></ul><p id="js-project-setup.md-c230932a" >To define the target execution environment for a Kotlin/JS project, add the <code class="code " id="js-project-setup.md-f9ef2c2b"  >js</code> section with <code class="code " id="js-project-setup.md-f1129e49"  >browser {}</code> or <code class="code " id="js-project-setup.md-72c0c8f1"  >nodejs {}</code> inside.</p><div class="code-block" data-lang="groovy" id="js-project-setup.md-2107e6dc"         >kotlin {\n    js {\n        browser {\n        }\n        binaries.executable()       \n    }\n}    \n</div><p id="js-project-setup.md-82ee9c6a" >The instruction <code class="code " id="js-project-setup.md-e5bf6587"  >binaries.executable()</code> explicitly instructs the Kotlin compiler to emit executable <code class="code " id="js-project-setup.md-220d66ed"  >.js</code> files. This is the default behavior when using the current Kotlin/JS compiler, but the instruction is explicitly required if you are working with the <a href="#js-ir-compiler.md" id="js-project-setup.md-31b36b82"   >Kotlin/JS IR compiler</a>, or have set <code class="code " id="js-project-setup.md-2054b030"  >kotlin.js.generate.executable.default=false</code> in your <code class="code " id="js-project-setup.md-2c7fe14f"  >gradle.properties</code>. In those cases, omitting <code class="code " id="js-project-setup.md-f774ff25"  >binaries.executable()</code> will cause the compiler to only generate Kotlin-internal library files, which can be used from other projects, but not run on their own. (This is typically faster than creating executable files, and can be a possible optimization when dealing with non-leaf modules of your project.)</p><p id="js-project-setup.md-265af63b" >The Kotlin/JS plugin automatically configures its tasks for working with the selected environment. This includes downloading and installing the required environment and dependencies for running and testing the application. This allows developers to build, run and test simple projects without additional configuration.</p></section><section class="chapter"  ><h2 id="js-project-setup.md-dependencies" data-toc="js-project-setup#js-project-setup.md-dependencies"  >Dependencies</h2><p id="js-project-setup.md-aaa816fb" >Like any other Gradle projects, Kotlin/JS projects support traditional Gradle <a href="https://docs.gradle.org/current/userguide/declaring_dependencies.html" id="js-project-setup.md-a4ef793"   data-external="true" rel="noopener noreferrer" >dependency declarations</a> in the <code class="code " id="js-project-setup.md-5f2816eb"  >dependencies</code> section of the build script.</p><div class="tabs" id="js-project-setup.md-29763efb" ><div class="tabs__content" data-gtm="tab" id="js-project-setup.md-7a4ac8b9"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="js-project-setup.md-7a4ac8b9"   data-title="Groovy"      >dependencies {\n    implementation \'org.example.myproject:1.1.0\'\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="js-project-setup.md-bffa16af"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="js-project-setup.md-bffa16af"   data-title="Kotlin"      >dependencies {\n    implementation(&quot;org.example.myproject&quot;, &quot;1.1.0&quot;)\n}\n</div></div></div><p id="js-project-setup.md-cd63867d" >The Kotlin/JS Gradle plugin also supports dependency declarations for particular source sets in the <code class="code " id="js-project-setup.md-d2657bf8"  >kotlin</code> section of the build script.</p><div class="tabs" id="js-project-setup.md-d61b0976" ><div class="tabs__content" data-gtm="tab" id="js-project-setup.md-5c10fdbd"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="js-project-setup.md-5c10fdbd"   data-title="Groovy"      >kotlin {\n    sourceSets {\n        main {\n            dependencies {\n                implementation \'org.example.myproject:1.1.0\'\n            }\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="js-project-setup.md-181a09be"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="js-project-setup.md-181a09be"   data-title="Kotlin"      >kotlin {\n  sourceSets[&quot;main&quot;].dependencies {\n    implementation(&quot;org.example.myproject&quot;, &quot;1.1.0&quot;)\n  }\n}\n</div></div></div><p id="js-project-setup.md-4ad4cfef" >Please note that not all libraries available for the Kotlin programming language are available when targeting JavaScript: Only libraries that include artifacts for Kotlin/JS can be used.</p><p id="js-project-setup.md-377582ba" >If the library you are adding has dependencies on <a href="#js-project-setup.md-npm-dependencies" id="js-project-setup.md-5686722a"   >packages from npm</a>, Gradle will automatically resolve these transitive dependencies as well.</p><section class="chapter"  ><h3 id="js-project-setup.md-kotlin-standard-libraries" data-toc="js-project-setup#js-project-setup.md-kotlin-standard-libraries"  >Kotlin standard libraries</h3><p id="js-project-setup.md-4854d13c" >The dependency on the Kotlin/JS <a href="https://kotlinlang.org/api/latest/jvm/stdlib/index.html" id="js-project-setup.md-48b8d23e"   data-external="true" rel="noopener noreferrer" >standard library</a> is mandatory for all Kotlin/JS projects, and as such is implicit – no artifacts need to be added.</p><p id="js-project-setup.md-86bc681b" >If your project contains tests written in Kotlin, you should add a dependency on the <a href="https://kotlinlang.org/api/latest/kotlin.test/index.html" id="js-project-setup.md-77557901"   data-external="true" rel="noopener noreferrer" >kotlin.test</a> library:</p><div class="tabs" id="js-project-setup.md-6a9808ae" ><div class="tabs__content" data-gtm="tab" id="js-project-setup.md-c9b898a8"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="js-project-setup.md-c9b898a8"   data-title="Groovy"      >dependencies {\n    testImplementation \'org.jetbrains.kotlin:kotlin-test-js\'\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="js-project-setup.md-496c901e"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="js-project-setup.md-496c901e"   data-title="Kotlin"      >dependencies {\n    testImplementation(kotlin(&quot;test-js&quot;))\n}\n</div></div></div></section><section class="chapter"  ><h3 id="js-project-setup.md-npm-dependencies" data-toc="js-project-setup#js-project-setup.md-npm-dependencies"  >npm dependencies</h3><p id="js-project-setup.md-f0a1b1a9" >In the JavaScript world, the most common way to manage dependencies is <a href="https://www.npmjs.com/" id="js-project-setup.md-95fa6d54"   data-external="true" rel="noopener noreferrer" >npm</a>. It offers the biggest public repository of JavaScript modules.</p><p id="js-project-setup.md-1e1b8bbd" >The Kotlin/JS Gradle plugin lets you declare npm dependencies in the Gradle build script, analogous to how you would declare any other dependencies.</p><p id="js-project-setup.md-324602c0" >To declare an npm dependency, pass its name and version to the <code class="code " id="js-project-setup.md-36f73e27"  >npm()</code> function inside a dependency declaration. You can also specify one or multiple version range based on <a href="https://docs.npmjs.com/misc/semver#versions" id="js-project-setup.md-a452020"   data-external="true" rel="noopener noreferrer" >npm\'s semver syntax</a>.</p><div class="tabs" id="js-project-setup.md-af9156e8" ><div class="tabs__content" data-gtm="tab" id="js-project-setup.md-b9142ef8"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="js-project-setup.md-b9142ef8"   data-title="Groovy"      >dependencies {\n    implementation npm(\'react\', \'&gt; 14.0.0 &lt;=16.9.0\')\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="js-project-setup.md-9d931cd5"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="js-project-setup.md-9d931cd5"   data-title="Kotlin"      >dependencies {\n    implementation(npm(&quot;react&quot;, &quot;&gt; 14.0.0 &lt;=16.9.0&quot;))\n}\n</div></div></div><p id="js-project-setup.md-2badc361" >To download and install your declared dependencies during build time, the plugin manages its own installation of the <a href="https://yarnpkg.com/lang/en/" id="js-project-setup.md-3874ea2"   data-external="true" rel="noopener noreferrer" >Yarn</a> package manager.</p><p id="js-project-setup.md-ffe94c4d" >Besides regular dependencies, there are three more types of dependencies that can be used from the Gradle DSL. To learn more about when each type of dependency can best be used, have a look at the official documentation linked from npm:</p><ul class="list _ul" id="js-project-setup.md-ab6f3164"   ><li class="list__item" id="js-project-setup.md-50bfe97c" ><p><a href="https://docs.npmjs.com/files/package.json#devdependencies" id="js-project-setup.md-46f24b17"   data-external="true" rel="noopener noreferrer" >devDependencies</a>, via <code class="code " id="js-project-setup.md-79afcaad"  >devNpm(...)</code>,</p></li><li class="list__item" id="js-project-setup.md-a1175a24" ><p><a href="https://docs.npmjs.com/files/package.json#optionaldependencies" id="js-project-setup.md-c1e23adb"   data-external="true" rel="noopener noreferrer" >optionalDependencies</a> via <code class="code " id="js-project-setup.md-4f090908"  >optionalNpm(...)</code>, and</p></li><li class="list__item" id="js-project-setup.md-b6c26b7d" ><p><a href="https://docs.npmjs.com/files/package.json#peerdependencies" id="js-project-setup.md-b2641582"   data-external="true" rel="noopener noreferrer" >peerDependencies</a> via <code class="code " id="js-project-setup.md-c338724"  >peerNpm(...)</code>.</p></li></ul><p id="js-project-setup.md-72c934f2" >Once an npm dependency is installed, you can use its API in your code as described in <a href="#js-interop.md" id="js-project-setup.md-7c457f1"   >Calling JS from Kotlin</a>.</p></section></section><section class="chapter"  ><h2 id="js-project-setup.md-run-task" data-toc="js-project-setup#js-project-setup.md-run-task"  >run task</h2><p id="js-project-setup.md-ebfa1151" >The Kotlin/JS plugin provides a <code class="code " id="js-project-setup.md-edfb7bd2"  >run</code> task that lets you run pure Kotlin/JS projects without additional configuration.</p><p id="js-project-setup.md-43221b9a" >For running Kotlin/JS projects in the browser, this task is an alias for the <code class="code " id="js-project-setup.md-ac8b35ae"  >browserDevelopmentRun</code> task (which is also available in Kotlin multiplatform projects). It uses the <a href="https://webpack.js.org/configuration/dev-server/" id="js-project-setup.md-21f8470"   data-external="true" rel="noopener noreferrer" >webpack-dev-server</a> to serve your JavaScript artifacts. If you want to customize the configuration used by <code class="code " id="js-project-setup.md-60b3c89c"  >webpack-dev-server</code>, for example adjust the port the server runs on, use the <a href="#js-project-setup.md-webpack-bundling" id="js-project-setup.md-8341914f"   >webpack configuration file</a>.</p><p id="js-project-setup.md-b2a83ebc" >For running Kotlin/JS projects targeting Node.js, the <code class="code " id="js-project-setup.md-d42bc930"  >run</code> task is an alias for the <code class="code " id="js-project-setup.md-ea2d81dd"  >nodeRun</code> task (which is also available in Kotlin multiplatform projects).</p><p id="js-project-setup.md-87f44bfc" >To run a project, execute the standard lifecycle <code class="code " id="js-project-setup.md-f2c7124a"  >run</code> task, or the alias to which it corresponds:</p><div class="code-block" data-lang="bash" id="js-project-setup.md-7506a1c3"         >./gradlew run\n</div><p id="js-project-setup.md-be59ab87" >To automatically trigger a re-build of your application after making changes to the source files, use the Gradle <a href="https://docs.gradle.org/current/userguide/command_line_interface.html#sec:continuous_build" id="js-project-setup.md-8a6d345f"   data-external="true" rel="noopener noreferrer" >continuous build</a> feature:</p><div class="code-block" data-lang="bash" id="js-project-setup.md-d0bbd921"         >./gradlew run --continuous\n</div><p id="js-project-setup.md-3591d916" >or</p><div class="code-block" data-lang="bash" id="js-project-setup.md-45cb79f9"         >./gradlew run -t\n</div><p id="js-project-setup.md-3a30ca5" >Once the build of your project has succeeded, the <code class="code " id="js-project-setup.md-66d6abb"  >webpack-dev-server</code> will automatically refresh the browser page.</p></section><section class="chapter"  ><h2 id="js-project-setup.md-test-task" data-toc="js-project-setup#js-project-setup.md-test-task"  >test task</h2><p id="js-project-setup.md-db15c939" >The Kotlin/JS Gradle plugin automatically sets up a test infrastructure for projects. For browser projects, it downloads and installs the <a href="https://karma-runner.github.io/" id="js-project-setup.md-c0adee3d"   data-external="true" rel="noopener noreferrer" >Karma</a> test runner with other required dependencies; for Node.js projects, the <a href="https://mochajs.org/" id="js-project-setup.md-2c4d2c0d"   data-external="true" rel="noopener noreferrer" >Mocha</a> test framework is used.</p><p id="js-project-setup.md-d1b8fb8e" >The plugin also provides useful testing features, for example:</p><ul class="list _ul" id="js-project-setup.md-fa247ada"   ><li class="list__item" id="js-project-setup.md-a2072c1a" ><p>Source maps generation</p></li><li class="list__item" id="js-project-setup.md-2891afe9" ><p>Test reports generation</p></li><li class="list__item" id="js-project-setup.md-9522dd5d" ><p>Test run results in the console</p></li></ul><p id="js-project-setup.md-6cb6fd4c" >For running browser tests, the plugin uses <a href="https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md" id="js-project-setup.md-5fc80295"   data-external="true" rel="noopener noreferrer" >Headless Chrome</a> by default. You can also choose other browser to run tests in, by adding the corresponding entries inside the <code class="code " id="js-project-setup.md-656d1b0d"  >useKarma</code> section of the build script:</p><div class="code-block" data-lang="groovy" id="js-project-setup.md-35a9ce14"         >kotlin {\n    js {\n        browser {\n            testTask {\n                useKarma {\n                    useIe()\n                    useSafari()\n                    useFirefox()\n                    useChrome()\n                    useChromeCanary()\n                    useChromeHeadless()\n                    usePhantomJS()\n                    useOpera()\n                }\n            }\n        }\n        binaries.executable()\n        // . . .\n    }\n}\n</div><p id="js-project-setup.md-b3b4af25" >Please note that the Kotlin/JS Gradle plugin does not automatically install these browsers for you, but only uses those that are available in its execution environment. If you are executing Kotlin/JS tests on a continuous integration server, for example, make sure that the browsers you want to test against are installed.</p><p id="js-project-setup.md-c7a908c1" >If you want to skip tests, add the line <code class="code " id="js-project-setup.md-62511056"  >enabled = false</code> to the <code class="code " id="js-project-setup.md-8386f038"  >testTask</code>.</p><div class="code-block" data-lang="groovy" id="js-project-setup.md-9ffdbf66"         >kotlin {\n    js {\n        browser {\n            testTask {\n                enabled = false\n            }\n        }\n        binaries.executable()\n        // . . .\n    }\n}\n</div><p id="js-project-setup.md-f9af1183" >To run tests, execute the standard lifecycle <code class="code " id="js-project-setup.md-82cc5"  >check</code> task:</p><div class="code-block" data-lang="bash" id="js-project-setup.md-adc89d18"         >./gradlew check\n</div><section class="chapter"  ><h3 id="js-project-setup.md-karma-configuration" data-toc="js-project-setup#js-project-setup.md-karma-configuration"  >Karma configuration</h3><p id="js-project-setup.md-b94a5a3a" >The Kotlin/JS Gradle plugin automatically generates a Karma configuration file at build time which includes your settings from the <a href="#js-project-setup.md-test-task" id="js-project-setup.md-a1c5be4f"   ><code class="code " id="js-project-setup.md-bbed519b"  >kotlin.js.browser.testTask.useKarma</code> block</a> in your <code class="code " id="js-project-setup.md-bb76d582"  >build.gradle(.kts)</code>. You can find the file at <code class="code " id="js-project-setup.md-39950063"  >build/js/packages/projectName-test/karma.conf.js</code>. To make adjustments to the configuration used by Karma, place your additional configuration files inside a directory called <code class="code " id="js-project-setup.md-6f5ed6c9"  >karma.config.d</code> in the root of your project. All <code class="code " id="js-project-setup.md-b12590c"  >.js</code> configuration files in this directory will be picked up and are automatically merged into the generated <code class="code " id="js-project-setup.md-7633eecd"  >karma.conf.js</code> at build time.</p><p id="js-project-setup.md-48bd9987" >All karma configuration abilities are well described in Karma\'s <a href="http://karma-runner.github.io/5.0/config/configuration-file.html" id="js-project-setup.md-e9c21c95"   data-external="true" rel="noopener noreferrer" >documentation</a>.</p></section></section><section class="chapter"  ><h2 id="js-project-setup.md-webpack-bundling" data-toc="js-project-setup#js-project-setup.md-webpack-bundling"  >webpack bundling</h2><p id="js-project-setup.md-99bb076c" >For browser targets, the Kotlin/JS plugin uses the widely known <a href="https://webpack.js.org/" id="js-project-setup.md-9398f7e8"   data-external="true" rel="noopener noreferrer" >webpack</a> module bundler.</p><p id="js-project-setup.md-d63d9753" >The Kotlin/JS Gradle plugin automatically generates a standard webpack configuration file at build time which you can find the at <code class="code " id="js-project-setup.md-2e7c0213"  >build/js/packages/projectName/webpack.config.js</code>.</p><p id="js-project-setup.md-191d0733" >The most common webpack adjustments can be made directly via the <code class="code " id="js-project-setup.md-ada452ac"  >kotlin.js.browser.webpackTask</code> configuration block in the Gradle build file:</p><ul class="list _ul" id="js-project-setup.md-58380fa1"   ><li class="list__item" id="js-project-setup.md-9d31b2d0" ><p><code class="code " id="js-project-setup.md-64cf54cb"  >outputFileName</code>- the name of the webpacked output file. It will be generated in <code class="code " id="js-project-setup.md-ca2a31c3"  >&lt;projectDir&gt;/build/distibution/</code> after an execution of a webpack task. The default value is the project name.</p></li><li class="list__item" id="js-project-setup.md-adce9ddf" ><p><code class="code " id="js-project-setup.md-896e8a9f"  >output.libraryTarget</code>- the module system for the webpacked output. Learn more about <a href="#js-modules.md" id="js-project-setup.md-a4973933"   >available module systems for Kotlin/JS projects</a>. The default value is <code class="code " id="js-project-setup.md-c604021"  >umd</code>.</p></li></ul><div class="code-block" data-lang="groovy" id="js-project-setup.md-37f5213a"         >webpackTask {\n    outputFileName = &quot;mycustomfilename.js&quot;\n    output.libraryTarget = &quot;commonjs2&quot;\n}\n</div><p id="js-project-setup.md-777d50c" >You can also configure common webpack settings to use in bundling, running, and testing tasks in the <code class="code " id="js-project-setup.md-bf849279"  >commonWebpackConfig</code> block.</p><p id="js-project-setup.md-b42ea8fc" >If you want to make further adjustments to the webpack configuration, place your additional configuration files inside a directory called <code class="code " id="js-project-setup.md-1367781c"  >webpack.config.d</code> in the root of your project. When building your project, all <code class="code " id="js-project-setup.md-acb53567"  >.js</code> configuration files will automatically be merged into the <code class="code " id="js-project-setup.md-f8a7af59"  >build/js/packages/projectName/webpack.config.js</code> file. To add a new <a href="https://webpack.js.org/loaders/" id="js-project-setup.md-6c2d8da3"   data-external="true" rel="noopener noreferrer" >webpack loader</a>, for example, add the following to a <code class="code " id="js-project-setup.md-1090228b"  >.js</code> file inside the <code class="code " id="js-project-setup.md-82939e95"  >webpack.config.d</code>:</p><div class="code-block" data-lang="groovy" id="js-project-setup.md-d7ca19c3"         >config.module.rules.push({\n    test: /\\.extension$/,\n    loader: \'loader-name\'\n});\n</div><p id="js-project-setup.md-28d9cd95" >All webpack configuration capabilities are well described in its <a href="https://webpack.js.org/concepts/configuration/" id="js-project-setup.md-827c4ed7"   data-external="true" rel="noopener noreferrer" >documentation</a>.</p><p id="js-project-setup.md-3a2acb8a" >For building executable JavaScript artifacts through webpack, the Kotlin/JS plugin contains the <code class="code " id="js-project-setup.md-aab7d71b"  >browserDevelopmentWebpack</code> and <code class="code " id="js-project-setup.md-3fba43d0"  >browserProductionWebpack</code> Gradle tasks.</p><ul class="list _ul" id="js-project-setup.md-e4eca47b"   ><li class="list__item" id="js-project-setup.md-91b4cb3a" ><p id="js-project-setup.md-f661c9d5" ><code class="code " id="js-project-setup.md-c44f4e37"  >browserDevelopmentWebpack</code> creates development artifacts, which are larger in size, but take little time to create. As such, use the <code class="code " id="js-project-setup.md-c1feeb25"  >browserDevelopmentWebpack</code> tasks during active development.</p></li><li class="list__item" id="js-project-setup.md-4ee231c6" ><p id="js-project-setup.md-41ab0b35" ><code class="code " id="js-project-setup.md-e763632a"  >browserProductionWebpack</code> applies <a href="#javascript-dce.md" id="js-project-setup.md-d4ecb707"   >dead code elimination</a> to the generated artifacts and minifies the resulting JavaScript file, which takes more time, but generates executables that are smaller in size. As such, use the <code class="code " id="js-project-setup.md-adc4d7f"  >browserProductionWebpack</code> task when preparing your project for production use.</p></li></ul><p id="js-project-setup.md-901f747" >Execute either of these tasks to obtain the respective artifacts for development or production. The generated files will be available in <code class="code " id="js-project-setup.md-69338a90"  >build/distributions</code> unless <a href="#js-project-setup.md-distribution-target-directory" id="js-project-setup.md-963ce085"   >specified otherwise</a>.</p><div class="code-block" data-lang="bash" id="js-project-setup.md-bac7caac"         >./gradlew browserProductionWebpack\n</div><p id="js-project-setup.md-42b15a68" >Note that these tasks will only be available if your target is configured to generate executable files (via <code class="code " id="js-project-setup.md-b90b3a71"  >binaries.executable()</code> ).</p></section><section class="chapter"  ><h2 id="js-project-setup.md-css" data-toc="js-project-setup#js-project-setup.md-css"  >CSS</h2><p id="js-project-setup.md-2bb44ddd" >The Kotlin/JS Gradle plugin also provides support for webpack\'s <a href="https://webpack.js.org/loaders/css-loader/" id="js-project-setup.md-89296da4"   data-external="true" rel="noopener noreferrer" >CSS</a> and <a href="https://webpack.js.org/loaders/style-loader/" id="js-project-setup.md-bab7d68e"   data-external="true" rel="noopener noreferrer" >style</a> loaders. While all options can be changed by directly modifying the <a href="#js-project-setup.md-webpack-bundling" id="js-project-setup.md-93684901"   >webpack configuration files</a> that are used to build your project, the most commonly used settings are available directly from the <code class="code " id="js-project-setup.md-5413014c"  >build.gradle(.kts)</code> file.</p><p id="js-project-setup.md-a72ee901" >To turn on CSS support in your project, set the <code class="code " id="js-project-setup.md-18dfd2d6"  >cssSupport.enabled</code> flag in the Gradle build file in the <code class="code " id="js-project-setup.md-c17bf077"  >commonWbpackConfig</code> block. This configuration is also enabled by default when creating a new project using the wizard.</p><div class="code-block" data-lang="groovy" id="js-project-setup.md-ec4ffe65"         >browser {\n    commonWebpackConfig {\n        cssSupport.enabled = true\n    }\n    binaries.executable()\n}\n</div><p id="js-project-setup.md-d0deedc7" >Alternatively, you can add CSS support independently for <code class="code " id="js-project-setup.md-4741cd7b"  >webpackTask</code>, <code class="code " id="js-project-setup.md-703ce825"  >runTask</code>, and <code class="code " id="js-project-setup.md-c429beb3"  >testTask</code>.</p><div class="code-block" data-lang="groovy" id="js-project-setup.md-ba6bfd"         >webpackTask {\n   cssSupport.enabled = true\n}\nrunTask {\n   cssSupport.enabled = true\n}\ntestTask {\n   useKarma {\n      // . . .\n      webpackConfig.cssSupport.enabled = true\n   }\n}\n</div><p id="js-project-setup.md-3ee71157" >Activating CSS support in your project helps prevent common errors that occur when trying to use style sheets from an unconfigured project, such as <code class="code " id="js-project-setup.md-cac34d0a"  >Module parse failed: Unexpected character \'@\' (14:0)</code>.</p><p id="js-project-setup.md-ce53f292" >You can use <code class="code " id="js-project-setup.md-933c1f3f"  >cssSupport.mode</code> to specify how encountered CSS should be handled. The following values are available:</p><ul class="list _ul" id="js-project-setup.md-32811871"   ><li class="list__item" id="js-project-setup.md-2102bb20" ><p><code class="code " id="js-project-setup.md-660859c4"  >&quot;inline&quot;</code> (default): styles are added to the global <code class="code " id="js-project-setup.md-ea878e8d"  >&lt;style&gt;</code> tag.</p></li><li class="list__item" id="js-project-setup.md-e14ba288" ><p><code class="code " id="js-project-setup.md-acd6502c"  >&quot;extract&quot;</code>: styles are extracted into a separate file. They can then be included from an HTML page.</p></li><li class="list__item" id="js-project-setup.md-eec49398" ><p><code class="code " id="js-project-setup.md-62184c25"  >&quot;import&quot;</code>: styles are processed as strings. This can be useful if you need access to the CSS from your code (such as <code class="code " id="js-project-setup.md-fc73c547"  >val styles = require(&quot;main.css&quot;)</code> ).</p></li></ul><p id="js-project-setup.md-66e631b1" >To use different modes for the same project, use <code class="code " id="js-project-setup.md-b1f39077"  >cssSupport.rules</code>. Here, you can specify a list of <code class="code " id="js-project-setup.md-14cb6130"  >KotlinWebpackCssRules</code>, each of which define a mode, as well as <a href="https://webpack.js.org/configuration/module/#ruleinclude" id="js-project-setup.md-a1f7a67"   data-external="true" rel="noopener noreferrer" >include</a> and <a href="https://webpack.js.org/configuration/module/#ruleexclude" id="js-project-setup.md-eb0c7e23"   data-external="true" rel="noopener noreferrer" >exclude</a> patterns.</p></section><section class="chapter"  ><h2 id="js-project-setup.md-yarn" data-toc="js-project-setup#js-project-setup.md-yarn"  >Yarn</h2><p id="js-project-setup.md-22b51503" >To configure additional Yarn features, place a <code class="code " id="js-project-setup.md-15c52524"  >.yarnrc</code> file in the root of your project. At build time, it gets picked up automatically.</p><p id="js-project-setup.md-dd136062" >For example, to use a custom registry for npm packages, add the following line to a file called <code class="code " id="js-project-setup.md-3a4fd9d"  >.yarnrc</code> in the project root:</p><div class="code-block" data-lang="plaintext" id="js-project-setup.md-905e2c40"         >registry &quot;http://my.registry/api/npm/&quot;\n</div><p id="js-project-setup.md-d551f861" >To learn more about <code class="code " id="js-project-setup.md-c52b492e"  >.yarnrc</code>, please visit the <a href="https://classic.yarnpkg.com/en/docs/yarnrc/" id="js-project-setup.md-e83237c1"   data-external="true" rel="noopener noreferrer" >official Yarn documentation</a>.</p></section><section class="chapter"  ><h2 id="js-project-setup.md-distribution-target-directory" data-toc="js-project-setup#js-project-setup.md-distribution-target-directory"  >Distribution target directory</h2><p id="js-project-setup.md-d6f88417" >By default, the results of a Kotlin/JS project build reside in the <code class="code " id="js-project-setup.md-a19abb3b"  >/build/distribution</code> directory within the project root.</p><p id="js-project-setup.md-d4c27f19" >To set another location for project distribution files, add the <code class="code " id="js-project-setup.md-138d10e8"  >distribution</code> block inside <code class="code " id="js-project-setup.md-f0978aae"  >browser</code> in the build script and assign a value to the <code class="code " id="js-project-setup.md-8832ac44"  >directory</code> property. Once you run a project build task, Gradle will save the output bundle in this location together with project resources.</p><div class="tabs" id="js-project-setup.md-22da74c0" ><div class="tabs__content" data-gtm="tab" id="js-project-setup.md-27eb12e1"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="js-project-setup.md-27eb12e1"   data-title="Groovy"      >kotlin {\n    js {\n        browser {\n            distribution {\n                directory = file(&quot;$projectDir/output/&quot;)\n            }\n        }\n        binaries.executable()\n        // . . .\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="js-project-setup.md-1c2be131"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="js-project-setup.md-1c2be131"   data-title="Kotlin"      >kotlin {\n    js {\n        browser {\n            distribution {\n                directory = File(&quot;$projectDir/output/&quot;)\n            }\n        }\n        binaries.executable()\n        // . . .\n    }\n}\n</div></div></div></section><section class="chapter"  ><h2 id="js-project-setup.md-module-name" data-toc="js-project-setup#js-project-setup.md-module-name"  >Module name</h2><p id="js-project-setup.md-5b848fd8" >To adjust the name for the JavaScript <em id="js-project-setup.md-84bdf7c9" class=""  >module</em> (which is generated in <code class="code " id="js-project-setup.md-9fed7517"  >build/js/packages/myModuleName</code> ), including the corresponding <code class="code " id="js-project-setup.md-4a4b4dc8"  >.js</code> and <code class="code " id="js-project-setup.md-da4ef21a"  >.d.ts</code> files, use the <code class="code " id="js-project-setup.md-ebf5e5a1"  >moduleName</code> option:</p><div class="code-block" data-lang="groovy" id="js-project-setup.md-6b754f41"         >js {\n   moduleName = &quot;myModuleName&quot;\n}\n</div><p id="js-project-setup.md-c9aa0a03" >Note that this does not affect the webpacked output in <code class="code " id="js-project-setup.md-494752e9"  >build/distributions</code>.</p></section><section class="chapter"  ><h2 id="js-project-setup.md-package-json-customization" data-toc="js-project-setup#js-project-setup.md-package-json-customization"  >package.json customization</h2><p id="js-project-setup.md-51e3f813" >The <code class="code " id="js-project-setup.md-cce830e8"  >package.json</code> file holds the metadata of a JavaScript package. Popular package registries such as npm require all published packages to have such a file. They use it to track and manage package publications.</p><p id="js-project-setup.md-924f375e" >The Kotlin/JS Gradle plugin automatically generates <code class="code " id="js-project-setup.md-1581b665"  >package.json</code> for Kotlin/JS projects during build time. By default, the file contains essential data: name, version, license, and dependencies, and some other package attributes.</p><p id="js-project-setup.md-6e0ecd50" >Aside from basic package attributes, <code class="code " id="js-project-setup.md-2f61406d"  >package.json</code> can define how a JavaScript project should behave, for example, identifying scripts that are available to run.</p><p id="js-project-setup.md-166d31a6" >You can add custom entries to the project\'s <code class="code " id="js-project-setup.md-333b71f9"  >package.json</code> via the Gradle DSL. To add custom fields to your <code class="code " id="js-project-setup.md-17e54d6e"  >package.json</code>, use the <code class="code " id="js-project-setup.md-8d4d37db"  >customField</code> function in the compilations <code class="code " id="js-project-setup.md-aa0ddf90"  >packageJson</code> block:</p><div class="code-block" data-lang="kotlin" id="js-project-setup.md-735ee215"         >kotlin {\n    js {\n        compilations[&quot;main&quot;].packageJson {\n            customField(&quot;hello&quot;, mapOf(&quot;one&quot; to 1, &quot;two&quot; to 2))\n        }\n    }\n}\n</div><p id="js-project-setup.md-15699406" >When you build the project, this code will add the following block to the <code class="code " id="js-project-setup.md-b3062e93"  >package.json</code> file:</p> <code class="code " id="js-project-setup.md-beef14f7"  >&quot;hello&quot;: { &quot;one&quot;: 1, &quot;two&quot;: 2 }</code><p id="js-project-setup.md-c420ec36" >Learn more about writing <code class="code " id="js-project-setup.md-94d144f4"  >package.json</code> files for npm registry in the <a href="https://docs.npmjs.com/cli/v6/configuring-npm/package-json" id="js-project-setup.md-30efd96f"   data-external="true" rel="noopener noreferrer" >npm docs</a>.</p></section><section class="chapter"  ><h2 id="js-project-setup.md-troubleshooting" data-toc="js-project-setup#js-project-setup.md-troubleshooting"  >Troubleshooting</h2><p id="js-project-setup.md-d24afdbf" >When building a Kotlin/JS project using Kotlin 1.3.xx, you may encounter a Gradle error if one of your dependencies (or any transitive dependency) was built using Kotlin 1.4 or higher: <code class="code " id="js-project-setup.md-bcf86e7"  >Could not determine the dependencies of task \':client:jsTestPackageJson\'.</code>/ <code class="code " id="js-project-setup.md-e9991dd9"  >Cannot choose between the following variants</code>. This is a known problem, a workaround is provided <a href="https://youtrack.jetbrains.com/issue/KT-40226" id="js-project-setup.md-ed9d9cf3"   data-external="true" rel="noopener noreferrer" >here</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="running-kotlin-js.md"  >Run Kotlin/JS</h1><p id="running-kotlin-js.md-d9a63843" >Since Kotlin/JS projects are managed with the Kotlin/JS Gradle plugin, you can run your project using the appropriate tasks. If you\'re starting with a blank project, ensure that you have some sample code to execute. Create the file <code class="code " id="running-kotlin-js.md-cb23aecf"  >src/main/kotlin/App.kt</code> and fill it with a small &quot;Hello, World&quot;-type code snippet:</p><div class="code-block" data-lang="kotlin" id="running-kotlin-js.md-daa3594d"         >fun main() {\n    console.log(&quot;Hello, Kotlin/JS!&quot;)\n}\n</div><p id="running-kotlin-js.md-697ce0d0" >Depending on the target platform, some platform-specific extra setup might be required to run your code for the first time.</p><section class="chapter"  ><h2 id="running-kotlin-js.md-run-the-node-js-target" data-toc="running-kotlin-js#running-kotlin-js.md-run-the-node-js-target"  >Run the Node.js target</h2><p id="running-kotlin-js.md-7e2f90c1" >When targeting Node.js with Kotlin/JS, you can simply execute the <code class="code " id="running-kotlin-js.md-767bd575"  >run</code> Gradle task. This can be done for example via the command line, using the Gradle wrapper:</p><div class="code-block" data-lang="bash" id="running-kotlin-js.md-bc4e3a2"         >./gradlew run\n</div><p id="running-kotlin-js.md-f3592cdb" >If you\'re using IntelliJ IDEA, you can find the <code class="code " id="running-kotlin-js.md-5ae36b2b"  >run</code> action in the Gradle tool window:</p><p id="running-kotlin-js.md-bd4bada9" ><figure title="Gradle Run task in IntelliJ IDEA"><img alt="Gradle Run task in IntelliJ IDEA" title="Gradle Run task in IntelliJ IDEA" id="running-kotlin-js.md-1dcc97a3" src="images/run-gradle-task.png"  class="" width="2272" height="910" /></figure></p><p id="running-kotlin-js.md-8de64a72" >On first start, the <code class="code " id="running-kotlin-js.md-e0d940d6"  >kotlin.js</code> Gradle plugin will download all required dependencies to get you up and running. After the build is completed, the program is executed, and you can see the logging output in the terminal:</p><p id="running-kotlin-js.md-1d4d2ae6" ><figure title="Executing a Kotlin JS program in IntelliJ IDEA"><img alt="Executing a Kotlin JS program in IntelliJ IDEA" title="Executing a Kotlin JS program in IntelliJ IDEA" id="running-kotlin-js.md-b6a82962" src="images/cli-output.png"  class="" width="2146" height="982" /></figure></p></section><section class="chapter"  ><h2 id="running-kotlin-js.md-run-the-browser-target" data-toc="running-kotlin-js#running-kotlin-js.md-run-the-browser-target"  >Run the browser target</h2><p id="running-kotlin-js.md-1062555a" >When targeting the browser, your project is required to have an HTML page. This page will be served by the development server while you are working on your application, and should embed your compiled Kotlin/JS file. Create and fill an HTML file <code class="code " id="running-kotlin-js.md-af5d7770"  >/src/main/resources/index.html</code>:</p><div class="code-block" data-lang="markup" id="running-kotlin-js.md-1a3e8f78"         >&lt;!doctype html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Hello, Kotlin/JS!&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;script src=&quot;jsTutorial.js&quot;&gt;&lt;/script&gt;\n&lt;/html&gt;\n</div><p id="running-kotlin-js.md-b5f785e6" >By default, the name of your project\'s generated artifact (which is created through webpack) that needs to be referenced is your project name (in this case, <code class="code " id="running-kotlin-js.md-d3e8b70e"  >jsTutorial</code> ). If you\'ve named your project <code class="code " id="running-kotlin-js.md-289ab1cf"  >followAlong</code>, make sure to embed <code class="code " id="running-kotlin-js.md-ec124f10"  >followAlong.js</code> instead of <code class="code " id="running-kotlin-js.md-399c428c"  >jsTutorial.js</code></p><p id="running-kotlin-js.md-191a7d86" >After making these adjustments, start the integrated development server. You can do this from the command line via the Gradle wrapper:</p><div class="code-block" data-lang="bash" id="running-kotlin-js.md-2db65146"         >./gradlew run\n</div><p id="running-kotlin-js.md-31d35499" >When working from IntelliJ IDEA, you can find the <code class="code " id="running-kotlin-js.md-54a0c0c"  >run</code> action in the Gradle tool window.</p><p id="running-kotlin-js.md-1526bdf" >After the project has been built, the embedded <code class="code " id="running-kotlin-js.md-e3bc195"  >webpack-dev-server</code> will start running, and will open a (seemingly empty) browser window pointing to the HTML file you specified previously. To validate that your program is running correctly, open the developer tools of your browser (for example by right-clicking and choosing the <em id="running-kotlin-js.md-ecdddc2c" class=""  >Inspect</em> action). Inside the developer tools, navigate to the console, where you can see the results of the executed JavaScript code:</p><p id="running-kotlin-js.md-da6b90e8" ><figure title="Console output in browser developer tools"><img alt="Console output in browser developer tools" title="Console output in browser developer tools" id="running-kotlin-js.md-ed405ec6" src="images/browser-console-output.png"  class="" width="1912" height="974" /></figure></p><p id="running-kotlin-js.md-3abe7cc" >With this setup, you can recompile your project after each code change to see your changes. Kotlin/JS also supports a more convenient way of automatically rebuilding the application while you are developing it. To find out how to set up this <em id="running-kotlin-js.md-914ab137" class=""  >continuous mode</em>, check out the <a href="#dev-server-continuous-compilation.md" id="running-kotlin-js.md-a21238ed"   >corresponding tutorial</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="dev-server-continuous-compilation.md"  >Development server and continuous compilation</h1><p id="dev-server-continuous-compilation.md-3c29cb38" >Instead of manually compiling and executing a Kotlin/JS project every time you want to see the changes you made, you can use the <em id="dev-server-continuous-compilation.md-c309f724" class=""  >continuous compilation</em> mode. Instead of using the regular <code class="code " id="dev-server-continuous-compilation.md-8cc73e2b"  >run</code> command, invoke the Gradle wrapper in <em id="dev-server-continuous-compilation.md-ba7738c1" class=""  >continuous</em> mode:</p><div class="code-block" data-lang="bash" id="dev-server-continuous-compilation.md-f3f5c43a"         >./gradlew run --continuous\n</div><p id="dev-server-continuous-compilation.md-ad290795" >If you are working in IntelliJ IDEA, you can pass the same flag via the <em id="dev-server-continuous-compilation.md-dbdc99b0" class=""  >run configuration</em>. After running the Gradle <code class="code " id="dev-server-continuous-compilation.md-c76457d5"  >run</code> task for the first time from the IDE, IntelliJ IDEA automatically generates a run configuration for it, which you can edit:</p><p id="dev-server-continuous-compilation.md-9bd3e05d" ><figure title="Editing run configurations in IntelliJ IDEA"><img alt="Editing run configurations in IntelliJ IDEA" title="Editing run configurations in IntelliJ IDEA" id="dev-server-continuous-compilation.md-9b4c127f" src="images/edit-configurations.png"  class="" width="1970" height="1220" /></figure></p><p id="dev-server-continuous-compilation.md-b0ce7edc" >Enabling continuous mode via the <b id="dev-server-continuous-compilation.md-3643e707" class=""  >Run/Debug Configurations</b> dialog is as easy as adding the <code class="code " id="dev-server-continuous-compilation.md-cf3b8b9d"  >--continuous</code> flag to the arguments for the run configuration:</p><p id="dev-server-continuous-compilation.md-69b50431" ><figure title="Adding the continuous flag to a run configuration in IntelliJ IDEA"><img alt="Adding the continuous flag to a run configuration in IntelliJ IDEA" title="Adding the continuous flag to a run configuration in IntelliJ IDEA" id="dev-server-continuous-compilation.md-eec5941b" src="images/run-debug-configurations.png"  class="" width="1626" height="1250" /></figure></p><p id="dev-server-continuous-compilation.md-4ee2645b" >When executing this run configuration, you can note that the Gradle process continues watching for changes to the program:</p><p id="dev-server-continuous-compilation.md-e00acad9" ><figure title="Gradle waiting for changes"><img alt="Gradle waiting for changes" title="Gradle waiting for changes" id="dev-server-continuous-compilation.md-2fc326cf" src="images/waiting-for-changes.png"  class="" width="2584" height="1136" /></figure></p><p id="dev-server-continuous-compilation.md-b4d00b27" >Once a change has been detected, the program will be recompiled automatically. If you still have the page open in the browser, the development server will trigger an automatic reload of the page, and the changes will become visible. This is thanks to the integrated <code class="code " id="dev-server-continuous-compilation.md-deba1ecb"  >webpack-dev-server</code> that is managed by the Kotlin/JS Gradle plugin.</p></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="debugging-kotlin-in-browser.md"  >Debug Kotlin/JS in the browser</h1><p id="debugging-kotlin-in-browser.md-824ebfb6" >Kotlin/JS Gradle plugin automatically generates source maps for the project builds. These enable support for debugging the code using browser development tools. To get started debugging your code, execute the <code class="code " id="debugging-kotlin-in-browser.md-d9022265"  >run</code> task in a project using the JS Gradle plugin, or <code class="code " id="debugging-kotlin-in-browser.md-6dc6a189"  >browserDevelopmentRun</code> in a multiplatform project. Once the development server is running, you can start a debugging session from the browser.</p><p id="debugging-kotlin-in-browser.md-ad9b067a" >To begin debugging, navigate to the page and launch the developer tools of the browser (for example by right-clicking and selecting the <em id="debugging-kotlin-in-browser.md-44b606c3" class=""  >Inspect</em> action). If your program is logging information to the console, navigate to the <em id="debugging-kotlin-in-browser.md-2fa06a3e" class=""  >Console</em> tab to see this output. Depending on your browser and its developer tools, these logs will also reference the Kotlin source files they originate from:</p><p id="debugging-kotlin-in-browser.md-4c62a55f" ><figure title="Chrome DevTools console"><img alt="Chrome DevTools console" title="Chrome DevTools console" id="debugging-kotlin-in-browser.md-7802cc2f" src="images/devtools-console.png"  class="" width="2132" height="800" /></figure></p><p id="debugging-kotlin-in-browser.md-eb4853de" >You can click the file reference on the right to navigate directly to the corresponding statement. Alternatively, you can manually switch to the <em id="debugging-kotlin-in-browser.md-574eab76" class=""  >Sources</em> tab, and find the correct file in the file tree. Navigating to the Kotlin file actually shows you the regular Kotlin code (as opposed to minified JavaScript):</p><p id="debugging-kotlin-in-browser.md-a2290260" ><figure title="Debugging in Chrome DevTools"><img alt="Debugging in Chrome DevTools" title="Debugging in Chrome DevTools" id="debugging-kotlin-in-browser.md-96930400" src="images/devtools-sources.png"  class="" width="2384" height="1254" /></figure></p><p id="debugging-kotlin-in-browser.md-f5d0f0d5" >You can now start debugging the program. For example, set a breakpoint by clicking on one of the line numbers. The developer tools even support setting breakpoints within a statement. As with regular JavaScript code, any set breakpoints will persist across page reloads. This also makes it possible to debug Kotlin\'s main method which is executed when the script is loaded for the first time.</p></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="js-running-tests.md"  >Run tests in Kotlin/JS</h1><p id="js-running-tests.md-ad8f10ce" >The Kotlin/JS Gradle plugin lets you run tests through a variety of test runners that can be specified via the Gradle configuration. In order to make test annotations and functionality available for the JavaScript target, add the correct platform artifact for <a href="https://kotlinlang.org/api/latest/kotlin.test/index.html" id="js-running-tests.md-f78a9b1d"   data-external="true" rel="noopener noreferrer" ><code class="code " id="js-running-tests.md-30a1e"  >kotlin.test</code></a> in <code class="code " id="js-running-tests.md-96ba3f4d"  >build.gradle.kts</code>:</p><div class="code-block" data-lang="kotlin" id="js-running-tests.md-1220024f"         >dependencies {\n    // ...\n    testImplementation(kotlin(&quot;test-js&quot;))\n}\n</div><p id="js-running-tests.md-4d946fbf" >You can tune how tests are executed in Kotlin/JS by adjusting the settings available in the <code class="code " id="js-running-tests.md-9ada7289"  >testTask</code> block in the Gradle build script. For example, using the Karma test runner together with a headless instance of Chrome and an instance of Firefox looks like this:</p><div class="code-block" data-lang="kotlin" id="js-running-tests.md-8051f0"         >target {\n    browser {\n        testTask {\n            useKarma {\n                useChromeHeadless()\n                useFirefox()\n            }\n        }\n    }\n}\n</div><p id="js-running-tests.md-be20b6ed" >For a detailed description of the available functionality, check out the Kotlin/JS reference on <a href="#js-project-setup.md-test-task" id="js-running-tests.md-af3eb2d1"   >configuring the test task</a>.</p><p id="js-running-tests.md-f6be69bb" >Please note that by default, no browsers are bundled with the plugin. This means that you\'ll have to ensure they\'re available on the target system.</p><p id="js-running-tests.md-57b536b2" >To check that tests are executed properly, add a file <code class="code " id="js-running-tests.md-1d00c4ab"  >src/test/kotlin/AppTest.kt</code> and fill it with this content:</p><div class="code-block" data-lang="kotlin" id="js-running-tests.md-33c3152c"         >import kotlin.test.Test\nimport kotlin.test.assertEquals\n\nclass AppTest {\n    @Test\n    fun thingsShouldWork() {\n        assertEquals(listOf(1,2,3).reversed(), listOf(3,2,1))\n    }\n\n    @Test\n    fun thingsShouldBreak() {\n        assertEquals(listOf(1,2,3).reversed(), listOf(1,2,3))\n    }\n}\n</div><p id="js-running-tests.md-dfc795f1" >To run the tests in the browser, execute the <code class="code " id="js-running-tests.md-c6c54700"  >browserTest</code> task via IntelliJ IDEA, or use the gutter icons to execute all or individual tests:</p><p id="js-running-tests.md-cf87d88c" ><figure title="Gradle browserTest task"><img alt="Gradle browserTest task" title="Gradle browserTest task" id="js-running-tests.md-f464036f" src="images/browsertest-task.png"  class="" width="2240" height="944" /></figure></p><p id="js-running-tests.md-e82b72d8" >Alternatively, if you want to run the tests via the command line, use the Gradle wrapper:</p><div class="code-block" data-lang="bash" id="js-running-tests.md-766cb9de"         >./gradlew browserTest\n</div><p id="js-running-tests.md-3083dc76" >After running the tests from IntelliJ IDEA, the <b id="js-running-tests.md-e985b5c0" class=""  >Run</b> tool window will show the test results. You can click failed tests to see their stack trace, and navigate to the corresponding test implementation via a double-click.</p><p id="js-running-tests.md-e8677509" ><figure title="Test results in IntelliJ IDEA"><img alt="Test results in IntelliJ IDEA" title="Test results in IntelliJ IDEA" id="js-running-tests.md-3aaf9e1a" src="images/test-stacktrace-ide.png"  class="" width="3568" height="1670" /></figure></p><p id="js-running-tests.md-8519375a" >After each test run, regardless of how you executed the test, you can find a properly formatted test report from Gradle in <code class="code " id="js-running-tests.md-efa9d723"  >build/reports/tests/browserTest/index.html</code>. Open this file in a browser to see another overview of the test results:</p><p id="js-running-tests.md-502cc0d7" ><figure title="Gradle test summary"><img alt="Gradle test summary" title="Gradle test summary" id="js-running-tests.md-421ac3c5" src="images/test-summary.png"  class="" width="1688" height="1218" /></figure></p><p id="js-running-tests.md-bc146b97" >If you are using the set of example tests shown in the snippet above, one test passes, and one test breaks, which gives the resulting total of 50% successful tests. To get more information about individual test cases, you can navigate via the provided hyperlinks:</p><p id="js-running-tests.md-4dadce0f" ><figure title="Stacktrace of failed test in the Gradle summary"><img alt="Stacktrace of failed test in the Gradle summary" title="Stacktrace of failed test in the Gradle summary" id="js-running-tests.md-848a0947" src="images/failed-test.png"  class="" width="1604" height="1218" /></figure></p></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="javascript-dce.md"  >Kotlin/JS dead code elimination</h1><p id="javascript-dce.md-dba548df" >The Kotlin/JS Gradle plugin includes a <a href="https://wikipedia.org/wiki/Dead_code_elimination" id="javascript-dce.md-214cb7a0"   data-external="true" rel="noopener noreferrer" >dead code elimination</a> (<em id="javascript-dce.md-14c7a3e" class=""  >DCE</em>) tool. Dead code elimination is often also called <em id="javascript-dce.md-db25db5f" class=""  >tree shaking</em>. It reduces the size or the resulting JavaScript code by removing unused properties, functions, and classes.</p><p id="javascript-dce.md-28d1bd51" >Unused declarations can appear in cases like:</p><ul class="list _ul" id="javascript-dce.md-b8fd9cdb"   ><li class="list__item" id="javascript-dce.md-259d7bc4" ><p>A function is inlined and never gets called directly (which happens always except for a few situations).</p></li><li class="list__item" id="javascript-dce.md-76bbd9a3" ><p>A module uses a shared library. Without DCE, parts of the library that you don\'t use are still included in the resulting bundle. For example, the Kotlin standard library contains functions for manipulating lists, arrays, char sequences, adapters for DOM, and so on. All of this functionality would require about 1.3 MB as a JavaScript file. A simple &quot;Hello, world&quot; application only requires console routines, which is only few kilobytes for the entire file.</p></li></ul><p id="javascript-dce.md-d829121f" >The Kotlin/JS Gradle plugin handles DCE automatically when you build a <b id="javascript-dce.md-b4f770cc" class=""  >production bundle</b>, for example by using the <code class="code " id="javascript-dce.md-80595763"  >browserProductionWebpack</code> task. <b id="javascript-dce.md-fb33abdc" class=""  >Development bundling</b> tasks (like <code class="code " id="javascript-dce.md-6f18c7dd"  >browserDevelopmentWebpack</code>) don\'t include DCE.</p><section class="chapter"  ><h2 id="javascript-dce.md-exclude-declarations-from-dce" data-toc="javascript-dce#javascript-dce.md-exclude-declarations-from-dce"  >Exclude declarations from DCE</h2><p id="javascript-dce.md-f0e55c72" >Sometimes you may need to keep a function or a class in the resulting JavaScript code even if you don\'t use it in your module, for example, if you\'re going to use it in the client JavaScript code.</p><p id="javascript-dce.md-774b0c1d" >To keep certain declarations from elimination, add the <code class="code " id="javascript-dce.md-cac464f3"  >dceTask</code> block to your Gradle build script and list the declarations as arguments of the <code class="code " id="javascript-dce.md-3ea06811"  >keep</code> function. An argument must be the declaration\'s fully qualified name with the module name as a prefix: <code class="code " id="javascript-dce.md-1bc66850"  >moduleName.dot.separated.package.name.declarationName</code></p><aside data-type="note" class="prompt" data-title="" id="javascript-dce.md-57d0a71b" ><p id="javascript-dce.md-b40af5b3" >Unless specified otherwise, the names of functions and modules can be <a href="#js-to-kotlin-interop.md-jsname-annotation" id="javascript-dce.md-966f65ef"   >mangled</a> in the generated JavaScript code. To keep such functions from elimination, use the mangled names in the <code class="code " id="javascript-dce.md-7e4b3cb0"  >keep</code> arguments as they appear in the generated JavaScript code.</p></aside><div class="code-block" data-lang="groovy" id="javascript-dce.md-8ce11062"         >kotlin {\n    js {\n        browser {\n            dceTask {\n                keep(&quot;myKotlinJSModule.org.example.getName&quot;, &quot;myKotlinJSModule.org.example.User&quot; )\n            }\n            binaries.executable()\n        }\n    }\n}\n</div><p id="javascript-dce.md-8de96df1" >If you want to keep a whole package or module from elimination, you can use its fully qualified name as it appears in the generated JavaScript code.</p><aside data-type="note" class="prompt" data-title="" id="javascript-dce.md-4ccee09" ><p id="javascript-dce.md-853a9035" >Keeping whole packages or modules from elimination can prevent DCE from removing many unused declarations. Because of this, it is preferable to select individual declarations which should be excluded from DCE one by one.</p></aside></section><section class="chapter"  ><h2 id="javascript-dce.md-disable-dce" data-toc="javascript-dce#javascript-dce.md-disable-dce"  >Disable DCE</h2><p id="javascript-dce.md-a06571fd" >To turn off DCE completely, use the <code class="code " id="javascript-dce.md-dd64cc4b"  >devMode</code> option in the <code class="code " id="javascript-dce.md-54d7798a"  >dceTask</code>:</p><div class="code-block" data-lang="groovy" id="javascript-dce.md-31d6d7bb"         >kotlin {\n    js {\n        browser {\n            dceTask {\n                dceOptions.devMode = true\n            }\n        }\n        binaries.executable()\n    }\n}\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="js-ir-compiler.md"  >Kotlin/JS IR compiler</h1><aside data-type="warning" class="prompt" data-title="" id="js-ir-compiler.md-76b5a070"><p id="js-ir-compiler.md-71b7da6a" >The Kotlin/JS IR compiler is in <a href="#components-stability.md" id="js-ir-compiler.md-6c6f410d"   >Alpha</a>. It may change incompatibly and require manual migration in the future. We appreciate your feedback on it in <a href="https://youtrack.jetbrains.com/issues/KT" id="js-ir-compiler.md-f80ab122"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="js-ir-compiler.md-7b67292f" >The Kotlin/JS IR compiler backend is the main focus of innovation around Kotlin/JS, and paves the way forward for the technology.</p><p id="js-ir-compiler.md-f208e862" >Rather than directly generating JavaScript code from Kotlin source code, the Kotlin/JS IR compiler backend leverages a new approach. Kotlin source code is first transformed into a <a href="#whatsnew14.md-unified-backends-and-extensibility" id="js-ir-compiler.md-c652fe44"   >Kotlin intermediate representation (IR)</a>, which is subsequently compiled into JavaScript. For Kotlin/JS, this enables aggressive optimizations, and allows improvements on pain points that were present in the previous compiler, such as generated code size (through dead code elimination), and JavaScript and TypeScript ecosystem interoperability, to name some examples.</p><p id="js-ir-compiler.md-b20918fd" >The IR compiler backend is available starting with Kotlin 1.4.0 through the Kotlin/JS Gradle plugin. To enable it in your project, pass a compiler type to the <code class="code " id="js-ir-compiler.md-2e6fc834"  >js</code> function in your Gradle build script:</p><div class="code-block" data-lang="groovy" id="js-ir-compiler.md-ff969eb0"         >kotlin {\n    js(IR) { // or: LEGACY, BOTH\n        // . . .\n    }\n    binaries.executable()\n}\n</div><ul class="list _ul" id="js-ir-compiler.md-1b36414d"   ><li class="list__item" id="js-ir-compiler.md-e0f47e91" ><p><code class="code " id="js-ir-compiler.md-39dbdf86"  >IR</code> uses the new IR compiler backend for Kotlin/JS.</p></li><li class="list__item" id="js-ir-compiler.md-f577da65" ><p><code class="code " id="js-ir-compiler.md-cc49dd1a"  >LEGACY</code> uses the default compiler backend.</p></li><li class="list__item" id="js-ir-compiler.md-caf9df8f" ><p><code class="code " id="js-ir-compiler.md-de3983eb"  >BOTH</code> compiles your project with the new IR compiler as well as the default compiler backend. This is mainly useful for authoring libraries that are compatible with both backends, see <a href="#js-ir-compiler.md-authoring-libraries-for-the-ir-compiler-with-backwards-compatibility" id="js-ir-compiler.md-3383b81b"   >below</a>.</p></li></ul><p id="js-ir-compiler.md-d05395a0" >The compiler type can also be set in the <code class="code " id="js-ir-compiler.md-f65da4dd"  >gradle.properties</code> file, with the key <code class="code " id="js-ir-compiler.md-7f0bb839"  >kotlin.js.compiler=ir</code>. This behaviour is overwritten by any settings in the <code class="code " id="js-ir-compiler.md-2d6d4673"  >build.gradle(.kts)</code>, however.</p><section class="chapter"  ><h2 id="js-ir-compiler.md-ignoring-compilation-errors" data-toc="js-ir-compiler#js-ir-compiler.md-ignoring-compilation-errors"  >Ignoring compilation errors</h2><aside data-type="warning" class="prompt" data-title="" id="js-ir-compiler.md-ccd96266"><p id="js-ir-compiler.md-bdfa55ae" ><em id="js-ir-compiler.md-382b68e8" class=""  >Ignore compilation errors</em> mode is <a href="#components-stability.md" id="js-ir-compiler.md-1d7a1940"   >Experimental</a>. It may be dropped or changed at any time. Opt-in is required (see details below). Use it only for evaluation purposes. We appreciate your feedback on it in <a href="https://youtrack.jetbrains.com/issues/KT" id="js-ir-compiler.md-93c6d475"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="js-ir-compiler.md-f40c4b8d" >Kotlin/JS IR compiler provides a new compilation mode unavailable in the default backend – <em id="js-ir-compiler.md-8f937793" class=""  >ignoring compilation errors</em>. In this mode, you can try out your application even while its code contains errors. For example, when you’re doing a complex refactoring or working on a part of the system that is completely unrelated to a compilation error in another part.</p><p id="js-ir-compiler.md-1140d4c6" >With this new compiler mode, the compiler ignores all broken code. Thus, you can run the application and try its parts that don\'t use the broken code. If you try to run the code that was broken during compilation, you\'ll get a runtime exception.</p><p id="js-ir-compiler.md-76b2be8a" >Choose between two tolerance policies for ignoring compilation errors in your code:</p><ul class="list _ul" id="js-ir-compiler.md-23543d03"   ><li class="list__item" id="js-ir-compiler.md-255f5f7f" ><p><code class="code " id="js-ir-compiler.md-29517228"  >SEMANTIC</code>. The compiler will accept code that is syntactically correct but doesn\'t make sense semantically. For example, assigning a number to a string variable (type mismatch).</p></li><li class="list__item" id="js-ir-compiler.md-58d22bd" ><p><code class="code " id="js-ir-compiler.md-ddcc4b9d"  >SYNTAX</code>. The compiler will accept any code, even if it contains syntax errors. Regardless of what you write, the compiler will still try to generate a runnable executable.</p></li></ul><p id="js-ir-compiler.md-519d369d" >As an experimental feature, ignoring compilation errors requires an opt-in. To enable this mode, add the <code class="code " id="js-ir-compiler.md-77b56d26"  >-Xerror-tolerance-policy={SEMANTIC|SYNTAX}</code> compiler option:</p><div class="code-block" data-lang="kotlin" id="js-ir-compiler.md-b473df87"         >kotlin {\n   js(IR) {\n       compilations.all {\n           compileKotlinTask.kotlinOptions.freeCompilerArgs += listOf(&quot;-Xerror-tolerance-policy=SYNTAX&quot;)\n       }\n   }\n}\n</div></section><section class="chapter"  ><h2 id="js-ir-compiler.md-current-limitations-of-the-ir-compiler" data-toc="js-ir-compiler#js-ir-compiler.md-current-limitations-of-the-ir-compiler"  >Current limitations of the IR compiler</h2><p id="js-ir-compiler.md-8b0dfb31" >A major change with the new IR compiler backend is the <b id="js-ir-compiler.md-df46c01c" class=""  >absence of binary compatibility</b> with the default backend. A lack of such compatibility between the two backends for Kotlin/JS means that a library created with the new IR compiler backend can’t be used from the default backend, and vice versa.</p><p id="js-ir-compiler.md-807c6a7a" >If you want to use the IR compiler backend for your project, you need to <b id="js-ir-compiler.md-2dc0a1d8" class=""  >update all Kotlin dependencies to versions that support this new backend</b>. Libraries published by JetBrains for Kotlin 1.4+ targeting Kotlin/JS already contain all artifacts required for usage with the new IR compiler backend.</p><p id="js-ir-compiler.md-cc721dea" ><b id="js-ir-compiler.md-5eaa4e20" class=""  >If you are a library author</b> looking to provide compatibility with the current compiler backend as well as the new IR compiler backend, additionally check out the <a href="#js-ir-compiler.md-authoring-libraries-for-the-ir-compiler-with-backwards-compatibility" id="js-ir-compiler.md-deb99ba9"   >“Authoring libraries for the IR compiler”</a> section.</p><p id="js-ir-compiler.md-8220be5f" >The IR compiler backend also has some discrepancies in comparison to the default backend. When trying out the new backend, it\'s good to be mindful of these possible pitfalls.</p><ul class="list _ul" id="js-ir-compiler.md-738983aa"   ><li class="list__item" id="js-ir-compiler.md-3d84d763" ><p>Currently, the IR backend <b id="js-ir-compiler.md-abccd66b" class=""  >does not generate source maps for Kotlin code</b>. You can follow the progress <a href="https://youtrack.jetbrains.com/issue/KT-39447" id="js-ir-compiler.md-5664daf4"   data-external="true" rel="noopener noreferrer" >on YouTrack</a>.</p></li><li class="list__item" id="js-ir-compiler.md-c4a93e5f" ><p>Some <b id="js-ir-compiler.md-38de44c8" class=""  >libraries that rely on specific characteristics</b> of the default backend, such as <code class="code " id="js-ir-compiler.md-fecbc07c"  >kotlin-wrappers</code>, can display some problems. You can follow the investigation and progress <a href="https://youtrack.jetbrains.com/issue/KT-40525" id="js-ir-compiler.md-3b6b1c43"   data-external="true" rel="noopener noreferrer" >on YouTrack</a>.</p></li><li class="list__item" id="js-ir-compiler.md-7cfc1a69" ><p>The IR backend <b id="js-ir-compiler.md-de108a8c" class=""  >does not make Kotlin declarations available to JavaScript</b> by default at all. To make Kotlin declarations visible to JavaScript, they <b id="js-ir-compiler.md-e0da0759" class=""  >must be</b> annotated with <a href="#js-to-kotlin-interop.md-jsexport-annotation" id="js-ir-compiler.md-66d992a4"   ><code class="code " id="js-ir-compiler.md-c9214f37"  >@JsExport</code></a>.</p></li></ul></section><section class="chapter"  ><h2 id="js-ir-compiler.md-preview-generation-of-typescript-declaration-files-d-ts" data-toc="js-ir-compiler#js-ir-compiler.md-preview-generation-of-typescript-declaration-files-d-ts"  >Preview: generation of TypeScript declaration files (d.ts)</h2><p id="js-ir-compiler.md-830f930f" >The Kotlin/JS IR compiler is capable of generating TypeScript definitions from your Kotlin code. These definitions can be used by JavaScript tools and IDEs when working on hybrid apps to provide autocompletion, support static analyzers, and make it easier to include Kotlin code in JavaScript and TypeScript projects.</p><p id="js-ir-compiler.md-39f88206" >Top-level declarations marked with <a href="#js-to-kotlin-interop.md-jsexport-annotation" id="js-ir-compiler.md-60c9b89e"   ><code class="code " id="js-ir-compiler.md-1b277fb8"  >@JsExport</code></a> in a project that produces executable files (<code class="code " id="js-ir-compiler.md-19378a69"  >binaries.executable()</code>) will get a <code class="code " id="js-ir-compiler.md-1603c350"  >.d.ts</code> file generated, which contains the TypeScript definitions for the exported Kotlin declarations. In Kotlin 1.4, these declarations can be found in <code class="code " id="js-ir-compiler.md-8372d409"  >build/js/packages/&lt;package_name&gt;/kotlin</code> alongside the corresponding, un-webpacked JavaScript code.</p><p id="js-ir-compiler.md-dbb1a3de" >The generation of TypeScript declaration files is a feature exclusive to the IR compiler, and is in active development. If you run into any problems, please submit them to the Kotlin <a href="https://youtrack.jetbrains.com/issues?q=%23%7BKJS:%20d.ts%20generation%7D" id="js-ir-compiler.md-8707701f"   data-external="true" rel="noopener noreferrer" >issue tracker</a> or vote for submitted issues that impact you.</p></section><section class="chapter"  ><h2 id="js-ir-compiler.md-authoring-libraries-for-the-ir-compiler-with-backwards-compatibility" data-toc="js-ir-compiler#js-ir-compiler.md-authoring-libraries-for-the-ir-compiler-with-backwards-compatibility"  >Authoring libraries for the IR compiler with backwards compatibility</h2><p id="js-ir-compiler.md-40d4460c" >If you\'re a library maintainer who is looking to provide compatibility with the default backend as well as the new IR compiler backend, a setting for the compiler selection is available that allows you to create artifacts for both backends, allowing you to keep compatibility for your existing users while providing support for the next generation of Kotlin compiler. This so-called <code class="code " id="js-ir-compiler.md-50061234"  >both</code> -mode can be turned on using the <code class="code " id="js-ir-compiler.md-83e21951"  >kotlin.js.compiler=both</code> setting in your <code class="code " id="js-ir-compiler.md-4bf4c1ad"  >gradle.properties</code> file, or can be set as one of the project-specific options inside your <code class="code " id="js-ir-compiler.md-66963786"  >js</code> block inside the <code class="code " id="js-ir-compiler.md-2f2f46d0"  >build.gradle(.kts)</code> file:</p><div class="code-block" data-lang="groovy" id="js-ir-compiler.md-771f8c2d"         >kotlin {\n    js(BOTH) {\n        // . . .\n    }\n}\n</div><p id="js-ir-compiler.md-e7c87a4b" >When in <code class="code " id="js-ir-compiler.md-88427136"  >both</code> mode, the IR compiler backend and default compiler backend are both used when building a library from your sources (hence the name). This means that both <code class="code " id="js-ir-compiler.md-1ad4a831"  >klib</code> files with Kotlin IR as well as <code class="code " id="js-ir-compiler.md-a0c03a3a"  >jar</code> files for the default compiler will be generated. When published under the same Maven coordinate, Gradle will automatically choose the right artifact depending on the use case – <code class="code " id="js-ir-compiler.md-e2fe083d"  >js</code> for the old compiler, <code class="code " id="js-ir-compiler.md-f78a79d8"  >klib</code> for the new one. This enables you to compile and publish your library for projects that are using either of the two compiler backends.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="browser-api-dom.md"  >Browser and DOM API</h1><p id="browser-api-dom.md-5732c5c2" >The Kotlin/JS standard library lets you access browser-specific functionality using the <code class="code " id="browser-api-dom.md-370e57a"  >kotlinx.browser</code> package, which includes typical top-level objects such as <code class="code " id="browser-api-dom.md-b2695c8a"  >document</code> and <code class="code " id="browser-api-dom.md-2399d032"  >window</code>. The standard library provides typesafe wrappers for the functionality exposed by these objects wherever possible. As a fallback, the <code class="code " id="browser-api-dom.md-e2ac77bf"  >dynamic</code> type is used to provide interaction with functions that do not map well into the Kotlin type system.</p><section class="chapter"  ><h2 id="browser-api-dom.md-interaction-with-the-dom" data-toc="browser-api-dom#browser-api-dom.md-interaction-with-the-dom"  >Interaction with the DOM</h2><p id="browser-api-dom.md-71cf3797" >For interaction with the Document Object Model (DOM), you can use the variable <code class="code " id="browser-api-dom.md-fe5ffd37"  >document</code>. For example, you can set the background color of our website through this object:</p><div class="code-block" data-lang="kotlin" id="browser-api-dom.md-72d5de88"         >document.bgColor = &quot;FFAA12&quot; \n</div><p id="browser-api-dom.md-f61efbe5" >The <code class="code " id="browser-api-dom.md-2d03903"  >document</code> object also provides you a way to retrieve a specific element by ID, name, class name, tag name and so on. All returned elements are of type <code class="code " id="browser-api-dom.md-f9336c0c"  >Element?</code>. To access their properties, you need to cast them to their appropriate type. For example, assume that you have an HTML page with an email <code class="code " id="browser-api-dom.md-754896b6"  >&lt;input&gt;</code> field:</p><div class="code-block" data-lang="markup" id="browser-api-dom.md-42bdae82"         >&lt;body&gt;\n    &lt;input type=&quot;text&quot; name=&quot;email&quot; id=&quot;email&quot;/&gt;\n\n    &lt;script type=&quot;text/javascript&quot; src=&quot;tutorial.js&quot;&gt;&lt;/script&gt;\n&lt;/body&gt;\n</div><p id="browser-api-dom.md-e17ba538" >Note that your script is included at the bottom of the <code class="code " id="browser-api-dom.md-26fb1d1"  >body</code> tag. This ensures that the DOM is fully available before the script is loaded.</p><p id="browser-api-dom.md-c677a4de" >With this setup, you can access elements of the DOM. To access the properties of the <code class="code " id="browser-api-dom.md-23697689"  >input</code> field, invoke <code class="code " id="browser-api-dom.md-f35080ed"  >getElementById</code> and cast it to <code class="code " id="browser-api-dom.md-a7c31df7"  >HTMLInputElement</code>. You can then safely access its properties, such as <code class="code " id="browser-api-dom.md-79cd3234"  >value</code>:</p><div class="code-block" data-lang="kotlin" id="browser-api-dom.md-4bad612"         >val email = document.getElementById(&quot;email&quot;) as HTMLInputElement\nemail.value = &quot;hadi@jetbrains.com&quot;\n</div><p id="browser-api-dom.md-322d2ef3" >Much like you reference this <code class="code " id="browser-api-dom.md-32344ef3"  >input</code> element, you can access other elements on the page, casting them to the appropriate types.</p><p id="browser-api-dom.md-b317625b" >To see how to create and structure elements in the DOM in a concise way, check out the <a href="#typesafe-html-dsl.md" id="browser-api-dom.md-c6803786"   >Typesafe HTML DSL</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="js-interop.md"  >Use JavaScript code from Kotlin</h1><p id="js-interop.md-b3700577" >Kotlin was first designed for easy interoperation with the Java platform: it sees Java classes as Kotlin classes, and Java sees Kotlin classes as Java classes.</p><p id="js-interop.md-17ff1301" >However, JavaScript is a dynamically typed language, which means it does not check types at compile time. You can freely talk to JavaScript from Kotlin via <a href="#dynamic-type.md" id="js-interop.md-16c7edba"   >dynamic</a> types. If you want to use the full power of the Kotlin type system, you can create external declarations for JavaScript libraries which will be understood by the Kotlin compiler and the surrounding tooling.</p><p id="js-interop.md-a487b158" >An experimental tool to automatically create Kotlin external declarations for npm dependencies which provide type definitions (TypeScript / <code class="code " id="js-interop.md-b85f6e99"  >d.ts</code>) called <a href="#js-external-declarations-with-dukat.md" id="js-interop.md-6d2edae8"   >Dukat</a> is also available.</p><section class="chapter"  ><h2 id="js-interop.md-inline-javascript" data-toc="js-interop#js-interop.md-inline-javascript"  >Inline JavaScript</h2><p id="js-interop.md-50476305" >You can inline some JavaScript code into your Kotlin code using the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/js.html" id="js-interop.md-512ef2af"   data-external="true" rel="noopener noreferrer" ><code class="code " id="js-interop.md-f7bb2cab"  >js()</code></a> function. For example:</p><div class="code-block" data-lang="kotlin" id="js-interop.md-88f9a556"         >fun jsTypeOf(o: Any): String {\n    return js(&quot;typeof o&quot;)\n}\n</div><p id="js-interop.md-61a36a4a" >Because the parameter of <code class="code " id="js-interop.md-1aca25d0"  >js</code> is parsed at compile time and translated to JavaScript code &quot;as-is&quot;, it is required to be a string constant. So, the following code is incorrect:</p><div class="code-block" data-lang="kotlin" id="js-interop.md-d0e2137e"         >fun jsTypeOf(o: Any): String {\n    return js(getTypeof() + &quot; o&quot;) // error reported here\n}\nfun getTypeof() = &quot;typeof&quot;\n</div><p id="js-interop.md-7062d687" >Note that invoking <code class="code " id="js-interop.md-b7f68485"  >js()</code> returns a result of type <a href="#dynamic-type.md" id="js-interop.md-5f3eff61"   ><code class="code " id="js-interop.md-41cf53ce"  >dynamic</code></a>, which provides no type safety at the compile time.</p></section><section class="chapter"  ><h2 id="js-interop.md-external-modifier" data-toc="js-interop#js-interop.md-external-modifier"  >external modifier</h2><p id="js-interop.md-3e3b1800" >To tell Kotlin that a certain declaration is written in pure JavaScript, you should mark it with the <code class="code " id="js-interop.md-42d7ce3a"  >external</code> modifier. When the compiler sees such a declaration, it assumes that the implementation for the corresponding class, function or property is provided externally (by the developer or via an <a href="#js-project-setup.md-npm-dependencies" id="js-interop.md-74570ff8"   >npm dependency</a> ), and therefore does not try to generate any JavaScript code from the declaration. This is also why <code class="code " id="js-interop.md-9cd254c4"  >external</code> declarations can\'t have a body. For example:</p><div class="code-block" data-lang="kotlin" id="js-interop.md-46e6f3ee"         >external fun alert(message: Any?): Unit\n\nexternal class Node {\n    val firstChild: Node\n\n    fun append(child: Node): Node\n\n    fun removeChild(child: Node): Node\n\n    // etc\n}\n\nexternal val window: Window\n</div><p id="js-interop.md-6d9b2ecd" >Note that the <code class="code " id="js-interop.md-bb698ff3"  >external</code> modifier is inherited by nested declarations. This is why in the example <code class="code " id="js-interop.md-913bd138"  >Node</code> class, there is no <code class="code " id="js-interop.md-e70705db"  >external</code> modifier before member functions and properties.</p><p id="js-interop.md-4bdae7c3" >The <code class="code " id="js-interop.md-819ef0ca"  >external</code> modifier is only allowed on package-level declarations. You can\'t declare an <code class="code " id="js-interop.md-2fe853e3"  >external</code> member of a non- <code class="code " id="js-interop.md-b8583664"  >external</code> class.</p><section class="chapter"  ><h3 id="js-interop.md-declare-static-members-of-a-class" data-toc="js-interop#js-interop.md-declare-static-members-of-a-class"  >Declare (static) members of a class</h3><p id="js-interop.md-8872dbf2" >In JavaScript you can define members either on a prototype or a class itself:</p><div class="code-block" data-lang="javascript" id="js-interop.md-6d1371dd"         >function MyClass() { ... }\nMyClass.sharedMember = function() { /* implementation */ };\nMyClass.prototype.ownMember = function() { /* implementation */ };\n</div><p id="js-interop.md-e68108d0" >There is no such syntax in Kotlin. However, in Kotlin we have <a href="#object-declarations.md-companion-objects" id="js-interop.md-3725b2cd"   ><code class="code " id="js-interop.md-18a20d9"  >companion</code></a> objects. Kotlin treats companion objects of <code class="code " id="js-interop.md-bc8a3a6b"  >external</code> classes in a special way: instead of expecting an object, it assumes members of companion objects to be members of the class itself. <code class="code " id="js-interop.md-3d9ec586"  >MyClass</code> from the example above can be described as follows:</p><div class="code-block" data-lang="kotlin" id="js-interop.md-9510621e"         >external class MyClass {\n    companion object {\n        fun sharedMember()\n    }\n\n    fun ownMember()\n}\n</div></section><section class="chapter"  ><h3 id="js-interop.md-declare-optional-parameters" data-toc="js-interop#js-interop.md-declare-optional-parameters"  >Declare optional parameters</h3><p id="js-interop.md-dc40a859" >If you are writing an external declaration for a JavaScript function which has an optional parameter, use <code class="code " id="js-interop.md-b58cc8a4"  >definedExternally</code>. This delegates the generation of the default values to the JavaScript function itself:</p><div class="code-block" data-lang="kotlin" id="js-interop.md-cb18c4e1"         >external fun myFunWithOptionalArgs(\n    x: Int,\n    y: String = definedExternally,\n    z: String = definedExternally\n)\n</div><p id="js-interop.md-d2846dff" >With this external declaration, you can call <code class="code " id="js-interop.md-d605a8fc"  >myFunWithOptionalArgs</code> with one required argument and two optional arguments, where the default values are calculated by the JavaScript implementation of <code class="code " id="js-interop.md-438e4682"  >myFunWithOptionalArgs</code>.</p></section><section class="chapter"  ><h3 id="js-interop.md-extend-javascript-classes" data-toc="js-interop#js-interop.md-extend-javascript-classes"  >Extend JavaScript classes</h3><p id="js-interop.md-fdb54f7e" >You can easily extend JavaScript classes as if they were Kotlin classes. Just define an <code class="code " id="js-interop.md-559347ba"  >external open</code> class and extend it by a non- <code class="code " id="js-interop.md-6f169ee2"  >external</code> class. For example:</p><div class="code-block" data-lang="kotlin" id="js-interop.md-69709609"         >open external class Foo {\n    open fun run()\n    fun stop()\n}\n\nclass Bar: Foo() {\n    override fun run() {\n        window.alert(&quot;Running!&quot;)\n    }\n\n    fun restart() {\n        window.alert(&quot;Restarting&quot;)\n    }\n}\n</div><p id="js-interop.md-42850cb5" >There are some limitations:</p><ul class="list _ul" id="js-interop.md-15805822"   ><li class="list__item" id="js-interop.md-b99d07d5" ><p>When a function of an external base class is overloaded by signature, you can\'t override it in a derived class.</p></li><li class="list__item" id="js-interop.md-e2975dd0" ><p>You can\'t override a function with default arguments.</p></li><li class="list__item" id="js-interop.md-b8edeec6" ><p>Non-external classes can\'t be extended by external classes.</p></li></ul></section><section class="chapter"  ><h3 id="js-interop.md-external-interfaces" data-toc="js-interop#js-interop.md-external-interfaces"  >external interfaces</h3><p id="js-interop.md-eb8e49b0" >JavaScript does not have the concept of interfaces. When a function expects its parameter to support two methods <code class="code " id="js-interop.md-c2e34c9b"  >foo</code> and <code class="code " id="js-interop.md-6980d9bf"  >bar</code>, you would just pass in an object that actually has these methods.</p><p id="js-interop.md-f9fc2e51" >You can use interfaces to express this concept in statically typed Kotlin:</p><div class="code-block" data-lang="kotlin" id="js-interop.md-995450ee"         >external interface HasFooAndBar {\n    fun foo()\n\n    fun bar()\n}\n\nexternal fun myFunction(p: HasFooAndBar)\n</div><p id="js-interop.md-58de6b8c" >A typical use case for external interfaces is to describe settings objects. For example:</p><div class="code-block" data-lang="kotlin" id="js-interop.md-1b147419"         >external interface JQueryAjaxSettings {\n    var async: Boolean\n\n    var cache: Boolean\n\n    var complete: (JQueryXHR, String) -&gt; Unit\n\n    // etc\n}\n\nfun JQueryAjaxSettings(): JQueryAjaxSettings = js(&quot;{}&quot;)\n\nexternal class JQuery {\n    companion object {\n        fun get(settings: JQueryAjaxSettings): JQueryXHR\n    }\n}\n\nfun sendQuery() {\n    JQuery.get(JQueryAjaxSettings().apply {\n        complete = { (xhr, data) -&gt;\n            window.alert(&quot;Request complete&quot;)\n        }\n    })\n}\n</div><p id="js-interop.md-8603090b" >External interfaces have some restrictions:</p><ul class="list _ul" id="js-interop.md-c7751717"   ><li class="list__item" id="js-interop.md-5c0f3863" ><p id="js-interop.md-62536abc" >They can\'t be used on the right-hand side of <code class="code " id="js-interop.md-25fe37af"  >is</code> checks.</p></li><li class="list__item" id="js-interop.md-61072aff" ><p id="js-interop.md-4a974558" >They can\'t be passed as reified type arguments.</p></li><li class="list__item" id="js-interop.md-301804a7" ><p id="js-interop.md-3fc04f31" >They can\'t be used in class literal expressions (such as <code class="code " id="js-interop.md-ca991c30"  >I::class</code> ).</p></li><li class="list__item" id="js-interop.md-9a8ac96d" ><p id="js-interop.md-32541bbd" ><code class="code " id="js-interop.md-84098139"  >as</code> casts to external interfaces always succeed. Casting to external interfaces produces the &quot;Unchecked cast to external interface&quot; compile time warning. The warning can be suppressed with the <code class="code " id="js-interop.md-75b9a455"  >@Suppress(&quot;UNCHECKED_CAST_TO_EXTERNAL_INTERFACE&quot;)</code> annotation.</p><p id="js-interop.md-c04a1808" >IntelliJ IDEA can also automatically generate the <code class="code " id="js-interop.md-7e07fec8"  >@Suppress</code> annotation. Open the intentions menu via the light bulb icon or Alt-Enter, and click the small arrow next to the &quot;Unchecked cast to external interface&quot; inspection. Here, you can select the suppression scope, and your IDE will add the annotation to your file accordingly.</p></li></ul></section><section class="chapter"  ><h3 id="js-interop.md-casts" data-toc="js-interop#js-interop.md-casts"  >Casts</h3><p id="js-interop.md-ef656fcf" >In addition to the <a href="#typecasts.md-unsafe-cast-operator" id="js-interop.md-cd8e82dc"   >&quot;unsafe&quot; cast operator</a> <code class="code " id="js-interop.md-27427dc1"  >as</code>, which throws a <code class="code " id="js-interop.md-2b36efbf"  >ClassCastException</code> in case a cast is not possible, Kotlin/JS also provides <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/unsafe-cast.html" id="js-interop.md-39660852"   data-external="true" rel="noopener noreferrer" ><code class="code " id="js-interop.md-e48aeed6"  >unsafeCast&lt;T&gt;()</code></a>. When using <code class="code " id="js-interop.md-c91f967d"  >unsafeCast</code>, <em id="js-interop.md-baaec24b" class=""  >no type checking is done at all</em> during runtime. For example, consider the following two methods:</p><div class="code-block" data-lang="kotlin" id="js-interop.md-1cbc99ae"         >fun usingUnsafeCast(s: Any) = s.unsafeCast&lt;String&gt;()\nfun usingAsOperator(s: Any) = s as String\n</div><p id="js-interop.md-4100c320" >They will be compiled accordingly:</p><div class="code-block" data-lang="javascript" id="js-interop.md-9e7370bb"         >function usingUnsafeCast(s) {\n    return s;\n}\n\nfunction usingAsOperator(s) {\n    var tmp$;\n    return typeof (tmp$ = s) === \'string\' ? tmp$ : throwCCE();\n}\n</div></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="dynamic-type.md"  >Dynamic type</h1><aside data-type="note" class="prompt" data-title="" id="dynamic-type.md-e1c0c677" ><p id="dynamic-type.md-65b00434" >The dynamic type is not supported in code targeting the JVM.</p></aside><p id="dynamic-type.md-33ea934c" >Being a statically typed language, Kotlin still has to interoperate with untyped or loosely typed environments, such as the JavaScript ecosystem. To facilitate these use cases, the <code class="code " id="dynamic-type.md-6b7ed689"  >dynamic</code> type is available in the language:</p><div class="code-block" data-lang="kotlin" id="dynamic-type.md-bcc989"         >val dyn: dynamic = ...\n</div><p id="dynamic-type.md-b2df7733" >The <code class="code " id="dynamic-type.md-17d7f12c"  >dynamic</code> type basically turns off Kotlin\'s type checker:</p><ul class="list _ul" id="dynamic-type.md-561f4fc1"   ><li class="list__item" id="dynamic-type.md-f527dd23" ><p>A value of the <code class="code " id="dynamic-type.md-86cc5e87"  >dynamic</code> type can be assigned to any variable or passed anywhere as a parameter.</p></li><li class="list__item" id="dynamic-type.md-84c6b0cf" ><p>Any value can be assigned to a variable of the <code class="code " id="dynamic-type.md-6d1199cd"  >dynamic</code> type or passed to a function that takes <code class="code " id="dynamic-type.md-a455c8c8"  >dynamic</code> as a parameter.</p></li><li class="list__item" id="dynamic-type.md-f1fb18f2" ><p><code class="code " id="dynamic-type.md-9d6d122d"  >null</code> -checks are disabled for the <code class="code " id="dynamic-type.md-c2bf2c07"  >dynamic</code> type values.</p></li></ul><p id="dynamic-type.md-e15ac266" >The most peculiar feature of <code class="code " id="dynamic-type.md-b8d32b04"  >dynamic</code> is that we are allowed to call <b id="dynamic-type.md-63c8a361" class=""  >any</b> property or function with any parameters on a <code class="code " id="dynamic-type.md-57332745"  >dynamic</code> variable:</p><div class="code-block" data-lang="kotlin" id="dynamic-type.md-db6b80d5"         >dyn.whatever(1, &quot;foo&quot;, dyn) // \'whatever\' is not defined anywhere\ndyn.whatever(*arrayOf(1, 2, 3))\n</div><p id="dynamic-type.md-6bf8cb3" >On the JavaScript platform this code will be compiled &quot;as is&quot;: <code class="code " id="dynamic-type.md-6b21c97"  >dyn.whatever(1)</code> in Kotlin becomes <code class="code " id="dynamic-type.md-f9841a08"  >dyn.whatever(1)</code> in the generated JavaScript code.</p><p id="dynamic-type.md-23e03248" >When calling functions written in Kotlin on values of <code class="code " id="dynamic-type.md-b55278b3"  >dynamic</code> type, keep in mind the name mangling performed by the Kotlin to JavaScript compiler. You may need to use the <a href="#js-to-kotlin-interop.md-jsname-annotation" id="dynamic-type.md-c4f7c97"   >@JsName annotation</a> to assign well-defined names to the functions that you need to call.</p><p id="dynamic-type.md-3c9022ab" >A dynamic call always returns <code class="code " id="dynamic-type.md-a0ab589c"  >dynamic</code> as a result, so you can chain such calls freely:</p><div class="code-block" data-lang="kotlin" id="dynamic-type.md-48d00ef4"         >dyn.foo().bar.baz()\n</div><p id="dynamic-type.md-13843b6a" >When you pass a lambda to a dynamic call, all of its parameters by default have the type <code class="code " id="dynamic-type.md-49a349be"  >dynamic</code>:</p><div class="code-block" data-lang="kotlin" id="dynamic-type.md-607eee5a"         >dyn.foo {\n    x -&gt; x.bar() // x is dynamic\n}\n</div><p id="dynamic-type.md-804f88b" >Expressions using values of <code class="code " id="dynamic-type.md-788ae098"  >dynamic</code> type are translated to JavaScript &quot;as is&quot;, and do not use the Kotlin operator conventions. The following operators are supported:</p><ul class="list _ul" id="dynamic-type.md-9f9d37c6"   ><li class="list__item" id="dynamic-type.md-e73560f4" ><p>binary: <code class="code " id="dynamic-type.md-788ece4d"  >+</code>, <code class="code " id="dynamic-type.md-5158c3a8"  >-</code>, <code class="code " id="dynamic-type.md-f49a318a"  >*</code>, <code class="code " id="dynamic-type.md-b369a91c"  >/</code>, <code class="code " id="dynamic-type.md-7216cc74"  >%</code>, <code class="code " id="dynamic-type.md-afc82557"  >&gt;</code>, <code class="code " id="dynamic-type.md-522a39a2"  >&lt;</code> <code class="code " id="dynamic-type.md-6a1db255"  >&gt;=</code>, <code class="code " id="dynamic-type.md-81600460"  >&lt;=</code>, <code class="code " id="dynamic-type.md-dfd68a42"  >==</code>, <code class="code " id="dynamic-type.md-50f5e9b2"  >!=</code>, <code class="code " id="dynamic-type.md-b0573e47"  >===</code>, <code class="code " id="dynamic-type.md-f6d8cb82"  >!==</code>, <code class="code " id="dynamic-type.md-ee976515"  >&amp;&amp;</code>, <code class="code " id="dynamic-type.md-24f026f9"  >||</code></p></li><li class="list__item" id="dynamic-type.md-84820ea5" >unary <ul class="list _ul" id="dynamic-type.md-5c809191"   ><li class="list__item" id="dynamic-type.md-159d1a4d" ><p>prefix: <code class="code " id="dynamic-type.md-96007c5f"  >-</code>, <code class="code " id="dynamic-type.md-bdd9d38b"  >+</code>, <code class="code " id="dynamic-type.md-8ef72f1a"  >!</code></p></li><li class="list__item" id="dynamic-type.md-f51df129" ><p>prefix and postfix: <code class="code " id="dynamic-type.md-5ed31e74"  >++</code>, <code class="code " id="dynamic-type.md-4a5bbe64"  >--</code></p></li></ul></li><li class="list__item" id="dynamic-type.md-6f4a510e" ><p>assignments: <code class="code " id="dynamic-type.md-7c39089c"  >+=</code>, <code class="code " id="dynamic-type.md-61a598ae"  >-=</code>, <code class="code " id="dynamic-type.md-528a2f95"  >*=</code>, <code class="code " id="dynamic-type.md-1c4700bf"  >/=</code>, <code class="code " id="dynamic-type.md-5195b366"  >%=</code></p></li><li class="list__item" id="dynamic-type.md-736e3754" >indexed access: <ul class="list _ul" id="dynamic-type.md-de3310e"   ><li class="list__item" id="dynamic-type.md-4d98764e" ><p>read: <code class="code " id="dynamic-type.md-c9ed5ca8"  >d[a]</code>, more than one argument is an error</p></li><li class="list__item" id="dynamic-type.md-5537a55d" ><p>write: <code class="code " id="dynamic-type.md-3b5b44d1"  >d[a1] = a2</code>, more than one argument in <code class="code " id="dynamic-type.md-3114ca1f"  >[]</code> is an error</p></li></ul></li></ul><p id="dynamic-type.md-d5596b4e" ><code class="code " id="dynamic-type.md-e776fcb9"  >in</code>, <code class="code " id="dynamic-type.md-ca179748"  >!in</code> and <code class="code " id="dynamic-type.md-2399c452"  >..</code> operations with values of type <code class="code " id="dynamic-type.md-5cf29480"  >dynamic</code> are forbidden.</p><p id="dynamic-type.md-3b5851fc" >For a more technical description, see the <a href="https://github.com/JetBrains/kotlin/blob/master/spec-docs/dynamic-types.md" id="dynamic-type.md-380989ab"   data-external="true" rel="noopener noreferrer" >spec document</a>.</p></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="using-packages-from-npm.md"  >Use dependencies from npm</h1><p id="using-packages-from-npm.md-5823ca0" >In Kotlin/JS projects, all dependencies can be managed through the Gradle plugin. This includes Kotlin/Multiplatform libraries such as <code class="code " id="using-packages-from-npm.md-cbd456da"  >kotlinx.coroutines</code>, <code class="code " id="using-packages-from-npm.md-dc50b61a"  >kotlinx.serialization</code>, or <code class="code " id="using-packages-from-npm.md-8875f332"  >ktor-client</code>.</p><p id="using-packages-from-npm.md-436685df" >For depending on JavaScript packages from <a href="https://www.npmjs.com/" id="using-packages-from-npm.md-ab0a3327"   data-external="true" rel="noopener noreferrer" >npm</a>, the Gradle DSL exposes an <code class="code " id="using-packages-from-npm.md-ad443522"  >npm</code> function that lets you specify packages you want to import from npm. Let\'s consider the import of an NPM package called <a href="https://www.npmjs.com/package/is-sorted" id="using-packages-from-npm.md-d086224d"   data-external="true" rel="noopener noreferrer" ><code class="code " id="using-packages-from-npm.md-3d8870d0"  >is-sorted</code></a>.</p><p id="using-packages-from-npm.md-c733bc8b" >The corresponding part in the Gradle build file looks as follows:</p><div class="code-block" data-lang="kotlin" id="using-packages-from-npm.md-dbdb3436"         >dependencies {\n    // ...\n    implementation(npm(&quot;is-sorted&quot;, &quot;1.0.5&quot;))\n}\n</div><p id="using-packages-from-npm.md-5027d6c1" >Because JavaScript modules are usually dynamically typed and Kotlin is a statically typed language, you need to provide a kind of adapter. In Kotlin, such adapters are called <em id="using-packages-from-npm.md-964b0205" class=""  >external declarations</em>. For the <code class="code " id="using-packages-from-npm.md-5da404f"  >is-sorted</code> package which offers only one function, this declaration is small to write. Inside the source folder, create a new file called <code class="code " id="using-packages-from-npm.md-c983a695"  >is-sorted.kt</code>, and fill it with these contents:</p><div class="code-block" data-lang="kotlin" id="using-packages-from-npm.md-8ddef4b2"         >@JsModule(&quot;is-sorted&quot;)\n@JsNonModule\nexternal fun &lt;T&gt; sorted(a: Array&lt;T&gt;): Boolean\n</div><p id="using-packages-from-npm.md-30972163" >Please note that if you\'re using CommonJS as a target, the <code class="code " id="using-packages-from-npm.md-39f6b194"  >@JsModule</code> and <code class="code " id="using-packages-from-npm.md-536c089f"  >@JsNonModule</code> annotations need to be adjusted accordingly.</p><p id="using-packages-from-npm.md-26f30475" >This JavaScript function can now be used just like a regular Kotlin function. Because we provided type information in the header file (as opposed to simply defining parameter and return type to be <code class="code " id="using-packages-from-npm.md-ce674d12"  >dynamic</code> ), proper compiler support and type-checking is also available.</p><div class="code-block" data-lang="kotlin" id="using-packages-from-npm.md-6094b45a"         >console.log(&quot;Hello, Kotlin/JS!&quot;)\nconsole.log(sorted(arrayOf(1,2,3)))\nconsole.log(sorted(arrayOf(3,1,2)))\n</div><p id="using-packages-from-npm.md-da9076b9" >Running these three lines either in the browser or Node.js, the output shows that the call to <code class="code " id="using-packages-from-npm.md-3a91c83e"  >sorted</code> was properly mapped to the function exported by the <code class="code " id="using-packages-from-npm.md-6a089f43"  >is-sorted</code> package:</p><div class="code-block" data-lang="kotlin" id="using-packages-from-npm.md-50da8c4b"         >Hello, Kotlin/JS!\ntrue\nfalse\n</div><p id="using-packages-from-npm.md-be3c17d8" >Because the JavaScript ecosystem has multiple ways of exposing functions in a package (for example through named or default exports), other npm packages might need a slightly altered structure for their external declarations.</p><p id="using-packages-from-npm.md-47891b30" >To learn more about how to write declarations, please refer to <a href="#js-interop.md" id="using-packages-from-npm.md-c5b529d0"   >Calling JavaScript from Kotlin</a>.</p></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="js-to-kotlin-interop.md"  >Use Kotlin code from JavaScript</h1><p id="js-to-kotlin-interop.md-1cc9e60d" >Depending on the selected <a href="#js-modules.md" id="js-to-kotlin-interop.md-34704e45"   >JavaScript Module</a> system, the Kotlin/JS compiler generates different output. But in general, the Kotlin compiler generates normal JavaScript classes, functions and properties, which you can freely use from JavaScript code. There are some subtle things you should remember, though.</p><section class="chapter"  ><h2 id="js-to-kotlin-interop.md-isolating-declarations-in-a-separate-javascript-object-in-plain-mode" data-toc="js-to-kotlin-interop#js-to-kotlin-interop.md-isolating-declarations-in-a-separate-javascript-object-in-plain-mode"  >Isolating declarations in a separate JavaScript object in plain mode</h2><p id="js-to-kotlin-interop.md-f2b6ccca" >If you have explicitly set your module kind to be <code class="code " id="js-to-kotlin-interop.md-cd15be43"  >plain</code>, Kotlin creates an object that contains all Kotlin declarations from the current module. This is done to prevent spoiling the global object. This means that for a module <code class="code " id="js-to-kotlin-interop.md-934252c8"  >myModule</code>, all declarations are available to JavaScript via the <code class="code " id="js-to-kotlin-interop.md-54a8085e"  >myModule</code> object. For example:</p><div class="code-block" data-lang="kotlin" id="js-to-kotlin-interop.md-4f4e9ea4"         >fun foo() = &quot;Hello&quot;\n</div><p id="js-to-kotlin-interop.md-af3361d7" >Can be called from JavaScript like this:</p><div class="code-block" data-lang="javascript" id="js-to-kotlin-interop.md-7187b0a4"         >alert(myModule.foo());\n</div><p id="js-to-kotlin-interop.md-5ad63fa1" >This is not applicable when you compile your Kotlin module to JavaScript modules like UMD (which is the default setting for both <code class="code " id="js-to-kotlin-interop.md-7bbfd5a0"  >browser</code> and <code class="code " id="js-to-kotlin-interop.md-2a9da13b"  >nodejs</code> targets), CommonJS or AMD. In this case, your declarations will be exposed in the format specified by your chosen JavaScript module system. When using UMD or CommonJS, for example, your call site could look like this:</p><div class="code-block" data-lang="javascript" id="js-to-kotlin-interop.md-f1709a59"         >alert(require(\'myModule\').foo());\n</div><p id="js-to-kotlin-interop.md-46bfb346" >Check the article on <a href="#js-modules.md" id="js-to-kotlin-interop.md-c821833b"   >JavaScript Modules</a> for more information on the topic of JavaScript module systems.</p></section><section class="chapter"  ><h2 id="js-to-kotlin-interop.md-package-structure" data-toc="js-to-kotlin-interop#js-to-kotlin-interop.md-package-structure"  >Package structure</h2><p id="js-to-kotlin-interop.md-6d210f32" >Kotlin exposes its package structure to JavaScript, so unless you define your declarations in the root package, you have to use fully qualified names in JavaScript. For example:</p><div class="code-block" data-lang="kotlin" id="js-to-kotlin-interop.md-e9fcbf4f"         >package my.qualified.packagename\n\nfun foo() = &quot;Hello&quot;\n</div><p id="js-to-kotlin-interop.md-cf8a7522" >When using UMD or CommonJS, for example, your callsite could look like this:</p><div class="code-block" data-lang="javascript" id="js-to-kotlin-interop.md-8ca6a71"         >alert(require(\'myModule\').my.qualified.packagename.foo())\n</div><p id="js-to-kotlin-interop.md-b05f094d" >Or, in the case of using <code class="code " id="js-to-kotlin-interop.md-786af35b"  >plain</code> as a module system setting:</p><div class="code-block" data-lang="javascript" id="js-to-kotlin-interop.md-94b0c1ab"         >alert(myModule.my.qualified.packagename.foo());\n</div><section class="chapter"  ><h3 id="js-to-kotlin-interop.md-jsname-annotation" data-toc="js-to-kotlin-interop#js-to-kotlin-interop.md-jsname-annotation"  >@JsName annotation</h3><p id="js-to-kotlin-interop.md-e2cb7790" >In some cases (for example, to support overloads), the Kotlin compiler mangles the names of generated functions and attributes in JavaScript code. To control the generated names, you can use the <code class="code " id="js-to-kotlin-interop.md-e6eba28c"  >@JsName</code> annotation:</p><div class="code-block" data-lang="kotlin" id="js-to-kotlin-interop.md-c1f4fc64"         >// Module \'kjs\'\nclass Person(val name: String) {\n    fun hello() {\n        println(&quot;Hello $name!&quot;)\n    }\n\n    @JsName(&quot;helloWithGreeting&quot;)\n    fun hello(greeting: String) {\n        println(&quot;$greeting $name!&quot;)\n    }\n}\n</div><p id="js-to-kotlin-interop.md-40a05fc4" >Now you can use this class from JavaScript in the following way:</p><div class="code-block" data-lang="javascript" id="js-to-kotlin-interop.md-adb0c2b8"         >// If necessary, import \'kjs\' according to chosen module system\nvar person = new kjs.Person(&quot;Dmitry&quot;);   // refers to module \'kjs\'\nperson.hello();                          // prints &quot;Hello Dmitry!&quot;\nperson.helloWithGreeting(&quot;Servus&quot;);      // prints &quot;Servus Dmitry!&quot;\n</div><p id="js-to-kotlin-interop.md-dd6d4da5" >If we didn\'t specify the <code class="code " id="js-to-kotlin-interop.md-3d768a21"  >@JsName</code> annotation, the name of the corresponding function would contain a suffix calculated from the function signature, for example <code class="code " id="js-to-kotlin-interop.md-cd1a544b"  >hello_61zpoe$</code>.</p><p id="js-to-kotlin-interop.md-a7ee73a6" >Note that there are some cases in which the Kotlin compiler does not apply mangling:</p><ul class="list _ul" id="js-to-kotlin-interop.md-8517c760"   ><li class="list__item" id="js-to-kotlin-interop.md-933e8ce4" ><p><code class="code " id="js-to-kotlin-interop.md-f9deff85"  >external</code> declarations are not mangled.</p></li><li class="list__item" id="js-to-kotlin-interop.md-4ed42172" ><p>Any overridden functions in non- <code class="code " id="js-to-kotlin-interop.md-6b2b908a"  >external</code> classes inheriting from <code class="code " id="js-to-kotlin-interop.md-a79063ed"  >external</code> classes are not mangled.</p></li></ul><p id="js-to-kotlin-interop.md-208ca815" >The parameter of <code class="code " id="js-to-kotlin-interop.md-8bffd510"  >@JsName</code> is required to be a constant string literal which is a valid identifier. The compiler will report an error on any attempt to pass non-identifier string to <code class="code " id="js-to-kotlin-interop.md-ca136ca3"  >@JsName</code>. The following example produces a compile-time error:</p><div class="code-block" data-lang="kotlin" id="js-to-kotlin-interop.md-1f46c6bb"         >@JsName(&quot;new C()&quot;)   // error here\nexternal fun newC()\n</div></section><section class="chapter"  ><h3 id="js-to-kotlin-interop.md-jsexport-annotation" data-toc="js-to-kotlin-interop#js-to-kotlin-interop.md-jsexport-annotation"  >@JsExport annotation</h3><aside data-type="note" class="prompt" data-title="" id="js-to-kotlin-interop.md-849fb09" ><p id="js-to-kotlin-interop.md-c14d41e5" >The <code class="code " id="js-to-kotlin-interop.md-b8470e1"  >@JsExport</code> annotation is currently marked as experimental. Its design may change in future versions.</p></aside><p id="js-to-kotlin-interop.md-e4a7c1bf" >By applying the <code class="code " id="js-to-kotlin-interop.md-f7025c83"  >@JsExport</code> annotation to a top-level declaration (like a class or function), you make the Kotlin declaration available from JavaScript. The annotation exports all nested declarations with the name given in Kotlin. It can also be applied on file-level using <code class="code " id="js-to-kotlin-interop.md-df27739c"  >@file:JsExport</code>.</p><p id="js-to-kotlin-interop.md-c2e17f7a" >To resolve ambiguities in exports (like overloads for functions with the same name), you can use the <code class="code " id="js-to-kotlin-interop.md-bf2f4a52"  >@JsExport</code> annotation together with <code class="code " id="js-to-kotlin-interop.md-50841e9c"  >@JsName</code> to specify the names for the generated and exported functions.</p><p id="js-to-kotlin-interop.md-9be70539" >The <code class="code " id="js-to-kotlin-interop.md-444b323"  >@JsExport</code> annotation is available in the current default compiler backend and the new <a href="#js-ir-compiler.md" id="js-to-kotlin-interop.md-6eda9de9"   >IR compiler backend</a>. If you are targeting the IR compiler backend, you <b id="js-to-kotlin-interop.md-c910c284" class=""  >must</b> use the <code class="code " id="js-to-kotlin-interop.md-daf4356d"  >@JsExport</code> annotation to make your functions visible from Kotlin in the first place.</p><p id="js-to-kotlin-interop.md-81b57ed3" >For multiplatform projects, <code class="code " id="js-to-kotlin-interop.md-fd6de087"  >@JsExport</code> is available in common code as well. It only has an effect when compiling for the JavaScript target, and allows you to also export Kotlin declarations that are not platform specific.</p></section></section><section class="chapter"  ><h2 id="js-to-kotlin-interop.md-kotlin-types-in-javascript" data-toc="js-to-kotlin-interop#js-to-kotlin-interop.md-kotlin-types-in-javascript"  >Kotlin types in JavaScript</h2><ul class="list _ul" id="js-to-kotlin-interop.md-3b4abdea"   ><li class="list__item" id="js-to-kotlin-interop.md-374da7ed" ><p id="js-to-kotlin-interop.md-b6056c2c" >Kotlin numeric types, except for <code class="code " id="js-to-kotlin-interop.md-233a85cc"  >kotlin.Long</code> are mapped to JavaScript <code class="code " id="js-to-kotlin-interop.md-21d0ae72"  >Number</code>.</p></li><li class="list__item" id="js-to-kotlin-interop.md-7785cea9" ><p id="js-to-kotlin-interop.md-f48057c" ><code class="code " id="js-to-kotlin-interop.md-bbe26fdb"  >kotlin.Char</code> is mapped to JavaScript <code class="code " id="js-to-kotlin-interop.md-ea359529"  >Number</code> representing character code.</p></li><li class="list__item" id="js-to-kotlin-interop.md-6e138e91" ><p id="js-to-kotlin-interop.md-d1ca7590" >Kotlin can\'t distinguish between numeric types at run time (except for <code class="code " id="js-to-kotlin-interop.md-6dcf3ddd"  >kotlin.Long</code> ), so the following code works:</p><div class="code-block" data-lang="kotlin" id="js-to-kotlin-interop.md-e48ba794"         >fun f() {\n    val x: Int = 23\n    val y: Any = x\n    println(y as Float)\n}\n</div></li><li class="list__item" id="js-to-kotlin-interop.md-2d369a9" ><p id="js-to-kotlin-interop.md-1b5c1a15" >Kotlin preserves overflow semantics for <code class="code " id="js-to-kotlin-interop.md-6603e285"  >kotlin.Int</code>, <code class="code " id="js-to-kotlin-interop.md-98f8a17d"  >kotlin.Byte</code>, <code class="code " id="js-to-kotlin-interop.md-49ef5c81"  >kotlin.Short</code>, <code class="code " id="js-to-kotlin-interop.md-19884cca"  >kotlin.Char</code> and <code class="code " id="js-to-kotlin-interop.md-fe6c235d"  >kotlin.Long</code>.</p></li><li class="list__item" id="js-to-kotlin-interop.md-30d4e3f" ><p id="js-to-kotlin-interop.md-f96450dd" ><code class="code " id="js-to-kotlin-interop.md-df978b56"  >kotlin.Long</code> is not mapped to any JavaScript object, as there is no 64-bit integer number type in JavaScript. It is emulated by a Kotlin class.</p></li><li class="list__item" id="js-to-kotlin-interop.md-7593060a" ><p id="js-to-kotlin-interop.md-634d26bc" ><code class="code " id="js-to-kotlin-interop.md-ac999698"  >kotlin.String</code> is mapped to JavaScript <code class="code " id="js-to-kotlin-interop.md-6edac855"  >String</code>.</p></li><li class="list__item" id="js-to-kotlin-interop.md-37fc4dd3" ><p id="js-to-kotlin-interop.md-ebd5a94" ><code class="code " id="js-to-kotlin-interop.md-5a7c86c4"  >kotlin.Any</code> is mapped to JavaScript <code class="code " id="js-to-kotlin-interop.md-723239b3"  >Object</code> (<code class="code " id="js-to-kotlin-interop.md-e359cd64"  >new Object()</code>, <code class="code " id="js-to-kotlin-interop.md-cbeb892"  >{}</code>, and so on).</p></li><li class="list__item" id="js-to-kotlin-interop.md-3510b516" ><p id="js-to-kotlin-interop.md-3b02383d" ><code class="code " id="js-to-kotlin-interop.md-701d90ce"  >kotlin.Array</code> is mapped to JavaScript <code class="code " id="js-to-kotlin-interop.md-4fb92a6a"  >Array</code>.</p></li><li class="list__item" id="js-to-kotlin-interop.md-fd875381" ><p id="js-to-kotlin-interop.md-a5de0475" >Kotlin collections (<code class="code " id="js-to-kotlin-interop.md-467623d1"  >List</code>, <code class="code " id="js-to-kotlin-interop.md-a56b7a1"  >Set</code>, <code class="code " id="js-to-kotlin-interop.md-a3f6ac20"  >Map</code>, and so on) are not mapped to any specific JavaScript type.</p></li><li class="list__item" id="js-to-kotlin-interop.md-95984a5" ><p id="js-to-kotlin-interop.md-f0d2785e" ><code class="code " id="js-to-kotlin-interop.md-2c7743cc"  >kotlin.Throwable</code> is mapped to JavaScript Error.</p></li><li class="list__item" id="js-to-kotlin-interop.md-e7f4d558" ><p id="js-to-kotlin-interop.md-def05036" >Kotlin preserves lazy object initialization in JavaScript.</p></li><li class="list__item" id="js-to-kotlin-interop.md-e3df3156" ><p id="js-to-kotlin-interop.md-ffe57bfc" >Kotlin does not implement lazy initialization of top-level properties in JavaScript.</p></li></ul><section class="chapter"  ><h3 id="js-to-kotlin-interop.md-primitive-arrays" data-toc="js-to-kotlin-interop#js-to-kotlin-interop.md-primitive-arrays"  >Primitive arrays</h3><p id="js-to-kotlin-interop.md-1de7043d" >Primitive array translation utilizes JavaScript <code class="code " id="js-to-kotlin-interop.md-b6019c41"  >TypedArray</code>:</p><ul class="list _ul" id="js-to-kotlin-interop.md-bac75598"   ><li class="list__item" id="js-to-kotlin-interop.md-7068a778" ><p><code class="code " id="js-to-kotlin-interop.md-5e092134"  >kotlin.ByteArray</code>, <code class="code " id="js-to-kotlin-interop.md-48c5dd66"  >-.ShortArray</code>, <code class="code " id="js-to-kotlin-interop.md-da9eaf3a"  >-.IntArray</code>, <code class="code " id="js-to-kotlin-interop.md-fc564fac"  >-.FloatArray</code>, and <code class="code " id="js-to-kotlin-interop.md-3c4782da"  >-.DoubleArray</code> are mapped to JavaScript <code class="code " id="js-to-kotlin-interop.md-641c32dc"  >Int8Array</code>, <code class="code " id="js-to-kotlin-interop.md-c17c5b15"  >Int16Array</code>, <code class="code " id="js-to-kotlin-interop.md-581f362"  >Int32Array</code>, <code class="code " id="js-to-kotlin-interop.md-e53ef324"  >Float32Array</code>, and <code class="code " id="js-to-kotlin-interop.md-3a5aeec9"  >Float64Array</code> correspondingly.</p></li><li class="list__item" id="js-to-kotlin-interop.md-29304c86" ><p><code class="code " id="js-to-kotlin-interop.md-1d98392f"  >kotlin.BooleanArray</code> is mapped to JavaScript <code class="code " id="js-to-kotlin-interop.md-ab5562c7"  >Int8Array</code> with a property <code class="code " id="js-to-kotlin-interop.md-c02fcfd4"  >$type$ == &quot;BooleanArray&quot;</code></p></li><li class="list__item" id="js-to-kotlin-interop.md-72e6c973" ><p><code class="code " id="js-to-kotlin-interop.md-87d6552f"  >kotlin.CharArray</code> is mapped to JavaScript <code class="code " id="js-to-kotlin-interop.md-e11feeda"  >UInt16Array</code> with a property <code class="code " id="js-to-kotlin-interop.md-be51bff7"  >$type$ == &quot;CharArray&quot;</code></p></li><li class="list__item" id="js-to-kotlin-interop.md-a4b9228c" ><p><code class="code " id="js-to-kotlin-interop.md-be595f4"  >kotlin.LongArray</code> is mapped to JavaScript <code class="code " id="js-to-kotlin-interop.md-6a711cb8"  >Array</code> of <code class="code " id="js-to-kotlin-interop.md-4c8f2c99"  >kotlin.Long</code> with a property <code class="code " id="js-to-kotlin-interop.md-3c5b2bd3"  >$type$ == &quot;LongArray&quot;</code>.</p></li></ul></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="js-modules.md"  >JavaScript modules</h1><p id="js-modules.md-cdf7ba3a" >You can compile your Kotlin projects to JavaScript modules for various popular module systems. We currently support the following configurations for JavaScript modules:</p><ul class="list _ul" id="js-modules.md-af4cf739"   ><li class="list__item" id="js-modules.md-c978739" ><p><a href="https://github.com/umdjs/umd" id="js-modules.md-15ae4cbb"   data-external="true" rel="noopener noreferrer" >Unified Module Definitions (UMD)</a>, which is compatible with both <em id="js-modules.md-edb4702b" class=""  >AMD</em> and <em id="js-modules.md-bfe14bdb" class=""  >CommonJS</em>. UMD modules are also able to be executed without being imported or when no module system is present. This is the default option for the <code class="code " id="js-modules.md-9f09395d"  >browser</code> and <code class="code " id="js-modules.md-2b7484e0"  >nodejs</code> targets.</p></li><li class="list__item" id="js-modules.md-c9a4c3bd" ><p><a href="https://github.com/amdjs/amdjs-api/wiki/AMD" id="js-modules.md-a1eabfc6"   data-external="true" rel="noopener noreferrer" >Asynchronous Module Definitions (AMD)</a>, which is in particular used by the <a href="https://requirejs.org/" id="js-modules.md-96dde332"   data-external="true" rel="noopener noreferrer" >RequireJS</a> library.</p></li><li class="list__item" id="js-modules.md-6f2fcfe7" ><p><a href="http://wiki.commonjs.org/wiki/Modules/1.1" id="js-modules.md-66d2a459"   data-external="true" rel="noopener noreferrer" >CommonJS</a>, widely used by Node.js/npm (<code class="code " id="js-modules.md-e1c43e93"  >require</code> function and <code class="code " id="js-modules.md-9ceceb91"  >module.exports</code> object)</p></li><li class="list__item" id="js-modules.md-75022c20" ><p>Plain. Don\'t compile for any module system. You can access a module by its name in the global scope.</p></li></ul><section class="chapter"  ><h2 id="js-modules.md-browser-targets" data-toc="js-modules#js-modules.md-browser-targets"  >Browser targets</h2><p id="js-modules.md-c77cee4" >If you\'re targeting the browser and want to use a different module system than UMD, you can specify the desired module type in the <code class="code " id="js-modules.md-53666335"  >webpackTask</code> configuration block. For example, to switch to CommonJS, use:</p><div class="code-block" data-lang="groovy" id="js-modules.md-df5ad167"         >kotlin {\n    js {\n        browser {\n            webpackTask {\n                output.libraryTarget = &quot;commonjs2&quot;\n            }\n        }\n        binaries.executable()\n    }\n}\n\n</div><p id="js-modules.md-13f8ff0" >Webpack provides two different &quot;flavors&quot; of CommonJS, <code class="code " id="js-modules.md-e4991c51"  >commonjs</code> and <code class="code " id="js-modules.md-7ada20cc"  >commonjs2</code>, which affect the way your declarations are made available. While in most cases, you probably want <code class="code " id="js-modules.md-67d0d9eb"  >commonjs2</code>, which adds the <code class="code " id="js-modules.md-3f0c6cb7"  >module.exports</code> syntax to the generated library, you can also opt for the &quot;pure&quot; <code class="code " id="js-modules.md-14dd48b0"  >commonjs</code> option, which implements the CommonJS specification exactly. To learn more about the difference between <code class="code " id="js-modules.md-5890d67b"  >commonjs</code> and <code class="code " id="js-modules.md-c6a6deac"  >commonjs2</code>, check <a href="https://github.com/webpack/webpack/issues/1114" id="js-modules.md-ee911318"   data-external="true" rel="noopener noreferrer" >here</a>.</p></section><section class="chapter"  ><h2 id="js-modules.md-javascript-libraries-and-node-js-files" data-toc="js-modules#js-modules.md-javascript-libraries-and-node-js-files"  >JavaScript libraries and Node.js files</h2><p id="js-modules.md-5c28d45a" >If you are creating a library that will be consumed from JavaScript or a Node.js file, and want to use a different module system, the instructions are slightly different.</p><section class="chapter"  ><h3 id="js-modules.md-choose-the-target-module-system" data-toc="js-modules#js-modules.md-choose-the-target-module-system"  >Choose the target module system</h3><p id="js-modules.md-eff57e83" >To select module kind, set the <code class="code " id="js-modules.md-d3aa8b04"  >moduleKind</code> compiler option in the Gradle build script.</p><div class="tabs" id="js-modules.md-bb83f089" ><div class="tabs__content" data-gtm="tab" id="js-modules.md-a9656fd8"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="js-modules.md-a9656fd8"   data-title="Groovy"      >compileKotlinJs.kotlinOptions.moduleKind = &quot;commonjs&quot;\n\n</div></div><div class="tabs__content" data-gtm="tab" id="js-modules.md-64d38e83"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="js-modules.md-64d38e83"   data-title="Kotlin"      >tasks.named&lt;KotlinJsCompile&gt;(&quot;compileKotlinJs&quot;).configure {\n    kotlinOptions.moduleKind = &quot;commonjs&quot;\n}\n</div></div></div><p id="js-modules.md-1cd139ea" >Available values are: <code class="code " id="js-modules.md-2d2f50bc"  >umd</code> (default), <code class="code " id="js-modules.md-29685b6c"  >commonjs</code>, <code class="code " id="js-modules.md-ac4aef53"  >amd</code>, <code class="code " id="js-modules.md-aa1fc5c9"  >plain</code>.</p><aside data-type="note" class="prompt" data-title="" id="js-modules.md-761088e4" ><p id="js-modules.md-e865f54" >This is different from adjusting <code class="code " id="js-modules.md-ba18c805"  >webpackTask.output.libraryTarget</code>. The library target changes the output <em id="js-modules.md-bab10a89" class=""  >generated by webpack</em> (after your code has already been compiled). <code class="code " id="js-modules.md-d264e329"  >kotlinOptions.moduleKind</code> changes the output generated <em id="js-modules.md-ce9e356d" class=""  >by the Kotlin compiler</em>.</p></aside><p id="js-modules.md-e5039ee2" >In the Kotlin Gradle DSL, there is also a shortcut for setting the CommonJS module kind:</p><div class="code-block" data-lang="kotlin" id="js-modules.md-77d15ed0"         >kotlin {\n    js {\n         useCommonJs()\n         // . . .\n    }\n}\n</div></section></section><section class="chapter"  ><h2 id="js-modules.md-jsmodule-annotation" data-toc="js-modules#js-modules.md-jsmodule-annotation"  >@JsModule annotation</h2><p id="js-modules.md-f40790ea" >To tell Kotlin that an <code class="code " id="js-modules.md-eb91c0a3"  >external</code> class, package, function or property is a JavaScript module, you can use <code class="code " id="js-modules.md-5d5d6883"  >@JsModule</code> annotation. Consider you have the following CommonJS module called &quot;hello&quot;:</p><div class="code-block" data-lang="javascript" id="js-modules.md-ce7dff5a"         >module.exports.sayHello = function(name) { alert(&quot;Hello, &quot; + name); }\n</div><p id="js-modules.md-7107cc1a" >You should declare it like this in Kotlin:</p><div class="code-block" data-lang="kotlin" id="js-modules.md-2c1df3ef"         >@JsModule(&quot;hello&quot;)\nexternal fun sayHello(name: String)\n</div><section class="chapter"  ><h3 id="js-modules.md-apply-jsmodule-to-packages" data-toc="js-modules#js-modules.md-apply-jsmodule-to-packages"  >Apply @JsModule to packages</h3><p id="js-modules.md-f880b06a" >Some JavaScript libraries export packages (namespaces) instead of functions and classes. In terms of JavaScript, it\'s an <em id="js-modules.md-b44238b8" class=""  >object</em> that has <em id="js-modules.md-fbdb71fc" class=""  >members</em> that are classes, functions and properties. Importing these packages as Kotlin objects often looks unnatural. The compiler can map imported JavaScript packages to Kotlin packages, using the following notation:</p><div class="code-block" data-lang="kotlin" id="js-modules.md-96edea2a"         >@file:JsModule(&quot;extModule&quot;)\npackage ext.jspackage.name\n\nexternal fun foo()\n\nexternal class C\n</div><p id="js-modules.md-8ca93299" >where the corresponding JavaScript module is declared like this:</p><div class="code-block" data-lang="javascript" id="js-modules.md-b4c6e9c2"         >module.exports = {\n    foo:  { /* some code here */ },\n    C:  { /* some code here */ }\n}\n</div><p id="js-modules.md-801e7653" >Files marked with <code class="code " id="js-modules.md-c86b1cd"  >@file:JsModule</code> annotation can\'t declare non-external members. The example below produces a compile-time error:</p><div class="code-block" data-lang="kotlin" id="js-modules.md-d2a086b"         >@file:JsModule(&quot;extModule&quot;)\npackage ext.jspackage.name\n\nexternal fun foo()\n\nfun bar() = &quot;!&quot; + foo() + &quot;!&quot; // error here\n</div></section><section class="chapter"  ><h3 id="js-modules.md-import-deeper-package-hierarchies" data-toc="js-modules#js-modules.md-import-deeper-package-hierarchies"  >Import deeper package hierarchies</h3><p id="js-modules.md-752ca609" >In the previous example the JavaScript module exports a single package. However, some JavaScript libraries export multiple packages from within a module. This case is also supported by Kotlin, though you have to declare a new <code class="code " id="js-modules.md-8ea34463"  >.kt</code> file for each package you import.</p><p id="js-modules.md-e87eb907" >For example, let\'s make the example a bit more complicated:</p><div class="code-block" data-lang="javascript" id="js-modules.md-597ca9a2"         >module.exports = {\n    mylib: {\n        pkg1: {\n            foo: function() { /* some code here */ },\n            bar: function() { /* some code here */ }\n        },\n        pkg2: {\n            baz: function() { /* some code here */ }\n        }\n    }\n}\n</div><p id="js-modules.md-a16f4aba" >To import this module in Kotlin, you have to write two Kotlin source files:</p><div class="code-block" data-lang="kotlin" id="js-modules.md-810301e4"         >@file:JsModule(&quot;extModule&quot;)\n@file:JsQualifier(&quot;mylib.pkg1&quot;)\npackage extlib.pkg1\n\nexternal fun foo()\n\nexternal fun bar()\n</div><p id="js-modules.md-89a2e931" >and</p><div class="code-block" data-lang="kotlin" id="js-modules.md-786042c6"         >@file:JsModule(&quot;extModule&quot;)\n@file:JsQualifier(&quot;mylib.pkg2&quot;)\npackage extlib.pkg2\n\nexternal fun baz()\n</div></section><section class="chapter"  ><h3 id="js-modules.md-jsnonmodule-annotation" data-toc="js-modules#js-modules.md-jsnonmodule-annotation"  >@JsNonModule annotation</h3><p id="js-modules.md-cebf97c3" >When a declaration is marked as <code class="code " id="js-modules.md-1d95cd31"  >@JsModule</code>, you can\'t use it from Kotlin code when you don\'t compile it to a JavaScript module. Usually, developers distribute their libraries both as JavaScript modules and downloadable <code class="code " id="js-modules.md-5884ce3b"  >.js</code> files that you can copy to your project\'s static resources and include via a <code class="code " id="js-modules.md-d276516d"  >&lt;script&gt;</code> tag. To tell Kotlin that it\'s okay to use a <code class="code " id="js-modules.md-2b46d0ca"  >@JsModule</code> declaration from a non-module environment, add the <code class="code " id="js-modules.md-29497d2a"  >@JsNonModule</code> annotation. For example, consider the following JavaScript code:</p><div class="code-block" data-lang="javascript" id="js-modules.md-6e8122bf"         >function topLevelSayHello(name) { alert(&quot;Hello, &quot; + name); }\nif (module &amp;&amp; module.exports) {\n    module.exports = topLevelSayHello;\n}\n</div><p id="js-modules.md-ac5640bc" >You could describe it from Kotlin as follows:</p><div class="code-block" data-lang="kotlin" id="js-modules.md-d8cef960"         >@JsModule(&quot;hello&quot;)\n@JsNonModule\n@JsName(&quot;topLevelSayHello&quot;)\nexternal fun sayHello(name: String)\n</div></section><section class="chapter"  ><h3 id="js-modules.md-module-system-used-by-the-kotlin-standard-library" data-toc="js-modules#js-modules.md-module-system-used-by-the-kotlin-standard-library"  >Module system used by the Kotlin Standard Library</h3><p id="js-modules.md-bf49fb5b" >Kotlin is distributed with the Kotlin/JS standard library as a single file, which is itself compiled as an UMD module, so you can use it with any module system described above. While for most use cases of Kotlin/JS, it is recommended to use a Gradle dependency on <code class="code " id="js-modules.md-7a9a8953"  >kotlin-stdlib-js</code>, it is also available on NPM as the <a href="https://www.npmjs.com/package/kotlin" id="js-modules.md-cb9fca2d"   data-external="true" rel="noopener noreferrer" ><code class="code " id="js-modules.md-e5362076"  >kotlin</code></a> package.</p></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="js-reflection.md"  >Kotlin/JS reflection</h1><p id="js-reflection.md-6e5f517" >Kotlin/JS provides a limited support for the Kotlin <a href="#reflection.md" id="js-reflection.md-49febfd4"   >reflection API</a>. The only supported parts of the API are:</p><ul class="list _ul" id="js-reflection.md-ff2146c4"   ><li class="list__item" id="js-reflection.md-2344959" ><p><a href="#reflection.md-class-references" id="js-reflection.md-d6d29c5d"   >class references</a> (<code class="code " id="js-reflection.md-536071e"  >::class</code> ).</p></li><li class="list__item" id="js-reflection.md-da81f835" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-type/" id="js-reflection.md-fccc1e92"   data-external="true" rel="noopener noreferrer" ><code class="code " id="js-reflection.md-77066f0f"  >KType</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/type-of.html" id="js-reflection.md-83121a7c"   data-external="true" rel="noopener noreferrer" ><code class="code " id="js-reflection.md-be8c13ad"  >typeof()</code></a> function.</p></li></ul><section class="chapter"  ><h2 id="js-reflection.md-class-references" data-toc="js-reflection#js-reflection.md-class-references"  >Class references</h2><p id="js-reflection.md-88778941" >The <code class="code " id="js-reflection.md-7cfa1b59"  >::class</code> syntax returns a reference to the class of an instance, or the class corresponding to the given type. In Kotlin/JS, the value of a <code class="code " id="js-reflection.md-63f3ee37"  >::class</code> expression is a stripped-down <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/" id="js-reflection.md-1b811699"   data-external="true" rel="noopener noreferrer" >KClass</a> implementation that supports only:</p><ul class="list _ul" id="js-reflection.md-f16d1780"   ><li class="list__item" id="js-reflection.md-ed7a5207" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/simple-name.html" id="js-reflection.md-8bf21010"   data-external="true" rel="noopener noreferrer" >simpleName</a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/is-instance.html" id="js-reflection.md-4d9c3833"   data-external="true" rel="noopener noreferrer" >isInstance()</a> members.</p></li><li class="list__item" id="js-reflection.md-26a54352" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/cast.html" id="js-reflection.md-ba8f46fe"   data-external="true" rel="noopener noreferrer" >cast()</a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/safe-cast.html" id="js-reflection.md-d361d82b"   data-external="true" rel="noopener noreferrer" >safeCast()</a> extension functions.</p></li></ul><p id="js-reflection.md-b6fc188d" >In addition to that, you can use <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/js.html" id="js-reflection.md-4df388f9"   data-external="true" rel="noopener noreferrer" >KClass.js</a> to access the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-class/index.html" id="js-reflection.md-84399e5f"   data-external="true" rel="noopener noreferrer" >JsClass</a> instance corresponding to the class. The <code class="code " id="js-reflection.md-e6eaa0c7"  >JsClass</code> instance itself is a reference to the constructor function. This can be used to interoperate with JS functions that expect a reference to a constructor.</p></section><section class="chapter"  ><h2 id="js-reflection.md-ktype-and-typeof" data-toc="js-reflection#js-reflection.md-ktype-and-typeof"  >KType and typeOf()</h2><aside data-type="warning" class="prompt" data-title="" id="js-reflection.md-95c174c2"><p id="js-reflection.md-191a4d05" >The <code class="code " id="js-reflection.md-a38de1e2"  >typeOf()</code> function is <a href="#components-stability.md" id="js-reflection.md-80565c3e"   >Experimental</a>. It may be dropped or changed at any time. Opt-in is required (see details below). Use it only for evaluation purposes. We appreciate your feedback on it in <a href="https://youtrack.jetbrains.com/issues/KT" id="js-reflection.md-4521e3cd"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><p id="js-reflection.md-8e0d42dd" >The <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/type-of.html" id="js-reflection.md-57235424"   data-external="true" rel="noopener noreferrer" ><code class="code " id="js-reflection.md-15aa349d"  >typeof()</code></a> function constructs an instance of <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-type/" id="js-reflection.md-a5b96a12"   data-external="true" rel="noopener noreferrer" ><code class="code " id="js-reflection.md-dd0290c1"  >KType</code></a> for a given type. To use <code class="code " id="js-reflection.md-d60c0dc1"  >typeOf()</code> in your code, <a href="#opt-in-requirements.md-opt-in-to-using-api" id="js-reflection.md-8bd0c966"   >opt in</a> to the experimental API of the standard library, for example, add <code class="code " id="js-reflection.md-ebfaa9c8"  >@OptIn(ExperimentalStdlibApi::class)</code> to your code.</p><p id="js-reflection.md-86e44e5" >The <code class="code " id="js-reflection.md-2f0817f5"  >KType</code> API is fully supported in Kotlin/JS except for Java-specific parts.</p></section><section class="chapter"  ><h2 id="js-reflection.md-example" data-toc="js-reflection#js-reflection.md-example"  >Example</h2><p id="js-reflection.md-fd0e223c" >Here is an example of the reflection usage in Kotlin/JS.</p><div class="code-block" data-lang="kotlin" id="js-reflection.md-524382e3"         >open class Shape\nclass Rectangle : Shape()\n\n@OptIn(ExperimentalStdlibApi::class) // typeOf() is experimental and requires an opt-in\ninline fun &lt;reified T&gt; accessReifiedTypeArg() =\n    println(typeOf&lt;T&gt;().toString())\n\nfun main() {\n    val s = Shape()\n    val r = Rectangle()\n\n    println(r::class.simpleName) // Prints &quot;Rectangle&quot;\n    println(Shape::class.simpleName) // Prints &quot;Shape&quot;\n    println(Shape::class.js.name) // Prints &quot;Shape&quot;\n\n    println(Shape::class.isInstance(r)) // Prints &quot;true&quot;\n    println(Rectangle::class.isInstance(s)) // Prints &quot;false&quot;\n    val rShape = Shape::class.cast(r) // Casts a Rectangle &quot;r&quot; to Shape\n\n    accessReifiedTypeArg&lt;Rectangle&gt;() // Accesses the type via typeOf(). Prints &quot;Rectangle&quot;\n}\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="typesafe-html-dsl.md"  >Typesafe HTML DSL</h1><p id="typesafe-html-dsl.md-44d7579d" >The <a href="http://www.github.com/kotlin/kotlinx.html" id="typesafe-html-dsl.md-86c2a7a2"   data-external="true" rel="noopener noreferrer" >kotlinx.html library</a> provides the ability to generate DOM elements using statically typed HTML builders (and besides JavaScript, it is even available on the JVM target!) To use the library, include the corresponding repository and dependency to our <code class="code " id="typesafe-html-dsl.md-d9f84b56"  >build.gradle.kts</code> file:</p><div class="code-block" data-lang="kotlin" id="typesafe-html-dsl.md-1d546399"         >repositories {\n    // ...\n    jcenter()\n}\n\ndependencies {\n    implementation(kotlin(&quot;stdlib-js&quot;))\n    implementation(&quot;org.jetbrains.kotlinx:kotlinx-html-js:0.7.1&quot;)\n    // ...\n}\n</div><p id="typesafe-html-dsl.md-f5fb934f" >Once the dependency is included, you can access the different interfaces provided to generate the DOM. To render a headline, some text, and a link, the following snippet would be sufficient, for example:</p><div class="code-block" data-lang="kotlin" id="typesafe-html-dsl.md-dfde6ad6"         >import kotlinx.browser.*\nimport kotlinx.html.*\nimport kotlinx.html.dom.*\n\nfun main() {\n    document.body!!.append.div {\n        h1 {\n            +&quot;Welcome to Kotlin/JS!&quot;\n        }\n        p {\n            +&quot;Fancy joining this year\'s &quot;\n            a(&quot;https://kotlinconf.com/&quot;) {\n                +&quot;KotlinConf&quot;\n            }\n            +&quot;?&quot;\n        }\n    }\n}\n</div><p id="typesafe-html-dsl.md-a6ceb8cf" >When running this example in the browser, the DOM will be assembled in a straightforward way. This is easily confirmed by checking the Elements of the website using the developer tools of our browser:</p><p id="typesafe-html-dsl.md-25586b31" ><figure title="Rendering a website from kotlinx.html"><img alt="Rendering a website from kotlinx.html" title="Rendering a website from kotlinx.html" id="typesafe-html-dsl.md-69c82dff" src="images/rendering-example.png"  class="" width="2410" height="1168" /></figure></p><p id="typesafe-html-dsl.md-18ebd9f" >To learn more about the <code class="code " id="typesafe-html-dsl.md-d4cc63a4"  >kotlinx.html</code> library, check out the <a href="https://github.com/Kotlin/kotlinx.html/wiki/Getting-started" id="typesafe-html-dsl.md-a2d69f01"   data-external="true" rel="noopener noreferrer" >GitHub Wiki</a>, where you can find more information about how to <a href="https://github.com/Kotlin/kotlinx.html/wiki/DOM-trees" id="typesafe-html-dsl.md-24d8a99d"   data-external="true" rel="noopener noreferrer" >create elements</a> without adding them to the DOM, <a href="https://github.com/Kotlin/kotlinx.html/wiki/Events" id="typesafe-html-dsl.md-6fd89f0"   data-external="true" rel="noopener noreferrer" >binding to events</a> like <code class="code " id="typesafe-html-dsl.md-df9a6920"  >onClick</code>, and examples on how to <a href="https://github.com/Kotlin/kotlinx.html/wiki/Elements-CSS-classes" id="typesafe-html-dsl.md-9a2fa50"   data-external="true" rel="noopener noreferrer" >apply CSS classes</a> to your HTML elements, to name just a few.</p></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="js-external-declarations-with-dukat.md"  >Generation of external declarations with Dukat</h1><aside data-type="note" class="prompt" data-title="" id="js-external-declarations-with-dukat.md-79f865dc" ><p id="js-external-declarations-with-dukat.md-753944a8" >Dukat is still <a href="#components-stability.md" id="js-external-declarations-with-dukat.md-830e786"   >experimental</a>. If you encounter any problems, please report them in Dukat\'s <a href="https://github.com/kotlin/dukat/issues" id="js-external-declarations-with-dukat.md-a4355478"   data-external="true" rel="noopener noreferrer" >issue tracker</a>.</p></aside><p id="js-external-declarations-with-dukat.md-42859b5b" ><a href="https://github.com/kotlin/dukat" id="js-external-declarations-with-dukat.md-42338e95"   data-external="true" rel="noopener noreferrer" >Dukat</a> is a tool currently in development which allows the automatic conversion of TypeScript declaration files (<code class="code " id="js-external-declarations-with-dukat.md-36400e5c"  >.d.ts</code>) into Kotlin external declarations. This aims to makes it more comfortable to use libraries from the JavaScript ecosystem in a type-safe manner in Kotlin, reducing the need for manually writing external declarations and wrappers for JS libraries.</p><p id="js-external-declarations-with-dukat.md-b5e12adf" >The Kotlin/JS Gradle plugin provides an integration with Dukat. When enabled, type-safe Kotlin external declarations are automatically generated for npm dependencies that provide TypeScript definitions. You have two different ways of selecting if and when Dukat should generate declarations: at build time, and manually via a Gradle task.</p><section class="chapter"  ><h2 id="js-external-declarations-with-dukat.md-generate-external-declarations-at-build-time" data-toc="js-external-declarations-with-dukat#js-external-declarations-with-dukat.md-generate-external-declarations-at-build-time"  >Generate external declarations at build time</h2><p id="js-external-declarations-with-dukat.md-d45e1603" >The <code class="code " id="js-external-declarations-with-dukat.md-3d854c7b"  >npm</code> dependency function takes a third parameter after the package name and version: <code class="code " id="js-external-declarations-with-dukat.md-52ed2dea"  >generateExternals</code>. This allows you to control whether Dukat should generate declarations for a specific dependency:</p><div class="tabs" id="js-external-declarations-with-dukat.md-c42af2e4" ><div class="tabs__content" data-gtm="tab" id="js-external-declarations-with-dukat.md-70099799"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="js-external-declarations-with-dukat.md-70099799"   data-title="Groovy"      >dependencies {\n    implementation(npm(\'decamelize\', \'4.0.0\', true))\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="js-external-declarations-with-dukat.md-b2206ec0"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="js-external-declarations-with-dukat.md-b2206ec0"   data-title="Kotlin"      >dependencies {\n    implementation(npm(&quot;decamelize&quot;, &quot;4.0.0&quot;, generateExternals = true))\n}\n</div></div></div><p id="js-external-declarations-with-dukat.md-a519470a" >If the repository of the dependency you wish to use does not provide TypeScript definitions, you can also use types provided via the <a href="https://github.com/DefinitelyTyped/DefinitelyTyped" id="js-external-declarations-with-dukat.md-eae1ef19"   data-external="true" rel="noopener noreferrer" >DefinitelyTyped</a> repository. In this case, make sure you add <code class="code " id="js-external-declarations-with-dukat.md-43255527"  >npm</code> dependencies for both <code class="code " id="js-external-declarations-with-dukat.md-dc2d43d9"  >your-package</code> and <code class="code " id="js-external-declarations-with-dukat.md-31ab65d2"  >@types/your-package</code> (with <code class="code " id="js-external-declarations-with-dukat.md-fb735d46"  >generateExternals = true</code> ).</p><p id="js-external-declarations-with-dukat.md-bdc78082" >You can use the flag <code class="code " id="js-external-declarations-with-dukat.md-3684b14c"  >kotlin.js.generate.externals</code> in your <code class="code " id="js-external-declarations-with-dukat.md-49db5966"  >gradle.properties</code> file to set the generator\'s behavior for all npm dependencies simultaneously. As usual, individual explicit settings take precedence over this general flag.</p></section><section class="chapter"  ><h2 id="js-external-declarations-with-dukat.md-manually-generate-external-declarations-via-gradle-task" data-toc="js-external-declarations-with-dukat#js-external-declarations-with-dukat.md-manually-generate-external-declarations-via-gradle-task"  >Manually generate external declarations via Gradle task</h2><p id="js-external-declarations-with-dukat.md-8734db5e" >If you want to have full control over the declarations generated by Dukat, want to apply manual adjustments, or if you\'re running into trouble with the auto-generated externals, you can also trigger the creation of the declarations for all your npm dependencies manually via the Gradle task <code class="code " id="js-external-declarations-with-dukat.md-53549720"  >generateExternals</code> (<code class="code " id="js-external-declarations-with-dukat.md-11821e80"  >jsGenerateExternals</code> with the multiplatform plugin). This will generate declarations in a directory titled <code class="code " id="js-external-declarations-with-dukat.md-6f297766"  >externals</code> in your project root. Here, you can review the generated code and copy any parts you would like to use to your source directories.</p><p id="js-external-declarations-with-dukat.md-ccd5b6a5" >It is recommended to only provide external declarations manually in your source folder <em id="js-external-declarations-with-dukat.md-1ebbd866" class=""  >or</em> enabling the generation of external declarations at build time for any single dependency. Doing both can result in resolution issues.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="js-hands-ons.md"  >Hands-on labs for Kotlin/JS</h1><p id="js-hands-ons.md-4ea63ac7" >Hands-on labs are long-form tutorials that help you get to know a technology by guiding you through a self-contained project related to a specific topic.</p><p id="js-hands-ons.md-e060a421" >They include sample projects, which can serve as jumping-off points for your own projects, and contain useful snippets and patterns.</p><p id="js-hands-ons.md-59e7bd8e" >For Kotlin/JS, the following hands-on labs are currently available:</p><ul class="list _ul" id="js-hands-ons.md-edffcb86"   ><li class="list__item" id="js-hands-ons.md-cac0f047" ><p><a href="https://play.kotlinlang.org/hands-on/Building%20Web%20Applications%20with%20React%20and%20Kotlin%20JS/" id="js-hands-ons.md-27a1ca68"   data-external="true" rel="noopener noreferrer" >Building Web Applications with React and Kotlin/JS</a> guides you through the process of building a simple web application using the React framework, shows how a typesafe Kotlin DSL for HTML makes it convenient to build reactive DOM elements, and illustrates how to use third-party React components, and how to obtain information from APIs, while writing the whole application logic in pure Kotlin/JS.</p></li><li class="list__item" id="js-hands-ons.md-6ef0c07" ><p><a href="https://play.kotlinlang.org/hands-on/Full%20Stack%20Web%20App%20with%20Kotlin%20Multiplatform/" id="js-hands-ons.md-d6913183"   data-external="true" rel="noopener noreferrer" >Building a Full Stack Web App with Kotlin Multiplatform</a> teaches the concepts behind building an application that targets Kotlin/JVM and Kotlin/JS by building a client-server application that makes use of common code, serialization, and other multiplatform paradigms. It also provides a brief introduction into working with Ktor both as a server- and client-side framework.</p></li></ul><p id="js-hands-ons.md-1ac1817" >We are continuously working on expanding the set of hands-on labs to make it as easy as possible for you to learn more about Kotlin/JS and adjacent technologies.</p></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="native-get-started.md"  >Get started with Kotlin/Native in IntelliJ IDEA</h1><p id="native-get-started.md-5e621ab2" >This tutorial demonstrates how to use IntelliJ IDEA for creating a Kotlin/Native application.</p><p id="native-get-started.md-17a0893b" >To get started, install the latest version of <a href="http://www.jetbrains.com/idea/download/index.html" id="native-get-started.md-78c9808b"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA</a>. The tutorial is applicable to both IntelliJ IDEA Community Edition and the Ultimate Edition.</p><section class="chapter"  ><h2 id="native-get-started.md-create-a-new-kotlin-native-project-in-intellij-idea" data-toc="native-get-started#native-get-started.md-create-a-new-kotlin-native-project-in-intellij-idea"  >Create a new Kotlin/Native project in IntelliJ IDEA</h2><ol class="list _decimal" id="native-get-started.md-e5cd1d9e"   ><li class="list__item" id="native-get-started.md-7731dfd0" ><p id="native-get-started.md-2739c847" >In IntelliJ IDEA, select <b id="native-get-started.md-6a7578f2" class=""  >File</b> | <b id="native-get-started.md-2519ddd" class=""  >New</b> | <b id="native-get-started.md-aa4cf7ff" class=""  >Project</b>.</p></li><li class="list__item" id="native-get-started.md-b9cc5d60" ><p id="native-get-started.md-4f347c3d" >In the panel on the left, select <b id="native-get-started.md-fb5bd0e2" class=""  >Kotlin</b>.</p></li><li class="list__item" id="native-get-started.md-3c693f6e" ><p id="native-get-started.md-648b4784" >Enter a project name, select <b id="native-get-started.md-58346235" class=""  >Native Application</b> as the project template, and click <b id="native-get-started.md-ce2300f9" class=""  >Next</b>.</p><p id="native-get-started.md-7c721806" ><figure title="Create a native application"><img alt="Create a native application" title="Create a native application" id="native-get-started.md-f31b8f83" src="images/native-new-project-intellij-1.png"  class="" width="1916" height="1124" /></figure></p><p id="native-get-started.md-44553cf6" >By default, your project will use Gradle with Kotlin DSL as the build system.</p><aside data-type="note" class="prompt" data-title="" id="native-get-started.md-ece958a5" ><p id="native-get-started.md-18ce3c9c" >Kotlin/Native doesn\'t support Maven and IntelliJ IDEA native builder.</p></aside></li><li class="list__item" id="native-get-started.md-d0c946bf" ><p id="native-get-started.md-640c07b1" >Accept the default configuration on the next screen and click <b id="native-get-started.md-57778ad7" class=""  >Finish</b>.</p><p id="native-get-started.md-9d4c3b89" ><figure title="Configure a native application"><img alt="Configure a native application" title="Configure a native application" id="native-get-started.md-4fb899ee" src="images/native-new-project-intellij-2.png"  class="" width="1916" height="1124" /></figure></p></li></ol><p id="native-get-started.md-cc37b942" >Your project will open. By default, the wizard creates the necessary <code class="code " id="native-get-started.md-b9cb424c"  >main.kt</code> file with code that prints &quot;Hello, Kotlin/Native!&quot; to the standard output.</p><p id="native-get-started.md-4370cfb2" >The <code class="code " id="native-get-started.md-38d1293"  >build.gradle.kts</code> file contains the project settings. Read more about these settings in the <a href="#mpp-dsl-reference.md" id="native-get-started.md-28298b90"   >Kotlin Multiplatform Gradle DSL reference</a>.</p></section><section class="chapter"  ><h2 id="native-get-started.md-run-the-application" data-toc="native-get-started#native-get-started.md-run-the-application"  >Run the application</h2><p id="native-get-started.md-4a1a27a5" >Start the application by clicking <b id="native-get-started.md-56ac647" class=""  >Run</b> next to the run configuration at the top of the screen.</p><p id="native-get-started.md-efdabdf3" ><figure title="Run the application"><img alt="Run the application" title="Run the application" id="native-get-started.md-31b162eb" src="images/native-run-app.png"  class="" width="600" height="119" /></figure></p><p id="native-get-started.md-a78d6ff4" >IntelliJ IDEA opens the <b id="native-get-started.md-b51c48d7" class=""  >Run</b> tab and shows the output: <figure title="Application output"><img alt="Application output" title="Application output" id="native-get-started.md-a668a426" src="images/native-output-1.png"  class="" width="600" height="175" /></figure></p></section><section class="chapter"  ><h2 id="native-get-started.md-update-the-application" data-toc="native-get-started#native-get-started.md-update-the-application"  >Update the application</h2><section class="chapter"  ><h3 id="native-get-started.md-count-the-letters-in-your-name" data-toc="native-get-started#native-get-started.md-count-the-letters-in-your-name"  >Count the letters in your name</h3><ol class="list _decimal" id="native-get-started.md-9ac30379"   ><li class="list__item" id="native-get-started.md-9960bc86" ><p id="native-get-started.md-58e5c15c" >Open the file <code class="code " id="native-get-started.md-a30c63eb"  >main.kt</code> in <code class="code " id="native-get-started.md-af87382b"  >src/&lt;your_app_name&gt;Main/kotlin</code>.</p><p id="native-get-started.md-e69217d1" >The <code class="code " id="native-get-started.md-a8fcd1a3"  >src</code> directory contains the Kotlin source files and resources. The file <code class="code " id="native-get-started.md-ee064176"  >main.kt</code> includes sample code that prints &quot;Hello, Kotlin/Native!&quot; using the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/stdlib/kotlin.io/println.html" id="native-get-started.md-b811cb0f"   data-external="true" rel="noopener noreferrer" ><code class="code " id="native-get-started.md-88337d82"  >println()</code></a> function.</p></li><li class="list__item" id="native-get-started.md-fc38233" ><p id="native-get-started.md-6130406" >Add code to read the input. Use the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/read-line.html" id="native-get-started.md-6736b3b6"   data-external="true" rel="noopener noreferrer" ><code class="code " id="native-get-started.md-4a5b6164"  >readLine()</code></a> function to read the input value and assign it to the <code class="code " id="native-get-started.md-e2aa82ce"  >name</code> variable.</p><div class="code-block" data-lang="kotlin" id="native-get-started.md-ebf78cd"         >fun main() {\n    // Read the input value.\n    println(&quot;Hello, enter your name:&quot;)\n    val name = readLine()\n}\n</div></li><li class="list__item" id="native-get-started.md-ca3f199d" ><p id="native-get-started.md-9bbb5d38" >Eliminate the whitespaces and count the letters:</p><ul class="list _ul" id="native-get-started.md-1b5d511e"   ><li class="list__item" id="native-get-started.md-884edbf4" ><p>Check that the provided name is not <code class="code " id="native-get-started.md-6655a097"  >null</code> with the <a href="#null-safety.md-safe-calls" id="native-get-started.md-d3862c45"   >safe call operator <code class="code " id="native-get-started.md-1056e7e6"  >?.</code></a>.</p></li><li class="list__item" id="native-get-started.md-186229bb" ><p>Use the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/replace.html" id="native-get-started.md-ffda4d25"   data-external="true" rel="noopener noreferrer" ><code class="code " id="native-get-started.md-c4bb5b13"  >replace()</code></a> function to remove the empty spaces in the name.</p></li><li class="list__item" id="native-get-started.md-2cb5ad7a" ><p>Use the scope function <a href="#scope-functions.md-let" id="native-get-started.md-a260dde4"   ><code class="code " id="native-get-started.md-431fda0b"  >let</code></a> to run the function within the object context.</p></li><li class="list__item" id="native-get-started.md-ee17af72" ><p>Use a <a href="#basic-types.md-string-templates" id="native-get-started.md-b2bb5570"   >string template</a> to insert your name length into the string by adding a dollar sign <code class="code " id="native-get-started.md-26a3c551"  >$</code> and enclosing it in curly braces – <code class="code " id="native-get-started.md-bd30531f"  >${it.length}</code>. <code class="code " id="native-get-started.md-9c558cc1"  >it</code> is the default name of a <a href="#coding-conventions.md-lambda-parameters" id="native-get-started.md-91fca998"   >lambda parameter</a>.</p></li></ul><div class="code-block" data-lang="kotlin" id="native-get-started.md-bc48c5eb"         >fun main() {\n    // Read the input value.\n    println(&quot;Hello, enter your name:&quot;)\n    val name = readLine()\n    // Count the letters in the name.\n    name?.replace(&quot; &quot;, &quot;&quot;)?.let {\n        println(&quot;Your name contains ${it.length} letters&quot;)\n    }\n}\n</div></li><li class="list__item" id="native-get-started.md-7ec00964" ><p id="native-get-started.md-ed58d86c" >Report a null value using the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/error.html" id="native-get-started.md-52106e28"   data-external="true" rel="noopener noreferrer" ><code class="code " id="native-get-started.md-16a0c0c6"  >error()</code></a> function after the <a href="#null-safety.md-elvis-operator" id="native-get-started.md-56533456"   >Elvis operator <code class="code " id="native-get-started.md-f29622b6"  >?:</code></a>.</p><div class="code-block" data-lang="kotlin" id="native-get-started.md-f3cbd53b"         >fun main() {\n    // Read the input value.\n    println(&quot;Hello, enter your name:&quot;)\n    val name = readLine()\n    // Count the letters in the name.\n    name?.replace(&quot; &quot;, &quot;&quot;)?.let {\n        println(&quot;Your name contains ${it.length} letters&quot;)\n    } ?: error(&quot;Error while reading input from the terminal: the value can\'t be null.&quot;)\n}\n</div></li><li class="list__item" id="native-get-started.md-c296f282" ><p id="native-get-started.md-6a0bd487" >Save the changes and run the application.</p><p id="native-get-started.md-5fbd17b8" >IntelliJ IDEA opens the <b id="native-get-started.md-190e357c" class=""  >Run</b> tab and shows the output.</p></li><li class="list__item" id="native-get-started.md-26a25ec5" ><p id="native-get-started.md-a48375f4" >Enter your name and enjoy the result:</p><p id="native-get-started.md-93f22ada" ><figure title="Application output"><img alt="Application output" title="Application output" id="native-get-started.md-55e8d743" src="images/native-output-2.png"  class="" width="1608" height="468" /></figure></p></li></ol></section><section class="chapter"  ><h3 id="native-get-started.md-count-the-unique-letters-in-your-name" data-toc="native-get-started#native-get-started.md-count-the-unique-letters-in-your-name"  >Count the unique letters in your name</h3><ol class="list _decimal" id="native-get-started.md-17e52e86"   ><li class="list__item" id="native-get-started.md-92daab6a" ><p id="native-get-started.md-acaa7ca8" >Open the file <code class="code " id="native-get-started.md-5504f81e"  >main.kt</code> in <code class="code " id="native-get-started.md-21d0cd04"  >src/&lt;your_app_name&gt;Main/kotlin</code>.</p></li><li class="list__item" id="native-get-started.md-bb275c6e" ><p id="native-get-started.md-47263d5e" >Declare the new <a href="#extensions.md-extension-functions" id="native-get-started.md-7ebf20f"   >extension function</a> <code class="code " id="native-get-started.md-d5f693d8"  >countDistinctCharacters()</code> for <code class="code " id="native-get-started.md-87b10b4e"  >String</code>:</p><ul class="list _ul" id="native-get-started.md-16364e14"   ><li class="list__item" id="native-get-started.md-d8dd9c6c" ><p>Convert the name to lowercase using the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-lower-case.html" id="native-get-started.md-25c9c231"   data-external="true" rel="noopener noreferrer" ><code class="code " id="native-get-started.md-2baa0ba7"  >toLowerCase()</code></a> function.</p></li><li class="list__item" id="native-get-started.md-de17656d" ><p>Convert the input string to a list of characters using the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-list.html" id="native-get-started.md-b189e036"   data-external="true" rel="noopener noreferrer" ><code class="code " id="native-get-started.md-89451f15"  >toList()</code></a> function.</p></li><li class="list__item" id="native-get-started.md-be2675ca" ><p>Select only the distinct characters in your name using the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/distinct.html" id="native-get-started.md-578d2b8"   data-external="true" rel="noopener noreferrer" ><code class="code " id="native-get-started.md-f9e16946"  >distinct()</code></a> function.</p></li><li class="list__item" id="native-get-started.md-f0f2caae" ><p>Count the distinct characters using the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/count.html" id="native-get-started.md-101eb4d3"   data-external="true" rel="noopener noreferrer" ><code class="code " id="native-get-started.md-52a8f475"  >count()</code></a> function.</p></li></ul><div class="code-block" data-lang="kotlin" id="native-get-started.md-d02eb47e"         >fun String.countDistinctCharacters() = toLowerCase().toList().distinct().count()\n</div></li><li class="list__item" id="native-get-started.md-5b4a0272" ><p id="native-get-started.md-8cc461fa" >Use the <code class="code " id="native-get-started.md-b6341317"  >countDistinctCharacters()</code> function to count the unique letters in your name.</p><div class="code-block" data-lang="kotlin" id="native-get-started.md-abf54d41"         >fun String.countDistinctCharacters() = toLowerCase().toList().distinct().count()\n\nfun main() {\n    // Read the input value.\n    println(&quot;Hello, enter your name:&quot;)\n    val name = readLine()\n    // Count the letters in the name.\n    name?.replace(&quot; &quot;, &quot;&quot;)?.let {\n        println(&quot;Your name contains ${it.length} letters&quot;)\n        // Print the number of unique letters.\n        println(&quot;Your name contains ${it.countDistinctCharacters()} unique letters&quot;)\n    } ?: error(&quot;Error while reading input from the terminal: the value can\'t be null.&quot;)\n}\n</div></li><li class="list__item" id="native-get-started.md-fde28383" ><p id="native-get-started.md-5af90128" >Save the changes and run the application.</p><p id="native-get-started.md-684fa40b" >IntelliJ IDEA opens the <b id="native-get-started.md-8282ee24" class=""  >Run</b> tab and shows the output.</p></li><li class="list__item" id="native-get-started.md-8f03f97f" ><p id="native-get-started.md-78912f57" >Enter your name and enjoy the result:</p><p id="native-get-started.md-47bde735" ><figure title="Application output"><img alt="Application output" title="Application output" id="native-get-started.md-d49105bc" src="images/native-output-3.png"  class="" width="1608" height="468" /></figure></p></li></ol></section></section><section class="chapter"  ><h2 id="native-get-started.md-what-s-next" data-toc="native-get-started#native-get-started.md-what-s-next"  >What\'s next?</h2><p id="native-get-started.md-b60ab5bc" >Once you have created your first application, you can go to Kotlin hands-on labs and complete long-form tutorials on Kotlin/Native.</p><p id="native-get-started.md-654a35c3" >For Kotlin/Native, the following hands-on labs are currently available:</p><ul class="list _ul" id="native-get-started.md-2ad26851"   ><li class="list__item" id="native-get-started.md-db9b72cd" ><p><a href="https://play.kotlinlang.org/hands-on/Kotlin%20Native%20Concurrency/00_Introduction" id="native-get-started.md-b8838f8"   data-external="true" rel="noopener noreferrer" >Learn about the concurrency model in Kotlin/Native</a> shows you how to build a command-line application and work with states in a multi-threaded environment.</p></li><li class="list__item" id="native-get-started.md-5aa578e5" ><p><a href="https://play.kotlinlang.org/hands-on/Introduction%20to%20Kotlin%20Native/01_Introduction" id="native-get-started.md-6397d69b"   data-external="true" rel="noopener noreferrer" >Creating an HTTP Client in Kotlin/Native</a> explains how to create a native HTTP client and interoperate with C libraries.</p></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="native-gradle.md"  >Get started with Kotlin/Native using Gradle</h1><p id="native-gradle.md-93d58a1a" ><a href="https://gradle.org" id="native-gradle.md-b9c2ab50"   data-external="true" rel="noopener noreferrer" >Gradle</a> is a build system that is very commonly used in the Java, Android, and other ecosystems. It is the default choice for Kotlin/Native and Multiplatform when it comes to build systems.</p><p id="native-gradle.md-123757dd" >While most IDE\'s including <a href="https://www.jetbrains.com/idea" id="native-gradle.md-749b2de4"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA</a> can generate the corresponding Gradle file, we\'re going to take a look at how to create this manually, to have a better understanding of how things work under the covers. If you\'d like to use the IDE, check out <a href="#native-get-started.md" id="native-gradle.md-ca751fd4"   >Using IntelliJ IDEA</a>.</p><p id="native-gradle.md-e22bee6f" >Gradle supports two languages for build scripts:</p><ul class="list _ul" id="native-gradle.md-4a8d2ac6"   ><li class="list__item" id="native-gradle.md-a2c3088a" ><p>Groovy scripts in <code class="code " id="native-gradle.md-e65a2ef0"  >build.gradle</code> files</p></li><li class="list__item" id="native-gradle.md-19f4f81" ><p>Kotlin scripts in <code class="code " id="native-gradle.md-41c89f48"  >build.gradle.kts</code> files</p></li></ul><p id="native-gradle.md-dbfe3988" >The Groovy language is the first supported scripting language for Gradle, it leverages the power of dynamic typing and runtime features of the language. It is also possible to use Kotlin in Gradle scripts. Being a statically-typed language, it plays better with IDEs when it comes to compilation and error detection.</p><p id="native-gradle.md-156e53c5" >Either can be used and samples will show the syntax for both languages.</p><section class="chapter"  ><h2 id="native-gradle.md-create-project-files" data-toc="native-gradle#native-gradle.md-create-project-files"  >Create project files</h2><p id="native-gradle.md-760349dd" >First, create a project directory. Inside it, create <code class="code " id="native-gradle.md-acb3f99b"  >build.gradle</code> or <code class="code " id="native-gradle.md-584c4e54"  >build.gradle.kts</code> Gradle build file with the following contents:</p><div class="tabs" id="native-gradle.md-e7261a72" ><div class="tabs__content" data-gtm="tab" id="native-gradle.md-4b059d87"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="native-gradle.md-4b059d87"   data-title="Groovy"      >plugins {\n    id \'org.jetbrains.kotlin.multiplatform\' version \'1.4.32\'\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n  macosX64(\'native\') { // on macOS\n  // linuxX64(\'native\') // on Linux\n  // mingwX64(\'native\') // on Windows\n    binaries {\n      executable()\n    }\n  }\n}\n\nwrapper {\n  gradleVersion = \'6.7.1\'\n  distributionType = \'BIN\'\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="native-gradle.md-fd34f3e7"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="native-gradle.md-fd34f3e7"   data-title="Kotlin"      >plugins {\n    kotlin(&quot;multiplatform&quot;) version &quot;1.4.32&quot;\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n  macosX64(&quot;native&quot;) { // on macOS\n  // linuxX64(&quot;native&quot;) // on Linux\n  // mingwX64(&quot;native&quot;) // on Windows\n    binaries {\n      executable()\n    }\n  }\n}\n\ntasks.withType&lt;Wrapper&gt; {\n  gradleVersion = &quot;6.7.1&quot;\n  distributionType = Wrapper.DistributionType.BIN\n}\n</div></div></div><p id="native-gradle.md-ec3d741e" >The prepared project sources can be directly downloaded from Github:</p><ul class="list _ul" id="native-gradle.md-633e0e64"   ><li class="list__item" id="native-gradle.md-d448292f" ><p>for macOS: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-macos.zip" id="native-gradle.md-e3393347"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-macos.zip" id="native-gradle.md-313f2008"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li><li class="list__item" id="native-gradle.md-acbcaf4b" ><p>for Linux: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-linux.zip" id="native-gradle.md-cce9230a"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-linux.zip" id="native-gradle.md-d1fcff9b"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li><li class="list__item" id="native-gradle.md-d916a03f" ><p>for Windows: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-windows.zip" id="native-gradle.md-50f2edb3"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-windows.zip" id="native-gradle.md-f9bf420f"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li></ul><p id="native-gradle.md-dbee7671" >Next, create an empty <code class="code " id="native-gradle.md-1c5256bc"  >settings.gradle</code> or <code class="code " id="native-gradle.md-f5f1b862"  >settings.gradle.kts</code> file in the project folder.</p><p id="native-gradle.md-652fd8e0" >Depending on the target platform, different <a href="#mpp-supported-platforms.md" id="native-gradle.md-28ec77b2"   >functions</a>, such as <code class="code " id="native-gradle.md-8d7458cb"  >macosX64</code>, <code class="code " id="native-gradle.md-78f6ab81"  >mingwX64</code>, <code class="code " id="native-gradle.md-af34c862"  >linuxX64</code>, <code class="code " id="native-gradle.md-64d74eee"  >iosX64</code>, are used for creating the Kotlin target. The function name is the platform for which you are compiling your code. These functions optionally take the target name as a parameter, which is <code class="code " id="native-gradle.md-79e2b8eb"  >&quot;native&quot;</code> in our case. The specified <em id="native-gradle.md-22d2a490" class=""  >target name</em> is used to generate the source paths and task names in the project.</p><p id="native-gradle.md-b49949a7" >By convention, all sources are located in the <code class="code " id="native-gradle.md-20d78c83"  >src/&lt;target name&gt;[Main|Test]/kotlin</code> folders, where <code class="code " id="native-gradle.md-8cf7c325"  >main</code> is for the source code and <code class="code " id="native-gradle.md-8268bdee"  >test</code> is for tests. <code class="code " id="native-gradle.md-ab19e301"  >&lt;target name&gt;</code> corresponds to the target platform (in this case <code class="code " id="native-gradle.md-b694092e"  >native</code> ), as specified in the build file.</p><p id="native-gradle.md-5e144387" >Create a folder <code class="code " id="native-gradle.md-bbf35371"  >src/nativeMain/kotlin</code> and inside it place the file <code class="code " id="native-gradle.md-f6ddcf1b"  >hello.kt</code> with the following contents:</p><div class="code-block" data-lang="kotlin" id="native-gradle.md-1b8a115a"         >fun main() {\n  println(&quot;Hello Kotlin/Native!&quot;)\n}\n</div></section><section class="chapter"  ><h2 id="native-gradle.md-build-the-project" data-toc="native-gradle#native-gradle.md-build-the-project"  >Build the project</h2><p id="native-gradle.md-e23b7920" >From the root project folder, execute the build by running</p><p id="native-gradle.md-a1f4cab7" ><code class="code " id="native-gradle.md-184e0f41"  >gradle nativeBinaries</code></p><p id="native-gradle.md-19737dbf" >This should create a folder <code class="code " id="native-gradle.md-b7f7e005"  >build/bin/native</code> with two subfolders <code class="code " id="native-gradle.md-9b11dfcc"  >debugExecutable</code> and <code class="code " id="native-gradle.md-cb810cb4"  >releaseExecutable</code> with the corresponding binary. By default, the binary\'s name is the same as the project folder.</p></section><section class="chapter"  ><h2 id="native-gradle.md-open-the-project-in-an-ide" data-toc="native-gradle#native-gradle.md-open-the-project-in-an-ide"  >Open the project in an IDE</h2><p id="native-gradle.md-34bb1bf0" >Any IDE that supports Gradle should allow for opening the project in the IDE. In the case of <a href="https://www.jetbrains.com/idea" id="native-gradle.md-4a6b5038"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA</a>, just open the project folder, and it will automatically detect it as Kotlin/Native project.</p></section><section class="chapter"  ><h2 id="native-gradle.md-what-s-next" data-toc="native-gradle#native-gradle.md-what-s-next"  >What\'s next?</h2><p id="native-gradle.md-1dccfe14" >Learn how to <a href="#mpp-dsl-reference.md" id="native-gradle.md-ef8d6238"   >write Gradle build scripts for real-life Kotlin/Native projects</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="native-command-line-compiler.md"  >Get started with Kotlin/Native using the command-line compiler</h1><section class="chapter"  ><h2 id="native-command-line-compiler.md-obtain-the-compiler" data-toc="native-command-line-compiler#native-command-line-compiler.md-obtain-the-compiler"  >Obtain the compiler</h2><p id="native-command-line-compiler.md-6647c5d" >The Kotlin/Native compiler is available for macOS, Linux, and Windows. It is available as a command line tool and ships as part of the standard Kotlin distribution and can be downloaded from <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.4.32" id="native-command-line-compiler.md-32a1eed5"   data-external="true" rel="noopener noreferrer" >GitHub Releases</a>. It supports different targets including iOS (arm32, arm64, simulator x86_64), Windows (mingw32 and x86_64), Linux (x86_64, arm64, MIPS), macOS (x86_64), Raspberry PI, SMT32, WASM. See the full list of targets <a href="#native-overview.md" id="native-command-line-compiler.md-b3091c6a"   >here</a>. While cross-platform compilation is possible, which means using one platform to compile for a different one, in this Kotlin case we\'ll be targeting the same platform we\'re compiling on.</p><p id="native-command-line-compiler.md-cd794ee0" >While the output of the compiler does not have any dependencies or virtual machine requirements, the compiler itself requires <a href="https://jdk.java.net/11/" id="native-command-line-compiler.md-584290ae"   data-external="true" rel="noopener noreferrer" >Java 1.8 or higher runtime</a>.</p></section><section class="chapter"  ><h2 id="native-command-line-compiler.md-write-hello-kotlin-native-program" data-toc="native-command-line-compiler#native-command-line-compiler.md-write-hello-kotlin-native-program"  >Write "Hello Kotlin/Native" program</h2><p id="native-command-line-compiler.md-8b944dd5" >The application will print &quot;Hello Kotlin/Native&quot; on the standard output. In a working directory of choice, create a file named <code class="code " id="native-command-line-compiler.md-34d2f416"  >hello.kt</code> and enter the following contents:</p><div class="code-block" data-lang="kotlin" id="native-command-line-compiler.md-82bef0e4"         >fun main() {\n  println(&quot;Hello Kotlin/Native!&quot;)\n}\n</div></section><section class="chapter"  ><h2 id="native-command-line-compiler.md-compile-the-code-from-the-console" data-toc="native-command-line-compiler#native-command-line-compiler.md-compile-the-code-from-the-console"  >Compile the code from the console</h2><p id="native-command-line-compiler.md-3bf379cd" >To compile the application use the <a href="https://github.com/JetBrains/kotlin/releases" id="native-command-line-compiler.md-10350bd3"   data-external="true" rel="noopener noreferrer" >downloaded</a> compiler to execute the following command:</p><div class="code-block" data-lang="bash" id="native-command-line-compiler.md-fc36fad0"         >kotlinc-native hello.kt -o hello\n</div><p id="native-command-line-compiler.md-cc014937" >The value of <code class="code " id="native-command-line-compiler.md-c67fc914"  >-o</code> option specifies the name of the output file, so this call should generate a <code class="code " id="native-command-line-compiler.md-ab6836ea"  >hello.kexe</code> (Linux and macOS) or <code class="code " id="native-command-line-compiler.md-4d0c95e6"  >hello.exe</code> (Windows) binary file. For the full list of available compiler options, see the <a href="#compiler-reference.md" id="native-command-line-compiler.md-3c3580fa"   >compiler options reference</a>.</p><p id="native-command-line-compiler.md-eccb9ee" >While compilation from the console seems to be easy and clear, it does not scale well for larger projects with hundreds of files and libraries. For real-world projects, it is recommended to use a <a href="#native-gradle.md" id="native-command-line-compiler.md-4a0b699b"   >build system</a> and <a href="#native-get-started.md" id="native-command-line-compiler.md-3d64329c"   >IDE</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="native-concurrency.md"  >Concurrency in Kotlin/Native</h1><p id="native-concurrency.md-1f668c3f" >Kotlin/Native runtime doesn\'t encourage a classical thread-oriented concurrency model with mutually exclusive code blocks and conditional variables, as this model is known to be error-prone and unreliable. Instead, we suggest a collection of alternative approaches, allowing you to use hardware concurrency and implement blocking IO. Those approaches are as follows, and they will be elaborated on in further sections:</p><ul class="list _ul" id="native-concurrency.md-bc697ba1"   ><li class="list__item" id="native-concurrency.md-283a4f52" ><p>Workers with message passing</p></li><li class="list__item" id="native-concurrency.md-bfb514fa" ><p>Object subgraph ownership transfer</p></li><li class="list__item" id="native-concurrency.md-b43e5d15" ><p>Object subgraph freezing</p></li><li class="list__item" id="native-concurrency.md-f8a532e2" ><p>Object subgraph detachment</p></li><li class="list__item" id="native-concurrency.md-d1203938" ><p>Raw shared memory using C globals</p></li><li class="list__item" id="native-concurrency.md-c09314b2" ><p>Atomic primitives and references</p></li><li class="list__item" id="native-concurrency.md-33a82643" ><p>Coroutines for blocking operations (not covered in this document)</p></li></ul><section class="chapter"  ><h2 id="native-concurrency.md-workers" data-toc="native-concurrency#native-concurrency.md-workers"  >Workers</h2><p id="native-concurrency.md-5e7adc32" >Instead of threads Kotlin/Native runtime offers the concept of workers: concurrently executed control flow streams with an associated request queue. Workers are very similar to the actors in the Actor Model. A worker can exchange Kotlin objects with another worker, so that at any moment each mutable object is owned by a single worker, but ownership can be transferred. See section <a href="#native-concurrency.md-object-transfer-and-freezing" id="native-concurrency.md-ab64a5f8"   >Object transfer and freezing</a>.</p><p id="native-concurrency.md-f358b8d4" >Once a worker is started with the <code class="code " id="native-concurrency.md-b8a6f1ed"  >Worker.start</code> function call, it can be addressed with its own unique integer worker id. Other workers, or non-worker concurrency primitives, such as OS threads, can send a message to the worker with the <code class="code " id="native-concurrency.md-99734339"  >execute</code> call.</p><div class="code-block" data-lang="kotlin" id="native-concurrency.md-f8ff6950"         >val future = execute(TransferMode.SAFE, { SomeDataForWorker() }) {\n   // data returned by the second function argument comes to the\n   // worker routine as \'input\' parameter.\n   input -&gt;\n   // Here we create an instance to be returned when someone consumes result future.\n   WorkerResult(input.stringParam + &quot; result&quot;)\n}\n\nfuture.consume {\n  // Here we see result returned from routine above. Note that future object or\n  // id could be transferred to another worker, so we don\'t have to consume future\n  // in same execution context it was obtained.\n  result -&gt; println(&quot;result is $result&quot;)\n}\n</div><p id="native-concurrency.md-291e84eb" >The call to <code class="code " id="native-concurrency.md-dc3a84fc"  >execute</code> uses a function passed as its second parameter to produce an object subgraph (i.e. set of mutually referring objects) which is then passed as a whole to that worker, it is then no longer available to the thread that initiated the request. This property is checked if the first parameter is <code class="code " id="native-concurrency.md-28e2ff6"  >TransferMode.SAFE</code> by graph traversal and is just assumed to be true, if it is <code class="code " id="native-concurrency.md-4ff79a84"  >TransferMode.UNSAFE</code>. The last parameter to <code class="code " id="native-concurrency.md-a4b5ae2"  >execute</code> is a special Kotlin lambda, which is not allowed to capture any state, and is actually invoked in the target worker\'s context. Once processed, the result is transferred to whatever consumes it in the future, and it is attached to the object graph of that worker/thread.</p><p id="native-concurrency.md-73609515" >If an object is transferred in <code class="code " id="native-concurrency.md-8431a732"  >UNSAFE</code> mode and is still accessible from multiple concurrent executors, program will likely crash unexpectedly, so consider that last resort in optimizing, not a general purpose mechanism.</p><p id="native-concurrency.md-aff262b" >For a more complete example please refer to the <a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/samples/workers" id="native-concurrency.md-da6c5d7f"   data-external="true" rel="noopener noreferrer" >workers example</a> in the Kotlin/Native repository.</p><section class="chapter"  ><h3 id="native-concurrency.md-object-transfer-and-freezing" data-toc="native-concurrency#native-concurrency.md-object-transfer-and-freezing"  >Object transfer and freezing</h3><p id="native-concurrency.md-dce035ce" >An important invariant that Kotlin/Native runtime maintains is that the object is either owned by a single thread/worker, or it is immutable (<em id="native-concurrency.md-1f876a01" class=""  >shared XOR mutable</em> ). This ensures that the same data has a single mutator, and so there is no need for locking to exist. To achieve such an invariant, we use the concept of not externally referred object subgraphs. This is a subgraph which has no external references from outside of the subgraph, which could be checked algorithmically with O(N) complexity (in ARC systems), where N is the number of elements in such a subgraph. Such subgraphs are usually produced as a result of a lambda expression, for example some builder, and may not contain objects, referred to externally.</p><p id="native-concurrency.md-b2e72f8" >Freezing is a runtime operation making a given object subgraph immutable, by modifying the object header so that future mutation attempts throw an <code class="code " id="native-concurrency.md-c867dbf5"  >InvalidMutabilityException</code>. It is deep, so if an object has a pointer to other objects - transitive closure of such objects will be frozen. Freezing is a one way transformation, frozen objects cannot be unfrozen. Frozen objects have a nice property that due to their immutability, they can be freely shared between multiple workers/threads without breaking the &quot;mutable XOR shared&quot; invariant.</p><p id="native-concurrency.md-b7acd159" >If an object is frozen it can be checked with an extension property <code class="code " id="native-concurrency.md-39fbea67"  >isFrozen</code>, and if it is, object sharing is allowed. Currently, Kotlin/Native runtime only freezes the enum objects after creation, although additional autofreezing of certain provably immutable objects could be implemented in the future.</p></section></section><section class="chapter"  ><h2 id="native-concurrency.md-object-subgraph-detachment" data-toc="native-concurrency#native-concurrency.md-object-subgraph-detachment"  >Object subgraph detachment</h2><p id="native-concurrency.md-ba72de98" >An object subgraph without external references can be disconnected using <code class="code " id="native-concurrency.md-d553717d"  >DetachedObjectGraph&lt;T&gt;</code> to a <code class="code " id="native-concurrency.md-ea544b96"  >COpaquePointer</code> value, which could be stored in <code class="code " id="native-concurrency.md-ea2910b0"  >void*</code> data, so the disconnected object subgraphs can be stored in a C data structure, and later attached back with <code class="code " id="native-concurrency.md-ae4f6d80"  >DetachedObjectGraph&lt;T&gt;.attach()</code> in an arbitrary thread or a worker. Combining it with <a href="#native-concurrency.md-raw-shared-memory" id="native-concurrency.md-7d0bb48c"   >raw memory sharing</a> it allows side channel object transfer between concurrent threads, if the worker mechanisms are insufficient for a particular task. Note, that object detachment may require explicit leaving function holding object references and then performing cyclic garbage collection. For example, code like:</p><div class="code-block" data-lang="kotlin" id="native-concurrency.md-77725246"         >val graph = DetachedObjectGraph {\n    val map = mutableMapOf&lt;String, String&gt;()\n    for (entry in map.entries) {\n        // ...\n    }\n    map\n}\n</div><p id="native-concurrency.md-56830e0a" >will not work as expected and will throw runtime exception, as there are uncollected cycles in the detached graph, while:</p><div class="code-block" data-lang="kotlin" id="native-concurrency.md-f23e5ce5"         >val graph = DetachedObjectGraph {\n    {\n     val map = mutableMapOf&lt;String, String&gt;()\n     for (entry in map.entries) {\n         // ...\n     }\n     map\n    }().also {\n      kotlin.native.internal.GC.collect()\n    }\n }\n</div><p id="native-concurrency.md-e27e4509" >will work properly, as holding references will be released, and then cyclic garbage affecting reference counter is collected.</p></section><section class="chapter"  ><h2 id="native-concurrency.md-raw-shared-memory" data-toc="native-concurrency#native-concurrency.md-raw-shared-memory"  >Raw shared memory</h2><p id="native-concurrency.md-3a0da6cb" >Considering the strong ties between Kotlin/Native and C via interoperability, in conjunction with the other mechanisms mentioned above it is possible to build popular data structures, like concurrent hashmap or shared cache with Kotlin/Native. It is possible to rely upon shared C data, and store in it references to detached object subgraphs. Consider the following .def file:</p><div class="code-block" data-lang="c" id="native-concurrency.md-fc5038dc"         >package = global\n\n---\ntypedef struct {\n  int version;\n  void* kotlinObject;\n} SharedData;\n\nSharedData sharedData;\n</div><p id="native-concurrency.md-616c6e0c" >After running the cinterop tool it can share Kotlin data in a versionized global structure, and interact with it from Kotlin transparently via autogenerated Kotlin like this:</p><div class="code-block" data-lang="kotlin" id="native-concurrency.md-20fb3a4f"         >class SharedData(rawPtr: NativePtr) : CStructVar(rawPtr) {\n    var version: Int\n    var kotlinObject: COpaquePointer?\n}\n</div><p id="native-concurrency.md-dec16b89" >So in combination with the top-level variable declared above, it can allow looking at the same memory from different threads and building traditional concurrent structures with platform-specific synchronization primitives.</p><section class="chapter"  ><h3 id="native-concurrency.md-global-variables-and-singletons" data-toc="native-concurrency#native-concurrency.md-global-variables-and-singletons"  >Global variables and singletons</h3><p id="native-concurrency.md-97550bc9" >Frequently, global variables are a source of unintended concurrency issues, so <em id="native-concurrency.md-460ea524" class=""  >Kotlin/Native</em> implements the following mechanisms to prevent the unintended sharing of state via global objects:</p><ul class="list _ul" id="native-concurrency.md-f24db2c7"   ><li class="list__item" id="native-concurrency.md-10879ded" ><p>global variables, unless specially marked, can be only accessed from the main thread (that is, the thread <em id="native-concurrency.md-3151f8ba" class=""  >Kotlin/Native</em> runtime was first initialized), if other thread access such a global, <code class="code " id="native-concurrency.md-927cfdcf"  >IncorrectDereferenceException</code> is thrown</p></li><li class="list__item" id="native-concurrency.md-3cb1317b" ><p>for global variables marked with the <code class="code " id="native-concurrency.md-3634390b"  >@kotlin.native.ThreadLocal</code> annotation each threads keeps thread-local copy, so changes are not visible between threads</p></li><li class="list__item" id="native-concurrency.md-c181ee28" ><p>for global variables marked with the <code class="code " id="native-concurrency.md-17ed73d5"  >@kotlin.native.SharedImmutable</code> annotation value is shared, but frozen before publishing, so each threads sees the same value</p></li><li class="list__item" id="native-concurrency.md-428f0992" ><p>singleton objects unless marked with <code class="code " id="native-concurrency.md-871c0ad6"  >@kotlin.native.ThreadLocal</code> are frozen and shared, lazy values allowed, unless cyclic frozen structures were attempted to be created</p></li><li class="list__item" id="native-concurrency.md-cc9a237d" ><p>enums are always frozen</p></li></ul><p id="native-concurrency.md-bf8776ed" >Combined, these mechanisms allow natural race-free programming with code reuse across platforms in MPP projects.</p></section></section><section class="chapter"  ><h2 id="native-concurrency.md-atomic-primitives-and-references" data-toc="native-concurrency#native-concurrency.md-atomic-primitives-and-references"  >Atomic primitives and references</h2><p id="native-concurrency.md-9bce0838" >Kotlin/Native standard library provides primitives for safe working with concurrently mutable data, namely <code class="code " id="native-concurrency.md-afdc8fee"  >AtomicInt</code>, <code class="code " id="native-concurrency.md-33aa7bea"  >AtomicLong</code>, <code class="code " id="native-concurrency.md-1c8eb51e"  >AtomicNativePtr</code>, <code class="code " id="native-concurrency.md-66ec7e1f"  >AtomicReference</code> and <code class="code " id="native-concurrency.md-fc44e9ce"  >FreezableAtomicReference</code> in the package <code class="code " id="native-concurrency.md-733940f0"  >kotlin.native.concurrent</code>. Atomic primitives allows concurrency-safe update operations, such as increment, decrement and compare-and-swap, along with value setters and getters. Atomic primitives are considered always frozen by the runtime, and while their fields can be updated with the regular <code class="code " id="native-concurrency.md-3fc1ef04"  >field.value += 1</code>, it is not concurrency safe. Value must be be changed using dedicated operations, so it is possible to perform concurrent-safe global counters and similar data structures.</p><p id="native-concurrency.md-61892a12" >Some algorithms require shared mutable references across the multiple workers, for example global mutable configuration could be implemented as an immutable instance of properties list atomically replaced with the new version on configuration update as the whole in a single transaction. This way no inconsistent configuration could be seen, and at the same time configuration could be updated as needed. To achieve such functionality Kotlin/Native runtime provides two related classes: <code class="code " id="native-concurrency.md-9ccbc0cf"  >kotlin.native.concurrent.AtomicReference</code> and <code class="code " id="native-concurrency.md-75f86b87"  >kotlin.native.concurrent.FreezableAtomicReference</code>. Atomic reference holds reference to a frozen or immutable object, and its value could be updated by set or compare-and-swap operation. Thus, dedicated set of objects could be used to create mutable shared object graphs (of immutable objects). Cycles in the shared memory could be created using atomic references. Kotlin/Native runtime doesn\'t support garbage collecting cyclic data when reference cycle goes through <code class="code " id="native-concurrency.md-d3616544"  >AtomicReference</code> or frozen <code class="code " id="native-concurrency.md-25452c8b"  >FreezableAtomicReference</code>. So to avoid memory leaks atomic references that are potentially parts of shared cyclic data should be zeroed out once no longer needed.</p><p id="native-concurrency.md-1b9c84fb" >If atomic reference value is attempted to be set to non-frozen value runtime exception is thrown.</p><p id="native-concurrency.md-9e901dd8" >Freezable atomic reference is similar to the regular atomic reference, but until frozen behaves like regular box for a reference. After freezing it behaves like an atomic reference, and can only hold a reference to a frozen object.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="native-immutability.md"  >Immutability in Kotlin/Native</h1><p id="native-immutability.md-dbe5147f" >Kotlin/Native implements strict mutability checks, ensuring the important invariant that the object is either immutable or accessible from the single thread at that moment in time (<code class="code " id="native-immutability.md-708cc718"  >mutable XOR global</code> ).</p><p id="native-immutability.md-cb7bf775" >Immutability is a runtime property in Kotlin/Native, and can be applied to an arbitrary object subgraph using the <code class="code " id="native-immutability.md-9deea930"  >kotlin.native.concurrent.freeze</code> function. It makes all the objects reachable from the given one immutable, such a transition is a one-way operation (i.e., objects cannot be unfrozen later). Some naturally immutable objects such as <code class="code " id="native-immutability.md-68f039dd"  >kotlin.String</code>, <code class="code " id="native-immutability.md-4a04276d"  >kotlin.Int</code>, and other primitive types, along with <code class="code " id="native-immutability.md-c8af0e30"  >AtomicInt</code> and <code class="code " id="native-immutability.md-911e7b58"  >AtomicReference</code> are frozen by default. If a mutating operation is applied to a frozen object, an <code class="code " id="native-immutability.md-a65f839a"  >InvalidMutabilityException</code> is thrown.</p><p id="native-immutability.md-b24c8454" >To achieve <code class="code " id="native-immutability.md-d2cabd20"  >mutable XOR global</code> invariant, all globally visible state (currently, <code class="code " id="native-immutability.md-45d236c2"  >object</code> singletons and enums) are automatically frozen. If object freezing is not desired, a <code class="code " id="native-immutability.md-6e4df8b0"  >kotlin.native.ThreadLocal</code> annotation can be used, which will make the object state thread local, and so, mutable (but the changed state is not visible to other threads).</p><p id="native-immutability.md-8f98810a" >Top level/global variables of non-primitive types are by default accessible in the main thread (i.e., the thread which initialized <em id="native-immutability.md-6d22069" class=""  >Kotlin/Native</em> runtime first) only. Access from another thread will lead to an <code class="code " id="native-immutability.md-a80a735"  >IncorrectDereferenceException</code> being thrown. To make such variables accessible in other threads, you can use either the <code class="code " id="native-immutability.md-56cf1d9c"  >@ThreadLocal</code> annotation, and mark the value thread local or <code class="code " id="native-immutability.md-9604ea06"  >@SharedImmutable</code>, which will make the value frozen and accessible from other threads.</p><p id="native-immutability.md-12930458" >Class <code class="code " id="native-immutability.md-9bdfdcac"  >AtomicReference</code> can be used to publish the changed frozen state to other threads, and so build patterns like shared caches.</p></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="native-libraries.md"  >Kotlin/Native libraries</h1><section class="chapter"  ><h2 id="native-libraries.md-kotlin-compiler-specifics" data-toc="native-libraries#native-libraries.md-kotlin-compiler-specifics"  >Kotlin compiler specifics</h2><p id="native-libraries.md-ebb23f78" >To produce a library with the Kotlin/Native compiler use the <code class="code " id="native-libraries.md-a109fbf9"  >-produce library</code> or <code class="code " id="native-libraries.md-e086ae72"  >-p library</code> flag. For example:</p><div class="code-block" data-lang="bash" id="native-libraries.md-e3a3a482"         >$ kotlinc-native foo.kt -p library -o bar\n</div><p id="native-libraries.md-be2e7896" >This command will produce a <code class="code " id="native-libraries.md-9f7fdbd8"  >bar.klib</code> with the compiled contents of <code class="code " id="native-libraries.md-94a7618a"  >foo.kt</code>.</p><p id="native-libraries.md-343c907e" >To link to a library use the <code class="code " id="native-libraries.md-ad49c7bd"  >-library &lt;name&gt;</code> or <code class="code " id="native-libraries.md-216f9228"  >-l &lt;name&gt;</code> flag. For example:</p><div class="code-block" data-lang="bash" id="native-libraries.md-30c6dc49"         >$ kotlinc-native qux.kt -l bar\n</div><p id="native-libraries.md-f2c7923a" >This command will produce a <code class="code " id="native-libraries.md-d577ba57"  >program.kexe</code> out of <code class="code " id="native-libraries.md-a2faa0a3"  >qux.kt</code> and <code class="code " id="native-libraries.md-6c65411e"  >bar.klib</code></p></section><section class="chapter"  ><h2 id="native-libraries.md-cinterop-tool-specifics" data-toc="native-libraries#native-libraries.md-cinterop-tool-specifics"  >cinterop tool specifics</h2><p id="native-libraries.md-35bae29a" >The <b id="native-libraries.md-e6269cec" class=""  >cinterop</b> tool produces <code class="code " id="native-libraries.md-60ba828d"  >.klib</code> wrappers for native libraries as its main output. For example, using the simple <code class="code " id="native-libraries.md-a77b32db"  >libgit2.def</code> native library definition file provided in your Kotlin/Native distribution</p><div class="code-block" data-lang="bash" id="native-libraries.md-1d0038be"         >$ cinterop -def samples/gitchurn/src/nativeInterop/cinterop/libgit2.def -compiler-option -I/usr/local/include -o libgit2\n</div><p id="native-libraries.md-a58ebc96" >we will obtain <code class="code " id="native-libraries.md-59320c06"  >libgit2.klib</code>.</p><p id="native-libraries.md-1c446d73" >See more details in <a href="#native-c-interop.md" id="native-libraries.md-6b076f68"   >C Interop</a></p></section><section class="chapter"  ><h2 id="native-libraries.md-klib-utility" data-toc="native-libraries#native-libraries.md-klib-utility"  >klib utility</h2><p id="native-libraries.md-29d0435f" >The <b id="native-libraries.md-32411e05" class=""  >klib</b> library management utility allows you to inspect and install the libraries.</p><p id="native-libraries.md-eafa6de4" >The following commands are available:</p><ul class="list _ul" id="native-libraries.md-ccff9239"   ><li class="list__item" id="native-libraries.md-55d8146c" ><p id="native-libraries.md-faf4f18d" ><code class="code " id="native-libraries.md-f7713f9c"  >content</code> – list library contents:</p><div class="code-block" data-lang="bash" id="native-libraries.md-b9a66ff3"         >$ klib contents &lt;name&gt;\n</div></li><li class="list__item" id="native-libraries.md-63c5ead9" ><p id="native-libraries.md-a07a9e7a" ><code class="code " id="native-libraries.md-dc2a8f13"  >info</code> – inspect the bookkeeping details of the library</p><div class="code-block" data-lang="bash" id="native-libraries.md-db3ea154"         >$ klib info &lt;name&gt;\n</div></li><li class="list__item" id="native-libraries.md-a882c843" ><p id="native-libraries.md-161f4609" ><code class="code " id="native-libraries.md-d58d9057"  >install</code> – install the library to the default location use</p><div class="code-block" data-lang="bash" id="native-libraries.md-bf148b53"         >$ klib install &lt;name&gt;\n</div></li><li class="list__item" id="native-libraries.md-b8824ffb" ><p id="native-libraries.md-a7672cee" ><code class="code " id="native-libraries.md-6610efa6"  >remove</code> – remove the library from the default repository use</p><div class="code-block" data-lang="bash" id="native-libraries.md-5f68e3ee"         >$ klib remove &lt;name&gt;\n</div></li></ul><p id="native-libraries.md-9d01e13e" >All of the above commands accept an additional <code class="code " id="native-libraries.md-32df1058"  >-repository &lt;directory&gt;</code> argument for specifying a repository different to the default one.</p><div class="code-block" data-lang="bash" id="native-libraries.md-ada6a457"         >$ klib &lt;command&gt; &lt;name&gt; -repository &lt;directory&gt;\n</div></section><section class="chapter"  ><h2 id="native-libraries.md-several-examples" data-toc="native-libraries#native-libraries.md-several-examples"  >Several examples</h2><p id="native-libraries.md-702886ac" >First let\'s create a library. Place the tiny library source code into <code class="code " id="native-libraries.md-96666099"  >kotlinizer.kt</code>:</p><div class="code-block" data-lang="kotlin" id="native-libraries.md-e3bf3078"         >package kotlinizer\nval String.kotlinized\n    get() = &quot;Kotlin $this&quot;\n</div><div class="code-block" data-lang="bash" id="native-libraries.md-527161fd"         >$ kotlinc-native kotlinizer.kt -p library -o kotlinizer\n</div><p id="native-libraries.md-6779df9e" >The library has been created in the current directory:</p><div class="code-block" data-lang="bash" id="native-libraries.md-a4008e3d"         >$ ls kotlinizer.klib\nkotlinizer.klib\n</div><p id="native-libraries.md-4262b157" >Now let\'s check out the contents of the library:</p><div class="code-block" data-lang="bash" id="native-libraries.md-8c6a8a26"         >$ klib contents kotlinizer\n</div><p id="native-libraries.md-63653772" >You can install <code class="code " id="native-libraries.md-c6c7f2e5"  >kotlinizer</code> to the default repository:</p><div class="code-block" data-lang="bash" id="native-libraries.md-ebf2f88e"         >$ klib install kotlinizer\n</div><p id="native-libraries.md-c8ea1c27" >Remove any traces of it from the current directory:</p><div class="code-block" data-lang="bash" id="native-libraries.md-d0e9ff46"         >$ rm kotlinizer.klib\n</div><p id="native-libraries.md-851c70e3" >Create a very short program and place it into a <code class="code " id="native-libraries.md-18e510d9"  >use.kt</code>:</p><div class="code-block" data-lang="kotlin" id="native-libraries.md-8b28b905"         >import kotlinizer.*\n\nfun main(args: Array&lt;String&gt;) {\n    println(&quot;Hello, ${&quot;world&quot;.kotlinized}!&quot;)\n}\n</div><p id="native-libraries.md-52376162" >Now compile the program linking with the library you have just created:</p><div class="code-block" data-lang="bash" id="native-libraries.md-eb6b2349"         >$ kotlinc-native use.kt -l kotlinizer -o kohello\n</div><p id="native-libraries.md-90f65c6" >And run the program:</p><div class="code-block" data-lang="bash" id="native-libraries.md-b8b99f60"         >$ ./kohello.kexe\nHello, Kotlin world!\n</div><p id="native-libraries.md-5ad8bfba" >Have fun!</p></section><section class="chapter"  ><h2 id="native-libraries.md-advanced-topics" data-toc="native-libraries#native-libraries.md-advanced-topics"  >Advanced topics</h2><section class="chapter"  ><h3 id="native-libraries.md-library-search-sequence" data-toc="native-libraries#native-libraries.md-library-search-sequence"  >Library search sequence</h3><p id="native-libraries.md-f2a725c9" >When given a <code class="code " id="native-libraries.md-a2561ebc"  >-library foo</code> flag, the compiler searches the <code class="code " id="native-libraries.md-55b024d4"  >foo</code> library in the following order:</p><ul class="list _ul" id="native-libraries.md-556dc4a2"   ><li class="list__item" id="native-libraries.md-18e77b2d" ><p>Current compilation directory or an absolute path.</p></li><li class="list__item" id="native-libraries.md-8f9ab109" ><p>All repositories specified with <code class="code " id="native-libraries.md-5451ff82"  >-repo</code> flag.</p></li><li class="list__item" id="native-libraries.md-ca9fca15" ><p>Libraries installed in the default repository (For now the default is <code class="code " id="native-libraries.md-feba3b61"  >~/.konan</code>, however it could be changed by setting <b id="native-libraries.md-3e64c140" class=""  >KONAN_DATA_DIR</b> environment variable).</p></li><li class="list__item" id="native-libraries.md-679d4a03" ><p>Libraries installed in <code class="code " id="native-libraries.md-60c3a1e1"  >$installation/klib</code> directory.</p></li></ul></section><section class="chapter"  ><h3 id="native-libraries.md-library-format" data-toc="native-libraries#native-libraries.md-library-format"  >Library format</h3><p id="native-libraries.md-f5d2481a" >Kotlin/Native libraries are zip files containing a predefined directory structure, with the following layout:</p><p id="native-libraries.md-56456968" ><code class="code " id="native-libraries.md-a3411d61"  >foo.klib</code> when unpacked as <code class="code " id="native-libraries.md-44aad67b"  >foo/</code> gives us:</p><div class="code-block" data-lang="plaintext" id="native-libraries.md-cb46c9f5"         >  - foo/\n    - $component_name/\n      - ir/\n        - Serialized Kotlin IR.\n      - targets/\n        - $platform/\n          - kotlin/\n            - Kotlin compiled to LLVM bitcode.\n          - native/\n            - Bitcode files of additional native objects.\n        - $another_platform/\n          - There can be several platform specific kotlin and native pairs.\n      - linkdata/\n        - A set of ProtoBuf files with serialized linkage metadata.\n      - resources/\n        - General resources such as images. (Not used yet).\n      - manifest - A file in the java property format describing the library.\n</div><p id="native-libraries.md-4bc845c" >An example layout can be found in <code class="code " id="native-libraries.md-3a4ac4cf"  >klib/stdlib</code> directory of your installation.</p></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="native-platform-libs.md"  >Platform libraries</h1><p id="native-platform-libs.md-4e5515f7" >To provide access to user\'s native operating system services, Kotlin/Native distribution includes a set of prebuilt libraries specific to each target. We call them <b id="native-platform-libs.md-cce041ef" class=""  >Platform Libraries</b>.</p><section class="chapter"  ><h2 id="native-platform-libs.md-posix-bindings" data-toc="native-platform-libs#native-platform-libs.md-posix-bindings"  >POSIX bindings</h2><p id="native-platform-libs.md-38f11ed8" >For all Unix- or Windows-based targets (including Android and iOS targets) we provide the <code class="code " id="native-platform-libs.md-a0b42a42"  >posix</code> platform lib. It contains bindings to platform\'s implementation of the <a href="https://en.wikipedia.org/wiki/POSIX" id="native-platform-libs.md-10ff2dcc"   data-external="true" rel="noopener noreferrer" >POSIX standard</a>.</p><p id="native-platform-libs.md-db6be66f" >To use the library, just import it:</p><div class="code-block" data-lang="kotlin" id="native-platform-libs.md-9d77cac1"         >import platform.posix.*\n</div><p id="native-platform-libs.md-b0e3df9e" >The only target for which it is not available is <a href="https://en.wikipedia.org/wiki/WebAssembly" id="native-platform-libs.md-a73d0288"   data-external="true" rel="noopener noreferrer" >WebAssembly</a>.</p><p id="native-platform-libs.md-6f5e383" >Note that the content of <code class="code " id="native-platform-libs.md-e3d5ed24"  >platform.posix</code> is NOT identical on different platforms, in the same way as different <code class="code " id="native-platform-libs.md-1d6203e3"  >POSIX</code> implementations are a little different.</p></section><section class="chapter"  ><h2 id="native-platform-libs.md-popular-native-libraries" data-toc="native-platform-libs#native-platform-libs.md-popular-native-libraries"  >Popular native libraries</h2><p id="native-platform-libs.md-856068e0" >There are many more platform libraries available for host and cross-compilation targets. Kotlin/Native distribution provides access to OpenGL, zlib and other popular native libraries on applicable platforms.</p><p id="native-platform-libs.md-251e36be" >On Apple platforms, <code class="code " id="native-platform-libs.md-a751234b"  >objc</code> library is provided for interoperability with <a href="https://en.wikipedia.org/wiki/Objective-C" id="native-platform-libs.md-5e9b46f4"   data-external="true" rel="noopener noreferrer" >Objective-C</a>.</p><p id="native-platform-libs.md-83e6f739" >Inspect the contents of <code class="code " id="native-platform-libs.md-4bd787"  >dist/klib/platform/$target</code> of the distribution for the details.</p></section><section class="chapter"  ><h2 id="native-platform-libs.md-availability-by-default" data-toc="native-platform-libs#native-platform-libs.md-availability-by-default"  >Availability by default</h2><p id="native-platform-libs.md-f28ad9f9" >The packages from platform libraries are available by default. No special link flags need to be specified to use them. Kotlin/Native compiler automatically detects which of the platform libraries have been accessed and automatically links the needed libraries.</p><p id="native-platform-libs.md-9e355765" >On the other hand, the platform libs in the distribution are merely just wrappers and bindings to the native libraries. That means the native libraries themselves (<code class="code " id="native-platform-libs.md-5ac0bcfe"  >.so</code>, <code class="code " id="native-platform-libs.md-f6770c2"  >.a</code>, <code class="code " id="native-platform-libs.md-a695d082"  >.dylib</code>, <code class="code " id="native-platform-libs.md-e9568366"  >.dll</code> etc) should be installed on the machine.</p></section><section class="chapter"  ><h2 id="native-platform-libs.md-examples" data-toc="native-platform-libs#native-platform-libs.md-examples"  >Examples</h2><p id="native-platform-libs.md-4606daef" >The Kotlin/Native repository provides a wide spectrum of examples demonstrating the use of platform libraries. See <a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/samples" id="native-platform-libs.md-b790b709"   data-external="true" rel="noopener noreferrer" >samples</a> for details.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="native-dynamic-libraries.md"  >Kotlin/Native as a dynamic library – tutorial</h1><p id="native-dynamic-libraries.md-b6ea163b" >Learn how you can use the Kotlin/Native code from existing native applications or libraries. For this, you need to compile the Kotlin code into a dynamic library, <code class="code " id="native-dynamic-libraries.md-47e68d3a"  >.so</code>, <code class="code " id="native-dynamic-libraries.md-3ab7115b"  >.dylib</code>, and <code class="code " id="native-dynamic-libraries.md-3be42eca"  >.dll</code>.</p><p id="native-dynamic-libraries.md-eb31916c" >Kotlin/Native also has tight integration with Apple technologies. The <a href="#apple-framework.md" id="native-dynamic-libraries.md-7fecf"   >Kotlin/Native as an Apple Framework</a> tutorial explains how to compile Kotlin code into a framework for Swift and Objective-C.</p><p id="native-dynamic-libraries.md-867fa47f" >In this tutorial, you will:</p><ul class="list _ul" id="native-dynamic-libraries.md-9e1aaef6"   ><li class="list__item" id="native-dynamic-libraries.md-1925e652" ><a href="#native-dynamic-libraries.md-create-a-kotlin-library" id="native-dynamic-libraries.md-121b03c"   >Compile a Kotlin code to a dynamic library</a></li><li class="list__item" id="native-dynamic-libraries.md-54be5d2e" ><a href="#native-dynamic-libraries.md-generated-headers-file" id="native-dynamic-libraries.md-d068b373"   >Examine generated C headers</a></li><li class="list__item" id="native-dynamic-libraries.md-954d4d7f" ><a href="#native-dynamic-libraries.md-use-generated-headers-from-c" id="native-dynamic-libraries.md-1f8803ab"   >Use the Kotlin dynamic library from C</a></li><li class="list__item" id="native-dynamic-libraries.md-198a9452" ><p>Compile and run the example on <a href="#native-dynamic-libraries.md-compile-and-run-the-example-on-linux-and-macos" id="native-dynamic-libraries.md-bc025a74"   >Linux and Mac</a> and <a href="#native-dynamic-libraries.md-compile-and-run-the-example-on-windows" id="native-dynamic-libraries.md-318a49cf"   >Windows</a></p></li></ul><section class="chapter"  ><h2 id="native-dynamic-libraries.md-create-a-kotlin-library" data-toc="native-dynamic-libraries#native-dynamic-libraries.md-create-a-kotlin-library"  >Create a Kotlin library</h2><p id="native-dynamic-libraries.md-15543fe7" >Kotlin/Native compiler can produce a dynamic library out of the Kotlin code. A dynamic library often comes with a header file, a <code class="code " id="native-dynamic-libraries.md-1f60a72f"  >.h</code> file, which you will use to call the compiled code from C.</p><p id="native-dynamic-libraries.md-470b3c62" >The best way to understand these techniques is to try them out. First, create a first tiny Kotlin library and use it from a C program.</p><p id="native-dynamic-libraries.md-48e7edce" >Start by creating a library file in Kotlin and save it as <code class="code " id="native-dynamic-libraries.md-3c057331"  >hello.kt</code>:</p><div class="code-block" data-lang="kotlin" id="native-dynamic-libraries.md-f28f773b"         >package example\n\nobject Object {\n  val field = &quot;A&quot;\n}\n\nclass Clazz {\n  fun memberFunction(p: Int): ULong = 42UL\n}\n\nfun forIntegers(b: Byte, s: Short, i: UInt, l: Long) { }\nfun forFloats(f: Float, d: Double) { }\n\nfun strings(str: String) : String? {\n  return &quot;That is \'$str\' from C&quot;\n}\n\nval globalString = &quot;A global String&quot;\n</div><p id="native-dynamic-libraries.md-11a6128b" >While it is possible to use the command line, either directly or by combining it with a script file (such as <code class="code " id="native-dynamic-libraries.md-8a10640e"  >.sh</code> or <code class="code " id="native-dynamic-libraries.md-5b013f35"  >.bat</code> file), this approach doesn\'t scale well for big projects that have hundreds of files and libraries. It is then better to use the Kotlin/Native compiler with a build system, as it helps to download and cache the Kotlin/Native compiler binaries and libraries with transitive dependencies and run the compiler and tests. Kotlin/Native can use the <a href="https://gradle.org" id="native-dynamic-libraries.md-ba6aac45"   data-external="true" rel="noopener noreferrer" >Gradle</a> build system through the <a href="#mpp-discover-project.md-multiplatform-plugin" id="native-dynamic-libraries.md-5d883c74"   >kotlin-multiplatform</a> plugin.</p><p id="native-dynamic-libraries.md-f6dd34eb" >We covered the basics of setting up an IDE compatible project with Gradle in the <a href="#native-gradle.md" id="native-dynamic-libraries.md-9f6724a6"   >A Basic Kotlin/Native Application</a> tutorial. Please check it out if you are looking for detailed first steps and instructions on how to start a new Kotlin/Native project and open it in IntelliJ IDEA. In this tutorial, we\'ll look at the advanced C interop related usages of Kotlin/Native and <a href="#mpp-discover-project.md-multiplatform-plugin" id="native-dynamic-libraries.md-730f9c9b"   >multiplatform</a> builds with Gradle.</p><p id="native-dynamic-libraries.md-88878ab7" >First, create a project folder. All the paths in this tutorial will be relative to this folder. Sometimes the missing directories will have to be created before any new files can be added.</p><p id="native-dynamic-libraries.md-3040630e" >Use the following <code class="code " id="native-dynamic-libraries.md-69e98eaf"  >build.gradle(.kts)</code> Gradle build file:</p><div class="tabs" id="native-dynamic-libraries.md-ee2033b" ><div class="tabs__content" data-gtm="tab" id="native-dynamic-libraries.md-ddffa888"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="native-dynamic-libraries.md-ddffa888"   data-title="Groovy"      >plugins {\n    id \'org.jetbrains.kotlin.multiplatform\' version \'1.4.32\'\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n  linuxX64(&quot;native&quot;) {  // on Linux\n  // macosX64(&quot;native&quot;) { // on macOS\n  // mingwX64(&quot;native&quot;) { //on Windows\n    binaries {\n      sharedLib {\n        baseName = &quot;native&quot; // on Linux and macOS\n        // baseName = &quot;libnative&quot; //on Windows\n      }\n    }\n  }\n}\n\nwrapper {\n  gradleVersion = &quot;6.7.1&quot;\n  distributionType = &quot;ALL&quot;\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="native-dynamic-libraries.md-b28d96f5"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="native-dynamic-libraries.md-b28d96f5"   data-title="Kotlin"      >plugins {\n    kotlin(&quot;multiplatform&quot;) version &quot;1.4.32&quot;\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n  linuxX64(&quot;native&quot;) { // on Linux\n  // macosX64(&quot;native&quot;) { // on macOS\n  // mingwX64(&quot;native&quot;) { // on Windows\n    binaries {\n      sharedLib {\n        baseName = &quot;native&quot; // on Linux and macOS\n        // baseName = &quot;libnative&quot; // on Windows\n      }\n    }\n  }\n}\n\ntasks.wrapper {\n  gradleVersion = &quot;6.7.1&quot;\n  distributionType = Wrapper.DistributionType.ALL\n}\n</div></div></div><p id="native-dynamic-libraries.md-29b0ce2" >The prepared project sources can be directly downloaded from Github:</p><ul class="list _ul" id="native-dynamic-libraries.md-1b3b29b5"   ><li class="list__item" id="native-dynamic-libraries.md-a4c0a2b9" ><p>for macOS: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-macos.zip" id="native-dynamic-libraries.md-6deac85b"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-macos.zip" id="native-dynamic-libraries.md-5447e94c"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li><li class="list__item" id="native-dynamic-libraries.md-60ef6fbb" ><p>for Linux: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-linux.zip" id="native-dynamic-libraries.md-8e9afe22"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-linux.zip" id="native-dynamic-libraries.md-a26887e6"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li><li class="list__item" id="native-dynamic-libraries.md-8b0b12df" ><p>for Windows: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-groovy-windows.zip" id="native-dynamic-libraries.md-fbb58c27"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-shared-lib-kotlin-windows.zip" id="native-dynamic-libraries.md-6a259fdc"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li></ul><p id="native-dynamic-libraries.md-f99f1deb" >Move the sources file into the <code class="code " id="native-dynamic-libraries.md-addedfaa"  >src/nativeMain/kotlin</code> folder under the project. This is the default path, for where sources are located, when the <a href="#mpp-discover-project.md-multiplatform-plugin" id="native-dynamic-libraries.md-2e33b851"   >kotlin-multiplatform</a> plugin is used. Use the following block to instruct and configure the project to generate a dynamic or shared library:</p><div class="code-block" data-lang="kotlin" id="native-dynamic-libraries.md-24f78e03"         >binaries {\n  sharedLib {\n    baseName = &quot;native&quot; // on Linux and macOS\n    // baseName = &quot;libnative&quot; // on Windows\n  }  \n}\n</div><p id="native-dynamic-libraries.md-51d5cf61" >The <code class="code " id="native-dynamic-libraries.md-e84c627b"  >libnative</code> is used as the library name, the generated header file name prefix. It is also prefixes all declarations in the header file.</p><p id="native-dynamic-libraries.md-3ef09e01" >Now you can <a href="#native-get-started.md" id="native-dynamic-libraries.md-fd890b33"   >open the project in IntelliJ IDEA</a> and to see how to fix the example project. While doing this, we\'ll examine how C functions are mapped into Kotlin/Native declarations.</p><p id="native-dynamic-libraries.md-c30da8bc" >Run the <code class="code " id="native-dynamic-libraries.md-665660fa"  >linkNative</code> Gradle task to build the library in the IDE or by calling the following console command:</p><div class="code-block" data-lang="bash" id="native-dynamic-libraries.md-eaba1fb1"         >./gradlew linkNative\n</div><p id="native-dynamic-libraries.md-22fa7621" >The build generates the following files under the <code class="code " id="native-dynamic-libraries.md-72a01f9d"  >build/bin/native/debugShared</code> folder, depending on the host OS:</p><ul class="list _ul" id="native-dynamic-libraries.md-b6b31b6b"   ><li class="list__item" id="native-dynamic-libraries.md-854e58f0" ><p>macOS: <code class="code " id="native-dynamic-libraries.md-6f972cc9"  >libnative_api.h</code> and <code class="code " id="native-dynamic-libraries.md-c266a7ac"  >libnative.dylib</code></p></li><li class="list__item" id="native-dynamic-libraries.md-134040d7" ><p>Linux: <code class="code " id="native-dynamic-libraries.md-3f8226d6"  >libnative_api.h</code> and <code class="code " id="native-dynamic-libraries.md-88910ef2"  >libnative.so</code></p></li><li class="list__item" id="native-dynamic-libraries.md-22d799d7" ><p>Windows: <code class="code " id="native-dynamic-libraries.md-4ab804a1"  >libnative_api.h</code>, <code class="code " id="native-dynamic-libraries.md-cafba3ff"  >libnative_symbols.def</code> and <code class="code " id="native-dynamic-libraries.md-67a2ff3e"  >libnative.dll</code></p></li></ul><p id="native-dynamic-libraries.md-ca4d3b75" >The same rules are used by the Kotlin/Native compiler to generate the <code class="code " id="native-dynamic-libraries.md-1eb05fdd"  >.h</code> file for all platforms. <br/> Let\'s check out the C API of our Kotlin library.`</p></section><section class="chapter"  ><h2 id="native-dynamic-libraries.md-generated-headers-file" data-toc="native-dynamic-libraries#native-dynamic-libraries.md-generated-headers-file"  >Generated headers file</h2><p id="native-dynamic-libraries.md-dec796cb" >In the <code class="code " id="native-dynamic-libraries.md-3c6faa5d"  >libnative_api.h</code>, you\'ll find the following code. Let\'s discuss the code in parts to make it easier to understand.</p><aside data-type="note" class="prompt" data-title="" id="native-dynamic-libraries.md-46420963" ><p id="native-dynamic-libraries.md-e384f956" >The way Kotlin/Native exports symbols is subject to change without notice.</p></aside><p id="native-dynamic-libraries.md-bdbfa26d" >The very first part contains the standard C/C++ header and footer:</p><div class="code-block" data-lang="c" id="native-dynamic-libraries.md-e9ba419d"         >#ifndef KONAN_DEMO_H\n#define KONAN_DEMO_H\n#ifdef __cplusplus\nextern &quot;C&quot; {\n#endif\n\n/// THE REST OF THE GENERATED CODE GOES HERE\n\n#ifdef __cplusplus\n}  /* extern &quot;C&quot; */\n#endif\n#endif  /* KONAN_DEMO_H */\n</div><p id="native-dynamic-libraries.md-7ea15fc2" >After the rituals in the <code class="code " id="native-dynamic-libraries.md-1aef58ab"  >libnative_api.h</code>, there is a block with the common type definitions:</p><div class="code-block" data-lang="c" id="native-dynamic-libraries.md-9aa95a14"         >#ifdef __cplusplus\ntypedef bool            libnative_KBoolean;\n#else\ntypedef _Bool           libnative_KBoolean;\n#endif\ntypedef unsigned short     libnative_KChar;\ntypedef signed char        libnative_KByte;\ntypedef short              libnative_KShort;\ntypedef int                libnative_KInt;\ntypedef long long          libnative_KLong;\ntypedef unsigned char      libnative_KUByte;\ntypedef unsigned short     libnative_KUShort;\ntypedef unsigned int       libnative_KUInt;\ntypedef unsigned long long libnative_KULong;\ntypedef float              libnative_KFloat;\ntypedef double             libnative_KDouble;\ntypedef void*              libnative_KNativePtr;\n</div><p id="native-dynamic-libraries.md-9f6b997c" >Kotlin uses the <code class="code " id="native-dynamic-libraries.md-2129daba"  >libnative_</code> prefix for all declarations in the created <code class="code " id="native-dynamic-libraries.md-dcb1edea"  >libnative_api.h</code> file. Let\'s present the mapping of the types in a more readable way:</p><div class="table-wrapper" ><table class=" wide" id="native-dynamic-libraries.md-a4ad1b0c"  ><thead><tr class="ijRowHead" id="native-dynamic-libraries.md-65366b0b" ><th id="native-dynamic-libraries.md-39168e3f"    >Kotlin Define</th><th id="native-dynamic-libraries.md-9cf3e8b0"    >C Type</th></tr></thead><tbody ><tr class="" id="native-dynamic-libraries.md-fe5deec7" ><td id="native-dynamic-libraries.md-1ba9a5ac"    ><code class="code " id="native-dynamic-libraries.md-b06c6e6a"  >libnative_KBoolean</code></td><td id="native-dynamic-libraries.md-80a0882e"    ><code class="code " id="native-dynamic-libraries.md-3a1a69a8"  >bool</code> or <code class="code " id="native-dynamic-libraries.md-8fa49097"  >_Bool</code></td></tr><tr class="" id="native-dynamic-libraries.md-9d88cbd6" ><td id="native-dynamic-libraries.md-184cdb2e"    ><code class="code " id="native-dynamic-libraries.md-42f8ea6e"  >libnative_KChar</code></td><td id="native-dynamic-libraries.md-55617112"    ><code class="code " id="native-dynamic-libraries.md-26c26b4b"  >unsigned short</code></td></tr><tr class="" id="native-dynamic-libraries.md-55737b34" ><td id="native-dynamic-libraries.md-e8696515"    ><code class="code " id="native-dynamic-libraries.md-66d3db5b"  >libnative_KByte</code></td><td id="native-dynamic-libraries.md-7291a12d"    ><code class="code " id="native-dynamic-libraries.md-fe1e227e"  >signed char</code></td></tr><tr class="" id="native-dynamic-libraries.md-e053f8cf" ><td id="native-dynamic-libraries.md-732320fd"    ><code class="code " id="native-dynamic-libraries.md-b40c349"  >libnative_KShort</code></td><td id="native-dynamic-libraries.md-7dec347a"    ><code class="code " id="native-dynamic-libraries.md-8694171"  >short</code></td></tr><tr class="" id="native-dynamic-libraries.md-972cd064" ><td id="native-dynamic-libraries.md-a18b72d0"    ><code class="code " id="native-dynamic-libraries.md-9414d977"  >libnative_KInt</code></td><td id="native-dynamic-libraries.md-3dbdb0e"    ><code class="code " id="native-dynamic-libraries.md-c4f719b3"  >int</code></td></tr><tr class="" id="native-dynamic-libraries.md-aa5a02a2" ><td id="native-dynamic-libraries.md-18c2a19f"    ><code class="code " id="native-dynamic-libraries.md-68bbfbe1"  >libnative_KLong</code></td><td id="native-dynamic-libraries.md-f6242cd5"    ><code class="code " id="native-dynamic-libraries.md-92d67dd0"  >long long</code></td></tr><tr class="" id="native-dynamic-libraries.md-8791e324" ><td id="native-dynamic-libraries.md-3058486f"    ><code class="code " id="native-dynamic-libraries.md-ccf4e4d2"  >libnative_KUByte</code></td><td id="native-dynamic-libraries.md-7ded125c"    ><code class="code " id="native-dynamic-libraries.md-73da47ba"  >unsigned char</code></td></tr><tr class="" id="native-dynamic-libraries.md-4e9545ed" ><td id="native-dynamic-libraries.md-c17a5463"    ><code class="code " id="native-dynamic-libraries.md-f721e442"  >libnative_KUShort</code></td><td id="native-dynamic-libraries.md-c8ff3d44"    ><code class="code " id="native-dynamic-libraries.md-575f0ede"  >unsigned short</code></td></tr><tr class="" id="native-dynamic-libraries.md-7a7b07c7" ><td id="native-dynamic-libraries.md-4cc28cbb"    ><code class="code " id="native-dynamic-libraries.md-f48a3dd1"  >libnative_KUInt</code></td><td id="native-dynamic-libraries.md-f56f2e00"    ><code class="code " id="native-dynamic-libraries.md-a48a0fd7"  >unsigned int</code></td></tr><tr class="" id="native-dynamic-libraries.md-6719c9c0" ><td id="native-dynamic-libraries.md-3c8d22c9"    ><code class="code " id="native-dynamic-libraries.md-d4dac368"  >libnative_KULong</code></td><td id="native-dynamic-libraries.md-fb1b2a58"    ><code class="code " id="native-dynamic-libraries.md-c7b021cc"  >unsigned long long</code></td></tr><tr class="" id="native-dynamic-libraries.md-71f9f763" ><td id="native-dynamic-libraries.md-147b57ec"    ><code class="code " id="native-dynamic-libraries.md-58409b90"  >libnative_KFloat</code></td><td id="native-dynamic-libraries.md-bb0c7fe6"    ><code class="code " id="native-dynamic-libraries.md-7780fe5a"  >float</code></td></tr><tr class="" id="native-dynamic-libraries.md-858702c0" ><td id="native-dynamic-libraries.md-65748d1b"    ><code class="code " id="native-dynamic-libraries.md-cd140bde"  >libnative_KDouble</code></td><td id="native-dynamic-libraries.md-415cdedf"    ><code class="code " id="native-dynamic-libraries.md-ed2c563"  >double</code></td></tr><tr class="" id="native-dynamic-libraries.md-eb9905fe" ><td id="native-dynamic-libraries.md-dc58c2d6"    ><code class="code " id="native-dynamic-libraries.md-bc802cd0"  >libnative_KNativePtr</code></td><td id="native-dynamic-libraries.md-ab8441bb"    ><code class="code " id="native-dynamic-libraries.md-f76cffc"  >void*</code></td></tr></tbody ></table ></div><p id="native-dynamic-libraries.md-25bea066" >The definitions part shows how Kotlin primitive types map into C primitive types. The reverse mapping is described in the <a href="#mapping-primitive-data-types-from-c.md" id="native-dynamic-libraries.md-1f9a9404"   >Mapping primitive data types from C</a> tutorial.</p><p id="native-dynamic-libraries.md-2a7ba2b" >The next part of the <code class="code " id="native-dynamic-libraries.md-a316c02a"  >libnative_api.h</code> file contains definitions of the types that are used in the library:</p><div class="code-block" data-lang="c" id="native-dynamic-libraries.md-c6cb27a1"         >struct libnative_KType;\ntypedef struct libnative_KType libnative_KType;\n\ntypedef struct {\n  libnative_KNativePtr pinned;\n} libnative_kref_example_Object;\n\ntypedef struct {\n  libnative_KNativePtr pinned;\n} libnative_kref_example_Clazz;\n</div><p id="native-dynamic-libraries.md-1f1fa4f5" >The <code class="code " id="native-dynamic-libraries.md-51a62e7e"  >typedef struct { .. } TYPE_NAME</code> syntax is used in C language to declare a structure. <a href="https://stackoverflow.com/questions/1675351/typedef-struct-vs-struct-definitions" id="native-dynamic-libraries.md-e3b4de28"   data-external="true" rel="noopener noreferrer" >This thread</a> on Stackoverflow provides more explanations of that pattern.</p><p id="native-dynamic-libraries.md-ffd1269d" >As you can see from these definitions, the Kotlin object <code class="code " id="native-dynamic-libraries.md-7ab705b5"  >Object</code> is mapped into <code class="code " id="native-dynamic-libraries.md-8c808fbc"  >libnative_kref_example_Object</code>, and <code class="code " id="native-dynamic-libraries.md-d6652dd4"  >Clazz</code> is mapped into <code class="code " id="native-dynamic-libraries.md-56c708bb"  >libnative_kref_example_Clazz</code>. Both structs contain nothing but the <code class="code " id="native-dynamic-libraries.md-497fa694"  >pinned</code> field with a pointer, the field type <code class="code " id="native-dynamic-libraries.md-5713031d"  >libnative_KNativePtr</code> is defined as <code class="code " id="native-dynamic-libraries.md-c9f0ea3a"  >void*</code> above.</p><p id="native-dynamic-libraries.md-9fee5755" >There is no namespaces support in C, so the Kotlin/Native compiler generates long names to avoid any possible clashes with other symbols in the existing native project.</p><p id="native-dynamic-libraries.md-e1ca2448" >A significant part of the definitions goes in the <code class="code " id="native-dynamic-libraries.md-6bec3227"  >libnative_api.h</code> file. It includes the definition of our Kotlin/Native library world:</p><div class="code-block" data-lang="c" id="native-dynamic-libraries.md-6633cf26"         >typedef struct {\n  /* Service functions. */\n  void (*DisposeStablePointer)(libnative_KNativePtr ptr);\n  void (*DisposeString)(const char* string);\n  libnative_KBoolean (*IsInstance)(libnative_KNativePtr ref, const libnative_KType* type);\n\n  /* User functions. */\n  struct {\n    struct {\n      struct {\n        void (*forIntegers)(libnative_KByte b, libnative_KShort s, libnative_KUInt i, libnative_KLong l);\n        void (*forFloats)(libnative_KFloat f, libnative_KDouble d);\n        const char* (*strings)(const char* str);\n        const char* (*get_globalString)();\n        struct {\n          libnative_KType* (*_type)(void);\n          libnative_kref_example_Object (*_instance)();\n          const char* (*get_field)(libnative_kref_example_Object thiz);\n        } Object;\n        struct {\n          libnative_KType* (*_type)(void);\n          libnative_kref_example_Clazz (*Clazz)();\n          libnative_KULong (*memberFunction)(libnative_kref_example_Clazz thiz, libnative_KInt p);\n        } Clazz;\n      } example;\n    } root;\n  } kotlin;\n} libnative_ExportedSymbols;\n</div><p id="native-dynamic-libraries.md-66de0e4f" >The code uses anonymous structure declarations. The code <code class="code " id="native-dynamic-libraries.md-7fafcf2b"  >struct { .. } foo</code> declares a field in the outer struct of that anonymous structure type, the type with no name.</p><p id="native-dynamic-libraries.md-9df01bd4" >C does not support objects either. People use function pointers to mimic object semantics. A function pointer is declared as follows <code class="code " id="native-dynamic-libraries.md-6d48efe0"  >RETURN_TYPE (* FIELD_NAME)(PARAMETERS)</code>. It is tricky to read, but we should be able to see function pointer fields in the structures above.</p><section class="chapter"  ><h3 id="native-dynamic-libraries.md-runtime-functions" data-toc="native-dynamic-libraries#native-dynamic-libraries.md-runtime-functions"  >Runtime functions</h3><p id="native-dynamic-libraries.md-8e579da9" >The code reads as follows. You have the <code class="code " id="native-dynamic-libraries.md-ff41296b"  >libnative_ExportedSymbols</code> structure, which defines all the functions that Kotlin/Native and our library provides us. It uses nested anonymous structures heavily to mimic packages. The <code class="code " id="native-dynamic-libraries.md-99be77aa"  >libnative_</code> prefix comes from the library name.</p><p id="native-dynamic-libraries.md-ddd8b605" >The <code class="code " id="native-dynamic-libraries.md-497066f7"  >libnative_ExportedSymbols</code> structure contains several helper functions:</p><div class="code-block" data-lang="c" id="native-dynamic-libraries.md-bf6edda9"         >void (*DisposeStablePointer)(libnative_KNativePtr ptr);\nvoid (*DisposeString)(const char* string);\nlibnative_KBoolean (*IsInstance)(libnative_KNativePtr ref, const libnative_KType* type);\n</div><p id="native-dynamic-libraries.md-52d125e7" >These functions deal with Kotlin/Native objects. Call the <code class="code " id="native-dynamic-libraries.md-f9ab2fb2"  >DisposeStablePointer</code> to release a Kotlin object and <code class="code " id="native-dynamic-libraries.md-144b117c"  >DisposeString</code> to release a Kotlin String, which has the <code class="code " id="native-dynamic-libraries.md-10cfb6f5"  >char*</code> type in C. It is possible to use the <code class="code " id="native-dynamic-libraries.md-a4e137a6"  >IsInstance</code> function to check if a Kotlin type or a <code class="code " id="native-dynamic-libraries.md-53256822"  >libnative_KNativePtr</code> is an instance of another type. The actual set of operations generated depends on the actual usages.</p><p id="native-dynamic-libraries.md-28e232f7" >Kotlin/Native has garbage collection, but it does not help us deal with Kotlin objects from the C language. Kotlin/Native has interop with Objective-C and Swift and integrates with their reference counters. The <a href="#native-objc-interop.md" id="native-dynamic-libraries.md-cf51286f"   >Objective-C Interop</a> documentation article contains more details on it. Also, there is the tutorial <a href="#apple-framework.md" id="native-dynamic-libraries.md-1750d19"   >Kotlin/Native as an Apple Framework</a>.</p></section><section class="chapter"  ><h3 id="native-dynamic-libraries.md-your-library-functions" data-toc="native-dynamic-libraries#native-dynamic-libraries.md-your-library-functions"  >Your library functions</h3><p id="native-dynamic-libraries.md-eae24ddc" >Let\'s take a look at the <code class="code " id="native-dynamic-libraries.md-2336c3b3"  >kotlin.root.example</code> field, it mimics the package structure of our Kotlin code with a <code class="code " id="native-dynamic-libraries.md-4b13cf93"  >kotlin.root.</code> prefix.</p><p id="native-dynamic-libraries.md-7762d7a9" >There is a <code class="code " id="native-dynamic-libraries.md-de18d428"  >kotlin.root.example.Clazz</code> field that represents the <code class="code " id="native-dynamic-libraries.md-73ca94e5"  >Clazz</code> from Kotlin. The <code class="code " id="native-dynamic-libraries.md-e91db4cf"  >Clazz#memberFunction</code> is accessible with the <code class="code " id="native-dynamic-libraries.md-252b10f7"  >memberFunction</code> field. The only difference is that the <code class="code " id="native-dynamic-libraries.md-8dbe37be"  >memberFunction</code> accepts a <code class="code " id="native-dynamic-libraries.md-40e14958"  >this</code> reference as the first parameter. The C language does not support objects, and this is the reason to pass a <code class="code " id="native-dynamic-libraries.md-da978155"  >this</code> pointer explicitly.</p><p id="native-dynamic-libraries.md-b3d4de1d" >There is a constructor in the <code class="code " id="native-dynamic-libraries.md-6a3b5ac0"  >Clazz</code> field (aka <code class="code " id="native-dynamic-libraries.md-7045b44b"  >kotlin.root.example.Clazz.Clazz</code> ), which is the constructor function to create an instance of the <code class="code " id="native-dynamic-libraries.md-cb46be32"  >Clazz</code>.</p><p id="native-dynamic-libraries.md-f416e338" >Kotlin <code class="code " id="native-dynamic-libraries.md-1876beb"  >object Object</code> is accessible as <code class="code " id="native-dynamic-libraries.md-d6cbc299"  >kotlin.root.example.Object</code>. There is the <code class="code " id="native-dynamic-libraries.md-f884709f"  >_instance</code> function to get the only instance of the object.</p><p id="native-dynamic-libraries.md-2b3b4b2a" >Properties are translated into functions. The <code class="code " id="native-dynamic-libraries.md-bbe94d08"  >get_</code> and <code class="code " id="native-dynamic-libraries.md-63a5521a"  >set_</code> prefix is used to name the getter and the setter functions respectively. For example, the read-only property <code class="code " id="native-dynamic-libraries.md-2610a797"  >globalString</code> from Kotlin is turned into a <code class="code " id="native-dynamic-libraries.md-3ed6079c"  >get_globalString</code> function in C.</p><p id="native-dynamic-libraries.md-b1c46ca7" >Global functions <code class="code " id="native-dynamic-libraries.md-fe229b49"  >forInts</code>, <code class="code " id="native-dynamic-libraries.md-8318cea9"  >forFloats</code>, or <code class="code " id="native-dynamic-libraries.md-1a508d41"  >strings</code> are turned into the functions pointers in the <code class="code " id="native-dynamic-libraries.md-f9ed070f"  >kotlin.root.example</code> anonymous struct.</p></section><section class="chapter"  ><h3 id="native-dynamic-libraries.md-entry-point" data-toc="native-dynamic-libraries#native-dynamic-libraries.md-entry-point"  >Entry point</h3><p id="native-dynamic-libraries.md-add1126" >You can see how the API is created. To start with, you need to initialize the <code class="code " id="native-dynamic-libraries.md-cfda0f"  >libnative_ExportedSymbols</code> structure. Let\'s take a look at the latest part of the <code class="code " id="native-dynamic-libraries.md-3fbe9062"  >libnative_api.h</code> for this:</p><div class="code-block" data-lang="c" id="native-dynamic-libraries.md-b74b0270"         >extern libnative_ExportedSymbols* libnative_symbols(void);\n</div><p id="native-dynamic-libraries.md-a3d5db5d" >The function <code class="code " id="native-dynamic-libraries.md-6a549ffe"  >libnative_symbols</code> allows you to open the way from the native code to the Kotlin/Native library. This is the entry point you\'ll use. The library name is used as a prefix for the function name.</p><aside data-type="note" class="prompt" data-title="" id="native-dynamic-libraries.md-1aa38595" ><p id="native-dynamic-libraries.md-7551da5a" >Kotlin/Native object references do not support multi-threaded access. Hosting the returned <code class="code " id="native-dynamic-libraries.md-5bff4ea8"  >libnative_ExportedSymbols*</code> pointer per thread might be necessary.</p></aside></section></section><section class="chapter"  ><h2 id="native-dynamic-libraries.md-use-generated-headers-from-c" data-toc="native-dynamic-libraries#native-dynamic-libraries.md-use-generated-headers-from-c"  >Use generated headers from C</h2><p id="native-dynamic-libraries.md-3b43b058" >The usage from C is straightforward and uncomplicated. Create a <code class="code " id="native-dynamic-libraries.md-dc93f33f"  >main.c</code> file with the following code:</p><div class="code-block" data-lang="c" id="native-dynamic-libraries.md-7637c18e"         >#include &quot;libnative_api.h&quot;\n#include &quot;stdio.h&quot;\n\nint main(int argc, char** argv) {\n  //obtain reference for calling Kotlin/Native functions\n  libnative_ExportedSymbols* lib = libnative_symbols();\n\n  lib-&gt;kotlin.root.example.forIntegers(1, 2, 3, 4);\n  lib-&gt;kotlin.root.example.forFloats(1.0f, 2.0);\n\n  //use C and Kotlin/Native strings\n  const char* str = &quot;Hello from Native!&quot;;\n  const char* response = lib-&gt;kotlin.root.example.strings(str);\n  printf(&quot;in: %s\\nout:%s\\n&quot;, str, response);\n  lib-&gt;DisposeString(response);\n\n  //create Kotlin object instance\n  libnative_kref_example_Clazz newInstance = lib-&gt;kotlin.root.example.Clazz.Clazz();\n  long x = lib-&gt;kotlin.root.example.Clazz.memberFunction(newInstance, 42);\n  lib-&gt;DisposeStablePointer(newInstance.pinned);\n\n  printf(&quot;DemoClazz returned %ld\\n&quot;, x);\n\n  return 0;\n}\n</div></section><section class="chapter"  ><h2 id="native-dynamic-libraries.md-compile-and-run-the-example-on-linux-and-macos" data-toc="native-dynamic-libraries#native-dynamic-libraries.md-compile-and-run-the-example-on-linux-and-macos"  >Compile and run the example on Linux and macOS</h2><p id="native-dynamic-libraries.md-3a6652a4" >On macOS 10.13 with Xcode, compile the C code and link it with the dynamic library with the following command:</p><div class="code-block" data-lang="bash" id="native-dynamic-libraries.md-b48c39a4"         >clang main.c libnative.dylib\n</div><p id="native-dynamic-libraries.md-13d1cc83" >On Linux call a similar command:</p><div class="code-block" data-lang="bash" id="native-dynamic-libraries.md-f98855ff"         >gcc main.c libnative.so\n</div><p id="native-dynamic-libraries.md-d7eabe71" >The compiler generates an executable called <code class="code " id="native-dynamic-libraries.md-788eacf"  >a.out</code>. Run it to see in action the Kotlin code being executed from C library. On Linux, you\'ll need to include <code class="code " id="native-dynamic-libraries.md-30474e72"  >.</code> into the <code class="code " id="native-dynamic-libraries.md-6c3b0771"  >LD_LIBRARY_PATH</code> to let the application know to load the <code class="code " id="native-dynamic-libraries.md-19952fd"  >libnative.so</code> library from the current folder.</p></section><section class="chapter"  ><h2 id="native-dynamic-libraries.md-compile-and-run-the-example-on-windows" data-toc="native-dynamic-libraries#native-dynamic-libraries.md-compile-and-run-the-example-on-windows"  >Compile and run the example on Windows</h2><p id="native-dynamic-libraries.md-c533c3df" >To start with, you\'ll need a Microsoft Visual C++ compiler installed that supports a x64_64 target. The easiest way to do this is to have a version of Microsoft Visual Studio installed on a Windows machine.</p><p id="native-dynamic-libraries.md-72cf80de" >In this example, you\'ll be using the <code class="code " id="native-dynamic-libraries.md-2c19c9d"  >x64 Native Tools Command Prompt &lt;VERSION&gt;</code> console. You\'ll see the shortcut to open the console in the start menu. It comes with a Microsoft Visual Studio package.</p><p id="native-dynamic-libraries.md-a7aea35" >On Windows, Dynamic libraries are included either via a generated static library wrapper or with manual code, which deals with the <a href="https://docs.microsoft.com/en-gb/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya" id="native-dynamic-libraries.md-cfb9c862"   data-external="true" rel="noopener noreferrer" >LoadLibrary</a> or similar Win32API functions. Follow the first option and generate the static wrapper library for the <code class="code " id="native-dynamic-libraries.md-cc4c8aba"  >libnative.dll</code> as described below.</p><p id="native-dynamic-libraries.md-d1d9efef" >Call <code class="code " id="native-dynamic-libraries.md-b69a43e1"  >lib.exe</code> from the toolchain to generate the static library wrapper <code class="code " id="native-dynamic-libraries.md-3b6bbae"  >libnative.lib</code> that automates the DLL usage from the code:</p><div class="code-block" data-lang="bash" id="native-dynamic-libraries.md-1784fa61"         >lib /def:libnative_symbols.def /out:libnative.lib\n</div><p id="native-dynamic-libraries.md-6d9d69b4" >Now you are ready to compile our <code class="code " id="native-dynamic-libraries.md-2a22ad11"  >main.c</code> into an executable. Include the generated <code class="code " id="native-dynamic-libraries.md-87da9141"  >libnative.lib</code> into the build command and start:</p><div class="code-block" data-lang="bash" id="native-dynamic-libraries.md-cd83ce17"         >cl.exe main.c libnative.lib\n</div><p id="native-dynamic-libraries.md-b7ae63ad" >The command produces the <code class="code " id="native-dynamic-libraries.md-e435a65b"  >main.exe</code> file, which you can run.</p></section><section class="chapter"  ><h2 id="native-dynamic-libraries.md-next-steps" data-toc="native-dynamic-libraries#native-dynamic-libraries.md-next-steps"  >Next steps</h2><p id="native-dynamic-libraries.md-3cdd2baf" >Dynamic libraries are the main way to use Kotlin code from existing programs. You can use them to share your code with many platforms or languages, including JVM, <a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/samples/python_extension/src/main/c/kotlin_bridge.c" id="native-dynamic-libraries.md-64dee694"   data-external="true" rel="noopener noreferrer" >Python</a>, iOS, Android, and others.</p><p id="native-dynamic-libraries.md-13e1bd96" >Kotlin/Native also has tight integration with Objective-C and Swift. It is covered in the <a href="#apple-framework.md" id="native-dynamic-libraries.md-9fc00d14"   >Kotlin/Native as an Apple Framework</a> tutorial.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="native-c-interop.md"  >Interoperability with C</h1><p id="native-c-interop.md-805ed23c" >Kotlin/Native follows the general tradition of Kotlin to provide excellent existing platform software interoperability. In the case of a native platform, the most important interoperability target is a C library. So Kotlin/Native comes with a <code class="code " id="native-c-interop.md-d3edbac7"  >cinterop</code> tool, which can be used to quickly generate everything needed to interact with an external library.</p><p id="native-c-interop.md-1f0c5114" >The following workflow is expected when interacting with the native library:</p><ol class="list _decimal" id="native-c-interop.md-397a20b6"   ><li class="list__item" id="native-c-interop.md-6353bab0" ><p>Create a <code class="code " id="native-c-interop.md-849760de"  >.def</code> file describing what to include into bindings.</p></li><li class="list__item" id="native-c-interop.md-c219b058" ><p>Use the <code class="code " id="native-c-interop.md-3e219e42"  >cinterop</code> tool to produce Kotlin bindings.</p></li><li class="list__item" id="native-c-interop.md-3363c90c" ><p>Run the Kotlin/Native compiler on an application to produce the final executable.</p></li></ol><p id="native-c-interop.md-fb66d975" >The interoperability tool analyses C headers and produces a &quot;natural&quot; mapping of the types, functions, and constants into the Kotlin world. The generated stubs can be imported into an IDE for the purpose of code completion and navigation.</p><p id="native-c-interop.md-730899f7" >Interoperability with Swift/Objective-C is provided too and covered in <a href="#native-objc-interop.md" id="native-c-interop.md-eab6722c"   >Objective-C interop</a>.</p><section class="chapter"  ><h2 id="native-c-interop.md-platform-libraries" data-toc="native-c-interop#native-c-interop.md-platform-libraries"  >Platform libraries</h2><p id="native-c-interop.md-db0bd3e6" >Note that in many cases there\'s no need to use custom interoperability library creation mechanisms described below, as for APIs available on the platform standardized bindings called <a href="#native-platform-libs.md" id="native-c-interop.md-9348cbcb"   >platform libraries</a> could be used. For example, POSIX on Linux/macOS platforms, Win32 on Windows platform, or Apple frameworks on macOS/iOS are available this way.</p></section><section class="chapter"  ><h2 id="native-c-interop.md-simple-example" data-toc="native-c-interop#native-c-interop.md-simple-example"  >Simple example</h2><p id="native-c-interop.md-b15c3a39" >Install libgit2 and prepare stubs for the git library:</p><div class="code-block" data-lang="bash" id="native-c-interop.md-4ff05851"         >\ncd samples/gitchurn\n../../dist/bin/cinterop -def src/nativeInterop/cinterop/libgit2.def \\\n -compiler-option -I/usr/local/include -o libgit2\n</div><p id="native-c-interop.md-59150ba" >Compile the client:</p><div class="code-block" data-lang="bash" id="native-c-interop.md-2a21b6a4"         >../../dist/bin/kotlinc src/gitChurnMain/kotlin \\\n -library libgit2 -o GitChurn\n</div><p id="native-c-interop.md-ab205484" >Run the client:</p><div class="code-block" data-lang="bash" id="native-c-interop.md-7c83eb3f"         >./GitChurn.kexe ../..\n</div></section><section class="chapter"  ><h2 id="native-c-interop.md-create-bindings-for-a-new-library" data-toc="native-c-interop#native-c-interop.md-create-bindings-for-a-new-library"  >Create bindings for a new library</h2><p id="native-c-interop.md-a5adfa50" >To create bindings for a new library, start from creating a <code class="code " id="native-c-interop.md-6b746863"  >.def</code> file. Structurally it\'s a simple property file, which looks like this:</p><div class="code-block" data-lang="c" id="native-c-interop.md-4adaa825"         >headers = png.h\nheaderFilter = png.h\npackage = png\n</div><p id="native-c-interop.md-9ca84941" >Then run the <code class="code " id="native-c-interop.md-7d4ad830"  >cinterop</code> tool with something like this (note that for host libraries that are not included in the sysroot search paths, headers may be needed):</p><div class="code-block" data-lang="bash" id="native-c-interop.md-a1590146"         >cinterop -def png.def -compiler-option -I/usr/local/include -o png\n</div><p id="native-c-interop.md-e5efb590" >This command will produce a <code class="code " id="native-c-interop.md-2017dfa0"  >png.klib</code> compiled library and <code class="code " id="native-c-interop.md-17ae57f9"  >png-build/kotlin</code> directory containing Kotlin source code for the library.</p><p id="native-c-interop.md-8705ec85" >If the behavior for a certain platform needs to be modified, you can use a format like <code class="code " id="native-c-interop.md-5a32794f"  >compilerOpts.osx</code> or <code class="code " id="native-c-interop.md-a3ff1078"  >compilerOpts.linux</code> to provide platform-specific values to the options.</p><p id="native-c-interop.md-8749ca61" >Note that the generated bindings are generally platform-specific, so if you are developing for multiple targets, the bindings need to be regenerated.</p><p id="native-c-interop.md-1e1125f2" >After the generation of bindings, they can be used by the IDE as a proxy view of the native library.</p><p id="native-c-interop.md-a4f74f1a" >For a typical Unix library with a config script, the <code class="code " id="native-c-interop.md-aa7974c6"  >compilerOpts</code> will likely contain the output of a config script with the <code class="code " id="native-c-interop.md-de960477"  >--cflags</code> flag (maybe without exact paths).</p><p id="native-c-interop.md-630ac2c4" >The output of a config script with <code class="code " id="native-c-interop.md-47663ab3"  >--libs</code> will be passed as a <code class="code " id="native-c-interop.md-c63ab9c4"  >-linkedArgs</code> <code class="code " id="native-c-interop.md-c72051a5"  >kotlinc</code> flag value (quoted) when compiling.</p><section class="chapter"  ><h3 id="native-c-interop.md-select-library-headers" data-toc="native-c-interop#native-c-interop.md-select-library-headers"  >Select library headers</h3><p id="native-c-interop.md-395c0a10" >When library headers are imported to a C program with the <code class="code " id="native-c-interop.md-962b9d69"  >#include</code> directive, all of the headers included by these headers are also included in the program. So all header dependencies are included in generated stubs as well.</p><p id="native-c-interop.md-ef42954f" >This behavior is correct but it can be very inconvenient for some libraries. So it is possible to specify in the <code class="code " id="native-c-interop.md-9f664860"  >.def</code> file which of the included headers are to be imported. The separate declarations from other headers can also be imported in case of direct dependencies.</p><section class="chapter"  ><h4 id="native-c-interop.md-filter-headers-by-globs" data-toc="native-c-interop#native-c-interop.md-filter-headers-by-globs"  >Filter headers by globs</h4><p id="native-c-interop.md-2f557c07" >It is possible to filter headers by globs. The <code class="code " id="native-c-interop.md-a736a100"  >headerFilter</code> property value from the <code class="code " id="native-c-interop.md-db227"  >.def</code> file is treated as a space-separated list of globs. If the included header matches any of the globs, then the declarations from this header are included into the bindings.</p><p id="native-c-interop.md-dcce331c" >The globs are applied to the header paths relative to the appropriate include path elements, e.g. <code class="code " id="native-c-interop.md-68db8f5e"  >time.h</code> or <code class="code " id="native-c-interop.md-b957c3ab"  >curl/curl.h</code>. So if the library is usually included with <code class="code " id="native-c-interop.md-112e5010"  >#include &lt;SomeLibrary/Header.h&gt;</code>, then it would probably be correct to filter headers with</p><div class="code-block" data-lang="c" id="native-c-interop.md-7735671a"         >headerFilter = SomeLibrary/**\n</div><p id="native-c-interop.md-d62d9255" >If a <code class="code " id="native-c-interop.md-a1c2fd7b"  >headerFilter</code> is not specified, then all headers are included.</p></section><section class="chapter"  ><h4 id="native-c-interop.md-filter-headers-by-module-maps" data-toc="native-c-interop#native-c-interop.md-filter-headers-by-module-maps"  >Filter headers by module maps</h4><p id="native-c-interop.md-5aab8ca8" >Some libraries have proper <code class="code " id="native-c-interop.md-d340c508"  >module.modulemap</code> or <code class="code " id="native-c-interop.md-85fc5830"  >module.map</code> files in their headers. For example, macOS and iOS system libraries and frameworks do. The <a href="https://clang.llvm.org/docs/Modules.html#module-map-language" id="native-c-interop.md-b8eebad0"   data-external="true" rel="noopener noreferrer" >module map file</a> describes the correspondence between header files and modules. When the module maps are available, the headers from the modules that are not included directly can be filtered out using the experimental <code class="code " id="native-c-interop.md-dee63ecb"  >excludeDependentModules</code> option of the <code class="code " id="native-c-interop.md-1b19fa93"  >.def</code> file:</p><div class="code-block" data-lang="c" id="native-c-interop.md-435a1d3d"         >headers = OpenGL/gl.h OpenGL/glu.h GLUT/glut.h\ncompilerOpts = -framework OpenGL -framework GLUT\nexcludeDependentModules = true\n</div><p id="native-c-interop.md-4c438a0d" >When both <code class="code " id="native-c-interop.md-e265a438"  >excludeDependentModules</code> and <code class="code " id="native-c-interop.md-6fc6c940"  >headerFilter</code> are used, they are applied as an intersection.</p></section></section><section class="chapter"  ><h3 id="native-c-interop.md-c-compiler-and-linker-options" data-toc="native-c-interop#native-c-interop.md-c-compiler-and-linker-options"  >C compiler and linker options</h3><p id="native-c-interop.md-24f62715" >Options passed to the C compiler (used to analyze headers, such as preprocessor definitions) and the linker (used to link final executables) can be passed in the definition file as <code class="code " id="native-c-interop.md-e32c708a"  >compilerOpts</code> and <code class="code " id="native-c-interop.md-e90ec574"  >linkerOpts</code> respectively. For example:</p><div class="code-block" data-lang="c" id="native-c-interop.md-4bad667c"         >compilerOpts = -DFOO=bar\nlinkerOpts = -lpng\n</div><p id="native-c-interop.md-583ba521" >Target-specific options only applicable to the certain target can be specified as well:</p><div class="code-block" data-lang="c" id="native-c-interop.md-eaa31ace"         > compilerOpts = -DBAR=bar\n compilerOpts.linux_x64 = -DFOO=foo1\n compilerOpts.mac_x64 = -DFOO=foo2\n</div><p id="native-c-interop.md-3c13b3ee" >With such a configuration, C headers will be analyzed with <code class="code " id="native-c-interop.md-fc7648f1"  >-DBAR=bar -DFOO=foo1</code> on Linux and with <code class="code " id="native-c-interop.md-65f9560"  >-DBAR=bar -DFOO=foo2</code> on macOS . Note that any definition file option can have both common and the platform-specific part.</p></section><section class="chapter"  ><h3 id="native-c-interop.md-add-custom-declarations" data-toc="native-c-interop#native-c-interop.md-add-custom-declarations"  >Add custom declarations</h3><p id="native-c-interop.md-94525bfd" >Sometimes it is required to add custom C declarations to the library before generating bindings (e.g., for <a href="#native-c-interop.md-macros" id="native-c-interop.md-1160663"   >macros</a> ). Instead of creating an additional header file with these declarations, you can include them directly to the end of the <code class="code " id="native-c-interop.md-dcacf71a"  >.def</code> file, after a separating line, containing only the separator sequence <code class="code " id="native-c-interop.md-1fe1b166"  >---</code>:</p><div class="code-block" data-lang="c" id="native-c-interop.md-491cb08f"         >headers = errno.h\n\n---\n\nstatic inline int getErrno() {\n    return errno;\n}\n</div><p id="native-c-interop.md-6cca3783" >Note that this part of the <code class="code " id="native-c-interop.md-2186ab19"  >.def</code> file is treated as part of the header file, so functions with the body should be declared as <code class="code " id="native-c-interop.md-50c0a7a7"  >static</code>. The declarations are parsed after including the files from the <code class="code " id="native-c-interop.md-517bb842"  >headers</code> list.</p></section><section class="chapter"  ><h3 id="native-c-interop.md-include-a-static-library-in-your-klib" data-toc="native-c-interop#native-c-interop.md-include-a-static-library-in-your-klib"  >Include a static library in your klib</h3><p id="native-c-interop.md-401fcad5" >Sometimes it is more convenient to ship a static library with your product, rather than assume it is available within the user\'s environment. To include a static library into <code class="code " id="native-c-interop.md-f04edfc8"  >.klib</code> use <code class="code " id="native-c-interop.md-ce224f5"  >staticLibrary</code> and <code class="code " id="native-c-interop.md-d408db51"  >libraryPaths</code> clauses. For example:</p><div class="code-block" data-lang="c" id="native-c-interop.md-50cc5bd7"         >headers = foo.h\nstaticLibraries = libfoo.a \nlibraryPaths = /opt/local/lib /usr/local/opt/curl/lib\n</div><p id="native-c-interop.md-9e671b0d" >When given the above snippet the <code class="code " id="native-c-interop.md-fd337247"  >cinterop</code> tool will search <code class="code " id="native-c-interop.md-2ce8ee6"  >libfoo.a</code> in <code class="code " id="native-c-interop.md-8b55fb68"  >/opt/local/lib</code> and <code class="code " id="native-c-interop.md-afc88971"  >/usr/local/opt/curl/lib</code>, and if it is found include the library binary into <code class="code " id="native-c-interop.md-930faabb"  >klib</code>.</p><p id="native-c-interop.md-f604eccc" >When using such <code class="code " id="native-c-interop.md-779b7f6a"  >klib</code> in your program, the library is linked automatically.</p></section></section><section class="chapter"  ><h2 id="native-c-interop.md-bindings" data-toc="native-c-interop#native-c-interop.md-bindings"  >Bindings</h2><section class="chapter"  ><h3 id="native-c-interop.md-basic-interop-types" data-toc="native-c-interop#native-c-interop.md-basic-interop-types"  >Basic interop types</h3><p id="native-c-interop.md-5fcb3ef3" >All the supported C types have corresponding representations in Kotlin:</p><ul class="list _ul" id="native-c-interop.md-e4c4cddd"   ><li class="list__item" id="native-c-interop.md-edd39268" ><p>Signed, unsigned integral, and floating point types are mapped to their Kotlin counterpart with the same width.</p></li><li class="list__item" id="native-c-interop.md-879fa8a3" ><p>Pointers and arrays are mapped to <code class="code " id="native-c-interop.md-57e0311a"  >CPointer&lt;T&gt;?</code>.</p></li><li class="list__item" id="native-c-interop.md-73e13229" ><p>Enums can be mapped to either Kotlin enum or integral values, depending on heuristics and the <a href="#native-c-interop.md-definition-file-hints" id="native-c-interop.md-5fddfae9"   >definition file hints</a>.</p></li><li class="list__item" id="native-c-interop.md-354642e3" ><p>Structs and unions are mapped to types having fields available via the dot notation, i.e. <code class="code " id="native-c-interop.md-1d283e49"  >someStructInstance.field1</code>.</p></li><li class="list__item" id="native-c-interop.md-20871bce" ><p><code class="code " id="native-c-interop.md-9ffec8be"  >typedef</code> are represented as <code class="code " id="native-c-interop.md-6d00a36c"  >typealias</code>.</p></li></ul><p id="native-c-interop.md-b1a3d656" >Also, any C type has the Kotlin type representing the lvalue of this type, i.e., the value located in memory rather than a simple immutable self-contained value. Think C++ references, as a similar concept. For structs (and <code class="code " id="native-c-interop.md-5c9c7bb4"  >typedef</code> s to structs) this representation is the main one and has the same name as the struct itself, for Kotlin enums it is named <code class="code " id="native-c-interop.md-20e9b248"  >${type}Var</code>, for <code class="code " id="native-c-interop.md-db59298d"  >CPointer&lt;T&gt;</code> it is <code class="code " id="native-c-interop.md-bd5c185c"  >CPointerVar&lt;T&gt;</code>, and for most other types it is <code class="code " id="native-c-interop.md-fa891ac0"  >${type}Var</code>.</p><p id="native-c-interop.md-30b305d1" >For types that have both representations, the one with a &quot;lvalue&quot; has a mutable <code class="code " id="native-c-interop.md-3023a590"  >.value</code> property for accessing the value.</p><section class="chapter"  ><h4 id="native-c-interop.md-pointer-types" data-toc="native-c-interop#native-c-interop.md-pointer-types"  >Pointer types</h4><p id="native-c-interop.md-389f79d0" >The type argument <code class="code " id="native-c-interop.md-8595b556"  >T</code> of <code class="code " id="native-c-interop.md-e1b6f8bb"  >CPointer&lt;T&gt;</code> must be one of the &quot;lvalue&quot; types described above, e.g., the C type <code class="code " id="native-c-interop.md-3612c9d5"  >struct S*</code> is mapped to <code class="code " id="native-c-interop.md-3f794ad2"  >CPointer&lt;S&gt;</code>, <code class="code " id="native-c-interop.md-8222cb1f"  >int8_t*</code> is mapped to <code class="code " id="native-c-interop.md-214a35fc"  >CPointer&lt;int_8tVar&gt;</code>, and <code class="code " id="native-c-interop.md-6d10a3e"  >char**</code> is mapped to <code class="code " id="native-c-interop.md-412cabc5"  >CPointer&lt;CPointerVar&lt;ByteVar&gt;&gt;</code>.</p><p id="native-c-interop.md-da16270b" >C null pointer is represented as Kotlin\'s <code class="code " id="native-c-interop.md-26405fc9"  >null</code>, and the pointer type <code class="code " id="native-c-interop.md-9cbd8dce"  >CPointer&lt;T&gt;</code> is not nullable, but the <code class="code " id="native-c-interop.md-c9f0c821"  >CPointer&lt;T&gt;?</code> is. The values of this type support all the Kotlin operations related to handling <code class="code " id="native-c-interop.md-f24a6399"  >null</code>, e.g. <code class="code " id="native-c-interop.md-a8ec7891"  >?:</code>, <code class="code " id="native-c-interop.md-6254168c"  >?.</code>, <code class="code " id="native-c-interop.md-6ab56a87"  >!!</code> etc.:</p><div class="code-block" data-lang="kotlin" id="native-c-interop.md-d0bbef55"         >val path = getenv(&quot;PATH&quot;)?.toKString() ?: &quot;&quot;\n</div><p id="native-c-interop.md-380a672c" >Since the arrays are also mapped to <code class="code " id="native-c-interop.md-1e5103ad"  >CPointer&lt;T&gt;</code>, it supports the <code class="code " id="native-c-interop.md-cf943e15"  >[]</code> operator for accessing values by index:</p><div class="code-block" data-lang="kotlin" id="native-c-interop.md-7ce355a2"         >fun shift(ptr: CPointer&lt;BytePtr&gt;, length: Int) {\n    for (index in 0 .. length - 2) {\n        ptr[index] = ptr[index + 1]\n    }\n}\n</div><p id="native-c-interop.md-69400a54" >The <code class="code " id="native-c-interop.md-1910d1f1"  >.pointed</code> property for <code class="code " id="native-c-interop.md-8b0450fb"  >CPointer&lt;T&gt;</code> returns the lvalue of type <code class="code " id="native-c-interop.md-8464cfb9"  >T</code>, pointed by this pointer. The reverse operation is <code class="code " id="native-c-interop.md-3bd78f53"  >.ptr</code>: it takes the lvalue and returns the pointer to it.</p><p id="native-c-interop.md-95bcbe4c" ><code class="code " id="native-c-interop.md-ef2aac4e"  >void*</code> is mapped to <code class="code " id="native-c-interop.md-ba3961f1"  >COpaquePointer</code> – the special pointer type which is the supertype for any other pointer type. So if the C function takes <code class="code " id="native-c-interop.md-603bfffe"  >void*</code>, then the Kotlin binding accepts any <code class="code " id="native-c-interop.md-9ecc6ec9"  >CPointer</code>.</p><p id="native-c-interop.md-8fc151c" >Casting a pointer (including <code class="code " id="native-c-interop.md-cdf60940"  >COpaquePointer</code>) can be done with <code class="code " id="native-c-interop.md-1dc3be1"  >.reinterpret&lt;T&gt;</code>, e.g.:</p><div class="code-block" data-lang="kotlin" id="native-c-interop.md-bb7ec5ab"         >val intPtr = bytePtr.reinterpret&lt;IntVar&gt;()\n</div><p id="native-c-interop.md-4f914abf" >or</p><div class="code-block" data-lang="kotlin" id="native-c-interop.md-f019bd01"         >val intPtr: CPointer&lt;IntVar&gt; = bytePtr.reinterpret()\n</div><p id="native-c-interop.md-6aa7d0bb" >As is with C, these reinterpret casts are unsafe and can potentially lead to subtle memory problems in the application.</p><p id="native-c-interop.md-d96a42d5" >Also there are unsafe casts between <code class="code " id="native-c-interop.md-4e505676"  >CPointer&lt;T&gt;?</code> and <code class="code " id="native-c-interop.md-179348f7"  >Long</code> available, provided by the <code class="code " id="native-c-interop.md-529c662c"  >.toLong()</code> and <code class="code " id="native-c-interop.md-9c67976b"  >.toCPointer&lt;T&gt;()</code> extension methods:</p><div class="code-block" data-lang="kotlin" id="native-c-interop.md-bfa2c031"         >val longValue = ptr.toLong()\nval originalPtr = longValue.toCPointer&lt;T&gt;()\n</div><p id="native-c-interop.md-a03c4391" >Note that if the type of the result is known from the context, the type argument can be omitted as usual due to the type inference.</p></section></section><section class="chapter"  ><h3 id="native-c-interop.md-memory-allocation" data-toc="native-c-interop#native-c-interop.md-memory-allocation"  >Memory allocation</h3><p id="native-c-interop.md-d211b0ac" >The native memory can be allocated using the <code class="code " id="native-c-interop.md-561f4fb8"  >NativePlacement</code> interface, e.g.</p><div class="code-block" data-lang="kotlin" id="native-c-interop.md-9119bcab"         >val byteVar = placement.alloc&lt;ByteVar&gt;()\n</div><p id="native-c-interop.md-6216a46f" >or</p><div class="code-block" data-lang="kotlin" id="native-c-interop.md-d5dd1fbf"         >val bytePtr = placement.allocArray&lt;ByteVar&gt;(5)\n</div><p id="native-c-interop.md-37adb751" >The most &quot;natural&quot; placement is in the object <code class="code " id="native-c-interop.md-ce5ea8be"  >nativeHeap</code>. It corresponds to allocating native memory with <code class="code " id="native-c-interop.md-51eebf24"  >malloc</code> and provides an additional <code class="code " id="native-c-interop.md-3045bb66"  >.free()</code> operation to free allocated memory:</p><div class="code-block" data-lang="kotlin" id="native-c-interop.md-615e5b7b"         >val buffer = nativeHeap.allocArray&lt;ByteVar&gt;(size)\n&lt;use buffer&gt;\nnativeHeap.free(buffer)\n</div><p id="native-c-interop.md-b75f65f2" >However, the lifetime of allocated memory is often bound to the lexical scope. It is possible to define such scope with <code class="code " id="native-c-interop.md-7ddba63d"  >memScoped { ... }</code>. Inside the braces, the temporary placement is available as an implicit receiver, so it is possible to allocate native memory with <code class="code " id="native-c-interop.md-3453e4d8"  >alloc</code> and <code class="code " id="native-c-interop.md-68b2cfc9"  >allocArray</code>, and the allocated memory will be automatically freed after leaving the scope.</p><p id="native-c-interop.md-650b6c56" >For example, the C function returning values through pointer parameters can be used like</p><div class="code-block" data-lang="kotlin" id="native-c-interop.md-57343a82"         >val fileSize = memScoped {\n    val statBuf = alloc&lt;stat&gt;()\n    val error = stat(&quot;/&quot;, statBuf.ptr)\n    statBuf.st_size\n}\n</div></section><section class="chapter"  ><h3 id="native-c-interop.md-pass-pointers-to-bindings" data-toc="native-c-interop#native-c-interop.md-pass-pointers-to-bindings"  >Pass pointers to bindings</h3><p id="native-c-interop.md-698fee72" >Although C pointers are mapped to the <code class="code " id="native-c-interop.md-c9fe9909"  >CPointer&lt;T&gt;</code> type, the C function pointer-typed parameters are mapped to <code class="code " id="native-c-interop.md-7fefa593"  >CValuesRef&lt;T&gt;</code>. When passing <code class="code " id="native-c-interop.md-c82f6a7b"  >CPointer&lt;T&gt;</code> as the value of such a parameter, it is passed to the C function as is. However, the sequence of values can be passed instead of a pointer. In this case the sequence is passed &quot;by value&quot;, i.e., the C function receives the pointer to the temporary copy of that sequence, which is valid only until the function returns.</p><p id="native-c-interop.md-bffdbeeb" >The <code class="code " id="native-c-interop.md-ab1c6260"  >CValuesRef&lt;T&gt;</code> representation of pointer parameters is designed to support C array literals without explicit native memory allocation. To construct the immutable self-contained sequence of C values, the following methods are provided:</p><ul class="list _ul" id="native-c-interop.md-2a4c653d"   ><li class="list__item" id="native-c-interop.md-61ca6635" ><p><code class="code " id="native-c-interop.md-9e52f3cb"  >${type}Array.toCValues()</code>, where <code class="code " id="native-c-interop.md-e65ee0b4"  >type</code> is the Kotlin primitive type</p></li><li class="list__item" id="native-c-interop.md-6d22126c" ><p><code class="code " id="native-c-interop.md-d6f7cb46"  >Array&lt;CPointer&lt;T&gt;?&gt;.toCValues()</code>, <code class="code " id="native-c-interop.md-c248371d"  >List&lt;CPointer&lt;T&gt;?&gt;.toCValues()</code></p></li><li class="list__item" id="native-c-interop.md-ba220849" ><p><code class="code " id="native-c-interop.md-1a66568b"  >cValuesOf(vararg elements: ${type})</code>, where <code class="code " id="native-c-interop.md-18c70d0d"  >type</code> is a primitive or pointer</p></li></ul><p id="native-c-interop.md-bbbdbc63" >For example:</p><p id="native-c-interop.md-c88778ae" >C:</p><div class="code-block" data-lang="c" id="native-c-interop.md-275ce56f"         >void foo(int* elements, int count);\n...\nint elements[] = {1, 2, 3};\nfoo(elements, 3);\n</div><p id="native-c-interop.md-5c639d3e" >Kotlin:</p><div class="code-block" data-lang="kotlin" id="native-c-interop.md-8a7618c9"         >foo(cValuesOf(1, 2, 3), 3)\n</div></section><section class="chapter"  ><h3 id="native-c-interop.md-strings" data-toc="native-c-interop#native-c-interop.md-strings"  >Strings</h3><p id="native-c-interop.md-863342da" >Unlike other pointers, the parameters of type <code class="code " id="native-c-interop.md-4e2c32ab"  >const char*</code> are represented as a Kotlin <code class="code " id="native-c-interop.md-83bf989d"  >String</code>. So it is possible to pass any Kotlin string to a binding expecting a C string.</p><p id="native-c-interop.md-c2a9ea9e" >There are also some tools available to convert between Kotlin and C strings manually:</p><ul class="list _ul" id="native-c-interop.md-6c8c6d91"   ><li class="list__item" id="native-c-interop.md-2e77a821" ><code class="code " id="native-c-interop.md-34b5fc09"  >fun CPointer&lt;ByteVar&gt;.toKString(): String</code></li><li class="list__item" id="native-c-interop.md-79ea03ff" ><p><code class="code " id="native-c-interop.md-7e56dc0c"  >val String.cstr: CValuesRef&lt;ByteVar&gt;</code>.</p></li></ul><p id="native-c-interop.md-df4e31dc" >To get the pointer, <code class="code " id="native-c-interop.md-caca5bb"  >.cstr</code> should be allocated in native memory, e.g.</p> <code class="code " id="native-c-interop.md-f2ed0cd4"  >val cString = kotlinString.cstr.getPointer(nativeHeap)</code><p id="native-c-interop.md-12b27ad8" >In all cases, the C string is supposed to be encoded as UTF-8.</p><p id="native-c-interop.md-ba55331d" >To skip automatic conversion and ensure raw pointers are used in the bindings, a <code class="code " id="native-c-interop.md-7ea6cf"  >noStringConversion</code> statement in the <code class="code " id="native-c-interop.md-9740d000"  >.def</code> file could be used, i.e.</p><div class="code-block" data-lang="c" id="native-c-interop.md-b4e5d6fe"         >noStringConversion = LoadCursorA LoadCursorW\n</div><p id="native-c-interop.md-360538b3" >This way any value of type <code class="code " id="native-c-interop.md-dfba904"  >CPointer&lt;ByteVar&gt;</code> can be passed as an argument of <code class="code " id="native-c-interop.md-c8a6a7d4"  >const char*</code> type. If a Kotlin string should be passed, code like this could be used:</p><div class="code-block" data-lang="kotlin" id="native-c-interop.md-e5188363"         >memScoped {\n    LoadCursorA(null, &quot;cursor.bmp&quot;.cstr.ptr)   // for ASCII version\n    LoadCursorW(null, &quot;cursor.bmp&quot;.wcstr.ptr)  // for Unicode version\n}\n</div></section><section class="chapter"  ><h3 id="native-c-interop.md-scope-local-pointers" data-toc="native-c-interop#native-c-interop.md-scope-local-pointers"  >Scope-local pointers</h3><p id="native-c-interop.md-9c4efc8f" >It is possible to create a scope-stable pointer of C representation of <code class="code " id="native-c-interop.md-e5d16cbf"  >CValues&lt;T&gt;</code> instance using the <code class="code " id="native-c-interop.md-a465bdc3"  >CValues&lt;T&gt;.ptr</code> extension property, available under <code class="code " id="native-c-interop.md-f983f071"  >memScoped { ... }</code>. It allows using the APIs which require C pointers with a lifetime bound to a certain <code class="code " id="native-c-interop.md-d1548e97"  >MemScope</code>. For example:</p><div class="code-block" data-lang="kotlin" id="native-c-interop.md-5e80a355"         >memScoped {\n    items = arrayOfNulls&lt;CPointer&lt;ITEM&gt;?&gt;(6)\n    arrayOf(&quot;one&quot;, &quot;two&quot;).forEachIndexed { index, value -&gt; items[index] = value.cstr.ptr }\n    menu = new_menu(&quot;Menu&quot;.cstr.ptr, items.toCValues().ptr)\n    ...\n}\n</div><p id="native-c-interop.md-2055115c" >In this example, all values passed to the C API <code class="code " id="native-c-interop.md-7ee799f7"  >new_menu()</code> have a lifetime of the innermost <code class="code " id="native-c-interop.md-cc4bb6ba"  >memScope</code> it belongs to. Once the control flow leaves the <code class="code " id="native-c-interop.md-134ea989"  >memScoped</code> scope the C pointers become invalid.</p></section><section class="chapter"  ><h3 id="native-c-interop.md-pass-and-receive-structs-by-value" data-toc="native-c-interop#native-c-interop.md-pass-and-receive-structs-by-value"  >Pass and receive structs by value</h3><p id="native-c-interop.md-4f0a7a74" >When a C function takes or returns a struct / union <code class="code " id="native-c-interop.md-9c77af4d"  >T</code> by value, the corresponding argument type or return type is represented as <code class="code " id="native-c-interop.md-c85be444"  >CValue&lt;T&gt;</code>.</p><p id="native-c-interop.md-1139e653" ><code class="code " id="native-c-interop.md-e5bb1aa2"  >CValue&lt;T&gt;</code> is an opaque type, so the structure fields cannot be accessed with the appropriate Kotlin properties. It should be possible, if an API uses structures as handles, but if field access is required, there are the following conversion methods available:</p><ul class="list _ul" id="native-c-interop.md-e94b99bc"   ><li class="list__item" id="native-c-interop.md-d9b3e72" ><p id="native-c-interop.md-680ed1e3" ><code class="code " id="native-c-interop.md-d62cf1ef"  >fun T.readValue(): CValue&lt;T&gt;</code>. Converts (the lvalue) <code class="code " id="native-c-interop.md-31c4051c"  >T</code> to a <code class="code " id="native-c-interop.md-d873aa49"  >CValue&lt;T&gt;</code>. So to construct the <code class="code " id="native-c-interop.md-ab17e8e4"  >CValue&lt;T&gt;</code>, <code class="code " id="native-c-interop.md-68e08ace"  >T</code> can be allocated, filled, and then converted to <code class="code " id="native-c-interop.md-28b64ebd"  >CValue&lt;T&gt;</code>.</p></li><li class="list__item" id="native-c-interop.md-c0f1d9a3" ><p id="native-c-interop.md-33c31005" ><code class="code " id="native-c-interop.md-6a94f149"  >CValue&lt;T&gt;.useContents(block: T.() -&gt; R): R</code>. Temporarily places the <code class="code " id="native-c-interop.md-54a57e8a"  >CValue&lt;T&gt;</code> to memory, and then runs the passed lambda with this placed value <code class="code " id="native-c-interop.md-d10db78a"  >T</code> as receiver. So to read a single field, the following code can be used:</p><div class="code-block" data-lang="kotlin" id="native-c-interop.md-653b2bb4"         >val fieldValue = structValue.useContents { field }\n</div></li></ul></section><section class="chapter"  ><h3 id="native-c-interop.md-callbacks" data-toc="native-c-interop#native-c-interop.md-callbacks"  >Callbacks</h3><p id="native-c-interop.md-d3b7697d" >To convert a Kotlin function to a pointer to a C function, <code class="code " id="native-c-interop.md-832f2e6b"  >staticCFunction(::kotlinFunction)</code> can be used. It is also able to provide the lambda instead of a function reference. The function or lambda must not capture any values.</p><p id="native-c-interop.md-8a1cc5c8" >If the callback doesn\'t run in the main thread, it is mandatory to init the Kotlin/Native runtime by calling <code class="code " id="native-c-interop.md-5a9cf02c"  >kotlin.native.initRuntimeIfNeeded()</code>.</p><section class="chapter"  ><h4 id="native-c-interop.md-pass-user-data-to-callbacks" data-toc="native-c-interop#native-c-interop.md-pass-user-data-to-callbacks"  >Pass user data to callbacks</h4><p id="native-c-interop.md-a3739948" >Often C APIs allow passing some user data to callbacks. Such data is usually provided by the user when configuring the callback. It is passed to some C function (or written to the struct) as e.g. <code class="code " id="native-c-interop.md-1e5503eb"  >void*</code>. However, references to Kotlin objects can\'t be directly passed to C. So they require wrapping before configuring the callback and then unwrapping in the callback itself, to safely swim from Kotlin to Kotlin through the C world. Such wrapping is possible with <code class="code " id="native-c-interop.md-93943fbe"  >StableRef</code> class.</p><p id="native-c-interop.md-ae5a2db2" >To wrap the reference:</p><div class="code-block" data-lang="kotlin" id="native-c-interop.md-42301940"         >val stableRef = StableRef.create(kotlinReference)\nval voidPtr = stableRef.asCPointer()\n</div><p id="native-c-interop.md-3eb1a01b" >where the <code class="code " id="native-c-interop.md-e94a1674"  >voidPtr</code> is a <code class="code " id="native-c-interop.md-48cf1d1a"  >COpaquePointer</code> and can be passed to the C function.</p><p id="native-c-interop.md-9b8ea0e6" >To unwrap the reference:</p><div class="code-block" data-lang="kotlin" id="native-c-interop.md-bd3229b5"         >val stableRef = voidPtr.asStableRef&lt;KotlinClass&gt;()\nval kotlinReference = stableRef.get()\n</div><p id="native-c-interop.md-aac119f1" >where <code class="code " id="native-c-interop.md-2417090"  >kotlinReference</code> is the original wrapped reference.</p><p id="native-c-interop.md-adc6421b" >The created <code class="code " id="native-c-interop.md-b4dbd583"  >StableRef</code> should eventually be manually disposed using the <code class="code " id="native-c-interop.md-48fde3cd"  >.dispose()</code> method to prevent memory leaks:</p><div class="code-block" data-lang="kotlin" id="native-c-interop.md-9b92c94"         >stableRef.dispose()\n</div><p id="native-c-interop.md-aea167d2" >After that it becomes invalid, so <code class="code " id="native-c-interop.md-5bb71101"  >voidPtr</code> can\'t be unwrapped anymore.</p><p id="native-c-interop.md-b2275704" >See the <code class="code " id="native-c-interop.md-5a9f8d46"  >samples/libcurl</code> for more details.</p></section></section><section class="chapter"  ><h3 id="native-c-interop.md-macros" data-toc="native-c-interop#native-c-interop.md-macros"  >Macros</h3><p id="native-c-interop.md-34d08c06" >Every C macro that expands to a constant is represented as a Kotlin property. Other macros are not supported. However, they can be exposed manually by wrapping them with supported declarations. E.g. function-like macro <code class="code " id="native-c-interop.md-3f703341"  >FOO</code> can be exposed as function <code class="code " id="native-c-interop.md-4b0ec90c"  >foo</code> by <a href="#native-c-interop.md-add-custom-declarations" id="native-c-interop.md-87107be3"   >adding the custom declaration</a> to the library:</p><div class="code-block" data-lang="c" id="native-c-interop.md-59ddd8ee"         >headers = library/base.h\n\n---\n\nstatic inline int foo(int arg) {\n    return FOO(arg);\n}\n</div></section><section class="chapter"  ><h3 id="native-c-interop.md-definition-file-hints" data-toc="native-c-interop#native-c-interop.md-definition-file-hints"  >Definition file hints</h3><p id="native-c-interop.md-50d7d80e" >The <code class="code " id="native-c-interop.md-63e92828"  >.def</code> file supports several options for adjusting the generated bindings.</p><ul class="list _ul" id="native-c-interop.md-f08f588f"   ><li class="list__item" id="native-c-interop.md-451d296f" ><p id="native-c-interop.md-af6b4954" ><code class="code " id="native-c-interop.md-5043b2fe"  >excludedFunctions</code> property value specifies a space-separated list of the names of functions that should be ignored. This may be required because a function declared in the C header is not generally guaranteed to be really callable, and it is often hard or impossible to figure this out automatically. This option can also be used to workaround a bug in the interop itself.</p></li><li class="list__item" id="native-c-interop.md-6c981c54" ><p id="native-c-interop.md-75b71cd2" ><code class="code " id="native-c-interop.md-65af9abe"  >strictEnums</code> and <code class="code " id="native-c-interop.md-27d41567"  >nonStrictEnums</code> properties values are space-separated lists of the enums that should be generated as a Kotlin enum or as integral values correspondingly. If the enum is not included into any of these lists, then it is generated according to the heuristics.</p></li><li class="list__item" id="native-c-interop.md-c292176a" ><p id="native-c-interop.md-d8a531b6" ><code class="code " id="native-c-interop.md-b6b05ba1"  >noStringConversion</code> property value is space-separated lists of the functions whose <code class="code " id="native-c-interop.md-4f6cfe86"  >const char*</code> parameters shall not be autoconverted as Kotlin string</p></li></ul></section><section class="chapter"  ><h3 id="native-c-interop.md-portability" data-toc="native-c-interop#native-c-interop.md-portability"  >Portability</h3><p id="native-c-interop.md-6d39cfb8" >Sometimes the C libraries have function parameters or struct fields of a platform-dependent type, e.g. <code class="code " id="native-c-interop.md-da601c48"  >long</code> or <code class="code " id="native-c-interop.md-d69d0318"  >size_t</code>. Kotlin itself doesn\'t provide neither implicit integer casts nor C-style integer casts (e.g. <code class="code " id="native-c-interop.md-6c5d841b"  >(size_t) intValue</code> ), so to make writing portable code in such cases easier, the <code class="code " id="native-c-interop.md-56ebc39a"  >convert</code> method is provided:</p><div class="code-block" data-lang="kotlin" id="native-c-interop.md-4260cbb0"         >fun ${type1}.convert&lt;${type2}&gt;(): ${type2}\n</div><p id="native-c-interop.md-ea8e7a6f" >where each of <code class="code " id="native-c-interop.md-1212e719"  >type1</code> and <code class="code " id="native-c-interop.md-ae9214e5"  >type2</code> must be an integral type, either signed or unsigned.</p><p id="native-c-interop.md-83a7d2ce" ><code class="code " id="native-c-interop.md-983069c4"  >.convert&lt;${type}&gt;</code> has the same semantics as one of the <code class="code " id="native-c-interop.md-e7398d75"  >.toByte</code>, <code class="code " id="native-c-interop.md-7e936027"  >.toShort</code>, <code class="code " id="native-c-interop.md-862825"  >.toInt</code>, <code class="code " id="native-c-interop.md-cba02aeb"  >.toLong</code>, <code class="code " id="native-c-interop.md-d6134540"  >.toUByte</code>, <code class="code " id="native-c-interop.md-f0414432"  >.toUShort</code>, <code class="code " id="native-c-interop.md-741d7117"  >.toUInt</code> or <code class="code " id="native-c-interop.md-528d8692"  >.toULong</code> methods, depending on <code class="code " id="native-c-interop.md-188624f7"  >type</code>.</p><p id="native-c-interop.md-71295ddb" >The example of using <code class="code " id="native-c-interop.md-a8bd4c52"  >convert</code>:</p><div class="code-block" data-lang="kotlin" id="native-c-interop.md-8dc79fa5"         >fun zeroMemory(buffer: COpaquePointer, size: Int) {\n    memset(buffer, 0, size.convert&lt;size_t&gt;())\n}\n</div><p id="native-c-interop.md-24c89d19" >Also, the type parameter can be inferred automatically and so may be omitted in some cases.</p></section><section class="chapter"  ><h3 id="native-c-interop.md-object-pinning" data-toc="native-c-interop#native-c-interop.md-object-pinning"  >Object pinning</h3><p id="native-c-interop.md-9c93bbff" >Kotlin objects could be pinned, i.e. their position in memory is guaranteed to be stable until unpinned, and pointers to such objects inner data could be passed to the C functions. For example</p><div class="code-block" data-lang="kotlin" id="native-c-interop.md-eaa64f8a"         >fun readData(fd: Int): String {\n    val buffer = ByteArray(1024)\n    buffer.usePinned { pinned -&gt;\n        while (true) {\n            val length = recv(fd, pinned.addressOf(0), buffer.size.convert(), 0).toInt()\n\n            if (length &lt;= 0) {\n               break\n            }\n            // Now `buffer` has raw data obtained from the `recv()` call.\n        }\n    }\n}\n</div><p id="native-c-interop.md-7822b0f3" >Here we use service function <code class="code " id="native-c-interop.md-10c48efa"  >usePinned</code>, which pins an object, executes block and unpins it on normal and exception paths.</p></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="mapping-primitive-data-types-from-c.md"  >Mapping primitive data types from C – tutorial</h1><p id="mapping-primitive-data-types-from-c.md-a68aa1a6" >In this tutorial, you will learn what C data types are visible in Kotlin/Native and vice versa. You will:</p><ul class="list _ul" id="mapping-primitive-data-types-from-c.md-7448a21d"   ><li class="list__item" id="mapping-primitive-data-types-from-c.md-6105ae8a" ><p>See what <a href="#mapping-primitive-data-types-from-c.md-types-in-c-language" id="mapping-primitive-data-types-from-c.md-76a60fc6"   >Data types are in C language</a>.</p></li><li class="list__item" id="mapping-primitive-data-types-from-c.md-b82508a5" ><p>Create a <a href="#mapping-primitive-data-types-from-c.md-example-c-library" id="mapping-primitive-data-types-from-c.md-4a12ac68"   >tiny C Library</a> that uses those types in exports.</p></li><li class="list__item" id="mapping-primitive-data-types-from-c.md-e56150be" ><p><a href="#mapping-primitive-data-types-from-c.md-inspect-generated-kotlin-apis-for-a-c-library" id="mapping-primitive-data-types-from-c.md-31498111"   >Inspect generated Kotlin APIs from a C library</a>.</p></li><li class="list__item" id="mapping-primitive-data-types-from-c.md-2e5c9c70" ><p>Find how <a href="#mapping-primitive-data-types-from-c.md-primitive-types-in-kotlin" id="mapping-primitive-data-types-from-c.md-69947cd7"   >Primitive types in Kotlin</a> are mapped to C.</p></li></ul><section class="chapter"  ><h2 id="mapping-primitive-data-types-from-c.md-types-in-c-language" data-toc="mapping-primitive-data-types-from-c#mapping-primitive-data-types-from-c.md-types-in-c-language"  >Types in C language</h2><p id="mapping-primitive-data-types-from-c.md-ed3e46a4" >What types are there in the C language? Let\'s take the <a href="https://en.wikipedia.org/wiki/C_data_types" id="mapping-primitive-data-types-from-c.md-50531d2b"   data-external="true" rel="noopener noreferrer" >C data types</a> article from Wikipedia as a basis. There are following types in the C programming language:</p><ul class="list _ul" id="mapping-primitive-data-types-from-c.md-1a6db8d8"   ><li class="list__item" id="mapping-primitive-data-types-from-c.md-f8efb0c1" ><p>basic types <code class="code " id="mapping-primitive-data-types-from-c.md-d6d7b07e"  >char, int, float, double</code> with modifiers <code class="code " id="mapping-primitive-data-types-from-c.md-871b2729"  >signed, unsigned, short, long</code></p></li><li class="list__item" id="mapping-primitive-data-types-from-c.md-77b22fbb" ><p>structures, unions, arrays</p></li><li class="list__item" id="mapping-primitive-data-types-from-c.md-8fb2960b" ><p>pointers</p></li><li class="list__item" id="mapping-primitive-data-types-from-c.md-dc484608" ><p>function pointers</p></li></ul><p id="mapping-primitive-data-types-from-c.md-72571e93" >There are also more specific types:</p><ul class="list _ul" id="mapping-primitive-data-types-from-c.md-ab543e2a"   ><li class="list__item" id="mapping-primitive-data-types-from-c.md-72e72b3e" ><p>boolean type (from <a href="https://en.wikipedia.org/wiki/C99" id="mapping-primitive-data-types-from-c.md-8fd2979c"   data-external="true" rel="noopener noreferrer" >C99</a>)</p></li><li class="list__item" id="mapping-primitive-data-types-from-c.md-2c66540c" ><p><code class="code " id="mapping-primitive-data-types-from-c.md-5161d6d"  >size_t</code> and <code class="code " id="mapping-primitive-data-types-from-c.md-c2997704"  >ptrdiff_t</code> (also <code class="code " id="mapping-primitive-data-types-from-c.md-39db72d0"  >ssize_t</code>)</p></li><li class="list__item" id="mapping-primitive-data-types-from-c.md-86b76ad3" ><p>fixed width integer types, such as <code class="code " id="mapping-primitive-data-types-from-c.md-4a221c44"  >int32_t</code> or <code class="code " id="mapping-primitive-data-types-from-c.md-921ea627"  >uint64_t</code> (from <a href="https://en.wikipedia.org/wiki/C99" id="mapping-primitive-data-types-from-c.md-4f8846bb"   data-external="true" rel="noopener noreferrer" >C99</a>)</p></li></ul><p id="mapping-primitive-data-types-from-c.md-97a3d4ce" >There are also the following type qualifiers in the C language: <code class="code " id="mapping-primitive-data-types-from-c.md-c69dd7ec"  >const</code>, <code class="code " id="mapping-primitive-data-types-from-c.md-164d511d"  >volatile</code>, <code class="code " id="mapping-primitive-data-types-from-c.md-b6789c5f"  >restruct</code>, <code class="code " id="mapping-primitive-data-types-from-c.md-c1172de2"  >atomic</code>.</p><p id="mapping-primitive-data-types-from-c.md-306aa75a" >The best way to see what C data types are visible in Kotlin is to try it.</p></section><section class="chapter"  ><h2 id="mapping-primitive-data-types-from-c.md-example-c-library" data-toc="mapping-primitive-data-types-from-c#mapping-primitive-data-types-from-c.md-example-c-library"  >Example C library</h2><p id="mapping-primitive-data-types-from-c.md-8f2d25e1" >Create a <code class="code " id="mapping-primitive-data-types-from-c.md-2894aace"  >lib.h</code> file to see how C functions are mapped into Kotlin:</p><div class="code-block" data-lang="c" id="mapping-primitive-data-types-from-c.md-9bb0e020"         >#ifndef LIB2_H_INCLUDED\n#define LIB2_H_INCLUDED\n\nvoid ints(char c, short d, int e, long f);\nvoid uints(unsigned char c, unsigned short d, unsigned int e, unsigned long f);\nvoid doubles(float a, double b);\n\n#endif\n</div><p id="mapping-primitive-data-types-from-c.md-4ddd23be" >The file is missing the <code class="code " id="mapping-primitive-data-types-from-c.md-947360e7"  >extern &quot;C&quot;</code> block, which is not needed for this example, but may be necessary if you use C++ and overloaded functions. The <a href="https://stackoverflow.com/questions/1041866/what-is-the-effect-of-extern-c-in-c" id="mapping-primitive-data-types-from-c.md-7fd6f102"   data-external="true" rel="noopener noreferrer" >C++ compatibility thread</a> on Stackoverflow contains more details on this.</p><p id="mapping-primitive-data-types-from-c.md-b7b3201c" >For every set of <code class="code " id="mapping-primitive-data-types-from-c.md-aec59df5"  >.h</code> files, you will be using the <a href="#native-c-interop.md" id="mapping-primitive-data-types-from-c.md-f551ec98"   ><code class="code " id="mapping-primitive-data-types-from-c.md-14d3e692"  >cinterop</code> tool</a> from Kotlin/Native to generate a Kotlin/Native library, or <code class="code " id="mapping-primitive-data-types-from-c.md-f691ffe0"  >.klib</code>. The generated library will bridge calls from Kotlin/Native to C. It includes respective Kotlin declarations for the definitions form the <code class="code " id="mapping-primitive-data-types-from-c.md-4c450a0f"  >.h</code> files. It is only necessary to have a <code class="code " id="mapping-primitive-data-types-from-c.md-b2e8cefc"  >.h</code> file to run the <code class="code " id="mapping-primitive-data-types-from-c.md-8fbfa8f4"  >cinterop</code> tool. And you do not need to create a <code class="code " id="mapping-primitive-data-types-from-c.md-8385b34f"  >lib.c</code> file, unless you want to compile and run the example. More details on this are covered in the <a href="#native-c-interop.md" id="mapping-primitive-data-types-from-c.md-c360e53b"   >C interop</a> page. It is enough for the tutorial to create the <code class="code " id="mapping-primitive-data-types-from-c.md-956b567b"  >lib.def</code> file with the following content:</p><div class="code-block" data-lang="c" id="mapping-primitive-data-types-from-c.md-e8ab3908"         >headers = lib.h\n</div><p id="mapping-primitive-data-types-from-c.md-24a58404" >You may include all declarations directly into the <code class="code " id="mapping-primitive-data-types-from-c.md-d948caf0"  >.def</code> file after a <code class="code " id="mapping-primitive-data-types-from-c.md-d6865b84"  >---</code> separator. It can be helpful to include macros or other C defines into the code generated by the <code class="code " id="mapping-primitive-data-types-from-c.md-a6a3c93a"  >cinterop</code> tool. Method bodies are compiled and fully included into the binary too. Use that feature to have a runnable example without a need for a C compiler. To implement that, you need to add implementations to the C functions from the <code class="code " id="mapping-primitive-data-types-from-c.md-64bff3d2"  >lib.h</code> file, and place these functions into a <code class="code " id="mapping-primitive-data-types-from-c.md-740359d5"  >.def</code> file. You will have the following <code class="code " id="mapping-primitive-data-types-from-c.md-9e7b2724"  >interop.def</code> result:</p><div class="code-block" data-lang="c" id="mapping-primitive-data-types-from-c.md-3576c573"         >\n---\n\nvoid ints(char c, short d, int e, long f) { }\nvoid uints(unsigned char c, unsigned short d, unsigned int e, unsigned long f) { }\nvoid doubles(float a, double b) { }\n</div><p id="mapping-primitive-data-types-from-c.md-6aed4be2" >The <code class="code " id="mapping-primitive-data-types-from-c.md-9d61c582"  >interop.def</code> file is enough to compile and run the application or open it in an IDE. Now it is time to create project files, open the project in <a href="https://jetbrains.com/idea" id="mapping-primitive-data-types-from-c.md-4fb2c0b3"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA</a> and run it.</p></section><section class="chapter"  ><h2 id="mapping-primitive-data-types-from-c.md-inspect-generated-kotlin-apis-for-a-c-library" data-toc="mapping-primitive-data-types-from-c#mapping-primitive-data-types-from-c.md-inspect-generated-kotlin-apis-for-a-c-library"  >Inspect generated Kotlin APIs for a C library</h2><p id="mapping-primitive-data-types-from-c.md-e658af23" >While it is possible to use the command line, either directly or by combining it with a script file (such as <code class="code " id="mapping-primitive-data-types-from-c.md-f9d5de03"  >.sh</code> or <code class="code " id="mapping-primitive-data-types-from-c.md-1b4f111a"  >.bat</code> file), this approach doesn\'t scale well for big projects that have hundreds of files and libraries. It is then better to use the Kotlin/Native compiler with a build system, as it helps to download and cache the Kotlin/Native compiler binaries and libraries with transitive dependencies and run the compiler and tests. Kotlin/Native can use the <a href="https://gradle.org" id="mapping-primitive-data-types-from-c.md-146a1a8a"   data-external="true" rel="noopener noreferrer" >Gradle</a> build system through the <a href="#mpp-discover-project.md-multiplatform-plugin" id="mapping-primitive-data-types-from-c.md-709153b8"   >kotlin-multiplatform</a> plugin.</p><p id="mapping-primitive-data-types-from-c.md-40761de9" >We covered the basics of setting up an IDE compatible project with Gradle in the <a href="#native-gradle.md" id="mapping-primitive-data-types-from-c.md-8fafd1d4"   >A Basic Kotlin/Native Application</a> tutorial. Please check it out if you are looking for detailed first steps and instructions on how to start a new Kotlin/Native project and open it in IntelliJ IDEA. In this tutorial, we\'ll look at the advanced C interop related usages of Kotlin/Native and <a href="#mpp-discover-project.md-multiplatform-plugin" id="mapping-primitive-data-types-from-c.md-a3a257aa"   >multiplatform</a> builds with Gradle.</p><p id="mapping-primitive-data-types-from-c.md-8e31f868" >First, create a project folder. All the paths in this tutorial will be relative to this folder. Sometimes the missing directories will have to be created before any new files can be added.</p><p id="mapping-primitive-data-types-from-c.md-a3427f6e" >Use the following <code class="code " id="mapping-primitive-data-types-from-c.md-ba02e544"  >build.gradle(.kts)</code> Gradle build file:</p><div class="tabs" id="mapping-primitive-data-types-from-c.md-154c6e58" ><div class="tabs__content" data-gtm="tab" id="mapping-primitive-data-types-from-c.md-491b5f94"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mapping-primitive-data-types-from-c.md-491b5f94"   data-title="Groovy"      >plugins {\n    id \'org.jetbrains.kotlin.multiplatform\' version \'1.4.32\'\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n  linuxX64(\'native\') {  // on Linux\n  // macosX64(\'native\') { // on macOS\n  // mingwX64(\'native\') { //on Windows\n    compilations.main.cinterops {\n      interop \n    }\n    \n    binaries {\n      executable()\n    }\n  }\n}\n\nwrapper {\n  gradleVersion = \'6.7.1\'\n  distributionType = \'BIN\'\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mapping-primitive-data-types-from-c.md-b5f622b8"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mapping-primitive-data-types-from-c.md-b5f622b8"   data-title="Kotlin"      >plugins {\n    kotlin(&quot;multiplatform&quot;) version &quot;1.4.32&quot;\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n  linuxX64(&quot;native&quot;) { // on Linux\n  // macosX64(&quot;native&quot;) { // on macOS\n  // mingwX64(&quot;native&quot;) { // on Windows\n    val main by compilations.getting\n    val interop by main.cinterops.creating\n    \n    binaries {\n      executable()\n    }\n  }\n}\n\ntasks.wrapper {\n  gradleVersion = &quot;6.7.1&quot;\n  distributionType = Wrapper.DistributionType.BIN\n}\n</div></div></div><p id="mapping-primitive-data-types-from-c.md-7fc37206" >The prepared project sources can be directly downloaded from Github:</p><ul class="list _ul" id="mapping-primitive-data-types-from-c.md-91402c07"   ><li class="list__item" id="mapping-primitive-data-types-from-c.md-2433d0c6" ><p>for macOS: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-macos-c.zip" id="mapping-primitive-data-types-from-c.md-f4f57eeb"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-macos-c.zip" id="mapping-primitive-data-types-from-c.md-d181918b"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li><li class="list__item" id="mapping-primitive-data-types-from-c.md-51d420a1" ><p>for Linux: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-linux-c.zip" id="mapping-primitive-data-types-from-c.md-369aafa0"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-linux-c.zip" id="mapping-primitive-data-types-from-c.md-f59a94fe"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li><li class="list__item" id="mapping-primitive-data-types-from-c.md-33cf6323" ><p>for Windows: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-windows-c.zip" id="mapping-primitive-data-types-from-c.md-f5a17fa2"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-windows-c.zip" id="mapping-primitive-data-types-from-c.md-555e8f80"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li></ul><p id="mapping-primitive-data-types-from-c.md-90a6d8dd" >The project file configures the C interop as an additional step of the build. Let\'s move the <code class="code " id="mapping-primitive-data-types-from-c.md-51413d8b"  >interop.def</code> file to the <code class="code " id="mapping-primitive-data-types-from-c.md-39b3d31c"  >src/nativeInterop/cinterop</code> directory. Gradle recommends using conventions instead of configurations, for example, the source files are expected to be in the <code class="code " id="mapping-primitive-data-types-from-c.md-e744fd2"  >src/nativeMain/kotlin</code> folder. By default, all the symbols from C are imported to the <code class="code " id="mapping-primitive-data-types-from-c.md-a604d7d7"  >interop</code> package, you may want to import the whole package in our <code class="code " id="mapping-primitive-data-types-from-c.md-ac3c8bb0"  >.kt</code> files. Check out the <a href="#mpp-discover-project.md-multiplatform-plugin" id="mapping-primitive-data-types-from-c.md-4968399c"   >kotlin-multiplatform</a> plugin documentation to learn about all the different ways you could configure it.</p><p id="mapping-primitive-data-types-from-c.md-4642c771" >Create a <code class="code " id="mapping-primitive-data-types-from-c.md-ad000f76"  >src/nativeMain/kotlin/hello.kt</code> stub file with the following content to see how C primitive type declarations are visible from Kotlin:</p><div class="code-block" data-lang="kotlin" id="mapping-primitive-data-types-from-c.md-40908ab9"         >import interop.*\n\nfun main() {\n  println(&quot;Hello Kotlin/Native!&quot;)\n  \n  ints(/* fix me*/)\n  uints(/* fix me*/)\n  doubles(/* fix me*/)\n}\n</div><p id="mapping-primitive-data-types-from-c.md-a4dd85b" >Now you are ready to <a href="#native-get-started.md" id="mapping-primitive-data-types-from-c.md-db87cd93"   >open the project in IntelliJ IDEA</a> and to see how to fix the example project. While doing that, see how C primitive types are mapped into Kotlin/Native.</p></section><section class="chapter"  ><h2 id="mapping-primitive-data-types-from-c.md-primitive-types-in-kotlin" data-toc="mapping-primitive-data-types-from-c#mapping-primitive-data-types-from-c.md-primitive-types-in-kotlin"  >Primitive types in kotlin</h2><p id="mapping-primitive-data-types-from-c.md-1332cf50" >With the help of IntelliJ IDEA\'s <b id="mapping-primitive-data-types-from-c.md-f197685e" class=""  >Go to | Declaration</b> or compiler errors, you see the following generated API for the C functions:</p><div class="code-block" data-lang="kotlin" id="mapping-primitive-data-types-from-c.md-32fcf6ab"         >fun ints(c: Byte, d: Short, e: Int, f: Long)\nfun uints(c: UByte, d: UShort, e: UInt, f: ULong)\nfun doubles(a: Float, b: Double)\n</div><p id="mapping-primitive-data-types-from-c.md-811b0acf" >C types are mapped in the way we would expect, note that <code class="code " id="mapping-primitive-data-types-from-c.md-7eb3abae"  >char</code> type is mapped to <code class="code " id="mapping-primitive-data-types-from-c.md-7e513b5e"  >kotlin.Byte</code> as it is usually an 8-bit signed value.</p><div class="table-wrapper" ><table class=" wide" id="mapping-primitive-data-types-from-c.md-46369d0a"  ><thead><tr class="ijRowHead" id="mapping-primitive-data-types-from-c.md-761ce5b4" ><th id="mapping-primitive-data-types-from-c.md-2126b360"    >C</th><th id="mapping-primitive-data-types-from-c.md-99fca1ed"    >Kotlin</th></tr></thead><tbody ><tr class="" id="mapping-primitive-data-types-from-c.md-3807018f" ><td id="mapping-primitive-data-types-from-c.md-95752d1e"    >char</td><td id="mapping-primitive-data-types-from-c.md-41adf09b"    >kotlin.Byte</td></tr><tr class="" id="mapping-primitive-data-types-from-c.md-c041d67c" ><td id="mapping-primitive-data-types-from-c.md-21a2fa22"    >unsigned char</td><td id="mapping-primitive-data-types-from-c.md-39fbd9b1"    >kotlin.UByte</td></tr><tr class="" id="mapping-primitive-data-types-from-c.md-754b0597" ><td id="mapping-primitive-data-types-from-c.md-26ee8e38"    >short</td><td id="mapping-primitive-data-types-from-c.md-8ba10a6b"    >kotlin.Short</td></tr><tr class="" id="mapping-primitive-data-types-from-c.md-d445896" ><td id="mapping-primitive-data-types-from-c.md-3ea1cb3d"    >unsigned short</td><td id="mapping-primitive-data-types-from-c.md-50dc131"    >kotlin.UShort</td></tr><tr class="" id="mapping-primitive-data-types-from-c.md-5b87d65c" ><td id="mapping-primitive-data-types-from-c.md-b1a6ddb"    >int</td><td id="mapping-primitive-data-types-from-c.md-6d8877e2"    >kotlin.Int</td></tr><tr class="" id="mapping-primitive-data-types-from-c.md-73a2d655" ><td id="mapping-primitive-data-types-from-c.md-6c44642b"    >unsigned int</td><td id="mapping-primitive-data-types-from-c.md-f0bc3942"    >kotlin.UInt</td></tr><tr class="" id="mapping-primitive-data-types-from-c.md-e6822584" ><td id="mapping-primitive-data-types-from-c.md-3025e66d"    >long long</td><td id="mapping-primitive-data-types-from-c.md-5229d633"    >kotlin.Long</td></tr><tr class="" id="mapping-primitive-data-types-from-c.md-87ef3455" ><td id="mapping-primitive-data-types-from-c.md-964f852"    >unsigned long long</td><td id="mapping-primitive-data-types-from-c.md-918cba4d"    >kotlin.ULong</td></tr><tr class="" id="mapping-primitive-data-types-from-c.md-34185f17" ><td id="mapping-primitive-data-types-from-c.md-651e7dbe"    >float</td><td id="mapping-primitive-data-types-from-c.md-255da971"    >kotlin.Float</td></tr><tr class="" id="mapping-primitive-data-types-from-c.md-128f847" ><td id="mapping-primitive-data-types-from-c.md-5ddcd42c"    >double</td><td id="mapping-primitive-data-types-from-c.md-c3c205d4"    >kotlin.Double</td></tr></tbody ></table ></div></section><section class="chapter"  ><h2 id="mapping-primitive-data-types-from-c.md-fix-the-code" data-toc="mapping-primitive-data-types-from-c#mapping-primitive-data-types-from-c.md-fix-the-code"  >Fix the code</h2><p id="mapping-primitive-data-types-from-c.md-529398ce" >You\'ve seen all definitions and it is the time to fix the code. Run the <code class="code " id="mapping-primitive-data-types-from-c.md-735a79fd"  >runDebugExecutableNative</code> Gradle task <a href="#native-get-started.md" id="mapping-primitive-data-types-from-c.md-303734e0"   >in IDE</a> or use the following command to run the code:</p><div class="code-block" data-lang="bash" id="mapping-primitive-data-types-from-c.md-9ad75dce"         >./gradlew runDebugExecutableNative\n</div><p id="mapping-primitive-data-types-from-c.md-e66fe002" >The final code in the <code class="code " id="mapping-primitive-data-types-from-c.md-150c8218"  >hello.kt</code> file may look like that:</p><div class="code-block" data-lang="kotlin" id="mapping-primitive-data-types-from-c.md-8267db81"         >import interop.*\n\nfun main() {\n  println(&quot;Hello Kotlin/Native!&quot;)\n  \n  ints(1, 2, 3, 4)\n  uints(5, 6, 7, 8)\n  doubles(9.0f, 10.0)\n}\n</div></section><section class="chapter"  ><h2 id="mapping-primitive-data-types-from-c.md-next-steps" data-toc="mapping-primitive-data-types-from-c#mapping-primitive-data-types-from-c.md-next-steps"  >Next steps</h2><p id="mapping-primitive-data-types-from-c.md-1818a68" >Continue to explore more complicated C language types and their representation in Kotlin/Native in the next tutorials:</p><ul class="list _ul" id="mapping-primitive-data-types-from-c.md-2fc0cb7d"   ><li class="list__item" id="mapping-primitive-data-types-from-c.md-e8337079" ><a href="#mapping-struct-union-types-from-c.md" id="mapping-primitive-data-types-from-c.md-803d24d"   >Mapping struct and union types from C</a></li><li class="list__item" id="mapping-primitive-data-types-from-c.md-4881dac6" ><a href="#mapping-function-pointers-from-c.md" id="mapping-primitive-data-types-from-c.md-17b727b6"   >Mapping function pointers from C</a></li><li class="list__item" id="mapping-primitive-data-types-from-c.md-fb0ec022" ><a href="#mapping-strings-from-c.md" id="mapping-primitive-data-types-from-c.md-2409117b"   >Mapping strings from C</a></li></ul><p id="mapping-primitive-data-types-from-c.md-653a19c2" >The <a href="#native-c-interop.md" id="mapping-primitive-data-types-from-c.md-e5361e00"   >C interop documentation</a> covers more advanced scenarios of the interop.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="mapping-struct-union-types-from-c.md"  >Mapping struct and union types from C – tutorial</h1><p id="mapping-struct-union-types-from-c.md-96964070" >This is the second post in the series. The very first tutorial of the series is <a href="#mapping-primitive-data-types-from-c.md" id="mapping-struct-union-types-from-c.md-879d69d"   >Mapping primitive data types from C</a>. There are also the <a href="#mapping-function-pointers-from-c.md" id="mapping-struct-union-types-from-c.md-648e63cf"   >Mapping function pointers from C</a> and <a href="#mapping-strings-from-c.md" id="mapping-struct-union-types-from-c.md-3ee1e838"   >Mapping Strings from C</a> tutorials.</p><p id="mapping-struct-union-types-from-c.md-23bdf079" >In the tutorial, you will learn:</p><ul class="list _ul" id="mapping-struct-union-types-from-c.md-feeb4e00"   ><li class="list__item" id="mapping-struct-union-types-from-c.md-94cfe1d" ><a href="#mapping-struct-union-types-from-c.md-mapping-struct-and-union-c-types" id="mapping-struct-union-types-from-c.md-2d833b3d"   >How struct and union types are mapped</a></li><li class="list__item" id="mapping-struct-union-types-from-c.md-1ee0787" ><a href="#mapping-struct-union-types-from-c.md-use-struct-and-union-types-from-kotlin" id="mapping-struct-union-types-from-c.md-2d8a1e36"   >How to use struct and union type from Kotlin</a></li></ul><section class="chapter"  ><h2 id="mapping-struct-union-types-from-c.md-mapping-struct-and-union-c-types" data-toc="mapping-struct-union-types-from-c#mapping-struct-union-types-from-c.md-mapping-struct-and-union-c-types"  >Mapping struct and union C types</h2><p id="mapping-struct-union-types-from-c.md-1eac4c23" >The best way to understand the mapping between Kotlin and C is to try a tiny example. We will declare a struct and a union in the C language, to see how they are mapped into Kotlin.</p><p id="mapping-struct-union-types-from-c.md-2adc0617" >Kotlin/Native comes with the <code class="code " id="mapping-struct-union-types-from-c.md-10ec5122"  >cinterop</code> tool, the tool generates bindings between the C language and Kotlin. It uses a <code class="code " id="mapping-struct-union-types-from-c.md-98386e67"  >.def</code> file to specify a C library to import. More details are discussed in the <a href="#native-c-interop.md" id="mapping-struct-union-types-from-c.md-e666dda0"   >Interop with C Libraries</a> tutorial.</p><p id="mapping-struct-union-types-from-c.md-8aea0c1d" >In <a href="#mapping-primitive-data-types-from-c.md" id="mapping-struct-union-types-from-c.md-3111549c"   >the previous tutorial</a>, you\'ve created a <code class="code " id="mapping-struct-union-types-from-c.md-29e02169"  >lib.h</code> file. This time, include those declarations directly into the <code class="code " id="mapping-struct-union-types-from-c.md-b3291d54"  >interop.def</code> file, after the <code class="code " id="mapping-struct-union-types-from-c.md-38722036"  >---</code> separator line:</p><div class="code-block" data-lang="c" id="mapping-struct-union-types-from-c.md-c2fa1b54"         >\n---\n\ntypedef struct {\n  int a;\n  double b;\n} MyStruct;\n\nvoid struct_by_value(MyStruct s) {}\nvoid struct_by_pointer(MyStruct* s) {}\n\ntypedef union {\n  int a;\n  MyStruct b;\n  float c;\n} MyUnion;\n\nvoid union_by_value(MyUnion u) {}\nvoid union_by_pointer(MyUnion* u) {}\n\n</div><p id="mapping-struct-union-types-from-c.md-3ccd7f14" >The <code class="code " id="mapping-struct-union-types-from-c.md-8c26cc8f"  >interop.def</code> file is enough to compile and run the application or open it in an IDE. Now it is time to create project files, open the project in <a href="https://jetbrains.com/idea" id="mapping-struct-union-types-from-c.md-e7f68140"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA</a> and run it.</p></section><section class="chapter"  ><h2 id="mapping-struct-union-types-from-c.md-inspect-generated-kotlin-apis-for-a-c-library" data-toc="mapping-struct-union-types-from-c#mapping-struct-union-types-from-c.md-inspect-generated-kotlin-apis-for-a-c-library"  >Inspect Generated Kotlin APIs for a C library</h2><p id="mapping-struct-union-types-from-c.md-9f080a86" >While it is possible to use the command line, either directly or by combining it with a script file (such as <code class="code " id="mapping-struct-union-types-from-c.md-81212a9a"  >.sh</code> or <code class="code " id="mapping-struct-union-types-from-c.md-3e45809d"  >.bat</code> file), this approach doesn\'t scale well for big projects that have hundreds of files and libraries. It is then better to use the Kotlin/Native compiler with a build system, as it helps to download and cache the Kotlin/Native compiler binaries and libraries with transitive dependencies and run the compiler and tests. Kotlin/Native can use the <a href="https://gradle.org" id="mapping-struct-union-types-from-c.md-145526b4"   data-external="true" rel="noopener noreferrer" >Gradle</a> build system through the <a href="#mpp-discover-project.md-multiplatform-plugin" id="mapping-struct-union-types-from-c.md-671096e9"   >kotlin-multiplatform</a> plugin.</p><p id="mapping-struct-union-types-from-c.md-de9b5e2f" >We covered the basics of setting up an IDE compatible project with Gradle in the <a href="#native-gradle.md" id="mapping-struct-union-types-from-c.md-d23a6cb6"   >A Basic Kotlin/Native Application</a> tutorial. Please check it out if you are looking for detailed first steps and instructions on how to start a new Kotlin/Native project and open it in IntelliJ IDEA. In this tutorial, we\'ll look at the advanced C interop related usages of Kotlin/Native and <a href="#mpp-discover-project.md-multiplatform-plugin" id="mapping-struct-union-types-from-c.md-1c19bedc"   >multiplatform</a> builds with Gradle.</p><p id="mapping-struct-union-types-from-c.md-67b8be88" >First, create a project folder. All the paths in this tutorial will be relative to this folder. Sometimes the missing directories will have to be created before any new files can be added.</p><p id="mapping-struct-union-types-from-c.md-3ee74e7f" >Use the following <code class="code " id="mapping-struct-union-types-from-c.md-1e19c06d"  >build.gradle(.kts)</code> Gradle build file:</p><div class="tabs" id="mapping-struct-union-types-from-c.md-ccd77c6d" ><div class="tabs__content" data-gtm="tab" id="mapping-struct-union-types-from-c.md-41f2ecba"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mapping-struct-union-types-from-c.md-41f2ecba"   data-title="Groovy"      >plugins {\n    id \'org.jetbrains.kotlin.multiplatform\' version \'1.4.32\'\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n  linuxX64(\'native\') {  // on Linux\n  // macosX64(\'native\') { // on macOS\n  // mingwX64(\'native\') { //on Windows\n    compilations.main.cinterops {\n      interop \n    }\n    \n    binaries {\n      executable()\n    }\n  }\n}\n\nwrapper {\n  gradleVersion = \'6.7.1\'\n  distributionType = \'BIN\'\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mapping-struct-union-types-from-c.md-db758845"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mapping-struct-union-types-from-c.md-db758845"   data-title="Kotlin"      >plugins {\n    kotlin(&quot;multiplatform&quot;) version &quot;1.4.32&quot;\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n  linuxX64(&quot;native&quot;) { // on Linux\n  // macosX64(&quot;native&quot;) { // on macOS\n  // mingwX64(&quot;native&quot;) { // on Windows\n    val main by compilations.getting\n    val interop by main.cinterops.creating\n    \n    binaries {\n      executable()\n    }\n  }\n}\n\ntasks.wrapper {\n  gradleVersion = &quot;6.7.1&quot;\n  distributionType = Wrapper.DistributionType.BIN\n}\n</div></div></div><p id="mapping-struct-union-types-from-c.md-700e58f7" >The prepared project sources can be directly downloaded from Github:</p><ul class="list _ul" id="mapping-struct-union-types-from-c.md-37a04b54"   ><li class="list__item" id="mapping-struct-union-types-from-c.md-a7ec71c7" ><p>for macOS: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-macos-c.zip" id="mapping-struct-union-types-from-c.md-a961ba6f"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-macos-c.zip" id="mapping-struct-union-types-from-c.md-3fda3620"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li><li class="list__item" id="mapping-struct-union-types-from-c.md-dfc36ab6" ><p>for Linux: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-linux-c.zip" id="mapping-struct-union-types-from-c.md-1cb6fda7"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-linux-c.zip" id="mapping-struct-union-types-from-c.md-a8b85491"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li><li class="list__item" id="mapping-struct-union-types-from-c.md-c928e0e7" ><p>for Windows: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-windows-c.zip" id="mapping-struct-union-types-from-c.md-b11f3c3f"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-windows-c.zip" id="mapping-struct-union-types-from-c.md-6cbd119"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li></ul><p id="mapping-struct-union-types-from-c.md-a20ddadb" >The project file configures the C interop as an additional step of the build. Let\'s move the <code class="code " id="mapping-struct-union-types-from-c.md-43deb2e7"  >interop.def</code> file to the <code class="code " id="mapping-struct-union-types-from-c.md-a385f6b7"  >src/nativeInterop/cinterop</code> directory. Gradle recommends using conventions instead of configurations, for example, the source files are expected to be in the <code class="code " id="mapping-struct-union-types-from-c.md-e600fd14"  >src/nativeMain/kotlin</code> folder. By default, all the symbols from C are imported to the <code class="code " id="mapping-struct-union-types-from-c.md-2d00c36"  >interop</code> package, you may want to import the whole package in our <code class="code " id="mapping-struct-union-types-from-c.md-c172600f"  >.kt</code> files. Check out the <a href="#mpp-discover-project.md-multiplatform-plugin" id="mapping-struct-union-types-from-c.md-44a12e1"   >kotlin-multiplatform</a> plugin documentation to learn about all the different ways you could configure it.</p><p id="mapping-struct-union-types-from-c.md-6c8cc40d" >Create a <code class="code " id="mapping-struct-union-types-from-c.md-1f4041d6"  >src/nativeMain/kotlin/hello.kt</code> stub file with the following content to see how C declarations are visible from Kotlin:</p><div class="code-block" data-lang="kotlin" id="mapping-struct-union-types-from-c.md-78dc702b"         >import interop.*\n\nfun main() {\n  println(&quot;Hello Kotlin/Native!&quot;)\n  \n  struct_by_value(/* fix me*/)\n  struct_by_pointer(/* fix me*/)\n  union_by_value(/* fix me*/)\n  union_by_pointer(/* fix me*/)\n}\n</div><p id="mapping-struct-union-types-from-c.md-d24d9f75" >Now you are ready to <a href="#native-get-started.md" id="mapping-struct-union-types-from-c.md-8785f5f4"   >open the project in IntelliJ IDEA</a> and to see how to fix the example project. While doing that, see how C primitive types are mapped into Kotlin/Native.</p></section><section class="chapter"  ><h2 id="mapping-struct-union-types-from-c.md-primitive-types-in-kotlin" data-toc="mapping-struct-union-types-from-c#mapping-struct-union-types-from-c.md-primitive-types-in-kotlin"  >Primitive types in Kotlin</h2><p id="mapping-struct-union-types-from-c.md-2ab648d5" >With the help of IntelliJ IDEA\'s <b id="mapping-struct-union-types-from-c.md-47c920ca" class=""  >Go to | Declaration</b> or compiler errors, you see the following generated API for the C functions, <code class="code " id="mapping-struct-union-types-from-c.md-929f705b"  >struct</code>, and <code class="code " id="mapping-struct-union-types-from-c.md-2001c349"  >union</code>:</p><div class="code-block" data-lang="kotlin" id="mapping-struct-union-types-from-c.md-d0f1b8b1"         >fun struct_by_value(s: CValue&lt;MyStruct&gt;)\nfun struct_by_pointer(s: CValuesRef&lt;MyStruct&gt;?)\n\nfun union_by_value(u: CValue&lt;MyUnion&gt;)\nfun union_by_pointer(u: CValuesRef&lt;MyUnion&gt;?)\n\nclass MyStruct constructor(rawPtr: NativePtr /* = NativePtr */) : CStructVar {\n    var a: Int\n    var b: Double\n    companion object : CStructVar.Type\n}\n\nclass MyUnion constructor(rawPtr: NativePtr /* = NativePtr */) : CStructVar {\n    var a: Int\n    val b: MyStruct\n    var c: Float\n    companion object : CStructVar.Type\n}\n</div><p id="mapping-struct-union-types-from-c.md-b14bfaad" >You see that <code class="code " id="mapping-struct-union-types-from-c.md-16fee3cb"  >cinterop</code> generated wrapper types for our <code class="code " id="mapping-struct-union-types-from-c.md-687decce"  >struct</code> and <code class="code " id="mapping-struct-union-types-from-c.md-b5865409"  >union</code> types. For <code class="code " id="mapping-struct-union-types-from-c.md-ebc1b54a"  >MyStruct</code> and <code class="code " id="mapping-struct-union-types-from-c.md-1411779b"  >MyUnion</code> type declarations in C, there are the Kotlin classes <code class="code " id="mapping-struct-union-types-from-c.md-59420d9"  >MyStruct</code> and <code class="code " id="mapping-struct-union-types-from-c.md-453f573e"  >MyUnion</code> generated respectively. The wrappers inherit from the <code class="code " id="mapping-struct-union-types-from-c.md-f93818ff"  >CStructVar</code> base class and declare all fields as Kotlin properties. It uses <code class="code " id="mapping-struct-union-types-from-c.md-6f5b57cc"  >CValue&lt;T&gt;</code> to represent a by-value structure parameter and <code class="code " id="mapping-struct-union-types-from-c.md-7fd33e09"  >CValuesRef&lt;T&gt;?</code> to represent passing a pointer to a structure or a union.</p><p id="mapping-struct-union-types-from-c.md-8a9860b8" >Technically, there is no difference between <code class="code " id="mapping-struct-union-types-from-c.md-efb15681"  >struct</code> and <code class="code " id="mapping-struct-union-types-from-c.md-9af37e4f"  >union</code> types on the Kotlin side. Note that <code class="code " id="mapping-struct-union-types-from-c.md-29e3c5b7"  >a</code>, <code class="code " id="mapping-struct-union-types-from-c.md-c54eca6a"  >b</code>, and <code class="code " id="mapping-struct-union-types-from-c.md-dc790893"  >c</code> properties of <code class="code " id="mapping-struct-union-types-from-c.md-8b59e894"  >MyUnion</code> class in Kotlin use the same memory location to read/write their value just like <code class="code " id="mapping-struct-union-types-from-c.md-ace6b644"  >union</code> does in C language.</p><p id="mapping-struct-union-types-from-c.md-83968586" >More details and advanced use-cases are presented in the <br/> <a href="#native-c-interop.md" id="mapping-struct-union-types-from-c.md-2bac81b0"   >C Interop documentation</a></p></section><section class="chapter"  ><h2 id="mapping-struct-union-types-from-c.md-use-struct-and-union-types-from-kotlin" data-toc="mapping-struct-union-types-from-c#mapping-struct-union-types-from-c.md-use-struct-and-union-types-from-kotlin"  >Use struct and union types from Kotlin</h2><p id="mapping-struct-union-types-from-c.md-8ed4e2cb" >It is easy to use the generated wrapper classes for C <code class="code " id="mapping-struct-union-types-from-c.md-8886ca8f"  >struct</code> and <code class="code " id="mapping-struct-union-types-from-c.md-74a650d3"  >union</code> types from Kotlin. Thanks to the generated properties, it feels natural to use them in Kotlin code. The only question, so far, is how to create a new instance on those classes. As you see from the declarations of <code class="code " id="mapping-struct-union-types-from-c.md-be296de7"  >MyStruct</code> and <code class="code " id="mapping-struct-union-types-from-c.md-1a3d2715"  >MyUnion</code>, their constructors require a <code class="code " id="mapping-struct-union-types-from-c.md-c8784d9c"  >NativePtr</code>. Of course, you are not willing to deal with pointers manually. Instead, you can use Kotlin API to have those objects instantiated for us.</p><p id="mapping-struct-union-types-from-c.md-5b41b3dc" >Let\'s take a look at the generated functions that take our <code class="code " id="mapping-struct-union-types-from-c.md-f19af85f"  >MyStruct</code> and <code class="code " id="mapping-struct-union-types-from-c.md-9b31b088"  >MyUnion</code> as parameters. You see that by-value parameters are represented as <code class="code " id="mapping-struct-union-types-from-c.md-fc86d6c2"  >kotlinx.cinterop.CValue&lt;T&gt;</code>. And for typed pointer parameters you see <code class="code " id="mapping-struct-union-types-from-c.md-e66d5826"  >kotlinx.cinterop.CValuesRef&lt;T&gt;</code>. Kotlin provides us with an API to deal with both types easily, let\'s try it and see.</p><section class="chapter"  ><h3 id="mapping-struct-union-types-from-c.md-create-a-cvalue-lt-t-gt" data-toc="mapping-struct-union-types-from-c#mapping-struct-union-types-from-c.md-create-a-cvalue-lt-t-gt"  >Create a CValue<T></h3><p id="mapping-struct-union-types-from-c.md-9e3842e0" ><code class="code " id="mapping-struct-union-types-from-c.md-48f4234d"  >CValue&lt;T&gt;</code> type is used to pass by-value parameters to a C function call. Use <code class="code " id="mapping-struct-union-types-from-c.md-f3434781"  >cValue</code> function to create <code class="code " id="mapping-struct-union-types-from-c.md-9279075c"  >CValue&lt;T&gt;</code> object instance. The function requires a <a href="#lambdas.md-function-literals-with-receiver" id="mapping-struct-union-types-from-c.md-89ff82f1"   >lambda function with a receiver</a> to initialize the underlying C type in-place. The function is declared as follows:</p><div class="code-block" data-lang="kotlin" id="mapping-struct-union-types-from-c.md-67f1167"         >fun &lt;reified T : CStructVar&gt; cValue(initialize: T.() -&gt; Unit): CValue&lt;T&gt;\n</div><p id="mapping-struct-union-types-from-c.md-9d04e526" >Now it is time to see how to use <code class="code " id="mapping-struct-union-types-from-c.md-8b679024"  >cValue</code> and pass by-value parameters:</p><div class="code-block" data-lang="kotlin" id="mapping-struct-union-types-from-c.md-5afec7b3"         >fun callValue() {\n\n  val cStruct = cValue&lt;MyStruct&gt; {\n    a = 42\n    b = 3.14\n  }\n  struct_by_value(cStruct)\n\n  val cUnion = cValue&lt;MyUnion&gt; {\n    b.a = 5\n    b.b = 2.7182\n  }\n\n  union_by_value(cUnion)\n}\n</div></section><section class="chapter"  ><h3 id="mapping-struct-union-types-from-c.md-create-struct-and-union-as-cvaluesref-lt-t-gt" data-toc="mapping-struct-union-types-from-c#mapping-struct-union-types-from-c.md-create-struct-and-union-as-cvaluesref-lt-t-gt"  >Create struct and union as CValuesRef<T></h3><p id="mapping-struct-union-types-from-c.md-1570a8ae" ><code class="code " id="mapping-struct-union-types-from-c.md-eeccad17"  >CValuesRef&lt;T&gt;</code> type is used in Kotlin to pass a typed pointer parameter of a C function. First, you need an instance of <code class="code " id="mapping-struct-union-types-from-c.md-3c5bbb50"  >MyStruct</code> and <code class="code " id="mapping-struct-union-types-from-c.md-7f6576f0"  >MyUnion</code> classes. Create them directly in the native memory. Use the</p><div class="code-block" data-lang="kotlin" id="mapping-struct-union-types-from-c.md-a9e8f2f9"         >fun &lt;reified T : kotlinx.cinterop.CVariable&gt; alloc(): T   \n</div><p id="mapping-struct-union-types-from-c.md-7582cf0e" >extension function on <code class="code " id="mapping-struct-union-types-from-c.md-2a4b710f"  >kotlinx.cinterop.NativePlacement</code> type for this.</p><p id="mapping-struct-union-types-from-c.md-d7c5e582" ><code class="code " id="mapping-struct-union-types-from-c.md-8b9190af"  >NativePlacement</code> represents native memory with functions similar to <code class="code " id="mapping-struct-union-types-from-c.md-3052161d"  >malloc</code> and <code class="code " id="mapping-struct-union-types-from-c.md-54f507a5"  >free</code>. There are several implementations of <code class="code " id="mapping-struct-union-types-from-c.md-a2d91f6"  >NativePlacement</code>. The global one is called with <code class="code " id="mapping-struct-union-types-from-c.md-82ce089e"  >kotlinx.cinterop.nativeHeap</code> and don\'t forget to call the <code class="code " id="mapping-struct-union-types-from-c.md-e5625df2"  >nativeHeap.free(..)</code> function to free the memory after use.</p><p id="mapping-struct-union-types-from-c.md-e24e495e" >Another option is to use the</p><div class="code-block" data-lang="kotlin" id="mapping-struct-union-types-from-c.md-54b3e56b"         >fun &lt;R&gt; memScoped(block: kotlinx.cinterop.MemScope.() -&gt; R): R    \n</div><p id="mapping-struct-union-types-from-c.md-cb00c10b" >function. It creates a short-lived memory allocation scope, and all allocations will be cleaned up automatically at the end of the <code class="code " id="mapping-struct-union-types-from-c.md-b76e985c"  >block</code>.</p><p id="mapping-struct-union-types-from-c.md-260965bf" >Your code to call functions with pointers will look like this:</p><div class="code-block" data-lang="kotlin" id="mapping-struct-union-types-from-c.md-a5b99ec0"         >fun callRef() {\n  memScoped {\n    val cStruct = alloc&lt;MyStruct&gt;()\n    cStruct.a = 42\n    cStruct.b = 3.14\n\n    struct_by_pointer(cStruct.ptr)\n\nval cUnion = alloc&lt;MyUnion&gt;()\n    cUnion.b.a = 5\n    cUnion.b.b = 2.7182\n\n    union_by_pointer(cUnion.ptr)\n  }\n}\n\n</div><p id="mapping-struct-union-types-from-c.md-5cfdf609" >Note that this code uses the extension property <code class="code " id="mapping-struct-union-types-from-c.md-f77270d"  >ptr</code> which comes from a <code class="code " id="mapping-struct-union-types-from-c.md-17db41ff"  >memScoped</code> lambda receiver type, to turn <code class="code " id="mapping-struct-union-types-from-c.md-e7114bee"  >MyStruct</code> and <code class="code " id="mapping-struct-union-types-from-c.md-ec87410e"  >MyUnion</code> instances into native pointers.</p><p id="mapping-struct-union-types-from-c.md-da998da1" >The <code class="code " id="mapping-struct-union-types-from-c.md-5f1dcb5"  >MyStruct</code> and <code class="code " id="mapping-struct-union-types-from-c.md-59eb75b1"  >MyUnion</code> classes have the pointer to the native memory underneath. The memory will be released when a <code class="code " id="mapping-struct-union-types-from-c.md-ae3f85c2"  >memScoped</code> function ends, which is equal to the end of its <code class="code " id="mapping-struct-union-types-from-c.md-2522bfde"  >block</code>. Make sure that a pointer is not used outside of the <code class="code " id="mapping-struct-union-types-from-c.md-2cc0b8d2"  >memScoped</code> call. You may use <code class="code " id="mapping-struct-union-types-from-c.md-11e7616d"  >Arena()</code> or <code class="code " id="mapping-struct-union-types-from-c.md-4230581a"  >nativeHeap</code> for pointers that should be available longer, or are cached inside a C library.</p></section><section class="chapter"  ><h3 id="mapping-struct-union-types-from-c.md-conversion-between-cvalue-lt-t-gt-and-cvaluesref-lt-t-gt" data-toc="mapping-struct-union-types-from-c#mapping-struct-union-types-from-c.md-conversion-between-cvalue-lt-t-gt-and-cvaluesref-lt-t-gt"  >Conversion between CValue<T> and CValuesRef<T></h3><p id="mapping-struct-union-types-from-c.md-4181903d" >Of course, there are use cases when you need to pass a struct as a value to one call, and then, to pass the same struct as a reference to another call. This is possible in Kotlin/Native too. A <code class="code " id="mapping-struct-union-types-from-c.md-753483d0"  >NativePlacement</code> will be needed here.</p><p id="mapping-struct-union-types-from-c.md-a8538d50" >Let\'s see now <code class="code " id="mapping-struct-union-types-from-c.md-9ef72fa5"  >CValue&lt;T&gt;</code> is turned to a pointer first:</p><div class="code-block" data-lang="kotlin" id="mapping-struct-union-types-from-c.md-b01302a9"         >fun callMix_ref() {\n  val cStruct = cValue&lt;MyStruct&gt; {\n    a = 42\n    b = 3.14\n  }\n  \n  memScoped { \n    struct_by_pointer(cStruct.ptr)\n  }\n}\n</div><p id="mapping-struct-union-types-from-c.md-fdbe6b2b" >This code uses the extension property <code class="code " id="mapping-struct-union-types-from-c.md-23b74ab3"  >ptr</code> which comes from <code class="code " id="mapping-struct-union-types-from-c.md-5441fc25"  >memScoped</code> lambda receiver type to turn <code class="code " id="mapping-struct-union-types-from-c.md-ac1a8786"  >MyStruct</code> and <code class="code " id="mapping-struct-union-types-from-c.md-4bad510"  >MyUnion</code> instances into native pointers. Those pointers are only valid inside the <code class="code " id="mapping-struct-union-types-from-c.md-6d711ac5"  >memScoped</code> block.</p><p id="mapping-struct-union-types-from-c.md-85a7ef61" >For the opposite conversion, to turn a pointer into a by-value variable, we call the <code class="code " id="mapping-struct-union-types-from-c.md-a6d462f4"  >readValue()</code> extension function:</p><div class="code-block" data-lang="kotlin" id="mapping-struct-union-types-from-c.md-2be7054"         >fun callMix_value() {\n  memScoped {\n    val cStruct = alloc&lt;MyStruct&gt;()\n    cStruct.a = 42\n    cStruct.b = 3.14\n\n    struct_by_value(cStruct.readValue())\n  }\n}\n</div></section></section><section class="chapter"  ><h2 id="mapping-struct-union-types-from-c.md-run-the-code" data-toc="mapping-struct-union-types-from-c#mapping-struct-union-types-from-c.md-run-the-code"  >Run the code</h2><p id="mapping-struct-union-types-from-c.md-1b0885c0" >Now when you have learned how to use C declarations in your code, you are ready to try it out on a real example. Let\'s fix the code and see how it runs by calling the <code class="code " id="mapping-struct-union-types-from-c.md-dcbb16a"  >runDebugExecutableNative</code> Gradle task <a href="#native-get-started.md" id="mapping-struct-union-types-from-c.md-42649039"   >in the IDE</a> or by using the following console command:</p><div class="code-block" data-lang="bash" id="mapping-struct-union-types-from-c.md-b94099e8"         >./gradlew runDebugExecutableNative\n</div><p id="mapping-struct-union-types-from-c.md-32163c5c" >The final code in the <code class="code " id="mapping-struct-union-types-from-c.md-a3b0c454"  >hello.kt</code> file may look like this:</p><div class="code-block" data-lang="kotlin" id="mapping-struct-union-types-from-c.md-e1b87e26"         >import interop.*\nimport kotlinx.cinterop.alloc\nimport kotlinx.cinterop.cValue\nimport kotlinx.cinterop.memScoped\nimport kotlinx.cinterop.ptr\nimport kotlinx.cinterop.readValue\n\nfun main() {\n  println(&quot;Hello Kotlin/Native!&quot;)\n\n  val cUnion = cValue&lt;MyUnion&gt; {\n    b.a = 5\n    b.b = 2.7182\n  }\n\n  memScoped {\n    union_by_value(cUnion)\n    union_by_pointer(cUnion.ptr)\n  }\n\n  memScoped {\n    val cStruct = alloc&lt;MyStruct&gt; {\n      a = 42\n      b = 3.14\n    }\n\n    struct_by_value(cStruct.readValue())\n    struct_by_pointer(cStruct.ptr)\n  }\n}\n</div></section><section class="chapter"  ><h2 id="mapping-struct-union-types-from-c.md-next-steps" data-toc="mapping-struct-union-types-from-c#mapping-struct-union-types-from-c.md-next-steps"  >Next steps</h2><p id="mapping-struct-union-types-from-c.md-dd152707" >Continue exploring the C language types and their representation in Kotlin/Native in the related tutorials:</p><ul class="list _ul" id="mapping-struct-union-types-from-c.md-575b4186"   ><li class="list__item" id="mapping-struct-union-types-from-c.md-2c8fcfa7" ><a href="#mapping-primitive-data-types-from-c.md" id="mapping-struct-union-types-from-c.md-f0a5c260"   >Mapping primitive data types from C</a></li><li class="list__item" id="mapping-struct-union-types-from-c.md-58486afa" ><a href="#mapping-function-pointers-from-c.md" id="mapping-struct-union-types-from-c.md-acaa520a"   >Mapping function pointers from C</a></li><li class="list__item" id="mapping-struct-union-types-from-c.md-8e430408" ><a href="#mapping-strings-from-c.md" id="mapping-struct-union-types-from-c.md-b7e6fca3"   >Mapping strings from C</a></li></ul><p id="mapping-struct-union-types-from-c.md-8c151399" >The <a href="#native-c-interop.md" id="mapping-struct-union-types-from-c.md-193f2f3"   >C Interop documentation</a> covers more advanced scenarios of the interop.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="mapping-function-pointers-from-c.md"  >Mapping function pointers from C – tutorial</h1><p id="mapping-function-pointers-from-c.md-1e5a3ae1" >This is the third post in the series. The very first tutorial is <a href="#mapping-primitive-data-types-from-c.md" id="mapping-function-pointers-from-c.md-8c90dc22"   >Mapping primitive data types from C</a>. There are also <a href="#mapping-struct-union-types-from-c.md" id="mapping-function-pointers-from-c.md-ec40b872"   >Mapping struct and union types from C</a> and <a href="#mapping-strings-from-c.md" id="mapping-function-pointers-from-c.md-e046f3cb"   >Mapping strings from C</a> tutorials.</p><p id="mapping-function-pointers-from-c.md-552dcb5b" >In this tutorial We will learn how to:</p><ul class="list _ul" id="mapping-function-pointers-from-c.md-1c282948"   ><li class="list__item" id="mapping-function-pointers-from-c.md-86e7f47c" ><a href="#mapping-function-pointers-from-c.md-pass-kotlin-function-as-c-function-pointer" id="mapping-function-pointers-from-c.md-cb932d84"   >Pass Kotlin function as C function pointer</a></li><li class="list__item" id="mapping-function-pointers-from-c.md-ddd9b876" ><a href="#mapping-function-pointers-from-c.md-use-the-c-function-pointer-from-kotlin" id="mapping-function-pointers-from-c.md-8e4fea7b"   >Use C function pointer from Kotlin</a></li></ul><section class="chapter"  ><h2 id="mapping-function-pointers-from-c.md-mapping-function-pointer-types-from-c" data-toc="mapping-function-pointers-from-c#mapping-function-pointers-from-c.md-mapping-function-pointer-types-from-c"  >Mapping function pointer types from C</h2><p id="mapping-function-pointers-from-c.md-f8fb8f2f" >The best way to understand the mapping between Kotlin and C is to try a tiny example. Declare a function that accepts a function pointer as a parameter and another function that returns a function pointer.</p><p id="mapping-function-pointers-from-c.md-eb1ac114" >Kotlin/Native comes with the <code class="code " id="mapping-function-pointers-from-c.md-4fbed813"  >cinterop</code> tool; the tool generates bindings between the C language and Kotlin. It uses a <code class="code " id="mapping-function-pointers-from-c.md-3ba66948"  >.def</code> file to specify a C library to import. More details on this are in <a href="#native-c-interop.md" id="mapping-function-pointers-from-c.md-b95fb37b"   >Interop with C Libraries</a>.</p><p id="mapping-function-pointers-from-c.md-a08bbda0" >The quickest way to try out C API mapping is to have all C declarations in the <code class="code " id="mapping-function-pointers-from-c.md-efd320fa"  >interop.def</code> file, without creating any <code class="code " id="mapping-function-pointers-from-c.md-a9501953"  >.h</code> of <code class="code " id="mapping-function-pointers-from-c.md-a8b3dd05"  >.c</code> files at all. Then place the C declarations in a <code class="code " id="mapping-function-pointers-from-c.md-e7267c79"  >.def</code> file after the special <code class="code " id="mapping-function-pointers-from-c.md-99b4d6a8"  >---</code> separator line:</p><div class="code-block" data-lang="c" id="mapping-function-pointers-from-c.md-5ec12ebd"         >\n---\n\nint myFun(int i) {\n  return i+1;\n}\n\ntypedef int  (*MyFun)(int);\n\nvoid accept_fun(MyFun f) {\n  f(42);\n}\n\nMyFun supply_fun() {\n  return myFun;\n}\n\n</div><p id="mapping-function-pointers-from-c.md-c34af3da" >The <code class="code " id="mapping-function-pointers-from-c.md-6d362ff3"  >interop.def</code> file is enough to compile and run the application or open it in an IDE. Now it is time to create project files, open the project in <a href="https://jetbrains.com/idea" id="mapping-function-pointers-from-c.md-66529876"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA</a> and run it.</p></section><section class="chapter"  ><h2 id="mapping-function-pointers-from-c.md-inspect-generated-kotlin-apis-for-a-c-library" data-toc="mapping-function-pointers-from-c#mapping-function-pointers-from-c.md-inspect-generated-kotlin-apis-for-a-c-library"  >Inspect generated Kotlin APIs for a C library</h2><p id="mapping-function-pointers-from-c.md-7fa09e89" >While it is possible to use the command line, either directly or by combining it with a script file (such as <code class="code " id="mapping-function-pointers-from-c.md-8a01619a"  >.sh</code> or <code class="code " id="mapping-function-pointers-from-c.md-2c6feb4c"  >.bat</code> file), this approach doesn\'t scale well for big projects that have hundreds of files and libraries. It is then better to use the Kotlin/Native compiler with a build system, as it helps to download and cache the Kotlin/Native compiler binaries and libraries with transitive dependencies and run the compiler and tests. Kotlin/Native can use the <a href="https://gradle.org" id="mapping-function-pointers-from-c.md-3e7fd2d0"   data-external="true" rel="noopener noreferrer" >Gradle</a> build system through the <a href="#mpp-discover-project.md-multiplatform-plugin" id="mapping-function-pointers-from-c.md-9ee18fb5"   >kotlin-multiplatform</a> plugin.</p><p id="mapping-function-pointers-from-c.md-c2c659bf" >We covered the basics of setting up an IDE compatible project with Gradle in the <a href="#native-gradle.md" id="mapping-function-pointers-from-c.md-d3738996"   >A Basic Kotlin/Native Application</a> tutorial. Please check it out if you are looking for detailed first steps and instructions on how to start a new Kotlin/Native project and open it in IntelliJ IDEA. In this tutorial, we\'ll look at the advanced C interop related usages of Kotlin/Native and <a href="#mpp-discover-project.md-multiplatform-plugin" id="mapping-function-pointers-from-c.md-2ce711fc"   >multiplatform</a> builds with Gradle.</p><p id="mapping-function-pointers-from-c.md-5fb2e904" >First, create a project folder. All the paths in this tutorial will be relative to this folder. Sometimes the missing directories will have to be created before any new files can be added.</p><p id="mapping-function-pointers-from-c.md-ddf0e98d" >Use the following <code class="code " id="mapping-function-pointers-from-c.md-8a8c7eba"  >build.gradle(.kts)</code> Gradle build file:</p><div class="tabs" id="mapping-function-pointers-from-c.md-c0f83b57" ><div class="tabs__content" data-gtm="tab" id="mapping-function-pointers-from-c.md-1cea483"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mapping-function-pointers-from-c.md-1cea483"   data-title="Groovy"      >plugins {\n    id \'org.jetbrains.kotlin.multiplatform\' version \'1.4.32\'\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n  linuxX64(\'native\') {  // on Linux\n  // macosX64(\'native\') { // on macOS\n  // mingwX64(\'native\') { //on Windows\n    compilations.main.cinterops {\n      interop \n    }\n    \n    binaries {\n      executable()\n    }\n  }\n}\n\nwrapper {\n  gradleVersion = \'6.7.1\'\n  distributionType = \'BIN\'\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mapping-function-pointers-from-c.md-a7b4c1fe"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mapping-function-pointers-from-c.md-a7b4c1fe"   data-title="Kotlin"      >plugins {\n    kotlin(&quot;multiplatform&quot;) version &quot;1.4.32&quot;\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n  linuxX64(&quot;native&quot;) { // on Linux\n  // macosX64(&quot;native&quot;) { // on macOS\n  // mingwX64(&quot;native&quot;) { // on Windows\n    val main by compilations.getting\n    val interop by main.cinterops.creating\n    \n    binaries {\n      executable()\n    }\n  }\n}\n\ntasks.wrapper {\n  gradleVersion = &quot;6.7.1&quot;\n  distributionType = Wrapper.DistributionType.BIN\n}\n</div></div></div><p id="mapping-function-pointers-from-c.md-30fbf92" >The prepared project sources can be directly downloaded from Github:</p><ul class="list _ul" id="mapping-function-pointers-from-c.md-879928d7"   ><li class="list__item" id="mapping-function-pointers-from-c.md-975ceb18" ><p>for macOS: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-macos-c.zip" id="mapping-function-pointers-from-c.md-88f0bb58"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-macos-c.zip" id="mapping-function-pointers-from-c.md-7dcd35b"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li><li class="list__item" id="mapping-function-pointers-from-c.md-a282a8c5" ><p>for Linux: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-linux-c.zip" id="mapping-function-pointers-from-c.md-957f497a"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-linux-c.zip" id="mapping-function-pointers-from-c.md-c25f4a48"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li><li class="list__item" id="mapping-function-pointers-from-c.md-91f79dc4" ><p>for Windows: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-windows-c.zip" id="mapping-function-pointers-from-c.md-861c6a01"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-windows-c.zip" id="mapping-function-pointers-from-c.md-d4c516eb"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li></ul><p id="mapping-function-pointers-from-c.md-23505143" >The project file configures the C interop as an additional step of the build. Let\'s move the <code class="code " id="mapping-function-pointers-from-c.md-64d3a48a"  >interop.def</code> file to the <code class="code " id="mapping-function-pointers-from-c.md-3c2245e7"  >src/nativeInterop/cinterop</code> directory. Gradle recommends using conventions instead of configurations, for example, the source files are expected to be in the <code class="code " id="mapping-function-pointers-from-c.md-bf1615f3"  >src/nativeMain/kotlin</code> folder. By default, all the symbols from C are imported to the <code class="code " id="mapping-function-pointers-from-c.md-4a618bd8"  >interop</code> package, you may want to import the whole package in our <code class="code " id="mapping-function-pointers-from-c.md-a81c6a1d"  >.kt</code> files. Check out the <a href="#mpp-discover-project.md-multiplatform-plugin" id="mapping-function-pointers-from-c.md-afe6af60"   >kotlin-multiplatform</a> plugin documentation to learn about all the different ways you could configure it.</p><p id="mapping-function-pointers-from-c.md-82b665c" >Let\'s create a <code class="code " id="mapping-function-pointers-from-c.md-36fcd344"  >src/nativeMain/kotlin/hello.kt</code> stub file with the following content to see how C primitive type declarations are visible from Kotlin:</p><div class="code-block" data-lang="kotlin" id="mapping-function-pointers-from-c.md-38f784db"         >import interop.*\n\nfun main() {\n  println(&quot;Hello Kotlin/Native!&quot;)\n  \n  accept_fun(https://kotlinlang.org/*fix me */)\n  val useMe = supply_fun()\n}\n</div><p id="mapping-function-pointers-from-c.md-fa300309" >Now you are ready to <a href="#native-get-started.md" id="mapping-function-pointers-from-c.md-b706ae44"   >open the project in IntelliJ IDEA</a> and to see how to fix the example project. While doing that, see how C functions are mapped into Kotlin/Native declarations.</p></section><section class="chapter"  ><h2 id="mapping-function-pointers-from-c.md-c-function-pointers-in-kotlin" data-toc="mapping-function-pointers-from-c#mapping-function-pointers-from-c.md-c-function-pointers-in-kotlin"  >C function pointers in Kotlin</h2><p id="mapping-function-pointers-from-c.md-82eab816" >With the help of IntelliJ IDEA\'s <b id="mapping-function-pointers-from-c.md-46aaa7ea" class=""  >Go to | Declaration</b> or compiler errors, see the following declarations for the C functions:</p><div class="code-block" data-lang="kotlin" id="mapping-function-pointers-from-c.md-836c7e6d"         >fun accept_fun(f: MyFun? /* = CPointer&lt;CFunction&lt;(Int) -&gt; Int&gt;&gt;? */)\nfun supply_fun(): MyFun? /* = CPointer&lt;CFunction&lt;(Int) -&gt; Int&gt;&gt;? */\n\nfun myFun(i: kotlin.Int): kotlin.Int\n\ntypealias MyFun = kotlinx.cinterop.CPointer&lt;kotlinx.cinterop.CFunction&lt;(kotlin.Int) -&gt; kotlin.Int&gt;&gt;\n\ntypealias MyFunVar = kotlinx.cinterop.CPointerVarOf&lt;lib.MyFun&gt;\n</div><p id="mapping-function-pointers-from-c.md-3452fbdc" >You see that the function\'s <code class="code " id="mapping-function-pointers-from-c.md-7390f958"  >typedef</code> from C has been turned into Kotlin <code class="code " id="mapping-function-pointers-from-c.md-7f957191"  >typealias</code>. It uses <code class="code " id="mapping-function-pointers-from-c.md-d1dc4c00"  >CPointer&lt;..&gt;</code> type to represent the pointer parameters, and <code class="code " id="mapping-function-pointers-from-c.md-6d7517e1"  >CFunction&lt;(Int)-&gt;Int&gt;</code> to represent the function signature. There is an <code class="code " id="mapping-function-pointers-from-c.md-92c225d3"  >invoke</code> operator extension function available for all <code class="code " id="mapping-function-pointers-from-c.md-75132029"  >CPointer&lt;CFunction&lt;..&gt;</code> types, so that it is possible to call it as you would call any other function in Kotlin.</p></section><section class="chapter"  ><h2 id="mapping-function-pointers-from-c.md-pass-kotlin-function-as-c-function-pointer" data-toc="mapping-function-pointers-from-c#mapping-function-pointers-from-c.md-pass-kotlin-function-as-c-function-pointer"  >Pass Kotlin function as C function pointer</h2><p id="mapping-function-pointers-from-c.md-970e2220" >It is the time to try using C functions from the Kotlin program. Call the <code class="code " id="mapping-function-pointers-from-c.md-f6afe41a"  >accept_fun</code> function and pass the C function pointer to a Kotlin lambda:</p><div class="code-block" data-lang="kotlin" id="mapping-function-pointers-from-c.md-a2f0f3ce"         >fun myFun() {\n  accept_fun(staticCFunction&lt;Int, Int&gt; { it + 1 })\n}\n\n</div><p id="mapping-function-pointers-from-c.md-9dc61555" >This call uses the <code class="code " id="mapping-function-pointers-from-c.md-c10cbf61"  >staticCFunction{..}</code> helper function from Kotlin/Native to wrap a Kotlin lambda function into a C function pointer. It only allows having unbound and non-capturing lambda functions. For example, it is not able to use a local variable from the function. You may only use globally visible declarations. Throwing exceptions from a <code class="code " id="mapping-function-pointers-from-c.md-ab56246"  >staticCFunction{..}</code> will end up in non-deterministic side-effects. It is vital to make sure that you code is not throwing any sudden exceptions from it.</p></section><section class="chapter"  ><h2 id="mapping-function-pointers-from-c.md-use-the-c-function-pointer-from-kotlin" data-toc="mapping-function-pointers-from-c#mapping-function-pointers-from-c.md-use-the-c-function-pointer-from-kotlin"  >Use the C function pointer from Kotlin</h2><p id="mapping-function-pointers-from-c.md-6f2b340d" >The next step is to call a C function pointer from a C pointer that you have from the <code class="code " id="mapping-function-pointers-from-c.md-d73c4d15"  >supply_fun()</code> call:</p><div class="code-block" data-lang="kotlin" id="mapping-function-pointers-from-c.md-4e8ccaf0"         >fun myFun2() {\n  val functionFromC = supply_fun() ?: error(&quot;No function is returned&quot;)\n  \n  functionFromC(42)\n}\n\n</div><p id="mapping-function-pointers-from-c.md-fa6874bb" >Kotlin turns the function pointer return type into a nullable <code class="code " id="mapping-function-pointers-from-c.md-8ab53393"  >CPointer&lt;CFunction&lt;..&gt;</code> object. There is the need to explicitly check for <code class="code " id="mapping-function-pointers-from-c.md-ff28fdd"  >null</code> first. The <a href="#null-safety.md" id="mapping-function-pointers-from-c.md-f638c56c"   >elvis operator</a> for that in the code above. The <code class="code " id="mapping-function-pointers-from-c.md-544ff058"  >cinterop</code> tool helps us to turn a C function pointer into an easy to call object in Kotlin. This is what we did on the last line.</p></section><section class="chapter"  ><h2 id="mapping-function-pointers-from-c.md-fix-the-code" data-toc="mapping-function-pointers-from-c#mapping-function-pointers-from-c.md-fix-the-code"  >Fix the code</h2><p id="mapping-function-pointers-from-c.md-eff33f1d" >You\'ve seen all definitions and it is time to fix and run the code. Run the <code class="code " id="mapping-function-pointers-from-c.md-fc765953"  >runDebugExecutableNative</code> Gradle task <a href="#native-get-started.md" id="mapping-function-pointers-from-c.md-c913edbc"   >in the IDE</a> or use the following command to run the code:</p><div class="code-block" data-lang="bash" id="mapping-function-pointers-from-c.md-fbbdd208"         >./gradlew runDebugExecutableNative\n</div><p id="mapping-function-pointers-from-c.md-e7190785" >The code in the <code class="code " id="mapping-function-pointers-from-c.md-f4139659"  >hello.kt</code> file may look like this:</p><div class="code-block" data-lang="kotlin" id="mapping-function-pointers-from-c.md-37360c4"         >import interop.*\nimport kotlinx.cinterop.*\n\nfun main() {\n  println(&quot;Hello Kotlin/Native!&quot;)\n \n  val cFunctionPointer = staticCFunction&lt;Int, Int&gt; { it + 1 }\n  accept_fun(cFunctionPointer)\n\n  val funFromC = supply_fun() ?: error(&quot;No function is returned&quot;)\n  funFromC(42)\n}\n</div></section><section class="chapter"  ><h2 id="mapping-function-pointers-from-c.md-next-steps" data-toc="mapping-function-pointers-from-c#mapping-function-pointers-from-c.md-next-steps"  >Next Steps</h2><p id="mapping-function-pointers-from-c.md-bfd7118d" >Continue exploring more C language types and their representation in Kotlin/Native in next tutorials:</p><ul class="list _ul" id="mapping-function-pointers-from-c.md-2c9ef2c8"   ><li class="list__item" id="mapping-function-pointers-from-c.md-e4ddc777" ><a href="#mapping-primitive-data-types-from-c.md" id="mapping-function-pointers-from-c.md-7a0dc561"   >Mapping primitive data types from C</a></li><li class="list__item" id="mapping-function-pointers-from-c.md-3b4e417f" ><a href="#mapping-struct-union-types-from-c.md" id="mapping-function-pointers-from-c.md-6ba170ce"   >Mapping struct and union types from C</a></li><li class="list__item" id="mapping-function-pointers-from-c.md-b9e8453b" ><a href="#mapping-strings-from-c.md" id="mapping-function-pointers-from-c.md-d3b3674e"   >Mapping strings from C</a></li></ul><p id="mapping-function-pointers-from-c.md-91b21c46" >The <a href="#native-c-interop.md" id="mapping-function-pointers-from-c.md-4e37f728"   >C Interop documentation</a> covers more advanced scenarios of the interop.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="mapping-strings-from-c.md"  >Mapping Strings from C – tutorial</h1><p id="mapping-strings-from-c.md-4796cbbf" >This is the last tutorial in the series. The first tutorial of the series is <a href="#mapping-primitive-data-types-from-c.md" id="mapping-strings-from-c.md-166e17f3"   >Mapping primitive data types from C</a>. There are also <a href="#mapping-struct-union-types-from-c.md" id="mapping-strings-from-c.md-8b398e12"   >Mapping struct and union types from C</a> and <a href="#mapping-function-pointers-from-c.md" id="mapping-strings-from-c.md-91f7ab56"   >Mapping function pointers from C</a> tutorials.</p><p id="mapping-strings-from-c.md-f9bba102" >In this tutorial, you\'ll see how to deal with C strings in Kotlin/Native. You will learn how to:</p><ul class="list _ul" id="mapping-strings-from-c.md-d07cbf22"   ><li class="list__item" id="mapping-strings-from-c.md-b2cf0c32" ><a href="#mapping-strings-from-c.md-pass-kotlin-string-to-c" id="mapping-strings-from-c.md-f80adacf"   >Pass a Kotlin string to C</a></li><li class="list__item" id="mapping-strings-from-c.md-376c2a3d" ><a href="#mapping-strings-from-c.md-read-c-strings-in-kotlin" id="mapping-strings-from-c.md-f6cf39b4"   >Read a C string in Kotlin</a></li><li class="list__item" id="mapping-strings-from-c.md-785c1239" ><a href="#mapping-strings-from-c.md-receive-c-string-bytes-from-kotlin" id="mapping-strings-from-c.md-d349cff2"   >Receive C string bytes into a Kotlin string</a></li></ul><section class="chapter"  ><h2 id="mapping-strings-from-c.md-working-with-c-strings" data-toc="mapping-strings-from-c#mapping-strings-from-c.md-working-with-c-strings"  >Working with C strings</h2><p id="mapping-strings-from-c.md-e0e9fdbd" >There is no dedicated type in C language for strings. A developer knows from a method signature or the documentation, whether a given <code class="code " id="mapping-strings-from-c.md-bf6f8fda"  >char *</code> means a C string in the context. Strings in the C language are null-terminated, a trailing zero character <code class="code " id="mapping-strings-from-c.md-7f91f73"  >\\0</code> is added at the end of a bytes sequence to mark a string termination. Usually, <a href="https://en.wikipedia.org/wiki/UTF-8" id="mapping-strings-from-c.md-daee7681"   data-external="true" rel="noopener noreferrer" >UTF-8 encoded strings</a> are used. The UTF-8 encoding uses variable width characters, and it is backward compatible with <a href="https://en.wikipedia.org/wiki/ASCII" id="mapping-strings-from-c.md-e32f3a5a"   data-external="true" rel="noopener noreferrer" >ASCII</a>. Kotlin/Native uses UTF-8 character encoding by default.</p><p id="mapping-strings-from-c.md-1aee02ea" >The best way to understand the mapping between C and Kotlin languages is to try it out on a small example. Create a small library headers for that. First, create a <code class="code " id="mapping-strings-from-c.md-d097a9bc"  >lib.h</code> file with the following declaration of functions that deal with the C strings:</p><div class="code-block" data-lang="c" id="mapping-strings-from-c.md-88b68dc7"         >#ifndef LIB2_H_INCLUDED\n#define LIB2_H_INCLUDED\n\nvoid pass_string(char* str);\nchar* return_string();\nint copy_string(char* str, int size);\n\n#endif\n</div><p id="mapping-strings-from-c.md-67189f79" >In the example, you see the most popular ways to pass or receive a string in the C language. Take the return of <code class="code " id="mapping-strings-from-c.md-5f2c82fa"  >return_string</code> with care. In general, it is best to make sure you use the right function to dispose the returned <code class="code " id="mapping-strings-from-c.md-3bcbf34f"  >char*</code> with the right <code class="code " id="mapping-strings-from-c.md-aa61b000"  >free(..)</code> function call.</p><p id="mapping-strings-from-c.md-e4e5bcb5" >Kotlin/Native comes with the <code class="code " id="mapping-strings-from-c.md-b3312223"  >cinterop</code> tool; the tool generates bindings between the C language and Kotlin. It uses a <code class="code " id="mapping-strings-from-c.md-ae392424"  >.def</code> file to specify a C library to import. More details on this are in the <a href="#native-c-interop.md" id="mapping-strings-from-c.md-6465369f"   >Interop with C Libraries</a> tutorial. The quickest way to try out C API mapping is to have all C declarations in the <code class="code " id="mapping-strings-from-c.md-3944bc3c"  >interop.def</code> file, without creating any <code class="code " id="mapping-strings-from-c.md-3ef2b5f0"  >.h</code> of <code class="code " id="mapping-strings-from-c.md-84201ec0"  >.c</code> files at all. Then place the C declarations in a <code class="code " id="mapping-strings-from-c.md-c0e406cb"  >interop.def</code> file after the special <code class="code " id="mapping-strings-from-c.md-244a62fb"  >---</code> separator line:</p><div class="code-block" data-lang="c" id="mapping-strings-from-c.md-7f634da7"         >headers = lib.h\n---\n\nvoid pass_string(char* str) {\n}\n\nchar* return_string() {\n  return &quot;C stirng&quot;;\n}\n\nint copy_string(char* str, int size) {\n  *str++ = \'C\';\n  *str++ = \' \';\n  *str++ = \'K\';\n  *str++ = \'/\';\n  *str++ = \'N\';\n  *str++ = 0;\n  return 0;\n}\n\n</div><p id="mapping-strings-from-c.md-88f8502c" >The <code class="code " id="mapping-strings-from-c.md-9f4fc435"  >interop.def</code> file is enough to compile and run the application or open it in an IDE. Now it is time to create project files, open the project in <a href="https://jetbrains.com/idea" id="mapping-strings-from-c.md-eabfc382"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA</a> and run it.</p></section><section class="chapter"  ><h2 id="mapping-strings-from-c.md-inspect-generated-kotlin-apis-for-a-c-library" data-toc="mapping-strings-from-c#mapping-strings-from-c.md-inspect-generated-kotlin-apis-for-a-c-library"  >Inspect generated Kotlin APIs for a C library</h2><p id="mapping-strings-from-c.md-5f0d0c95" >While it is possible to use the command line, either directly or by combining it with a script file (such as <code class="code " id="mapping-strings-from-c.md-9bfea74a"  >.sh</code> or <code class="code " id="mapping-strings-from-c.md-fa84eae"  >.bat</code> file), this approach doesn\'t scale well for big projects that have hundreds of files and libraries. It is then better to use the Kotlin/Native compiler with a build system, as it helps to download and cache the Kotlin/Native compiler binaries and libraries with transitive dependencies and run the compiler and tests. Kotlin/Native can use the <a href="https://gradle.org" id="mapping-strings-from-c.md-8bd6171e"   data-external="true" rel="noopener noreferrer" >Gradle</a> build system through the <a href="#mpp-discover-project.md-multiplatform-plugin" id="mapping-strings-from-c.md-936ef919"   >kotlin-multiplatform</a> plugin.</p><p id="mapping-strings-from-c.md-8deec40f" >We covered the basics of setting up an IDE compatible project with Gradle in the <a href="#native-gradle.md" id="mapping-strings-from-c.md-8cc82632"   >A Basic Kotlin/Native Application</a> tutorial. Please check it out if you are looking for detailed first steps and instructions on how to start a new Kotlin/Native project and open it in IntelliJ IDEA. In this tutorial, we\'ll look at the advanced C interop related usages of Kotlin/Native and <a href="#mpp-discover-project.md-multiplatform-plugin" id="mapping-strings-from-c.md-845d6984"   >multiplatform</a> builds with Gradle.</p><p id="mapping-strings-from-c.md-9427f4f6" >First, create a project folder. All the paths in this tutorial will be relative to this folder. Sometimes the missing directories will have to be created before any new files can be added.</p><p id="mapping-strings-from-c.md-88fb3570" >Use the following <code class="code " id="mapping-strings-from-c.md-5724d70e"  >build.gradle(.kts)</code> Gradle build file:</p><div class="tabs" id="mapping-strings-from-c.md-61eed7b0" ><div class="tabs__content" data-gtm="tab" id="mapping-strings-from-c.md-71c51a81"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="mapping-strings-from-c.md-71c51a81"   data-title="Groovy"      >plugins {\n    id \'org.jetbrains.kotlin.multiplatform\' version \'1.4.32\'\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n  linuxX64(\'native\') {  // on Linux\n  // macosX64(\'native\') { // on macOS\n  // mingwX64(\'native\') { //on Windows\n    compilations.main.cinterops {\n      interop \n    }\n    \n    binaries {\n      executable()\n    }\n  }\n}\n\nwrapper {\n  gradleVersion = \'6.7.1\'\n  distributionType = \'BIN\'\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="mapping-strings-from-c.md-bcf97dfe"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="mapping-strings-from-c.md-bcf97dfe"   data-title="Kotlin"      >plugins {\n    kotlin(&quot;multiplatform&quot;) version &quot;1.4.32&quot;\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n  linuxX64(&quot;native&quot;) { // on Linux\n  // macosX64(&quot;native&quot;) { // on macOS\n  // mingwX64(&quot;native&quot;) { // on Windows\n    val main by compilations.getting\n    val interop by main.cinterops.creating\n    \n    binaries {\n      executable()\n    }\n  }\n}\n\ntasks.wrapper {\n  gradleVersion = &quot;6.7.1&quot;\n  distributionType = Wrapper.DistributionType.BIN\n}\n</div></div></div><p id="mapping-strings-from-c.md-acc42fea" >The prepared project sources can be directly downloaded from Github:</p><ul class="list _ul" id="mapping-strings-from-c.md-f5019935"   ><li class="list__item" id="mapping-strings-from-c.md-aa5b55da" ><p>for macOS: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-macos-c.zip" id="mapping-strings-from-c.md-17bd0c08"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-macos-c.zip" id="mapping-strings-from-c.md-70d0e695"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li><li class="list__item" id="mapping-strings-from-c.md-a1048f91" ><p>for Linux: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-linux-c.zip" id="mapping-strings-from-c.md-a8ea79f2"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-linux-c.zip" id="mapping-strings-from-c.md-770e5150"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li><li class="list__item" id="mapping-strings-from-c.md-d81654e7" ><p>for Windows: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-windows-c.zip" id="mapping-strings-from-c.md-10ce387a"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-windows-c.zip" id="mapping-strings-from-c.md-dc9692e3"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li></ul><p id="mapping-strings-from-c.md-c44c720c" >The project file configures the C interop as an additional step of the build. Let\'s move the <code class="code " id="mapping-strings-from-c.md-44289f51"  >interop.def</code> file to the <code class="code " id="mapping-strings-from-c.md-52d463d4"  >src/nativeInterop/cinterop</code> directory. Gradle recommends using conventions instead of configurations, for example, the source files are expected to be in the <code class="code " id="mapping-strings-from-c.md-69fd0979"  >src/nativeMain/kotlin</code> folder. By default, all the symbols from C are imported to the <code class="code " id="mapping-strings-from-c.md-e45d02d0"  >interop</code> package, you may want to import the whole package in our <code class="code " id="mapping-strings-from-c.md-daa64fc1"  >.kt</code> files. Check out the <a href="#mpp-discover-project.md-multiplatform-plugin" id="mapping-strings-from-c.md-a9133d2"   >kotlin-multiplatform</a> plugin documentation to learn about all the different ways you could configure it.</p><p id="mapping-strings-from-c.md-fa840513" >Let\'s create a <code class="code " id="mapping-strings-from-c.md-c79e6142"  >src/nativeMain/kotlin/hello.kt</code> stub file with the following content to see how C primitive type declarations are visible from Kotlin:</p><div class="code-block" data-lang="kotlin" id="mapping-strings-from-c.md-7e8ab1c0"         >import interop.*\n\nfun main() {\n  println(&quot;Hello Kotlin/Native!&quot;)\n  \n  pass_string(/*fix me*/)\n  val useMe = return_string()\n  val useMe2 = copy_string(/*fix me*/)\n}\n</div><p id="mapping-strings-from-c.md-99b2548d" >Now you are ready to <a href="#native-get-started.md" id="mapping-strings-from-c.md-4db54e5c"   >open the project in IntelliJ IDEA</a> and to see how to fix the example project. While doing that, see how C primitive types are mapped into Kotlin/Native.</p></section><section class="chapter"  ><h2 id="mapping-strings-from-c.md-primitive-types-in-kotlin" data-toc="mapping-strings-from-c#mapping-strings-from-c.md-primitive-types-in-kotlin"  >Primitive types in Kotlin</h2><p id="mapping-strings-from-c.md-c39117ce" >With the help of IntelliJ IDEA\'s <b id="mapping-strings-from-c.md-41efc002" class=""  >Go to | Declaration</b> or compiler errors, you see the following generated API for the C functions:</p><div class="code-block" data-lang="kotlin" id="mapping-strings-from-c.md-e9a5440"         >fun pass_string(str: CValuesRef&lt;ByteVar /* = ByteVarOf&lt;Byte&gt; */&gt;?)\nfun return_string(): CPointer&lt;ByteVar /* = ByteVarOf&lt;Byte&gt; */&gt;?\nfun copy_string(str: CValuesRef&lt;ByteVar /* = ByteVarOf&lt;Byte&gt; */&gt;?, size: Int): Int\n</div><p id="mapping-strings-from-c.md-732e21eb" >These declarations look clear. All <code class="code " id="mapping-strings-from-c.md-26fc040b"  >char *</code> pointers are turned into <code class="code " id="mapping-strings-from-c.md-aebbef80"  >str: CValuesRef&lt;ByteVar&gt;?</code> for parameters and to <code class="code " id="mapping-strings-from-c.md-a39f7d5c"  >CPointer&lt;ByteVar&gt;?</code> in return types. Kotlin turns <code class="code " id="mapping-strings-from-c.md-bf2c35cb"  >char</code> type into <code class="code " id="mapping-strings-from-c.md-5e19e42f"  >kotlin.Byte</code> type, as it is usually an 8-bit signed value.</p><p id="mapping-strings-from-c.md-93f0481f" >In the generated Kotlin declarations, you see that <code class="code " id="mapping-strings-from-c.md-6097e41c"  >str</code> is represented as <code class="code " id="mapping-strings-from-c.md-f6b52ce"  >CValuesRef&lt;ByteVar/&gt;?</code>. The type is nullable, and you can simply pass Kotlin <code class="code " id="mapping-strings-from-c.md-7349ea07"  >null</code> as the parameter value.</p></section><section class="chapter"  ><h2 id="mapping-strings-from-c.md-pass-kotlin-string-to-c" data-toc="mapping-strings-from-c#mapping-strings-from-c.md-pass-kotlin-string-to-c"  >Pass Kotlin string to C</h2><p id="mapping-strings-from-c.md-ebb9ecfd" >Let\'s try to use the API from Kotlin. Call <code class="code " id="mapping-strings-from-c.md-39ab2f86"  >pass_string</code> first:</p><div class="code-block" data-lang="kotlin" id="mapping-strings-from-c.md-f8943247"         >fun passStringToC() {\n  val str = &quot;this is a Kotlin String&quot;\n  pass_string(str.cstr)\n}\n</div><p id="mapping-strings-from-c.md-ed8c256b" >Passing a Kotlin string to C is easy, thanks to the fact that there is <code class="code " id="mapping-strings-from-c.md-61e64ebe"  >String.cstr</code> <a href="#extensions.md-extension-properties" id="mapping-strings-from-c.md-fda6900a"   >extension property</a> in Kotlin for it. There is also <code class="code " id="mapping-strings-from-c.md-b0c15dfd"  >String.wcstr</code> for cases when you need UTF-16 wide characters.</p></section><section class="chapter"  ><h2 id="mapping-strings-from-c.md-read-c-strings-in-kotlin" data-toc="mapping-strings-from-c#mapping-strings-from-c.md-read-c-strings-in-kotlin"  >Read C Strings in Kotlin</h2><p id="mapping-strings-from-c.md-fb2c487d" >This time you\'ll take a returned <code class="code " id="mapping-strings-from-c.md-cf052544"  >char *</code> from the <code class="code " id="mapping-strings-from-c.md-86be7293"  >return_string</code> function and turn it into a Kotlin string. For that, do the following in Kotlin:</p><div class="code-block" data-lang="kotlin" id="mapping-strings-from-c.md-f37b11c0"         >fun passStringToC() {\n  val stringFromC = return_string()?.toKString()\n  \n  println(&quot;Returned from C: $stringFromC&quot;)\n}\n</div><p id="mapping-strings-from-c.md-3a21fd57" >This code uses the <code class="code " id="mapping-strings-from-c.md-35cfb737"  >toKString()</code> extension function above. Please do not miss out the <code class="code " id="mapping-strings-from-c.md-88565eb0"  >toString()</code> function. The <code class="code " id="mapping-strings-from-c.md-ee7c3220"  >toKString()</code> has two overloaded extension functions in Kotlin:</p><div class="code-block" data-lang="kotlin" id="mapping-strings-from-c.md-737cebe6"         >fun CPointer&lt;ByteVar&gt;.toKString(): String\nfun CPointer&lt;ShortVar&gt;.toKString(): String\n</div><p id="mapping-strings-from-c.md-deb25d5b" >The first extension takes a <code class="code " id="mapping-strings-from-c.md-cd671251"  >char *</code> as a UTF-8 string and turns it into a String. The second function does the same but for wide UTF-16 strings.</p></section><section class="chapter"  ><h2 id="mapping-strings-from-c.md-receive-c-string-bytes-from-kotlin" data-toc="mapping-strings-from-c#mapping-strings-from-c.md-receive-c-string-bytes-from-kotlin"  >Receive C string bytes from Kotlin</h2><p id="mapping-strings-from-c.md-ffce17bf" >This time we will ask a C function to write us a C string to a given buffer. The function is called <code class="code " id="mapping-strings-from-c.md-1b4e0100"  >copy_string</code>. It takes a pointer to the location writing characters and the allowed buffer size. The function returns something to indicate if it has succeeded or failed. Let\'s assume <code class="code " id="mapping-strings-from-c.md-d35b5a88"  >0</code> means it succeeded, and the supplied buffer was big enough:</p><div class="code-block" data-lang="kotlin" id="mapping-strings-from-c.md-84136d97"         >fun sendString() {\n  val buf = ByteArray(255)\n  buf.usePinned { pinned -&gt;\n    if (copy_string(pinned.addressOf(0), buf.size - 1) != 0) {\n      throw Error(&quot;Failed to read string from C&quot;)\n    }\n  }\n\n  val copiedStringFromC = buf.stringFromUtf8()\n  println(&quot;Message from C: $copiedStringFromC&quot;)\n}\n\n</div><p id="mapping-strings-from-c.md-a19b49ef" >First of all, you need to have a native pointer to pass to the C function. Use the <code class="code " id="mapping-strings-from-c.md-2c30bf26"  >usePinned</code> extension function to temporarily pin the native memory address of the byte array. The C function fills in the byte array with data. Use another extension function <code class="code " id="mapping-strings-from-c.md-a2ccf877"  >ByteArray.stringFromUtf8()</code> to turn the byte array into a Kotlin <code class="code " id="mapping-strings-from-c.md-e9067986"  >String</code>, assuming UTF-8 encoding.</p></section><section class="chapter"  ><h2 id="mapping-strings-from-c.md-fix-the-code" data-toc="mapping-strings-from-c#mapping-strings-from-c.md-fix-the-code"  >Fix the Code</h2><p id="mapping-strings-from-c.md-8260885" >You\'ve now seen all the definitions and it is time to fix the code. Run the <code class="code " id="mapping-strings-from-c.md-d321ed31"  >runDebugExecutableNative</code> Gradle task <a href="#native-get-started.md" id="mapping-strings-from-c.md-8ed999cc"   >in the IDE</a> or use the following command to run the code:</p><div class="code-block" data-lang="bash" id="mapping-strings-from-c.md-1b8b700a"         >./gradlew runDebugExecutableNative\n</div><p id="mapping-strings-from-c.md-81963736" >The code in the final <code class="code " id="mapping-strings-from-c.md-72a33fd9"  >hello.kt</code> file may look like this:</p><div class="code-block" data-lang="kotlin" id="mapping-strings-from-c.md-bcfdb38a"         >import interop.*\nimport kotlinx.cinterop.*\n\nfun main() {\n  println(&quot;Hello Kotlin/Native!&quot;)\n\n  val str = &quot;this is a Kotlin String&quot;\n  pass_string(str.cstr)\n\n  val useMe = return_string()?.toKString() ?: error(&quot;null pointer returned&quot;)\n  println(useMe)\n\n  val copyFromC = ByteArray(255).usePinned { pinned -&gt;\n\n    val useMe2 = copy_string(pinned.addressOf(0), pinned.get().size - 1)\n    if (useMe2 != 0) throw Error(&quot;Failed to read string from C&quot;)\n    pinned.get().stringFromUtf8()\n  }\n\n  println(copyFromC)\n}\n</div></section><section class="chapter"  ><h2 id="mapping-strings-from-c.md-next-steps" data-toc="mapping-strings-from-c#mapping-strings-from-c.md-next-steps"  >Next steps</h2><p id="mapping-strings-from-c.md-a2078814" >Continue to explore more C language types and their representation in Kotlin/Native in our other tutorials:</p><ul class="list _ul" id="mapping-strings-from-c.md-f7925339"   ><li class="list__item" id="mapping-strings-from-c.md-61f17897" ><a href="#mapping-primitive-data-types-from-c.md" id="mapping-strings-from-c.md-928dc5c2"   >Mapping primitive data types from C</a></li><li class="list__item" id="mapping-strings-from-c.md-77444944" ><a href="#mapping-struct-union-types-from-c.md" id="mapping-strings-from-c.md-721205b"   >Mapping struct and union types from C</a></li><li class="list__item" id="mapping-strings-from-c.md-d792e920" ><a href="#mapping-function-pointers-from-c.md" id="mapping-strings-from-c.md-2e6d4b22"   >Mapping function pointers from C</a></li></ul><p id="mapping-strings-from-c.md-bcf439c0" >The <a href="#native-c-interop.md" id="mapping-strings-from-c.md-55f4e510"   >C Interop documentation</a> documentation covers more advanced scenarios of the interop.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="curl.md"  >Using C Interop and libcurl for an app – tutorial</h1><p id="curl.md-7025daef" >When writing native applications, oftentimes you need to access certain functionality that is not included in the Kotlin standard library, such as making HTTP requests, reading and writing from disk, etc.</p><p id="curl.md-470e87dc" >Kotlin/Native provides you with the ability to consume standard C libraries, opening up an entire ecosystem of functionality that exists for pretty much anything you could need. In fact, Kotlin/Native already ships with a set of prebuilt <a href="#native-platform-libs.md" id="curl.md-1ec487d5"   >platform libraries</a> which provide some additional common functionality to that of the standard library.</p><p id="curl.md-9234d0b3" >In this tutorial, you\'ll see how to use some specific libraries, such as <code class="code " id="curl.md-a884f78e"  >libcurl</code>. You\'ll learn to:</p><ul class="list _ul" id="curl.md-1af9f628"   ><li class="list__item" id="curl.md-6d8daaf6" ><a href="#curl.md-generate-bindings" id="curl.md-6e6b13e0"   >Create Kotlin bindings</a></li><li class="list__item" id="curl.md-ce2a1952" ><a href="#curl.md-consume-the-kotlin-api" id="curl.md-458da2a7"   >Consume a generated Kotlin API</a></li><li class="list__item" id="curl.md-734ef953" ><a href="#curl.md-compile-and-link-the-library" id="curl.md-b8d440da"   >Link the library into the application</a></li></ul><section class="chapter"  ><h2 id="curl.md-generate-bindings" data-toc="curl#curl.md-generate-bindings"  >Generate bindings</h2><p id="curl.md-cb3befa9" >An ideal scenario for interop is to call C functions as if you were calling Kotlin functions, that is, following the same signature and conventions. This is precisely what the <code class="code " id="curl.md-86e2e816"  >cinterop</code> tool provides. It takes a C library and generates the corresponding Kotlin bindings for it, which then allows you to use the library as if it were Kotlin code.</p><p id="curl.md-ee03df2d" >In order to generate these bindings, you need to create a library definition <code class="code " id="curl.md-79ce15e"  >.def</code> file that contains some information about the headers you need to generate. In this case, you\'ll use the famous <code class="code " id="curl.md-38b5fcff"  >libcurl</code> library to make some HTTP calls, so create a file named <code class="code " id="curl.md-ea748185"  >libcurl.def</code> with the following contents:</p><div class="code-block" data-lang="c" id="curl.md-b7ac41b8"         >headers = curl/curl.h\nheaderFilter = curl/*\n\ncompilerOpts.linux = -I/usr/include -I/usr/include/x86_64-linux-gnu\nlinkerOpts.osx = -L/opt/local/lib -L/usr/local/opt/curl/lib -lcurl\nlinkerOpts.linux = -L/usr/lib/x86_64-linux-gnu -lcurl\n</div><p id="curl.md-73372c2b" >A few things are going on in this file, let\'s go through them one by one. The first entry is <code class="code " id="curl.md-370d4ee3"  >headers</code> which is the list of header files that you want to generate Kotlin stubs for. You can add multiple files to this entry, separating each one with a <code class="code " id="curl.md-3961c71c"  >\\</code> on a new line. For this tutorial, you\'ll only need <code class="code " id="curl.md-df104d53"  >curl.h</code>. The files we are referencing need to be relative to the folder where the definition file is, or be available on the system path (<code class="code " id="curl.md-e4616f7f"  >/usr/include/curl</code> ).</p><p id="curl.md-60e3f6aa" >The second line is the <code class="code " id="curl.md-7dda4543"  >headerFilter</code>. This is used to denote what exactly we want included. In C, when one file references another file with the <code class="code " id="curl.md-c4b2d40d"  >#include</code> directive, all the headers are also included. Sometimes this may not be needed, and you can use this parameter, <a href="https://en.wikipedia.org/wiki/Glob_(programming)" id="curl.md-9343cea8"   data-external="true" rel="noopener noreferrer" >using glob patterns</a>, to fine tune things. Note, that <code class="code " id="curl.md-67731a58"  >headerFilter</code> is an optional argument and mostly only used when the library you\'re using is being installed as a system library, and you do not want to fetch external dependencies (such as system <code class="code " id="curl.md-32e4c0bb"  >stdint.h</code> header) into your interop library. It may be important for both optimizing the library size and fixing potential conflicts between the system and the Kotlin/Native provided compilation environment.</p><p id="curl.md-a22a05a3" >The next lines are about providing linker and compiler options, which can vary depending on different target platforms. In this tutorial, we are defining it for macOS (the <code class="code " id="curl.md-31119043"  >.osx</code> suffix) and Linux (the <code class="code " id="curl.md-52e7fb89"  >.linux</code> suffix). Parameters without a suffix is also possible (e.g. <code class="code " id="curl.md-2d6ea198"  >linkerOpts=</code>) and will be applied to all platforms.</p><p id="curl.md-9252352f" >The convention that is followed is that each library gets its own definition file, usually named the same as the library. For more information on all the options available to <code class="code " id="curl.md-caa4d9c1"  >cinterop</code>, see <a href="#native-c-interop.md" id="curl.md-ced2a3ec"   >the Interop documentation</a></p><p id="curl.md-29550fc5" >Once you have the definition file ready, create project files and open the project in an IDE.</p><p id="curl.md-c498e988" >While it is possible to use the command line, either directly or by combining it with a script file (such as <code class="code " id="curl.md-4b3cdbe3"  >.sh</code> or <code class="code " id="curl.md-efaa36cc"  >.bat</code> file), this approach doesn\'t scale well for big projects that have hundreds of files and libraries. It is then better to use the Kotlin/Native compiler with a build system, as it helps to download and cache the Kotlin/Native compiler binaries and libraries with transitive dependencies and run the compiler and tests. Kotlin/Native can use the <a href="https://gradle.org" id="curl.md-c692a636"   data-external="true" rel="noopener noreferrer" >Gradle</a> build system through the <a href="#mpp-discover-project.md-multiplatform-plugin" id="curl.md-aff7797f"   >kotlin-multiplatform</a> plugin.</p><p id="curl.md-13b9e582" >We covered the basics of setting up an IDE compatible project with Gradle in the <a href="#native-gradle.md" id="curl.md-f57fcd2f"   >A Basic Kotlin/Native Application</a> tutorial. Please check it out if you are looking for detailed first steps and instructions on how to start a new Kotlin/Native project and open it in IntelliJ IDEA. In this tutorial, we\'ll look at the advanced C interop related usages of Kotlin/Native and <a href="#mpp-discover-project.md-multiplatform-plugin" id="curl.md-5c26ace2"   >multiplatform</a> builds with Gradle.</p><p id="curl.md-7f1839c2" >First, create a project folder. All the paths in this tutorial will be relative to this folder. Sometimes the missing directories will have to be created before any new files can be added.</p><p id="curl.md-ea18679d" >Use the following <code class="code " id="curl.md-13db833"  >build.gradle(.kts)</code> Gradle build file:</p><div class="tabs" id="curl.md-8c976c61" ><div class="tabs__content" data-gtm="tab" id="curl.md-fec34f31"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="curl.md-fec34f31"   data-title="Groovy"      >plugins {\n    id \'org.jetbrains.kotlin.multiplatform\' version \'1.4.32\'\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n  linuxX64(&quot;native&quot;) {  // on Linux\n  // macosX64(&quot;native&quot;) { // on macOS\n  // mingwX64(&quot;native&quot;) { //on Windows\n    compilations.main.cinterops {\n      interop \n    }\n    \n    binaries {\n      executable()\n    }\n  }\n}\n\nwrapper {\n  gradleVersion = &quot;6.7.1&quot;\n  distributionType = &quot;ALL&quot;\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="curl.md-910228d5"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="curl.md-910228d5"   data-title="Kotlin"      >plugins {\n    kotlin(&quot;multiplatform&quot;) version &quot;1.4.32&quot;\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n  linuxX64(&quot;native&quot;) { // on Linux\n  // macosX64(&quot;native&quot;) { // on macOS\n  // mingwX64(&quot;native&quot;) { // on Windows\n    val main by compilations.getting\n    val interop by main.cinterops.creating\n    \n    binaries {\n      executable()\n    }\n  }\n}\n\ntasks.wrapper {\n  gradleVersion = &quot;6.7.1&quot;\n  distributionType = Wrapper.DistributionType.ALL\n}\n</div></div></div><p id="curl.md-265ee593" >The prepared project sources can be directly downloaded from Github:</p><ul class="list _ul" id="curl.md-1d5a5310"   ><li class="list__item" id="curl.md-86e228b6" ><p>for macOS: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-macos-c.zip" id="curl.md-59974507"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-macos-c.zip" id="curl.md-fb0b6bae"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li><li class="list__item" id="curl.md-bb996ccf" ><p>for Linux: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-linux-c.zip" id="curl.md-454cc6ec"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-linux-c.zip" id="curl.md-28093880"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li><li class="list__item" id="curl.md-4b096a05" ><p>for Windows: <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-groovy-windows-c.zip" id="curl.md-6856ca8d"   data-external="true" rel="noopener noreferrer" >Groovy</a>, <a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-app-kotlin-windows-c.zip" id="curl.md-97014aff"   data-external="true" rel="noopener noreferrer" >Kotlin</a></p></li></ul><p id="curl.md-501fc735" >The project file configures the C interop as an additional step of the build. Let\'s move the <code class="code " id="curl.md-80d4b869"  >interop.def</code> file to the <code class="code " id="curl.md-dd71d0e3"  >src/nativeInterop/cinterop</code> directory. Gradle recommends using conventions instead of configurations, for example, the source files are expected to be in the <code class="code " id="curl.md-eaee4018"  >src/nativeMain/kotlin</code> folder. By default, all the symbols from C are imported to the <code class="code " id="curl.md-86712b9a"  >interop</code> package, you may want to import the whole package in our <code class="code " id="curl.md-a5d6dc54"  >.kt</code> files. Check out the <a href="#mpp-discover-project.md-multiplatform-plugin" id="curl.md-78006903"   >kotlin-multiplatform</a> plugin documentation to learn about all the different ways you could configure it.</p><section class="chapter"  ><h3 id="curl.md-curl-on-windows" data-toc="curl#curl.md-curl-on-windows"  >curl on Windows</h3><p id="curl.md-a139f7a" >You should have the <code class="code " id="curl.md-17549026"  >curl</code> library binaries on Windows to make the sample work. You may build <code class="code " id="curl.md-467a9d99"  >curl</code> from <a href="https://curl.haxx.se/download.html" id="curl.md-acf06e4"   data-external="true" rel="noopener noreferrer" >sources</a> on Windows (you\'ll need Visual Studio or Windows SDK Commandline tools), for more details, see the <a href="https://jonnyzzz.com/blog/2018/10/29/kn-libcurl-windows/" id="curl.md-7e96285c"   data-external="true" rel="noopener noreferrer" >related blog post</a>. Alternatively, you may also want to consider a <a href="https://www.msys2.org/" id="curl.md-ca413a4"   data-external="true" rel="noopener noreferrer" >MinGW/MSYS2</a> <code class="code " id="curl.md-a38b439e"  >curl</code> binary.</p></section></section><section class="chapter"  ><h2 id="curl.md-consume-the-kotlin-api" data-toc="curl#curl.md-consume-the-kotlin-api"  >Consume the Kotlin API</h2><p id="curl.md-eac0ba0b" >Now you have the library and Kotlin stubs and can consume them from our application. To keep things simple, in this tutorial you\'re going to convert one of the simplest <code class="code " id="curl.md-c4e2bbbd"  >libcurl</code> examples over to Kotlin.</p><p id="curl.md-fcb03c27" >The code in question is from the <a href="https://curl.haxx.se/libcurl/c/simple.html" id="curl.md-466997ef"   data-external="true" rel="noopener noreferrer" >simple</a> example (comments removed for brevity):</p><div class="code-block" data-lang="c" id="curl.md-ae917e62"         >#include &lt;stdio.h&gt;\n#include &lt;curl/curl.h&gt;\n \nint main(void)\n{\n  CURL *curl;\n  CURLcode res;\n \n  curl = curl_easy_init();\n  if(curl) {\n    curl_easy_setopt(curl, CURLOPT_URL, &quot;http://example.com&quot;);\n    curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n \n    res = curl_easy_perform(curl);\n    if(res != CURLE_OK)\n      fprintf(stderr, &quot;curl_easy_perform() failed: %s\\n&quot;,\n              curl_easy_strerror(res));\n    curl_easy_cleanup(curl);\n  }\n  return 0;\n}\n</div><p id="curl.md-32351ea5" >The first thing you\'ll need is a Kotlin file called <code class="code " id="curl.md-c5eb60bc"  >src/nativeMain/kotlin/hello.kt</code> with the <code class="code " id="curl.md-3e0ad058"  >main</code> function defined in it and then proceed to translate each line.</p><div class="code-block" data-lang="kotlin" id="curl.md-51111048"         >import interop.*\nimport kotlinx.cinterop.*\n\nfun main(args: Array&lt;String&gt;) {\n    val curl = curl_easy_init()\n    if (curl != null) {\n        curl_easy_setopt(curl, CURLOPT_URL, &quot;http://example.com&quot;)\n        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L)\n        val res = curl_easy_perform(curl)\n        if (res != CURLE_OK) {\n            println(&quot;curl_easy_perform() failed ${curl_easy_strerror(res)?.toKString()}&quot;)\n        }\n        curl_easy_cleanup(curl)\n    }\n}\n</div><p id="curl.md-3bc3b93b" >As you can see, you\'ve eliminated the explicit variable declarations in the Kotlin version, but everything else is pretty much verbatim to the C version. All the calls you\'d expect in the <code class="code " id="curl.md-aca6a1ae"  >libcurl</code> library are available in their Kotlin equivalent.</p><p id="curl.md-4ea01c00" >Note that for the purpose of this tutorial, we\'ve done a line by line literal translation. Obviously you could write this in a more Kotlin idiomatic way.</p></section><section class="chapter"  ><h2 id="curl.md-compile-and-link-the-library" data-toc="curl#curl.md-compile-and-link-the-library"  >Compile and link the library</h2><p id="curl.md-33e80b56" >The next step is to compile the application. We already covered the basics of compiling a Kotlin/Native application from the command line in the <a href="#native-command-line-compiler.md" id="curl.md-3c55d30f"   >A Basic Kotlin/Native application</a> tutorial. The only difference in this case is that the <code class="code " id="curl.md-b920fb14"  >cinterop</code> generated part is implicitly included into the build: Call the following command:</p><div class="code-block" data-lang="bash" id="curl.md-14942b37"         >./gradlew runDebugExecutableNative\n</div><p id="curl.md-7b208ed6" >If there are no errors during compilation, you should see the result of the execution of the program, which on execution should output the contents of the site <code class="code " id="curl.md-8643110"  >http://example.com</code></p><p id="curl.md-326b19c0" ><figure title="Output"><img alt="Output" title="Output" id="curl.md-a14943fc" src="images/output.png"  class="" width="700" height="418" /></figure></p><p id="curl.md-a175f10a" >The reason you\'re seeing the actual output is because the call <code class="code " id="curl.md-96cab737"  >curl_easy_perform</code> prints the result to the standard output. You could hide this using <code class="code " id="curl.md-54f48ea6"  >curl_easy_setopt</code>.</p><p id="curl.md-1d61840c" >For a more complete example of using <code class="code " id="curl.md-4420c9e5"  >libcurl</code>, the <a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/samples/libcurl" id="curl.md-c889376a"   data-external="true" rel="noopener noreferrer" >libcurl sample of the Kotlin/Native project</a> shows how to abstract the code into Kotlin classes as well as display headers. It also demonstrates how to make the steps a little easier by combining them into a shell script or Gradle build.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="native-objc-interop.md"  >Interoperability with Swift/Objective-C</h1><p id="native-objc-interop.md-b96bbbb6" >This document covers some details of Kotlin/Native interoperability with Swift/Objective-C.</p><section class="chapter"  ><h2 id="native-objc-interop.md-usage" data-toc="native-objc-interop#native-objc-interop.md-usage"  >Usage</h2><p id="native-objc-interop.md-c442b2df" >Kotlin/Native provides bidirectional interoperability with Objective-C. Objective-C frameworks and libraries can be used in Kotlin code if properly imported to the build (system frameworks are imported by default). See <a href="#mpp-configure-compilations.md-configure-interop-with-native-languages" id="native-objc-interop.md-e2707ded"   >here</a> for more details. A Swift library can be used in Kotlin code if its API is exported to Objective-C with <code class="code " id="native-objc-interop.md-3a369a4e"  >@objc</code>. Pure Swift modules are not yet supported.</p><p id="native-objc-interop.md-542c1f1e" >Kotlin modules can be used in Swift/Objective-C code if compiled into a framework (see <a href="#mpp-build-native-binaries.md-declare-binaries" id="native-objc-interop.md-acac37cc"   >here</a> ). See <a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/samples/calculator" id="native-objc-interop.md-64089ea2"   data-external="true" rel="noopener noreferrer" >calculator sample</a> for an example.</p></section><section class="chapter"  ><h2 id="native-objc-interop.md-mappings" data-toc="native-objc-interop#native-objc-interop.md-mappings"  >Mappings</h2><p id="native-objc-interop.md-a4914703" >The table below shows how Kotlin concepts are mapped to Swift/Objective-C and vice versa.</p><p id="native-objc-interop.md-a79dfc2b" >&quot;-&gt;&quot; and &quot;&lt;-&quot; indicate that mapping only goes one way.</p><div class="table-wrapper" ><table class=" wide" id="native-objc-interop.md-ea76d913"  ><thead><tr class="ijRowHead" id="native-objc-interop.md-79f6506a" ><th id="native-objc-interop.md-2620b13a"    >Kotlin</th><th id="native-objc-interop.md-30abfbdd"    >Swift</th><th id="native-objc-interop.md-9d28a119"    >Objective-C</th><th id="native-objc-interop.md-874da385"    >Notes</th></tr></thead><tbody ><tr class="" id="native-objc-interop.md-5e09f555" ><td id="native-objc-interop.md-5f9cdffe"    ><code class="code " id="native-objc-interop.md-8dd6e210"  >class</code></td><td id="native-objc-interop.md-d0d7a6c2"    ><code class="code " id="native-objc-interop.md-77a478ab"  >class</code></td><td id="native-objc-interop.md-8ad21871"    ><code class="code " id="native-objc-interop.md-2306afb2"  >@interface</code></td><td id="native-objc-interop.md-4386f80c"    ><a href="#native-objc-interop.md-name-translation" id="native-objc-interop.md-32ba7908"   >note</a></td></tr><tr class="" id="native-objc-interop.md-b1cd00b2" ><td id="native-objc-interop.md-7d22e157"    ><code class="code " id="native-objc-interop.md-2fbc5ea1"  >interface</code></td><td id="native-objc-interop.md-a41131de"    ><code class="code " id="native-objc-interop.md-c3935182"  >protocol</code></td><td id="native-objc-interop.md-68c8d606"    ><code class="code " id="native-objc-interop.md-cb3fc14d"  >@protocol</code></td><td id="native-objc-interop.md-498c686b"    ></td></tr><tr class="" id="native-objc-interop.md-8aea2443" ><td id="native-objc-interop.md-e256573c"    ><code class="code " id="native-objc-interop.md-b315cbda"  >constructor</code>/ <code class="code " id="native-objc-interop.md-63bc161b"  >create</code></td><td id="native-objc-interop.md-e2ed5786"    >Initializer</td><td id="native-objc-interop.md-8f2c63eb"    >Initializer</td><td id="native-objc-interop.md-2f05f7c6"    ><a href="#native-objc-interop.md-initializers" id="native-objc-interop.md-3fafd52a"   >note</a></td></tr><tr class="" id="native-objc-interop.md-78e028e2" ><td id="native-objc-interop.md-552527c5"    >Property</td><td id="native-objc-interop.md-95abec36"    >Property</td><td id="native-objc-interop.md-7b81f38d"    >Property</td><td id="native-objc-interop.md-108d1807"    ><a href="#native-objc-interop.md-top-level-functions-and-properties" id="native-objc-interop.md-4bdba2b9"   >note</a> <a href="#native-objc-interop.md-setters" id="native-objc-interop.md-4e2a692a"   >note</a></td></tr><tr class="" id="native-objc-interop.md-6ac65012" ><td id="native-objc-interop.md-f7586712"    >Method</td><td id="native-objc-interop.md-8047c4bd"    >Method</td><td id="native-objc-interop.md-eb4531f2"    >Method</td><td id="native-objc-interop.md-a42765c5"    ><a href="#native-objc-interop.md-top-level-functions-and-properties" id="native-objc-interop.md-a089cc21"   >note</a> <a href="#native-objc-interop.md-method-names-translation" id="native-objc-interop.md-c21a01ce"   >note</a></td></tr><tr class="" id="native-objc-interop.md-ce0aaae1" ><td id="native-objc-interop.md-213e2996"    ><code class="code " id="native-objc-interop.md-b087282a"  >suspend</code> -&gt;</td><td id="native-objc-interop.md-8f6da234"    ><code class="code " id="native-objc-interop.md-ab8d1e3f"  >completionHandler:</code></td><td id="native-objc-interop.md-cb579e38"    ></td><td id="native-objc-interop.md-7e035708"    ><a href="#native-objc-interop.md-errors-and-exceptions" id="native-objc-interop.md-4f19530a"   >note</a></td></tr><tr class="" id="native-objc-interop.md-74b6dc83" ><td id="native-objc-interop.md-8da5424b"    ><code class="code " id="native-objc-interop.md-14c16cd6"  >@Throws fun</code></td><td id="native-objc-interop.md-4859bafd"    ><code class="code " id="native-objc-interop.md-2843abc1"  >throws</code></td><td id="native-objc-interop.md-2d83bcbc"    ><code class="code " id="native-objc-interop.md-6ebdf480"  >error:(NSError**)error</code></td><td id="native-objc-interop.md-100a1754"    ><a href="#native-objc-interop.md-errors-and-exceptions" id="native-objc-interop.md-689d3a61"   >note</a></td></tr><tr class="" id="native-objc-interop.md-fe556b6c" ><td id="native-objc-interop.md-1b950396"    >Extension</td><td id="native-objc-interop.md-a45b252f"    >Extension</td><td id="native-objc-interop.md-a0ff8911"    >Category member</td><td id="native-objc-interop.md-ae24b80f"    ><a href="#native-objc-interop.md-extensions-and-category-members" id="native-objc-interop.md-34153763"   >note</a></td></tr><tr class="" id="native-objc-interop.md-d838db13" ><td id="native-objc-interop.md-a2257ffc"    ><code class="code " id="native-objc-interop.md-ad1c5756"  >companion</code> member &lt;-</td><td id="native-objc-interop.md-de5cef3e"    >Class method or property</td><td id="native-objc-interop.md-7393b6a5"    >Class method or property</td><td id="native-objc-interop.md-e60d233b"    ></td></tr><tr class="" id="native-objc-interop.md-4221d650" ><td id="native-objc-interop.md-fee0581f"    ><code class="code " id="native-objc-interop.md-5caa2b5"  >null</code></td><td id="native-objc-interop.md-cf661a8c"    ><code class="code " id="native-objc-interop.md-cc11a0d"  >nil</code></td><td id="native-objc-interop.md-18c1d75"    ><code class="code " id="native-objc-interop.md-8fbeb97e"  >nil</code></td><td id="native-objc-interop.md-e3348041"    ></td></tr><tr class="" id="native-objc-interop.md-365db584" ><td id="native-objc-interop.md-521d335"    ><code class="code " id="native-objc-interop.md-23ea672b"  >Singleton</code></td><td id="native-objc-interop.md-55d2b7a"    ><code class="code " id="native-objc-interop.md-c48939b6"  >Singleton()</code></td><td id="native-objc-interop.md-8f286d36"    ><code class="code " id="native-objc-interop.md-6869b09d"  >[Singleton singleton]</code></td><td id="native-objc-interop.md-7a6fe996"    ><a href="#native-objc-interop.md-kotlin-singletons" id="native-objc-interop.md-9aabe412"   >note</a></td></tr><tr class="" id="native-objc-interop.md-499c57bb" ><td id="native-objc-interop.md-9179a26b"    >Primitive type</td><td id="native-objc-interop.md-dd575ae6"    >Primitive type / <code class="code " id="native-objc-interop.md-a41f4f1b"  >NSNumber</code></td><td id="native-objc-interop.md-fa300551"    ></td><td id="native-objc-interop.md-3ed12c2a"    ><a href="#native-objc-interop.md-nsnumber" id="native-objc-interop.md-4ddd66a3"   >note</a></td></tr><tr class="" id="native-objc-interop.md-1fb10948" ><td id="native-objc-interop.md-cea705db"    ><code class="code " id="native-objc-interop.md-7395ebed"  >Unit</code> return type</td><td id="native-objc-interop.md-86e7a22"    ><code class="code " id="native-objc-interop.md-47d362a"  >Void</code></td><td id="native-objc-interop.md-7fe2faeb"    ><code class="code " id="native-objc-interop.md-3bd3ae0f"  >void</code></td><td id="native-objc-interop.md-f7750745"    ></td></tr><tr class="" id="native-objc-interop.md-446f9dd4" ><td id="native-objc-interop.md-7edafd52"    ><code class="code " id="native-objc-interop.md-1385a52f"  >String</code></td><td id="native-objc-interop.md-f649f634"    ><code class="code " id="native-objc-interop.md-3cbbce76"  >String</code></td><td id="native-objc-interop.md-12b47fa"    ><code class="code " id="native-objc-interop.md-a6ac9e7b"  >NSString</code></td><td id="native-objc-interop.md-b44dfe4d"    ></td></tr><tr class="" id="native-objc-interop.md-c683344b" ><td id="native-objc-interop.md-f743bf2"    ><code class="code " id="native-objc-interop.md-67ddb631"  >String</code></td><td id="native-objc-interop.md-e78b1a58"    ><code class="code " id="native-objc-interop.md-bea4bb5"  >NSMutableString</code></td><td id="native-objc-interop.md-bb9d11ca"    ><code class="code " id="native-objc-interop.md-e7695063"  >NSMutableString</code></td><td id="native-objc-interop.md-b87c8bff"    ><a href="#native-objc-interop.md-nsmutablestring" id="native-objc-interop.md-e64c51a5"   >note</a></td></tr><tr class="" id="native-objc-interop.md-17fcc20" ><td id="native-objc-interop.md-f0f259fa"    ><code class="code " id="native-objc-interop.md-a78f227c"  >List</code></td><td id="native-objc-interop.md-1b4f1640"    ><code class="code " id="native-objc-interop.md-fec93f7a"  >Array</code></td><td id="native-objc-interop.md-ac4a15fc"    ><code class="code " id="native-objc-interop.md-37d2b893"  >NSArray</code></td><td id="native-objc-interop.md-368ed5bf"    ></td></tr><tr class="" id="native-objc-interop.md-b0314356" ><td id="native-objc-interop.md-40e4fb11"    ><code class="code " id="native-objc-interop.md-34711dc3"  >MutableList</code></td><td id="native-objc-interop.md-6b43b96"    ><code class="code " id="native-objc-interop.md-17dc6080"  >NSMutableArray</code></td><td id="native-objc-interop.md-7d816542"    ><code class="code " id="native-objc-interop.md-af0ddeb8"  >NSMutableArray</code></td><td id="native-objc-interop.md-5d44f3d8"    ></td></tr><tr class="" id="native-objc-interop.md-bf990a2" ><td id="native-objc-interop.md-7fe12004"    ><code class="code " id="native-objc-interop.md-cf75a103"  >Set</code></td><td id="native-objc-interop.md-aaa16ed9"    ><code class="code " id="native-objc-interop.md-32c3e321"  >Set</code></td><td id="native-objc-interop.md-47030c75"    ><code class="code " id="native-objc-interop.md-203b060c"  >NSSet</code></td><td id="native-objc-interop.md-61a8bb14"    ></td></tr><tr class="" id="native-objc-interop.md-3b391b26" ><td id="native-objc-interop.md-fd5a67e4"    ><code class="code " id="native-objc-interop.md-4b4a4946"  >MutableSet</code></td><td id="native-objc-interop.md-d2a5994f"    ><code class="code " id="native-objc-interop.md-dd539afa"  >NSMutableSet</code></td><td id="native-objc-interop.md-e4557697"    ><code class="code " id="native-objc-interop.md-c45c0da5"  >NSMutableSet</code></td><td id="native-objc-interop.md-e1b62efc"    ><a href="#native-objc-interop.md-collections" id="native-objc-interop.md-daa73096"   >note</a></td></tr><tr class="" id="native-objc-interop.md-675d96c7" ><td id="native-objc-interop.md-f0c30e4d"    ><code class="code " id="native-objc-interop.md-c411fae2"  >Map</code></td><td id="native-objc-interop.md-2e25977a"    ><code class="code " id="native-objc-interop.md-8696ffef"  >Dictionary</code></td><td id="native-objc-interop.md-2b97a68b"    ><code class="code " id="native-objc-interop.md-cfa7effc"  >NSDictionary</code></td><td id="native-objc-interop.md-c8c3bd"    ></td></tr><tr class="" id="native-objc-interop.md-9146b245" ><td id="native-objc-interop.md-fdff6508"    ><code class="code " id="native-objc-interop.md-8bc8daa1"  >MutableMap</code></td><td id="native-objc-interop.md-4e2e4a65"    ><code class="code " id="native-objc-interop.md-e1295a88"  >NSMutableDictionary</code></td><td id="native-objc-interop.md-e47e1e3b"    ><code class="code " id="native-objc-interop.md-263073e4"  >NSMutableDictionary</code></td><td id="native-objc-interop.md-79107af8"    ><a href="#native-objc-interop.md-collections" id="native-objc-interop.md-cb6e2dfc"   >note</a></td></tr><tr class="" id="native-objc-interop.md-9721321f" ><td id="native-objc-interop.md-6801c73d"    >Function type</td><td id="native-objc-interop.md-493efe52"    >Function type</td><td id="native-objc-interop.md-65b502b2"    >Block pointer type</td><td id="native-objc-interop.md-8a2cf926"    ><a href="#native-objc-interop.md-function-types" id="native-objc-interop.md-5871ce68"   >note</a></td></tr><tr class="" id="native-objc-interop.md-e4820eb9" ><td id="native-objc-interop.md-ad9f280d"    >Inline classes</td><td id="native-objc-interop.md-faff8c6c"    >Unsupported</td><td id="native-objc-interop.md-2125678d"    >Unsupported</td><td id="native-objc-interop.md-96f09d2e"    ><a href="#native-objc-interop.md-unsupported" id="native-objc-interop.md-7c76c380"   >note</a></td></tr></tbody ></table ></div><section class="chapter"  ><h3 id="native-objc-interop.md-name-translation" data-toc="native-objc-interop#native-objc-interop.md-name-translation"  >Name translation</h3><p id="native-objc-interop.md-885b5d2f" >Objective-C classes are imported into Kotlin with their original names. Protocols are imported as interfaces with <code class="code " id="native-objc-interop.md-20f609a0"  >Protocol</code> name suffix, i.e. <code class="code " id="native-objc-interop.md-8ef2f805"  >@protocol Foo</code> -&gt; <code class="code " id="native-objc-interop.md-de68b59c"  >interface FooProtocol</code>. These classes and interfaces are placed into a package <a href="#native-objc-interop.md-usage" id="native-objc-interop.md-f17f4f7f"   >specified in build configuration</a> (<code class="code " id="native-objc-interop.md-a722db0a"  >platform.*</code> packages for preconfigured system frameworks).</p><p id="native-objc-interop.md-c2b0c6b8" >The names of Kotlin classes and interfaces are prefixed when imported to Objective-C. The prefix is derived from the framework name.</p></section><section class="chapter"  ><h3 id="native-objc-interop.md-initializers" data-toc="native-objc-interop#native-objc-interop.md-initializers"  >Initializers</h3><p id="native-objc-interop.md-92094b49" >Swift/Objective-C initializers are imported to Kotlin as constructors and factory methods named <code class="code " id="native-objc-interop.md-fb994c31"  >create</code>. The latter happens with initializers declared in the Objective-C category or as a Swift extension, because Kotlin has no concept of extension constructors.</p><p id="native-objc-interop.md-b92a0e88" >Kotlin constructors are imported as initializers to Swift/Objective-C.</p></section><section class="chapter"  ><h3 id="native-objc-interop.md-setters" data-toc="native-objc-interop#native-objc-interop.md-setters"  >Setters</h3><p id="native-objc-interop.md-d1426ef7" >Writeable Objective-C properties overriding read-only properties of the superclass are represented as <code class="code " id="native-objc-interop.md-d19c3f53"  >setFoo()</code> method for the property <code class="code " id="native-objc-interop.md-b47b7e19"  >foo</code>. Same goes for a protocol\'s read-only properties that are implemented as mutable.</p></section><section class="chapter"  ><h3 id="native-objc-interop.md-top-level-functions-and-properties" data-toc="native-objc-interop#native-objc-interop.md-top-level-functions-and-properties"  >Top-level functions and properties</h3><p id="native-objc-interop.md-d2e0aa53" >Top-level Kotlin functions and properties are accessible as members of special classes. Each Kotlin file is translated into such a class. E.g.</p><div class="code-block" data-lang="kotlin" id="native-objc-interop.md-f6eb3702"         >// MyLibraryUtils.kt\npackage my.library\n\nfun foo() {}\n</div><p id="native-objc-interop.md-81cd028" >can be called from Swift like</p><div class="code-block" data-lang="swift" id="native-objc-interop.md-d34bae77"         >MyLibraryUtilsKt.foo()\n</div></section><section class="chapter"  ><h3 id="native-objc-interop.md-method-names-translation" data-toc="native-objc-interop#native-objc-interop.md-method-names-translation"  >Method names translation</h3><p id="native-objc-interop.md-711d1d81" >Generally Swift argument labels and Objective-C selector pieces are mapped to Kotlin parameter names. Anyway these two concepts have different semantics, so sometimes Swift/Objective-C methods can be imported with a clashing Kotlin signature. In this case the clashing methods can be called from Kotlin using named arguments, e.g.:</p><div class="code-block" data-lang="swift" id="native-objc-interop.md-ca22b93b"         >[player moveTo:LEFT byMeters:17]\n[player moveTo:UP byInches:42]\n</div><p id="native-objc-interop.md-b08aeddf" >in Kotlin it would be:</p><div class="code-block" data-lang="kotlin" id="native-objc-interop.md-76774b1"         >player.moveTo(LEFT, byMeters = 17)\nplayer.moveTo(UP, byInches = 42)\n</div></section><section class="chapter"  ><h3 id="native-objc-interop.md-errors-and-exceptions" data-toc="native-objc-interop#native-objc-interop.md-errors-and-exceptions"  >Errors and exceptions</h3><p id="native-objc-interop.md-bdab47aa" >Kotlin has no concept of checked exceptions, all Kotlin exceptions are unchecked. Swift has only checked errors. So if Swift or Objective-C code calls a Kotlin method which throws an exception to be handled, then the Kotlin method should be marked with a <code class="code " id="native-objc-interop.md-f4897cf6"  >@Throws</code> annotation specifying a list of &quot;expected&quot; exception classes.</p><p id="native-objc-interop.md-92cec47c" >When compiling to Objective-C/Swift framework, non- <code class="code " id="native-objc-interop.md-c22f2d42"  >suspend</code> functions having or inheriting <code class="code " id="native-objc-interop.md-1586d6ce"  >@Throws</code> annotation are represented as <code class="code " id="native-objc-interop.md-104dc893"  >NSError*</code> -producing methods in Objective-C and as <code class="code " id="native-objc-interop.md-9ed42672"  >throws</code> methods in Swift. Representations for <code class="code " id="native-objc-interop.md-cd14ebf2"  >suspend</code> functions always have <code class="code " id="native-objc-interop.md-bac31f76"  >NSError*</code>/ <code class="code " id="native-objc-interop.md-2d4300cf"  >Error</code> parameter in completion handler.</p><p id="native-objc-interop.md-50939b68" >When Kotlin function called from Swift/Objective-C code throws an exception which is an instance of one of the <code class="code " id="native-objc-interop.md-996bdd47"  >@Throws</code> -specified classes or their subclasses, it is propagated as <code class="code " id="native-objc-interop.md-9055d318"  >NSError</code>. Other Kotlin exceptions reaching Swift/Objective-C are considered unhandled and cause program termination.</p><p id="native-objc-interop.md-c23f2956" ><code class="code " id="native-objc-interop.md-56d71740"  >suspend</code> functions without <code class="code " id="native-objc-interop.md-2e47cb3b"  >@Throws</code> propagate only <code class="code " id="native-objc-interop.md-a16c38bf"  >CancellationException</code> as <code class="code " id="native-objc-interop.md-4c775a9c"  >NSError</code>. Non- <code class="code " id="native-objc-interop.md-f6e49d54"  >suspend</code> functions without <code class="code " id="native-objc-interop.md-6183b92e"  >@Throws</code> don\'t propagate Kotlin exceptions at all.</p><p id="native-objc-interop.md-b648cbeb" >Note that the opposite reversed translation is not implemented yet: Swift/Objective-C error-throwing methods aren\'t imported to Kotlin as exception-throwing.</p></section><section class="chapter"  ><h3 id="native-objc-interop.md-extensions-and-category-members" data-toc="native-objc-interop#native-objc-interop.md-extensions-and-category-members"  >Extensions and category members</h3><p id="native-objc-interop.md-cd40ec" >Members of Objective-C categories and Swift extensions are imported to Kotlin as extensions. That\'s why these declarations can\'t be overridden in Kotlin. And the extension initializers aren\'t available as Kotlin constructors.</p><p id="native-objc-interop.md-a9195402" >Kotlin extensions to &quot;regular&quot; Kotlin classes are imported to Swift and Objective-C as extensions and category members respectively. Kotlin extensions to other types are treated as <a href="#native-objc-interop.md-top-level-functions-and-properties" id="native-objc-interop.md-4f01cb1d"   >top-level declarations</a> with an additional receiver parameter. These types include:</p><ul class="list _ul" id="native-objc-interop.md-c02165b5"   ><li class="list__item" id="native-objc-interop.md-778cf8c0" ><p>Kotlin <code class="code " id="native-objc-interop.md-c223cc6a"  >String</code> type</p></li><li class="list__item" id="native-objc-interop.md-e3a5ec14" ><p>Kotlin collection types and subtypes</p></li><li class="list__item" id="native-objc-interop.md-42545437" ><p>Kotlin <code class="code " id="native-objc-interop.md-733bdc53"  >interface</code> types</p></li><li class="list__item" id="native-objc-interop.md-c2348276" ><p>Kotlin primitive types</p></li><li class="list__item" id="native-objc-interop.md-a3afe7e1" ><p>Kotlin <code class="code " id="native-objc-interop.md-83cd042a"  >inline</code> classes</p></li><li class="list__item" id="native-objc-interop.md-f40e1674" ><p>Kotlin <code class="code " id="native-objc-interop.md-7367d91a"  >Any</code> type</p></li><li class="list__item" id="native-objc-interop.md-5d30ec0a" ><p>Kotlin function types and subtypes</p></li><li class="list__item" id="native-objc-interop.md-95d720cf" ><p>Objective-C classes and protocols</p></li></ul></section><section class="chapter"  ><h3 id="native-objc-interop.md-kotlin-singletons" data-toc="native-objc-interop#native-objc-interop.md-kotlin-singletons"  >Kotlin singletons</h3><p id="native-objc-interop.md-eca20e9d" >Kotlin singleton (made with an <code class="code " id="native-objc-interop.md-3b1d16dc"  >object</code> declaration, including <code class="code " id="native-objc-interop.md-32a3a400"  >companion object</code>) is imported to Swift/Objective-C as a class with a single instance. The instance is available through the factory method, i.e. as <code class="code " id="native-objc-interop.md-98294e13"  >[MySingleton mySingleton]</code> in Objective-C and <code class="code " id="native-objc-interop.md-aefe0244"  >MySingleton()</code> in Swift.</p></section><section class="chapter"  ><h3 id="native-objc-interop.md-nsnumber" data-toc="native-objc-interop#native-objc-interop.md-nsnumber"  >NSNumber</h3><p id="native-objc-interop.md-8b222696" >Kotlin primitive type boxes are mapped to special Swift/Objective-C classes. For example, <code class="code " id="native-objc-interop.md-c66d6493"  >kotlin.Int</code> box is represented as <code class="code " id="native-objc-interop.md-f2dee0ed"  >KotlinInt</code> class instance in Swift (or <code class="code " id="native-objc-interop.md-abbd5f70"  >${prefix}Int</code> instance in Objective-C, where <code class="code " id="native-objc-interop.md-dfd4207a"  >prefix</code> is the framework names prefix). These classes are derived from <code class="code " id="native-objc-interop.md-71821aa8"  >NSNumber</code>, so the instances are proper <code class="code " id="native-objc-interop.md-8aa3a0a"  >NSNumber</code> s supporting all corresponding operations.</p><p id="native-objc-interop.md-5620b48e" ><code class="code " id="native-objc-interop.md-1bd0df57"  >NSNumber</code> type is not automatically translated to Kotlin primitive types when used as a Swift/Objective-C parameter type or return value. The reason is that <code class="code " id="native-objc-interop.md-6ccbf12a"  >NSNumber</code> type doesn\'t provide enough information about a wrapped primitive value type, i.e. <code class="code " id="native-objc-interop.md-8bffa6ac"  >NSNumber</code> is statically not known to be a e.g. <code class="code " id="native-objc-interop.md-f78c4984"  >Byte</code>, <code class="code " id="native-objc-interop.md-c8d6261a"  >Boolean</code>, or <code class="code " id="native-objc-interop.md-f992e23e"  >Double</code>. So Kotlin primitive values should be cast to/from <code class="code " id="native-objc-interop.md-b392ebcf"  >NSNumber</code> manually (see <a href="#native-objc-interop.md-casting-between-mapped-types" id="native-objc-interop.md-512eb606"   >below</a> ).</p></section><section class="chapter"  ><h3 id="native-objc-interop.md-nsmutablestring" data-toc="native-objc-interop#native-objc-interop.md-nsmutablestring"  >NSMutableString</h3><p id="native-objc-interop.md-42f1996" ><code class="code " id="native-objc-interop.md-a02fa7ba"  >NSMutableString</code> Objective-C class is not available from Kotlin. All instances of <code class="code " id="native-objc-interop.md-f37fdf8d"  >NSMutableString</code> are copied when passed to Kotlin.</p></section><section class="chapter"  ><h3 id="native-objc-interop.md-collections" data-toc="native-objc-interop#native-objc-interop.md-collections"  >Collections</h3><p id="native-objc-interop.md-c4a0929" >Kotlin collections are converted to Swift/Objective-C collections as described in the table above. Swift/Objective-C collections are mapped to Kotlin in the same way, except for <code class="code " id="native-objc-interop.md-dbd91287"  >NSMutableSet</code> and <code class="code " id="native-objc-interop.md-118bed7"  >NSMutableDictionary</code>. <code class="code " id="native-objc-interop.md-3318b4c3"  >NSMutableSet</code> isn\'t converted to a Kotlin <code class="code " id="native-objc-interop.md-ee2f5635"  >MutableSet</code>. To pass an object for Kotlin <code class="code " id="native-objc-interop.md-1c950bd4"  >MutableSet</code>, you can create this kind of Kotlin collection explicitly by either creating it in Kotlin with e.g. <code class="code " id="native-objc-interop.md-da0f7324"  >mutableSetOf()</code>, or using the <code class="code " id="native-objc-interop.md-29dadcf3"  >KotlinMutableSet</code> class in Swift (or <code class="code " id="native-objc-interop.md-65a5babe"  >${prefix}MutableSet</code> in Objective-C, where <code class="code " id="native-objc-interop.md-8ab3114"  >prefix</code> is the framework names prefix). The same holds for <code class="code " id="native-objc-interop.md-631e24bd"  >MutableMap</code>.</p></section><section class="chapter"  ><h3 id="native-objc-interop.md-function-types" data-toc="native-objc-interop#native-objc-interop.md-function-types"  >Function types</h3><p id="native-objc-interop.md-3ab5a46b" >Kotlin function-typed objects (e.g. lambdas) are converted to Swift functions / Objective-C blocks. However there is a difference in how types of parameters and return values are mapped when translating a function and a function type. In the latter case primitive types are mapped to their boxed representation. Kotlin <code class="code " id="native-objc-interop.md-817331f5"  >Unit</code> return value is represented as a corresponding <code class="code " id="native-objc-interop.md-e77a5152"  >Unit</code> singleton in Swift/Objective-C. The value of this singleton can be retrieved in the same way as it is for any other Kotlin <code class="code " id="native-objc-interop.md-14783dbd"  >object</code> (see singletons in the table above). To sum the things up:</p><div class="code-block" data-lang="kotlin" id="native-objc-interop.md-c9dbeca7"         >fun foo(block: (Int) -&gt; Unit) { ... }\n</div><p id="native-objc-interop.md-744ec93b" >would be represented in Swift as</p><div class="code-block" data-lang="swift" id="native-objc-interop.md-9f453a14"         >func foo(block: (KotlinInt) -&gt; KotlinUnit)\n</div><p id="native-objc-interop.md-25f8af0" >and can be called like</p><div class="code-block" data-lang="kotlin" id="native-objc-interop.md-490ca8f3"         >foo {\n    bar($0 as! Int32)\n    return KotlinUnit()\n}\n</div></section><section class="chapter"  ><h3 id="native-objc-interop.md-generics" data-toc="native-objc-interop#native-objc-interop.md-generics"  >Generics</h3><p id="native-objc-interop.md-ee909f7" >Objective-C supports &quot;lightweight generics&quot; defined on classes, with a relatively limited feature set. Swift can import generics defined on classes to help provide additional type information to the compiler.</p><p id="native-objc-interop.md-a14c3e9a" >Generic feature support for Objective-C and Swift differ from Kotlin, so the translation will inevitably lose some information, but the features supported retain meaningful information.</p><section class="chapter"  ><h4 id="native-objc-interop.md-limitations" data-toc="native-objc-interop#native-objc-interop.md-limitations"  >Limitations</h4><p id="native-objc-interop.md-fe39ebcd" >Objective-C generics do not support all features of either Kotlin or Swift, so there will be some information lost in the translation.</p><p id="native-objc-interop.md-96d40154" >Generics can only be defined on classes, not on interfaces (protocols in Objective-C and Swift) or functions.</p></section><section class="chapter"  ><h4 id="native-objc-interop.md-nullability" data-toc="native-objc-interop#native-objc-interop.md-nullability"  >Nullability</h4><p id="native-objc-interop.md-b630aca8" >Kotlin and Swift both define nullability as part of the type specification, while Objective-C defines nullability on methods and properties of a type. As such, the following:</p><div class="code-block" data-lang="kotlin" id="native-objc-interop.md-ec616f63"         >class Sample&lt;T&gt;() {\n  fun myVal(): T\n}\n</div><p id="native-objc-interop.md-7f3d8da2" >will (logically) look like this:</p><div class="code-block" data-lang="swift" id="native-objc-interop.md-79013fa8"         >class Sample&lt;T&gt;() {\n  fun myVal(): T?\n}\n</div><p id="native-objc-interop.md-4fc6e93d" >In order to support a potentially nullable type, the Objective-C header needs to define <code class="code " id="native-objc-interop.md-200a45f4"  >myVal</code> with a nullable return value.</p><p id="native-objc-interop.md-58c92610" >To mitigate this, when defining your generic classes, if the generic type should <em id="native-objc-interop.md-ffabeb0c" class=""  >never</em> be null, provide a non-null type constraint:</p><div class="code-block" data-lang="kotlin" id="native-objc-interop.md-f9f7f8a4"         >class Sample&lt;T : Any&gt;() {\n  fun myVal(): T\n}\n</div><p id="native-objc-interop.md-e229c8db" >That will force the Objective-C header to mark <code class="code " id="native-objc-interop.md-8be0e0ba"  >myVal</code> as non-null.</p></section><section class="chapter"  ><h4 id="native-objc-interop.md-variance" data-toc="native-objc-interop#native-objc-interop.md-variance"  >Variance</h4><p id="native-objc-interop.md-2ee4b57d" >Objective-C allows generics to be declared covariant or contravariant. Swift has no support for variance. Generic classes coming from Objective-C can be force-cast as needed.</p><div class="code-block" data-lang="kotlin" id="native-objc-interop.md-8cc19ba0"         >data class SomeData(val num: Int = 42) : BaseData()\nclass GenVarOut&lt;out T : Any&gt;(val arg: T)\n</div><div class="code-block" data-lang="swift" id="native-objc-interop.md-cf5a6bf2"         >let variOut = GenVarOut&lt;SomeData&gt;(arg: sd)\nlet variOutAny : GenVarOut&lt;BaseData&gt; = variOut as! GenVarOut&lt;BaseData&gt;\n</div></section><section class="chapter"  ><h4 id="native-objc-interop.md-constraints" data-toc="native-objc-interop#native-objc-interop.md-constraints"  >Constraints</h4><p id="native-objc-interop.md-139ff439" >In Kotlin you can provide upper bounds for a generic type. Objective-C also supports this, but that support is unavailable in more complex cases, and is currently not supported in the Kotlin - Objective-C interop. The exception here being a non-null upper bound will make Objective-C methods/properties non-null.</p></section><section class="chapter"  ><h4 id="native-objc-interop.md-to-disable" data-toc="native-objc-interop#native-objc-interop.md-to-disable"  >To disable</h4><p id="native-objc-interop.md-ffd51fc1" >To have the framework header written without generics, add the flag to the compiler config:</p><div class="code-block" data-lang="kotlin" id="native-objc-interop.md-4fbabadf"         >binaries.framework {\n     freeCompilerArgs += &quot;-Xno-objc-generics&quot;\n}\n</div></section></section></section><section class="chapter"  ><h2 id="native-objc-interop.md-casting-between-mapped-types" data-toc="native-objc-interop#native-objc-interop.md-casting-between-mapped-types"  >Casting between mapped types</h2><p id="native-objc-interop.md-4c708613" >When writing Kotlin code, an object may need to be converted from a Kotlin type to the equivalent Swift/Objective-C type (or vice versa). In this case a plain old Kotlin cast can be used, e.g.</p><div class="code-block" data-lang="kotlin" id="native-objc-interop.md-6ab63491"         >val nsArray = listOf(1, 2, 3) as NSArray\nval string = nsString as String\nval nsNumber = 42 as NSNumber\n</div></section><section class="chapter"  ><h2 id="native-objc-interop.md-subclassing" data-toc="native-objc-interop#native-objc-interop.md-subclassing"  >Subclassing</h2><section class="chapter"  ><h3 id="native-objc-interop.md-subclassing-kotlin-classes-and-interfaces-from-swift-objective-c" data-toc="native-objc-interop#native-objc-interop.md-subclassing-kotlin-classes-and-interfaces-from-swift-objective-c"  >Subclassing Kotlin classes and interfaces from Swift/Objective-C</h3><p id="native-objc-interop.md-f2cf30e0" >Kotlin classes and interfaces can be subclassed by Swift/Objective-C classes and protocols.</p></section><section class="chapter"  ><h3 id="native-objc-interop.md-subclassing-swift-objective-c-classes-and-protocols-from-kotlin" data-toc="native-objc-interop#native-objc-interop.md-subclassing-swift-objective-c-classes-and-protocols-from-kotlin"  >Subclassing Swift/Objective-C classes and protocols from Kotlin</h3><p id="native-objc-interop.md-a4fa1252" >Swift/Objective-C classes and protocols can be subclassed with a Kotlin <code class="code " id="native-objc-interop.md-58daf787"  >final</code> class. Non- <code class="code " id="native-objc-interop.md-d24c744b"  >final</code> Kotlin classes inheriting Swift/Objective-C types aren\'t supported yet, so it is not possible to declare a complex class hierarchy inheriting Swift/Objective-C types.</p><p id="native-objc-interop.md-3a07cbe5" >Normal methods can be overridden using the <code class="code " id="native-objc-interop.md-a827276b"  >override</code> Kotlin keyword. In this case the overriding method must have the same parameter names as the overridden one.</p><p id="native-objc-interop.md-255b13cd" >Sometimes it is required to override initializers, e.g. when subclassing <code class="code " id="native-objc-interop.md-c9de299f"  >UIViewController</code>. Initializers imported as Kotlin constructors can be overridden by Kotlin constructors marked with the <code class="code " id="native-objc-interop.md-6b1bd0d5"  >@OverrideInit</code> annotation:</p><div class="code-block" data-lang="swift" id="native-objc-interop.md-98c71d39"         >class ViewController : UIViewController {\n    @OverrideInit constructor(coder: NSCoder) : super(coder)\n\n    ...\n}\n</div><p id="native-objc-interop.md-fbd8f381" >The overriding constructor must have the same parameter names and types as the overridden one.</p><p id="native-objc-interop.md-799b643e" >To override different methods with clashing Kotlin signatures, you can add a <code class="code " id="native-objc-interop.md-fe1d2c64"  >@Suppress(&quot;CONFLICTING_OVERLOADS&quot;)</code> annotation to the class.</p><p id="native-objc-interop.md-d07294be" >By default the Kotlin/Native compiler doesn\'t allow calling a non-designated Objective-C initializer as a <code class="code " id="native-objc-interop.md-6997226b"  >super(...)</code> constructor. This behaviour can be inconvenient if the designated initializers aren\'t marked properly in the Objective-C library. Adding a <code class="code " id="native-objc-interop.md-ba93a23f"  >disableDesignatedInitializerChecks = true</code> to the <code class="code " id="native-objc-interop.md-8b526da5"  >.def</code> file for this library would disable these compiler checks.</p></section></section><section class="chapter"  ><h2 id="native-objc-interop.md-c-features" data-toc="native-objc-interop#native-objc-interop.md-c-features"  >C features</h2><p id="native-objc-interop.md-f2d6541" >See <a href="#native-c-interop.md" id="native-objc-interop.md-1148cb72"   >Interoperability with C</a> for an example case where the library uses some plain C features, such as unsafe pointers, structs, and so on.</p></section><section class="chapter"  ><h2 id="native-objc-interop.md-unsupported" data-toc="native-objc-interop#native-objc-interop.md-unsupported"  >Unsupported</h2><p id="native-objc-interop.md-25a09ae0" >Some features of Kotlin programming language are not yet mapped into respective features of Objective-C or Swift. Currently, following features are not properly exposed in generated framework headers:</p><ul class="list _ul" id="native-objc-interop.md-b661c14a"   ><li class="list__item" id="native-objc-interop.md-d0de8849" ><p>inline classes (arguments are mapped as either underlying primitive type or <code class="code " id="native-objc-interop.md-de6160cc"  >id</code>)</p></li><li class="list__item" id="native-objc-interop.md-bd0da3cc" ><p>custom classes implementing standard Kotlin collection interfaces (<code class="code " id="native-objc-interop.md-f25a1fc0"  >List</code>, <code class="code " id="native-objc-interop.md-f849063b"  >Map</code>, <code class="code " id="native-objc-interop.md-8b86f7ac"  >Set</code>) and other special classes</p></li><li class="list__item" id="native-objc-interop.md-54ecd43b" ><p>Kotlin subclasses of Objective-C classes</p></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="native-cocoapods.md"  >CocoaPods integration</h1><p id="native-cocoapods.md-7177e1dc" >Kotlin/Native provides integration with the <a href="https://cocoapods.org/" id="native-cocoapods.md-71930e24"   data-external="true" rel="noopener noreferrer" >CocoaPods dependency manager</a>. You can add dependencies on Pod libraries as well as use a multiplatform project with native targets as a CocoaPods dependency (Kotlin Pod).</p><p id="native-cocoapods.md-72eb1b2a" >You can manage Pod dependencies directly in IntelliJ IDEA and enjoy all the additional features such as code highlighting and completion. You can build the whole Kotlin project with Gradle and not ever have to switch to Xcode.</p><p id="native-cocoapods.md-65c7790e" >Use Xcode only when you need to write Swift/Objective-C code or run your application on a simulator or device. To work correctly with Xcode, you should <a href="#native-cocoapods.md-update-podfile-for-xcode" id="native-cocoapods.md-8cac0c6d"   >update your Podfile</a>.</p><p id="native-cocoapods.md-d3376bc0" >Depending on your project and purposes, you can add dependencies between <a href="#native-cocoapods.md-add-dependencies-on-pod-libraries" id="native-cocoapods.md-c03bee0b"   >a Kotlin project and a Pod library</a> as well as <a href="#native-cocoapods.md-use-a-kotlin-gradle-project-as-a-cocoapods-dependency" id="native-cocoapods.md-fa1860d8"   >a Kotlin Pod and an Xcode project</a>.</p><aside data-type="note" class="prompt" data-title="" id="native-cocoapods.md-7a04f524" ><p id="native-cocoapods.md-e75642a7" >You can also add dependencies between a Kotlin Pod and multiple Xcode projects. However, in this case you need to add a dependency by calling <code class="code " id="native-cocoapods.md-49d1e8b3"  >pod install</code> manually for each Xcode project. In other cases, it\'s done automatically.</p></aside><section class="chapter"  ><h2 id="native-cocoapods.md-install-the-cocoapods-dependency-manager-and-plugin" data-toc="native-cocoapods#native-cocoapods.md-install-the-cocoapods-dependency-manager-and-plugin"  >Install the CocoaPods dependency manager and plugin</h2><ol class="list _decimal" id="native-cocoapods.md-1dc3eee6"   ><li class="list__item" id="native-cocoapods.md-c84e0661" ><p id="native-cocoapods.md-5e851a1d" >Install the <a href="https://cocoapods.org/" id="native-cocoapods.md-959d4cbb"   data-external="true" rel="noopener noreferrer" >CocoaPods dependency manager</a>.</p><div class="code-block" data-lang="ruby" id="native-cocoapods.md-7fb994f1"         >$ sudo gem install cocoapods\n</div></li><li class="list__item" id="native-cocoapods.md-f715e1c2" ><p id="native-cocoapods.md-a69810e7" >Install the <a href="https://github.com/square/cocoapods-generate" id="native-cocoapods.md-840b5609"   data-external="true" rel="noopener noreferrer" ><code class="code " id="native-cocoapods.md-335a44e7"  >cocoapods-generate</code></a> plugin.</p><div class="code-block" data-lang="ruby" id="native-cocoapods.md-6383406f"         >$ sudo gem install cocoapods-generate\n</div></li><li class="list__item" id="native-cocoapods.md-6e4601ad" ><p id="native-cocoapods.md-f97c0a95" >In <code class="code " id="native-cocoapods.md-1be15445"  >build.gradle.kts</code> (or <code class="code " id="native-cocoapods.md-ddafd7e7"  >build.gradle</code>) of your IDEA project, apply the CocoaPods plugin as well as the Kotlin Multiplatform plugin.</p><div class="code-block" data-lang="kotlin" id="native-cocoapods.md-27b9d785"         >plugins {\n   kotlin(&quot;multiplatform&quot;) version &quot;1.4.32&quot;\n   kotlin(&quot;native.cocoapods&quot;) version &quot;1.4.32&quot;\n}\n</div></li><li class="list__item" id="native-cocoapods.md-73a75585" ><p id="native-cocoapods.md-8e3f86ad" >Configure <code class="code " id="native-cocoapods.md-f70c2bbd"  >summary</code>, <code class="code " id="native-cocoapods.md-a08ba0cb"  >homepage</code>, and <code class="code " id="native-cocoapods.md-3cc45dff"  >frameworkName</code> of the <code class="code " id="native-cocoapods.md-8d81cba6"  >Podspec</code> file in the <code class="code " id="native-cocoapods.md-f5283478"  >cocoapods</code> block. <br/> <code class="code " id="native-cocoapods.md-bbdae2a8"  >version</code> is a version of the Gradle project.</p><div class="code-block" data-lang="kotlin" id="native-cocoapods.md-eb5dcdd6"         >plugins {\n    kotlin(&quot;multiplatform&quot;) version &quot;1.4.32&quot;\n    kotlin(&quot;native.cocoapods&quot;) version &quot;1.4.32&quot;\n}\n\n// CocoaPods requires the podspec to have a version.\nversion = &quot;1.0&quot;\n\nkotlin {\n    cocoapods {\n        // Configure fields required by CocoaPods.\n        summary = &quot;Some description for a Kotlin/Native module&quot;\n        homepage = &quot;Link to a Kotlin/Native module homepage&quot;\n\n        // You can change the name of the produced framework.\n        // By default, it is the name of the Gradle project.\n        frameworkName = &quot;my_framework&quot;\n    }\n}\n</div></li><li class="list__item" id="native-cocoapods.md-122510b9" ><p id="native-cocoapods.md-593f1b" >Re-import the project.</p></li><li class="list__item" id="native-cocoapods.md-11d04967" ><p id="native-cocoapods.md-639bc170" >Generate the <a href="https://docs.gradle.org/current/userguide/gradle_wrapper.html" id="native-cocoapods.md-232e24a3"   data-external="true" rel="noopener noreferrer" >Gradle wrapper</a> to avoid compatibility issues during an Xcode build.</p></li></ol><p id="native-cocoapods.md-cbeb55cd" >When applied, the CocoaPods plugin does the following:</p><ul class="list _ul" id="native-cocoapods.md-3555f66c"   ><li class="list__item" id="native-cocoapods.md-da8e729" ><p>Adds both <code class="code " id="native-cocoapods.md-31cf676d"  >debug</code> and <code class="code " id="native-cocoapods.md-19aa25ea"  >release</code> frameworks as output binaries for all macOS, iOS, tvOS, and watchOS targets.</p></li><li class="list__item" id="native-cocoapods.md-7a5a4b76" ><p>Creates a <code class="code " id="native-cocoapods.md-fd9fd914"  >podspec</code> task which generates a <a href="https://guides.cocoapods.org/syntax/podspec.html" id="native-cocoapods.md-40164579"   data-external="true" rel="noopener noreferrer" >Podspec</a> file for the project.</p></li></ul><p id="native-cocoapods.md-20155338" >The <code class="code " id="native-cocoapods.md-bb3f6ef3"  >Podspec</code> file includes a path to an output framework and script phases that automate building this framework during the build process of an Xcode project.</p></section><section class="chapter"  ><h2 id="native-cocoapods.md-add-dependencies-on-pod-libraries" data-toc="native-cocoapods#native-cocoapods.md-add-dependencies-on-pod-libraries"  >Add dependencies on Pod libraries</h2><p id="native-cocoapods.md-df7ee3bc" >To add dependencies between a Kotlin project and a Pod library, you should <a href="#native-cocoapods.md-install-the-cocoapods-dependency-manager-and-plugin" id="native-cocoapods.md-3c3bff7d"   >complete the initial configuration</a>. This allows you to add dependencies on the following types of Pod libraries:</p><ul class="list _ul" id="native-cocoapods.md-467d618a"   ><li class="list__item" id="native-cocoapods.md-6163d2be" ><a href="#native-cocoapods.md-add-a-dependency-on-a-pod-library-from-the-cocoapods-repository" id="native-cocoapods.md-91256458"   >A Pod library from the CocoaPods repository</a></li><li class="list__item" id="native-cocoapods.md-40b8c8a4" ><a href="#native-cocoapods.md-add-a-dependency-on-a-pod-library-stored-locally" id="native-cocoapods.md-64719c2a"   >A Pod library stored locally</a></li><li class="list__item" id="native-cocoapods.md-7ce86683" ><a href="#native-cocoapods.md-add-a-dependency-on-a-pod-library-from-the-git-repository" id="native-cocoapods.md-490045ab"   >A Pod library from a Git repository</a></li><li class="list__item" id="native-cocoapods.md-c3246af5" ><a href="#native-cocoapods.md-add-a-dependency-on-a-pod-library-from-an-archive" id="native-cocoapods.md-b5f51e7e"   >A Pod library from an archive</a></li><li class="list__item" id="native-cocoapods.md-53edbdd4" ><a href="#native-cocoapods.md-add-a-dependency-on-a-pod-library-from-a-custom-podspec-repository" id="native-cocoapods.md-7ee73cec"   >A Pod library from a custom Podspec repository</a></li><li class="list__item" id="native-cocoapods.md-cbd93072" ><a href="#native-cocoapods.md-add-a-dependency-on-a-pod-library-with-custom-cinterop-options" id="native-cocoapods.md-d5fd07ae"   >A Pod library with custom cinterop options</a></li><li class="list__item" id="native-cocoapods.md-4e907106" ><a href="#native-cocoapods.md-add-a-dependency-on-a-static-pod-library" id="native-cocoapods.md-59eeccb2"   >A static Pod library</a></li></ul><p id="native-cocoapods.md-1cec9ae" >A Kotlin project requires the <code class="code " id="native-cocoapods.md-7164642d"  >pod()</code> function call in <code class="code " id="native-cocoapods.md-b9364603"  >build.gradle.kts</code> (<code class="code " id="native-cocoapods.md-2c5e8867"  >build.gradle</code>) for adding a Pod dependency. Each dependency requires its own separate function call. You can specify the parameters for the dependency in the configuration block of the function.</p><p id="native-cocoapods.md-7c1723fc" >When you add a new dependency and re-import the project in IntelliJ IDEA, the new dependency will be added automatically. No additional steps are required.</p><p id="native-cocoapods.md-52b981bd" >To use your Kotlin project with Xcode, you should <a href="#native-cocoapods.md-update-podfile-for-xcode" id="native-cocoapods.md-c6591434"   >make changes in your project Podfile</a>.</p><section class="chapter"  ><h3 id="native-cocoapods.md-add-a-dependency-on-a-pod-library-from-the-cocoapods-repository" data-toc="native-cocoapods#native-cocoapods.md-add-a-dependency-on-a-pod-library-from-the-cocoapods-repository"  >Add a dependency on a Pod library from the CocoaPods repository</h3><p id="native-cocoapods.md-54b1faf6" >You can add dependencies on a Pod library from the CocoaPods repository with <code class="code " id="native-cocoapods.md-65394801"  >pod()</code> to <code class="code " id="native-cocoapods.md-6f92fa92"  >build.gradle.kts</code> (<code class="code " id="native-cocoapods.md-deda110b"  >build.gradle</code>) of your project:</p><ol class="list _decimal" id="native-cocoapods.md-5ee2abc9"   ><li class="list__item" id="native-cocoapods.md-419a9dcb" ><p id="native-cocoapods.md-525a3c04" >Specify the name of a Pod library in the <code class="code " id="native-cocoapods.md-a837b93b"  >pod()</code> function. In the configuration block you can specify the version of the library using the <code class="code " id="native-cocoapods.md-ef869b87"  >version</code> parameter. To use the latest version of the library, you can just omit this parameter all-together.</p><aside data-type="note" class="prompt" data-title="" id="native-cocoapods.md-df19ccc5" ><p id="native-cocoapods.md-fb17b3ee" >You can add dependencies on subspecs.</p></aside></li><li class="list__item" id="native-cocoapods.md-45433173" ><p id="native-cocoapods.md-e32a8fe9" >Specify the minimum deployment target version for the Pod library.</p><aside data-type="note" class="prompt" data-title="" id="native-cocoapods.md-2e77397b" ><p id="native-cocoapods.md-5bcd2a4c" >If you don\'t specify the minimum deployment target version and a dependency Pod requires a higher deployment target, you will get an error.</p></aside><div class="code-block" data-lang="kotlin" id="native-cocoapods.md-d538a394"         >kotlin {\n    ios()\n\n    cocoapods {\n        ios.deploymentTarget = &quot;13.5&quot;\n\n        summary = &quot;CocoaPods test library&quot;\n        homepage = &quot;https://github.com/JetBrains/kotlin&quot;\n\n        pod(&quot;AFNetworking&quot;) {\n            version = &quot;~&gt; 4.0.1&quot;\n        }\n    }\n}\n</div></li><li class="list__item" id="native-cocoapods.md-9690ddb1" ><p id="native-cocoapods.md-b5a44bc1" >Re-import the project.</p></li></ol><p id="native-cocoapods.md-a1428336" >To use these dependencies from the Kotlin code, import the packages <code class="code " id="native-cocoapods.md-367796f"  >cocoapods.&lt;library-name&gt;</code>.</p><div class="code-block" data-lang="kotlin" id="native-cocoapods.md-5ace8621"         >import cocoapods.AFNetworking.*\n</div><p id="native-cocoapods.md-e78f311a" >You can find a sample project <a href="https://github.com/Kotlin/kotlin-with-cocoapods-sample" id="native-cocoapods.md-919d5b75"   data-external="true" rel="noopener noreferrer" >here</a>.</p></section><section class="chapter"  ><h3 id="native-cocoapods.md-add-a-dependency-on-a-pod-library-stored-locally" data-toc="native-cocoapods#native-cocoapods.md-add-a-dependency-on-a-pod-library-stored-locally"  >Add a dependency on a Pod library stored locally</h3><p id="native-cocoapods.md-34dcffd3" >You can add a dependency on a Pod library stored locally with <code class="code " id="native-cocoapods.md-f51837b1"  >pod()</code> to <code class="code " id="native-cocoapods.md-7afde15d"  >build.gradle.kts</code> (<code class="code " id="native-cocoapods.md-ccfd5a58"  >build.gradle</code>) of your project:</p><ol class="list _decimal" id="native-cocoapods.md-c3e7b5c6"   ><li class="list__item" id="native-cocoapods.md-f99225fb" ><p id="native-cocoapods.md-7e024995" >Specify the name of a Pod library in the <code class="code " id="native-cocoapods.md-b6ab4cc8"  >pod()</code> function. In the configuration block specify the path to the local Pod library: use the <code class="code " id="native-cocoapods.md-e9e9cc11"  >path()</code> function in the <code class="code " id="native-cocoapods.md-7e30ecfa"  >source</code> parameter value.</p><aside data-type="note" class="prompt" data-title="" id="native-cocoapods.md-17cbc129" ><p id="native-cocoapods.md-5fb65d9a" >You can add local dependencies on subspecs as well. The <code class="code " id="native-cocoapods.md-aa559901"  >cocoapods</code> block can include dependencies to Pods stored locally and Pods from the CocoaPods repository at the same time.</p></aside></li><li class="list__item" id="native-cocoapods.md-a8e8f373" ><p id="native-cocoapods.md-382d3c" >Specify the minimum deployment target version for the Pod library.</p><aside data-type="note" class="prompt" data-title="" id="native-cocoapods.md-2dbbff24" ><p id="native-cocoapods.md-1e17046c" >If you don\'t specify the minimum deployment target version and a dependency Pod requires a higher deployment target, you will get an error.</p></aside><div class="code-block" data-lang="kotlin" id="native-cocoapods.md-8e4d00b2"         >kotlin {\n    ios()\n\n    cocoapods {\n        summary = &quot;CocoaPods test library&quot;\n        homepage = &quot;https://github.com/JetBrains/kotlin&quot;\n\n        ios.deploymentTarget = &quot;13.5&quot;\n\n        pod(&quot;pod_dependency&quot;) {\n            version = &quot;1.0&quot;\n            source = path(project.file(&quot;../pod_dependency/pod_dependency.podspec&quot;))\n        }\n        pod(&quot;subspec_dependency/Core&quot;) {\n            version = &quot;1.0&quot;\n            source = path(project.file(&quot;../subspec_dependency/subspec_dependency.podspec&quot;))\n        }\n        pod(&quot;AFNetworking&quot;) {\n            version = &quot;~&gt; 4.0.1&quot;\n        }\n    }\n}\n</div><aside data-type="note" class="prompt" data-title="" id="native-cocoapods.md-ddc97656" ><p id="native-cocoapods.md-f4c5a12" >You can also specify the version of the library using <code class="code " id="native-cocoapods.md-1592ff2"  >version</code> parameter in the configuration block. To use the latest version of the library, omit the parameter.</p></aside></li><li class="list__item" id="native-cocoapods.md-3a93f979" ><p id="native-cocoapods.md-dca3443" >Re-import the project.</p></li></ol><p id="native-cocoapods.md-d426557a" >To use these dependencies from the Kotlin code, import the packages <code class="code " id="native-cocoapods.md-fec7df84"  >cocoapods.&lt;library-name&gt;</code>.</p><div class="code-block" data-lang="kotlin" id="native-cocoapods.md-5208f835"         >import cocoapods.pod_dependency.*\nimport cocoapods.subspec_dependency.*\nimport cocoapods.AFNetworking.*\n</div><p id="native-cocoapods.md-11b6b43b" >You can find a sample project <a href="https://github.com/Kotlin/kotlin-with-cocoapods-sample" id="native-cocoapods.md-ffa38c2d"   data-external="true" rel="noopener noreferrer" >here</a>.</p></section><section class="chapter"  ><h3 id="native-cocoapods.md-add-a-dependency-on-a-pod-library-from-the-git-repository" data-toc="native-cocoapods#native-cocoapods.md-add-a-dependency-on-a-pod-library-from-the-git-repository"  >Add a dependency on a Pod library from the Git repository</h3><p id="native-cocoapods.md-4760662a" >You can add dependencies on a Pod library from a custom Git repository with <code class="code " id="native-cocoapods.md-a6683473"  >pod()</code> to <code class="code " id="native-cocoapods.md-96adbd42"  >build.gradle.kts</code> (<code class="code " id="native-cocoapods.md-85dc34f"  >build.gradle</code>) of your project:</p><ol class="list _decimal" id="native-cocoapods.md-fcde1b00"   ><li class="list__item" id="native-cocoapods.md-4fde6d91" ><p id="native-cocoapods.md-9feb6d1" >Specify the name of a Pod library in the <code class="code " id="native-cocoapods.md-269cb629"  >pod()</code> function. In the configuration block specify the path to the git repository: use the <code class="code " id="native-cocoapods.md-7b0a9a81"  >git()</code> function in the <code class="code " id="native-cocoapods.md-2187ccb8"  >source</code> parameter value.</p><p id="native-cocoapods.md-172115b6" >Additionally, you can specify the following parameters in the block after <code class="code " id="native-cocoapods.md-5cb44b3d"  >git()</code>:</p><ul class="list _ul" id="native-cocoapods.md-d1fa5807"   ><li class="list__item" id="native-cocoapods.md-bda67209" ><p><code class="code " id="native-cocoapods.md-89bb3338"  >commit</code> – to use a specific commit from the repository</p></li><li class="list__item" id="native-cocoapods.md-6668869a" ><p><code class="code " id="native-cocoapods.md-bcc24392"  >tag</code> – to use a specific tag from the repository</p></li><li class="list__item" id="native-cocoapods.md-9c982116" ><p><code class="code " id="native-cocoapods.md-901cf27e"  >branch</code> – to use a specific branch from the repository</p></li></ul><p id="native-cocoapods.md-67edcd71" >The <code class="code " id="native-cocoapods.md-5bb87c7"  >git()</code> function prioritizes passed parameters in the following order: <code class="code " id="native-cocoapods.md-3e15c093"  >commit</code>, <code class="code " id="native-cocoapods.md-91f4d830"  >tag</code>, <code class="code " id="native-cocoapods.md-f714ee9"  >branch</code>. If you don\'t specify a parameter, the Kotlin plugin uses <code class="code " id="native-cocoapods.md-d736a43c"  >HEAD</code> from the <code class="code " id="native-cocoapods.md-9dbea14c"  >master</code> branch.</p><aside data-type="note" class="prompt" data-title="" id="native-cocoapods.md-f24c785e" ><p id="native-cocoapods.md-fe7ea62f" >You can combine <code class="code " id="native-cocoapods.md-adcf67f2"  >branch</code>, <code class="code " id="native-cocoapods.md-3d9cc05a"  >commit</code>, and <code class="code " id="native-cocoapods.md-7d435ea1"  >tag</code> parameters to get the specific version of a Pod.</p></aside></li><li class="list__item" id="native-cocoapods.md-a85509d0" ><p id="native-cocoapods.md-4a79022" >Specify the minimum deployment target version for the Pod library.</p><aside data-type="note" class="prompt" data-title="" id="native-cocoapods.md-7a6e7891" ><p id="native-cocoapods.md-afcdd47f" >If you don\'t specify the minimum deployment target version and a dependency Pod requires a higher deployment target, you will get an error.</p></aside><div class="code-block" data-lang="kotlin" id="native-cocoapods.md-e08f9c4a"         >kotlin {\n    ios()\n\n    cocoapods {\n        summary = &quot;CocoaPods test library&quot;\n        homepage = &quot;https://github.com/JetBrains/kotlin&quot;\n\n        ios.deploymentTarget = &quot;13.5&quot;\n\n        pod(&quot;AFNetworking&quot;) {\n            source = git(&quot;https://github.com/AFNetworking/AFNetworking&quot;) {\n                tag = &quot;4.0.0&quot;\n            }\n        }\n\n        pod(&quot;JSONModel&quot;) {\n            source = git(&quot;https://github.com/jsonmodel/jsonmodel.git&quot;) {\n                branch = &quot;key-mapper-class&quot;\n            }\n        }\n\n        pod(&quot;CocoaLumberjack&quot;) {\n            source = git(&quot;https://github.com/CocoaLumberjack/CocoaLumberjack.git&quot;) {\n                commit = &quot;3e7f595e3a459c39b917aacf9856cd2a48c4dbf3&quot;\n            }\n        }\n    }\n}\n</div></li><li class="list__item" id="native-cocoapods.md-ebe60f3c" ><p id="native-cocoapods.md-e955573c" >Re-import the project.</p></li></ol><aside data-type="note" class="prompt" data-title="" id="native-cocoapods.md-dc2f2a13" ><p id="native-cocoapods.md-6fa9b1df" >To work correctly with Xcode, you should specify the path to the Podspec in your Podfile. For example:</p><div class="code-block" data-lang="ruby" id="native-cocoapods.md-5335402c"         >target \'ios-app\' do\n    # ... other pod depedencies ...\n   pod \'JSONModel\', :path =&gt; \'../cocoapods/kotlin-with-cocoapods-sample/kotlin-library/build/cocoapods/externalSources/git/JSONModel\'\nend\n</div></aside><p id="native-cocoapods.md-ac51080b" >To use these dependencies from the Kotlin code, import the packages <code class="code " id="native-cocoapods.md-af3d64ed"  >cocoapods.&lt;library-name&gt;</code>.</p><div class="code-block" data-lang="kotlin" id="native-cocoapods.md-92211fac"         >import cocoapods.AFNetworking.*\nimport cocoapods.JSONModel.*\nimport cocoapods.CocoaLumberjack.*\n</div><p id="native-cocoapods.md-3cda89de" >You can find a sample project <a href="https://github.com/Kotlin/kotlin-with-cocoapods-sample" id="native-cocoapods.md-a5e88c4c"   data-external="true" rel="noopener noreferrer" >here</a>.</p></section><section class="chapter"  ><h3 id="native-cocoapods.md-add-a-dependency-on-a-pod-library-from-an-archive" data-toc="native-cocoapods#native-cocoapods.md-add-a-dependency-on-a-pod-library-from-an-archive"  >Add a dependency on a Pod library from an archive</h3><p id="native-cocoapods.md-32f67936" >You can add dependencies on a Pod library from <code class="code " id="native-cocoapods.md-885e7fa"  >zip</code>, <code class="code " id="native-cocoapods.md-5ea63704"  >tar</code>, or <code class="code " id="native-cocoapods.md-5bd33159"  >jar</code> archive with <code class="code " id="native-cocoapods.md-e8cd7118"  >pod()</code> to <code class="code " id="native-cocoapods.md-a3e7d7d4"  >build.gradle.kts</code> (<code class="code " id="native-cocoapods.md-4a28616"  >build.gradle</code>) of your project:</p><ol class="list _decimal" id="native-cocoapods.md-ff95fa51"   ><li class="list__item" id="native-cocoapods.md-6b98265c" ><p id="native-cocoapods.md-2807e9d9" >Specify the name of a Pod library in the <code class="code " id="native-cocoapods.md-b255359a"  >pod()</code> function. In the configuration block specify the path to the archive: use the <code class="code " id="native-cocoapods.md-4221710a"  >url()</code> function with an arbitrary HTTP address in the <code class="code " id="native-cocoapods.md-8c6c7254"  >source</code> parameter value.</p><p id="native-cocoapods.md-2cbc8253" >Additionally, you can specify the boolean <code class="code " id="native-cocoapods.md-e2d710a5"  >flatten</code> parameter as a second argument for the <code class="code " id="native-cocoapods.md-47c71246"  >url()</code> function. This parameter indicates that all the Pod files are located in the root directory of the archive.</p></li><li class="list__item" id="native-cocoapods.md-8945f7fa" ><p id="native-cocoapods.md-e754d887" >Specify the minimum deployment target version for the Pod library.</p><aside data-type="note" class="prompt" data-title="" id="native-cocoapods.md-a393fa1" ><p id="native-cocoapods.md-b39cc924" >If you don\'t specify the minimum deployment target version and a dependency Pod requires a higher deployment target, you will get an error.</p></aside><div class="code-block" data-lang="kotlin" id="native-cocoapods.md-ae3bec59"         >kotlin {\n    ios()\n\n    cocoapods {\n        summary = &quot;CocoaPods test library&quot;\n        homepage = &quot;https://github.com/JetBrains/kotlin&quot;\n\n        ios.deploymentTarget = &quot;13.5&quot;\n\n        pod(&quot;pod_dependency&quot;) {\n            source = url(&quot;https://github.com/Kotlin/kotlin-with-cocoapods-sample/raw/cocoapods-zip/cocoapodSourcesZip.zip&quot;, flatten = true)\n        }\n    }\n}\n</div></li><li class="list__item" id="native-cocoapods.md-94b9214e" ><p id="native-cocoapods.md-43e8614f" >Re-import the project.</p></li></ol><aside data-type="note" class="prompt" data-title="" id="native-cocoapods.md-77d82dd8" ><p id="native-cocoapods.md-eca0812b" >To work correctly with Xcode, you should specify the path to the Podspec in your Podfile. For example:</p><div class="code-block" data-lang="ruby" id="native-cocoapods.md-92ca4ee4"         >target \'ios-app\' do\n    # ... other pod depedencies ...\n   pod \'podspecWithFilesExample\', :path =&gt; \'../cocoapods/kotlin-with-cocoapods-sample/pod_dependency\'\nend\n</div></aside><p id="native-cocoapods.md-d639b00f" >To use these dependencies from the Kotlin code, import the packages <code class="code " id="native-cocoapods.md-fb127b9e"  >cocoapods.&lt;library-name&gt;</code>.</p><div class="code-block" data-lang="kotlin" id="native-cocoapods.md-1cd9d5c3"         >import cocoapods.pod_dependency.*\n</div><p id="native-cocoapods.md-1c5d79ff" >You can find a sample project <a href="https://github.com/Kotlin/kotlin-with-cocoapods-sample" id="native-cocoapods.md-534eb75f"   data-external="true" rel="noopener noreferrer" >here</a>.</p></section><section class="chapter"  ><h3 id="native-cocoapods.md-add-a-dependency-on-a-pod-library-from-a-custom-podspec-repository" data-toc="native-cocoapods#native-cocoapods.md-add-a-dependency-on-a-pod-library-from-a-custom-podspec-repository"  >Add a dependency on a Pod library from a custom Podspec repository</h3><p id="native-cocoapods.md-7c0171eb" >You can add dependencies on a Pod library from a custom Podspec repository with <code class="code " id="native-cocoapods.md-425e922d"  >pod()</code> and <code class="code " id="native-cocoapods.md-6c5c4823"  >specRepos</code> to <code class="code " id="native-cocoapods.md-d7405da1"  >build.gradle.kts</code> (<code class="code " id="native-cocoapods.md-2d4094e5"  >build.gradle</code>) of your project:</p><ol class="list _decimal" id="native-cocoapods.md-333e9092"   ><li class="list__item" id="native-cocoapods.md-bb54e334" ><p id="native-cocoapods.md-eb4a4620" >Specify the HTTP address to the custom Podspec repository using the <code class="code " id="native-cocoapods.md-bc898115"  >url()</code> inside the <code class="code " id="native-cocoapods.md-84238e1"  >specRepos</code> block.</p></li><li class="list__item" id="native-cocoapods.md-dc59564c" ><p id="native-cocoapods.md-69bbcf54" >Specify the name of a Pod library in the <code class="code " id="native-cocoapods.md-4371465b"  >pod()</code> function.</p></li><li class="list__item" id="native-cocoapods.md-2e3172ac" ><p id="native-cocoapods.md-bb763cf" >Specify the minimum deployment target version for the Pod library.</p><aside data-type="note" class="prompt" data-title="" id="native-cocoapods.md-5f043165" ><p id="native-cocoapods.md-96abfe21" >If you don\'t specify the minimum deployment target version and a dependency Pod requires a higher deployment target, you will get an error.</p></aside><div class="code-block" data-lang="kotlin" id="native-cocoapods.md-6e7d514f"         >kotlin {\n    ios()\n\n    cocoapods {\n        summary = &quot;CocoaPods test library&quot;\n        homepage = &quot;https://github.com/JetBrains/kotlin&quot;\n\n        ios.deploymentTarget = &quot;13.5&quot;\n\n        specRepos {\n            url(&quot;https://github.com/Kotlin/kotlin-cocoapods-spec.git&quot;)\n        }\n        pod(&quot;example&quot;)\n    }\n}\n</div></li><li class="list__item" id="native-cocoapods.md-f90f28bb" ><p id="native-cocoapods.md-158380ed" >Re-import the project.</p></li></ol><aside data-type="note" class="prompt" data-title="" id="native-cocoapods.md-9b3710d3" ><p id="native-cocoapods.md-cb95de57" >To work correctly with Xcode, you should specify the location of specs at the beginning of your Podfile. For example,</p><div class="code-block" data-lang="ruby" id="native-cocoapods.md-f7e02144"         >source \'https://github.com/Kotlin/kotlin-cocoapods-spec.git\'`\n</div><p id="native-cocoapods.md-4229a02" >You should also specify the path to the Podspec in your Podfile. For example:</p><div class="code-block" data-lang="ruby" id="native-cocoapods.md-79ddde8e"         >target \'ios-app\' do\n    # ... other pod depedencies ...\n   pod \'podspecWithFilesExample\', :path =&gt; \'../cocoapods/kotlin-with-cocoapods-sample/pod_dependency\'\nend\n</div></aside><p id="native-cocoapods.md-3de7a620" >To use these dependencies from the Kotlin code, import the packages <code class="code " id="native-cocoapods.md-2309629f"  >cocoapods.&lt;library-name&gt;</code>.</p><div class="code-block" data-lang="kotlin" id="native-cocoapods.md-47503772"         >import cocoapods.example.*\n</div><p id="native-cocoapods.md-f093bf17" >You can find a sample project <a href="https://github.com/Kotlin/kotlin-with-cocoapods-sample" id="native-cocoapods.md-c012eabf"   data-external="true" rel="noopener noreferrer" >here</a>.</p></section><section class="chapter"  ><h3 id="native-cocoapods.md-add-a-dependency-on-a-pod-library-with-custom-cinterop-options" data-toc="native-cocoapods#native-cocoapods.md-add-a-dependency-on-a-pod-library-with-custom-cinterop-options"  >Add a dependency on a Pod library with custom cinterop options</h3><p id="native-cocoapods.md-ca331e1e" >You can add dependencies on a Pod library with custom cinterop options with <code class="code " id="native-cocoapods.md-3121ba50"  >pod()</code> to <code class="code " id="native-cocoapods.md-89598d0e"  >build.gradle.kts</code> (<code class="code " id="native-cocoapods.md-55a8a122"  >build.gradle</code>) of your project:</p><ol class="list _decimal" id="native-cocoapods.md-b0e4c17c"   ><li class="list__item" id="native-cocoapods.md-ac3a65af" ><p id="native-cocoapods.md-87143062" >Specify the name of a Pod library in the <code class="code " id="native-cocoapods.md-ddd79c76"  >pod()</code> function. In the configuration block specify the cinterop options:</p><ul class="list _ul" id="native-cocoapods.md-f6c487a"   ><li class="list__item" id="native-cocoapods.md-fe0412ad" ><p><code class="code " id="native-cocoapods.md-f51cdc07"  >extraOpts</code> – to specify the list of options for a Pod library. For example, specific flags: <code class="code " id="native-cocoapods.md-45368bc8"  >extraOpts = listOf(&quot;-compiler-option&quot;)</code></p></li><li class="list__item" id="native-cocoapods.md-4af093aa" ><p><code class="code " id="native-cocoapods.md-83f0a0b3"  >packageName</code> – to specify the package name. If you specify this, you can import the library using the package name: <code class="code " id="native-cocoapods.md-7daaf2e7"  >import &lt;packageName&gt;</code>.</p></li></ul></li><li class="list__item" id="native-cocoapods.md-9d7dadee" ><p id="native-cocoapods.md-7551d889" >Specify the minimum deployment target version for the Pod library.</p><aside data-type="note" class="prompt" data-title="" id="native-cocoapods.md-752ba5fa" ><p id="native-cocoapods.md-b8c2c815" >If you don\'t specify the minimum deployment target version and a dependency Pod requires a higher deployment target, you will get an error.</p></aside><div class="code-block" data-lang="kotlin" id="native-cocoapods.md-81cd5fa7"         >kotlin {\n    ios()\n\n    cocoapods {\n        summary = &quot;CocoaPods test library&quot;\n        homepage = &quot;https://github.com/JetBrains/kotlin&quot;\n\n        ios.deploymentTarget = &quot;13.5&quot;\n\n        useLibraries()\n\n        pod(&quot;YandexMapKit&quot;) {\n            packageName = &quot;YandexMK&quot;\n        }\n    }\n}\n</div></li><li class="list__item" id="native-cocoapods.md-a4187ed3" ><p id="native-cocoapods.md-62982450" >Re-import the project.</p></li></ol><p id="native-cocoapods.md-3853ae48" >To use these dependencies from the Kotlin code, import the packages <code class="code " id="native-cocoapods.md-184ce801"  >cocoapods.&lt;library-name&gt;</code>.</p><div class="code-block" data-lang="kotlin" id="native-cocoapods.md-70e3ff13"         >import cocoapods.YandexMapKit.*\n</div><p id="native-cocoapods.md-a6e461b" >If you use the <code class="code " id="native-cocoapods.md-11e30a86"  >packageName</code> parameter, you can import the library using the package name <code class="code " id="native-cocoapods.md-b8bf26fb"  >import &lt;packageName&gt;</code>:</p><div class="code-block" data-lang="kotlin" id="native-cocoapods.md-b2d09679"         >import YandexMK.YMKPoint\nimport YandexMK.YMKDistance\n</div></section><section class="chapter"  ><h3 id="native-cocoapods.md-add-a-dependency-on-a-static-pod-library" data-toc="native-cocoapods#native-cocoapods.md-add-a-dependency-on-a-static-pod-library"  >Add a dependency on a static Pod library</h3><p id="native-cocoapods.md-4789679e" >You can add dependencies on a static Pod library with <code class="code " id="native-cocoapods.md-61c95e1f"  >pod()</code> and <code class="code " id="native-cocoapods.md-69610a6a"  >useLibraries()</code> to <code class="code " id="native-cocoapods.md-63e3ef"  >build.gradle.kts</code> (<code class="code " id="native-cocoapods.md-1eb6f07a"  >build.gradle</code>) of your project:</p><ol class="list _decimal" id="native-cocoapods.md-cae17bdc"   ><li class="list__item" id="native-cocoapods.md-ca3fed20" ><p id="native-cocoapods.md-69fdc26d" >Specify the name of the library using the <code class="code " id="native-cocoapods.md-a25ac178"  >pod()</code> function.</p></li><li class="list__item" id="native-cocoapods.md-46d95c78" ><p id="native-cocoapods.md-d974444a" >Call the <code class="code " id="native-cocoapods.md-4ecbf48c"  >useLibraries()</code> function – it enables a special flag for static libraries.</p></li><li class="list__item" id="native-cocoapods.md-ec63a85" ><p id="native-cocoapods.md-6a57464f" >Specify the minimum deployment target version for the Pod library.</p><aside data-type="note" class="prompt" data-title="" id="native-cocoapods.md-a8f3f19" ><p id="native-cocoapods.md-37147559" >If you don\'t specify the minimum deployment target version and a dependency Pod requires a higher deployment target, you will get an error.</p></aside><div class="code-block" data-lang="kotlin" id="native-cocoapods.md-dbeb1cfd"         >kotlin {\n    ios()\n\n    cocoapods {\n        summary = &quot;CocoaPods test library&quot;\n        homepage = &quot;https://github.com/JetBrains/kotlin&quot;\n\n        ios.deploymentTarget = &quot;13.5&quot;\n\n        pod(&quot;YandexMapKit&quot;) {\n            version = &quot;~&gt; 3.2&quot;\n        }\n        useLibraries()\n    }\n}\n</div></li><li class="list__item" id="native-cocoapods.md-341d3c55" ><p id="native-cocoapods.md-2f503ca3" >Re-import the project.</p></li></ol><p id="native-cocoapods.md-5793826c" >To use these dependencies from the Kotlin code, import the packages <code class="code " id="native-cocoapods.md-cbe3ce2c"  >cocoapods.&lt;library-name&gt;</code>.</p><div class="code-block" data-lang="kotlin" id="native-cocoapods.md-727fe849"         >import cocoapods.YandexMapKit.*\n</div></section><section class="chapter"  ><h3 id="native-cocoapods.md-update-podfile-for-xcode" data-toc="native-cocoapods#native-cocoapods.md-update-podfile-for-xcode"  >Update Podfile for Xcode</h3><p id="native-cocoapods.md-81a13c0c" >If you want to import your Kotlin project in an Xcode project, you’ll need to make some changes to your Podfile for it to work correctly:</p><ul class="list _ul" id="native-cocoapods.md-37e7b338"   ><li class="list__item" id="native-cocoapods.md-3d5ebe10" ><p id="native-cocoapods.md-e257429" >If your project has any Git, HTTP, or custom Podspec repository dependencies, you should also specify the path to the Podspec in the Podfile.</p><p id="native-cocoapods.md-fd27aae0" >For example, if you add a dependency on <code class="code " id="native-cocoapods.md-ead7b1a3"  >podspecWithFilesExample</code>, declare the path to the Podspec in the Podfile:</p><div class="code-block" data-lang="ruby" id="native-cocoapods.md-4592f664"         >target \'ios-app\' do\n    # ... other depedencies ...\n    pod \'podspecWithFilesExample\', :path =&gt; \'cocoapods/externalSources/url/podspecWithFilesExample\'\nend\n</div><p id="native-cocoapods.md-1f5406e8" >The <code class="code " id="native-cocoapods.md-3a935c3"  >:path</code> should contain the filepath to the Pod.</p></li><li class="list__item" id="native-cocoapods.md-2fe267d8" ><p id="native-cocoapods.md-9b4015d9" >When you add a library from the custom Podspec repository, you should also specify the <a href="https://guides.cocoapods.org/syntax/podfile.html#source" id="native-cocoapods.md-935ed85e"   data-external="true" rel="noopener noreferrer" >location</a> of specs at the beginning of your Podfile:</p><div class="code-block" data-lang="ruby" id="native-cocoapods.md-c95a7f4c"         >source \'https://github.com/Kotlin/kotlin-cocoapods-spec.git\'\n\ntarget \'kotlin-cocoapods-xcproj\' do\n    # ... other depedencies ...\n    pod \'example\'\nend\n</div></li></ul><aside data-type="note" class="prompt" data-title="" id="native-cocoapods.md-9b43b75c" ><p id="native-cocoapods.md-fb9c3ba6" >Re-import the project after making changes in Podfile.</p></aside><p id="native-cocoapods.md-7d3c107f" >If you don\'t make these changes to the Podfile, the <code class="code " id="native-cocoapods.md-2727e12c"  >podInstall</code> task will fail and the CocoaPods plugin will show an error message in the log.</p><p id="native-cocoapods.md-c1a50d5f" >Check out the <code class="code " id="native-cocoapods.md-ff36a743"  >withXcproject</code> branch of the <a href="https://github.com/Kotlin/kotlin-with-cocoapods-sample" id="native-cocoapods.md-963ce5cf"   data-external="true" rel="noopener noreferrer" >sample project</a>, which contains an example of Xcode integration with an existing Xcode project named <code class="code " id="native-cocoapods.md-7f669b96"  >kotlin-cocoapods-xcproj</code>.</p></section></section><section class="chapter"  ><h2 id="native-cocoapods.md-use-a-kotlin-gradle-project-as-a-cocoapods-dependency" data-toc="native-cocoapods#native-cocoapods.md-use-a-kotlin-gradle-project-as-a-cocoapods-dependency"  >Use a Kotlin Gradle project as a CocoaPods dependency</h2><p id="native-cocoapods.md-2a4ea524" >You can use a Kotlin Multiplatform project with native targets as a CocoaPods dependency (Kotlin Pod). You can include such a dependency in the Podfile of the Xcode project by its name and path to the project directory containing the generated Podspec. This dependency will be automatically built (and rebuilt) along with this project. Such an approach simplifies importing to Xcode by removing a need to write the corresponding Gradle tasks and Xcode build steps manually.</p><p id="native-cocoapods.md-e1a1300a" >You can add dependencies between:</p><ul class="list _ul" id="native-cocoapods.md-eb858e53"   ><li class="list__item" id="native-cocoapods.md-30526854" ><a href="#native-cocoapods.md-add-a-dependency-between-a-kotlin-pod-and-xcode-project-with-one-target" id="native-cocoapods.md-e7fe1070"   >A Kotlin Pod and an Xcode project with one target</a></li><li class="list__item" id="native-cocoapods.md-4584af15" ><a href="#native-cocoapods.md-add-a-dependency-between-a-kotlin-pod-with-an-xcode-project-with-several-targets" id="native-cocoapods.md-4f5f16db"   >A Kotlin Pod and an Xcode project with several targets</a></li></ul><aside data-type="note" class="prompt" data-title="" id="native-cocoapods.md-1d1aa722" ><p id="native-cocoapods.md-5741a2c3" >To correctly import the dependencies into the Kotlin/Native module, the <code class="code " id="native-cocoapods.md-a705fb7c"  >Podfile</code> must contain either <a href="https://guides.cocoapods.org/syntax/podfile.html#use_modular_headers_bang" id="native-cocoapods.md-572dc4e"   data-external="true" rel="noopener noreferrer" ><code class="code " id="native-cocoapods.md-ac071b53"  >use_modular_headers!</code></a> or <a href="https://guides.cocoapods.org/syntax/podfile.html#use_frameworks_bang" id="native-cocoapods.md-30c3175d"   data-external="true" rel="noopener noreferrer" ><code class="code " id="native-cocoapods.md-90968dc3"  >use_frameworks!</code></a> directive.</p></aside><section class="chapter"  ><h3 id="native-cocoapods.md-add-a-dependency-between-a-kotlin-pod-and-xcode-project-with-one-target" data-toc="native-cocoapods#native-cocoapods.md-add-a-dependency-between-a-kotlin-pod-and-xcode-project-with-one-target"  >Add a dependency between a Kotlin Pod and Xcode project with one target</h3><ol class="list _decimal" id="native-cocoapods.md-a8ff0ae4"   ><li class="list__item" id="native-cocoapods.md-3c4d2383" ><p id="native-cocoapods.md-708ff251" >Create an Xcode project with a <code class="code " id="native-cocoapods.md-13c6a677"  >Podfile</code> if you haven’t done so yet.</p></li><li class="list__item" id="native-cocoapods.md-c745a91f" ><p id="native-cocoapods.md-a5c42c7c" >Add the path to your Xcode project <code class="code " id="native-cocoapods.md-fa5bc3dd"  >Podfile</code> with <code class="code " id="native-cocoapods.md-78983fa3"  >podfile = project.file(..)</code> to <code class="code " id="native-cocoapods.md-1476dcdb"  >build.gradle.kts</code> (<code class="code " id="native-cocoapods.md-d391a881"  >build.gradle</code>) of your Kotlin project. This step helps synchronize your Xcode project with Kotlin Pod dependencies by calling <code class="code " id="native-cocoapods.md-c4542827"  >pod install</code> for your <code class="code " id="native-cocoapods.md-908b5b6d"  >Podfile</code>.</p></li><li class="list__item" id="native-cocoapods.md-4440a17b" ><p id="native-cocoapods.md-e97577ec" >Specify the minimum target version for the Pod library.</p><aside data-type="note" class="prompt" data-title="" id="native-cocoapods.md-a552984c" ><p id="native-cocoapods.md-5a1c019b" >If you don\'t specify the minimum target version and a dependency Pod requires a higher deployment target, you will get an error.</p></aside><div class="code-block" data-lang="kotlin" id="native-cocoapods.md-5e8511d"         >kotlin {\n    ios()\n\n    cocoapods {\n        summary = &quot;CocoaPods test library&quot;\n        homepage = &quot;https://github.com/JetBrains/kotlin&quot;\n        ios.deploymentTarget = &quot;13.5&quot;\n        pod(&quot;AFNetworking&quot;) {\n            version = &quot;~&gt; 4.0.0&quot;\n        }\n        podfile = project.file(&quot;../ios-app/Podfile&quot;)\n    }\n}\n</div></li><li class="list__item" id="native-cocoapods.md-1fde0c51" ><p id="native-cocoapods.md-be31b8b9" >Add the name and path of the Kotlin Pod you want to include in the Xcode project to <code class="code " id="native-cocoapods.md-8be41157"  >Podfile</code>.</p><div class="code-block" data-lang="ruby" id="native-cocoapods.md-fcd70d0f"         >use_frameworks!\n\nplatform :ios, \'13.5\'\n\ntarget \'ios-app\' do\n        pod \'kotlin_library\', :path =&gt; \'../kotlin-library\'\nend\n</div></li><li class="list__item" id="native-cocoapods.md-a07919e3" ><p id="native-cocoapods.md-a2f8b8ba" >Re-import the project.</p></li></ol></section><section class="chapter"  ><h3 id="native-cocoapods.md-add-a-dependency-between-a-kotlin-pod-with-an-xcode-project-with-several-targets" data-toc="native-cocoapods#native-cocoapods.md-add-a-dependency-between-a-kotlin-pod-with-an-xcode-project-with-several-targets"  >Add a dependency between a Kotlin Pod with an Xcode project with several targets</h3><ol class="list _decimal" id="native-cocoapods.md-8861eb36"   ><li class="list__item" id="native-cocoapods.md-3c9fb980" ><p id="native-cocoapods.md-d6d37b16" >Create an Xcode project with a <code class="code " id="native-cocoapods.md-68a49750"  >Podfile</code> if you haven’t done so yet.</p></li><li class="list__item" id="native-cocoapods.md-5bf13776" ><p id="native-cocoapods.md-acbc807a" >Add the path to your Xcode project <code class="code " id="native-cocoapods.md-7ca12a86"  >Podfile</code> with <code class="code " id="native-cocoapods.md-a0806146"  >podfile = project.file(..)</code> to <code class="code " id="native-cocoapods.md-9b934c87"  >build.gradle.kts</code> (<code class="code " id="native-cocoapods.md-e9ad100f"  >build.gradle</code>) of your Kotlin project. This step helps synchronize your Xcode project with Kotlin Pod dependencies by calling <code class="code " id="native-cocoapods.md-f707716"  >pod install</code> for your <code class="code " id="native-cocoapods.md-bf7abc86"  >Podfile</code>.</p></li><li class="list__item" id="native-cocoapods.md-88f8f9cc" ><p id="native-cocoapods.md-4dfe07d2" >Add dependencies to the Pod libraries that you want to use in your project with <code class="code " id="native-cocoapods.md-d419d65c"  >pod()</code>.</p></li><li class="list__item" id="native-cocoapods.md-b7f854a8" ><p id="native-cocoapods.md-f17baa2" >For each target, specify the minimum target version for the Pod library.</p><aside data-type="note" class="prompt" data-title="" id="native-cocoapods.md-9554989" ><p id="native-cocoapods.md-356ff93c" >If you don\'t specify the minimum deployment target version and a dependency Pod requires a higher deployment target, you will get an error.</p></aside><div class="code-block" data-lang="kotlin" id="native-cocoapods.md-bc87fccb"         >kotlin {\n    ios()\n    tvos()\n\n    cocoapods {\n        summary = &quot;CocoaPods test library&quot;\n        homepage = &quot;https://github.com/JetBrains/kotlin&quot;\n        ios.deploymentTarget = &quot;13.5&quot;\n        tvos.deploymentTarget = &quot;13.4&quot;\n\n        pod(&quot;AFNetworking&quot;) {\n            version = &quot;~&gt; 4.0.0&quot;\n        }\n        podfile = project.file(&quot;../severalTargetsXcodeProject/Podfile&quot;) // specify the path to Podfile\n    }\n}\n</div></li><li class="list__item" id="native-cocoapods.md-86b095a0" ><p id="native-cocoapods.md-c5262120" >Add the name and path of the Kotlin Pod you want to include in the Xcode project to the <code class="code " id="native-cocoapods.md-2dca06d2"  >Podfile</code>.</p><div class="code-block" data-lang="ruby" id="native-cocoapods.md-62d69aa8"         >target \'iosApp\' do\n  use_frameworks!\n  platform :ios, \'13.5\'\n  # Pods for iosApp\n  pod \'kotlin_library\', :path =&gt; \'../kotlin-library\'\nend\n\ntarget \'TVosApp\' do\n  use_frameworks!\n  platform :tvos, \'13.4\'\n\n  # Pods for TVosApp\n  pod \'kotlin_library\', :path =&gt; \'../kotlin-library\'\nend\n</div></li><li class="list__item" id="native-cocoapods.md-cbcf2c20" ><p id="native-cocoapods.md-b96b77df" >Re-import the project.</p></li></ol><p id="native-cocoapods.md-b03c2195" >You can find a sample project <a href="https://github.com/Kotlin/multitarget-xcode-with-kotlin-cocoapods-sample" id="native-cocoapods.md-2d8e2ee3"   data-external="true" rel="noopener noreferrer" >here</a>.</p></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="apple-framework.md"  >Kotlin/Native as an Apple framework – tutorial</h1><p id="apple-framework.md-7574706a" >Kotlin/Native provides bi-directional interoperability with Objective-C/Swift. Objective-C frameworks and libraries can be used in Kotlin code. Kotlin modules can be used in Swift/Objective-C code too. Besides that, Kotlin/Native has <a href="#native-c-interop.md" id="apple-framework.md-ac8bf244"   >C Interop</a>. There is also the <a href="#native-dynamic-libraries.md" id="apple-framework.md-5825f14f"   >Kotlin/Native as a Dynamic Library</a> tutorial for more information.</p><p id="apple-framework.md-7525de39" >In this tutorial, you will see how to use Kotlin/Native code from Objective-C and Swift applications on macOS and iOS.</p><p id="apple-framework.md-e35f096c" >In this tutorial you\'ll:</p><ul class="list _ul" id="apple-framework.md-8e016bfc"   ><li class="list__item" id="apple-framework.md-68c32edf" ><p><a href="#apple-framework.md-create-a-kotlin-library" id="apple-framework.md-d8abbdfe"   >create a Kotlin Library</a> and compile it to a framework</p></li><li class="list__item" id="apple-framework.md-24fa7dc1" ><p>examine the generated <a href="#apple-framework.md-generated-framework-headers" id="apple-framework.md-1ef586df"   >Objective-C and Swift API</a> code</p></li><li class="list__item" id="apple-framework.md-74b5e841" ><p>use the framework from <a href="#apple-framework.md-use-the-code-from-objective-c" id="apple-framework.md-3cf09ab8"   >Objective-C</a> and <a href="#apple-framework.md-use-the-code-from-swift" id="apple-framework.md-f2ac8ea4"   >Swift</a></p></li><li class="list__item" id="apple-framework.md-cc4f1622" ><p><a href="#apple-framework.md-xcode-and-framework-dependencies" id="apple-framework.md-afc3259f"   >Configure Xcode</a> to use the framework for <a href="#apple-framework.md-xcode-for-macos-target" id="apple-framework.md-33bbbcba"   >macOS</a> and <a href="#apple-framework.md-xcode-for-ios-targets" id="apple-framework.md-265677d3"   >iOS</a></p></li></ul><section class="chapter"  ><h2 id="apple-framework.md-create-a-kotlin-library" data-toc="apple-framework#apple-framework.md-create-a-kotlin-library"  >Create a Kotlin library</h2><p id="apple-framework.md-e57d730" >Kotlin/Native compiler can produce a framework for macOS and iOS out of the Kotlin code. The created framework contains all declarations and binaries needed to use it with Objective-C and Swift. The best way to understand the techniques is to try it for ourselves. Let\'s create a tiny Kotlin library first and use it from an Objective-C program.</p><p id="apple-framework.md-4073fa77" >Create the <code class="code " id="apple-framework.md-8793a266"  >hello.kt</code> file with the library contents:</p><div class="code-block" data-lang="kotlin" id="apple-framework.md-90d56b03"         >package example\n\nobject Object {\n  val field = &quot;A&quot;\n}\n\ninterface Interface {\n  fun iMember() {}\n}\n\nclass Clazz : Interface {\n  fun member(p: Int): ULong? = 42UL\n}\n\nfun forIntegers(b: Byte, s: UShort, i: Int, l: ULong?) { }\nfun forFloats(f: Float, d: Double?) { }\n\nfun strings(str: String?) : String {\n  return &quot;That is \'$str\' from C&quot;\n}\n\nfun acceptFun(f: (String) -&gt; String?) = f(&quot;Kotlin/Native rocks!&quot;)\nfun supplyFun() : (String) -&gt; String? = { &quot;$it is cool!&quot; }\n</div><p id="apple-framework.md-668ec4a7" >While it is possible to use the command line, either directly or by combining it with a script file (such as <code class="code " id="apple-framework.md-faa41035"  >.sh</code> or <code class="code " id="apple-framework.md-f7aca81"  >.bat</code> file), this approach doesn\'t scale well for big projects that have hundreds of files and libraries. It is then better to use the Kotlin/Native compiler with a build system, as it helps to download and cache the Kotlin/Native compiler binaries and libraries with transitive dependencies and run the compiler and tests. Kotlin/Native can use the <a href="https://gradle.org" id="apple-framework.md-a1002ec2"   data-external="true" rel="noopener noreferrer" >Gradle</a> build system through the <a href="#mpp-discover-project.md-multiplatform-plugin" id="apple-framework.md-8dde3e0e"   >kotlin-multiplatform</a> plugin.</p><p id="apple-framework.md-7b25264f" >We covered the basics of setting up an IDE compatible project with Gradle in the <a href="#native-gradle.md" id="apple-framework.md-520f640"   >A Basic Kotlin/Native Application</a> tutorial. Please check it out if you are looking for detailed first steps and instructions on how to start a new Kotlin/Native project and open it in IntelliJ IDEA. In this tutorial, we\'ll look at the advanced C interop related usages of Kotlin/Native and <a href="#mpp-discover-project.md-multiplatform-plugin" id="apple-framework.md-ef20bf2"   >multiplatform</a> builds with Gradle.</p><p id="apple-framework.md-d053df0" >First, create a project folder. All the paths in this tutorial will be relative to this folder. Sometimes the missing directories will have to be created before any new files can be added.</p><p id="apple-framework.md-b1a5461e" >Use the following <code class="code " id="apple-framework.md-c057bbcd"  >build.gradle(.kts)</code> Gradle build file:</p><div class="tabs" id="apple-framework.md-5e818b78" ><div class="tabs__content" data-gtm="tab" id="apple-framework.md-7921e63f"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="apple-framework.md-7921e63f"   data-title="Groovy"      >plugins {\n    id \'org.jetbrains.kotlin.multiplatform\' version \'1.4.32\'\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n  macosX64(&quot;native&quot;) {\n    binaries {\n      framework {\n        baseName = &quot;Demo&quot;\n      }\n    }\n  }\n}\n\nwrapper {\n  gradleVersion = &quot;6.7.1&quot;\n  distributionType = &quot;ALL&quot;\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="apple-framework.md-98a9857"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="apple-framework.md-98a9857"   data-title="Kotlin"      >plugins {\n    kotlin(&quot;multiplatform&quot;) version &quot;1.4.32&quot;\n}\n\nrepositories {\n    mavenCentral()\n}\n\nkotlin {\n  macosX64(&quot;native&quot;) {\n    binaries {\n      framework {\n        baseName = &quot;Demo&quot;\n      }\n    }\n  }\n}\n\ntasks.wrapper {\n  gradleVersion = &quot;6.7.1&quot;\n  distributionType = Wrapper.DistributionType.ALL\n}\n</div></div></div><p id="apple-framework.md-e789b812" >The prepared project sources can be directly downloaded from Github:</p><ul class="list _ul" id="apple-framework.md-44f216a9"   ><li class="list__item" id="apple-framework.md-d192beea" ><a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-framework-groovy-macos-mac.zip" id="apple-framework.md-9cfb7609"   data-external="true" rel="noopener noreferrer" >Groovy</a></li><li class="list__item" id="apple-framework.md-cf7716ec" ><a href="https://github.com/kotlin/web-site-samples/archive/mpp-kn-framework-kotlin-macos-mac.zip" id="apple-framework.md-828f0427"   data-external="true" rel="noopener noreferrer" >Kotlin</a></li></ul><p id="apple-framework.md-482f34ca" >Move the sources file into the <code class="code " id="apple-framework.md-8ba6be18"  >src/nativeMain/kotlin</code> folder under the project. That is the default path, where sources are located, when the <a href="#mpp-discover-project.md-multiplatform-plugin" id="apple-framework.md-50e945fd"   >kotlin-multiplatform</a> plugin is used. Use the following block to instruct configure the project to generate a dynamic or shared library:</p><div class="code-block" data-lang="kotlin" id="apple-framework.md-a0ff7ea7"         >binaries {\n  framework {\n    baseName = &quot;Demo&quot;\n  }  \n}\n</div><p id="apple-framework.md-38351638" >Along with <code class="code " id="apple-framework.md-f226df2e"  >macOS X64</code>, Kotlin/Native supports iOS <code class="code " id="apple-framework.md-169565bc"  >arm32</code>, <code class="code " id="apple-framework.md-9d1bb2f3"  >arm64</code> and <code class="code " id="apple-framework.md-5fd42287"  >X64</code> targets. You may replace the <code class="code " id="apple-framework.md-3275e657"  >macosX64</code> with respective functions as shown in the table:</p><div class="table-wrapper" ><table class=" wide" id="apple-framework.md-6e27155c"  ><thead><tr class="ijRowHead" id="apple-framework.md-df2f28ff" ><th id="apple-framework.md-fe7af2ed"    >Target platform/device</th><th id="apple-framework.md-d159f800"    >Gradle function</th></tr></thead><tbody ><tr class="" id="apple-framework.md-b5722e46" ><td id="apple-framework.md-41bb2f7f"    >macOS x86_64</td><td id="apple-framework.md-a9657be8"    ><code class="code " id="apple-framework.md-658e5d9e"  >macosX64()</code></td></tr><tr class="" id="apple-framework.md-622a26fc" ><td id="apple-framework.md-3ce01e73"    >iOS ARM 32</td><td id="apple-framework.md-db6ec3e9"    ><code class="code " id="apple-framework.md-34b0bd1a"  >iosArm32()</code></td></tr><tr class="" id="apple-framework.md-4d08e76f" ><td id="apple-framework.md-354f08ff"    >iOS ARM 64</td><td id="apple-framework.md-18a8500a"    ><code class="code " id="apple-framework.md-ef2ad092"  >iosArm64()</code></td></tr><tr class="" id="apple-framework.md-627c9f9e" ><td id="apple-framework.md-ab8ffab6"    >iOS Simulator (x86_64)</td><td id="apple-framework.md-81db46b5"    ><code class="code " id="apple-framework.md-2d5e9aaf"  >iosX64()</code></td></tr></tbody ></table ></div><p id="apple-framework.md-88d1add5" >Run the <code class="code " id="apple-framework.md-67c997e5"  >linkNative</code> Gradle task to build the library <a href="#native-get-started.md" id="apple-framework.md-60ae2660"   >in the IDE</a> or by calling the following console command:</p><div class="code-block" data-lang="bash" id="apple-framework.md-22a6c1eb"         >./gradlew linkNative\n</div><p id="apple-framework.md-538384cf" >Depending on the variant, the build generates the framework into the <code class="code " id="apple-framework.md-388c710f"  >build/bin/native/debugFramework</code> and <code class="code " id="apple-framework.md-8d993d0a"  >build/bin/native/releaseFramework</code> folders. Let\'s see what is inside.</p></section><section class="chapter"  ><h2 id="apple-framework.md-generated-framework-headers" data-toc="apple-framework#apple-framework.md-generated-framework-headers"  >Generated framework headers</h2><p id="apple-framework.md-d0216b94" >Each of the created frameworks contains the header file in <code class="code " id="apple-framework.md-443d5191"  >&lt;Framework&gt;/Headers/Demo.h</code>. The headers do not depend on the target platform (at least with Kotlin/Native v.0.9.2). It contains the definitions for our Kotlin code and a few Kotlin-wide declarations.</p><aside data-type="note" class="prompt" data-title="" id="apple-framework.md-f962a0a5" ><p id="apple-framework.md-d0b1bcfc" >The way Kotlin/Native exports symbols is subject to change without notice.</p></aside><section class="chapter"  ><h3 id="apple-framework.md-kotlin-native-runtime-declarations" data-toc="apple-framework#apple-framework.md-kotlin-native-runtime-declarations"  >Kotlin/Native runtime declarations</h3><p id="apple-framework.md-abba5fb1" >Take a look at Kotlin runtime declarations:</p><div class="code-block" data-lang="none" id="apple-framework.md-23f250cb"      data-disable-link-processing="true"   >NS_ASSUME_NONNULL_BEGIN\n\n@interface KotlinBase : NSObject\n- (instancetype)init __attribute__((unavailable));\n+ (instancetype)new __attribute__((unavailable));\n+ (void)initialize __attribute__((objc_requires_super));\n@end;\n\n@interface KotlinBase (KotlinBaseCopying) &lt;NSCopying&gt;\n@end;\n\n__attribute__((objc_runtime_name(&quot;KotlinMutableSet&quot;)))\n__attribute__((swift_name(&quot;KotlinMutableSet&quot;)))\n@interface DemoMutableSet&lt;ObjectType&gt; : NSMutableSet&lt;ObjectType&gt;\n@end;\n\n__attribute__((objc_runtime_name(&quot;KotlinMutableDictionary&quot;)))\n__attribute__((swift_name(&quot;KotlinMutableDictionary&quot;)))\n@interface DemoMutableDictionary&lt;KeyType, ObjectType&gt; : NSMutableDictionary&lt;KeyType, ObjectType&gt;\n@end;\n\n@interface NSError (NSErrorKotlinException)\n@property (readonly) id _Nullable kotlinException;\n@end;\n</div><p id="apple-framework.md-3c1a9cb7" >Kotlin classes have a <code class="code " id="apple-framework.md-5c31b108"  >KotlinBase</code> base class in Objective-C, the class extends the <code class="code " id="apple-framework.md-3b0ca69d"  >NSObject</code> class there. There are also have wrappers for collections and exceptions. Most of the collection types are mapped to similar collection types from the other side:</p><div class="table-wrapper" ><table class=" wide" id="apple-framework.md-4235a593"  ><thead><tr class="ijRowHead" id="apple-framework.md-c2d0b741" ><th id="apple-framework.md-4e27e9ff"    >Kotlin</th><th id="apple-framework.md-4e26646f"    >Swift</th><th id="apple-framework.md-476f8a9b"    >Objective-C</th></tr></thead><tbody ><tr class="" id="apple-framework.md-889cc949" ><td id="apple-framework.md-34d6ac22"    >List</td><td id="apple-framework.md-ea3d88d2"    >Array</td><td id="apple-framework.md-c592061d"    >NSArray</td></tr><tr class="" id="apple-framework.md-b9d652a9" ><td id="apple-framework.md-dc36387b"    >MutableList</td><td id="apple-framework.md-cc3b8e35"    >NSMutableArray</td><td id="apple-framework.md-522b9ef2"    >NSMutableArray</td></tr><tr class="" id="apple-framework.md-311c5dd2" ><td id="apple-framework.md-fa4de91e"    >Set</td><td id="apple-framework.md-e0c39abf"    >Set</td><td id="apple-framework.md-1b8e9c7c"    >NSSet</td></tr><tr class="" id="apple-framework.md-daa28bdd" ><td id="apple-framework.md-2a4c4db2"    >Map</td><td id="apple-framework.md-98c53c80"    >Dictionary</td><td id="apple-framework.md-5851e0c5"    >NSDictionary</td></tr><tr class="" id="apple-framework.md-433a4ddf" ><td id="apple-framework.md-ce660c2f"    >MutableMap</td><td id="apple-framework.md-800234e8"    >NSMutableDictionary</td><td id="apple-framework.md-ba02c0e8"    >NSMutableDictionary</td></tr></tbody ></table ></div></section><section class="chapter"  ><h3 id="apple-framework.md-kotlin-numbers-and-nsnumber" data-toc="apple-framework#apple-framework.md-kotlin-numbers-and-nsnumber"  >Kotlin numbers and NSNumber</h3><p id="apple-framework.md-6aa5df80" >The next part of the <code class="code " id="apple-framework.md-82bb89e8"  >&lt;Framework&gt;/Headers/Demo.h</code> contains number type mappings between Kotlin/Native and <code class="code " id="apple-framework.md-c661077c"  >NSNumber</code>. There is the base class called <code class="code " id="apple-framework.md-b7717faf"  >DemoNumber</code> in Objective-C and <code class="code " id="apple-framework.md-6387d6ce"  >KotlinNumber</code> in Swift. It extends <code class="code " id="apple-framework.md-e101a0cb"  >NSNumber</code>. There are also child classes per Kotlin number type:</p><div class="table-wrapper" ><table class=" wide" id="apple-framework.md-344d3fc6"  ><thead><tr class="ijRowHead" id="apple-framework.md-2d784e7d" ><th id="apple-framework.md-1d1b5d4e"    >Kotlin</th><th id="apple-framework.md-dda9e4e8"    >Swift</th><th id="apple-framework.md-9101a28c"    >Objective-C</th><th id="apple-framework.md-8b6f86e"    >Simple type</th></tr></thead><tbody ><tr class="" id="apple-framework.md-410e6654" ><td id="apple-framework.md-380b3e2f"    ><code class="code " id="apple-framework.md-96a7be45"  >-</code></td><td id="apple-framework.md-55bb9bbc"    ><code class="code " id="apple-framework.md-4b987694"  >KotlinNumber</code></td><td id="apple-framework.md-87d3da7d"    ><code class="code " id="apple-framework.md-9efb8ec8"  >&lt;Package&gt;Number</code></td><td id="apple-framework.md-c9b31564"    ><code class="code " id="apple-framework.md-b27dd0f8"  >-</code></td></tr><tr class="" id="apple-framework.md-df19bbd9" ><td id="apple-framework.md-a2d92846"    ><code class="code " id="apple-framework.md-a420308"  >Byte</code></td><td id="apple-framework.md-ea581cb3"    ><code class="code " id="apple-framework.md-c1ef66fa"  >KotlinByte</code></td><td id="apple-framework.md-93059d7a"    ><code class="code " id="apple-framework.md-49d17f17"  >&lt;Package&gt;Byte</code></td><td id="apple-framework.md-8d7ad895"    ><code class="code " id="apple-framework.md-1eb6760c"  >char</code></td></tr><tr class="" id="apple-framework.md-87e3951e" ><td id="apple-framework.md-34a8fb2a"    ><code class="code " id="apple-framework.md-965b2fa1"  >UByte</code></td><td id="apple-framework.md-c5c213b3"    ><code class="code " id="apple-framework.md-8bd742a0"  >KotlinUByte</code></td><td id="apple-framework.md-4ce0dcb1"    ><code class="code " id="apple-framework.md-1dc802dc"  >&lt;Package&gt;UByte</code></td><td id="apple-framework.md-a777a24f"    ><code class="code " id="apple-framework.md-9024b615"  >unsigned char</code></td></tr><tr class="" id="apple-framework.md-35cfbfce" ><td id="apple-framework.md-4b83c67"    ><code class="code " id="apple-framework.md-6e3c1381"  >Short</code></td><td id="apple-framework.md-594eb76e"    ><code class="code " id="apple-framework.md-bd4e8480"  >KotlinShort</code></td><td id="apple-framework.md-5f42bfcf"    ><code class="code " id="apple-framework.md-3160b3ee"  >&lt;Package&gt;Short</code></td><td id="apple-framework.md-3daba0e8"    ><code class="code " id="apple-framework.md-b84d8a04"  >short</code></td></tr><tr class="" id="apple-framework.md-ebb48ba4" ><td id="apple-framework.md-582a6f43"    ><code class="code " id="apple-framework.md-8248ecc9"  >UShort</code></td><td id="apple-framework.md-baf7bc77"    ><code class="code " id="apple-framework.md-c2eee048"  >KotlinUShort</code></td><td id="apple-framework.md-ec3ad078"    ><code class="code " id="apple-framework.md-fe8d6a48"  >&lt;Package&gt;UShort</code></td><td id="apple-framework.md-e94658c0"    ><code class="code " id="apple-framework.md-37808008"  >unsigned short</code></td></tr><tr class="" id="apple-framework.md-b1524257" ><td id="apple-framework.md-b1954dcc"    ><code class="code " id="apple-framework.md-4db28aac"  >Int</code></td><td id="apple-framework.md-548a5c70"    ><code class="code " id="apple-framework.md-41d7543f"  >KotlinInt</code></td><td id="apple-framework.md-cc429059"    ><code class="code " id="apple-framework.md-6ee04959"  >&lt;Package&gt;Int</code></td><td id="apple-framework.md-fdb144da"    ><code class="code " id="apple-framework.md-14070725"  >int</code></td></tr><tr class="" id="apple-framework.md-c3af5247" ><td id="apple-framework.md-4f015d8"    ><code class="code " id="apple-framework.md-8b636a48"  >UInt</code></td><td id="apple-framework.md-d76e66db"    ><code class="code " id="apple-framework.md-a0573534"  >KotlinUInt</code></td><td id="apple-framework.md-59db800e"    ><code class="code " id="apple-framework.md-2bd1cc73"  >&lt;Package&gt;UInt</code></td><td id="apple-framework.md-bd8df394"    ><code class="code " id="apple-framework.md-7a27e13b"  >unsigned int</code></td></tr><tr class="" id="apple-framework.md-d81a95da" ><td id="apple-framework.md-ee6ae423"    ><code class="code " id="apple-framework.md-6f8b9fa7"  >Long</code></td><td id="apple-framework.md-e7f82965"    ><code class="code " id="apple-framework.md-be0ea07c"  >KotlinLong</code></td><td id="apple-framework.md-5ea51ec1"    ><code class="code " id="apple-framework.md-25e06593"  >&lt;Package&gt;Long</code></td><td id="apple-framework.md-cce8835f"    ><code class="code " id="apple-framework.md-ad90d434"  >long long</code></td></tr><tr class="" id="apple-framework.md-f8bcff2a" ><td id="apple-framework.md-4a3aba43"    ><code class="code " id="apple-framework.md-726c66d"  >ULong</code></td><td id="apple-framework.md-93c9d629"    ><code class="code " id="apple-framework.md-a8f3f7c5"  >KotlinULong</code></td><td id="apple-framework.md-7f9f5f92"    ><code class="code " id="apple-framework.md-ecba659e"  >&lt;Package&gt;ULong</code></td><td id="apple-framework.md-8613c8c"    ><code class="code " id="apple-framework.md-591a51d7"  >unsigned long long</code></td></tr><tr class="" id="apple-framework.md-e5665b10" ><td id="apple-framework.md-8b9d9941"    ><code class="code " id="apple-framework.md-2626cfd"  >Float</code></td><td id="apple-framework.md-51ffb615"    ><code class="code " id="apple-framework.md-ef4a1506"  >KotlinFloat</code></td><td id="apple-framework.md-4dbb2b97"    ><code class="code " id="apple-framework.md-7f267d2d"  >&lt;Package&gt;Float</code></td><td id="apple-framework.md-bc0b2a7a"    ><code class="code " id="apple-framework.md-8b9ae3b7"  >float</code></td></tr><tr class="" id="apple-framework.md-e6afdcc9" ><td id="apple-framework.md-3a68f9c4"    ><code class="code " id="apple-framework.md-bcf4995a"  >Double</code></td><td id="apple-framework.md-590986e8"    ><code class="code " id="apple-framework.md-7ba9921c"  >KotlinDouble</code></td><td id="apple-framework.md-c8a7b784"    ><code class="code " id="apple-framework.md-cda735b7"  >&lt;Package&gt;Double</code></td><td id="apple-framework.md-f39f57a3"    ><code class="code " id="apple-framework.md-64adc462"  >double</code></td></tr><tr class="" id="apple-framework.md-944c12ad" ><td id="apple-framework.md-bbf550d3"    ><code class="code " id="apple-framework.md-7ca33037"  >Boolean</code></td><td id="apple-framework.md-d33e1b3"    ><code class="code " id="apple-framework.md-5d1e40a3"  >KotlinBoolean</code></td><td id="apple-framework.md-53b7506"    ><code class="code " id="apple-framework.md-4f965082"  >&lt;Package&gt;Boolean</code></td><td id="apple-framework.md-9f97965d"    ><code class="code " id="apple-framework.md-be6997ce"  >BOOL/Bool</code></td></tr></tbody ></table ></div><p id="apple-framework.md-8a99d9d1" >Every number type has a class method to create a new instance from the related simple type. Also, there is an instance method to extract a simple value back. Schematically, declarations look like that:</p><div class="code-block" data-lang="none" id="apple-framework.md-b764c271"      data-disable-link-processing="true"   >__attribute__((objc_runtime_name(&quot;Kotlin__TYPE__&quot;)))\n__attribute__((swift_name(&quot;Kotlin__TYPE__&quot;)))\n@interface Demo__TYPE__ : DemoNumber\n- (instancetype)initWith__TYPE__:(__CTYPE__)value;\n+ (instancetype)numberWith__TYPE__:(__CTYPE__)value;\n@end;\n</div><p id="apple-framework.md-c6b23118" >Where <code class="code " id="apple-framework.md-e542f1c1"  >__TYPE__</code> is one of the simple type names and <code class="code " id="apple-framework.md-1a488532"  >__CTYPE__</code> is the related Objective-C type, e.g. <code class="code " id="apple-framework.md-8e9902c7"  >initWithChar(char)</code>.</p><p id="apple-framework.md-da29967e" >These types are used to map boxed Kotlin number types into Objective-C and Swift. In Swift, you may simply call the constructor to create an instance, e.g. <code class="code " id="apple-framework.md-63d08b9d"  >KotlinLong(value: 42)</code>.</p></section><section class="chapter"  ><h3 id="apple-framework.md-classes-and-objects-from-kotlin" data-toc="apple-framework#apple-framework.md-classes-and-objects-from-kotlin"  >Classes and objects from Kotlin</h3><p id="apple-framework.md-8cfbae39" >Let\'s see how <code class="code " id="apple-framework.md-2c1af21e"  >class</code> and <code class="code " id="apple-framework.md-dff677b9"  >object</code> are mapped to Objective-C and Swift. The generated <code class="code " id="apple-framework.md-f28508b7"  >&lt;Framework&gt;/Headers/Demo.h</code> file contains the exact definitions for <code class="code " id="apple-framework.md-b79334db"  >Class</code>, <code class="code " id="apple-framework.md-3ffe522b"  >Interface</code>, and <code class="code " id="apple-framework.md-878ac07d"  >Object</code>:</p><div class="code-block" data-lang="none" id="apple-framework.md-db357b78"      data-disable-link-processing="true"   >NS_ASSUME_NONNULL_BEGIN\n\n__attribute__((objc_subclassing_restricted))\n__attribute__((swift_name(&quot;Object&quot;)))\n@interface DemoObject : KotlinBase\n+ (instancetype)alloc __attribute__((unavailable));\n+ (instancetype)allocWithZone:(struct _NSZone *)zone __attribute__((unavailable));\n+ (instancetype)object __attribute__((swift_name(&quot;init()&quot;)));\n@property (readonly) NSString *field;\n@end;\n\n__attribute__((swift_name(&quot;Interface&quot;)))\n@protocol DemoInterface\n@required\n- (void)iMember __attribute__((swift_name(&quot;iMember()&quot;)));\n@end;\n\n__attribute__((objc_subclassing_restricted))\n__attribute__((swift_name(&quot;Clazz&quot;)))\n@interface DemoClazz : KotlinBase &lt;DemoInterface&gt;\n- (instancetype)init __attribute__((swift_name(&quot;init()&quot;))) __attribute__((objc_designated_initializer));\n+ (instancetype)new __attribute__((availability(swift, unavailable, message=&quot;use object initializers instead&quot;)));\n- (DemoLong * _Nullable)memberP:(int32_t)p __attribute__((swift_name(&quot;member(p:)&quot;)));\n@end;\n</div><p id="apple-framework.md-b9a94305" >The code is full of Objective-C attributes, which are intended to help the use of the framework from both Objective-C and Swift languages. <code class="code " id="apple-framework.md-41655346"  >DemoClazz</code>, <code class="code " id="apple-framework.md-6c1c7038"  >DemoInterface</code>, and <code class="code " id="apple-framework.md-c60c9884"  >DemoObject</code> are created for <code class="code " id="apple-framework.md-1e416af4"  >Clazz</code>, <code class="code " id="apple-framework.md-7bbff628"  >Interface</code>, and <code class="code " id="apple-framework.md-c3285288"  >Object</code> respectively. The <code class="code " id="apple-framework.md-1bdb781e"  >Interface</code> is turned into <code class="code " id="apple-framework.md-461ad6c3"  >@protocol</code>, both a <code class="code " id="apple-framework.md-5ef945f5"  >class</code> and an <code class="code " id="apple-framework.md-15834aed"  >object</code> are represented as <code class="code " id="apple-framework.md-3e6a89cb"  >@interface</code>. The <code class="code " id="apple-framework.md-f03d5d45"  >Demo</code> prefix comes from the <code class="code " id="apple-framework.md-6fafae7d"  >-output</code> parameter of the <code class="code " id="apple-framework.md-a38827bf"  >kotlinc-native</code> compiler and the framework name. You can see here that the nullable return type <code class="code " id="apple-framework.md-6c739e34"  >ULong?</code> is turned into <code class="code " id="apple-framework.md-c6829014"  >DemoLong*</code> in Objective-C.</p></section><section class="chapter"  ><h3 id="apple-framework.md-global-declarations-from-kotlin" data-toc="apple-framework#apple-framework.md-global-declarations-from-kotlin"  >Global declarations from Kotlin</h3><p id="apple-framework.md-92a5f2be" >All global functions from Kotlin are turned into <code class="code " id="apple-framework.md-bb5b3062"  >DemoLibKt</code> in Objective-C and into <code class="code " id="apple-framework.md-5e182b50"  >LibKt</code> in Swift, where <code class="code " id="apple-framework.md-465916ea"  >Demo</code> is the framework name and set by the <code class="code " id="apple-framework.md-b56e87ad"  >-output</code> parameter of <code class="code " id="apple-framework.md-221be2b7"  >kotlinc-native</code>.</p><div class="code-block" data-lang="none" id="apple-framework.md-fe352ec2"      data-disable-link-processing="true"   >NS_ASSUME_NONNULL_BEGIN\n\n__attribute__((objc_subclassing_restricted))\n__attribute__((swift_name(&quot;LibKt&quot;)))\n@interface DemoLibKt : KotlinBase\n+ (void)forIntegersB:(int8_t)b s:(int16_t)s i:(int32_t)i l:(DemoLong * _Nullable)l __attribute__((swift_name(&quot;forIntegers(b:s:i:l:)&quot;)));\n+ (void)forFloatsF:(float)f d:(DemoDouble * _Nullable)d __attribute__((swift_name(&quot;forFloats(f:d:)&quot;)));\n+ (NSString *)stringsStr:(NSString * _Nullable)str __attribute__((swift_name(&quot;strings(str:)&quot;)));\n+ (NSString * _Nullable)acceptFunF:(NSString * _Nullable (^)(NSString *))f __attribute__((swift_name(&quot;acceptFun(f:)&quot;)));\n+ (NSString * _Nullable (^)(NSString *))supplyFun __attribute__((swift_name(&quot;supplyFun()&quot;)));\n@end;\n</div><p id="apple-framework.md-7311ec2e" >You see that Kotlin <code class="code " id="apple-framework.md-4e2b5735"  >String</code> and Objective-C <code class="code " id="apple-framework.md-17093d5"  >NSString*</code> are mapped transparently. Similarly, <code class="code " id="apple-framework.md-3f28527f"  >Unit</code> type from Kotlin is mapped to <code class="code " id="apple-framework.md-8bec4ed2"  >void</code>. We see primitive types are mapped directly. Non-nullable primitive types are mapped transparently. Nullable primitive types are mapped into <code class="code " id="apple-framework.md-61582f7f"  >Kotlin&lt;TYPE&gt;*</code> types, as shown in the table <a href="#apple-framework.md-kotlin-numbers-and-nsnumber" id="apple-framework.md-c95ee7f8"   >above</a>. Both higher order functions <code class="code " id="apple-framework.md-ecb037b3"  >acceptFunF</code> and <code class="code " id="apple-framework.md-ae0e7d5b"  >supplyFun</code> are included, and accept Objective-C blocks.</p><p id="apple-framework.md-bf366274" >More information about all other types mapping details can be found in the <a href="#native-objc-interop.md" id="apple-framework.md-8e1f55b9"   >Objective-C Interop</a> documentation article</p></section></section><section class="chapter"  ><h2 id="apple-framework.md-garbage-collection-and-reference-counting" data-toc="apple-framework#apple-framework.md-garbage-collection-and-reference-counting"  >Garbage collection and reference counting</h2><p id="apple-framework.md-52279b4a" >Objective-C and Swift use reference counting. Kotlin/Native has its own garbage collection too. Kotlin/Native garbage collection is integrated with Objective-C/Swift reference counting. You do not need to use anything special to control the lifetime of Kotlin/Native instances from Swift or Objective-C.</p></section><section class="chapter"  ><h2 id="apple-framework.md-use-the-code-from-objective-c" data-toc="apple-framework#apple-framework.md-use-the-code-from-objective-c"  >Use the code from Objective-C</h2><p id="apple-framework.md-7a9fb0d5" >Let\'s call the framework from Objective-C. For that, create the <code class="code " id="apple-framework.md-b2cc0be5"  >main.m</code> file with the following content:</p><div class="code-block" data-lang="none" id="apple-framework.md-e15d9f83"      data-disable-link-processing="true"   >#import &lt;Foundation/Foundation.h&gt;\n#import &lt;Demo/Demo.h&gt;\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        [[DemoObject object] field];\n        \n        DemoClazz* clazz = [[ DemoClazz alloc] init];\n        [clazz memberP:42];\n        \n        [DemoLibKt forIntegersB:1 s:1 i:3 l:[DemoULong numberWithUnsignedLongLong:4]];\n        [DemoLibKt forIntegersB:1 s:1 i:3 l:nil];\n        \n        [DemoLibKt forFloatsF:2.71 d:[DemoDouble numberWithDouble:2.71]];\n        [DemoLibKt forFloatsF:2.71 d:nil];\n        \n        NSString* ret = [DemoLibKt acceptFunF:^NSString * _Nullable(NSString * it) {\n            return [it stringByAppendingString:@&quot; Kotlin is fun&quot;];\n        }];\n        \n        NSLog(@&quot;%@&quot;, ret);\n        return 0;\n    }\n}\n</div><p id="apple-framework.md-1e527e7d" >Here you call Kotlin classes directly from Objective-C code. A Kotlin <code class="code " id="apple-framework.md-56e68e41"  >object</code> has the class method function <code class="code " id="apple-framework.md-ced4597f"  >object</code>, which allows us to get the only instance of the object and to call <code class="code " id="apple-framework.md-79c9287f"  >Object</code> methods on it. The widespread pattern is used to create an instance of the <code class="code " id="apple-framework.md-e91ccc58"  >Clazz</code> class. You call the <code class="code " id="apple-framework.md-374ff978"  >[[ DemoClazz alloc] init]</code> on Objective-C. You may also use <code class="code " id="apple-framework.md-5b142197"  >[DemoClazz new]</code> for constructors without parameters. Global declarations from the Kotlin sources are scoped under the <code class="code " id="apple-framework.md-8597b635"  >DemoLibKt</code> class in Objective-C. All methods are turned into class methods of that class. The <code class="code " id="apple-framework.md-3d8cdbb4"  >strings</code> function is turned into <code class="code " id="apple-framework.md-988fa74e"  >DemoLibKt.stringsStr</code> function in Objective-C, you can pass <code class="code " id="apple-framework.md-8ac0337c"  >NSString</code> directly to it. The return is visible as <code class="code " id="apple-framework.md-5d60bc3d"  >NSString</code> too.</p></section><section class="chapter"  ><h2 id="apple-framework.md-use-the-code-from-swift" data-toc="apple-framework#apple-framework.md-use-the-code-from-swift"  >Use the code from Swift</h2><p id="apple-framework.md-cd327d14" >The framework that you compiled with Kotlin/Native has helper attributes to make it easier to use with Swift. Convert the previous Objective-C example into Swift. As a result, you\'ll have the following code in <code class="code " id="apple-framework.md-2e28cde6"  >main.swift</code>:</p><div class="code-block" data-lang="swift" id="apple-framework.md-f4be2522"         >import Foundation\nimport Demo\n\nlet kotlinObject = Object()\nassert(kotlinObject === Object(), &quot;Kotlin object has only one instance&quot;)\n\nlet field = Object().field\n\nlet clazz = Clazz()\nclazz.member(p: 42)\n\nLibKt.forIntegers(b: 1, s: 2, i: 3, l: 4)\nLibKt.forFloats(f: 2.71, d: nil)\n\nlet ret = LibKt.acceptFun { &quot;\\($0) Kotlin is fun&quot; }\nif (ret != nil) {\n  print(ret!)\n}\n</div><p id="apple-framework.md-14dd2913" >The Kotlin code is turned into very similar looking code in Swift. There are some small differences, though. In Kotlin any <code class="code " id="apple-framework.md-b3019877"  >object</code> has only one instance. Kotlin <code class="code " id="apple-framework.md-17edfc40"  >object Object</code> now has a constructor in Swift, and we use the <code class="code " id="apple-framework.md-ccdf17a3"  >Object()</code> syntax to access the only instance of it. The instance is always the same in Swift, so that <code class="code " id="apple-framework.md-9b5e8e43"  >Object() === Object()</code> is true. Methods and property names are translated as-is. Kotlin <code class="code " id="apple-framework.md-10707b66"  >String</code> is turned into Swift <code class="code " id="apple-framework.md-60e1ea08"  >String</code> too. Swift hides <code class="code " id="apple-framework.md-90f44c95"  >NSNumber*</code> boxing from us too. We pass Swift closure to Kotlin and call a Kotlin lambda function from Swift too.</p><p id="apple-framework.md-2e2013ff" >More documentation on the types mapping can be found in the <a href="#native-objc-interop.md" id="apple-framework.md-378643f3"   >Objective-C Interop</a> article.</p></section><section class="chapter"  ><h2 id="apple-framework.md-xcode-and-framework-dependencies" data-toc="apple-framework#apple-framework.md-xcode-and-framework-dependencies"  >Xcode and framework dependencies</h2><p id="apple-framework.md-dbe83b13" >You need to configure an Xcode project to use our framework. The configuration depends on the target platform.</p><section class="chapter"  ><h3 id="apple-framework.md-xcode-for-macos-target" data-toc="apple-framework#apple-framework.md-xcode-for-macos-target"  >Xcode for macOS target</h3><p id="apple-framework.md-4ac0c2dd" >First, you need to include the framework in the <code class="code " id="apple-framework.md-75a10113"  >General</code> section of the <em id="apple-framework.md-c2369112" class=""  >target</em> configuration. There is the <code class="code " id="apple-framework.md-78ea988c"  >Linked Frameworks and Libraries</code> section to include our framework. This will make Xcode look at our framework and resolve imports both from Objective-C and Swift.</p><p id="apple-framework.md-e01e11c7" >The second step is to configure the framework search path of the produced binary. It is also known as <code class="code " id="apple-framework.md-7d983cfb"  >rpath</code> or <a href="https://en.wikipedia.org/wiki/Rpath" id="apple-framework.md-21484ee2"   data-external="true" rel="noopener noreferrer" >run-time search path</a>. The binary uses the path to look for the required frameworks. We do not recommend installing additional frameworks to the OS if it is not needed. You should understand the layout of your future application, for example, you may have the <code class="code " id="apple-framework.md-1ebc44fd"  >Frameworks</code> folder under the application bundle with all the frameworks you use. The <code class="code " id="apple-framework.md-39731045"  >@rpath</code> parameter can be configured in Xcode. You need to open the <em id="apple-framework.md-e882423b" class=""  >project</em> configuration and find the <code class="code " id="apple-framework.md-63d150c5"  >Runpath Search Paths</code> section. Here you specify the relative path to the compiled framework.</p></section><section class="chapter"  ><h3 id="apple-framework.md-xcode-for-ios-targets" data-toc="apple-framework#apple-framework.md-xcode-for-ios-targets"  >Xcode for iOS targets</h3><p id="apple-framework.md-99b708ad" >First, you need to include the compiled framework into the Xcode project. For this, add the framework to the <code class="code " id="apple-framework.md-7be0fe06"  >Embedded Binaries</code> block of the <code class="code " id="apple-framework.md-c93823f1"  >General</code> section of the <em id="apple-framework.md-b9c10eef" class=""  >target</em> configuration page.</p><p id="apple-framework.md-6cfc6ee3" >The second step is to then include the framework path into the <code class="code " id="apple-framework.md-36d95db"  >Framework Search Paths</code> block of the <code class="code " id="apple-framework.md-70a241e4"  >Build Settings</code> section of the <em id="apple-framework.md-5104ceb2" class=""  >target</em> configuration page. It is possible to use <code class="code " id="apple-framework.md-350b0668"  >$(PROJECT_DIR)</code> macro to simplify the setup.</p><p id="apple-framework.md-f9731689" >The iOS simulator requires a framework compiled for the <code class="code " id="apple-framework.md-1eca82c7"  >ios_x64</code> target, the <code class="code " id="apple-framework.md-c953897d"  >iOS_sim</code> folder in our case.</p><p id="apple-framework.md-a7feef6a" ><a href="https://stackoverflow.com/questions/30963294/creating-ios-osx-frameworks-is-it-necessary-to-codesign-them-before-distributin" id="apple-framework.md-f5c784e1"   data-external="true" rel="noopener noreferrer" >This Stackoverflow thread</a> contains few more recommendations. Also, <a href="https://cocoapods.org/" id="apple-framework.md-28616ebe"   data-external="true" rel="noopener noreferrer" >CocoaPods</a> package manager may be helpful to automate the process too.</p></section></section><section class="chapter"  ><h2 id="apple-framework.md-next-steps" data-toc="apple-framework#apple-framework.md-next-steps"  >Next steps</h2><p id="apple-framework.md-91a0a984" >Kotlin/Native has bidirectional interop with Objective-C and Swift languages. Kotlin objects integrate with Objective-C/Swift reference counting. Unused Kotlin objects are automatically removed. The <a href="#native-objc-interop.md" id="apple-framework.md-ad5ccf04"   >Objective-C Interop</a> article contains more information on the interop implementation details. Of course, it is possible to import an existing framework and use it from Kotlin. Kotlin/Native comes with a good set of pre-imported system frameworks.</p><p id="apple-framework.md-60c04c3a" >Kotlin/Native supports C interop too. Check out the <a href="#native-dynamic-libraries.md" id="apple-framework.md-edb2e3a2"   >Kotlin/Native as a Dynamic Library</a> tutorial for that.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="native-debugging.md"  >Debugging Kotlin/Native</h1><p id="native-debugging.md-b871f6f1" >Currently, the Kotlin/Native compiler produces debug info compatible with the DWARF 2 specification, so modern debugger tools can perform the following operations:</p><ul class="list _ul" id="native-debugging.md-97fbdeff"   ><li class="list__item" id="native-debugging.md-2acdf02b" ><p>breakpoints</p></li><li class="list__item" id="native-debugging.md-d8f2c492" ><p>stepping</p></li><li class="list__item" id="native-debugging.md-28328c43" ><p>inspection of type information</p></li><li class="list__item" id="native-debugging.md-83b8d037" ><p>variable inspection</p></li></ul><aside data-type="note" class="prompt" data-title="" id="native-debugging.md-2acc3547" ><p id="native-debugging.md-51bf1628" >Supporting the DWARF 2 specification means that the debugger tool recognizes Kotlin as C89, because before the DWARF 5 specification, there is no identifier for the Kotlin language type in specification.</p></aside><section class="chapter"  ><h2 id="native-debugging.md-produce-binaries-with-debug-info-with-kotlin-native-compiler" data-toc="native-debugging#native-debugging.md-produce-binaries-with-debug-info-with-kotlin-native-compiler"  >Produce binaries with debug info with Kotlin/Native compiler</h2><p id="native-debugging.md-b257ea50" >To produce binaries with the Kotlin/Native compiler, use the <code class="code " id="native-debugging.md-eb4d7b0e"  >-g</code> option on the command line.</p><div class="code-block" data-lang="bash" id="native-debugging.md-591742ae"         >0:b-debugger-fixes:minamoto@unit-703(0)# cat - &gt; hello.kt\nfun main(args: Array&lt;String&gt;) {\n  println(&quot;Hello world&quot;)\n  println(&quot;I need your clothes, your boots and your motocycle&quot;)\n}\n0:b-debugger-fixes:minamoto@unit-703(0)# dist/bin/konanc -g hello.kt -o terminator\nKtFile: hello.kt\n0:b-debugger-fixes:minamoto@unit-703(0)# lldb terminator.kexe\n(lldb) target create &quot;terminator.kexe&quot;\nCurrent executable set to \'terminator.kexe\' (x86_64).\n(lldb) b kfun:main(kotlin.Array&lt;kotlin.String&gt;)\nBreakpoint 1: where = terminator.kexe`kfun:main(kotlin.Array&lt;kotlin.String&gt;) + 4 at hello.kt:2, address = 0x00000001000012e4\n(lldb) r\nProcess 28473 launched: \'/Users/minamoto/ws/.git-trees/debugger-fixes/terminator.kexe\' (x86_64)\nProcess 28473 stopped\n* thread #1, queue = \'com.apple.main-thread\', stop reason = breakpoint 1.1\n    frame #0: 0x00000001000012e4 terminator.kexe`kfun:main(kotlin.Array&lt;kotlin.String&gt;) at hello.kt:2\n   1    fun main(args: Array&lt;String&gt;) {\n-&gt; 2      println(&quot;Hello world&quot;)\n   3      println(&quot;I need your clothes, your boots and your motocycle&quot;)\n   4    }\n(lldb) n\nHello world\nProcess 28473 stopped\n* thread #1, queue = \'com.apple.main-thread\', stop reason = step over\n    frame #0: 0x00000001000012f0 terminator.kexe`kfun:main(kotlin.Array&lt;kotlin.String&gt;) at hello.kt:3\n   1    fun main(args: Array&lt;String&gt;) {\n   2      println(&quot;Hello world&quot;)\n-&gt; 3      println(&quot;I need your clothes, your boots and your motocycle&quot;)\n   4    }\n(lldb)\n</div></section><section class="chapter"  ><h2 id="native-debugging.md-breakpoints" data-toc="native-debugging#native-debugging.md-breakpoints"  >Breakpoints</h2><p id="native-debugging.md-f573b4ef" >Modern debuggers provide several ways to set a breakpoint, see below for a tool-by-tool breakdown:</p><section class="chapter"  ><h3 id="native-debugging.md-lldb" data-toc="native-debugging#native-debugging.md-lldb"  >lldb</h3><ul class="list _ul" id="native-debugging.md-c41bee22"   ><li class="list__item" id="native-debugging.md-f1c716c0" ><p id="native-debugging.md-de271cb9" >by name</p><div class="code-block" data-lang="bash" id="native-debugging.md-48f2192d"         >(lldb) b -n kfun:main(kotlin.Array&lt;kotlin.String&gt;)\nBreakpoint 4: where = terminator.kexe`kfun:main(kotlin.Array&lt;kotlin.String&gt;) + 4 at hello.kt:2, address = 0x00000001000012e4\n</div></li></ul><p id="native-debugging.md-5d67b081" ><em id="native-debugging.md-b03d349a" class=""  ><code class="code " id="native-debugging.md-6b05bce7"  >-n</code> is optional, this flag is applied by default</em></p><ul class="list _ul" id="native-debugging.md-8c40eb22"   ><li class="list__item" id="native-debugging.md-95507fe8" ><p id="native-debugging.md-4c91e4e2" >by location (filename, line number)</p><div class="code-block" data-lang="bash" id="native-debugging.md-fc729ddd"         >(lldb) b -f hello.kt -l 1\nBreakpoint 1: where = terminator.kexe`kfun:main(kotlin.Array&lt;kotlin.String&gt;) + 4 at hello.kt:2, address = 0x00000001000012e4\n</div></li><li class="list__item" id="native-debugging.md-ebefd7a9" ><p id="native-debugging.md-57510463" >by address</p><div class="code-block" data-lang="bash" id="native-debugging.md-96fba385"         >(lldb) b -a 0x00000001000012e4\nBreakpoint 2: address = 0x00000001000012e4\n</div></li><li class="list__item" id="native-debugging.md-43cea9e5" ><p id="native-debugging.md-fc526cab" >by regex, you might find it useful for debugging generated artifacts, like lambda etc. (where used <code class="code " id="native-debugging.md-aa6dbbc4"  >#</code> symbol in name).</p><div class="code-block" data-lang="bash" id="native-debugging.md-6fda427f"         >3: regex = \'main\\(\', locations = 1\n  3.1: where = terminator.kexe`kfun:main(kotlin.Array&lt;kotlin.String&gt;) + 4 at hello.kt:2, address = terminator.kexe[0x00000001000012e4], unresolved, hit count = 0\n</div></li></ul></section><section class="chapter"  ><h3 id="native-debugging.md-gdb" data-toc="native-debugging#native-debugging.md-gdb"  >gdb</h3><ul class="list _ul" id="native-debugging.md-c6f52346"   ><li class="list__item" id="native-debugging.md-8ec51cd2" ><p id="native-debugging.md-47a129a3" >by regex</p><div class="code-block" data-lang="bash" id="native-debugging.md-c29af38e"         >(gdb) rbreak main(\nBreakpoint 1 at 0x1000109b4\nstruct ktype:kotlin.Unit &amp;kfun:main(kotlin.Array&lt;kotlin.String&gt;);\n</div></li><li class="list__item" id="native-debugging.md-9dfb7dec" ><p id="native-debugging.md-b516425f" >by name <b id="native-debugging.md-d98c83a6" class=""  >unusable</b>, because <code class="code " id="native-debugging.md-2566b928"  >:</code> is a separator for the breakpoint by location</p><div class="code-block" data-lang="bash" id="native-debugging.md-e2e2af48"         >(gdb) b kfun:main(kotlin.Array&lt;kotlin.String&gt;)\nNo source file named kfun.\nMake breakpoint pending on future shared library load? (y or [n]) y\nBreakpoint 1 (kfun:main(kotlin.Array&lt;kotlin.String&gt;)) pending\n</div></li><li class="list__item" id="native-debugging.md-fbfbfb3a" ><p id="native-debugging.md-fed05e02" >by location</p><div class="code-block" data-lang="bash" id="native-debugging.md-59272ae"         >(gdb) b hello.kt:1\nBreakpoint 2 at 0x100001704: file /Users/minamoto/ws/.git-trees/hello.kt, line 1.\n</div></li><li class="list__item" id="native-debugging.md-a0331875" ><p id="native-debugging.md-2903324a" >by address</p><div class="code-block" data-lang="bash" id="native-debugging.md-5ca51c41"         >(gdb) b *0x100001704\nNote: breakpoint 2 also set at pc 0x100001704.\nBreakpoint 3 at 0x100001704: file /Users/minamoto/ws/.git-trees/hello.kt, line 2.\n</div></li></ul></section></section><section class="chapter"  ><h2 id="native-debugging.md-stepping" data-toc="native-debugging#native-debugging.md-stepping"  >Stepping</h2><p id="native-debugging.md-47059793" >Stepping functions works mostly the same way as for C/C++ programs.</p></section><section class="chapter"  ><h2 id="native-debugging.md-variable-inspection" data-toc="native-debugging#native-debugging.md-variable-inspection"  >Variable inspection</h2><p id="native-debugging.md-ddd11b64" >Variable inspections for <code class="code " id="native-debugging.md-7486f7e0"  >var</code> variables works out of the box for primitive types. For non-primitive types there are custom pretty printers for lldb in <code class="code " id="native-debugging.md-7f6a6e9b"  >konan_lldb.py</code>:</p><div class="code-block" data-lang="bash" id="native-debugging.md-dd342123"         >λ cat main.kt | nl\n     1  fun main(args: Array&lt;String&gt;) {\n     2      var x = 1\n     3      var y = 2\n     4      var p = Point(x, y)\n     5      println(&quot;p = $p&quot;)\n     6  }\n       \n     7  data class Point(val x: Int, val y: Int)\n\nλ lldb ./program.kexe -o \'b main.kt:5\' -o\n(lldb) target create &quot;./program.kexe&quot;\nCurrent executable set to \'./program.kexe\' (x86_64).\n(lldb) b main.kt:5\nBreakpoint 1: where = program.kexe`kfun:main(kotlin.Array&lt;kotlin.String&gt;) + 289 at main.kt:5, address = 0x000000000040af11\n(lldb) r\nProcess 4985 stopped\n* thread #1, name = \'program.kexe\', stop reason = breakpoint 1.1\n    frame #0: program.kexe`kfun:main(kotlin.Array&lt;kotlin.String&gt;) at main.kt:5\n   2        var x = 1\n   3        var y = 2\n   4        var p = Point(x, y)\n-&gt; 5        println(&quot;p = $p&quot;)\n   6    }\n   7   \n   8    data class Point(val x: Int, val y: Int)\n\nProcess 4985 launched: \'./program.kexe\' (x86_64)\n(lldb) fr var\n(int) x = 1\n(int) y = 2\n(ObjHeader *) p = 0x00000000007643d8\n(lldb) command script import dist/tools/konan_lldb.py\n(lldb) fr var\n(int) x = 1\n(int) y = 2\n(ObjHeader *) p = [x: ..., y: ...]\n(lldb) p p\n(ObjHeader *) $2 = [x: ..., y: ...]\n(lldb) script lldb.frame.FindVariable(&quot;p&quot;).GetChildMemberWithName(&quot;x&quot;).Dereference().GetValue()\n\'1\'\n(lldb) \n</div><p id="native-debugging.md-ae581b44" >Getting representation of the object variable (var) could also be done using the built-in runtime function <code class="code " id="native-debugging.md-32556a07"  >Konan_DebugPrint</code> (this approach also works for gdb, using a module of command syntax):</p><div class="code-block" data-lang="bash" id="native-debugging.md-ab118948"         >0:b-debugger-fixes:minamoto@unit-703(0)# cat ../debugger-plugin/1.kt | nl -p\n     1  fun foo(a:String, b:Int) = a + b\n     2  fun one() = 1\n     3  fun main(arg:Array&lt;String&gt;) {\n     4    var a_variable = foo(&quot;(a_variable) one is &quot;, 1)\n     5    var b_variable = foo(&quot;(b_variable) two is &quot;, 2)\n     6    var c_variable = foo(&quot;(c_variable) two is &quot;, 3)\n     7    var d_variable = foo(&quot;(d_variable) two is &quot;, 4)\n     8    println(a_variable)\n     9    println(b_variable)\n    10    println(c_variable)\n    11    println(d_variable)\n    12  }\n0:b-debugger-fixes:minamoto@unit-703(0)# lldb ./program.kexe -o \'b -f 1.kt -l 9\' -o r\n(lldb) target create &quot;./program.kexe&quot;\nCurrent executable set to \'./program.kexe\' (x86_64).\n(lldb) b -f 1.kt -l 9\nBreakpoint 1: where = program.kexe`kfun:main(kotlin.Array&lt;kotlin.String&gt;) + 463 at 1.kt:9, address = 0x0000000100000dbf\n(lldb) r\n(a_variable) one is 1\nProcess 80496 stopped\n* thread #1, queue = \'com.apple.main-thread\', stop reason = breakpoint 1.1\n    frame #0: 0x0000000100000dbf program.kexe`kfun:main(kotlin.Array&lt;kotlin.String&gt;) at 1.kt:9\n   6      var c_variable = foo(&quot;(c_variable) two is &quot;, 3)\n   7      var d_variable = foo(&quot;(d_variable) two is &quot;, 4)\n   8      println(a_variable)\n-&gt; 9      println(b_variable)\n   10     println(c_variable)\n   11     println(d_variable)\n   12   }\n\nProcess 80496 launched: \'./program.kexe\' (x86_64)\n(lldb) expression -- (int32_t)Konan_DebugPrint(a_variable)\n(a_variable) one is 1(int32_t) $0 = 0\n(lldb)\n\n</div></section><section class="chapter"  ><h2 id="native-debugging.md-known-issues" data-toc="native-debugging#native-debugging.md-known-issues"  >Known issues</h2><ul class="list _ul" id="native-debugging.md-60a6847e"   ><li class="list__item" id="native-debugging.md-ea832a45" ><p>performance of Python bindings.</p></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="native-ios-symbolication.md"  >Symbolicating iOS crash reports</h1><p id="native-ios-symbolication.md-d820e694" >Debugging an iOS application crash sometimes involves analyzing crash reports. More info about crash reports can be found in the <a href="https://developer.apple.com/library/archive/technotes/tn2151/_index.html" id="native-ios-symbolication.md-889652d6"   data-external="true" rel="noopener noreferrer" >Apple documentation</a>.</p><p id="native-ios-symbolication.md-c4d7ce2d" >Crash reports generally require symbolication to become properly readable: symbolication turns machine code addresses into human-readable source locations. The document below describes some specific details of symbolicating crash reports from iOS applications using Kotlin.</p><section class="chapter"  ><h2 id="native-ios-symbolication.md-producing-dsym-for-release-kotlin-binaries" data-toc="native-ios-symbolication#native-ios-symbolication.md-producing-dsym-for-release-kotlin-binaries"  >Producing .dSYM for release Kotlin binaries</h2><p id="native-ios-symbolication.md-9af37456" >To symbolicate addresses in Kotlin code (e.g. for stack trace elements corresponding to Kotlin code) <code class="code " id="native-ios-symbolication.md-894af793"  >.dSYM</code> bundle for Kotlin code is required.</p><p id="native-ios-symbolication.md-f7531af4" >By default, Kotlin/Native compiler produces <code class="code " id="native-ios-symbolication.md-94b54598"  >.dSYM</code> for release (i.e. optimized) binaries on Darwin platforms. This can be disabled with <code class="code " id="native-ios-symbolication.md-b6781c4c"  >-Xadd-light-debug=disable</code> compiler flag. At the same time, this option is disabled by default for other platforms. To enable it, use the <code class="code " id="native-ios-symbolication.md-e27418c"  >-Xadd-light-debug=enable</code> compiler option.</p><div class="tabs" id="native-ios-symbolication.md-68465546" ><div class="tabs__content" data-gtm="tab" id="native-ios-symbolication.md-f73f8da2"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="native-ios-symbolication.md-f73f8da2"   data-title="Groovy"      >kotlin {\n    targets.withType(org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget) {\n        binaries.all {\n            freeCompilerArgs += &quot;-Xadd-light-debug={enable|disable}&quot;\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="native-ios-symbolication.md-d0e420dc"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="native-ios-symbolication.md-d0e420dc"   data-title="Kotlin"      >kotlin {\n    targets.withType&lt;org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget&gt; {\n        binaries.all {\n            freeCompilerArgs += &quot;-Xadd-light-debug={enable|disable}&quot;\n        }\n    }\n}\n</div></div></div><p id="native-ios-symbolication.md-be10196b" >In projects created from IntelliJ IDEA or AppCode templates these <code class="code " id="native-ios-symbolication.md-f901c371"  >.dSYM</code> bundles are then discovered by Xcode automatically.</p></section><section class="chapter"  ><h2 id="native-ios-symbolication.md-make-frameworks-static-when-using-rebuild-from-bitcode" data-toc="native-ios-symbolication#native-ios-symbolication.md-make-frameworks-static-when-using-rebuild-from-bitcode"  >Make frameworks static when using rebuild from bitcode</h2><p id="native-ios-symbolication.md-ce3b1ea1" >Rebuilding Kotlin-produced framework from bitcode invalidates the original <code class="code " id="native-ios-symbolication.md-913f3eb4"  >.dSYM</code>. If it is performed locally, make sure the updated <code class="code " id="native-ios-symbolication.md-3e3bc421"  >.dSYM</code> is used when symbolicating crash reports.</p><p id="native-ios-symbolication.md-5142671b" >If rebuilding is performed on App Store side, then <code class="code " id="native-ios-symbolication.md-67262e94"  >.dSYM</code> of rebuilt <em id="native-ios-symbolication.md-b46de099" class=""  >dynamic</em> framework seems discarded and not downloadable from App Store Connect. In this case, it may be required to make the framework static.</p><div class="tabs" id="native-ios-symbolication.md-efa6e22b" ><div class="tabs__content" data-gtm="tab" id="native-ios-symbolication.md-23d04b42"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="native-ios-symbolication.md-23d04b42"   data-title="Groovy"      >kotlin {\n    targets.withType(org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget) {\n        binaries.withType(org.jetbrains.kotlin.gradle.plugin.mpp.Framework) {\n            isStatic = true\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="native-ios-symbolication.md-724273d8"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="native-ios-symbolication.md-724273d8"   data-title="Kotlin"      >kotlin {\n    targets.withType&lt;org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget&gt; {\n        binaries.withType&lt;org.jetbrains.kotlin.gradle.plugin.mpp.Framework&gt; {\n            isStatic = true\n        }\n    }\n}\n</div></div></div></section><section class="chapter"  ><h2 id="native-ios-symbolication.md-decode-inlined-stack-frames" data-toc="native-ios-symbolication#native-ios-symbolication.md-decode-inlined-stack-frames"  >Decode inlined stack frames</h2><p id="native-ios-symbolication.md-d752a588" >Xcode doesn\'t seem to properly decode stack trace elements of inlined function calls (these aren\'t only Kotlin <code class="code " id="native-ios-symbolication.md-c012110a"  >inline</code> functions but also functions that are inlined when optimizing machine code). So some stack trace elements may be missing. If this is the case, consider using <code class="code " id="native-ios-symbolication.md-d9fa9347"  >lldb</code> to process crash report that is already symbolicated by Xcode, for example:</p><div class="code-block" data-lang="bash" id="native-ios-symbolication.md-1efb8792"         >$ lldb -b -o &quot;script import lldb.macosx&quot; -o &quot;crashlog file.crash&quot;\n</div><p id="native-ios-symbolication.md-a63f73fd" >This command should output crash report that is additionally processed and includes inlined stack trace elements.</p><p id="native-ios-symbolication.md-3134039" >More details can be found in <a href="https://lldb.llvm.org/use/symbolication.html" id="native-ios-symbolication.md-382f5f9e"   data-external="true" rel="noopener noreferrer" >LLDB documentation</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="native-improving-compilation-time.md"  >Tips for improving Kotlin/Native compilation time</h1><p id="native-improving-compilation-time.md-a871c8b4" >The Kotlin/Native compiler is constantly receiving updates that improve its performance. With the latest Kotlin/Native compiler and a properly configured build environment, you can significantly improve the compilation time of your projects with Kotlin/Native targets.</p><p id="native-improving-compilation-time.md-b8523a4" >Read on for our tips on how to speed up the Kotlin/Native compilation process.</p><section class="chapter"  ><h2 id="native-improving-compilation-time.md-general-recommendations" data-toc="native-improving-compilation-time#native-improving-compilation-time.md-general-recommendations"  >General recommendations</h2><ul class="list _ul" id="native-improving-compilation-time.md-f47d091e"   ><li class="list__item" id="native-improving-compilation-time.md-7cd137ef" ><p id="native-improving-compilation-time.md-f9275a4b" ><b id="native-improving-compilation-time.md-640f9637" class=""  >Use the most recent version of Kotlin</b>. This way you will always have the latest performance improvements.</p></li><li class="list__item" id="native-improving-compilation-time.md-b716161" ><p id="native-improving-compilation-time.md-4e7e68e5" ><b id="native-improving-compilation-time.md-e5799e09" class=""  >Avoid creating huge classes</b>. They take a long time to compile and load during execution.</p></li><li class="list__item" id="native-improving-compilation-time.md-8757b56b" ><p id="native-improving-compilation-time.md-9fc861d3" ><b id="native-improving-compilation-time.md-588752c6" class=""  >Preserve downloaded and cached components between builds</b>. When compiling projects, Kotlin/Native downloads the required components and caches some results of its work to the <code class="code " id="native-improving-compilation-time.md-a3e03dc3"  >$USER_HOME/.konan</code> directory. The compiler uses this directory for subsequent compilations, making them take less time to complete.</p><p id="native-improving-compilation-time.md-ffb31183" >When building in containers (such as Docker) or with continuous integration systems, the compiler may have to create the <code class="code " id="native-improving-compilation-time.md-1197c0af"  >~/.konan</code> directory from scratch for each build. To avoid this step, configure your environment to preserve <code class="code " id="native-improving-compilation-time.md-e24f1a9d"  >~/.konan</code> between builds. For example, redefine its location using the <code class="code " id="native-improving-compilation-time.md-27145322"  >KONAN_DATA_DIR</code> environment variable.</p></li></ul></section><section class="chapter"  ><h2 id="native-improving-compilation-time.md-gradle-configuration" data-toc="native-improving-compilation-time#native-improving-compilation-time.md-gradle-configuration"  >Gradle configuration</h2><p id="native-improving-compilation-time.md-ad316ca0" >The first compilation with Gradle usually takes more time than subsequent ones due to the need to download the dependencies, build caches, and perform additional steps. You should build your project at least twice to get an accurate reading of the actual compilation times.</p><p id="native-improving-compilation-time.md-2ee7fa62" >Here are some recommendations for configuring Gradle for better compilation performance:</p><ul class="list _ul" id="native-improving-compilation-time.md-e6462f96"   ><li class="list__item" id="native-improving-compilation-time.md-b1b9c451" ><p id="native-improving-compilation-time.md-cc613728" ><b id="native-improving-compilation-time.md-29e20726" class=""  >Increase the <a href="https://docs.gradle.org/current/userguide/performance.html#adjust_the_daemons_heap_size" id="native-improving-compilation-time.md-1ed85ca6"   data-external="true" rel="noopener noreferrer" >Gradle heap size</a></b>. Add <code class="code " id="native-improving-compilation-time.md-f4ebbaac"  >org.gradle.jvmargs=-Xmx3g</code> to <code class="code " id="native-improving-compilation-time.md-c6490f30"  >gradle.properties</code>. If you use <a href="https://docs.gradle.org/current/userguide/performance.html#parallel_execution" id="native-improving-compilation-time.md-6f9820c8"   data-external="true" rel="noopener noreferrer" >parallel builds</a>, you might need to make the heap even larger or choose the right number of threads with <code class="code " id="native-improving-compilation-time.md-14db9081"  >org.gradle.parallel.threads</code>.</p></li><li class="list__item" id="native-improving-compilation-time.md-3f23d784" ><p id="native-improving-compilation-time.md-a0100af7" ><b id="native-improving-compilation-time.md-ff2d5cc1" class=""  >Build only the binaries you need</b>. Don\'t run Gradle tasks that build the whole project, such as <code class="code " id="native-improving-compilation-time.md-eec4f9c2"  >build</code> or <code class="code " id="native-improving-compilation-time.md-94b1b437"  >assemble</code>, unless you really need to. These tasks build the same code multiple times, increasing the compilation time. In typical cases such as running tests from IntelliJ IDEA or starting the app from Xcode, the Kotlin tooling avoids executing unnecessary tasks.</p><p id="native-improving-compilation-time.md-a845c0b1" >If you have a non-typical case or build configuration, you might need to choose the task yourself.</p><ul class="list _ul" id="native-improving-compilation-time.md-5b54c7a2"   ><li class="list__item" id="native-improving-compilation-time.md-6ef0c3b6" ><p id="native-improving-compilation-time.md-a2de9222" ><code class="code " id="native-improving-compilation-time.md-a35e6e9c"  >linkDebug*</code>: To run your code during development, you usually need only one binary, so running the corresponding <code class="code " id="native-improving-compilation-time.md-f72f62fe"  >linkDebug*</code> task should be enough. Keep in mind that compiling a release binary (<code class="code " id="native-improving-compilation-time.md-712c578a"  >linkRelease*</code>) takes more time than compiling a debug one.</p></li><li class="list__item" id="native-improving-compilation-time.md-29d75179" ><p id="native-improving-compilation-time.md-7b838b41" ><code class="code " id="native-improving-compilation-time.md-6a66aa5e"  >packForXcode</code>: Since iOS simulators and devices have different processor architectures, it\'s a common approach to distribute a Kotlin/Native binary as a universal (fat) framework. During local development, it will be faster to build the <code class="code " id="native-improving-compilation-time.md-16643035"  >.framework</code> for only the platform you’re using.</p><p id="native-improving-compilation-time.md-d03e815b" >To build a platform-specific framework, call the <code class="code " id="native-improving-compilation-time.md-baa695f9"  >packForXcode</code> task generated by the <a href="https://kotlinlang.org/docs/mobile/create-first-app.html" id="native-improving-compilation-time.md-435f377"   data-external="true" rel="noopener noreferrer" >KMM project wizard</a>.</p><aside data-type="note" class="prompt" data-title="" id="native-improving-compilation-time.md-94008894" ><p id="native-improving-compilation-time.md-7346dd20" >Remember that in this case, you will need to clean the build using <code class="code " id="native-improving-compilation-time.md-d3d1ebb2"  >./gradlew clean</code> after switching between the device and the simulator. See <a href="https://youtrack.jetbrains.com/issue/KT-40907" id="native-improving-compilation-time.md-bead1d9e"   data-external="true" rel="noopener noreferrer" >this issue</a> for details.</p></aside></li></ul></li><li class="list__item" id="native-improving-compilation-time.md-7dc47d6" ><p id="native-improving-compilation-time.md-e367caf5" ><b id="native-improving-compilation-time.md-ae2ba3f3" class=""  >Don’t disable the <a href="https://docs.gradle.org/current/userguide/gradle_daemon.html" id="native-improving-compilation-time.md-392a447b"   data-external="true" rel="noopener noreferrer" >Gradle daemon</a></b> without having a good reason to. <a href="https://blog.jetbrains.com/kotlin/2020/03/kotlin-1-3-70-released/#kotlin-native" id="native-improving-compilation-time.md-4a93d01a"   data-external="true" rel="noopener noreferrer" >Kotlin/Native runs from the Gradle daemon</a> by default. When it’s enabled, the same JVM process is used and there is no need to warm it up for each compilation.</p></li><li class="list__item" id="native-improving-compilation-time.md-f4c2afab" ><p id="native-improving-compilation-time.md-c8daba1d" ><b id="native-improving-compilation-time.md-e6af69fd" class=""  >Use the Gradle <a href="https://docs.gradle.org/current/userguide/build_cache.html" id="native-improving-compilation-time.md-e59f9355"   data-external="true" rel="noopener noreferrer" >build caches</a></b>:</p><ul class="list _ul" id="native-improving-compilation-time.md-24692bcb"   ><li class="list__item" id="native-improving-compilation-time.md-5b3f06f2" ><p><b id="native-improving-compilation-time.md-8d944b8d" class=""  >Local build cache</b>: Add <code class="code " id="native-improving-compilation-time.md-db889279"  >org.gradle.caching=true</code> to your <code class="code " id="native-improving-compilation-time.md-6e2195ed"  >gradle.properties</code> or run with <code class="code " id="native-improving-compilation-time.md-7cf0ce5b"  >--build-cache</code> on the command line.</p></li><li class="list__item" id="native-improving-compilation-time.md-9163d685" ><p><b id="native-improving-compilation-time.md-4c32ad3" class=""  >Remote build cache</b> in continuous integration environments. Learn how to <a href="https://docs.gradle.org/current/userguide/build_cache.html#sec:build_cache_configure_remote" id="native-improving-compilation-time.md-7a484649"   data-external="true" rel="noopener noreferrer" >configure the remote build cache</a>.</p></li></ul></li><li class="list__item" id="native-improving-compilation-time.md-1d04e565" ><p id="native-improving-compilation-time.md-f8b7efe3" ><b id="native-improving-compilation-time.md-359ed5b4" class=""  >Use the compiler caches</b>. Starting from 1.5.0-M1, <code class="code " id="native-improving-compilation-time.md-e41878e"  >linuxX64</code> and <code class="code " id="native-improving-compilation-time.md-1c5eb48c"  >iosArm64</code> targets have experimental opt-in support for compiler caches. They improve compilation time for debug builds (for <code class="code " id="native-improving-compilation-time.md-5edd8339"  >linuxX64</code>, this feature is only available on Linux hosts). To enable the compiler caches, add <code class="code " id="native-improving-compilation-time.md-e77fbe53"  >kotlin.native.cacheKind.linuxX64=static</code> or <code class="code " id="native-improving-compilation-time.md-bcd940f2"  >kotlin.native.cacheKind.iosArm64=static</code> to <code class="code " id="native-improving-compilation-time.md-7ba99a3c"  >gradle.properties</code>.</p><p id="native-improving-compilation-time.md-df360ce8" ><code class="code " id="native-improving-compilation-time.md-938151f1"  >iosX64</code> and <code class="code " id="native-improving-compilation-time.md-a42aad8a"  >macosX64</code> targets already have the compiler caches enabled by default.</p></li><li class="list__item" id="native-improving-compilation-time.md-3f277194" ><p id="native-improving-compilation-time.md-d5eb138d" ><b id="native-improving-compilation-time.md-8cef2e3e" class=""  >Enable previously disabled features of Kotlin/Native</b>. There are properties that disable the Gradle daemon and compiler caches – <code class="code " id="native-improving-compilation-time.md-957bb4db"  >kotlin.native.disableCompilerDaemon=true</code> and <code class="code " id="native-improving-compilation-time.md-791a416c"  >kotlin.native.cacheKind=none</code>. If you had issues with these features before and added these lines to your <code class="code " id="native-improving-compilation-time.md-11db44ba"  >gradle.properties</code> or Gradle arguments, remove them and check whether the build completes successfully. It is possible that these properties were added previously to work around issues that have already been fixed.</p></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="native-faq.md"  >Kotlin/Native FAQ</h1><section class="chapter"  ><h2 id="native-faq.md-how-do-i-run-my-program" data-toc="native-faq#native-faq.md-how-do-i-run-my-program"  >How do I run my program?</h2><p id="native-faq.md-d6e81e45" >Define a top-level function <code class="code " id="native-faq.md-d8f411fb"  >fun main(args: Array&lt;String&gt;)</code> or just <code class="code " id="native-faq.md-261cb8b0"  >fun main()</code> if you are not interested in passed arguments, please ensure it\'s not in a package. Also compiler switch <code class="code " id="native-faq.md-236b5799"  >-entry</code> could be used to make any function taking <code class="code " id="native-faq.md-bdf028e8"  >Array&lt;String&gt;</code> or no arguments and return <code class="code " id="native-faq.md-4b4b3e0"  >Unit</code> as an entry point.</p></section><section class="chapter"  ><h2 id="native-faq.md-what-is-kotlin-native-memory-management-model" data-toc="native-faq#native-faq.md-what-is-kotlin-native-memory-management-model"  >What is Kotlin/Native memory management model?</h2><p id="native-faq.md-ac95cb1" >Kotlin/Native provides an automated memory management scheme, similar to what Java or Swift provides. The current implementation includes an automated reference counter with a cycle collector to collect cyclical garbage.</p></section><section class="chapter"  ><h2 id="native-faq.md-how-do-i-create-a-shared-library" data-toc="native-faq#native-faq.md-how-do-i-create-a-shared-library"  >How do I create a shared library?</h2><p id="native-faq.md-58a81e1a" >Use the <code class="code " id="native-faq.md-c816ec2d"  >-produce dynamic</code> compiler switch, or <code class="code " id="native-faq.md-e292546f"  >binaries.sharedLib()</code> in Gradle.</p><div class="code-block" data-lang="kotlin" id="native-faq.md-e72504b7"         >kotlin {\n    iosArm64(&quot;mylib&quot;) {\n        binaries.sharedLib()\n    }\n}\n</div><p id="native-faq.md-b702d46f" >It will produce a platform-specific shared object (<code class="code " id="native-faq.md-786a2ac"  >.so</code> on Linux, <code class="code " id="native-faq.md-3e06a3bf"  >.dylib</code> on macOS, and <code class="code " id="native-faq.md-63808824"  >.dll</code> on Windows targets) and a C language header, allowing the use of all public APIs available in your Kotlin/Native program from C/C++ code. See <a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/samples/python_extension" id="native-faq.md-ae2ea87"   data-external="true" rel="noopener noreferrer" >this example</a> of using such a shared object to provide a bridge between Python and Kotlin/Native.</p></section><section class="chapter"  ><h2 id="native-faq.md-how-do-i-create-a-static-library-or-an-object-file" data-toc="native-faq#native-faq.md-how-do-i-create-a-static-library-or-an-object-file"  >How do I create a static library or an object file?</h2><p id="native-faq.md-599c35c7" >Use the <code class="code " id="native-faq.md-fb83ad29"  >-produce static</code> compiler switch, or <code class="code " id="native-faq.md-435199e8"  >binaries.staticLib()</code> in Gradle.</p><div class="code-block" data-lang="kotlin" id="native-faq.md-f027278d"         >kotlin {\n    iosArm64(&quot;mylib&quot;) {\n        binaries.staticLib()\n    }\n}\n</div><p id="native-faq.md-ef74ed63" >It will produce a platform-specific static object (<code class="code " id="native-faq.md-ceef70a6"  >.a</code> library format) and a C language header, allowing you to use all the public APIs available in your Kotlin/Native program from C/C++ code.</p></section><section class="chapter"  ><h2 id="native-faq.md-how-do-i-run-kotlin-native-behind-a-corporate-proxy" data-toc="native-faq#native-faq.md-how-do-i-run-kotlin-native-behind-a-corporate-proxy"  >How do I run Kotlin/Native behind a corporate proxy?</h2><p id="native-faq.md-94c18a06" >As Kotlin/Native needs to download a platform specific toolchain, you need to specify <code class="code " id="native-faq.md-e69056c1"  >-Dhttp.proxyHost=xxx -Dhttp.proxyPort=xxx</code> as the compiler\'s or <code class="code " id="native-faq.md-8f520dc5"  >gradlew</code> arguments, or set it via the <code class="code " id="native-faq.md-f2bd8cf"  >JAVA_OPTS</code> environment variable.</p></section><section class="chapter"  ><h2 id="native-faq.md-how-do-i-specify-a-custom-objective-c-prefix-name-for-my-kotlin-framework" data-toc="native-faq#native-faq.md-how-do-i-specify-a-custom-objective-c-prefix-name-for-my-kotlin-framework"  >How do I specify a custom Objective-C prefix/name for my Kotlin framework?</h2><p id="native-faq.md-699c9f64" >Use the <code class="code " id="native-faq.md-9bf81fdd"  >-module-name</code> compiler option or matching Gradle DSL statement.</p><div class="tabs" id="native-faq.md-5c536be9" ><div class="tabs__content" data-gtm="tab" id="native-faq.md-2221d48c"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="native-faq.md-2221d48c"   data-title="Groovy"      >kotlin {\n    iosArm64(&quot;myapp&quot;) {\n        binaries.framework {\n            freeCompilerArgs += [&quot;-module-name&quot;, &quot;TheName&quot;]\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="native-faq.md-959ced1f"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="native-faq.md-959ced1f"   data-title="Kotlin"      >kotlin {\n    iosArm64(&quot;myapp&quot;) {\n        binaries.framework {\n            freeCompilerArgs += listOf(&quot;-module-name&quot;, &quot;TheName&quot;)\n        }\n    }\n}\n</div></div></div></section><section class="chapter"  ><h2 id="native-faq.md-how-do-i-rename-the-ios-framework" data-toc="native-faq#native-faq.md-how-do-i-rename-the-ios-framework"  >How do I rename the iOS framework?</h2><p id="native-faq.md-4ac53dcd" >The default name is for an iOS framework is <code class="code " id="native-faq.md-4a2884ec"  >&lt;project name&gt;.framework</code>. To set a custom name, use the <code class="code " id="native-faq.md-ad2fea19"  >baseName</code> option. This will also set the module name.</p><div class="code-block" data-lang="kotlin" id="native-faq.md-fba87e52"         >kotlin {\n    iosArm64(&quot;myapp&quot;) {\n       binaries {\n          framework {\n              baseName = &quot;TheName&quot;\n          }\n       }\n    }\n}\n</div></section><section class="chapter"  ><h2 id="native-faq.md-how-do-i-enable-bitcode-for-my-kotlin-framework" data-toc="native-faq#native-faq.md-how-do-i-enable-bitcode-for-my-kotlin-framework"  >How do I enable bitcode for my Kotlin framework?</h2><p id="native-faq.md-e257939a" >By default gradle plugin adds it on iOS target.</p><ul class="list _ul" id="native-faq.md-2d9f346e"   ><li class="list__item" id="native-faq.md-cf039264" ><p>For debug build it embeds placeholder LLVM IR data as a marker.</p></li><li class="list__item" id="native-faq.md-f3668b40" ><p>For release build it embeds bitcode as data.</p></li></ul><p id="native-faq.md-b482b4fd" >Or commandline arguments: <code class="code " id="native-faq.md-835916e2"  >-Xembed-bitcode</code> (for release) and <code class="code " id="native-faq.md-306ef28"  >-Xembed-bitcode-marker</code> (debug)</p><p id="native-faq.md-4d5bb82f" >Setting this in a Gradle DSL:</p><div class="code-block" data-lang="kotlin" id="native-faq.md-116f51ab"         >kotlin {\n    iosArm64(&quot;myapp&quot;) {\n        binaries {\n            framework {\n                // Use &quot;marker&quot; to embed the bitcode marker (for debug builds).\n                // Use &quot;disable&quot; to disable embedding.\n                embedBitcode(&quot;bitcode&quot;) // for release binaries.\n            }\n        }\n    }\n}\n</div><p id="native-faq.md-65896641" >These options have nearly the same effect as clang\'s <code class="code " id="native-faq.md-bc93ea9c"  >-fembed-bitcode</code>/ <code class="code " id="native-faq.md-b8598310"  >-fembed-bitcode-marker</code> and swiftc\'s <code class="code " id="native-faq.md-54714be3"  >-embed-bitcode</code>/ <code class="code " id="native-faq.md-bd3f4ce9"  >-embed-bitcode-marker</code>.</p></section><section class="chapter"  ><h2 id="native-faq.md-why-do-i-see-invalidmutabilityexception" data-toc="native-faq#native-faq.md-why-do-i-see-invalidmutabilityexception"  >Why do I see InvalidMutabilityException?</h2><p id="native-faq.md-235f6a1c" >It likely happens, because you are trying to mutate a frozen object. An object can transfer to the frozen state either explicitly, as objects reachable from objects on which the <code class="code " id="native-faq.md-27c4e45d"  >kotlin.native.concurrent.freeze</code> is called, or implicitly (i.e. reachable from <code class="code " id="native-faq.md-6826510a"  >enum</code> or global singleton object - see the next question).</p></section><section class="chapter"  ><h2 id="native-faq.md-how-do-i-make-a-singleton-object-mutable" data-toc="native-faq#native-faq.md-how-do-i-make-a-singleton-object-mutable"  >How do I make a singleton object mutable?</h2><p id="native-faq.md-6eba2400" >Currently, singleton objects are immutable (i.e. frozen after creation), and it\'s generally considered good practise to have the global state immutable. If for some reason you need a mutable state inside such an object, use the <code class="code " id="native-faq.md-eb8f3851"  >@konan.ThreadLocal</code> annotation on the object. Also the <code class="code " id="native-faq.md-ed0c6723"  >kotlin.native.concurrent.AtomicReference</code> class could be used to store different pointers to frozen objects in a frozen object and automatically update them.</p></section><section class="chapter"  ><h2 id="native-faq.md-how-can-i-compile-my-project-with-unreleased-versions-of-kotlin-native" data-toc="native-faq#native-faq.md-how-can-i-compile-my-project-with-unreleased-versions-of-kotlin-native"  >How can I compile my project with unreleased versions of Kotlin/Native?</h2><p id="native-faq.md-310056f3" >First, please consider trying <a href="#eap.md" id="native-faq.md-5c6640ed"   >preview versions</a>.</p><p id="native-faq.md-51685380" >In case you need an even more recent development version, you can build Kotlin/Native from source code: clone <a href="https://github.com/JetBrains/kotlin" id="native-faq.md-61a61133"   data-external="true" rel="noopener noreferrer" >Kotlin repository</a> and follow <a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/README.md#building-from-source" id="native-faq.md-e09f60a9"   data-external="true" rel="noopener noreferrer" >these steps</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="releases.md"  > Kotlin releases</h1><p id="releases.md-3ff5c9ef" >We ship different types of releases:</p><ul class="list _ul" id="releases.md-e8b81ce3"   ><li class="list__item" id="releases.md-4fe28206" ><p><em id="releases.md-93e5892" class=""  >Feature releases</em> (1. <em id="releases.md-c9ac9934" class=""  >x</em>) that bring major changes in the language.</p></li><li class="list__item" id="releases.md-90e80996" ><p><em id="releases.md-ae96a848" class=""  >Incremental releases</em> (1. <em id="releases.md-c96efc9c" class=""  >x</em>. <em id="releases.md-7f8ae143" class=""  >y</em>) that are shipped between feature releases and include updates in the tooling, performance improvements, and bug fixes.</p></li><li class="list__item" id="releases.md-b05f68a1" ><p><em id="releases.md-f1ce4f7c" class=""  >Bug fix releases</em> (1. <em id="releases.md-e353cc36" class=""  >x</em>. <em id="releases.md-1bfcc87e" class=""  >yz</em>) that include bug fixes for incremental releases.</p></li></ul><p id="releases.md-f0bcd526" >For example, for the feature release 1.3 we had several incremental releases including 1.3.10, 1.3.20, and 1.3.70. For 1.3.70, we had 2 bug fix releases – 1.3.71 and 1.3.72.</p><p id="releases.md-b036c415" >For each incremental and feature release, we also ship several preview (<em id="releases.md-e5eeb0cf" class=""  >EAP</em>) versions for you to try new features before they are released. See <a href="#eap.md" id="releases.md-3ec0abc4"   >Early Access Preview</a> for details.</p><p id="releases.md-808951f8" >Learn more about <a href="#kotlin-evolution.md-feature-releases-and-incremental-releases" id="releases.md-9cd40495"   >types of Kotlin releases and their compatiblity</a>.</p><section class="chapter"  ><h2 id="releases.md-update-to-a-new-release" data-toc="releases#releases.md-update-to-a-new-release"  >Update to a new release</h2><p id="releases.md-fbaed12e" >IntelliJ IDEA and Android Studio suggest updating to a new release once it is out. When you accept the suggestion, it automatically updates the Kotlin plugin to the new version. You can check the Kotlin version in <b id="releases.md-6d466621" class=""  >Tools</b> | <b id="releases.md-3ad75978" class=""  >Kotlin</b> | <b id="releases.md-4339fce" class=""  >Configure Plugin Updates</b>.</p><p id="releases.md-51569099" >If you have projects created with earlier Kotlin versions, change the Kotlin version in your projects and update kotlinx libraries if necessary – check the <a href="#releases.md-release-details" id="releases.md-acbb08e3"   >recommended versions</a>.</p><p id="releases.md-92e6ee63" >If you are migrating to the new feature release, Kotlin plugin\'s migration tools will help you with the migration.</p></section><section class="chapter"  ><h2 id="releases.md-ide-support" data-toc="releases#releases.md-ide-support"  >IDE support</h2><p id="releases.md-5a2c1b21" >The IDE support for the latest version of the language is available for the following versions of IntelliJ IDEA and Android Studio:</p><ul class="list _ul" id="releases.md-c6d8907e"   ><li class="list__item" id="releases.md-43f4d5ce" >IntelliJ IDEA: <ul class="list _ul" id="releases.md-f9612687"   ><li class="list__item" id="releases.md-8d64d5b8" ><p>Latest stable (<a href="https://www.jetbrains.com/idea/whatsnew/" id="releases.md-6c7ba487"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA 2021.1</a> version)</p></li><li class="list__item" id="releases.md-5c4386b6" ><p>Previous stable (<a href="https://blog.jetbrains.com/idea/2020/12/intellij-idea-2020-3/" id="releases.md-94ec2639"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA 2020.3</a> version)</p></li><li class="list__item" id="releases.md-d5978ea8" ><p><a href="https://www.jetbrains.com/resources/eap/" id="releases.md-11e9786e"   data-external="true" rel="noopener noreferrer" >Early access</a> versions</p></li></ul></li><li class="list__item" id="releases.md-e97a6262" >Android Studio: <ul class="list _ul" id="releases.md-a56cb311"   ><li class="list__item" id="releases.md-a29966d0" ><p><a href="https://developer.android.com/studio" id="releases.md-93004a4c"   data-external="true" rel="noopener noreferrer" >Latest released</a> version</p></li><li class="list__item" id="releases.md-a183f209" ><p><a href="https://developer.android.com/studio/preview" id="releases.md-aa75658c"   data-external="true" rel="noopener noreferrer" >Early access</a> versions</p></li></ul></li></ul></section><section class="chapter"  ><h2 id="releases.md-release-details" data-toc="releases#releases.md-release-details"  >Release details</h2><p id="releases.md-afa4128f" >The following table lists details of latest Kotlin releases.</p><p id="releases.md-dbc69979" >You can also use <a href="#eap.md-build-details" id="releases.md-2ca06695"   >preview versions of Kotlin</a>.</p><div class="table-wrapper" ><table class=" wide" id="releases.md-d6c039f"  ><thead><tr class="ijRowHead" id="releases.md-de26fd26" ><th id="releases.md-d791206c"    >Build info</th><th id="releases.md-a851362"    >Build highlights</th><th id="releases.md-3087ca84"    >Recommended kotlinx library versions</th></tr></thead><tbody ><tr class="" id="releases.md-26a5ec38" ><td id="releases.md-e256c4e3"    ><b id="releases.md-749eff0b" class=""  >1.4.32</b><p id="releases.md-7dfcd687" >Released: <b id="releases.md-7f6d9019" class=""  >March 22, 2021</b></p><p id="releases.md-f0304bb2" ><a href="https://github.com/JetBrains/kotlin/releases/tag/v1.4.32" id="releases.md-5bb7fb84"   data-external="true" rel="noopener noreferrer" >Release on GitHub</a></p></td><td id="releases.md-83c92853"    ><p id="releases.md-f7bfd21d" >A bug fix release for Kotlin 1.4.30</p><p id="releases.md-f4540fa0" >Learn more about <a href="#whatsnew1430.md" id="releases.md-eaeb8852"   >Kotlin 1.4.30</a>.</p></td><td id="releases.md-4d4b3d24"    ><ul class="list _ul" id="releases.md-2990b1fa"   ><li class="list__item" id="releases.md-5fb38ca" ><p><a href="https://github.com/Kotlin/kotlinx.serialization" id="releases.md-9f1829c7"   data-external="true" rel="noopener noreferrer" >kotlinx.serialization</a> version: <a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.1.0" id="releases.md-3f9921ad"   data-external="true" rel="noopener noreferrer" >1.1.0</a></p></li><li class="list__item" id="releases.md-562834b4" ><p><a href="https://github.com/Kotlin/kotlinx.coroutines" id="releases.md-46b28183"   data-external="true" rel="noopener noreferrer" >kotlinx.coroutines</a> version: <a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.4.3" id="releases.md-23613b9e"   data-external="true" rel="noopener noreferrer" >1.4.3</a></p></li><li class="list__item" id="releases.md-17d41ba0" ><p><a href="https://github.com/Kotlin/kotlinx.atomicfu" id="releases.md-e792eb3d"   data-external="true" rel="noopener noreferrer" >kotlinx.atomicfu</a> version: <a href="https://github.com/Kotlin/kotlinx.atomicfu/releases/tag/0.15.2" id="releases.md-60353702"   data-external="true" rel="noopener noreferrer" >0.15.2</a></p></li><li class="list__item" id="releases.md-39fc9723" ><p><a href="https://ktor.io/" id="releases.md-5c79a1c3"   data-external="true" rel="noopener noreferrer" >ktor</a> version: <a href="https://github.com/ktorio/ktor/releases/tag/1.5.2" id="releases.md-994abe80"   data-external="true" rel="noopener noreferrer" >1.5.2</a></p></li><li class="list__item" id="releases.md-58911df4" ><p><a href="https://github.com/Kotlin/kotlinx.html" id="releases.md-d41b03f"   data-external="true" rel="noopener noreferrer" >kotlinx.html</a> version: <a href="https://github.com/Kotlin/kotlinx.html/releases/tag/0.7.2" id="releases.md-5d928d16"   data-external="true" rel="noopener noreferrer" >0.7.2</a></p></li><li class="list__item" id="releases.md-99d79906" ><p><a href="https://github.com/Kotlin/kotlinx-nodejs" id="releases.md-257b33bb"   data-external="true" rel="noopener noreferrer" >kotlinx-nodejs</a> version: <a href="https://bintray.com/kotlin/kotlinx/kotlinx.nodejs/0.0.7" id="releases.md-f50c753e"   data-external="true" rel="noopener noreferrer" >0.0.7</a></p></li></ul><p id="releases.md-66cdc5d9" >The versions of libraries from <code class="code " id="releases.md-11a9b0e6"  >kotlin-wrappers</code> (such as <code class="code " id="releases.md-c4f82a29"  >kotlin-react</code>) can be found in the <a href="https://github.com/JetBrains/kotlin-wrappers" id="releases.md-2832364c"   data-external="true" rel="noopener noreferrer" >corresponding repository</a>.</p></td></tr><tr class="" id="releases.md-bf8dea0d" ><td id="releases.md-cbeb8218"    ><b id="releases.md-7baa30f0" class=""  >1.4.31</b><p id="releases.md-4c6fc419" >Released: <b id="releases.md-de12ac38" class=""  >February 25, 2021</b></p><p id="releases.md-d99ba193" ><a href="https://github.com/JetBrains/kotlin/releases/tag/v1.4.31" id="releases.md-25679da3"   data-external="true" rel="noopener noreferrer" >Release on GitHub</a></p></td><td id="releases.md-46e5e4e5"    ><p id="releases.md-831f25f8" >A bug fix release for Kotlin 1.4.30</p><p id="releases.md-8ccf540b" >Learn more about <a href="#whatsnew1430.md" id="releases.md-66eda948"   >Kotlin 1.4.30</a>.</p></td><td id="releases.md-131e4979"    ><ul class="list _ul" id="releases.md-97cd834b"   ><li class="list__item" id="releases.md-aaa57767" ><p><a href="https://github.com/Kotlin/kotlinx.serialization" id="releases.md-4b5fb9a6"   data-external="true" rel="noopener noreferrer" >kotlinx.serialization</a> version: <a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.1.0" id="releases.md-4397c31d"   data-external="true" rel="noopener noreferrer" >1.1.0</a></p></li><li class="list__item" id="releases.md-8a7579c9" ><p><a href="https://github.com/Kotlin/kotlinx.coroutines" id="releases.md-ece425f7"   data-external="true" rel="noopener noreferrer" >kotlinx.coroutines</a> version: <a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.4.2" id="releases.md-87d36d22"   data-external="true" rel="noopener noreferrer" >1.4.2</a></p></li><li class="list__item" id="releases.md-e6483ccb" ><p><a href="https://github.com/Kotlin/kotlinx.atomicfu" id="releases.md-4efc12dc"   data-external="true" rel="noopener noreferrer" >kotlinx.atomicfu</a> version: <a href="https://github.com/Kotlin/kotlinx.atomicfu/releases/tag/0.15.1" id="releases.md-47d250e6"   data-external="true" rel="noopener noreferrer" >0.15.1</a></p></li><li class="list__item" id="releases.md-3ae5690c" ><p><a href="https://ktor.io/" id="releases.md-b2e89990"   data-external="true" rel="noopener noreferrer" >ktor</a> version: <a href="https://github.com/ktorio/ktor/releases/tag/1.5.1" id="releases.md-1d67a221"   data-external="true" rel="noopener noreferrer" >1.5.1</a></p></li><li class="list__item" id="releases.md-d163f5ea" ><p><a href="https://github.com/Kotlin/kotlinx.html" id="releases.md-a4deae60"   data-external="true" rel="noopener noreferrer" >kotlinx.html</a> version: <a href="https://github.com/Kotlin/kotlinx.html/releases/tag/0.7.2" id="releases.md-c5b2064f"   data-external="true" rel="noopener noreferrer" >0.7.2</a></p></li><li class="list__item" id="releases.md-75d4e990" ><p><a href="https://github.com/Kotlin/kotlinx-nodejs" id="releases.md-a6ee7a5a"   data-external="true" rel="noopener noreferrer" >kotlinx-nodejs</a> version: <a href="https://bintray.com/kotlin/kotlinx/kotlinx.nodejs/0.0.7" id="releases.md-77006780"   data-external="true" rel="noopener noreferrer" >0.0.7</a></p></li></ul><p id="releases.md-d28b9532" >The versions of libraries from <code class="code " id="releases.md-7b9a1c44"  >kotlin-wrappers</code> (such as <code class="code " id="releases.md-304dbab8"  >kotlin-react</code>) can be found in the <a href="https://github.com/JetBrains/kotlin-wrappers" id="releases.md-47b0a06c"   data-external="true" rel="noopener noreferrer" >corresponding repository</a>.</p></td></tr><tr class="" id="releases.md-45f6d197" ><td id="releases.md-a16304cf"    ><b id="releases.md-4e0faf08" class=""  >1.4.30</b><p id="releases.md-844455ca" >Released: <b id="releases.md-7632ffd7" class=""  >February 3, 2021</b></p><p id="releases.md-154620c" ><a href="https://github.com/JetBrains/kotlin/releases/tag/v1.4.30" id="releases.md-9dea0573"   data-external="true" rel="noopener noreferrer" >Release on GitHub</a></p></td><td id="releases.md-89d990e1"    ><p id="releases.md-89b4d266" >An incremental release with various improvements such as:</p><ul class="list _ul" id="releases.md-48044e1f"   ><li class="list__item" id="releases.md-a43e2e4" ><p>New JVM backend, now in Beta</p></li><li class="list__item" id="releases.md-66f9ef5e" ><p>Preview of new language features</p></li><li class="list__item" id="releases.md-b3e92250" ><p>Improved Kotlin/Native performance</p></li><li class="list__item" id="releases.md-f1ecb531" ><p>Standard library API improvements</p></li></ul><p id="releases.md-d8665cde" >Learn more in:</p><ul class="list _ul" id="releases.md-308c7c68"   ><li class="list__item" id="releases.md-1fa654c5" ><a href="http://blog.jetbrains.com/kotlin/2021/01/kotlin-1-4-30-released/" id="releases.md-c9826ab"   data-external="true" rel="noopener noreferrer" >Release blog post</a></li><li class="list__item" id="releases.md-2076449d" ><a href="#whatsnew1430.md" id="releases.md-e386f1"   >What\'s new in Kotlin 1.4.30</a></li></ul></td><td id="releases.md-641014d8"    ><ul class="list _ul" id="releases.md-cd2e05a0"   ><li class="list__item" id="releases.md-1d9d007b" ><p><a href="https://github.com/Kotlin/kotlinx.serialization" id="releases.md-eca1094f"   data-external="true" rel="noopener noreferrer" >kotlinx.serialization</a> version: <a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.1.0-RC" id="releases.md-d5accc8a"   data-external="true" rel="noopener noreferrer" >1.1.0-RC</a></p></li><li class="list__item" id="releases.md-829b1795" ><p><a href="https://github.com/Kotlin/kotlinx.coroutines" id="releases.md-a1c1760a"   data-external="true" rel="noopener noreferrer" >kotlinx.coroutines</a> version: <a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.4.2" id="releases.md-bbd85838"   data-external="true" rel="noopener noreferrer" >1.4.2</a></p></li><li class="list__item" id="releases.md-b58553ae" ><p><a href="https://github.com/Kotlin/kotlinx.atomicfu" id="releases.md-b9c5fdf7"   data-external="true" rel="noopener noreferrer" >kotlinx.atomicfu</a> version: <a href="https://github.com/Kotlin/kotlinx.atomicfu/releases/tag/0.15.1" id="releases.md-bacd6e07"   data-external="true" rel="noopener noreferrer" >0.15.1</a></p></li><li class="list__item" id="releases.md-c6179d52" ><p><a href="https://ktor.io/" id="releases.md-35f4a385"   data-external="true" rel="noopener noreferrer" >ktor</a> version: <a href="https://github.com/ktorio/ktor/releases/tag/1.5.1" id="releases.md-798af150"   data-external="true" rel="noopener noreferrer" >1.5.1</a></p></li><li class="list__item" id="releases.md-1b16f63e" ><p><a href="https://github.com/Kotlin/kotlinx.html" id="releases.md-e535af56"   data-external="true" rel="noopener noreferrer" >kotlinx.html</a> version: <a href="https://github.com/Kotlin/kotlinx.html/releases/tag/0.7.2" id="releases.md-40d47c20"   data-external="true" rel="noopener noreferrer" >0.7.2</a></p></li><li class="list__item" id="releases.md-d6ee35ff" ><p><a href="https://github.com/Kotlin/kotlinx-nodejs" id="releases.md-2b7b5a11"   data-external="true" rel="noopener noreferrer" >kotlinx-nodejs</a> version: <a href="https://bintray.com/kotlin/kotlinx/kotlinx.nodejs/0.0.7" id="releases.md-90d94f2e"   data-external="true" rel="noopener noreferrer" >0.0.7</a></p></li></ul><p id="releases.md-58476cd8" >The versions of libraries from <code class="code " id="releases.md-7419bf76"  >kotlin-wrappers</code> (such as <code class="code " id="releases.md-6b3d30b0"  >kotlin-react</code>) can be found in the <a href="https://github.com/JetBrains/kotlin-wrappers" id="releases.md-ae45cd09"   data-external="true" rel="noopener noreferrer" >corresponding repository</a>.</p></td></tr><tr class="" id="releases.md-ab1e10e8" ><td id="releases.md-80426eb2"    ><b id="releases.md-f5f21bf8" class=""  >1.4.21</b><p id="releases.md-d614f491" >Released: <b id="releases.md-47e4598c" class=""  >December 7, 2020</b></p><p id="releases.md-52382bf4" ><a href="https://github.com/JetBrains/kotlin/releases/tag/v1.4.21" id="releases.md-2a1a0ba"   data-external="true" rel="noopener noreferrer" >Release on GitHub</a></p></td><td id="releases.md-62da8ea7"    ><p id="releases.md-d3186d02" >A bug fix release for Kotlin 1.4.20</p><p id="releases.md-1204b73f" >Learn more about <a href="#whatsnew1420.md" id="releases.md-d955610e"   >Kotlin 1.4.20</a>.</p></td><td id="releases.md-54960327"    ><ul class="list _ul" id="releases.md-464c444e"   ><li class="list__item" id="releases.md-6ac3ac81" ><p><a href="https://github.com/Kotlin/kotlinx.serialization" id="releases.md-dccc30df"   data-external="true" rel="noopener noreferrer" >kotlinx.serialization</a> version: <a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.0.1" id="releases.md-be6d6960"   data-external="true" rel="noopener noreferrer" >1.0.1</a></p></li><li class="list__item" id="releases.md-5532d0e5" ><p><a href="https://github.com/Kotlin/kotlinx.coroutines" id="releases.md-90d47aa9"   data-external="true" rel="noopener noreferrer" >kotlinx.coroutines</a> version: <a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.4.1" id="releases.md-3847f376"   data-external="true" rel="noopener noreferrer" >1.4.1</a></p></li><li class="list__item" id="releases.md-6e696165" ><p><a href="https://github.com/Kotlin/kotlinx.atomicfu" id="releases.md-ff61ac84"   data-external="true" rel="noopener noreferrer" >kotlinx.atomicfu</a> version: <a href="https://github.com/Kotlin/kotlinx.atomicfu/releases/tag/0.14.4" id="releases.md-8e1265bf"   data-external="true" rel="noopener noreferrer" >0.14.4</a></p></li><li class="list__item" id="releases.md-d9d36a2" ><p><a href="https://ktor.io/" id="releases.md-fb1cf162"   data-external="true" rel="noopener noreferrer" >ktor</a> version: <a href="https://github.com/ktorio/ktor/releases/tag/1.4.1" id="releases.md-b5865441"   data-external="true" rel="noopener noreferrer" >1.4.1</a></p></li><li class="list__item" id="releases.md-92f5d1f7" ><p><a href="https://github.com/Kotlin/kotlinx.html" id="releases.md-b371ba94"   data-external="true" rel="noopener noreferrer" >kotlinx.html</a> version: <a href="https://github.com/Kotlin/kotlinx.html/releases/tag/0.7.2" id="releases.md-57e3f2fb"   data-external="true" rel="noopener noreferrer" >0.7.2</a></p></li><li class="list__item" id="releases.md-80daa7cb" ><p><a href="https://github.com/Kotlin/kotlinx-nodejs" id="releases.md-2f1add92"   data-external="true" rel="noopener noreferrer" >kotlinx-nodejs</a> version: <a href="https://bintray.com/kotlin/kotlinx/kotlinx.nodejs/0.0.6" id="releases.md-927cf34d"   data-external="true" rel="noopener noreferrer" >0.0.6</a></p></li></ul><p id="releases.md-a2b3b26" >The versions of libraries from <code class="code " id="releases.md-73d49fb"  >kotlin-wrappers</code> (such as <code class="code " id="releases.md-6037dbdb"  >kotlin-react</code>) can be found in the <a href="https://github.com/JetBrains/kotlin-wrappers" id="releases.md-d1455398"   data-external="true" rel="noopener noreferrer" >corresponding repository</a>.</p></td></tr><tr class="" id="releases.md-dfa4de86" ><td id="releases.md-e2699bda"    ><b id="releases.md-88c2b9" class=""  >1.4.20</b><p id="releases.md-fbaf0521" >Released: <b id="releases.md-46a32df3" class=""  >November 23, 2020</b></p><p id="releases.md-f4ae0e2a" ><a href="https://github.com/JetBrains/kotlin/releases/tag/v1.4.20" id="releases.md-9a5f2e25"   data-external="true" rel="noopener noreferrer" >Release on GitHub</a></p></td><td id="releases.md-70ff8c3a"    ><p id="releases.md-50a59651" >An incremental release with various improvements such as:</p><ul class="list _ul" id="releases.md-3476919c"   ><li class="list__item" id="releases.md-35ef330c" ><p>Supporting new JVM features, like string concatenation via <code class="code " id="releases.md-d29cfea3"  >invokedynamic</code></p></li><li class="list__item" id="releases.md-66d57df4" ><p>Improved performance and exception handling for KMM projects</p></li><li class="list__item" id="releases.md-b910b96" ><p>Extensions for JDK Path: <code class="code " id="releases.md-9f5aa251"  >Path(“dir”) / “file.txt”</code></p></li></ul><p id="releases.md-3ac2042d" >Learn more in:</p><ul class="list _ul" id="releases.md-1c6de279"   ><li class="list__item" id="releases.md-5c88017f" ><a href="http://blog.jetbrains.com/kotlin/2020/11/kotlin-1-4-20-released/" id="releases.md-fedb0cbc"   data-external="true" rel="noopener noreferrer" >Release blog post</a></li><li class="list__item" id="releases.md-2debda0" ><a href="#whatsnew1420.md" id="releases.md-479e7fd3"   >What\'s new in Kotlin 1.4.20</a></li></ul></td><td id="releases.md-8ee63439"    ><ul class="list _ul" id="releases.md-a4f39231"   ><li class="list__item" id="releases.md-90e6b5de" ><p><a href="https://github.com/Kotlin/kotlinx.serialization" id="releases.md-f791d4a4"   data-external="true" rel="noopener noreferrer" >kotlinx.serialization</a> version: <a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.0.1" id="releases.md-de93f024"   data-external="true" rel="noopener noreferrer" >1.0.1</a></p></li><li class="list__item" id="releases.md-142a4147" ><p><a href="https://github.com/Kotlin/kotlinx.coroutines" id="releases.md-d0de97cd"   data-external="true" rel="noopener noreferrer" >kotlinx.coroutines</a> version: <a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.4.1" id="releases.md-75b9834c"   data-external="true" rel="noopener noreferrer" >1.4.1</a></p></li><li class="list__item" id="releases.md-9b5bef5f" ><p><a href="https://github.com/Kotlin/kotlinx.atomicfu" id="releases.md-4d227348"   data-external="true" rel="noopener noreferrer" >kotlinx.atomicfu</a> version: <a href="https://github.com/Kotlin/kotlinx.atomicfu/releases/tag/0.14.4" id="releases.md-f2b23096"   data-external="true" rel="noopener noreferrer" >0.14.4</a></p></li><li class="list__item" id="releases.md-5448f2ae" ><p><a href="https://ktor.io/" id="releases.md-80d1834"   data-external="true" rel="noopener noreferrer" >ktor</a> version: <a href="https://github.com/ktorio/ktor/releases/tag/1.4.1" id="releases.md-3bf0695c"   data-external="true" rel="noopener noreferrer" >1.4.1</a></p></li><li class="list__item" id="releases.md-cd5a2e7" ><p><a href="https://github.com/Kotlin/kotlinx.html" id="releases.md-b9000031"   data-external="true" rel="noopener noreferrer" >kotlinx.html</a> version: <a href="https://github.com/Kotlin/kotlinx.html/releases/tag/0.7.2" id="releases.md-c59ebed6"   data-external="true" rel="noopener noreferrer" >0.7.2</a></p></li><li class="list__item" id="releases.md-923d7d4c" ><p><a href="https://github.com/Kotlin/kotlinx-nodejs" id="releases.md-55d86fee"   data-external="true" rel="noopener noreferrer" >kotlinx-nodejs</a> version: <a href="https://bintray.com/kotlin/kotlinx/kotlinx.nodejs/0.0.6" id="releases.md-c214b8d0"   data-external="true" rel="noopener noreferrer" >0.0.6</a></p></li></ul><p id="releases.md-51a84750" >The versions of libraries from <code class="code " id="releases.md-96be8eff"  >kotlin-wrappers</code> (such as <code class="code " id="releases.md-de21b7b4"  >kotlin-react</code>) can be found in the <a href="https://github.com/JetBrains/kotlin-wrappers" id="releases.md-4835e39d"   data-external="true" rel="noopener noreferrer" >corresponding repository</a>.</p></td></tr><tr class="" id="releases.md-8a1c377d" ><td id="releases.md-352da8f3"    ><b id="releases.md-48a96367" class=""  >1.4.10</b><p id="releases.md-f7df494b" >Released: <b id="releases.md-7def4898" class=""  >September 7, 2020</b></p><p id="releases.md-a716eba5" ><a href="https://github.com/JetBrains/kotlin/releases/tag/v1.4.10" id="releases.md-7dafad55"   data-external="true" rel="noopener noreferrer" >Release on GitHub</a></p></td><td id="releases.md-8616ca17"    ><p id="releases.md-cf581b02" >A bug fix release for Kotlin 1.4.0.</p><p id="releases.md-334136d2" >Learn more about <a href="https://blog.jetbrains.com/kotlin/2020/08/kotlin-1-4-released-with-a-focus-on-quality-and-performance/" id="releases.md-fb15b5bf"   data-external="true" rel="noopener noreferrer" >Kotlin 1.4.0</a>.</p></td><td id="releases.md-bdf30823"    ><ul class="list _ul" id="releases.md-a2e10860"   ><li class="list__item" id="releases.md-531dd0ec" ><p><a href="https://github.com/Kotlin/kotlinx.serialization" id="releases.md-6282f96"   data-external="true" rel="noopener noreferrer" >kotlinx.serialization</a> version: <a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/1.0.0-RC" id="releases.md-39864d7e"   data-external="true" rel="noopener noreferrer" >1.0.0-RC</a></p></li><li class="list__item" id="releases.md-c173152d" ><p><a href="https://github.com/Kotlin/kotlinx.coroutines" id="releases.md-152176f8"   data-external="true" rel="noopener noreferrer" >kotlinx.coroutines</a> version: <a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.3.9" id="releases.md-8d726e70"   data-external="true" rel="noopener noreferrer" >1.3.9</a></p></li><li class="list__item" id="releases.md-1bb6eee" ><p><a href="https://github.com/Kotlin/kotlinx.atomicfu" id="releases.md-51d80bfa"   data-external="true" rel="noopener noreferrer" >kotlinx.atomicfu</a> version: <a href="https://github.com/Kotlin/kotlinx.atomicfu/releases/tag/0.14.4" id="releases.md-95da38fa"   data-external="true" rel="noopener noreferrer" >0.14.4</a></p></li><li class="list__item" id="releases.md-db283638" ><p><a href="https://ktor.io/" id="releases.md-3c9375a8"   data-external="true" rel="noopener noreferrer" >ktor</a> version: <a href="https://github.com/ktorio/ktor/releases/tag/1.4.0" id="releases.md-52ac0931"   data-external="true" rel="noopener noreferrer" >1.4.0</a></p></li><li class="list__item" id="releases.md-491d419b" ><p><a href="https://github.com/Kotlin/kotlinx.html" id="releases.md-5d1dd149"   data-external="true" rel="noopener noreferrer" >kotlinx.html</a> version: <a href="https://github.com/Kotlin/kotlinx.html/releases/tag/0.7.2" id="releases.md-a5dc3461"   data-external="true" rel="noopener noreferrer" >0.7.2</a></p></li><li class="list__item" id="releases.md-eaf3413e" ><p><a href="https://github.com/Kotlin/kotlinx-nodejs" id="releases.md-c4c891e6"   data-external="true" rel="noopener noreferrer" >kotlinx-nodejs</a> version: <a href="https://bintray.com/kotlin/kotlinx/kotlinx.nodejs/0.0.6" id="releases.md-7852be31"   data-external="true" rel="noopener noreferrer" >0.0.6</a></p></li></ul><p id="releases.md-831c3737" >The versions of libraries from <code class="code " id="releases.md-ba7f340d"  >kotlin-wrappers</code> (such as <code class="code " id="releases.md-9e9ad65b"  >kotlin-react</code>) can be found in the <a href="https://github.com/JetBrains/kotlin-wrappers" id="releases.md-421cbc05"   data-external="true" rel="noopener noreferrer" >corresponding repository</a>.</p></td></tr><tr class="" id="releases.md-aba6a11c" ><td id="releases.md-1a6ae9d2"    ><b id="releases.md-1f80a188" class=""  >1.4.0</b><p id="releases.md-fac60aa3" >Released: <b id="releases.md-70d126da" class=""  >August 17, 2020</b></p><p id="releases.md-d9568316" ><a href="https://github.com/JetBrains/kotlin/releases/tag/v1.4.0" id="releases.md-f26741d0"   data-external="true" rel="noopener noreferrer" >Release on GitHub</a></p></td><td id="releases.md-cde63a18"    ><p id="releases.md-fb29e2c4" >A feature release with many features and improvements that mostly focus on quality and performance.</p><p id="releases.md-5932160b" >Learn more in:</p><ul class="list _ul" id="releases.md-789656e1"   ><li class="list__item" id="releases.md-eb35d3dc" ><a href="http://blog.jetbrains.com/kotlin/2020/08/kotlin-1-4-released-with-a-focus-on-quality-and-performance/" id="releases.md-26d196ee"   data-external="true" rel="noopener noreferrer" >Release blog post</a></li><li class="list__item" id="releases.md-340a2bf7" ><a href="#whatsnew14.md" id="releases.md-6d01b188"   >What\'s new in Kotlin 1.4.0</a></li><li class="list__item" id="releases.md-72f5f34" ><a href="#compatibility-guide-14.md" id="releases.md-b62c63bc"   >Compatibility Guide</a></li><li class="list__item" id="releases.md-3dbe7637" ><a href="#whatsnew14.md-migrating-to-kotlin-1-4-0" id="releases.md-1d65fe64"   >Migrating to Kotlin 1.4.0</a></li></ul></td><td id="releases.md-e391c7d7"    ><ul class="list _ul" id="releases.md-70ced3b5"   ><li class="list__item" id="releases.md-67004f86" ><p><a href="https://github.com/Kotlin/kotlinx.serialization" id="releases.md-db78e7dc"   data-external="true" rel="noopener noreferrer" >kotlinx.serialization</a> version: <a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/1.0.0-RC" id="releases.md-bd0f509c"   data-external="true" rel="noopener noreferrer" >1.0.0-RC</a></p></li><li class="list__item" id="releases.md-15e18d7f" ><p><a href="https://github.com/Kotlin/kotlinx.coroutines" id="releases.md-9fa4e352"   data-external="true" rel="noopener noreferrer" >kotlinx.coroutines</a> version: <a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.3.9" id="releases.md-389155c1"   data-external="true" rel="noopener noreferrer" >1.3.9</a></p></li><li class="list__item" id="releases.md-65c06660" ><p><a href="https://github.com/Kotlin/kotlinx.atomicfu" id="releases.md-f9981d98"   data-external="true" rel="noopener noreferrer" >kotlinx.atomicfu</a> version: <a href="https://github.com/Kotlin/kotlinx.atomicfu/releases/tag/0.14.4" id="releases.md-33a0f394"   data-external="true" rel="noopener noreferrer" >0.14.4</a></p></li><li class="list__item" id="releases.md-89e56f10" ><p><a href="https://ktor.io/" id="releases.md-a3713aa2"   data-external="true" rel="noopener noreferrer" >ktor</a> version: <a href="https://github.com/ktorio/ktor/releases/tag/1.4.0" id="releases.md-418a787a"   data-external="true" rel="noopener noreferrer" >1.4.0</a></p></li><li class="list__item" id="releases.md-7ff4f562" ><p><a href="https://github.com/Kotlin/kotlinx.html" id="releases.md-81cbdc7d"   data-external="true" rel="noopener noreferrer" >kotlinx.html</a> version: <a href="https://github.com/Kotlin/kotlinx.html/releases/tag/0.7.2" id="releases.md-e68352e3"   data-external="true" rel="noopener noreferrer" >0.7.2</a></p></li><li class="list__item" id="releases.md-19a53a9b" ><p><a href="https://github.com/Kotlin/kotlinx-nodejs" id="releases.md-e89a257f"   data-external="true" rel="noopener noreferrer" >kotlinx-nodejs</a> version: <a href="https://bintray.com/kotlin/kotlinx/kotlinx.nodejs/0.0.6" id="releases.md-b776809c"   data-external="true" rel="noopener noreferrer" >0.0.6</a></p></li></ul><p id="releases.md-ac3f5231" >The versions of libraries from <code class="code " id="releases.md-71d7a9c0"  >kotlin-wrappers</code> (such as <code class="code " id="releases.md-18868183"  >kotlin-react</code>) can be found in the <a href="https://github.com/JetBrains/kotlin-wrappers" id="releases.md-82581f61"   data-external="true" rel="noopener noreferrer" >corresponding repository</a>.</p></td></tr><tr class="" id="releases.md-f088a8d5" ><td id="releases.md-12f583c8"    ><b id="releases.md-e39da54b" class=""  >1.3.72</b><p id="releases.md-a3c8f2b6" >Released: <b id="releases.md-9b0f77b3" class=""  >April 15, 2020</b></p><p id="releases.md-dfa68089" ><a href="https://github.com/JetBrains/kotlin/releases/tag/v1.3.72" id="releases.md-32fef55d"   data-external="true" rel="noopener noreferrer" >Release on GitHub</a></p></td><td id="releases.md-f20bf2f6"    ><p id="releases.md-43b4a7f8" >A bug fix release for Kotlin 1.3.70.</p><p id="releases.md-b7ad968f" >Learn more about <a href="https://blog.jetbrains.com/kotlin/2020/03/kotlin-1-3-70-released/" id="releases.md-58875223"   data-external="true" rel="noopener noreferrer" >Kotlin 1.3.70</a>.</p></td><td id="releases.md-5add39ab"    ><ul class="list _ul" id="releases.md-67f1ea94"   ><li class="list__item" id="releases.md-18c01c75" ><p><a href="https://github.com/Kotlin/kotlinx.serialization" id="releases.md-b0233604"   data-external="true" rel="noopener noreferrer" >kotlinx.serialization</a> version: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/CHANGELOG.md#0200--2020-03-04" id="releases.md-c6030840"   data-external="true" rel="noopener noreferrer" >0.20.0</a></p></li><li class="list__item" id="releases.md-48b0729a" ><p><a href="https://github.com/Kotlin/kotlinx.coroutines" id="releases.md-7260af0d"   data-external="true" rel="noopener noreferrer" >kotlinx.coroutines</a> version: <a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.3.8" id="releases.md-5c05adc2"   data-external="true" rel="noopener noreferrer" >1.3.8</a></p></li><li class="list__item" id="releases.md-ce2d1415" ><p><a href="https://github.com/Kotlin/kotlinx.atomicfu" id="releases.md-fff4cecd"   data-external="true" rel="noopener noreferrer" >kotlinx.atomicfu</a> version: <a href="https://github.com/Kotlin/kotlinx.atomicfu/releases/tag/0.14.2" id="releases.md-dd93386f"   data-external="true" rel="noopener noreferrer" >0.14.2</a></p></li><li class="list__item" id="releases.md-b2ab42e5" ><p><a href="https://ktor.io/" id="releases.md-a14db47f"   data-external="true" rel="noopener noreferrer" >ktor</a> version: <a href="https://github.com/ktorio/ktor/releases/tag/1.3.2" id="releases.md-188c46f1"   data-external="true" rel="noopener noreferrer" >1.3.2</a></p></li><li class="list__item" id="releases.md-bdd3c36d" ><p><a href="https://github.com/Kotlin/kotlinx.html" id="releases.md-eb38956e"   data-external="true" rel="noopener noreferrer" >kotlinx.html</a> version: <a href="https://github.com/Kotlin/kotlinx.html/releases/tag/0.7.1" id="releases.md-2f06124a"   data-external="true" rel="noopener noreferrer" >0.7.1</a></p></li><li class="list__item" id="releases.md-e53b5b1e" ><p><a href="https://github.com/Kotlin/kotlinx-nodejs" id="releases.md-f8356795"   data-external="true" rel="noopener noreferrer" >kotlinx-nodejs</a> version: <a href="https://bintray.com/kotlin/kotlinx/kotlinx.nodejs/0.0.3" id="releases.md-acc5d319"   data-external="true" rel="noopener noreferrer" >0.0.3</a></p></li></ul><p id="releases.md-a1980675" >The versions of libraries from <code class="code " id="releases.md-d3881285"  >kotlin-wrappers</code> (such as <code class="code " id="releases.md-c5775833"  >kotlin-react</code>) can be found in the <a href="https://github.com/JetBrains/kotlin-wrappers" id="releases.md-c2b6b71a"   data-external="true" rel="noopener noreferrer" >corresponding repository</a>.</p></td></tr></tbody ></table ></div><aside data-type="note" class="prompt" data-title="" id="releases.md-26583da6" ><p id="releases.md-83f1a28" >On the JVM, you usually can use library versions other than the recommended ones.</p></aside></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="plugin-releases.md"  >Kotlin plugin releases</h1><p id="plugin-releases.md-6e30f609" >The <a href="https://plugins.jetbrains.com/plugin/6954-kotlin" id="plugin-releases.md-775943cd"   data-external="true" rel="noopener noreferrer" >IntelliJ Kotlin plugin</a> and <a href="https://www.jetbrains.com/idea/" id="plugin-releases.md-bb28b0a2"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA</a> are on the same release cycle. To speed up the testing and delivery of new features, the plugin and the platform have been moved to the same codebase and ship simultaneously. Kotlin releases happen independently according to the <a href="https://blog.jetbrains.com/kotlin/2020/10/new-release-cadence-for-kotlin-and-the-intellij-kotlin-plugin/" id="plugin-releases.md-4421bd41"   data-external="true" rel="noopener noreferrer" >new release cadence</a>.</p><p id="plugin-releases.md-5923fb64" >Kotlin and the Kotlin plugin have distinct sets of features:</p><ul class="list _ul" id="plugin-releases.md-573d3025"   ><li class="list__item" id="plugin-releases.md-f81c200f" ><p>Kotlin releases contain language, compiler, and standard library features.</p></li><li class="list__item" id="plugin-releases.md-f56dab6e" ><p>Kotlin plugin releases introduce only IDE related features. For example, code formatting and debugging tools.</p></li></ul><p id="plugin-releases.md-e21ebe38" >This also affects the versioning of the Kotlin plugin. Releases now have the same version as the simultaneous IntelliJ IDEA release. You can learn more about new release cadence in this <a href="https://blog.jetbrains.com/kotlin/2020/10/new-release-cadence-for-kotlin-and-the-intellij-kotlin-plugin/" id="plugin-releases.md-de631b6d"   data-external="true" rel="noopener noreferrer" >blog post</a>.</p><section class="chapter"  ><h2 id="plugin-releases.md-update-to-a-new-release" data-toc="plugin-releases#plugin-releases.md-update-to-a-new-release"  >Update to a new release</h2><p id="plugin-releases.md-988c9602" >IntelliJ IDEA and Android Studio suggest updating to a new release once it is out. When you accept the suggestion, it automatically updates the Kotlin plugin to the new version. You can check the Kotlin plugin version in <b id="plugin-releases.md-59b14a8b" class=""  >Tools</b> | <b id="plugin-releases.md-b618295e" class=""  >Kotlin</b> | <b id="plugin-releases.md-8e8b2af3" class=""  >Configure Kotlin Plugin Updates</b>.</p><p id="plugin-releases.md-2ac646e3" >If you are migrating to the new feature release, Kotlin plugin\'s migration tools will help you with the migration.</p></section><section class="chapter"  ><h2 id="plugin-releases.md-release-details" data-toc="plugin-releases#plugin-releases.md-release-details"  >Release details</h2><p id="plugin-releases.md-7f61c4dd" >The following table lists the details of the latest Kotlin plugin releases:</p><div class="table-wrapper" ><table class=" wide" id="plugin-releases.md-8f096fed"  ><thead><tr class="ijRowHead" id="plugin-releases.md-2bc7c39b" ><th id="plugin-releases.md-5ff77a11"    >Release info</th><th id="plugin-releases.md-72f1a8aa"    >Release highlights</th></tr></thead><tbody ><tr class="" id="plugin-releases.md-80827c2c" ><td id="plugin-releases.md-d4709c99"    ><p id="plugin-releases.md-bc4a5d44" ><b id="plugin-releases.md-d9864072" class=""  >2021.1</b></p><p id="plugin-releases.md-2958177f" >Released: April 7, 2021</p></td><td id="plugin-releases.md-7f9e4640"    ><ul class="list _ul" id="plugin-releases.md-3e5233f7"   ><li class="list__item" id="plugin-releases.md-a9f2c657" ><p>Performance improvements</p></li><li class="list__item" id="plugin-releases.md-fef1e751" ><p>Evaluation of custom getters during debugging</p></li><li class="list__item" id="plugin-releases.md-60b43f3b" ><p>Improved Change Signature refactoring</p></li><li class="list__item" id="plugin-releases.md-6c25adc6" ><p>Code completion for type parameters</p></li><li class="list__item" id="plugin-releases.md-3bbc5e9b" ><p>UML diagrams for Kotlin classes</p></li></ul><p id="plugin-releases.md-bbb79680" >Learn more in:</p><ul class="list _ul" id="plugin-releases.md-e3e86936"   ><li class="list__item" id="plugin-releases.md-df2ff47e" ><a href="#whatsnew-plugin-20211.md" id="plugin-releases.md-548c0af"   >What\'s new in Kotlin plugin 2021.1</a></li><li class="list__item" id="plugin-releases.md-aad4bb5f" ><a href="https://www.jetbrains.com/idea/whatsnew/" id="plugin-releases.md-b8c4f18e"   data-external="true" rel="noopener noreferrer" >What’s New in IntelliJ IDEA 2021.1</a></li></ul></td></tr><tr class="" id="plugin-releases.md-128278bc" ><td id="plugin-releases.md-d1bdb10a"    ><p id="plugin-releases.md-87442efe" ><b id="plugin-releases.md-65139148" class=""  >2020.3</b></p><p id="plugin-releases.md-d96464d3" >Released: December 1, 2020</p></td><td id="plugin-releases.md-bf7dc43b"    ><ul class="list _ul" id="plugin-releases.md-1ca314ae"   ><li class="list__item" id="plugin-releases.md-bd285845" ><p>New types of inline refactorings</p></li><li class="list__item" id="plugin-releases.md-35abd9f3" ><p>Structural search and replace</p></li><li class="list__item" id="plugin-releases.md-4645bf41" ><p>EditorConfig support</p></li><li class="list__item" id="plugin-releases.md-ebae55c3" ><p>Project templates for Jetpack Compose for Desktop</p></li></ul><p id="plugin-releases.md-bb3177b3" >Learn more in:</p><ul class="list _ul" id="plugin-releases.md-ef8b5b86"   ><li class="list__item" id="plugin-releases.md-204f291a" ><a href="#whatsnew-plugin-20203.md" id="plugin-releases.md-935959b"   >What\'s new in Kotlin plugin 2020.3</a></li><li class="list__item" id="plugin-releases.md-1f94bfc5" ><a href="https://blog.jetbrains.com/idea/2020/12/intellij-idea-2020-3/" id="plugin-releases.md-d6400cdd"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA 2020.3 release blog post</a></li></ul></td></tr></tbody ></table ></div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="roadmap.md"  >Kotlin roadmap</h1><div class="table-wrapper" ><table class=" wide" id="roadmap.md-c03221f2"  ><thead><tr class="ijRowHead" id="roadmap.md-df8f7948" ><th id="roadmap.md-9ba6a308"    ><b id="roadmap.md-ca32dea9" class=""  >Last modified on</b></th><th id="roadmap.md-c8ef3d11"    >January 2021</th></tr></thead><tbody ><tr class="" id="roadmap.md-65a38430" ><td id="roadmap.md-147307bd"    ><b id="roadmap.md-6d6b9125" class=""  >Time frame</b></td><td id="roadmap.md-2e1a79c5"    >6 months until June 2021</td></tr><tr class="" id="roadmap.md-c95af7be" ><td id="roadmap.md-cb6a5c3b"    ><b id="roadmap.md-c457d828" class=""  >Next update</b></td><td id="roadmap.md-2e6eb0da"    >April 2021</td></tr></tbody ></table ></div><p id="roadmap.md-bb0cd212" >Welcome to the Kotlin roadmap! Get a sneak peek into the priorities of the Kotlin Team.</p><section class="chapter"  ><h2 id="roadmap.md-key-priorities" data-toc="roadmap#roadmap.md-key-priorities"  >Key priorities</h2><p id="roadmap.md-f79690c2" >The goal of this roadmap is to give you a big picture. Here’s a list of our key priorities – the areas we are investing the most effort into:</p><ul class="list _ul" id="roadmap.md-6b6d5b96"   ><li class="list__item" id="roadmap.md-a3656840" ><p><b id="roadmap.md-6e13e6c8" class=""  >Fast turnaround</b>: making the change-test-debug cycle really fast.</p></li><li class="list__item" id="roadmap.md-21e1cf2d" ><p><b id="roadmap.md-11c39cab" class=""  >New compiler</b>: a rewrite of the Kotlin compiler optimized for speed, parallelism, and unification. Later we will also work on pluggability.</p></li><li class="list__item" id="roadmap.md-414c2caa" ><p><b id="roadmap.md-70a8d2d0" class=""  >Fast and smooth IDE</b>: improving the stability and performance of the Kotlin IDE.</p></li><li class="list__item" id="roadmap.md-e1838ef7" ><p><b id="roadmap.md-4a0d9e7a" class=""  >Kotlin for JVM server-side development</b>: expanding support for server-side use cases across the Kotlin ecosystem.</p></li><li class="list__item" id="roadmap.md-6b006f0d" ><p><b id="roadmap.md-72c6c762" class=""  >Kotlin Multiplatform Mobile</b>: improving the user experience and feature set for sharing code on mobile platforms.</p></li></ul></section><section class="chapter"  ><h2 id="roadmap.md-kotlin-roadmap-by-subsystem" data-toc="roadmap#roadmap.md-kotlin-roadmap-by-subsystem"  >Kotlin roadmap by subsystem</h2><p id="roadmap.md-f021c27a" >To view the biggest projects we\'re working on, visit the <a href="https://youtrack.jetbrains.com/agiles/153-1251/current" id="roadmap.md-538ee9bc"   data-external="true" rel="noopener noreferrer" >YouTrack board</a> or the <a href="#roadmap.md-roadmap-details" id="roadmap.md-f6da5d4e"   >Roadmap details</a> table.</p><p id="roadmap.md-31e038fa" >If you have any questions or feedback about the roadmap or the items on it, feel free to post them to <a href="https://youtrack.jetbrains.com/issues/KT?q=%23%7BRoadmap%20Item%7D%20" id="roadmap.md-80171162"   data-external="true" rel="noopener noreferrer" >YouTrack tickets</a> or in the <a href="https://kotlinlang.slack.com/archives/C01AAJSG3V4" id="roadmap.md-d26709ec"   data-external="true" rel="noopener noreferrer" >#kotlin-roadmap</a> channel of Kotlin Slack (<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" id="roadmap.md-2003cd56"   data-external="true" rel="noopener noreferrer" >request an invite</a> ).</p><section class="chapter"  ><h3 id="roadmap.md-youtrack-board" data-toc="roadmap#roadmap.md-youtrack-board"  >YouTrack board</h3><p id="roadmap.md-fbac4a5" >Visit the <a href="https://youtrack.jetbrains.com/agiles/153-1251/current" id="roadmap.md-e17ae1df"   data-external="true" rel="noopener noreferrer" >new roadmap board in our issue tracker <img alt="YouTrack" title="YouTrack" id="roadmap.md-6b11e199" src="images/youtrack-logo.png"  class="inline-icon-30" width="30" height="30" /> YouTrack</a>!</p><p id="roadmap.md-2387d17c" ><figure title="Roadmap board in YouTrack"><img alt="Roadmap board in YouTrack" title="Roadmap board in YouTrack" id="roadmap.md-88b3a50b" src="images/roadmap-board.png"  class="" width="2176" height="1124" /></figure></p></section><section class="chapter"  ><h3 id="roadmap.md-roadmap-details" data-toc="roadmap#roadmap.md-roadmap-details"  >Roadmap details</h3><div class="table-wrapper" ><table class=" wide" id="roadmap.md-87d32355"  ><thead><tr class="ijRowHead" id="roadmap.md-611a9747" ><th id="roadmap.md-59505ddf"    >Subsystem</th><th id="roadmap.md-d229d413"    >In focus now</th><th id="roadmap.md-80ae002b"    >Postponed for later</th></tr></thead><tbody ><tr class="" id="roadmap.md-10afd4ed" ><td id="roadmap.md-afd4ba93"    ><b id="roadmap.md-8af18ec8" class=""  >Language</b></td><td id="roadmap.md-77984b5c"    ><ul class="list _ul" id="roadmap.md-81e21957"   ><li class="list__item" id="roadmap.md-a119fb67" ><a href="https://youtrack.jetbrains.com/issue/KT-42430" id="roadmap.md-fb57dc2c"   data-external="true" rel="noopener noreferrer" >Support JVM records</a></li><li class="list__item" id="roadmap.md-4b684b27" ><a href="https://youtrack.jetbrains.com/issue/KT-42433" id="roadmap.md-fbcb47c0"   data-external="true" rel="noopener noreferrer" >Support JVM sealed classes</a></li><li class="list__item" id="roadmap.md-9f7aee2c" ><a href="https://youtrack.jetbrains.com/issue/KT-42434" id="roadmap.md-f0d6e162"   data-external="true" rel="noopener noreferrer" >Release inline classes as Stable, secure Valhalla compatibility</a></li><li class="list__item" id="roadmap.md-ef7c0385" ><a href="https://youtrack.jetbrains.com/issue/KT-42435" id="roadmap.md-651f945c"   data-external="true" rel="noopener noreferrer" >Prototype multiple receivers</a></li></ul></td><td id="roadmap.md-888063c3"    ></td></tr><tr class="" id="roadmap.md-1a9577d7" ><td id="roadmap.md-15077169"    ><b id="roadmap.md-3e6bd843" class=""  >Compiler core</b></td><td id="roadmap.md-2dc82704"    ><ul class="list _ul" id="roadmap.md-27bf244e"   ><li class="list__item" id="roadmap.md-3cf4b648" ><a href="https://youtrack.jetbrains.com/issue/KT-44317" id="roadmap.md-3b50b0aa"   data-external="true" rel="noopener noreferrer" >Support incremental compilation for the new compiler</a></li><li class="list__item" id="roadmap.md-8d29fde1" ><a href="https://youtrack.jetbrains.com/issue/KT-44318" id="roadmap.md-337beb38"   data-external="true" rel="noopener noreferrer" >Work on services for the new compiler to interact with IDE</a></li><li class="list__item" id="roadmap.md-ee9cf7da" ><a href="https://youtrack.jetbrains.com/issue/KT-42286" id="roadmap.md-e8f3dd53"   data-external="true" rel="noopener noreferrer" >Maintain the current compiler (bug-fixing only)</a></li></ul></td><td id="roadmap.md-34c918ca"    ><ul class="list _ul" id="roadmap.md-72a09648"   ><li class="list__item" id="roadmap.md-86c8f822" ><p>⏸ Stable Compiler Plugin API</p></li><li class="list__item" id="roadmap.md-f5849246" ><p>⏸ Scripting improvements</p></li></ul></td></tr><tr class="" id="roadmap.md-1c29453" ><td id="roadmap.md-e7a53f47"    ><b id="roadmap.md-2bd4a9ac" class=""  >Kotlin/JVM</b></td><td id="roadmap.md-c146b0c1"    ><ul class="list _ul" id="roadmap.md-100ff114"   ><li class="list__item" id="roadmap.md-3bf93424" ><a href="https://youtrack.jetbrains.com/issue/KT-42287" id="roadmap.md-4fc14415"   data-external="true" rel="noopener noreferrer" >Make the new JVM IR backend Stable</a></li></ul></td><td id="roadmap.md-60641b6c"    ><ul class="list _ul" id="roadmap.md-4a3ea5d0"   ><li class="list__item" id="roadmap.md-cfa8884e" ><p>⏸ <a href="https://youtrack.jetbrains.com/issue/KT-42288" id="roadmap.md-ebb59cd0"   data-external="true" rel="noopener noreferrer" >Maintain the old JVM backend by fixing critical bugs</a></p></li></ul></td></tr><tr class="" id="roadmap.md-d0299d0" ><td id="roadmap.md-ee0c2fd9"    ><b id="roadmap.md-3ab8e746" class=""  >Kotlin/JS</b></td><td id="roadmap.md-7224c826"    ><ul class="list _ul" id="roadmap.md-de0fff0a"   ><li class="list__item" id="roadmap.md-920845b2" ><a href="https://youtrack.jetbrains.com/issue/KT-42289" id="roadmap.md-53e87c6f"   data-external="true" rel="noopener noreferrer" >Make the new JS IR backend Stable</a></li><li class="list__item" id="roadmap.md-c1cf467e" ><a href="https://youtrack.jetbrains.com/issue/KT-44320" id="roadmap.md-1d87bb"   data-external="true" rel="noopener noreferrer" >JS IR BE: Prototype lazy initialization for top-level properties like in JVM</a></li><li class="list__item" id="roadmap.md-a6550ff6" ><a href="https://youtrack.jetbrains.com/issue/KT-44319" id="roadmap.md-dfd30428"   data-external="true" rel="noopener noreferrer" >JS IR BE: Add an ability to generate separate JS files for each module</a></li><li class="list__item" id="roadmap.md-1c5341de" ><a href="https://youtrack.jetbrains.com/issue/KT-42291" id="roadmap.md-75bea342"   data-external="true" rel="noopener noreferrer" >Maintain the old JS backend by fixing critical bugs</a></li></ul></td><td id="roadmap.md-19b78c77"    ><ul class="list _ul" id="roadmap.md-2f2e5a1c"   ><li class="list__item" id="roadmap.md-fb449fb1" ><p>⏸ ES6 support</p></li><li class="list__item" id="roadmap.md-cb6e9c2d" ><p>⏸ <a href="https://youtrack.jetbrains.com/issue/KT-42290" id="roadmap.md-2aa87fa9"   data-external="true" rel="noopener noreferrer" >Improve Dukat support</a></p></li></ul></td></tr><tr class="" id="roadmap.md-9c1118d8" ><td id="roadmap.md-4f0deaca"    ><b id="roadmap.md-2343d3ec" class=""  >Kotlin/WASM</b></td><td id="roadmap.md-8c389841"    ><ul class="list _ul" id="roadmap.md-4a4b1e9d"   ><li class="list__item" id="roadmap.md-376759a8" ><a href="https://youtrack.jetbrains.com/issue/KT-42292" id="roadmap.md-6dee85c7"   data-external="true" rel="noopener noreferrer" >Prototype a compiler for Wasm GC proposal</a></li></ul></td><td id="roadmap.md-dea0a919"    >Note: Wasm support in <a href="https://kotlinlang.org/docs/reference/native-overview.html" id="roadmap.md-27010b77"   data-external="true" rel="noopener noreferrer" >Kotlin/Native</a> (through LLVM) will be deprecated and removed</td></tr><tr class="" id="roadmap.md-1e4174fb" ><td id="roadmap.md-abec4511"    ><b id="roadmap.md-25811d56" class=""  >Kotlin/Native</b></td><td id="roadmap.md-8d390c8e"    ><ul class="list _ul" id="roadmap.md-8fd52267"   ><li class="list__item" id="roadmap.md-3ab8aa9d" ><a href="https://youtrack.jetbrains.com/issue/KT-42293" id="roadmap.md-e0620acb"   data-external="true" rel="noopener noreferrer" >Provide binary compatibility between incremental releases</a></li><li class="list__item" id="roadmap.md-711888bb" ><a href="https://youtrack.jetbrains.com/issue/KT-42294" id="roadmap.md-7d631787"   data-external="true" rel="noopener noreferrer" >Improve compilation time</a></li><li class="list__item" id="roadmap.md-c156e571" ><a href="https://youtrack.jetbrains.com/issue/KT-42296" id="roadmap.md-d73786a0"   data-external="true" rel="noopener noreferrer" >Prototype a new garbage collector</a></li><li class="list__item" id="roadmap.md-9777825d" ><a href="https://youtrack.jetbrains.com/issue/KT-42297" id="roadmap.md-5848f934"   data-external="true" rel="noopener noreferrer" >Improve exporting Kotlin code to Objective-C</a></li><li class="list__item" id="roadmap.md-7d1722b9" ><a href="https://youtrack.jetbrains.com/issue/KT-44321" id="roadmap.md-92c4202e"   data-external="true" rel="noopener noreferrer" >Support producing binaries that run on Apple Silicon without Rosetta 2</a></li></ul></td><td id="roadmap.md-5467c26d"    ><ul class="list _ul" id="roadmap.md-b0b2ab06"   ><li class="list__item" id="roadmap.md-e63600fe" ><p>⏸ Support Mac Catalyst</p></li><li class="list__item" id="roadmap.md-1eda62d" ><p>⏸ Development with Kotlin/Native on Apple Silicon without Rosetta 2</p></li><li class="list__item" id="roadmap.md-e9b20d0" ><p>⏸ Direct interoperability with Swift</p></li><li class="list__item" id="roadmap.md-9292931a" ><p>⏸ Interoperability with C++</p></li><li class="list__item" id="roadmap.md-c3238297" ><p>⏸ Support Alpine Linux</p></li></ul></td></tr><tr class="" id="roadmap.md-87b69a11" ><td id="roadmap.md-68757dec"    ><b id="roadmap.md-94f3d615" class=""  >Kotlin Multiplatform</b></td><td id="roadmap.md-5c22335f"    ><ul class="list _ul" id="roadmap.md-cbd0f5b0"   ><li class="list__item" id="roadmap.md-574c417e" ><a href="https://youtrack.jetbrains.com/issue/KT-44325" id="roadmap.md-8f65cf69"   data-external="true" rel="noopener noreferrer" >Improve frontend and IDE import stability for Multiplatform projects</a></li><li class="list__item" id="roadmap.md-1ec675a7" ><a href="https://youtrack.jetbrains.com/issue/KT-44326" id="roadmap.md-3fe52727"   data-external="true" rel="noopener noreferrer" >Introduce a complex KMM application sample</a></li><li class="list__item" id="roadmap.md-971e72a9" ><a href="https://youtrack.jetbrains.com/issue/KT-44328" id="roadmap.md-cf7049d7"   data-external="true" rel="noopener noreferrer" >Improve Kotlin/Native debugging experience</a></li><li class="list__item" id="roadmap.md-5ce92a6e" ><a href="https://youtrack.jetbrains.com/issue/KT-44329" id="roadmap.md-97f266fe"   data-external="true" rel="noopener noreferrer" >Improve UX of using Native libraries in Kotlin</a></li></ul></td><td id="roadmap.md-1a2dbd51"    ><ul class="list _ul" id="roadmap.md-d8f43c34"   ><li class="list__item" id="roadmap.md-1c2028cf" ><p>⏸ <a href="https://youtrack.jetbrains.com/issue/KT-42301" id="roadmap.md-12dbcc8a"   data-external="true" rel="noopener noreferrer" >Improve dependency management for iOS</a></p></li><li class="list__item" id="roadmap.md-3191f8a9" ><p>⏸ <a href="https://youtrack.jetbrains.com/issue/KT-42303" id="roadmap.md-a0550e6f"   data-external="true" rel="noopener noreferrer" >Improve Gradle and Compiler error messages</a></p></li><li class="list__item" id="roadmap.md-50238ba" ><p>⏸ Sharing code between JVM and Android</p></li><li class="list__item" id="roadmap.md-a387c493" ><p>⏸ KMM plugin: support for IntelliJ IDEA</p></li></ul></td></tr><tr class="" id="roadmap.md-eb66030a" ><td id="roadmap.md-7082aad1"    ><b id="roadmap.md-43a384e6" class=""  >IDE</b></td><td id="roadmap.md-f92dce35"    ><ul class="list _ul" id="roadmap.md-4dc60706"   ><li class="list__item" id="roadmap.md-81bcdf87" ><a href="https://youtrack.jetbrains.com/issue/KT-42304" id="roadmap.md-a012b806"   data-external="true" rel="noopener noreferrer" >Improve IDE performance</a></li><li class="list__item" id="roadmap.md-58c8a20b" ><a href="https://youtrack.jetbrains.com/issue/KT-44330" id="roadmap.md-c8c47dbd"   data-external="true" rel="noopener noreferrer" >Improve debugging experience</a></li><li class="list__item" id="roadmap.md-9c6cd45d" ><a href="https://youtrack.jetbrains.com/issue/KT-42306" id="roadmap.md-bd6e393a"   data-external="true" rel="noopener noreferrer" >Improve cross-language support in the Inline Method and Change Signature refactorings</a></li><li class="list__item" id="roadmap.md-e0612789" ><a href="https://youtrack.jetbrains.com/issue/KT-42307" id="roadmap.md-25fc826e"   data-external="true" rel="noopener noreferrer" >Prototype IDE plugin with the new compiler frontend</a></li><li class="list__item" id="roadmap.md-f5f998cc" ><a href="https://youtrack.jetbrains.com/issue/KT-42308" id="roadmap.md-7bac3bc8"   data-external="true" rel="noopener noreferrer" >Move the Kotlin plugin to the IntelliJ platform development infrastructure</a></li></ul></td><td id="roadmap.md-7948dca9"    ><ul class="list _ul" id="roadmap.md-e7bd4b50"   ><li class="list__item" id="roadmap.md-490e36" ><p>⏸ Advanced tooling that users have in Java but is missing in Kotlin.</p></li><li class="list__item" id="roadmap.md-12a7960b" ><p>⏸ Quality of less frequently used features, except blocking problems.</p></li><li class="list__item" id="roadmap.md-a6a093c9" ><p>⏸ Support for VSCode or other IDEs. Community initiatives in this respect are welcome.</p></li></ul></td></tr><tr class="" id="roadmap.md-d33dba2" ><td id="roadmap.md-e7eeb26f"    ><b id="roadmap.md-ffae93ab" class=""  >Build tools</b></td><td id="roadmap.md-dbf2abd3"    ><ul class="list _ul" id="roadmap.md-79b54301"   ><li class="list__item" id="roadmap.md-7d1e0e7f" ><a href="https://youtrack.jetbrains.com/issue/KT-42309" id="roadmap.md-18f0370e"   data-external="true" rel="noopener noreferrer" >Improve incremental compilation performance in Gradle</a></li><li class="list__item" id="roadmap.md-da76269e" ><a href="https://youtrack.jetbrains.com/issue/KT-42310" id="roadmap.md-4c9cfdf9"   data-external="true" rel="noopener noreferrer" >Support the Gradle configuration cache</a></li><li class="list__item" id="roadmap.md-c88ecda5" ><a href="https://youtrack.jetbrains.com/issue/KT-42311" id="roadmap.md-8ef79e0d"   data-external="true" rel="noopener noreferrer" >Decrease time for opening Gradle projects</a></li></ul></td><td id="roadmap.md-1d024193"    ><ul class="list _ul" id="roadmap.md-a2584bdd"   ><li class="list__item" id="roadmap.md-63dcc09f" ><p id="roadmap.md-cb2c7dea" >⏸ Improvements in Kotlin Maven support</p></li></ul></td></tr><tr class="" id="roadmap.md-e1107493" ><td id="roadmap.md-e7708dda"    ><b id="roadmap.md-24ce5128" class=""  >Libraries</b></td><td id="roadmap.md-9e4aea82"    ><ul class="list _ul" id="roadmap.md-48a4fb18"   ><li class="list__item" id="roadmap.md-d8f4034a" ><a href="https://youtrack.jetbrains.com/issue/KT-42436" id="roadmap.md-d89029c2"   data-external="true" rel="noopener noreferrer" >Support java.nio.Path extension in the standard library</a></li><li class="list__item" id="roadmap.md-3233dcbe" ><a href="https://youtrack.jetbrains.com/issue/KT-42437" id="roadmap.md-33d44b99"   data-external="true" rel="noopener noreferrer" >Make multiplatform kotlin.text API locale-agnostic by default</a></li><li class="list__item" id="roadmap.md-d3bd7745" ><a href="https://youtrack.jetbrains.com/issue/KT-42315" id="roadmap.md-c79d15b5"   data-external="true" rel="noopener noreferrer" >Improve kotlinx-datetime library</a></li><li class="list__item" id="roadmap.md-829b2c4f" ><a href="https://youtrack.jetbrains.com/issue/KT-42316" id="roadmap.md-3b1e2133"   data-external="true" rel="noopener noreferrer" >Improve kotlinx-serialization (release v1.1)</a></li><li class="list__item" id="roadmap.md-5310b37e" ><a href="https://youtrack.jetbrains.com/issue/KT-44335" id="roadmap.md-e0f55d56"   data-external="true" rel="noopener noreferrer" >Improve kotlinx-serialization (release v1.2)</a></li><li class="list__item" id="roadmap.md-872ef099" ><a href="https://youtrack.jetbrains.com/issue/KT-44336" id="roadmap.md-fc3cfb85"   data-external="true" rel="noopener noreferrer" >Improve kotlinx-coroutines (release v1.5)</a></li><li class="list__item" id="roadmap.md-b00acc4b" ><a href="https://youtrack.jetbrains.com/issue/KT-44333" id="roadmap.md-9bb9228c"   data-external="true" rel="noopener noreferrer" >Implement unambiguous API for Char conversion</a></li><li class="list__item" id="roadmap.md-b31f7cef" ><a href="https://youtrack.jetbrains.com/issue/KT-44334" id="roadmap.md-2b9338db"   data-external="true" rel="noopener noreferrer" >Implement multiplatform API for characters</a></li></ul></td><td id="roadmap.md-e3c29a05"    ><ul class="list _ul" id="roadmap.md-7d6d8190"   ><li class="list__item" id="roadmap.md-68ae6c01" ><p>⏸ <a href="https://youtrack.jetbrains.com/issue/KT-42314" id="roadmap.md-734d2e8d"   data-external="true" rel="noopener noreferrer" >Improve usability of multi-threaded coroutines library for Kotlin/Native</a></p></li><li class="list__item" id="roadmap.md-5ee6f392" ><p>⏸ <code class="code " id="roadmap.md-696c79f3"  >kotlinx-cli</code></p></li><li class="list__item" id="roadmap.md-9ede6e92" ><p>⏸ <code class="code " id="roadmap.md-98e1e3a9"  >binary-compatibility-validator</code></p></li><li class="list__item" id="roadmap.md-f06d7e3f" ><p>⏸ <code class="code " id="roadmap.md-577be3e5"  >kotlinx-io</code></p></li><li class="list__item" id="roadmap.md-52c4d16d" ><p>⏸ Any new multiplatform libraries</p></li></ul></td></tr><tr class="" id="roadmap.md-101251cf" ><td id="roadmap.md-3abe26d2"    ><b id="roadmap.md-3c87f5b3" class=""  >Website</b></td><td id="roadmap.md-c098ee99"    ><ul class="list _ul" id="roadmap.md-9a21505c"   ><li class="list__item" id="roadmap.md-b8f497df" ><a href="https://youtrack.jetbrains.com/issue/KT-44338" id="roadmap.md-5421d91"   data-external="true" rel="noopener noreferrer" >Revamp Kotlin documentation</a></li><li class="list__item" id="roadmap.md-89acfdcb" ><a href="https://youtrack.jetbrains.com/issue/KT-44339" id="roadmap.md-befc8dcb"   data-external="true" rel="noopener noreferrer" >Make the Kotlin website mobile friendly</a></li><li class="list__item" id="roadmap.md-c592415a" ><a href="https://youtrack.jetbrains.com/issue/KT-44340" id="roadmap.md-b72d3399"   data-external="true" rel="noopener noreferrer" >Design a new Kotlin visual style</a></li><li class="list__item" id="roadmap.md-4f3ef81c" ><a href="https://youtrack.jetbrains.com/issue/KT-44342" id="roadmap.md-66b13b57"   data-external="true" rel="noopener noreferrer" >Close try.kotlinlang.org</a></li></ul></td><td id="roadmap.md-3690c56d"    ></td></tr><tr class="" id="roadmap.md-9dac4813" ><td id="roadmap.md-4dc782fb"    ><b id="roadmap.md-120d4ee3" class=""  >Ktor</b></td><td id="roadmap.md-d16dde8b"    ><p id="roadmap.md-d63991f7" ><a href="https://blog.jetbrains.com/ktor/2020/08/10/ktor-roadmap-for-2020-2021/" id="roadmap.md-c4581664"   data-external="true" rel="noopener noreferrer" >Ktor roadmap</a></p></td><td id="roadmap.md-c3f87f1e"    ></td></tr></tbody ></table ></div><aside data-type="note" class="prompt" data-title="" id="roadmap.md-41c712c5" ><ul class="list _ul" id="roadmap.md-5d3f41af"   ><li class="list__item" id="roadmap.md-7ef8d251" ><p>This roadmap is not an exhaustive list of all things the team is working on, only the biggest projects.</p></li><li class="list__item" id="roadmap.md-981e5de2" ><p>There’s no commitment to delivering specific features or fixes in specific versions.</p></li><li class="list__item" id="roadmap.md-1facc85c" ><p>It lists some things that are postponed and will NOT get the team’s attention in the nearest future.</p></li><li class="list__item" id="roadmap.md-b4643c20" ><p>We will adjust our priorities as we go and update the roadmap approximately every three months.</p></li></ul></aside></section></section><section class="chapter"  ><h2 id="roadmap.md-what-s-changed-since-october-2020" data-toc="roadmap#roadmap.md-what-s-changed-since-october-2020"  >What\'s changed since October 2020</h2><section class="chapter"  ><h3 id="roadmap.md-completed-items" data-toc="roadmap#roadmap.md-completed-items"  >Completed items</h3><p id="roadmap.md-7509b771" >We\'ve <b id="roadmap.md-e93534dd" class=""  >completed</b> the following items from the roadmap that we published in October 2020:</p><ul class="list _ul" id="roadmap.md-85398f96"   ><li class="list__item" id="roadmap.md-67bb01eb" ><p>✅ Compiler core: <a href="https://youtrack.jetbrains.com/issue/KT-42285" id="roadmap.md-ccb23717"   data-external="true" rel="noopener noreferrer" >Bootstrap the new compiler (make the new Kotlin compiler compile itself)</a></p></li><li class="list__item" id="roadmap.md-4fc38872" ><p>✅ Kotlin/Native: <a href="https://youtrack.jetbrains.com/issue/KT-42295" id="roadmap.md-5e73b5d5"   data-external="true" rel="noopener noreferrer" >Runtime performance: improve object allocation times</a></p></li><li class="list__item" id="roadmap.md-a96146ef" ><p>✅ Multiplatform: <a href="https://youtrack.jetbrains.com/issue/KT-42299" id="roadmap.md-a5a54e74"   data-external="true" rel="noopener noreferrer" >KMM plugin: Fix major bugs</a></p></li><li class="list__item" id="roadmap.md-540064e1" ><p>✅ Multiplatform: <a href="https://youtrack.jetbrains.com/issue/KT-42298" id="roadmap.md-4c75e4"   data-external="true" rel="noopener noreferrer" >KMM plugin: Run common tests on Android devices</a> (partially)</p></li><li class="list__item" id="roadmap.md-4702fe12" ><p>✅ Libraries: <a href="https://youtrack.jetbrains.com/issue/KT-42317" id="roadmap.md-2f2fa109"   data-external="true" rel="noopener noreferrer" >Improve <code class="code " id="roadmap.md-7888d9a4"  >kotlinx-coroutines</code> (release v1.4)</a></p></li></ul></section><section class="chapter"  ><h3 id="roadmap.md-postponed-items" data-toc="roadmap#roadmap.md-postponed-items"  >Postponed items</h3><p id="roadmap.md-3cf15994" >We\'ve decided to <b id="roadmap.md-ba9bdd41" class=""  >postpone</b> the following items from the previous roadmap:</p><ul class="list _ul" id="roadmap.md-d2e84656"   ><li class="list__item" id="roadmap.md-fa67471c" ><p>⏸ Kotlin/JVM: <a href="https://youtrack.jetbrains.com/issue/KT-42288" id="roadmap.md-81d9a087"   data-external="true" rel="noopener noreferrer" >Maintain the old JVM backend by fixing critical bugs</a></p></li><li class="list__item" id="roadmap.md-a3fe9db4" ><p>⏸ Kotlin/JS: <a href="https://youtrack.jetbrains.com/issue/KT-42290" id="roadmap.md-adb43ed7"   data-external="true" rel="noopener noreferrer" >Improve Dukat support</a></p></li><li class="list__item" id="roadmap.md-db8f626d" ><p>⏸ Multiplatform: <a href="https://youtrack.jetbrains.com/issue/KT-42301" id="roadmap.md-842c04b"   data-external="true" rel="noopener noreferrer" >Improve dependency management for iOS</a></p></li><li class="list__item" id="roadmap.md-b3597c76" ><p>⏸ Multiplatform: <a href="https://youtrack.jetbrains.com/issue/KT-42303" id="roadmap.md-6757c430"   data-external="true" rel="noopener noreferrer" >Improve Gradle and Compiler error messages</a></p></li><li class="list__item" id="roadmap.md-41bc13a5" ><p>⏸ Libraries: <a href="https://youtrack.jetbrains.com/issue/KT-42314" id="roadmap.md-906c51aa"   data-external="true" rel="noopener noreferrer" >Improve usability of multi-threaded coroutines library for Kotlin/Native</a></p></li></ul></section><section class="chapter"  ><h3 id="roadmap.md-new-items" data-toc="roadmap#roadmap.md-new-items"  >New items</h3><p id="roadmap.md-da63bf24" >We\'ve <b id="roadmap.md-64cfe8a6" class=""  >added</b> the following items to the roadmap:</p><ul class="list _ul" id="roadmap.md-2ca9223"   ><li class="list__item" id="roadmap.md-e414ff3f" ><p>🆕 Compiler core: <a href="https://youtrack.jetbrains.com/issue/KT-44317" id="roadmap.md-625840f4"   data-external="true" rel="noopener noreferrer" >Support incremental compilation for the new compiler</a></p></li><li class="list__item" id="roadmap.md-b66239d1" ><p>🆕 Compiler core: <a href="https://youtrack.jetbrains.com/issue/KT-44318" id="roadmap.md-23806336"   data-external="true" rel="noopener noreferrer" >Work on services for the new compiler to interact with IDE</a></p></li><li class="list__item" id="roadmap.md-aabf494c" ><p>🆕 Kotlin/JS: <a href="https://youtrack.jetbrains.com/issue/KT-44319" id="roadmap.md-749d4bf9"   data-external="true" rel="noopener noreferrer" >JS IR BE: Add an ability to generate separate JS files for each module</a></p></li><li class="list__item" id="roadmap.md-56f75a8f" ><p>🆕 Kotlin/JS: <a href="https://youtrack.jetbrains.com/issue/KT-44320" id="roadmap.md-bc601f04"   data-external="true" rel="noopener noreferrer" >JS IR BE: Prototype lazy initialization for top-level properties like in JVM</a></p></li><li class="list__item" id="roadmap.md-3b5e32cb" ><p>🆕 Kotlin/Native: <a href="https://youtrack.jetbrains.com/issue/KT-44321" id="roadmap.md-6b3a42a4"   data-external="true" rel="noopener noreferrer" >Support producing binaries that run on Apple Silicon without Rosetta 2</a></p></li><li class="list__item" id="roadmap.md-e230c83c" ><p>🆕 Multiplatform: <a href="https://youtrack.jetbrains.com/issue/KT-44325" id="roadmap.md-f40b1fac"   data-external="true" rel="noopener noreferrer" >Improve frontend and IDE import stability for Multiplatform projects</a></p></li><li class="list__item" id="roadmap.md-a8772bc2" ><p>🆕 Multiplatform: <a href="https://youtrack.jetbrains.com/issue/KT-44326" id="roadmap.md-513fdd8d"   data-external="true" rel="noopener noreferrer" >Introduce a complex KMM application sample</a></p></li><li class="list__item" id="roadmap.md-d0f93f1f" ><p>🆕 Multiplatform: <a href="https://youtrack.jetbrains.com/issue/KT-44328" id="roadmap.md-b5ec7eaf"   data-external="true" rel="noopener noreferrer" >Improve Kotlin/Native debugging experience</a></p></li><li class="list__item" id="roadmap.md-76c7ccdb" ><p>🆕 Multiplatform: <a href="https://youtrack.jetbrains.com/issue/KT-44329" id="roadmap.md-d2500173"   data-external="true" rel="noopener noreferrer" >Improve UX of using Native libraries in Kotlin</a></p></li><li class="list__item" id="roadmap.md-44527226" ><p>🆕 IDE: <a href="https://youtrack.jetbrains.com/issue/KT-44330" id="roadmap.md-50cc048b"   data-external="true" rel="noopener noreferrer" >Improve debugging experience</a></p></li><li class="list__item" id="roadmap.md-48533833" ><p>🆕 Libraries: <a href="https://youtrack.jetbrains.com/issue/KT-44335" id="roadmap.md-2fbe7181"   data-external="true" rel="noopener noreferrer" >Improve kotlinx-serialization (release v1.2)</a></p></li><li class="list__item" id="roadmap.md-131a09d6" ><p>🆕 Libraries: <a href="https://youtrack.jetbrains.com/issue/KT-44336" id="roadmap.md-f1adeea8"   data-external="true" rel="noopener noreferrer" >Improve kotlinx-coroutines (release v1.5)</a></p></li><li class="list__item" id="roadmap.md-5fa43372" ><p>🆕 Libraries: <a href="https://youtrack.jetbrains.com/issue/KT-44333" id="roadmap.md-e993e1d2"   data-external="true" rel="noopener noreferrer" >Implement unambiguous API for Char conversion</a></p></li><li class="list__item" id="roadmap.md-cab1e7c" ><p>🆕 Libraries: <a href="https://youtrack.jetbrains.com/issue/KT-44334" id="roadmap.md-d64eaf78"   data-external="true" rel="noopener noreferrer" >Implement multiplatform API for characters</a></p></li></ul><p id="roadmap.md-a64e4f1b" >We\'ve also added a new subsystem, <b id="roadmap.md-a6512e37" class=""  >Website</b>, to share our roadmap for <a href="https://kotlinlang.org/" id="roadmap.md-7ee0a1a8"   data-external="true" rel="noopener noreferrer" >kotlinlang.org</a>:</p><ul class="list _ul" id="roadmap.md-55d80cd9"   ><li class="list__item" id="roadmap.md-d789af24" ><p>🆕 Website: <a href="https://youtrack.jetbrains.com/issue/KT-44338" id="roadmap.md-8de8b937"   data-external="true" rel="noopener noreferrer" >Revamp Kotlin documentation</a></p></li><li class="list__item" id="roadmap.md-d506adb" ><p>🆕 Website: <a href="https://youtrack.jetbrains.com/issue/KT-44339" id="roadmap.md-605f40bd"   data-external="true" rel="noopener noreferrer" >Make the Kotlin website mobile friendly</a></p></li><li class="list__item" id="roadmap.md-696a48c9" ><p>🆕 Website: <a href="https://youtrack.jetbrains.com/issue/KT-44340" id="roadmap.md-f403757"   data-external="true" rel="noopener noreferrer" >Design a new Kotlin visual style</a></p></li><li class="list__item" id="roadmap.md-c0dddb7f" ><p>🆕 Website: <a href="https://youtrack.jetbrains.com/issue/KT-44342" id="roadmap.md-9c92000c"   data-external="true" rel="noopener noreferrer" >Close try.kotlinlang.org</a></p></li></ul></section><section class="chapter"  ><h3 id="roadmap.md-items-in-progress" data-toc="roadmap#roadmap.md-items-in-progress"  >Items in progress</h3><p id="roadmap.md-b5eca99c" >All other previously identified roadmap items are in progress. You can check their <a href="https://youtrack.jetbrains.com/issues/KT?q=Type:%20%7BRoadmap%20Item%7D%20state:%20%7BIn%20Progress%7D%20" id="roadmap.md-b3ed6a9a"   data-external="true" rel="noopener noreferrer" >YouTrack tickets</a> for updates.</p></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="collections-overview.md"  >Collections overview</h1><p id="collections-overview.md-fceb7ecd" >The Kotlin Standard Library provides a comprehensive set of tools for managing <em id="collections-overview.md-d07dcd40" class=""  >collections</em> – groups of a variable number of items (possibly zero) that share significance to the problem being solved and are operated upon commonly.</p><p id="collections-overview.md-62d63232" >Collections are a common concept for most programming languages, so if you\'re familiar with, for example, Java or Python collections, you can skip this introduction and proceed to the detailed sections.</p><p id="collections-overview.md-b12f2986" >A collection usually contains a number of objects (this number may also be zero) of the same type. Objects in a collection are called <em id="collections-overview.md-b20eb04e" class=""  >elements</em> or <em id="collections-overview.md-35df76b0" class=""  >items</em>. For example, all the students in a department form a collection that can be used to calculate their average age.</p><p id="collections-overview.md-545d63a4" >The following collection types are relevant for Kotlin:</p><ul class="list _ul" id="collections-overview.md-51dcccfe"   ><li class="list__item" id="collections-overview.md-399bd2e8" ><p><em id="collections-overview.md-c0f28bc8" class=""  >List</em> is an ordered collection with access to elements by indices – integer numbers that reflect their position. Elements can occur more than once in a list. An example of a list is a sentence: it\'s a group of words, their order is important, and they can repeat.</p></li><li class="list__item" id="collections-overview.md-b0588d7c" ><p><em id="collections-overview.md-f61f9be0" class=""  >Set</em> is a collection of unique elements. It reflects the mathematical abstraction of set: a group of objects without repetitions. Generally, the order of set elements has no significance. For example, an alphabet is a set of letters.</p></li><li class="list__item" id="collections-overview.md-cb4965ad" ><p><em id="collections-overview.md-d004924a" class=""  >Map</em> (or <em id="collections-overview.md-4cf8c4b6" class=""  >dictionary</em>) is a set of key-value pairs. Keys are unique, and each of them maps to exactly one value. The values can be duplicates. Maps are useful for storing logical connections between objects, for example, an employee\'s ID and their position.</p></li></ul><p id="collections-overview.md-3d467777" >Kotlin lets you manipulate collections independently of the exact type of objects stored in them. In other words, you add a <code class="code " id="collections-overview.md-e4b1b8d"  >String</code> to a list of <code class="code " id="collections-overview.md-eecee452"  >String</code> s the same way as you would do with <code class="code " id="collections-overview.md-eea0f3fc"  >Int</code> s or a user-defined class. So, the Kotlin Standard Library offers generic interfaces, classes, and functions for creating, populating, and managing collections of any type.</p><p id="collections-overview.md-5fbde78" >The collection interfaces and related functions are located in the <code class="code " id="collections-overview.md-e1a7e258"  >kotlin.collections</code> package. Let\'s get an overview of its contents.</p><section class="chapter"  ><h2 id="collections-overview.md-collection-types" data-toc="collections-overview#collections-overview.md-collection-types"  >Collection types</h2><p id="collections-overview.md-9d78bc3b" >The Kotlin Standard Library provides implementations for basic collection types: sets, lists, and maps. A pair of interfaces represent each collection type:</p><ul class="list _ul" id="collections-overview.md-5ba908"   ><li class="list__item" id="collections-overview.md-79613072" ><p>A <em id="collections-overview.md-ae533c17" class=""  >read-only</em> interface that provides operations for accessing collection elements.</p></li><li class="list__item" id="collections-overview.md-1bf792f9" ><p>A <em id="collections-overview.md-cf0d8ab4" class=""  >mutable</em> interface that extends the corresponding read-only interface with write operations: adding, removing, and updating its elements.</p></li></ul><p id="collections-overview.md-887195df" >Note that altering a mutable collection doesn\'t require it to be a <a href="#basic-syntax.md-variables" id="collections-overview.md-cb3d7ab"   ><code class="code " id="collections-overview.md-d7ab53da"  >var</code></a>: write operations modify the same mutable collection object, so the reference doesn\'t change. Although, if you try to reassign a <code class="code " id="collections-overview.md-78f11ac2"  >val</code> collection, you\'ll get a compilation error.</p><div class="code-block" data-lang="kotlin" id="collections-overview.md-7e74a79a"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = mutableListOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    numbers.add(&quot;five&quot;)   // this is OK    \n    //numbers = mutableListOf(&quot;six&quot;, &quot;seven&quot;)      // compilation error\n//sampleEnd\n}\n</div><p id="collections-overview.md-ad72e623" >The read-only collection types are <a href="#generics.md-variance" id="collections-overview.md-b09bd9f"   >covariant</a>. This means that, if a <code class="code " id="collections-overview.md-df02901f"  >Rectangle</code> class inherits from <code class="code " id="collections-overview.md-1afc0de8"  >Shape</code>, you can use a <code class="code " id="collections-overview.md-a50745d4"  >List&lt;Rectangle&gt;</code> anywhere the <code class="code " id="collections-overview.md-d415f170"  >List&lt;Shape&gt;</code> is required. In other words, the collection types have the same subtyping relationship as the element types. Maps are covariant on the value type, but not on the key type.</p><p id="collections-overview.md-181adb43" >In turn, mutable collections aren\'t covariant; otherwise, this would lead to runtime failures. If <code class="code " id="collections-overview.md-d65a2f9e"  >MutableList&lt;Rectangle&gt;</code> was a subtype of <code class="code " id="collections-overview.md-dfb55780"  >MutableList&lt;Shape&gt;</code>, you could insert other <code class="code " id="collections-overview.md-a0558730"  >Shape</code> inheritors (for example, <code class="code " id="collections-overview.md-40ce63ff"  >Circle</code>) into it, thus violating its <code class="code " id="collections-overview.md-eef4738b"  >Rectangle</code> type argument.</p><p id="collections-overview.md-8663f705" >Below is a diagram of the Kotlin collection interfaces:</p><p id="collections-overview.md-1aa1d632" ><figure title="Collection interfaces hierarchy"><img alt="Collection interfaces hierarchy" title="Collection interfaces hierarchy" id="collections-overview.md-153e4e16" src="images/collections-diagram.png"  class="" width="500" height="383" /></figure></p><p id="collections-overview.md-ead8f898" >Let\'s walk through the interfaces and their implementations.</p><section class="chapter"  ><h3 id="collections-overview.md-collection" data-toc="collections-overview#collections-overview.md-collection"  >Collection</h3><p id="collections-overview.md-691282f2" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html" id="collections-overview.md-1ec5d9b1"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collections-overview.md-87a673b7"  >Collection&lt;T&gt;</code></a> is the root of the collection hierarchy. This interface represents the common behavior of a read-only collection: retrieving size, checking item membership, and so on. <code class="code " id="collections-overview.md-f4274379"  >Collection</code> inherits from the <code class="code " id="collections-overview.md-3108ff73"  >Iterable&lt;T&gt;</code> interface that defines the operations for iterating elements. You can use <code class="code " id="collections-overview.md-84d7d4d"  >Collection</code> as a parameter of a function that applies to different collection types. For more specific cases, use the <code class="code " id="collections-overview.md-9d804d8d"  >Collection</code> \'s inheritors: <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html" id="collections-overview.md-4232fa12"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collections-overview.md-acca3a31"  >List</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-set/index.html" id="collections-overview.md-aae1c499"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collections-overview.md-593d062d"  >Set</code></a>.</p><div class="code-block" data-lang="kotlin" id="collections-overview.md-b531d83b"        data-runnable="true" data-min-compiler-version="1.3"  >fun printAll(strings: Collection&lt;String&gt;) {\n        for(s in strings) print(&quot;$s &quot;)\n        println()\n    }\n    \nfun main() {\n    val stringList = listOf(&quot;one&quot;, &quot;two&quot;, &quot;one&quot;)\n    printAll(stringList)\n    \n    val stringSet = setOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;)\n    printAll(stringSet)\n}\n</div><p id="collections-overview.md-8759fca7" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-collection/index.html" id="collections-overview.md-92adb692"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collections-overview.md-ca989276"  >MutableCollection&lt;T&gt;</code></a> is a <code class="code " id="collections-overview.md-e8e90675"  >Collection</code> with write operations, such as <code class="code " id="collections-overview.md-94fbdc31"  >add</code> and <code class="code " id="collections-overview.md-b6598899"  >remove</code>.</p><div class="code-block" data-lang="kotlin" id="collections-overview.md-3fe85328"        data-runnable="true" data-min-compiler-version="1.3"  >fun List&lt;String&gt;.getShortWordsTo(shortWords: MutableList&lt;String&gt;, maxLength: Int) {\n    this.filterTo(shortWords) { it.length &lt;= maxLength }\n    // throwing away the articles\n    val articles = setOf(&quot;a&quot;, &quot;A&quot;, &quot;an&quot;, &quot;An&quot;, &quot;the&quot;, &quot;The&quot;)\n    shortWords -= articles\n}\n\nfun main() {\n    val words = &quot;A long time ago in a galaxy far far away&quot;.split(&quot; &quot;)\n    val shortWords = mutableListOf&lt;String&gt;()\n    words.getShortWordsTo(shortWords, 3)\n    println(shortWords)\n}\n</div></section><section class="chapter"  ><h3 id="collections-overview.md-list" data-toc="collections-overview#collections-overview.md-list"  >List</h3><p id="collections-overview.md-be5dc886" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html" id="collections-overview.md-934f8ee2"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collections-overview.md-c2c134bf"  >List&lt;T&gt;</code></a> stores elements in a specified order and provides indexed access to them. Indices start from zero – the index of the first element – and go to <code class="code " id="collections-overview.md-c8a27dc"  >lastIndex</code> which is the <code class="code " id="collections-overview.md-b517c757"  >(list.size - 1)</code>.</p><div class="code-block" data-lang="kotlin" id="collections-overview.md-8f1d3995"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    println(&quot;Number of elements: ${numbers.size}&quot;)\n    println(&quot;Third element: ${numbers.get(2)}&quot;)\n    println(&quot;Fourth element: ${numbers[3]}&quot;)\n    println(&quot;Index of element \\&quot;two\\&quot; ${numbers.indexOf(&quot;two&quot;)}&quot;)\n//sampleEnd\n}\n</div><p id="collections-overview.md-5387b043" >List elements (including nulls) can duplicate: a list can contain any number of equal objects or occurrences of a single object. Two lists are considered equal if they have the same sizes and <a href="#equality.md-structural-equality" id="collections-overview.md-9c3d3d34"   >structurally equal</a> elements at the same positions.</p><div class="code-block" data-lang="kotlin" id="collections-overview.md-2123951f"        data-runnable="true" data-min-compiler-version="1.3"  >data class Person(var name: String, var age: Int)\n\nfun main() {\n//sampleStart\n    val bob = Person(&quot;Bob&quot;, 31)\n    val people = listOf(Person(&quot;Adam&quot;, 20), bob, bob)\n    val people2 = listOf(Person(&quot;Adam&quot;, 20), Person(&quot;Bob&quot;, 31), bob)\n    println(people == people2)\n    bob.age = 32\n    println(people == people2)\n//sampleEnd\n}\n</div><p id="collections-overview.md-2f500b42" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-list/index.html" id="collections-overview.md-10c88658"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collections-overview.md-4d7d0a52"  >MutableList&lt;T&gt;</code></a> is a <code class="code " id="collections-overview.md-2276cfc1"  >List</code> with list-specific write operations, for example, to add or remove an element at a specific position.</p><div class="code-block" data-lang="kotlin" id="collections-overview.md-6daeb992"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 3, 4)\n    numbers.add(5)\n    numbers.removeAt(1)\n    numbers[0] = 0\n    numbers.shuffle()\n    println(numbers)\n//sampleEnd\n}\n</div><p id="collections-overview.md-4601db2a" >As you see, in some aspects lists are very similar to arrays. However, there is one important difference: an array\'s size is defined upon initialization and is never changed; in turn, a list doesn\'t have a predefined size; a list\'s size can be changed as a result of write operations: adding, updating, or removing elements.</p><p id="collections-overview.md-318a318d" >In Kotlin, the default implementation of <code class="code " id="collections-overview.md-a0898573"  >List</code> is <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-list/index.html" id="collections-overview.md-86c6b2b4"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collections-overview.md-1f6d1b23"  >ArrayList</code></a> which you can think of as a resizable array.</p></section><section class="chapter"  ><h3 id="collections-overview.md-set" data-toc="collections-overview#collections-overview.md-set"  >Set</h3><p id="collections-overview.md-63543862" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-set/index.html" id="collections-overview.md-740ebf9f"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collections-overview.md-4c781871"  >Set&lt;T&gt;</code></a> stores unique elements; their order is generally undefined. <code class="code " id="collections-overview.md-619cda69"  >null</code> elements are unique as well: a <code class="code " id="collections-overview.md-92324aa8"  >Set</code> can contain only one <code class="code " id="collections-overview.md-82f0580d"  >null</code>. Two sets are equal if they have the same size, and for each element of a set there is an equal element in the other set.</p><div class="code-block" data-lang="kotlin" id="collections-overview.md-6ddd87d"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = setOf(1, 2, 3, 4)\n    println(&quot;Number of elements: ${numbers.size}&quot;)\n    if (numbers.contains(1)) println(&quot;1 is in the set&quot;)\n\n    val numbersBackwards = setOf(4, 3, 2, 1)\n    println(&quot;The sets are equal: ${numbers == numbersBackwards}&quot;)\n//sampleEnd\n}\n</div><p id="collections-overview.md-f79aa8ab" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-set/index.html" id="collections-overview.md-81887d07"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collections-overview.md-6e507c41"  >MutableSet</code></a> is a <code class="code " id="collections-overview.md-bf2e7610"  >Set</code> with write operations from <code class="code " id="collections-overview.md-f627dd1d"  >MutableCollection</code>.</p><p id="collections-overview.md-2e5a42aa" >The default implementation of <code class="code " id="collections-overview.md-c1958321"  >Set</code> – <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-linked-hash-set/index.html" id="collections-overview.md-14e758b5"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collections-overview.md-cb709ec0"  >LinkedHashSet</code></a> – preserves the order of elements insertion. Hence, the functions that rely on the order, such as <code class="code " id="collections-overview.md-8ea20a33"  >first()</code> or <code class="code " id="collections-overview.md-6aaaf8db"  >last()</code>, return predictable results on such sets.</p><div class="code-block" data-lang="kotlin" id="collections-overview.md-905db462"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = setOf(1, 2, 3, 4)  // LinkedHashSet is the default implementation\n    val numbersBackwards = setOf(4, 3, 2, 1)\n    \n    println(numbers.first() == numbersBackwards.first())\n    println(numbers.first() == numbersBackwards.last())\n//sampleEnd\n}\n</div><p id="collections-overview.md-e1b0ace6" >An alternative implementation – <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-hash-set/index.html" id="collections-overview.md-2f5135ef"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collections-overview.md-e0ed0505"  >HashSet</code></a> – says nothing about the elements order, so calling such functions on it returns unpredictable results. However, <code class="code " id="collections-overview.md-13ed5ec7"  >HashSet</code> requires less memory to store the same number of elements.</p></section><section class="chapter"  ><h3 id="collections-overview.md-map" data-toc="collections-overview#collections-overview.md-map"  >Map</h3><p id="collections-overview.md-653dabf5" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-map/index.html" id="collections-overview.md-845ae34a"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collections-overview.md-5fe18f05"  >Map&lt;K, V&gt;</code></a> is not an inheritor of the <code class="code " id="collections-overview.md-77af25ea"  >Collection</code> interface; however, it\'s a Kotlin collection type as well. A <code class="code " id="collections-overview.md-8b62fa6a"  >Map</code> stores <em id="collections-overview.md-6d5f3585" class=""  >key-value</em> pairs (or <em id="collections-overview.md-3f34c4b2" class=""  >entries</em> ); keys are unique, but different keys can be paired with equal values. The <code class="code " id="collections-overview.md-38257bf3"  >Map</code> interface provides specific functions, such as access to value by key, searching keys and values, and so on.</p><div class="code-block" data-lang="kotlin" id="collections-overview.md-53b75221"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbersMap = mapOf(&quot;key1&quot; to 1, &quot;key2&quot; to 2, &quot;key3&quot; to 3, &quot;key4&quot; to 1)\n    \n    println(&quot;All keys: ${numbersMap.keys}&quot;)\n    println(&quot;All values: ${numbersMap.values}&quot;)\n    if (&quot;key2&quot; in numbersMap) println(&quot;Value by key \\&quot;key2\\&quot;: ${numbersMap[&quot;key2&quot;]}&quot;)    \n    if (1 in numbersMap.values) println(&quot;The value 1 is in the map&quot;)\n    if (numbersMap.containsValue(1)) println(&quot;The value 1 is in the map&quot;) // same as previous\n//sampleEnd\n}\n</div><p id="collections-overview.md-18b417a5" >Two maps containing the equal pairs are equal regardless of the pair order.</p><div class="code-block" data-lang="kotlin" id="collections-overview.md-e0a4e73b"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbersMap = mapOf(&quot;key1&quot; to 1, &quot;key2&quot; to 2, &quot;key3&quot; to 3, &quot;key4&quot; to 1)    \n    val anotherMap = mapOf(&quot;key2&quot; to 2, &quot;key1&quot; to 1, &quot;key4&quot; to 1, &quot;key3&quot; to 3)\n    \n    println(&quot;The maps are equal: ${numbersMap == anotherMap}&quot;)\n//sampleEnd\n}\n</div><p id="collections-overview.md-37e78c44" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-map/index.html" id="collections-overview.md-7954b9d3"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collections-overview.md-18e3a9ae"  >MutableMap</code></a> is a <code class="code " id="collections-overview.md-30e38247"  >Map</code> with map write operations, for example, you can add a new key-value pair or update the value associated with the given key.</p><div class="code-block" data-lang="kotlin" id="collections-overview.md-4400dcd"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbersMap = mutableMapOf(&quot;one&quot; to 1, &quot;two&quot; to 2)\n    numbersMap.put(&quot;three&quot;, 3)\n    numbersMap[&quot;one&quot;] = 11\n\n    println(numbersMap)\n//sampleEnd\n}\n</div><p id="collections-overview.md-18df8ade" >The default implementation of <code class="code " id="collections-overview.md-ad87cd11"  >Map</code> – <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-linked-hash-map/index.html" id="collections-overview.md-30715d"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collections-overview.md-8636669d"  >LinkedHashMap</code></a> – preserves the order of elements insertion when iterating the map. In turn, an alternative implementation – <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-hash-map/index.html" id="collections-overview.md-6bd18f4c"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collections-overview.md-22ed8462"  >HashMap</code></a> – says nothing about the elements order.</p></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="constructing-collections.md"  >Constructing collections</h1><section class="chapter"  ><h2 id="constructing-collections.md-construct-from-elements" data-toc="constructing-collections#constructing-collections.md-construct-from-elements"  >Construct from elements</h2><p id="constructing-collections.md-5476998f" >The most common way to create a collection is with the standard library functions <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/list-of.html" id="constructing-collections.md-d4d55786"   data-external="true" rel="noopener noreferrer" ><code class="code " id="constructing-collections.md-11cdf4bb"  >listOf&lt;T&gt;()</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/set-of.html" id="constructing-collections.md-1d4a7c0d"   data-external="true" rel="noopener noreferrer" ><code class="code " id="constructing-collections.md-eb621a4d"  >setOf&lt;T&gt;()</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/mutable-list-of.html" id="constructing-collections.md-82ee6d31"   data-external="true" rel="noopener noreferrer" ><code class="code " id="constructing-collections.md-f5b09036"  >mutableListOf&lt;T&gt;()</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/mutable-set-of.html" id="constructing-collections.md-e8f74b87"   data-external="true" rel="noopener noreferrer" ><code class="code " id="constructing-collections.md-cb743ca"  >mutableSetOf&lt;T&gt;()</code></a>. If you provide a comma-separated list of collection elements as arguments, the compiler detects the element type automatically. When creating empty collections, specify the type explicitly.</p><div class="code-block" data-lang="kotlin" id="constructing-collections.md-225ed620"         >val numbersSet = setOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\nval emptySet = mutableSetOf&lt;String&gt;()\n</div><p id="constructing-collections.md-cd3dd722" >The same is available for maps with the functions <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map-of.html" id="constructing-collections.md-2457c856"   data-external="true" rel="noopener noreferrer" ><code class="code " id="constructing-collections.md-f3369a7a"  >mapOf()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/mutable-map-of.html" id="constructing-collections.md-edb63c50"   data-external="true" rel="noopener noreferrer" ><code class="code " id="constructing-collections.md-7baab18f"  >mutableMapOf()</code></a>. The map\'s keys and values are passed as <code class="code " id="constructing-collections.md-bf6482dc"  >Pair</code> objects (usually created with <code class="code " id="constructing-collections.md-e3102ee4"  >to</code> infix function).</p><div class="code-block" data-lang="kotlin" id="constructing-collections.md-4a049dd2"         >val numbersMap = mapOf(&quot;key1&quot; to 1, &quot;key2&quot; to 2, &quot;key3&quot; to 3, &quot;key4&quot; to 1)\n</div><p id="constructing-collections.md-2b97af1" >Note that the <code class="code " id="constructing-collections.md-ebb5783a"  >to</code> notation creates a short-living <code class="code " id="constructing-collections.md-88b0c4c6"  >Pair</code> object, so it\'s recommended that you use it only if performance isn\'t critical. To avoid excessive memory usage, use alternative ways. For example, you can create a mutable map and populate it using the write operations. The <a href="#scope-functions.md-apply" id="constructing-collections.md-6577633f"   ><code class="code " id="constructing-collections.md-92f84899"  >apply()</code></a> function can help to keep the initialization fluent here.</p><div class="code-block" data-lang="kotlin" id="constructing-collections.md-1940a9e9"         >val numbersMap = mutableMapOf&lt;String, String&gt;().apply { this[&quot;one&quot;] = &quot;1&quot;; this[&quot;two&quot;] = &quot;2&quot; }\n</div></section><section class="chapter"  ><h2 id="constructing-collections.md-empty-collections" data-toc="constructing-collections#constructing-collections.md-empty-collections"  >Empty collections</h2><p id="constructing-collections.md-a41a4a5e" >There are also functions for creating collections without any elements: <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/empty-list.html" id="constructing-collections.md-5526a78f"   data-external="true" rel="noopener noreferrer" ><code class="code " id="constructing-collections.md-d695b00"  >emptyList()</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/empty-set.html" id="constructing-collections.md-19eaeb6d"   data-external="true" rel="noopener noreferrer" ><code class="code " id="constructing-collections.md-613f193"  >emptySet()</code></a>, and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/empty-map.html" id="constructing-collections.md-f981f49d"   data-external="true" rel="noopener noreferrer" ><code class="code " id="constructing-collections.md-4300e568"  >emptyMap()</code></a>. When creating empty collections, you should specify the type of elements that the collection will hold.</p><div class="code-block" data-lang="kotlin" id="constructing-collections.md-cb653df3"         >val empty = emptyList&lt;String&gt;()\n</div></section><section class="chapter"  ><h2 id="constructing-collections.md-initializer-functions-for-lists" data-toc="constructing-collections#constructing-collections.md-initializer-functions-for-lists"  >Initializer functions for lists</h2><p id="constructing-collections.md-535d3584" >For lists, there is a constructor that takes the list size and the initializer function that defines the element value based on its index.</p><div class="code-block" data-lang="kotlin" id="constructing-collections.md-4bd6097e"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val doubled = List(3, { it * 2 })  // or MutableList if you want to change its content later\n    println(doubled)\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="constructing-collections.md-concrete-type-constructors" data-toc="constructing-collections#constructing-collections.md-concrete-type-constructors"  >Concrete type constructors</h2><p id="constructing-collections.md-b44b78e5" >To create a concrete type collection, such as an <code class="code " id="constructing-collections.md-d030f1f1"  >ArrayList</code> or <code class="code " id="constructing-collections.md-712ccefc"  >LinkedList</code>, you can use the available constructors for these types. Similar constructors are available for implementations of <code class="code " id="constructing-collections.md-39f74374"  >Set</code> and <code class="code " id="constructing-collections.md-2f2f3f3b"  >Map</code>.</p><div class="code-block" data-lang="kotlin" id="constructing-collections.md-84b1898f"         >val linkedList = LinkedList&lt;String&gt;(listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;))\nval presizedSet = HashSet&lt;Int&gt;(32)\n</div></section><section class="chapter"  ><h2 id="constructing-collections.md-copy" data-toc="constructing-collections#constructing-collections.md-copy"  >Copy</h2><p id="constructing-collections.md-f04530af" >To create a collection with the same elements as an existing collection, you can use copying operations. Collection copying operations from the standard library create <em id="constructing-collections.md-13f02953" class=""  >shallow</em> copy collections with references to the same elements. Thus, a change made to a collection element reflects in all its copies.</p><p id="constructing-collections.md-3514a488" >Collection copying functions, such as <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/to-list.html" id="constructing-collections.md-df179ebf"   data-external="true" rel="noopener noreferrer" ><code class="code " id="constructing-collections.md-3a54a1ed"  >toList()</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/to-mutable-list.html" id="constructing-collections.md-3aa8f777"   data-external="true" rel="noopener noreferrer" ><code class="code " id="constructing-collections.md-e96839bd"  >toMutableList()</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/to-set.html" id="constructing-collections.md-858c7a5a"   data-external="true" rel="noopener noreferrer" ><code class="code " id="constructing-collections.md-c09533ef"  >toSet()</code></a> and others, create a snapshot of a collection at a specific moment. Their result is a new collection of the same elements. If you add or remove elements from the original collection, this won\'t affect the copies. Copies may be changed independently of the source as well.</p><div class="code-block" data-lang="kotlin" id="constructing-collections.md-65645415"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val sourceList = mutableListOf(1, 2, 3)\n    val copyList = sourceList.toMutableList()\n    val readOnlyCopyList = sourceList.toList()\n    sourceList.add(4)\n    println(&quot;Copy size: ${copyList.size}&quot;)   \n    \n    //readOnlyCopyList.add(4)             // compilation error\n    println(&quot;Read-only copy size: ${readOnlyCopyList.size}&quot;)\n//sampleEnd\n}\n</div><p id="constructing-collections.md-ca48a86d" >These functions can also be used for converting collections to other types, for example, build a set from a list or vice versa.</p><div class="code-block" data-lang="kotlin" id="constructing-collections.md-ffd3869a"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val sourceList = mutableListOf(1, 2, 3)    \n    val copySet = sourceList.toMutableSet()\n    copySet.add(3)\n    copySet.add(4)    \n    println(copySet)\n//sampleEnd\n}\n</div><p id="constructing-collections.md-84b19a0" >Alternatively, you can create new references to the same collection instance. New references are created when you initialize a collection variable with an existing collection. So, when the collection instance is altered through a reference, the changes are reflected in all its references.</p><div class="code-block" data-lang="kotlin" id="constructing-collections.md-a2a2963b"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val sourceList = mutableListOf(1, 2, 3)\n    val referenceList = sourceList\n    referenceList.add(4)\n    println(&quot;Source size: ${sourceList.size}&quot;)\n//sampleEnd\n}\n</div><p id="constructing-collections.md-24b1108f" >Collection initialization can be used for restricting mutability. For example, if you create a <code class="code " id="constructing-collections.md-8fef01d2"  >List</code> reference to a <code class="code " id="constructing-collections.md-7dcb50e1"  >MutableList</code>, the compiler will produce errors if you try to modify the collection through this reference.</p><div class="code-block" data-lang="kotlin" id="constructing-collections.md-50c828dd"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart \n    val sourceList = mutableListOf(1, 2, 3)\n    val referenceList: List&lt;Int&gt; = sourceList\n    //referenceList.add(4)            //compilation error\n    sourceList.add(4)\n    println(referenceList) // shows the current state of sourceList\n//sampleEnd\n}\n\n</div></section><section class="chapter"  ><h2 id="constructing-collections.md-invoke-functions-on-other-collections" data-toc="constructing-collections#constructing-collections.md-invoke-functions-on-other-collections"  >Invoke functions on other collections</h2><p id="constructing-collections.md-c80d4eee" >Collections can be created in result of various operations on other collections. For example, <a href="#collection-filtering.md" id="constructing-collections.md-b0bff2f9"   >filtering</a> a list creates a new list of elements that match the filter:</p><div class="code-block" data-lang="kotlin" id="constructing-collections.md-e463d869"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart \n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)  \n    val longerThan3 = numbers.filter { it.length &gt; 3 }\n    println(longerThan3)\n//sampleEnd\n}\n</div><p id="constructing-collections.md-807f496f" ><a href="#collection-transformations.md-map" id="constructing-collections.md-4ebc1fed"   >Mapping</a> produces a list of a transformation results:</p><div class="code-block" data-lang="kotlin" id="constructing-collections.md-da11c7a"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart \n    val numbers = setOf(1, 2, 3)\n    println(numbers.map { it * 3 })\n    println(numbers.mapIndexed { idx, value -&gt; value * idx })\n//sampleEnd\n}\n</div><p id="constructing-collections.md-f8fb3113" ><a href="#collection-transformations.md-associate" id="constructing-collections.md-4fb402ed"   >Association</a> produces maps:</p><div class="code-block" data-lang="kotlin" id="constructing-collections.md-9075b18c"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    println(numbers.associateWith { it.length })\n//sampleEnd\n}\n</div><p id="constructing-collections.md-2acf1f8b" >For more information about operations on collections in Kotlin, see <a href="#collection-operations.md" id="constructing-collections.md-d0c64c1a"   >Collection operations overview</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="iterators.md"  >Iterators</h1><p id="iterators.md-162e010d" >For traversing collection elements, the Kotlin standard library supports the commonly used mechanism of <em id="iterators.md-cf9fc48" class=""  >iterators</em> – objects that provide access to the elements sequentially without exposing the underlying structure of the collection. Iterators are useful when you need to process all the elements of a collection one-by-one, for example, print values or make similar updates to them.</p><p id="iterators.md-be6032bd" >Iterators can be obtained for inheritors of the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-iterable/index.html" id="iterators.md-c61e0c23"   data-external="true" rel="noopener noreferrer" ><code class="code " id="iterators.md-59695ac0"  >Iterable&lt;T&gt;</code></a> interface, including <code class="code " id="iterators.md-1a785741"  >Set</code> and <code class="code " id="iterators.md-125673c7"  >List</code>, by calling the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-iterable/iterator.html" id="iterators.md-4eeb54d7"   data-external="true" rel="noopener noreferrer" ><code class="code " id="iterators.md-1ad33fb2"  >iterator()</code></a> function.</p><p id="iterators.md-8afdd541" >Once you obtain an iterator, it points to the first element of a collection; calling the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-iterator/next.html" id="iterators.md-9e453a86"   data-external="true" rel="noopener noreferrer" ><code class="code " id="iterators.md-e7cdabc9"  >next()</code></a> function returns this element and moves the iterator position to the following element if it exists.</p><p id="iterators.md-8c8ab69" >Once the iterator passes through the last element, it can no longer be used for retrieving elements; neither can it be reset to any previous position. To iterate through the collection again, create a new iterator.</p><div class="code-block" data-lang="kotlin" id="iterators.md-a1152b49"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    val numbersIterator = numbers.iterator()\n    while (numbersIterator.hasNext()) {\n        println(numbersIterator.next())\n    }\n//sampleEnd\n}\n</div><p id="iterators.md-3a02a9f9" >Another way to go through an <code class="code " id="iterators.md-ef8c8200"  >Iterable</code> collection is the well-known <code class="code " id="iterators.md-d2b84790"  >for</code> loop. When using <code class="code " id="iterators.md-3bb7f02c"  >for</code> on a collection, you obtain the iterator implicitly. So, the following code is equivalent to the example above:</p><div class="code-block" data-lang="kotlin" id="iterators.md-c03ef2"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    for (item in numbers) {\n        println(item)\n    }\n//sampleEnd\n}\n</div><p id="iterators.md-cf8c7cc2" >Finally, there is a useful <code class="code " id="iterators.md-85aa5746"  >forEach()</code> function that lets you automatically iterate a collection and execute the given code for each element. So, the same example would look like this:</p><div class="code-block" data-lang="kotlin" id="iterators.md-f7c3d97"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    numbers.forEach {\n        println(it)\n    }\n//sampleEnd\n}\n</div><section class="chapter"  ><h2 id="iterators.md-list-iterators" data-toc="iterators#iterators.md-list-iterators"  >List iterators</h2><p id="iterators.md-deddaf24" >For lists, there is a special iterator implementation: <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list-iterator/index.html" id="iterators.md-785ee0d1"   data-external="true" rel="noopener noreferrer" ><code class="code " id="iterators.md-16d3cf68"  >ListIterator</code></a>. It supports iterating lists in both directions: forwards and backwards.</p><p id="iterators.md-84e0bd3b" >Backward iteration is implemented by the functions <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list-iterator/has-previous.html" id="iterators.md-881d9960"   data-external="true" rel="noopener noreferrer" ><code class="code " id="iterators.md-e1bd87a"  >hasPrevious()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list-iterator/previous.html" id="iterators.md-80e16722"   data-external="true" rel="noopener noreferrer" ><code class="code " id="iterators.md-225cda0d"  >previous()</code></a>. Additionally, the <code class="code " id="iterators.md-9709e4b5"  >ListIterator</code> provides information about the element indices with the functions <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list-iterator/next-index.html" id="iterators.md-21366619"   data-external="true" rel="noopener noreferrer" ><code class="code " id="iterators.md-9a0e2abe"  >nextIndex()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list-iterator/previous-index.html" id="iterators.md-949cb845"   data-external="true" rel="noopener noreferrer" ><code class="code " id="iterators.md-d771a090"  >previousIndex()</code></a>.</p><div class="code-block" data-lang="kotlin" id="iterators.md-bfb02ca6"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    val listIterator = numbers.listIterator()\n    while (listIterator.hasNext()) listIterator.next()\n    println(&quot;Iterating backwards:&quot;)\n    while (listIterator.hasPrevious()) {\n        print(&quot;Index: ${listIterator.previousIndex()}&quot;)\n        println(&quot;, value: ${listIterator.previous()}&quot;)\n    }\n//sampleEnd\n}\n</div><p id="iterators.md-a1a50832" >Having the ability to iterate in both directions, means the <code class="code " id="iterators.md-484df3fe"  >ListIterator</code> can still be used after it reaches the last element.</p></section><section class="chapter"  ><h2 id="iterators.md-mutable-iterators" data-toc="iterators#iterators.md-mutable-iterators"  >Mutable iterators</h2><p id="iterators.md-7a8024e2" >For iterating mutable collections, there is <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-iterator/index.html" id="iterators.md-cb506612"   data-external="true" rel="noopener noreferrer" ><code class="code " id="iterators.md-43a1a274"  >MutableIterator</code></a> that extends <code class="code " id="iterators.md-f6757cb3"  >Iterator</code> with the element removal function <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-iterator/remove.html" id="iterators.md-59bb042e"   data-external="true" rel="noopener noreferrer" ><code class="code " id="iterators.md-b8c74ba8"  >remove()</code></a>. So, you can remove elements from a collection while iterating it.</p><div class="code-block" data-lang="kotlin" id="iterators.md-6875a7f0"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;) \n    val mutableIterator = numbers.iterator()\n    \n    mutableIterator.next()\n    mutableIterator.remove()    \n    println(&quot;After removal: $numbers&quot;)\n//sampleEnd\n}\n</div><p id="iterators.md-2340d77a" >In addition to removing elements, the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-list-iterator/index.html" id="iterators.md-a668a35e"   data-external="true" rel="noopener noreferrer" ><code class="code " id="iterators.md-3f101bca"  >MutableListIterator</code></a> can also insert and replace elements while iterating the list.</p><div class="code-block" data-lang="kotlin" id="iterators.md-73082f09"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(&quot;one&quot;, &quot;four&quot;, &quot;four&quot;) \n    val mutableListIterator = numbers.listIterator()\n    \n    mutableListIterator.next()\n    mutableListIterator.add(&quot;two&quot;)\n    mutableListIterator.next()\n    mutableListIterator.set(&quot;three&quot;)   \n    println(numbers)\n//sampleEnd\n}\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="ranges.md"  >Ranges and progressions</h1><p id="ranges.md-b8c88f1b" >Kotlin lets you easily create ranges of values using the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/range-to.html" id="ranges.md-d699b96b"   data-external="true" rel="noopener noreferrer" ><code class="code " id="ranges.md-c77a2f12"  >rangeTo()</code></a> function from the <code class="code " id="ranges.md-955d2625"  >kotlin.ranges</code> package and its operator form <code class="code " id="ranges.md-585fb4a2"  >..</code>. Usually, <code class="code " id="ranges.md-4820e6dc"  >rangeTo()</code> is complemented by <code class="code " id="ranges.md-c08b772"  >in</code> or <code class="code " id="ranges.md-dd7850c3"  >!in</code> functions.</p><div class="code-block" data-lang="kotlin" id="ranges.md-974cf550"         >if (i in 1..4) {  // equivalent of 1 &lt;= i &amp;&amp; i &lt;= 4\n    print(i)\n}\n</div><p id="ranges.md-cad9c918" >Integral type ranges (<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/-int-range/index.html" id="ranges.md-9bdc417c"   data-external="true" rel="noopener noreferrer" ><code class="code " id="ranges.md-ac8bc1cd"  >IntRange</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/-long-range/index.html" id="ranges.md-c19db28e"   data-external="true" rel="noopener noreferrer" ><code class="code " id="ranges.md-a153d4fd"  >LongRange</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/-char-range/index.html" id="ranges.md-67286ec9"   data-external="true" rel="noopener noreferrer" ><code class="code " id="ranges.md-ce8471ac"  >CharRange</code></a>) have an extra feature: they can be iterated over. These ranges are also <a href="https://en.wikipedia.org/wiki/Arithmetic_progression" id="ranges.md-b16168ab"   data-external="true" rel="noopener noreferrer" >progressions</a> of the corresponding integral types.</p><p id="ranges.md-4a107460" >Such ranges are generally used for iteration in <code class="code " id="ranges.md-3dee3583"  >for</code> loops.</p><div class="code-block" data-lang="kotlin" id="ranges.md-b34decf6"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    for (i in 1..4) print(i)\n//sampleEnd\n}\n</div><p id="ranges.md-90691c9c" >To iterate numbers in reverse order, use the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/down-to.html" id="ranges.md-9602954f"   data-external="true" rel="noopener noreferrer" ><code class="code " id="ranges.md-f98b5e6a"  >downTo</code></a> function instead of <code class="code " id="ranges.md-7b165444"  >..</code>.</p><div class="code-block" data-lang="kotlin" id="ranges.md-873e300a"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    for (i in 4 downTo 1) print(i)\n//sampleEnd\n}\n</div><p id="ranges.md-d8df0ea2" >It is also possible to iterate over numbers with an arbitrary step (not necessarily 1). This is done via the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/step.html" id="ranges.md-bc3af804"   data-external="true" rel="noopener noreferrer" ><code class="code " id="ranges.md-9123b474"  >step</code></a> function.</p><div class="code-block" data-lang="kotlin" id="ranges.md-4607d640"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    for (i in 1..8 step 2) print(i)\n    println()\n    for (i in 8 downTo 1 step 2) print(i)\n//sampleEnd\n}\n</div><p id="ranges.md-90ec5fd6" >To iterate a number range which does not include its end element, use the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/until.html" id="ranges.md-11f5cde9"   data-external="true" rel="noopener noreferrer" ><code class="code " id="ranges.md-fb071694"  >until</code></a> function:</p><div class="code-block" data-lang="kotlin" id="ranges.md-7e329439"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    for (i in 1 until 10) {       // i in [1, 10), 10 is excluded\n        print(i)\n    }\n//sampleEnd\n}\n</div><section class="chapter"  ><h2 id="ranges.md-range" data-toc="ranges#ranges.md-range"  >Range</h2><p id="ranges.md-250aa10" >A range defines a closed interval in the mathematical sense: it is defined by its two endpoint values which are both included in the range. Ranges are defined for comparable types: having an order, you can define whether an arbitrary instance is in the range between two given instances.</p><p id="ranges.md-641ee05a" >The main operation on ranges is <code class="code " id="ranges.md-d45d41e0"  >contains</code>, which is usually used in the form of <code class="code " id="ranges.md-33154380"  >in</code> and <code class="code " id="ranges.md-6dbe215a"  >!in</code> operators.</p><p id="ranges.md-d8cbca15" >To create a range for your class, call the <code class="code " id="ranges.md-9e119003"  >rangeTo()</code> function on the range start value and provide the end value as an argument. <code class="code " id="ranges.md-bd078262"  >rangeTo()</code> is often called in its operator form <code class="code " id="ranges.md-6f8d7ca0"  >..</code>.</p><div class="code-block" data-lang="kotlin" id="ranges.md-54d7fe5c"        data-runnable="true" data-min-compiler-version="1.3"  >\nclass Version(val major: Int, val minor: Int): Comparable&lt;Version&gt; {\n    override fun compareTo(other: Version): Int {\n        if (this.major != other.major) {\n            return this.major - other.major\n        }\n        return this.minor - other.minor\n    }\n}\n\nfun main() {\n//sampleStart\n    val versionRange = Version(1, 11)..Version(1, 30)\n    println(Version(0, 9) in versionRange)\n    println(Version(1, 20) in versionRange)\n//sampleEnd\n}\n\n</div></section><section class="chapter"  ><h2 id="ranges.md-progression" data-toc="ranges#ranges.md-progression"  >Progression</h2><p id="ranges.md-21a8224" >As shown in the examples above, the ranges of integral types, such as <code class="code " id="ranges.md-c0e1426a"  >Int</code>, <code class="code " id="ranges.md-7b5b965d"  >Long</code>, and <code class="code " id="ranges.md-6669a6a5"  >Char</code>, can be treated as <a href="https://en.wikipedia.org/wiki/Arithmetic_progression" id="ranges.md-54391dc7"   data-external="true" rel="noopener noreferrer" >arithmetic progressions</a> of them. In Kotlin, these progressions are defined by special types: <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/-int-progression/index.html" id="ranges.md-ece67a62"   data-external="true" rel="noopener noreferrer" ><code class="code " id="ranges.md-70b5c5b7"  >IntProgression</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/-long-progression/index.html" id="ranges.md-837616dc"   data-external="true" rel="noopener noreferrer" ><code class="code " id="ranges.md-17609099"  >LongProgression</code></a>, and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/-char-progression/index.html" id="ranges.md-5135e7b5"   data-external="true" rel="noopener noreferrer" ><code class="code " id="ranges.md-af5f6442"  >CharProgression</code></a>.</p><p id="ranges.md-38305b9e" >Progressions have three essential properties: the <code class="code " id="ranges.md-aed75775"  >first</code> element, the <code class="code " id="ranges.md-4ccff98"  >last</code> element, and a non-zero <code class="code " id="ranges.md-4dedc1b3"  >step</code>. The first element is <code class="code " id="ranges.md-bd27629c"  >first</code>, subsequent elements are the previous element plus a <code class="code " id="ranges.md-b1b8a4e5"  >step</code>. Iteration over a progression with a positive step is equivalent to an indexed <code class="code " id="ranges.md-6dd4c093"  >for</code> loop in Java/JavaScript.</p><div class="code-block" data-lang="java" id="ranges.md-1e0fa87"         >for (int i = first; i &lt;= last; i += step) {\n  // ...\n}\n</div><p id="ranges.md-8e9eb782" >When you create a progression implicitly by iterating a range, this progression\'s <code class="code " id="ranges.md-5bbfe3e6"  >first</code> and <code class="code " id="ranges.md-e12c8d62"  >last</code> elements are the range\'s endpoints, and the <code class="code " id="ranges.md-8a9607aa"  >step</code> is 1.</p><div class="code-block" data-lang="kotlin" id="ranges.md-6175179e"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    for (i in 1..10) print(i)\n//sampleEnd\n}\n</div><p id="ranges.md-60f714c3" >To define a custom progression step, use the <code class="code " id="ranges.md-6d9f725b"  >step</code> function on a range.</p><div class="code-block" data-lang="kotlin" id="ranges.md-d6a935de"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    for (i in 1..8 step 2) print(i)\n//sampleEnd\n}\n</div><p id="ranges.md-271f089c" >The <code class="code " id="ranges.md-49922bbf"  >last</code> element of the progression is calculated this way:</p><ul class="list _ul" id="ranges.md-a047377d"   ><li class="list__item" id="ranges.md-76c409" ><p>For a positive step: the maximum value not greater than the end value such that <code class="code " id="ranges.md-652b248d"  >(last - first) % step == 0</code>.</p></li><li class="list__item" id="ranges.md-ffa1c1bc" ><p>For a negative step: the minimum value not less than the end value such that <code class="code " id="ranges.md-2b148c72"  >(last - first) % step == 0</code>.</p></li></ul><p id="ranges.md-c165d854" >Thus, the <code class="code " id="ranges.md-17ec48ed"  >last</code> element is not always the same as the specified end value.</p><div class="code-block" data-lang="kotlin" id="ranges.md-e16dfdc0"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    for (i in 1..9 step 3) print(i) // the last element is 7\n//sampleEnd\n}\n</div><p id="ranges.md-43fbdce8" >To create a progression for iterating in reverse order, use <code class="code " id="ranges.md-18484d28"  >downTo</code> instead of <code class="code " id="ranges.md-b1dc09ab"  >..</code> when defining the range for it.</p><div class="code-block" data-lang="kotlin" id="ranges.md-4d60fdfe"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    for (i in 4 downTo 1) print(i)\n//sampleEnd\n}\n</div><p id="ranges.md-7bdb1de1" >Progressions implement <code class="code " id="ranges.md-4949fd1d"  >Iterable&lt;N&gt;</code>, where <code class="code " id="ranges.md-6dc37eaa"  >N</code> is <code class="code " id="ranges.md-c4c994a7"  >Int</code>, <code class="code " id="ranges.md-6d6642bb"  >Long</code>, or <code class="code " id="ranges.md-962fa52f"  >Char</code> respectively, so you can use them in various <a href="#collection-operations.md" id="ranges.md-a5c2a6ab"   >collection functions</a> like <code class="code " id="ranges.md-c263ecd2"  >map</code>, <code class="code " id="ranges.md-c986f5d6"  >filter</code>, and other.</p><div class="code-block" data-lang="kotlin" id="ranges.md-639ac2d9"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    println((1..10).filter { it % 2 == 0 })\n//sampleEnd\n}\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="sequences.md"  >Sequences</h1><p id="sequences.md-44274fa9" >Along with collections, the Kotlin standard library contains another container type – <em id="sequences.md-d7ebe43e" class=""  >sequences</em> (<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html" id="sequences.md-96482ece"   data-external="true" rel="noopener noreferrer" ><code class="code " id="sequences.md-3c4548db"  >Sequence&lt;T&gt;</code></a> ). Sequences offer the same functions as <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-iterable/index.html" id="sequences.md-abae523"   data-external="true" rel="noopener noreferrer" ><code class="code " id="sequences.md-8d118d73"  >Iterable</code></a> but implement another approach to multi-step collection processing.</p><p id="sequences.md-3af5e119" >When the processing of an <code class="code " id="sequences.md-a11b8423"  >Iterable</code> includes multiple steps, they are executed eagerly: each processing step completes and returns its result – an intermediate collection. The following step executes on this collection. In turn, multi-step processing of sequences is executed lazily when possible: actual computing happens only when the result of the whole processing chain is requested.</p><p id="sequences.md-a0a36668" >The order of operations execution is different as well: <code class="code " id="sequences.md-df20f468"  >Sequence</code> performs all the processing steps one-by-one for every single element. In turn, <code class="code " id="sequences.md-c2fb869e"  >Iterable</code> completes each step for the whole collection and then proceeds to the next step.</p><p id="sequences.md-68cc367d" >So, the sequences let you avoid building results of intermediate steps, therefore improving the performance of the whole collection processing chain. However, the lazy nature of sequences adds some overhead which may be significant when processing smaller collections or doing simpler computations. Hence, you should consider both <code class="code " id="sequences.md-77b5df38"  >Sequence</code> and <code class="code " id="sequences.md-a0a2f504"  >Iterable</code> and decide which one is better for your case.</p><section class="chapter"  ><h2 id="sequences.md-construct" data-toc="sequences#sequences.md-construct"  >Construct</h2><section class="chapter"  ><h3 id="sequences.md-from-elements" data-toc="sequences#sequences.md-from-elements"  >From elements</h3><p id="sequences.md-2b5f3712" >To create a sequence, call the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/sequence-of.html" id="sequences.md-17e8665e"   data-external="true" rel="noopener noreferrer" ><code class="code " id="sequences.md-45cb0bdb"  >sequenceOf()</code></a> function listing the elements as its arguments.</p><div class="code-block" data-lang="kotlin" id="sequences.md-d70c3ddc"         >val numbersSequence = sequenceOf(&quot;four&quot;, &quot;three&quot;, &quot;two&quot;, &quot;one&quot;)\n</div></section><section class="chapter"  ><h3 id="sequences.md-from-an-iterable" data-toc="sequences#sequences.md-from-an-iterable"  >From an Iterable</h3><p id="sequences.md-c79bee51" >If you already have an <code class="code " id="sequences.md-415d8d0f"  >Iterable</code> object (such as a <code class="code " id="sequences.md-b4b86195"  >List</code> or a <code class="code " id="sequences.md-72ad09b4"  >Set</code> ), you can create a sequence from it by calling <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/as-sequence.html" id="sequences.md-aa7d7455"   data-external="true" rel="noopener noreferrer" ><code class="code " id="sequences.md-3e11bc7a"  >asSequence()</code></a>.</p><div class="code-block" data-lang="kotlin" id="sequences.md-e504579b"         >val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\nval numbersSequence = numbers.asSequence()\n\n</div></section><section class="chapter"  ><h3 id="sequences.md-from-a-function" data-toc="sequences#sequences.md-from-a-function"  >From a function</h3><p id="sequences.md-a1e3dae7" >One more way to create a sequence is by building it with a function that calculates its elements. To build a sequence based on a function, call <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/generate-sequence.html" id="sequences.md-7c6d7fdb"   data-external="true" rel="noopener noreferrer" ><code class="code " id="sequences.md-eaceb172"  >generateSequence()</code></a> with this function as an argument. Optionally, you can specify the first element as an explicit value or a result of a function call. The sequence generation stops when the provided function returns <code class="code " id="sequences.md-bd37b162"  >null</code>. So, the sequence in the example below is infinite.</p><div class="code-block" data-lang="kotlin" id="sequences.md-2bdaebef"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val oddNumbers = generateSequence(1) { it + 2 } // `it` is the previous element\n    println(oddNumbers.take(5).toList())\n    //println(oddNumbers.count())     // error: the sequence is infinite\n//sampleEnd\n}\n</div><p id="sequences.md-880c618d" >To create a finite sequence with <code class="code " id="sequences.md-c4e68d95"  >generateSequence()</code>, provide a function that returns <code class="code " id="sequences.md-755bb86c"  >null</code> after the last element you need.</p><div class="code-block" data-lang="kotlin" id="sequences.md-b8d5bf1e"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val oddNumbersLessThan10 = generateSequence(1) { if (it &lt; 8) it + 2 else null }\n    println(oddNumbersLessThan10.count())\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h3 id="sequences.md-from-chunks" data-toc="sequences#sequences.md-from-chunks"  >From chunks</h3><p id="sequences.md-3c5cacb" >Finally, there is a function that lets you produce sequence elements one by one or by chunks of arbitrary sizes – the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/sequence.html" id="sequences.md-1dd090c4"   data-external="true" rel="noopener noreferrer" ><code class="code " id="sequences.md-ee436aa9"  >sequence()</code></a> function. This function takes a lambda expression containing calls of <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence-scope/yield.html" id="sequences.md-3837b73a"   data-external="true" rel="noopener noreferrer" ><code class="code " id="sequences.md-7024bcad"  >yield()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence-scope/yield-all.html" id="sequences.md-7d5375ce"   data-external="true" rel="noopener noreferrer" ><code class="code " id="sequences.md-1aceab1a"  >yieldAll()</code></a> functions. They return an element to the sequence consumer and suspend the execution of <code class="code " id="sequences.md-1f03254e"  >sequence()</code> until the next element is requested by the consumer. <code class="code " id="sequences.md-f1c8e348"  >yield()</code> takes a single element as an argument; <code class="code " id="sequences.md-79ac666e"  >yieldAll()</code> can take an <code class="code " id="sequences.md-849d58b8"  >Iterable</code> object, an <code class="code " id="sequences.md-a0dadfbf"  >Iterator</code>, or another <code class="code " id="sequences.md-a33fe130"  >Sequence</code>. A <code class="code " id="sequences.md-e09cba77"  >Sequence</code> argument of <code class="code " id="sequences.md-7ca26f93"  >yieldAll()</code> can be infinite. However, such a call must be the last: all subsequent calls will never be executed.</p><div class="code-block" data-lang="kotlin" id="sequences.md-539db69d"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val oddNumbers = sequence {\n        yield(1)\n        yieldAll(listOf(3, 5))\n        yieldAll(generateSequence(7) { it + 2 })\n    }\n    println(oddNumbers.take(5).toList())\n//sampleEnd\n}\n</div></section></section><section class="chapter"  ><h2 id="sequences.md-sequence-operations" data-toc="sequences#sequences.md-sequence-operations"  >Sequence operations</h2><p id="sequences.md-fcad0a3c" >The sequence operations can be classified into the following groups regarding their state requirements:</p><ul class="list _ul" id="sequences.md-4aeaef67"   ><li class="list__item" id="sequences.md-fe294f3e" ><p><em id="sequences.md-9437f64d" class=""  >Stateless</em> operations require no state and process each element independently, for example, <a href="#collection-transformations.md-map" id="sequences.md-5c65983d"   ><code class="code " id="sequences.md-c754593b"  >map()</code></a> or <a href="#collection-filtering.md" id="sequences.md-44347493"   ><code class="code " id="sequences.md-4deebc97"  >filter()</code></a>. Stateless operations can also require a small constant amount of state to process an element, for example, <a href="#collection-parts.md" id="sequences.md-50c3c968"   ><code class="code " id="sequences.md-269f8100"  >take()</code> or <code class="code " id="sequences.md-1bf2fadc"  >drop()</code></a>.</p></li><li class="list__item" id="sequences.md-d8eaa732" ><p><em id="sequences.md-50e5dfcd" class=""  >Stateful</em> operations require a significant amount of state, usually proportional to the number of elements in a sequence.</p></li></ul><p id="sequences.md-5e86219c" >If a sequence operation returns another sequence, which is produced lazily, it\'s called <em id="sequences.md-a85d757f" class=""  >intermediate</em>. Otherwise, the operation is <em id="sequences.md-c36c22d7" class=""  >terminal</em>. Examples of terminal operations are <a href="#constructing-collections.md-copy" id="sequences.md-bd9a3b68"   ><code class="code " id="sequences.md-1e2e504f"  >toList()</code></a> or <a href="#collection-aggregate.md" id="sequences.md-871b3dc5"   ><code class="code " id="sequences.md-6f103d15"  >sum()</code></a>. Sequence elements can be retrieved only with terminal operations.</p><p id="sequences.md-ba4facef" >Sequences can be iterated multiple times; however some sequence implementations might constrain themselves to be iterated only once. That is mentioned specifically in their documentation.</p></section><section class="chapter"  ><h2 id="sequences.md-sequence-processing-example" data-toc="sequences#sequences.md-sequence-processing-example"  >Sequence processing example</h2><p id="sequences.md-ad736d4b" >Let\'s take a look at the difference between <code class="code " id="sequences.md-ba8b6d61"  >Iterable</code> and <code class="code " id="sequences.md-d24d5860"  >Sequence</code> with an example.</p><section class="chapter"  ><h3 id="sequences.md-iterable" data-toc="sequences#sequences.md-iterable"  >Iterable</h3><p id="sequences.md-f75712f3" >Assume that you have a list of words. The code below filters the words longer than three characters and prints the lengths of first four such words.</p><div class="code-block" data-lang="kotlin" id="sequences.md-cf646b00"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {    \n//sampleStart\n    val words = &quot;The quick brown fox jumps over the lazy dog&quot;.split(&quot; &quot;)\n    val lengthsList = words.filter { println(&quot;filter: $it&quot;); it.length &gt; 3 }\n        .map { println(&quot;length: ${it.length}&quot;); it.length }\n        .take(4)\n\n    println(&quot;Lengths of first 4 words longer than 3 chars:&quot;)\n    println(lengthsList)\n//sampleEnd\n}\n</div><p id="sequences.md-65a666d9" >When you run this code, you\'ll see that the <code class="code " id="sequences.md-99bd50a3"  >filter()</code> and <code class="code " id="sequences.md-a7dee80b"  >map()</code> functions are executed in the same order as they appear in the code. First, you see <code class="code " id="sequences.md-b6baec1f"  >filter:</code> for all elements, then <code class="code " id="sequences.md-83c18513"  >length:</code> for the elements left after filtering, and then the output of the two last lines.</p><p id="sequences.md-a8df05d3" >This is how the list processing goes:</p><p id="sequences.md-4ea474ff" ><figure title="List processing"><img alt="List processing" title="List processing" id="sequences.md-817feb07" src="images/list-processing.png"  class="" width="990" height="377" /></figure></p></section><section class="chapter"  ><h3 id="sequences.md-sequence" data-toc="sequences#sequences.md-sequence"  >Sequence</h3><p id="sequences.md-40ef1b0e" >Now let\'s write the same with sequences:</p><div class="code-block" data-lang="kotlin" id="sequences.md-62cc7b98"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val words = &quot;The quick brown fox jumps over the lazy dog&quot;.split(&quot; &quot;)\n    //convert the List to a Sequence\n    val wordsSequence = words.asSequence()\n\n    val lengthsSequence = wordsSequence.filter { println(&quot;filter: $it&quot;); it.length &gt; 3 }\n        .map { println(&quot;length: ${it.length}&quot;); it.length }\n        .take(4)\n\n    println(&quot;Lengths of first 4 words longer than 3 chars&quot;)\n    // terminal operation: obtaining the result as a List\n    println(lengthsSequence.toList())\n//sampleEnd\n}\n</div><p id="sequences.md-d6a2c20c" >The output of this code shows that the <code class="code " id="sequences.md-4b083be2"  >filter()</code> and <code class="code " id="sequences.md-f462a345"  >map()</code> functions are called only when building the result list. So, you first see the line of text <code class="code " id="sequences.md-b84b81f6"  >“Lengths of..”</code> and then the sequence processing starts. Note that for elements left after filtering, the map executes before filtering the next element. When the result size reaches 4, the processing stops because it\'s the largest possible size that <code class="code " id="sequences.md-9211fcf4"  >take(4)</code> can return.</p><p id="sequences.md-8b54bf65" >The sequence processing goes like this:</p><p id="sequences.md-773a2628" ><figure title="Sequences processing"><img alt="Sequences processing" title="Sequences processing" id="sequences.md-4fb88f4a" src="images/sequence-processing.png"  class="" width="990" height="427" /></figure></p><p id="sequences.md-f48750df" >In this example, the sequence processing takes 18 steps instead of 23 steps for doing the same with lists.</p></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="collection-operations.md"  >Collection operations overview</h1><p id="collection-operations.md-7b53fcf3" >The Kotlin standard library offers a broad variety of functions for performing operations on collections. This includes simple operations, such as getting or adding elements, as well as more complex ones including search, sorting, filtering, transformations, and so on.</p><section class="chapter"  ><h2 id="collection-operations.md-extension-and-member-functions" data-toc="collection-operations#collection-operations.md-extension-and-member-functions"  >Extension and member functions</h2><p id="collection-operations.md-12a6a792" >Collection operations are declared in the standard library in two ways: <a href="#classes.md-class-members" id="collection-operations.md-80d21f2c"   >member functions</a> of collection interfaces and <a href="#extensions.md-extension-functions" id="collection-operations.md-4ae2d5d9"   >extension functions</a>.</p><p id="collection-operations.md-d1bd3cfa" >Member functions define operations that are essential for a collection type. For example, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/index.html" id="collection-operations.md-792ca92e"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-operations.md-d53df1bc"  >Collection</code></a> contains the function <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-collection/is-empty.html" id="collection-operations.md-721850da"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-operations.md-ee1410a5"  >isEmpty()</code></a> for checking its emptiness; <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html" id="collection-operations.md-6478b83a"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-operations.md-cd376f87"  >List</code></a> contains <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/get.html" id="collection-operations.md-f06fb8ce"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-operations.md-3d8db34a"  >get()</code></a> for index access to elements, and so on.</p><p id="collection-operations.md-24864269" >When you create your own implementations of collection interfaces, you must implement their member functions. To make the creation of new implementations easier, use the skeletal implementations of collection interfaces from the standard library: <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-collection/index.html" id="collection-operations.md-b9a7e5cd"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-operations.md-309d3b0a"  >AbstractCollection</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-list/index.html" id="collection-operations.md-6256c7cc"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-operations.md-2e6533b"  >AbstractList</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-set/index.html" id="collection-operations.md-e23797db"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-operations.md-948498bc"  >AbstractSet</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-map/index.html" id="collection-operations.md-cfcd5092"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-operations.md-e22b461d"  >AbstractMap</code></a>, and their mutable counterparts.</p><p id="collection-operations.md-688c8c05" >Other collection operations are declared as extension functions. These are filtering, transformation, ordering, and other collection processing functions.</p></section><section class="chapter"  ><h2 id="collection-operations.md-common-operations" data-toc="collection-operations#collection-operations.md-common-operations"  >Common operations</h2><p id="collection-operations.md-7cc849d7" >Common operations are available for both <a href="#collections-overview.md-collection-types" id="collection-operations.md-dda215aa"   >read-only and mutable collections</a>. Common operations fall into these groups:</p><ul class="list _ul" id="collection-operations.md-69d18a59"   ><li class="list__item" id="collection-operations.md-e871a29f" ><a href="#collection-transformations.md" id="collection-operations.md-fa30c715"   >Transformations</a></li><li class="list__item" id="collection-operations.md-ae2ea9be" ><a href="#collection-filtering.md" id="collection-operations.md-2ead22b4"   >Filtering</a></li><li class="list__item" id="collection-operations.md-a2281348" ><a href="#collection-plus-minus.md" id="collection-operations.md-2906b011"   ><code class="code " id="collection-operations.md-c0997745"  >plus</code> and <code class="code " id="collection-operations.md-644ce3d1"  >minus</code> operators</a></li><li class="list__item" id="collection-operations.md-55552e3f" ><a href="#collection-grouping.md" id="collection-operations.md-698004c0"   >Grouping</a></li><li class="list__item" id="collection-operations.md-12f15ab" ><a href="#collection-parts.md" id="collection-operations.md-81ed7295"   >Retrieving collection parts</a></li><li class="list__item" id="collection-operations.md-cd7f5988" ><a href="#collection-elements.md" id="collection-operations.md-c9e88ee8"   >Retrieving single elements</a></li><li class="list__item" id="collection-operations.md-8c931f6a" ><a href="#collection-ordering.md" id="collection-operations.md-b37c2f6"   >Ordering</a></li><li class="list__item" id="collection-operations.md-e25d3c81" ><a href="#collection-aggregate.md" id="collection-operations.md-4be1811b"   >Aggregate operations</a></li></ul><p id="collection-operations.md-56bd32b1" >Operations described on these pages return their results without affecting the original collection. For example, a filtering operation produces a <em id="collection-operations.md-d2b94f73" class=""  >new collection</em> that contains all the elements matching the filtering predicate. Results of such operations should be either stored in variables, or used in some other way, for example, passed in other functions.</p><div class="code-block" data-lang="kotlin" id="collection-operations.md-b595177f"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)  \n    numbers.filter { it.length &gt; 3 }  // nothing happens with `numbers`, result is lost\n    println(&quot;numbers are still $numbers&quot;)\n    val longerThan3 = numbers.filter { it.length &gt; 3 } // result is stored in `longerThan3`\n    println(&quot;numbers longer than 3 chars are $longerThan3&quot;)\n//sampleEnd\n}\n</div><p id="collection-operations.md-cc5dea30" >For certain collection operations, there is an option to specify the <em id="collection-operations.md-918cbf32" class=""  >destination</em> object. Destination is a mutable collection to which the function appends its resulting items instead of returning them in a new object. For performing operations with destinations, there are separate functions with the <code class="code " id="collection-operations.md-be7f77ee"  >To</code> postfix in their names, for example, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter-to.html" id="collection-operations.md-8076cf3a"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-operations.md-4b32c964"  >filterTo()</code></a> instead of <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter.html" id="collection-operations.md-8fbbbdef"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-operations.md-7b554b52"  >filter()</code></a> or <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/associate-to.html" id="collection-operations.md-64130b3a"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-operations.md-b10b30fa"  >associateTo()</code></a> instead of <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/associate.html" id="collection-operations.md-c127b6a3"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-operations.md-ad45bb80"  >associate()</code></a>. These functions take the destination collection as an additional parameter.</p><div class="code-block" data-lang="kotlin" id="collection-operations.md-8fe93c61"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    val filterResults = mutableListOf&lt;String&gt;()  //destination object\n    numbers.filterTo(filterResults) { it.length &gt; 3 }\n    numbers.filterIndexedTo(filterResults) { index, _ -&gt; index == 0 }\n    println(filterResults) // contains results of both operations\n//sampleEnd\n}\n\n</div><p id="collection-operations.md-88d8222c" >For convenience, these functions return the destination collection back, so you can create it right in the corresponding argument of the function call:</p><div class="code-block" data-lang="kotlin" id="collection-operations.md-be51259e"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n//sampleStart\n    // filter numbers right into a new hash set, \n    // thus eliminating duplicates in the result\n    val result = numbers.mapTo(HashSet()) { it.length }\n    println(&quot;distinct item lengths are $result&quot;)\n//sampleEnd\n}\n</div><p id="collection-operations.md-5c1fef06" >Functions with destination are available for filtering, association, grouping, flattening, and other operations. For the complete list of destination operations see the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/index.html" id="collection-operations.md-864dca2a"   data-external="true" rel="noopener noreferrer" >Kotlin collections reference</a>.</p></section><section class="chapter"  ><h2 id="collection-operations.md-write-operations" data-toc="collection-operations#collection-operations.md-write-operations"  >Write operations</h2><p id="collection-operations.md-8d4a5291" >For mutable collections, there are also <em id="collection-operations.md-fc1b44c3" class=""  >write operations</em> that change the collection state. Such operations include adding, removing, and updating elements. Write operations are listed in the <a href="#collection-write.md" id="collection-operations.md-36e0d835"   >Write operations</a> and corresponding sections of <a href="#list-operations.md-list-write-operations" id="collection-operations.md-741c0e70"   >List-specific operations</a> and <a href="#map-operations.md-map-write-operations" id="collection-operations.md-7eccd574"   >Map specific operations</a>.</p><p id="collection-operations.md-93c0a787" >For certain operations, there are pairs of functions for performing the same operation: one applies the operation in-place and the other returns the result as a separate collection. For example, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sort.html" id="collection-operations.md-d9ddf018"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-operations.md-5d6e65e4"  >sort()</code></a> sorts a mutable collection in-place, so its state changes; <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sorted.html" id="collection-operations.md-a89fb056"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-operations.md-5530ac62"  >sorted()</code></a> creates a new collection that contains the same elements in the sorted order.</p><div class="code-block" data-lang="kotlin" id="collection-operations.md-eae2f7a3"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    val sortedNumbers = numbers.sorted()\n    println(numbers == sortedNumbers)  // false\n    numbers.sort()\n    println(numbers == sortedNumbers)  // true\n//sampleEnd\n}\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="collection-transformations.md"  >Collection transformation operations</h1><p id="collection-transformations.md-b3136438" >The Kotlin standard library provides a set of extension functions for collection <em id="collection-transformations.md-da1b96d6" class=""  >transformations</em>. These functions build new collections from existing ones based on the transformation rules provided. In this page, we\'ll give an overview of the available collection transformation functions.</p><section class="chapter"  ><h2 id="collection-transformations.md-map" data-toc="collection-transformations#collection-transformations.md-map"  >Map</h2><p id="collection-transformations.md-f73ecb06" >The <em id="collection-transformations.md-4730084a" class=""  >mapping</em> transformation creates a collection from the results of a function on the elements of another collection. The basic mapping function is <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map.html" id="collection-transformations.md-3b5efe68"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-transformations.md-ed1cd5f0"  >map()</code></a>. It applies the given lambda function to each subsequent element and returns the list of the lambda results. The order of results is the same as the original order of elements. To apply a transformation that additionally uses the element index as an argument, use <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map-indexed.html" id="collection-transformations.md-ca8919e4"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-transformations.md-9e32291b"  >mapIndexed()</code></a>.</p><div class="code-block" data-lang="kotlin" id="collection-transformations.md-ab200fb5"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = setOf(1, 2, 3)\n    println(numbers.map { it * 3 })\n    println(numbers.mapIndexed { idx, value -&gt; value * idx })\n//sampleEnd\n}\n</div><p id="collection-transformations.md-6ba1d52c" >If the transformation produces <code class="code " id="collection-transformations.md-1973b156"  >null</code> on certain elements, you can filter out the <code class="code " id="collection-transformations.md-6d24701f"  >null</code> s from the result collection by calling the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map-not-null.html" id="collection-transformations.md-5756e290"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-transformations.md-23076470"  >mapNotNull()</code></a> function instead of <code class="code " id="collection-transformations.md-d39c86c8"  >map()</code>, or <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map-indexed-not-null.html" id="collection-transformations.md-7e1f44b9"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-transformations.md-6debcee9"  >mapIndexedNotNull()</code></a> instead of <code class="code " id="collection-transformations.md-fea2b943"  >mapIndexed()</code>.</p><div class="code-block" data-lang="kotlin" id="collection-transformations.md-52ea700a"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = setOf(1, 2, 3)\n    println(numbers.mapNotNull { if ( it == 2) null else it * 3 })\n    println(numbers.mapIndexedNotNull { idx, value -&gt; if (idx == 0) null else value * idx })\n//sampleEnd\n}\n</div><p id="collection-transformations.md-68c640b8" >When transforming maps, you have two options: transform keys leaving values unchanged and vice versa. To apply a given transformation to keys, use <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map-keys.html" id="collection-transformations.md-7c435d3c"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-transformations.md-afb9409d"  >mapKeys()</code></a>; in turn, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/map-values.html" id="collection-transformations.md-e64a95e3"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-transformations.md-38085de"  >mapValues()</code></a> transforms values. Both functions use the transformations that take a map entry as an argument, so you can operate both its key and value.</p><div class="code-block" data-lang="kotlin" id="collection-transformations.md-662db105"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbersMap = mapOf(&quot;key1&quot; to 1, &quot;key2&quot; to 2, &quot;key3&quot; to 3, &quot;key11&quot; to 11)\n    println(numbersMap.mapKeys { it.key.toUpperCase() })\n    println(numbersMap.mapValues { it.value + it.key.length })\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="collection-transformations.md-zip" data-toc="collection-transformations#collection-transformations.md-zip"  >Zip</h2><p id="collection-transformations.md-2d8c3427" ><em id="collection-transformations.md-1bcc41bc" class=""  >Zipping</em> transformation is building pairs from elements with the same positions in both collections. In the Kotlin standard library, this is done by the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/zip.html" id="collection-transformations.md-1de75707"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-transformations.md-eabc6ba6"  >zip()</code></a> extension function.</p><p id="collection-transformations.md-fa5cd8be" >When called on a collection or an array with another collection (array) as an argument, <code class="code " id="collection-transformations.md-5c486945"  >zip()</code> returns the <code class="code " id="collection-transformations.md-eb00a63f"  >List</code> of <code class="code " id="collection-transformations.md-7f9b8224"  >Pair</code> objects. The elements of the receiver collection are the first elements in these pairs.</p><p id="collection-transformations.md-a4a091ec" >If the collections have different sizes, the result of the <code class="code " id="collection-transformations.md-d36a3892"  >zip()</code> is the smaller size; the last elements of the larger collection are not included in the result.</p><p id="collection-transformations.md-39a2be33" ><code class="code " id="collection-transformations.md-e32747f3"  >zip()</code> can also be called in the infix form <code class="code " id="collection-transformations.md-d28d1a4f"  >a zip b</code>.</p><div class="code-block" data-lang="kotlin" id="collection-transformations.md-395462de"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val colors = listOf(&quot;red&quot;, &quot;brown&quot;, &quot;grey&quot;)\n    val animals = listOf(&quot;fox&quot;, &quot;bear&quot;, &quot;wolf&quot;)\n    println(colors zip animals)\n\n    val twoAnimals = listOf(&quot;fox&quot;, &quot;bear&quot;)\n    println(colors.zip(twoAnimals))\n//sampleEnd\n}\n</div><p id="collection-transformations.md-66457e38" >You can also call <code class="code " id="collection-transformations.md-d25fb8e8"  >zip()</code> with a transformation function that takes two parameters: the receiver element and the argument element. In this case, the result <code class="code " id="collection-transformations.md-e7a3bc83"  >List</code> contains the return values of the transformation function called on pairs of the receiver and the argument elements with the same positions.</p><div class="code-block" data-lang="kotlin" id="collection-transformations.md-30be9e3"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val colors = listOf(&quot;red&quot;, &quot;brown&quot;, &quot;grey&quot;)\n    val animals = listOf(&quot;fox&quot;, &quot;bear&quot;, &quot;wolf&quot;)\n    \n    println(colors.zip(animals) { color, animal -&gt; &quot;The ${animal.capitalize()} is $color&quot;})\n//sampleEnd\n}\n</div><p id="collection-transformations.md-f17e99f0" >When you have a <code class="code " id="collection-transformations.md-d17867c9"  >List</code> of <code class="code " id="collection-transformations.md-820f69eb"  >Pair</code> s, you can do the reverse transformation – <em id="collection-transformations.md-d49ee1f" class=""  >unzipping</em> – that builds two lists from these pairs:</p><ul class="list _ul" id="collection-transformations.md-195e304d"   ><li class="list__item" id="collection-transformations.md-455f2255" ><p>The first list contains the first elements of each <code class="code " id="collection-transformations.md-654fd743"  >Pair</code> in the original list.</p></li><li class="list__item" id="collection-transformations.md-80ad46ae" ><p>The second list contains the second elements.</p></li></ul><p id="collection-transformations.md-a62c4bbe" >To unzip a list of pairs, call <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/unzip.html" id="collection-transformations.md-b2486cc2"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-transformations.md-4f1fc7aa"  >unzip()</code></a>.</p><div class="code-block" data-lang="kotlin" id="collection-transformations.md-a82d79c6"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numberPairs = listOf(&quot;one&quot; to 1, &quot;two&quot; to 2, &quot;three&quot; to 3, &quot;four&quot; to 4)\n    println(numberPairs.unzip())\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="collection-transformations.md-associate" data-toc="collection-transformations#collection-transformations.md-associate"  >Associate</h2><p id="collection-transformations.md-f51aede3" ><em id="collection-transformations.md-24e793ec" class=""  >Association</em> transformations allow building maps from the collection elements and certain values associated with them. In different association types, the elements can be either keys or values in the association map.</p><p id="collection-transformations.md-cfc1dfc6" >The basic association function <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/associate-with.html" id="collection-transformations.md-fe09df30"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-transformations.md-b4e7258c"  >associateWith()</code></a> creates a <code class="code " id="collection-transformations.md-e1b3cea"  >Map</code> in which the elements of the original collection are keys, and values are produced from them by the given transformation function. If two elements are equal, only the last one remains in the map.</p><div class="code-block" data-lang="kotlin" id="collection-transformations.md-c9bde615"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    println(numbers.associateWith { it.length })\n//sampleEnd\n}\n</div><p id="collection-transformations.md-4031a7da" >For building maps with collection elements as values, there is the function <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/associate-by.html" id="collection-transformations.md-62142413"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-transformations.md-56f308ab"  >associateBy()</code></a>. It takes a function that returns a key based on an element\'s value. If two elements are equal, only the last one remains in the map.</p><p id="collection-transformations.md-e7387bd0" ><code class="code " id="collection-transformations.md-26a3c1cb"  >associateBy()</code> can also be called with a value transformation function.</p><div class="code-block" data-lang="kotlin" id="collection-transformations.md-84d78d4c"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n\n    println(numbers.associateBy { it.first().toUpperCase() })\n    println(numbers.associateBy(keySelector = { it.first().toUpperCase() }, valueTransform = { it.length }))\n//sampleEnd\n}\n</div><p id="collection-transformations.md-c3b8db44" >Another way to build maps in which both keys and values are somehow produced from collection elements is the function <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/associate.html" id="collection-transformations.md-4e5fc18b"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-transformations.md-50fc97bf"  >associate()</code></a>. It takes a lambda function that returns a <code class="code " id="collection-transformations.md-8b84dee1"  >Pair</code>: the key and the value of the corresponding map entry.</p><p id="collection-transformations.md-b7e37df1" >Note that <code class="code " id="collection-transformations.md-a3ef8f7b"  >associate()</code> produces short-living <code class="code " id="collection-transformations.md-bd2fc091"  >Pair</code> objects which may affect the performance. Thus, <code class="code " id="collection-transformations.md-689d24df"  >associate()</code> should be used when the performance isn\'t critical or it\'s more preferable than other options.</p><p id="collection-transformations.md-b6a55cf7" >An example of the latter is when a key and the corresponding value are produced from an element together.</p><div class="code-block" data-lang="kotlin" id="collection-transformations.md-23240321"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\ndata class FullName (val firstName: String, val lastName: String)\n\nfun parseFullName(fullName: String): FullName {\n    val nameParts = fullName.split(&quot; &quot;)\n    if (nameParts.size == 2) {\n        return FullName(nameParts[0], nameParts[1])\n    } else throw Exception(&quot;Wrong name format&quot;)\n}\n\n//sampleStart\n    val names = listOf(&quot;Alice Adams&quot;, &quot;Brian Brown&quot;, &quot;Clara Campbell&quot;)\n    println(names.associate { name -&gt; parseFullName(name).let { it.lastName to it.firstName } })  \n//sampleEnd\n}\n</div><p id="collection-transformations.md-d2178a9d" >Here we call a transform function on an element first, and then build a pair from the properties of that function\'s result.</p></section><section class="chapter"  ><h2 id="collection-transformations.md-flatten" data-toc="collection-transformations#collection-transformations.md-flatten"  >Flatten</h2><p id="collection-transformations.md-98a80b23" >If you operate nested collections, you may find the standard library functions that provide flat access to nested collection elements useful.</p><p id="collection-transformations.md-cbfd53ba" >The first function is <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/flatten.html" id="collection-transformations.md-c70cfe3d"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-transformations.md-275b9a90"  >flatten()</code></a>. You can call it on a collection of collections, for example, a <code class="code " id="collection-transformations.md-a2fa1158"  >List</code> of <code class="code " id="collection-transformations.md-485ad2c6"  >Set</code> s. The function returns a single <code class="code " id="collection-transformations.md-72e4bc38"  >List</code> of all the elements of the nested collections.</p><div class="code-block" data-lang="kotlin" id="collection-transformations.md-16c4d49d"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numberSets = listOf(setOf(1, 2, 3), setOf(4, 5, 6), setOf(1, 2))\n    println(numberSets.flatten())\n//sampleEnd\n}\n</div><p id="collection-transformations.md-b2a208fd" >Another function – <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/flat-map.html" id="collection-transformations.md-d35c8792"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-transformations.md-9a8f0091"  >flatMap()</code></a> provides a flexible way to process nested collections. It takes a function that maps a collection element to another collection. As a result, <code class="code " id="collection-transformations.md-2761e8d5"  >flatMap()</code> returns a single list of its return values on all the elements. So, <code class="code " id="collection-transformations.md-9f0c01fe"  >flatMap()</code> behaves as a subsequent call of <code class="code " id="collection-transformations.md-63d9036f"  >map()</code> (with a collection as a mapping result) and <code class="code " id="collection-transformations.md-d2ae658a"  >flatten()</code>.</p><div class="code-block" data-lang="kotlin" id="collection-transformations.md-e461acbe"        data-runnable="true" data-min-compiler-version="1.3"  >\ndata class StringContainer(val values: List&lt;String&gt;)\n\nfun main() {\n//sampleStart\n    val containers = listOf(\n        StringContainer(listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;)),\n        StringContainer(listOf(&quot;four&quot;, &quot;five&quot;, &quot;six&quot;)),\n        StringContainer(listOf(&quot;seven&quot;, &quot;eight&quot;))\n    )\n    println(containers.flatMap { it.values })\n//sampleEnd\n}\n\n</div></section><section class="chapter"  ><h2 id="collection-transformations.md-string-representation" data-toc="collection-transformations#collection-transformations.md-string-representation"  >String representation</h2><p id="collection-transformations.md-b5eb1381" >If you need to retrieve the collection content in a readable format, use functions that transform the collections to strings: <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/join-to-string.html" id="collection-transformations.md-f7f01479"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-transformations.md-3bc4ad50"  >joinToString()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/join-to.html" id="collection-transformations.md-588edc8c"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-transformations.md-660b47b1"  >joinTo()</code></a>.</p><p id="collection-transformations.md-4a02d240" ><code class="code " id="collection-transformations.md-35467a58"  >joinToString()</code> builds a single <code class="code " id="collection-transformations.md-39089bac"  >String</code> from the collection elements based on the provided arguments. <code class="code " id="collection-transformations.md-e588191c"  >joinTo()</code> does the same but appends the result to the given <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-appendable/index.html" id="collection-transformations.md-5ca5d85a"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-transformations.md-860f26c6"  >Appendable</code></a> object.</p><p id="collection-transformations.md-1c038552" >When called with the default arguments, the functions return the result similar to calling <code class="code " id="collection-transformations.md-11b2c3aa"  >toString()</code> on the collection: a <code class="code " id="collection-transformations.md-409a9eb5"  >String</code> of elements\' string representations separated by commas with spaces.</p><div class="code-block" data-lang="kotlin" id="collection-transformations.md-fd8a727a"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    \n    println(numbers)         \n    println(numbers.joinToString())\n    \n    val listString = StringBuffer(&quot;The list of numbers: &quot;)\n    numbers.joinTo(listString)\n    println(listString)\n//sampleEnd\n}\n</div><p id="collection-transformations.md-2a5ba2e1" >To build a custom string representation, you can specify its parameters in function arguments <code class="code " id="collection-transformations.md-3024c4bf"  >separator</code>, <code class="code " id="collection-transformations.md-69c4917d"  >prefix</code>, and <code class="code " id="collection-transformations.md-22d600a8"  >postfix</code>. The resulting string will start with the <code class="code " id="collection-transformations.md-bf823f20"  >prefix</code> and end with the <code class="code " id="collection-transformations.md-afe32448"  >postfix</code>. The <code class="code " id="collection-transformations.md-7561288d"  >separator</code> will come after each element except the last.</p><div class="code-block" data-lang="kotlin" id="collection-transformations.md-838f2b0b"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)    \n    println(numbers.joinToString(separator = &quot; | &quot;, prefix = &quot;start: &quot;, postfix = &quot;: end&quot;))\n//sampleEnd\n}\n</div><p id="collection-transformations.md-5b32f15d" >For bigger collections, you may want to specify the <code class="code " id="collection-transformations.md-ea4274a9"  >limit</code> – a number of elements that will be included into result. If the collection size exceeds the <code class="code " id="collection-transformations.md-42ce3e70"  >limit</code>, all the other elements will be replaced with a single value of the <code class="code " id="collection-transformations.md-e0f8870d"  >truncated</code> argument.</p><div class="code-block" data-lang="kotlin" id="collection-transformations.md-411411f1"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = (1..100).toList()\n    println(numbers.joinToString(limit = 10, truncated = &quot;&lt;...&gt;&quot;))\n//sampleEnd\n}\n</div><p id="collection-transformations.md-c6833bfb" >Finally, to customize the representation of elements themselves, provide the <code class="code " id="collection-transformations.md-cd881691"  >transform</code> function.</p><div class="code-block" data-lang="kotlin" id="collection-transformations.md-1e60cf0b"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    println(numbers.joinToString { &quot;Element: ${it.toUpperCase()}&quot;})\n//sampleEnd\n}\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="collection-filtering.md"  >Filtering collections</h1><p id="collection-filtering.md-bbb6f2b8" >Filtering is one of the most popular tasks in collection processing. In Kotlin, filtering conditions are defined by <em id="collection-filtering.md-1d8f1d4d" class=""  >predicates</em> – lambda functions that take a collection element and return a boolean value: <code class="code " id="collection-filtering.md-aba54f22"  >true</code> means that the given element matches the predicate, <code class="code " id="collection-filtering.md-246ce735"  >false</code> means the opposite.</p><p id="collection-filtering.md-f349601a" >The standard library contains a group of extension functions that let you filter collections in a single call. These functions leave the original collection unchanged, so they are available for both <a href="#collections-overview.md-collection-types" id="collection-filtering.md-3d027142"   >mutable and read-only</a> collections. To operate the filtering result, you should assign it to a variable or chain the functions after filtering.</p><section class="chapter"  ><h2 id="collection-filtering.md-filter-by-predicate" data-toc="collection-filtering#collection-filtering.md-filter-by-predicate"  >Filter by predicate</h2><p id="collection-filtering.md-d1878bc0" >The basic filtering function is <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter.html" id="collection-filtering.md-7be4a47a"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-filtering.md-cbd8a655"  >filter()</code></a>. When called with a predicate, <code class="code " id="collection-filtering.md-b6d4e898"  >filter()</code> returns the collection elements that match it. For both <code class="code " id="collection-filtering.md-a1b7b823"  >List</code> and <code class="code " id="collection-filtering.md-2ab7b216"  >Set</code>, the resulting collection is a <code class="code " id="collection-filtering.md-988efab1"  >List</code>, for <code class="code " id="collection-filtering.md-a628aef"  >Map</code> it\'s a <code class="code " id="collection-filtering.md-30297491"  >Map</code> as well.</p><div class="code-block" data-lang="kotlin" id="collection-filtering.md-adce7679"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)  \n    val longerThan3 = numbers.filter { it.length &gt; 3 }\n    println(longerThan3)\n\n    val numbersMap = mapOf(&quot;key1&quot; to 1, &quot;key2&quot; to 2, &quot;key3&quot; to 3, &quot;key11&quot; to 11)\n    val filteredMap = numbersMap.filter { (key, value) -&gt; key.endsWith(&quot;1&quot;) &amp;&amp; value &gt; 10}\n    println(filteredMap)\n//sampleEnd\n}\n</div><p id="collection-filtering.md-16deceda" >The predicates in <code class="code " id="collection-filtering.md-29b6594b"  >filter()</code> can only check the values of the elements. If you want to use element positions in the filter, use <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter-indexed.html" id="collection-filtering.md-4c39236b"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-filtering.md-143bfdd0"  >filterIndexed()</code></a>. It takes a predicate with two arguments: the index and the value of an element.</p><p id="collection-filtering.md-8ff70e3e" >To filter collections by negative conditions, use <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter-not.html" id="collection-filtering.md-409edd0"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-filtering.md-51cc929c"  >filterNot()</code></a>. It returns a list of elements for which the predicate yields <code class="code " id="collection-filtering.md-31e49f84"  >false</code>.</p><div class="code-block" data-lang="kotlin" id="collection-filtering.md-b3921379"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    \n    val filteredIdx = numbers.filterIndexed { index, s -&gt; (index != 0) &amp;&amp; (s.length &lt; 5)  }\n    val filteredNot = numbers.filterNot { it.length &lt;= 3 }\n\n    println(filteredIdx)\n    println(filteredNot)\n//sampleEnd\n}\n</div><p id="collection-filtering.md-e29e7810" >There are also functions that narrow the element type by filtering elements of a given type:</p><ul class="list _ul" id="collection-filtering.md-5c5af4b1"   ><li class="list__item" id="collection-filtering.md-72a4d63e" ><p id="collection-filtering.md-9aefbbb0" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter-is-instance.html" id="collection-filtering.md-ed860069"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-filtering.md-80e75567"  >filterIsInstance()</code></a> returns collection elements of a given type. Being called on a <code class="code " id="collection-filtering.md-c1d7da3c"  >List&lt;Any&gt;</code>, <code class="code " id="collection-filtering.md-ca262651"  >filterIsInstance&lt;T&gt;()</code> returns a <code class="code " id="collection-filtering.md-78538a4d"  >List&lt;T&gt;</code>, thus allowing you to call functions of the <code class="code " id="collection-filtering.md-4f4e9484"  >T</code> type on its items.</p><div class="code-block" data-lang="kotlin" id="collection-filtering.md-5d25a4d8"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = listOf(null, 1, &quot;two&quot;, 3.0, &quot;four&quot;)\n    println(&quot;All String elements in upper case:&quot;)\n    numbers.filterIsInstance&lt;String&gt;().forEach {\n        println(it.toUpperCase())\n    }\n//sampleEnd\n}\n</div></li><li class="list__item" id="collection-filtering.md-2bc493d5" ><p id="collection-filtering.md-5804cac6" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter-not-null.html" id="collection-filtering.md-ee441c1f"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-filtering.md-9d8b066a"  >filterNotNull()</code></a> returns all non-null elements. Being called on a <code class="code " id="collection-filtering.md-95e29d56"  >List&lt;T?&gt;</code>, <code class="code " id="collection-filtering.md-51b8331b"  >filterNotNull()</code> returns a <code class="code " id="collection-filtering.md-42bc3b64"  >List&lt;T: Any&gt;</code>, thus allowing you to treat the elements as non-null objects.</p><div class="code-block" data-lang="kotlin" id="collection-filtering.md-f716a51d"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = listOf(null, &quot;one&quot;, &quot;two&quot;, null)\n    numbers.filterNotNull().forEach {\n        println(it.length)   // length is unavailable for nullable Strings\n    }\n//sampleEnd\n}\n</div></li></ul></section><section class="chapter"  ><h2 id="collection-filtering.md-partition" data-toc="collection-filtering#collection-filtering.md-partition"  >Partition</h2><p id="collection-filtering.md-efcbd0df" >Another filtering function – <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/partition.html" id="collection-filtering.md-5ec3ff1a"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-filtering.md-924f097a"  >partition()</code></a> – filters a collection by a predicate and keeps the elements that don\'t match it in a separate list. So, you have a <code class="code " id="collection-filtering.md-165d5ebf"  >Pair</code> of <code class="code " id="collection-filtering.md-95e9a1ae"  >List</code> s as a return value: the first list containing elements that match the predicate and the second one containing everything else from the original collection.</p><div class="code-block" data-lang="kotlin" id="collection-filtering.md-491d3b90"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    val (match, rest) = numbers.partition { it.length &gt; 3 }\n\n    println(match)\n    println(rest)\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="collection-filtering.md-test-predicates" data-toc="collection-filtering#collection-filtering.md-test-predicates"  >Test predicates</h2><p id="collection-filtering.md-8fff0f19" >Finally, there are functions that simply test a predicate against collection elements:</p><ul class="list _ul" id="collection-filtering.md-d182e1c3"   ><li class="list__item" id="collection-filtering.md-a6d6d805" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/any.html" id="collection-filtering.md-b3a0a560"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-filtering.md-bac29e6a"  >any()</code></a> returns <code class="code " id="collection-filtering.md-76174474"  >true</code> if at least one element matches the given predicate.</p></li><li class="list__item" id="collection-filtering.md-7011ec4e" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/none.html" id="collection-filtering.md-f57a8e3d"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-filtering.md-e1402246"  >none()</code></a> returns <code class="code " id="collection-filtering.md-9363f69f"  >true</code> if none of the elements match the given predicate.</p></li><li class="list__item" id="collection-filtering.md-48e7df75" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/all.html" id="collection-filtering.md-92316057"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-filtering.md-84696eef"  >all()</code></a> returns <code class="code " id="collection-filtering.md-67240bc4"  >true</code> if all elements match the given predicate. Note that <code class="code " id="collection-filtering.md-4adf9974"  >all()</code> returns <code class="code " id="collection-filtering.md-74609bee"  >true</code> when called with any valid predicate on an empty collection. Such behavior is known in logic as <a href="https://en.wikipedia.org/wiki/Vacuous_truth" id="collection-filtering.md-cc06f00a"   data-external="true" rel="noopener noreferrer" >vacuous truth</a>.</p></li></ul><div class="code-block" data-lang="kotlin" id="collection-filtering.md-97a7bda5"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n\n    println(numbers.any { it.endsWith(&quot;e&quot;) })\n    println(numbers.none { it.endsWith(&quot;a&quot;) })\n    println(numbers.all { it.endsWith(&quot;e&quot;) })\n\n    println(emptyList&lt;Int&gt;().all { it &gt; 5 })   // vacuous truth\n//sampleEnd\n}\n</div><p id="collection-filtering.md-168f808a" ><code class="code " id="collection-filtering.md-21314b34"  >any()</code> and <code class="code " id="collection-filtering.md-ccb5c2a0"  >none()</code> can also be used without a predicate: in this case they just check the collection emptiness. <code class="code " id="collection-filtering.md-212953e0"  >any()</code> returns <code class="code " id="collection-filtering.md-64650bfb"  >true</code> if there are elements and <code class="code " id="collection-filtering.md-6dcac642"  >false</code> if there aren\'t; <code class="code " id="collection-filtering.md-ed85670e"  >none()</code> does the opposite.</p><div class="code-block" data-lang="kotlin" id="collection-filtering.md-2df19b63"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    val empty = emptyList&lt;String&gt;()\n\n    println(numbers.any())\n    println(empty.any())\n    \n    println(numbers.none())\n    println(empty.none())\n//sampleEnd\n}\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="collection-plus-minus.md"  >Plus and minus operators</h1><p id="collection-plus-minus.md-3a4a56e0" >In Kotlin, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/plus.html" id="collection-plus-minus.md-c598d3e8"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-plus-minus.md-3bde8c30"  >plus</code></a> (<code class="code " id="collection-plus-minus.md-89f49010"  >+</code>) and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/minus.html" id="collection-plus-minus.md-d4b8c78c"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-plus-minus.md-47cdbb38"  >minus</code></a> (<code class="code " id="collection-plus-minus.md-f6a9bc06"  >-</code>) operators are defined for collections. They take a collection as the first operand; the second operand can be either an element or another collection. The return value is a new read-only collection:</p><ul class="list _ul" id="collection-plus-minus.md-8bd89c0c"   ><li class="list__item" id="collection-plus-minus.md-dce08d19" ><p>The result of <code class="code " id="collection-plus-minus.md-da151bc2"  >plus</code> contains the elements from the original collection <em id="collection-plus-minus.md-1caf12c0" class=""  >and</em> from the second operand.</p></li><li class="list__item" id="collection-plus-minus.md-a304e44a" ><p>The result of <code class="code " id="collection-plus-minus.md-e7f58840"  >minus</code> contains the elements of the original collection <em id="collection-plus-minus.md-e8ad5a8b" class=""  >except</em> the elements from the second operand. If it\'s an element, <code class="code " id="collection-plus-minus.md-4800b6a3"  >minus</code> removes its <em id="collection-plus-minus.md-953f2645" class=""  >first</em> occurrence; if it\'s a collection, <em id="collection-plus-minus.md-ff7afc35" class=""  >all</em> occurrences of its elements are removed.</p></li></ul><div class="code-block" data-lang="kotlin" id="collection-plus-minus.md-66fe7b2a"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n\n    val plusList = numbers + &quot;five&quot;\n    val minusList = numbers - listOf(&quot;three&quot;, &quot;four&quot;)\n    println(plusList)\n    println(minusList)\n//sampleEnd\n}\n</div><p id="collection-plus-minus.md-c40ee4f2" >For the details on <code class="code " id="collection-plus-minus.md-dd00f248"  >plus</code> and <code class="code " id="collection-plus-minus.md-bb3a2508"  >minus</code> operators for maps, see <a href="#map-operations.md" id="collection-plus-minus.md-dcfc337"   >Map specific operations</a>. The <a href="#operator-overloading.md-augmented-assignments" id="collection-plus-minus.md-76fe64b1"   >augmented assignment operators</a> <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/plus-assign.html" id="collection-plus-minus.md-66eeb692"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-plus-minus.md-be9ab0e3"  >plusAssign</code></a> (<code class="code " id="collection-plus-minus.md-5b0591b4"  >+=</code>) and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/minus-assign.html" id="collection-plus-minus.md-32edf757"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-plus-minus.md-3e7c6514"  >minusAssign</code></a> (<code class="code " id="collection-plus-minus.md-198e3085"  >-=</code>) are also defined for collections. However, for read-only collections, they actually use the <code class="code " id="collection-plus-minus.md-11eb9823"  >plus</code> or <code class="code " id="collection-plus-minus.md-ce6ec1d7"  >minus</code> operators and try to assign the result to the same variable. Thus, they are available only on <code class="code " id="collection-plus-minus.md-1e834e70"  >var</code> read-only collections. For mutable collections, they modify the collection if it\'s a <code class="code " id="collection-plus-minus.md-27de4007"  >val</code>. For more details see <a href="#collection-write.md" id="collection-plus-minus.md-b16eb182"   >Collection write operations</a>.</p></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="collection-grouping.md"  >Grouping</h1><p id="collection-grouping.md-9be1b4e5" >The Kotlin standard library provides extension functions for grouping collection elements. The basic function <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/group-by.html" id="collection-grouping.md-f71066f0"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-grouping.md-f78c179e"  >groupBy()</code></a> takes a lambda function and returns a <code class="code " id="collection-grouping.md-c7446f9e"  >Map</code>. In this map, each key is the lambda result and the corresponding value is the <code class="code " id="collection-grouping.md-7902bcf2"  >List</code> of elements on which this result is returned. This function can be used, for example, to group a list of <code class="code " id="collection-grouping.md-528d5bd6"  >String</code> s by their first letter.</p><p id="collection-grouping.md-bbb7d2cd" >You can also call <code class="code " id="collection-grouping.md-c3f2b635"  >groupBy()</code> with a second lambda argument – a value transformation function. In the result map of <code class="code " id="collection-grouping.md-ea3aaa1b"  >groupBy()</code> with two lambdas, the keys produced by <code class="code " id="collection-grouping.md-c528a7f5"  >keySelector</code> function are mapped to the results of the value transformation function instead of the original elements.</p><div class="code-block" data-lang="kotlin" id="collection-grouping.md-d8e7dfc7"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;)\n\n    println(numbers.groupBy { it.first().toUpperCase() })\n    println(numbers.groupBy(keySelector = { it.first() }, valueTransform = { it.toUpperCase() }))\n//sampleEnd\n}\n</div><p id="collection-grouping.md-fdde822e" >If you want to group elements and then apply an operation to all groups at one time, use the function <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/grouping-by.html" id="collection-grouping.md-59a769ea"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-grouping.md-a96ac9a4"  >groupingBy()</code></a>. It returns an instance of the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-grouping/index.html" id="collection-grouping.md-29f932f7"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-grouping.md-3fbd9de8"  >Grouping</code></a> type. The <code class="code " id="collection-grouping.md-10a21ff0"  >Grouping</code> instance lets you apply operations to all groups in a lazy manner: the groups are actually built right before the operation execution.</p><p id="collection-grouping.md-e58c7195" >Namely, <code class="code " id="collection-grouping.md-10414b4"  >Grouping</code> supports the following operations:</p><ul class="list _ul" id="collection-grouping.md-e313d44e"   ><li class="list__item" id="collection-grouping.md-4594766d" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/each-count.html" id="collection-grouping.md-d5cf0535"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-grouping.md-ca7eb2dc"  >eachCount()</code></a> counts the elements in each group.</p></li><li class="list__item" id="collection-grouping.md-33e2d998" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/fold.html" id="collection-grouping.md-1eb6dd68"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-grouping.md-4778053e"  >fold()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce.html" id="collection-grouping.md-b92c911"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-grouping.md-398b4108"  >reduce()</code></a> perform <a href="#collection-aggregate.md-fold-and-reduce" id="collection-grouping.md-f87d96b5"   >fold and reduce</a> operations on each group as a separate collection and return the results.</p></li><li class="list__item" id="collection-grouping.md-e07bcea1" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/aggregate.html" id="collection-grouping.md-a29baa0b"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-grouping.md-ae8c45cc"  >aggregate()</code></a> applies a given operation subsequently to all the elements in each group and returns the result. This is the generic way to perform any operations on a <code class="code " id="collection-grouping.md-d2dbb942"  >Grouping</code>. Use it to implement custom operations when fold or reduce are not enough.</p></li></ul><div class="code-block" data-lang="kotlin" id="collection-grouping.md-7880b7bf"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;, &quot;six&quot;)\n    println(numbers.groupingBy { it.first() }.eachCount())\n//sampleEnd\n}\n</div></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="collection-parts.md"  >Retrieve collection parts</h1><p id="collection-parts.md-912fac7e" >The Kotlin standard library contains extension functions for retrieving parts of a collection. These functions provide a variety of ways to select elements for the result collection: listing their positions explicitly, specifying the result size, and others.</p><section class="chapter"  ><h2 id="collection-parts.md-slice" data-toc="collection-parts#collection-parts.md-slice"  >Slice</h2><p id="collection-parts.md-7358d136" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/slice.html" id="collection-parts.md-95570b6d"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-parts.md-7223beb6"  >slice()</code></a> returns a list of the collection elements with given indices. The indices may be passed either as a <a href="#ranges.md" id="collection-parts.md-9f86c218"   >range</a> or as a collection of integer values.</p><div class="code-block" data-lang="kotlin" id="collection-parts.md-613f0e47"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart    \n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;, &quot;six&quot;)    \n    println(numbers.slice(1..3))\n    println(numbers.slice(0..4 step 2))\n    println(numbers.slice(setOf(3, 5, 0)))    \n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="collection-parts.md-take-and-drop" data-toc="collection-parts#collection-parts.md-take-and-drop"  >Take and drop</h2><p id="collection-parts.md-4671c931" >To get the specified number of elements starting from the first, use the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/take.html" id="collection-parts.md-fe89602c"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-parts.md-4a41bdb2"  >take()</code></a> function. For getting the last elements, use <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/take-last.html" id="collection-parts.md-67912cf2"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-parts.md-490277ed"  >takeLast()</code></a>. When called with a number larger than the collection size, both functions return the whole collection.</p><p id="collection-parts.md-9523d2bb" >To take all the elements except a given number of first or last elements, call the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/drop.html" id="collection-parts.md-2cc67988"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-parts.md-7b2c96bb"  >drop()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/drop-last.html" id="collection-parts.md-4274d9fa"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-parts.md-3318bd79"  >dropLast()</code></a> functions respectively.</p><div class="code-block" data-lang="kotlin" id="collection-parts.md-13feb337"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;, &quot;six&quot;)\n    println(numbers.take(3))\n    println(numbers.takeLast(3))\n    println(numbers.drop(1))\n    println(numbers.dropLast(5))\n//sampleEnd\n}\n</div><p id="collection-parts.md-e6d42995" >You can also use predicates to define the number of elements for taking or dropping. There are four functions similar to the ones described above:</p><ul class="list _ul" id="collection-parts.md-555389c8"   ><li class="list__item" id="collection-parts.md-23bef01f" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/take-while.html" id="collection-parts.md-18a53aeb"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-parts.md-cda36b1d"  >takeWhile()</code></a> is <code class="code " id="collection-parts.md-f6c54954"  >take()</code> with a predicate: it takes the elements up to but excluding the first one not matching the predicate. If the first collection element doesn\'t match the predicate, the result is empty.</p></li><li class="list__item" id="collection-parts.md-610117e4" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/take-last-while.html" id="collection-parts.md-690f0b1f"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-parts.md-8424e7d"  >takeLastWhile()</code></a> is similar to <code class="code " id="collection-parts.md-7b0305f7"  >takeLast()</code>: it takes the range of elements matching the predicate from the end of the collection. The first element of the range is the element next to the last element not matching the predicate. If the last collection element doesn\'t match the predicate, the result is empty;</p></li><li class="list__item" id="collection-parts.md-8badee59" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/drop-while.html" id="collection-parts.md-15386747"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-parts.md-53960c13"  >dropWhile()</code></a> is the opposite to <code class="code " id="collection-parts.md-fa1e286e"  >takeWhile()</code> with the same predicate: it returns the elements from the first one not matching the predicate to the end.</p></li><li class="list__item" id="collection-parts.md-7ec27d32" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/drop-last-while.html" id="collection-parts.md-9f690637"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-parts.md-d67622f5"  >dropLastWhile()</code></a> is the opposite to <code class="code " id="collection-parts.md-65847e4c"  >takeLastWhile()</code> with the same predicate: it returns the elements from the beginning to the last one not matching the predicate.</p></li></ul><div class="code-block" data-lang="kotlin" id="collection-parts.md-606af29f"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;, &quot;six&quot;)\n    println(numbers.takeWhile { !it.startsWith(\'f\') })\n    println(numbers.takeLastWhile { it != &quot;three&quot; })\n    println(numbers.dropWhile { it.length == 3 })\n    println(numbers.dropLastWhile { it.contains(\'i\') })\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="collection-parts.md-chunked" data-toc="collection-parts#collection-parts.md-chunked"  >Chunked</h2><p id="collection-parts.md-aa384b5b" >To break a collection onto parts of a given size, use the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/chunked.html" id="collection-parts.md-63c24337"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-parts.md-425d76bf"  >chunked()</code></a> function. <code class="code " id="collection-parts.md-bacaf6db"  >chunked()</code> takes a single argument – the size of the chunk – and returns a <code class="code " id="collection-parts.md-257826e0"  >List</code> of <code class="code " id="collection-parts.md-b824c76e"  >List</code> s of the given size. The first chunk starts from the first element and contains the <code class="code " id="collection-parts.md-90511df8"  >size</code> elements, the second chunk holds the next <code class="code " id="collection-parts.md-2cbe91df"  >size</code> elements, and so on. The last chunk may have a smaller size.</p><div class="code-block" data-lang="kotlin" id="collection-parts.md-8ce94cf2"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = (0..13).toList()\n    println(numbers.chunked(3))\n//sampleEnd\n}\n</div><p id="collection-parts.md-dd6da232" >You can also apply a transformation for the returned chunks right away. To do this, provide the transformation as a lambda function when calling <code class="code " id="collection-parts.md-27982ba5"  >chunked()</code>. The lambda argument is a chunk of the collection. When <code class="code " id="collection-parts.md-5966ba78"  >chunked()</code> is called with a transformation, the chunks are short-living <code class="code " id="collection-parts.md-7a7946e0"  >List</code> s that should be consumed right in that lambda.</p><div class="code-block" data-lang="kotlin" id="collection-parts.md-7b8ed44a"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = (0..13).toList() \n    println(numbers.chunked(3) { it.sum() })  // `it` is a chunk of the original collection\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="collection-parts.md-windowed" data-toc="collection-parts#collection-parts.md-windowed"  >Windowed</h2><p id="collection-parts.md-20d022d6" >You can retrieve all possible ranges of the collection elements of a given size. The function for getting them is called <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/windowed.html" id="collection-parts.md-ce913e83"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-parts.md-a675abfe"  >windowed()</code></a>: it returns a list of element ranges that you would see if you were looking at the collection through a sliding window of the given size. Unlike <code class="code " id="collection-parts.md-e6c14a3b"  >chunked()</code>, <code class="code " id="collection-parts.md-f4691729"  >windowed()</code> returns element ranges (<em id="collection-parts.md-a38f3df8" class=""  >windows</em>) starting from <em id="collection-parts.md-f4a39022" class=""  >each</em> collection element. All the windows are returned as elements of a single <code class="code " id="collection-parts.md-e2908bc1"  >List</code>.</p><div class="code-block" data-lang="kotlin" id="collection-parts.md-e32c40a5"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;)    \n    println(numbers.windowed(3))\n//sampleEnd\n}\n</div><p id="collection-parts.md-cd49c640" ><code class="code " id="collection-parts.md-85ff7d4d"  >windowed()</code> provides more flexibility with optional parameters:</p><ul class="list _ul" id="collection-parts.md-b75edc82"   ><li class="list__item" id="collection-parts.md-c8b51e9d" ><p><code class="code " id="collection-parts.md-fa19f754"  >step</code> defines a distance between first elements of two adjacent windows. By default the value is 1, so the result contains windows starting from all elements. If you increase the step to 2, you will receive only windows starting from odd elements: first, third, an so on.</p></li><li class="list__item" id="collection-parts.md-1a9c1f5f" ><p><code class="code " id="collection-parts.md-7efd6be6"  >partialWindows</code> includes windows of smaller sizes that start from the elements at the end of the collection. For example, if you request windows of three elements, you can\'t build them for the last two elements. Enabling <code class="code " id="collection-parts.md-ee6476c5"  >partialWindows</code> in this case includes two more lists of sizes 2 and 1.</p></li></ul><p id="collection-parts.md-458e9ffa" >Finally, you can apply a transformation to the returned ranges right away. To do this, provide the transformation as a lambda function when calling <code class="code " id="collection-parts.md-8aa5d558"  >windowed()</code>.</p><div class="code-block" data-lang="kotlin" id="collection-parts.md-e20ea076"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = (1..10).toList()\n    println(numbers.windowed(3, step = 2, partialWindows = true))\n    println(numbers.windowed(3) { it.sum() })\n//sampleEnd\n}\n</div><p id="collection-parts.md-ce6cbdb8" >To build two-element windows, there is a separate function - <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/zip-with-next.html" id="collection-parts.md-7c037319"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-parts.md-6273f63b"  >zipWithNext()</code></a>. It creates pairs of adjacent elements of the receiver collection. Note that <code class="code " id="collection-parts.md-b46307bd"  >zipWithNext()</code> doesn\'t break the collection into pairs; it creates a <code class="code " id="collection-parts.md-8ab07321"  >Pair</code> for <em id="collection-parts.md-b7c14745" class=""  >each</em> element except the last one, so its result on <code class="code " id="collection-parts.md-9b1f221d"  >[1, 2, 3, 4]</code> is <code class="code " id="collection-parts.md-547a8d0c"  >[[1, 2], [2, 3], [3, 4]]</code>, not <code class="code " id="collection-parts.md-3431c6ce"  >[[1, 2</code> ], <code class="code " id="collection-parts.md-5d0596d"  >[3, 4]]</code>. <code class="code " id="collection-parts.md-c5bb82f4"  >zipWithNext()</code> can be called with a transformation function as well; it should take two elements of the receiver collection as arguments.</p><div class="code-block" data-lang="kotlin" id="collection-parts.md-691746fa"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;)    \n    println(numbers.zipWithNext())\n    println(numbers.zipWithNext() { s1, s2 -&gt; s1.length &gt; s2.length})\n//sampleEnd\n}\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="collection-elements.md"  >Retrieve single elements</h1><p id="collection-elements.md-52f6ed36" >Kotlin collections provide a set of functions for retrieving single elements from collections. Functions described on this page apply to both lists and sets.</p><p id="collection-elements.md-c8a36995" >As the <a href="#collections-overview.md" id="collection-elements.md-5056a669"   >definition of list</a> says, a list is an ordered collection. Hence, every element of a list has its position that you can use for referring. In addition to functions described on this page, lists offer a wider set of ways to retrieve and search for elements by indices. For more details, see <a href="#list-operations.md" id="collection-elements.md-974b40d7"   >List-specific operations</a>.</p><p id="collection-elements.md-4d76db3e" >In turn, set is not an ordered collection by <a href="#collections-overview.md" id="collection-elements.md-6f2d02bb"   >definition</a>. However, the Kotlin <code class="code " id="collection-elements.md-37cc37e"  >Set</code> stores elements in certain orders. These can be the order of insertion (in <code class="code " id="collection-elements.md-bff7a76f"  >LinkedHashSet</code> ), natural sorting order (in <code class="code " id="collection-elements.md-576328b"  >SortedSet</code> ), or another order. The order of a set of elements can also be unknown. In such cases, the elements are still ordered somehow, so the functions that rely on the element positions still return their results. However, such results are unpredictable to the caller unless they know the specific implementation of <code class="code " id="collection-elements.md-99c1228f"  >Set</code> used.</p><section class="chapter"  ><h2 id="collection-elements.md-retrieve-by-position" data-toc="collection-elements#collection-elements.md-retrieve-by-position"  >Retrieve by position</h2><p id="collection-elements.md-66406e17" >For retrieving an element at a specific position, there is the function <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/element-at.html" id="collection-elements.md-80afbbfc"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-elements.md-235bd6d7"  >elementAt()</code></a>. Call it with the integer number as an argument, and you\'ll receive the collection element at the given position. The first element has the position <code class="code " id="collection-elements.md-11355979"  >0</code>, and the last one is <code class="code " id="collection-elements.md-58b1f214"  >(size - 1)</code>.</p><p id="collection-elements.md-da3c6f53" ><code class="code " id="collection-elements.md-d46b3759"  >elementAt()</code> is useful for collections that do not provide indexed access, or are not statically known to provide one. In case of <code class="code " id="collection-elements.md-bc9c83"  >List</code>, it\'s more idiomatic to use <a href="#list-operations.md-retrieve-elements-by-index" id="collection-elements.md-34d08d0d"   >indexed access operator</a> (<code class="code " id="collection-elements.md-3a55f854"  >get()</code> or <code class="code " id="collection-elements.md-8c577b78"  >[]</code> ).</p><div class="code-block" data-lang="kotlin" id="collection-elements.md-d5852806"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = linkedSetOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;)\n    println(numbers.elementAt(3))    \n\n    val numbersSortedSet = sortedSetOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    println(numbersSortedSet.elementAt(0)) // elements are stored in the ascending order\n//sampleEnd\n}\n</div><p id="collection-elements.md-5cda384a" >There are also useful aliases for retrieving the first and the last element of the collection: <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/first.html" id="collection-elements.md-3877199d"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-elements.md-e21bc530"  >first()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/last.html" id="collection-elements.md-d5a8bce1"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-elements.md-8363067a"  >last()</code></a>.</p><div class="code-block" data-lang="kotlin" id="collection-elements.md-ea0bfb15"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;)\n    println(numbers.first())    \n    println(numbers.last())    \n//sampleEnd\n}\n</div><p id="collection-elements.md-d196f78f" >To avoid exceptions when retrieving element with non-existing positions, use safe variations of <code class="code " id="collection-elements.md-bb0b9566"  >elementAt()</code>:</p><ul class="list _ul" id="collection-elements.md-3bb0e8ff"   ><li class="list__item" id="collection-elements.md-661f8a2d" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/element-at-or-null.html" id="collection-elements.md-6a5b8d4f"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-elements.md-548640d2"  >elementAtOrNull()</code></a> returns null when the specified position is out of the collection bounds.</p></li><li class="list__item" id="collection-elements.md-ff3234cd" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/element-at-or-else.html" id="collection-elements.md-8034a1bd"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-elements.md-fcea52f0"  >elementAtOrElse()</code></a> additionally takes a lambda function that maps an <code class="code " id="collection-elements.md-5ce0ea03"  >Int</code> argument to an instance of the collection element type. When called with an out-of-bounds position, the <code class="code " id="collection-elements.md-94ca61dd"  >elementAtOrElse()</code> returns the result of the lambda on the given value.</p></li></ul><div class="code-block" data-lang="kotlin" id="collection-elements.md-f9043a9d"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;)\n    println(numbers.elementAtOrNull(5))\n    println(numbers.elementAtOrElse(5) { index -&gt; &quot;The value for index $index is undefined&quot;})\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="collection-elements.md-retrieving-by-condition" data-toc="collection-elements#collection-elements.md-retrieving-by-condition"  >Retrieving by condition</h2><p id="collection-elements.md-2ff7aa35" >Functions <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/first.html" id="collection-elements.md-ffd55365"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-elements.md-50578969"  >first()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/last.html" id="collection-elements.md-98bb0dae"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-elements.md-7214b676"  >last()</code></a> also let you search a collection for elements matching a given predicate. When you call <code class="code " id="collection-elements.md-25140f1d"  >first()</code> with a predicate that tests a collection element, you\'ll receive the first element on which the predicate yields <code class="code " id="collection-elements.md-69988a82"  >true</code>. In turn, <code class="code " id="collection-elements.md-a431c4cb"  >last()</code> with a predicate returns the last element matching it.</p><div class="code-block" data-lang="kotlin" id="collection-elements.md-4557cd2f"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;, &quot;six&quot;)\n    println(numbers.first { it.length &gt; 3 })\n    println(numbers.last { it.startsWith(&quot;f&quot;) })\n//sampleEnd\n}\n</div><p id="collection-elements.md-e2007264" >If no elements match the predicate, both functions throw exceptions. To avoid them, use <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/first-or-null.html" id="collection-elements.md-95945e3f"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-elements.md-f0835a32"  >firstOrNull()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/last-or-null.html" id="collection-elements.md-e5a433c"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-elements.md-b6184736"  >lastOrNull()</code></a> instead: they return <code class="code " id="collection-elements.md-ab5023db"  >null</code> if no matching elements are found.</p><div class="code-block" data-lang="kotlin" id="collection-elements.md-1d4d00d1"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;, &quot;six&quot;)\n    println(numbers.firstOrNull { it.length &gt; 6 })\n//sampleEnd\n}\n</div><p id="collection-elements.md-a7e5f260" >Alternatively, you can use the aliases if their names suit your situation better:</p><ul class="list _ul" id="collection-elements.md-e9b2a305"   ><li class="list__item" id="collection-elements.md-35b5266c" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/find.html" id="collection-elements.md-9ab3a628"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-elements.md-2d1a116d"  >find()</code></a> instead of <code class="code " id="collection-elements.md-9afa9d5a"  >firstOrNull()</code></p></li><li class="list__item" id="collection-elements.md-cd35f773" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/find-last.html" id="collection-elements.md-1cdc6ef6"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-elements.md-34b32298"  >findLast()</code></a> instead of <code class="code " id="collection-elements.md-710c2bf1"  >lastOrNull()</code></p></li></ul><div class="code-block" data-lang="kotlin" id="collection-elements.md-ab8b272e"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3, 4)\n    println(numbers.find { it % 2 == 0 })\n    println(numbers.findLast { it % 2 == 0 })\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="collection-elements.md-random-element" data-toc="collection-elements#collection-elements.md-random-element"  >Random element</h2><p id="collection-elements.md-ffe8a30" >If you need to retrieve an arbitrary element of a collection, call the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/random.html" id="collection-elements.md-24a7a6e"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-elements.md-68540b4c"  >random()</code></a> function. You can call it without arguments or with a <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.random/-random/index.html" id="collection-elements.md-5d5f96c9"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-elements.md-1e50c2ed"  >Random</code></a> object as a source of the randomness.</p><div class="code-block" data-lang="kotlin" id="collection-elements.md-cc27bf40"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3, 4)\n    println(numbers.random())\n//sampleEnd\n}\n</div><p id="collection-elements.md-986f81aa" >On empty collections, <code class="code " id="collection-elements.md-83fc73ec"  >random()</code> throws an exception. To receive <code class="code " id="collection-elements.md-5c4dbcd8"  >null</code> instead, use <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/random-or-null.html" id="collection-elements.md-81b42183"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-elements.md-6b16a9e5"  >randomOrNull()</code></a></p></section><section class="chapter"  ><h2 id="collection-elements.md-check-element-existence" data-toc="collection-elements#collection-elements.md-check-element-existence"  >Check element existence</h2><p id="collection-elements.md-bcbdda1e" >To check the presence of an element in a collection, use the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/contains.html" id="collection-elements.md-126e2807"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-elements.md-d8f448a8"  >contains()</code></a> function. It returns <code class="code " id="collection-elements.md-7d252c80"  >true</code> if there is a collection element that <code class="code " id="collection-elements.md-44aae2f"  >equals()</code> the function argument. You can call <code class="code " id="collection-elements.md-9739a0c6"  >contains()</code> in the operator form with the <code class="code " id="collection-elements.md-5568c7b8"  >in</code> keyword.</p><p id="collection-elements.md-44abd7a3" >To check the presence of multiple instances together at once, call <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/contains-all.html" id="collection-elements.md-995a9eae"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-elements.md-3ca17794"  >containsAll()</code></a> with a collection of these instances as an argument.</p><div class="code-block" data-lang="kotlin" id="collection-elements.md-6bae7416"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;, &quot;six&quot;)\n    println(numbers.contains(&quot;four&quot;))\n    println(&quot;zero&quot; in numbers)\n    \n    println(numbers.containsAll(listOf(&quot;four&quot;, &quot;two&quot;)))\n    println(numbers.containsAll(listOf(&quot;one&quot;, &quot;zero&quot;)))\n//sampleEnd\n}\n</div><p id="collection-elements.md-4a3073c1" >Additionally, you can check if the collection contains any elements by calling <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/is-empty.html" id="collection-elements.md-b41376c3"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-elements.md-a856ccc"  >isEmpty()</code></a> or <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/is-not-empty.html" id="collection-elements.md-f84a8f7b"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-elements.md-71b4f447"  >isNotEmpty()</code></a>.</p><div class="code-block" data-lang="kotlin" id="collection-elements.md-fd7a3ea9"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;, &quot;six&quot;)\n    println(numbers.isEmpty())\n    println(numbers.isNotEmpty())\n    \n    val empty = emptyList&lt;String&gt;()\n    println(empty.isEmpty())\n    println(empty.isNotEmpty())\n//sampleEnd\n}\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="collection-ordering.md"  >Ordering</h1><p id="collection-ordering.md-bbff3b9c" >The order of elements is an important aspect of certain collection types. For example, two lists of the same elements are not equal if their elements are ordered differently.</p><p id="collection-ordering.md-2edac7ca" >In Kotlin, the orders of objects can be defined in several ways.</p><p id="collection-ordering.md-b6af3282" >First, there is <em id="collection-ordering.md-3e07f530" class=""  >natural</em> order. It is defined for inheritors of the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-comparable/index.html" id="collection-ordering.md-a7434435"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-ordering.md-5c3f000d"  >Comparable</code></a> interface. Natural order is used for sorting them when no other order is specified.</p><p id="collection-ordering.md-4c54ce43" >Most built-in types are comparable:</p><ul class="list _ul" id="collection-ordering.md-de8a9676"   ><li class="list__item" id="collection-ordering.md-638da673" ><p>Numeric types use the traditional numerical order: <code class="code " id="collection-ordering.md-9da65380"  >1</code> is greater than <code class="code " id="collection-ordering.md-f4356a52"  >0</code>; <code class="code " id="collection-ordering.md-a7f81012"  >-3.4f</code> is greater than <code class="code " id="collection-ordering.md-2ddc094f"  >-5f</code>, and so on.</p></li><li class="list__item" id="collection-ordering.md-d8da399" ><p><code class="code " id="collection-ordering.md-e047ac9c"  >Char</code> and <code class="code " id="collection-ordering.md-87424664"  >String</code> use the <a href="https://en.wikipedia.org/wiki/Lexicographical_order" id="collection-ordering.md-ffd22ad1"   data-external="true" rel="noopener noreferrer" >lexicographical order</a>: <code class="code " id="collection-ordering.md-c5f47d31"  >b</code> is greater than <code class="code " id="collection-ordering.md-e669dbad"  >a</code>; <code class="code " id="collection-ordering.md-632276ab"  >world</code> is greater than <code class="code " id="collection-ordering.md-f5570224"  >hello</code>.</p></li></ul><p id="collection-ordering.md-5d4ac2f8" >To define a natural order for a user-defined type, make the type an inheritor of <code class="code " id="collection-ordering.md-ec73d07f"  >Comparable</code>. This requires implementing the <code class="code " id="collection-ordering.md-f13be247"  >compareTo()</code> function. <code class="code " id="collection-ordering.md-1d05baa3"  >compareTo()</code> must take another object of the same type as an argument and return an integer value showing which object is greater:</p><ul class="list _ul" id="collection-ordering.md-603968c7"   ><li class="list__item" id="collection-ordering.md-9a07af1b" ><p>Positive values show that the receiver object is greater.</p></li><li class="list__item" id="collection-ordering.md-ffbab587" ><p>Negative values show that it\'s less than the argument.</p></li><li class="list__item" id="collection-ordering.md-ce36a9c4" ><p>Zero shows that the objects are equal.</p></li></ul><p id="collection-ordering.md-483a1305" >Below is a class for ordering versions that consist of the major and the minor part.</p><div class="code-block" data-lang="kotlin" id="collection-ordering.md-6a073e9"        data-runnable="true" data-min-compiler-version="1.3"  >class Version(val major: Int, val minor: Int): Comparable&lt;Version&gt; {\n    override fun compareTo(other: Version): Int {\n        if (this.major != other.major) {\n            return this.major - other.major\n        } else if (this.minor != other.minor) {\n            return this.minor - other.minor\n        } else return 0\n    }\n}\n\nfun main() {    \n    println(Version(1, 2) &gt; Version(1, 3))\n    println(Version(2, 0) &gt; Version(1, 5))\n}\n</div><p id="collection-ordering.md-88062b48" ><em id="collection-ordering.md-13f70c29" class=""  >Custom</em> orders let you sort instances of any type in a way you like. Particularly, you can define an order for non-comparable objects or define an order other than natural for a comparable type. To define a custom order for a type, create a <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-comparator/index.html" id="collection-ordering.md-51ffabd5"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-ordering.md-a7b29dfd"  >Comparator</code></a> for it. <code class="code " id="collection-ordering.md-e830fd6b"  >Comparator</code> contains the <code class="code " id="collection-ordering.md-90f52d4f"  >compare()</code> function: it takes two instances of a class and returns the integer result of the comparison between them. The result is interpreted in the same way as the result of a <code class="code " id="collection-ordering.md-ee6ec11c"  >compareTo()</code> as is described above.</p><div class="code-block" data-lang="kotlin" id="collection-ordering.md-b06d4bbd"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val lengthComparator = Comparator { str1: String, str2: String -&gt; str1.length - str2.length }\n    println(listOf(&quot;aaa&quot;, &quot;bb&quot;, &quot;c&quot;).sortedWith(lengthComparator))\n//sampleEnd\n}\n</div><p id="collection-ordering.md-6802490c" >Having the <code class="code " id="collection-ordering.md-c26977c7"  >lengthComparator</code>, you are able to arrange strings by their length instead of the default lexicographical order.</p><p id="collection-ordering.md-ed6567a9" >A shorter way to define a <code class="code " id="collection-ordering.md-be463676"  >Comparator</code> is the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.comparisons/compare-by.html" id="collection-ordering.md-53389165"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-ordering.md-8ba159d0"  >compareBy()</code></a> function from the standard library. <code class="code " id="collection-ordering.md-85de942e"  >compareBy()</code> takes a lambda function that produces a <code class="code " id="collection-ordering.md-738a7085"  >Comparable</code> value from an instance and defines the custom order as the natural order of the produced values.</p><p id="collection-ordering.md-9a205102" >With <code class="code " id="collection-ordering.md-89958cbb"  >compareBy()</code>, the length comparator from the example above looks like this:</p><div class="code-block" data-lang="kotlin" id="collection-ordering.md-ccf90f90"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart    \n    println(listOf(&quot;aaa&quot;, &quot;bb&quot;, &quot;c&quot;).sortedWith(compareBy { it.length }))\n//sampleEnd\n}\n</div><p id="collection-ordering.md-fc11ea2b" >The Kotlin collections package provides functions for sorting collections in natural, custom, and even random orders. On this page, we\'ll describe sorting functions that apply to <a href="#collections-overview.md-collection-types" id="collection-ordering.md-12bf6504"   >read-only</a> collections. These functions return their result as a new collection containing the elements of the original collection in the requested order. To learn about functions for sorting <a href="#collections-overview.md-collection-types" id="collection-ordering.md-88418fcc"   >mutable</a> collections in place, see the <a href="#list-operations.md-sort" id="collection-ordering.md-e3165ff8"   >List-specific operations</a>.</p><section class="chapter"  ><h2 id="collection-ordering.md-natural-order" data-toc="collection-ordering#collection-ordering.md-natural-order"  >Natural order</h2><p id="collection-ordering.md-bc0f6b48" >The basic functions <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sorted.html" id="collection-ordering.md-d20f962b"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-ordering.md-b227025f"  >sorted()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sorted-descending.html" id="collection-ordering.md-da8eb586"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-ordering.md-b6c171d0"  >sortedDescending()</code></a> return elements of a collection sorted into ascending and descending sequence according to their natural order. These functions apply to collections of <code class="code " id="collection-ordering.md-a5e7947a"  >Comparable</code> elements.</p><div class="code-block" data-lang="kotlin" id="collection-ordering.md-d590c54b"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n\n    println(&quot;Sorted ascending: ${numbers.sorted()}&quot;)\n    println(&quot;Sorted descending: ${numbers.sortedDescending()}&quot;)\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="collection-ordering.md-custom-orders" data-toc="collection-ordering#collection-ordering.md-custom-orders"  >Custom orders</h2><p id="collection-ordering.md-5abd98cb" >For sorting in custom orders or sorting non-comparable objects, there are the functions <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sorted-by.html" id="collection-ordering.md-114f32c5"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-ordering.md-96cd5f45"  >sortedBy()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sorted-by-descending.html" id="collection-ordering.md-d36e2973"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-ordering.md-45e8682"  >sortedByDescending()</code></a>. They take a selector function that maps collection elements to <code class="code " id="collection-ordering.md-bebf30f6"  >Comparable</code> values and sort the collection in natural order of that values.</p><div class="code-block" data-lang="kotlin" id="collection-ordering.md-19f12d22"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n\n    val sortedNumbers = numbers.sortedBy { it.length }\n    println(&quot;Sorted by length ascending: $sortedNumbers&quot;)\n    val sortedByLast = numbers.sortedByDescending { it.last() }\n    println(&quot;Sorted by the last letter descending: $sortedByLast&quot;)\n//sampleEnd\n}\n</div><p id="collection-ordering.md-dbaabf59" >To define a custom order for the collection sorting, you can provide your own <code class="code " id="collection-ordering.md-1195d0c4"  >Comparator</code>. To do this, call the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sorted-with.html" id="collection-ordering.md-30d2ec10"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-ordering.md-70763f86"  >sortedWith()</code></a> function passing in your <code class="code " id="collection-ordering.md-3a5eefa5"  >Comparator</code>. With this function, sorting strings by their length looks like this:</p><div class="code-block" data-lang="kotlin" id="collection-ordering.md-7c6427af"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    println(&quot;Sorted by length ascending: ${numbers.sortedWith(compareBy { it.length })}&quot;)\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="collection-ordering.md-reverse-order" data-toc="collection-ordering#collection-ordering.md-reverse-order"  >Reverse order</h2><p id="collection-ordering.md-2dbc86a7" >You can retrieve the collection in the reversed order using the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reversed.html" id="collection-ordering.md-3c79c43e"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-ordering.md-3280ca65"  >reversed()</code></a> function.</p><div class="code-block" data-lang="kotlin" id="collection-ordering.md-6274f075"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    println(numbers.reversed())\n//sampleEnd\n}\n</div><p id="collection-ordering.md-b6e03991" ><code class="code " id="collection-ordering.md-f5e7f662"  >reversed()</code> returns a new collection with the copies of the elements. So, if you change the original collection later, this won\'t affect the previously obtained results of <code class="code " id="collection-ordering.md-91352c8d"  >reversed()</code>.</p><p id="collection-ordering.md-bf7c820" >Another reversing function - <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/as-reversed.html" id="collection-ordering.md-7dbee987"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-ordering.md-8d5063a7"  >asReversed()</code></a></p><ul class="list _ul" id="collection-ordering.md-c6c20093"   ><li class="list__item" id="collection-ordering.md-432c7b16" ><p>returns a reversed view of the same collection instance, so it may be more lightweight and preferable than <code class="code " id="collection-ordering.md-a0aad1a5"  >reversed()</code> if the original list is not going to change.</p></li></ul><div class="code-block" data-lang="kotlin" id="collection-ordering.md-e517202f"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    val reversedNumbers = numbers.asReversed()\n    println(reversedNumbers)\n//sampleEnd\n}\n</div><p id="collection-ordering.md-c438d1ff" >If the original list is mutable, all its changes reflect in its reversed views and vice versa.</p><div class="code-block" data-lang="kotlin" id="collection-ordering.md-afbb28fb"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = mutableListOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    val reversedNumbers = numbers.asReversed()\n    println(reversedNumbers)\n    numbers.add(&quot;five&quot;)\n    println(reversedNumbers)\n//sampleEnd\n}\n</div><p id="collection-ordering.md-9449d1c2" >However, if the mutability of the list is unknown or the source is not a list at all, <code class="code " id="collection-ordering.md-91540129"  >reversed()</code> is more preferable since its result is a copy that won\'t change in the future.</p></section><section class="chapter"  ><h2 id="collection-ordering.md-random-order" data-toc="collection-ordering#collection-ordering.md-random-order"  >Random order</h2><p id="collection-ordering.md-cfbb59e2" >Finally, there is a function that returns a new <code class="code " id="collection-ordering.md-8350cbd9"  >List</code> containing the collection elements in a random order - <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/shuffled.html" id="collection-ordering.md-fe93c084"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-ordering.md-7006b592"  >shuffled()</code></a>. You can call it without arguments or with a <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.random/-random/index.html" id="collection-ordering.md-d45a05d0"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-ordering.md-288e0361"  >Random</code></a> object.</p><div class="code-block" data-lang="kotlin" id="collection-ordering.md-f80470f0"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n     val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n     println(numbers.shuffled())\n//sampleEnd\n}\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="collection-aggregate.md"  >Aggregate operations</h1><p id="collection-aggregate.md-918d049f" >Kotlin collections contain functions for commonly used <em id="collection-aggregate.md-3d22bd72" class=""  >aggregate operations</em> – operations that return a single value based on the collection content. Most of them are well known and work the same way as they do in other languages:</p><ul class="list _ul" id="collection-aggregate.md-e58b401e"   ><li class="list__item" id="collection-aggregate.md-6e630c91" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/min-or-null.html" id="collection-aggregate.md-f2a4be78"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-e006f5c"  >minOrNull()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/max-or-null.html" id="collection-aggregate.md-c8cc07e7"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-f40ed3d7"  >maxOrNull()</code></a> return the smallest and the largest element respectively. On empty collections, they return <code class="code " id="collection-aggregate.md-4a0aefe9"  >null</code>.</p></li><li class="list__item" id="collection-aggregate.md-fb6e4440" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/average.html" id="collection-aggregate.md-d3003164"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-1a569f82"  >average()</code></a> returns the average value of elements in the collection of numbers.</p></li><li class="list__item" id="collection-aggregate.md-26d40f2c" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sum.html" id="collection-aggregate.md-16132620"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-fbe6f17e"  >sum()</code></a> returns the sum of elements in the collection of numbers.</p></li><li class="list__item" id="collection-aggregate.md-ee81ff6f" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/count.html" id="collection-aggregate.md-878cdf95"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-731a187e"  >count()</code></a> returns the number of elements in a collection.</p></li></ul><div class="code-block" data-lang="kotlin" id="collection-aggregate.md-6c0f7cd9"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n    val numbers = listOf(6, 42, 10, 4)\n\n    println(&quot;Count: ${numbers.count()}&quot;)\n    println(&quot;Max: ${numbers.maxOrNull()}&quot;)\n    println(&quot;Min: ${numbers.minOrNull()}&quot;)\n    println(&quot;Average: ${numbers.average()}&quot;)\n    println(&quot;Sum: ${numbers.sum()}&quot;)\n}\n</div><p id="collection-aggregate.md-f66d0ffa" >There are also functions for retrieving the smallest and the largest elements by certain selector function or custom <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-comparator/index.html" id="collection-aggregate.md-7a956b49"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-6b9925bb"  >Comparator</code></a>:</p><ul class="list _ul" id="collection-aggregate.md-2bf6ae89"   ><li class="list__item" id="collection-aggregate.md-17a929a5" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/max-by-or-null.html" id="collection-aggregate.md-82ac0453"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-c8c8d4d9"  >maxByOrNull()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/min-by-or-null.html" id="collection-aggregate.md-fd20bce6"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-30c0c55a"  >minByOrNull()</code></a> take a selector function and return the element for which it returns the largest or the smallest value.</p></li><li class="list__item" id="collection-aggregate.md-22a84c29" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/max-with-or-null.html" id="collection-aggregate.md-ca0c78fc"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-ddf10bcf"  >maxWithOrNull()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/min-with-or-null.html" id="collection-aggregate.md-2604e198"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-5d0a78b4"  >minWithOrNull()</code></a> take a <code class="code " id="collection-aggregate.md-f81346c9"  >Comparator</code> object and return the largest or smallest element according to that <code class="code " id="collection-aggregate.md-c0d99eba"  >Comparator</code>.</p></li></ul><p id="collection-aggregate.md-a2d4a3b8" >These functions return <code class="code " id="collection-aggregate.md-246ffdc1"  >null</code> on empty collections. There are also alternatives for <code class="code " id="collection-aggregate.md-c967f724"  >maxByOrNull()</code> and <code class="code " id="collection-aggregate.md-f17d17f7"  >minByOrNull()</code>: <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/max-of.html" id="collection-aggregate.md-f8bd94fd"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-a3d89927"  >maxOf()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/min-of.html" id="collection-aggregate.md-cebee9bf"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-86e73799"  >minOf()</code></a>, which do the same but throw a <code class="code " id="collection-aggregate.md-37f81474"  >NoSuchElementException</code> on empty collections.</p><div class="code-block" data-lang="kotlin" id="collection-aggregate.md-f1f52135"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(5, 42, 10, 4)\n    val min3Remainder = numbers.minByOrNull { it % 3 }\n    println(min3Remainder)\n\n    val strings = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    val longestString = strings.maxWithOrNull(compareBy { it.length })\n    println(longestString)\n//sampleEnd\n}\n</div><p id="collection-aggregate.md-8df44f7c" >Besides regular <code class="code " id="collection-aggregate.md-ba056572"  >sum()</code>, there is an advanced summation function <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sum-of.html" id="collection-aggregate.md-c4f1908d"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-e2a9534b"  >sumOf()</code></a> that takes a selector function and returns the sum of its application to all collection elements. Selector can return different numeric types: <code class="code " id="collection-aggregate.md-c9a5e16f"  >Int</code>, <code class="code " id="collection-aggregate.md-5af210f7"  >Long</code>, <code class="code " id="collection-aggregate.md-d1292f43"  >Double</code>, <code class="code " id="collection-aggregate.md-8439d95e"  >UInt</code>, and <code class="code " id="collection-aggregate.md-5e9e183a"  >ULong</code> (also <code class="code " id="collection-aggregate.md-1279d254"  >BigInteger</code> and <code class="code " id="collection-aggregate.md-c382458c"  >BigDecimal</code> on the JVM).</p><div class="code-block" data-lang="kotlin" id="collection-aggregate.md-7ddb8935"        data-runnable="true" data-min-compiler-version="1.4"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(5, 42, 10, 4)\n    println(numbers.sumOf { it * 2 })\n    println(numbers.sumOf { it.toDouble() / 2 })\n//sampleEnd\n}\n</div><section class="chapter"  ><h2 id="collection-aggregate.md-fold-and-reduce" data-toc="collection-aggregate#collection-aggregate.md-fold-and-reduce"  >Fold and reduce</h2><p id="collection-aggregate.md-d30016cf" >For more specific cases, there are the functions <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce.html" id="collection-aggregate.md-4b9dd2bc"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-7f1b3103"  >reduce()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/fold.html" id="collection-aggregate.md-44dd1e46"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-f9a92e17"  >fold()</code></a> that apply the provided operation to the collection elements sequentially and return the accumulated result. The operation takes two arguments: the previously accumulated value and the collection element.</p><p id="collection-aggregate.md-e6a16da3" >The difference between the two functions is that <code class="code " id="collection-aggregate.md-ae692243"  >fold()</code> takes an initial value and uses it as the accumulated value on the first step, whereas the first step of <code class="code " id="collection-aggregate.md-13a6dcd7"  >reduce()</code> uses the first and the second elements as operation arguments on the first step.</p><div class="code-block" data-lang="kotlin" id="collection-aggregate.md-a597ae4b"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(5, 2, 10, 4)\n\n    val sum = numbers.reduce { sum, element -&gt; sum + element }\n    println(sum)\n    val sumDoubled = numbers.fold(0) { sum, element -&gt; sum + element * 2 }\n    println(sumDoubled)\n\n    //val sumDoubledReduce = numbers.reduce { sum, element -&gt; sum + element * 2 } //incorrect: the first element isn\'t doubled in the result\n    //println(sumDoubledReduce)\n//sampleEnd\n}\n</div><p id="collection-aggregate.md-ebc32663" >The example above shows the difference: <code class="code " id="collection-aggregate.md-d2e53efa"  >fold()</code> is used for calculating the sum of doubled elements. If you pass the same function to <code class="code " id="collection-aggregate.md-868c44c9"  >reduce()</code>, it will return another result because it uses the list\'s first and second elements as arguments on the first step, so the first element won\'t be doubled.</p><p id="collection-aggregate.md-45bcb0dd" >To apply a function to elements in the reverse order, use functions <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce-right.html" id="collection-aggregate.md-94a1fac2"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-44433432"  >reduceRight()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/fold-right.html" id="collection-aggregate.md-afdc78c9"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-f9e8d34b"  >foldRight()</code></a>. They work in a way similar to <code class="code " id="collection-aggregate.md-c01621a4"  >fold()</code> and <code class="code " id="collection-aggregate.md-182f6668"  >reduce()</code> but start from the last element and then continue to previous. Note that when folding or reducing right, the operation arguments change their order: first goes the element, and then the accumulated value.</p><div class="code-block" data-lang="kotlin" id="collection-aggregate.md-6838a060"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(5, 2, 10, 4)\n    val sumDoubledRight = numbers.foldRight(0) { element, sum -&gt; sum + element * 2 }\n    println(sumDoubledRight)\n//sampleEnd\n}\n</div><p id="collection-aggregate.md-aab48612" >You can also apply operations that take element indices as parameters. For this purpose, use functions <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce-indexed.html" id="collection-aggregate.md-6a2a67af"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-b4a81457"  >reduceIndexed()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/fold-indexed.html" id="collection-aggregate.md-9653f47d"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-61c148ba"  >foldIndexed()</code></a> passing element index as the first argument of the operation.</p><p id="collection-aggregate.md-8a95b91f" >Finally, there are functions that apply such operations to collection elements from right to left - <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce-right-indexed.html" id="collection-aggregate.md-b95ec1e7"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-3350763a"  >reduceRightIndexed()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/fold-right-indexed.html" id="collection-aggregate.md-d75af882"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-ff64a2b4"  >foldRightIndexed()</code></a>.</p><div class="code-block" data-lang="kotlin" id="collection-aggregate.md-eecbe69a"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(5, 2, 10, 4)\n    val sumEven = numbers.foldIndexed(0) { idx, sum, element -&gt; if (idx % 2 == 0) sum + element else sum }\n    println(sumEven)\n\n    val sumEvenRight = numbers.foldRightIndexed(0) { idx, element, sum -&gt; if (idx % 2 == 0) sum + element else sum }\n    println(sumEvenRight)\n//sampleEnd\n}\n</div><p id="collection-aggregate.md-96276df4" >All reduce operations throw an exception on empty collections. To receive <code class="code " id="collection-aggregate.md-adb6b67d"  >null</code> instead, use their <code class="code " id="collection-aggregate.md-a537d7d9"  >*OrNull()</code> counterparts:</p><ul class="list _ul" id="collection-aggregate.md-c64a8a42"   ><li class="list__item" id="collection-aggregate.md-d8816d3b" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce-or-null.html" id="collection-aggregate.md-87185cd6"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-63812122"  >reduceOrNull()</code></a></li><li class="list__item" id="collection-aggregate.md-f42e11f9" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce-right-or-null.html" id="collection-aggregate.md-8213d676"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-5e3d7576"  >reduceRightOrNull()</code></a></li><li class="list__item" id="collection-aggregate.md-9071a73f" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce-indexed-or-null.html" id="collection-aggregate.md-c37050ba"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-7d0eb17e"  >reduceIndexedOrNull()</code></a></li><li class="list__item" id="collection-aggregate.md-2e65dfe4" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reduce-right-indexed-or-null.html" id="collection-aggregate.md-960124b"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-6aba0164"  >reduceRightIndexedOrNull()</code></a></li></ul><p id="collection-aggregate.md-58c05baa" >For cases where you want to save intermediate accumulator values, there are functions <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/running-fold.html" id="collection-aggregate.md-77a1c98d"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-820fb1cf"  >runningFold()</code></a> (or its synonym <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/scan.html" id="collection-aggregate.md-38f27b61"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-e4505865"  >scan()</code></a>) and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/running-reduce.html" id="collection-aggregate.md-de2fdf7e"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-ec1b42e6"  >runningReduce()</code></a>.</p><div class="code-block" data-lang="kotlin" id="collection-aggregate.md-8d7d9c1a"        data-runnable="true" data-min-compiler-version="1.4"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(0, 1, 2, 3, 4, 5)\n    val runningReduceSum = numbers.runningReduce { sum, item -&gt; sum + item }\n    val runningFoldSum = numbers.runningFold(10) { sum, item -&gt; sum + item }\n//sampleEnd\n    val transform = { index: Int, element: Int -&gt; &quot;N = ${index + 1}: $element&quot; }\n    println(runningReduceSum.mapIndexed(transform).joinToString(&quot;\\n&quot;, &quot;Sum of first N elements with runningReduce:\\n&quot;))\n    println(runningFoldSum.mapIndexed(transform).joinToString(&quot;\\n&quot;, &quot;Sum of first N elements with runningFold:\\n&quot;))\n}\n</div><p id="collection-aggregate.md-33f1a681" >If you need an index in the operation parameter, use <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/running-fold-indexed.html" id="collection-aggregate.md-70861c0c"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-c731b39a"  >runningFoldIndexed()</code></a> or <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/running-reduce-indexed.html" id="collection-aggregate.md-827498c6"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-aggregate.md-289122c2"  >runningReduceIndexed()</code></a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="collection-write.md"  >Collection write operations</h1><p id="collection-write.md-e1b69278" ><a href="#collections-overview.md-collection-types" id="collection-write.md-8f2e28b4"   >Mutable collections</a> support operations for changing the collection contents, for example, adding or removing elements. On this page, we\'ll describe write operations available for all implementations of <code class="code " id="collection-write.md-3e4df1e4"  >MutableCollection</code>. For more specific operations available for <code class="code " id="collection-write.md-9d2595de"  >List</code> and <code class="code " id="collection-write.md-234ead46"  >Map</code>, see <a href="#list-operations.md" id="collection-write.md-1e042bfe"   >List-specific Operations</a> and <a href="#map-operations.md" id="collection-write.md-804e12c2"   >Map Specific Operations</a> respectively.</p><section class="chapter"  ><h2 id="collection-write.md-adding-elements" data-toc="collection-write#collection-write.md-adding-elements"  >Adding elements</h2><p id="collection-write.md-d3581ee0" >To add a single element to a list or a set, use the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-list/add.html" id="collection-write.md-1d93d865"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-write.md-f9625ccd"  >add()</code></a> function. The specified object is appended to the end of the collection.</p><div class="code-block" data-lang="kotlin" id="collection-write.md-7de8d425"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 3, 4)\n    numbers.add(5)\n    println(numbers)\n//sampleEnd\n}\n</div><p id="collection-write.md-4b99393f" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/add-all.html" id="collection-write.md-46a5e9a4"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-write.md-ff370902"  >addAll()</code></a> adds every element of the argument object to a list or a set. The argument can be an <code class="code " id="collection-write.md-ac0ad660"  >Iterable</code>, a <code class="code " id="collection-write.md-cde4707e"  >Sequence</code>, or an <code class="code " id="collection-write.md-4e056e97"  >Array</code>. The types of the receiver and the argument may be different, for example, you can add all items from a <code class="code " id="collection-write.md-96c123b7"  >Set</code> to a <code class="code " id="collection-write.md-3aecb661"  >List</code>.</p><p id="collection-write.md-61eb8ad8" >When called on lists, <code class="code " id="collection-write.md-c680ece6"  >addAll()</code> adds new elements in the same order as they go in the argument. You can also call <code class="code " id="collection-write.md-72a96910"  >addAll()</code> specifying an element position as the first argument. The first element of the argument collection will be inserted at this position. Other elements of the argument collection will follow it, shifting the receiver elements to the end.</p><div class="code-block" data-lang="kotlin" id="collection-write.md-45b0c6db"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 5, 6)\n    numbers.addAll(arrayOf(7, 8))\n    println(numbers)\n    numbers.addAll(2, setOf(3, 4))\n    println(numbers)\n//sampleEnd\n}\n</div><p id="collection-write.md-8f846aaa" >You can also add elements using the in-place version of the <a href="#collection-plus-minus.md" id="collection-write.md-3c5f6802"   ><code class="code " id="collection-write.md-191c4115"  >plus</code> operator</a>- <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/plus-assign.html" id="collection-write.md-7f642d38"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-write.md-c88c5369"  >plusAssign</code></a> (<code class="code " id="collection-write.md-2d3cc8fc"  >+=</code>) When applied to a mutable collection, <code class="code " id="collection-write.md-2e089e7f"  >+=</code> appends the second operand (an element or another collection) to the end of the collection.</p><div class="code-block" data-lang="kotlin" id="collection-write.md-26d9cd4b"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(&quot;one&quot;, &quot;two&quot;)\n    numbers += &quot;three&quot;\n    println(numbers)\n    numbers += listOf(&quot;four&quot;, &quot;five&quot;)    \n    println(numbers)\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="collection-write.md-removing-elements" data-toc="collection-write#collection-write.md-removing-elements"  >Removing elements</h2><p id="collection-write.md-b6ed7bf8" >To remove an element from a mutable collection, use the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/remove.html" id="collection-write.md-31f05529"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-write.md-f36d4015"  >remove()</code></a> function. <code class="code " id="collection-write.md-988078d5"  >remove()</code> accepts the element value and removes one occurrence of this value.</p><div class="code-block" data-lang="kotlin" id="collection-write.md-602c7568"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 3, 4, 3)\n    numbers.remove(3)                    // removes the first `3`\n    println(numbers)\n    numbers.remove(5)                    // removes nothing\n    println(numbers)\n//sampleEnd\n}\n</div><p id="collection-write.md-59affcf8" >For removing multiple elements at once, there are the following functions :</p><ul class="list _ul" id="collection-write.md-9ea65d72"   ><li class="list__item" id="collection-write.md-39ec6a51" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/remove-all.html" id="collection-write.md-514c70b2"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-write.md-a6fa7817"  >removeAll()</code></a> removes all elements that are present in the argument collection. Alternatively, you can call it with a predicate as an argument; in this case the function removes all elements for which the predicate yields <code class="code " id="collection-write.md-26bf983f"  >true</code>.</p></li><li class="list__item" id="collection-write.md-cf9397d" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/retain-all.html" id="collection-write.md-9e5f4c14"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-write.md-22630cb7"  >retainAll()</code></a> is the opposite of <code class="code " id="collection-write.md-c9cff80c"  >removeAll()</code>: it removes all elements except the ones from the argument collection. When used with a predicate, it leaves only elements that match it.</p></li><li class="list__item" id="collection-write.md-193d650a" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-list/clear.html" id="collection-write.md-8e51481c"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-write.md-21035073"  >clear()</code></a> removes all elements from a list and leaves it empty.</p></li></ul><div class="code-block" data-lang="kotlin" id="collection-write.md-af204334"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 3, 4)\n    println(numbers)\n    numbers.retainAll { it &gt;= 3 }\n    println(numbers)\n    numbers.clear()\n    println(numbers)\n\n    val numbersSet = mutableSetOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    numbersSet.removeAll(setOf(&quot;one&quot;, &quot;two&quot;))\n    println(numbersSet)\n//sampleEnd\n}\n</div><p id="collection-write.md-e5e5ec67" >Another way to remove elements from a collection is with the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/minus-assign.html" id="collection-write.md-43d2d115"   data-external="true" rel="noopener noreferrer" ><code class="code " id="collection-write.md-d19b2e2b"  >minusAssign</code></a> (<code class="code " id="collection-write.md-5ea0aea8"  >-=</code>) operator – the in-place version of <a href="#collection-plus-minus.md" id="collection-write.md-cab6b34"   ><code class="code " id="collection-write.md-b058965e"  >minus</code></a>. The second argument can be a single instance of the element type or another collection. With a single element on the right-hand side, <code class="code " id="collection-write.md-2e058f8c"  >-=</code> removes the <em id="collection-write.md-d8884b69" class=""  >first</em> occurrence of it. In turn, if it\'s a collection, <em id="collection-write.md-2a3e7dc1" class=""  >all</em> occurrences of its elements are removed. For example, if a list contains duplicate elements, they are removed at once. The second operand can contain elements that are not present in the collection. Such elements don\'t affect the operation execution.</p><div class="code-block" data-lang="kotlin" id="collection-write.md-e9e7f176"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;three&quot;, &quot;four&quot;)\n    numbers -= &quot;three&quot;\n    println(numbers)\n    numbers -= listOf(&quot;four&quot;, &quot;five&quot;)    \n    //numbers -= listOf(&quot;four&quot;)    // does the same as above\n    println(numbers)    \n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="collection-write.md-updating-elements" data-toc="collection-write#collection-write.md-updating-elements"  >Updating elements</h2><p id="collection-write.md-2fbcb926" >Lists and maps also provide operations for updating elements. They are described in <a href="#list-operations.md" id="collection-write.md-c4ed4577"   >List-specific Operations</a> and <a href="#map-operations.md" id="collection-write.md-ba84fef"   >Map Specific Operations</a>. For sets, updating doesn\'t make sense since it\'s actually removing an element and adding another one.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="list-operations.md"  >List-specific operations</h1><p id="list-operations.md-cb9d63b4" ><a href="#collections-overview.md-list" id="list-operations.md-511f3c47"   ><code class="code " id="list-operations.md-bb304ce9"  >List</code></a> is the most popular type of built-in collection in Kotlin. Index access to the elements of lists provides a powerful set of operations for lists.</p><section class="chapter"  ><h2 id="list-operations.md-retrieve-elements-by-index" data-toc="list-operations#list-operations.md-retrieve-elements-by-index"  >Retrieve elements by index</h2><p id="list-operations.md-e2c221c0" >Lists support all common operations for element retrieval: <code class="code " id="list-operations.md-a25c0878"  >elementAt()</code>, <code class="code " id="list-operations.md-796ed924"  >first()</code>, <code class="code " id="list-operations.md-6be629f7"  >last()</code>, and others listed in <a href="#collection-elements.md" id="list-operations.md-751db1d0"   >Retrieve single elements</a>. What is specific for lists is index access to the elements, so the simplest way to read an element is retrieving it by index. That is done with the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/get.html" id="list-operations.md-44ac893a"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-3a85c240"  >get()</code></a> function with the index passed in the argument or the shorthand <code class="code " id="list-operations.md-58711d44"  >[index]</code> syntax.</p><p id="list-operations.md-10a361e0" >If the list size is less than the specified index, an exception is thrown. There are two other functions that help you avoid such exceptions:</p><ul class="list _ul" id="list-operations.md-c126cac8"   ><li class="list__item" id="list-operations.md-31d4c662" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/get-or-else.html" id="list-operations.md-808584a7"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-bbb18add"  >getOrElse()</code></a> lets you provide the function for calculating the default value to return if the index isn\'t present in the collection.</p></li><li class="list__item" id="list-operations.md-4a6e3cbf" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/get-or-null.html" id="list-operations.md-fce7764b"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-88286e8b"  >getOrNull()</code></a> returns <code class="code " id="list-operations.md-60da07b0"  >null</code> as the default value.</p></li></ul><div class="code-block" data-lang="kotlin" id="list-operations.md-4db7b884"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3, 4)\n    println(numbers.get(0))\n    println(numbers[0])\n    //numbers.get(5)                         // exception!\n    println(numbers.getOrNull(5))             // null\n    println(numbers.getOrElse(5, {it}))        // 5\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="list-operations.md-retrieve-list-parts" data-toc="list-operations#list-operations.md-retrieve-list-parts"  >Retrieve list parts</h2><p id="list-operations.md-7b858ee2" >In addition to common operations for <a href="#collection-parts.md" id="list-operations.md-cfd78e36"   >Retrieving Collection Parts</a>, lists provide the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/sub-list.html" id="list-operations.md-8ff0769e"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-e0232597"  >subList()</code></a> function that returns a view of the specified elements range as a list. Thus, if an element of the original collection changes, it also changes in the previously created sublists and vice versa.</p><div class="code-block" data-lang="kotlin" id="list-operations.md-8917fd43"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = (0..13).toList()\n    println(numbers.subList(3, 6))\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="list-operations.md-find-element-positions" data-toc="list-operations#list-operations.md-find-element-positions"  >Find element positions</h2><section class="chapter"  ><h3 id="list-operations.md-linear-search" data-toc="list-operations#list-operations.md-linear-search"  >Linear search</h3><p id="list-operations.md-1b77bbac" >In any lists, you can find the position of an element using the functions <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/index-of.html" id="list-operations.md-1263cf2a"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-49888c1b"  >indexOf()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/last-index-of.html" id="list-operations.md-a18ff653"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-736c51ec"  >lastIndexOf()</code></a>. They return the first and the last position of an element equal to the given argument in the list. If there are no such elements, both functions return <code class="code " id="list-operations.md-2f6532e8"  >-1</code>.</p><div class="code-block" data-lang="kotlin" id="list-operations.md-485371b0"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = listOf(1, 2, 3, 4, 2, 5)\n    println(numbers.indexOf(2))\n    println(numbers.lastIndexOf(2))\n//sampleEnd\n}\n</div><p id="list-operations.md-8f5e5953" >There is also a pair of functions that take a predicate and search for elements matching it:</p><ul class="list _ul" id="list-operations.md-61ce51d5"   ><li class="list__item" id="list-operations.md-ad8d6dd6" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/index-of-first.html" id="list-operations.md-fb162342"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-5bace0a8"  >indexOfFirst()</code></a> returns the <em id="list-operations.md-2279717b" class=""  >index of the first</em> element matching the predicate or <code class="code " id="list-operations.md-d96a20e"  >-1</code> if there are no such elements.</p></li><li class="list__item" id="list-operations.md-eda090ac" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/index-of-last.html" id="list-operations.md-5dd00899"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-52672a43"  >indexOfLast()</code></a> returns the <em id="list-operations.md-8ab60130" class=""  >index of the last</em> element matching the predicate or <code class="code " id="list-operations.md-be70fd07"  >-1</code> if there are no such elements.</p></li></ul><div class="code-block" data-lang="kotlin" id="list-operations.md-bb28df93"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 3, 4)\n    println(numbers.indexOfFirst { it &gt; 2})\n    println(numbers.indexOfLast { it % 2 == 1})\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h3 id="list-operations.md-binary-search-in-sorted-lists" data-toc="list-operations#list-operations.md-binary-search-in-sorted-lists"  >Binary search in sorted lists</h3><p id="list-operations.md-9ae973ca" >There is one more way to search elements in lists – <a href="https://en.wikipedia.org/wiki/Binary_search_algorithm" id="list-operations.md-c8b63773"   data-external="true" rel="noopener noreferrer" >binary search</a>. It works significantly faster than other built-in search functions but <em id="list-operations.md-a978e2c" class=""  >requires the list to be <a href="#collection-ordering.md" id="list-operations.md-fa9b95d"   >sorted</a></em> in ascending order according to a certain ordering: natural or another one provided in the function parameter. Otherwise, the result is undefined.</p><p id="list-operations.md-f71bc905" >To search an element in a sorted list, call the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/binary-search.html" id="list-operations.md-e4e4f3fd"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-90c4d076"  >binarySearch()</code></a> function passing the value as an argument. If such an element exists, the function returns its index; otherwise, it returns <code class="code " id="list-operations.md-d616618f"  >(-insertionPoint - 1)</code> where <code class="code " id="list-operations.md-df7cdba9"  >insertionPoint</code> is the index where this element should be inserted so that the list remains sorted. If there is more than one element with the given value, the search can return any of their indices.</p><p id="list-operations.md-35e02275" >You can also specify an index range to search in: in this case, the function searches only between two provided indices.</p><div class="code-block" data-lang="kotlin" id="list-operations.md-a9d632cc"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    numbers.sort()\n    println(numbers)\n    println(numbers.binarySearch(&quot;two&quot;))  // 3\n    println(numbers.binarySearch(&quot;z&quot;)) // -5\n    println(numbers.binarySearch(&quot;two&quot;, 0, 2))  // -3\n//sampleEnd\n}\n</div><section class="chapter"  ><h4 id="list-operations.md-comparator-binary-search" data-toc="list-operations#list-operations.md-comparator-binary-search"  >Comparator binary search</h4><p id="list-operations.md-bef08144" >When list elements aren\'t <code class="code " id="list-operations.md-89e599cd"  >Comparable</code>, you should provide a <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-comparator.html" id="list-operations.md-e204a9d5"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-98dfbedd"  >Comparator</code></a> to use in the binary search. The list must be sorted in ascending order according to this <code class="code " id="list-operations.md-56d82c0e"  >Comparator</code>. Let\'s have a look at an example:</p><div class="code-block" data-lang="kotlin" id="list-operations.md-83869cc"        data-runnable="true" data-min-compiler-version="1.3"  >\ndata class Product(val name: String, val price: Double)\n\nfun main() {\n//sampleStart\n    val productList = listOf(\n        Product(&quot;WebStorm&quot;, 49.0),\n        Product(&quot;AppCode&quot;, 99.0),\n        Product(&quot;DotTrace&quot;, 129.0),\n        Product(&quot;ReSharper&quot;, 149.0))\n\n    println(productList.binarySearch(Product(&quot;AppCode&quot;, 99.0), compareBy&lt;Product&gt; { it.price }.thenBy { it.name }))\n//sampleEnd\n}\n</div><p id="list-operations.md-4e09c484" >Here\'s a list of <code class="code " id="list-operations.md-bee291ad"  >Product</code> instances that aren\'t <code class="code " id="list-operations.md-8d33c82a"  >Comparable</code> and a <code class="code " id="list-operations.md-a06dc070"  >Comparator</code> that defines the order: product <code class="code " id="list-operations.md-8a7145a3"  >p1</code> precedes product <code class="code " id="list-operations.md-d353d851"  >p2</code> if <code class="code " id="list-operations.md-971c5f4"  >p1</code> \'s price is less than <code class="code " id="list-operations.md-db51754c"  >p2</code> \'s price. So, having a list sorted ascending according to this order, we use <code class="code " id="list-operations.md-38265fa6"  >binarySearch()</code> to find the index of the specified <code class="code " id="list-operations.md-4a9054f6"  >Product</code>.</p><p id="list-operations.md-ab69da9c" >Custom comparators are also handy when a list uses an order different from natural one, for example, a case-insensitive order for <code class="code " id="list-operations.md-be967968"  >String</code> elements.</p><div class="code-block" data-lang="kotlin" id="list-operations.md-9029c027"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val colors = listOf(&quot;Blue&quot;, &quot;green&quot;, &quot;ORANGE&quot;, &quot;Red&quot;, &quot;yellow&quot;)\n    println(colors.binarySearch(&quot;RED&quot;, String.CASE_INSENSITIVE_ORDER)) // 3\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h4 id="list-operations.md-comparison-binary-search" data-toc="list-operations#list-operations.md-comparison-binary-search"  >Comparison binary search</h4><p id="list-operations.md-ba94b027" >Binary search with <em id="list-operations.md-e98ab21a" class=""  >comparison</em> function lets you find elements without providing explicit search values. Instead, it takes a comparison function mapping elements to <code class="code " id="list-operations.md-991cd423"  >Int</code> values and searches for the element where the function returns zero. The list must be sorted in the ascending order according to the provided function; in other words, the return values of comparison must grow from one list element to the next one.</p><div class="code-block" data-lang="kotlin" id="list-operations.md-18c314f6"        data-runnable="true" data-min-compiler-version="1.3"  >\nimport kotlin.math.sign\n//sampleStart\ndata class Product(val name: String, val price: Double)\n\nfun priceComparison(product: Product, price: Double) = sign(product.price - price).toInt()\n\nfun main() {\n    val productList = listOf(\n        Product(&quot;WebStorm&quot;, 49.0),\n        Product(&quot;AppCode&quot;, 99.0),\n        Product(&quot;DotTrace&quot;, 129.0),\n        Product(&quot;ReSharper&quot;, 149.0))\n\n    println(productList.binarySearch { priceComparison(it, 99.0) })\n}\n//sampleEnd\n</div><p id="list-operations.md-85131a4e" >Both comparator and comparison binary search can be performed for list ranges as well.</p></section></section></section><section class="chapter"  ><h2 id="list-operations.md-list-write-operations" data-toc="list-operations#list-operations.md-list-write-operations"  >List write operations</h2><p id="list-operations.md-5de9c140" >In addition to the collection modification operations described in <a href="#collection-write.md" id="list-operations.md-8dc4c5f"   >Collection write operations</a>, <a href="#collections-overview.md-collection-types" id="list-operations.md-ffa00a55"   >mutable</a> lists support specific write operations. Such operations use the index to access elements to broaden the list modification capabilities.</p><section class="chapter"  ><h3 id="list-operations.md-add" data-toc="list-operations#list-operations.md-add"  >Add</h3><p id="list-operations.md-399d4e74" >To add elements to a specific position in a list, use <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-list/add.html" id="list-operations.md-4883017b"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-e6ae79cc"  >add()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/add-all.html" id="list-operations.md-c2c253b3"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-b43320"  >addAll()</code></a> providing the position for element insertion as an additional argument. All elements that come after the position shift to the right.</p><div class="code-block" data-lang="kotlin" id="list-operations.md-904fdf64"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(&quot;one&quot;, &quot;five&quot;, &quot;six&quot;)\n    numbers.add(1, &quot;two&quot;)\n    numbers.addAll(2, listOf(&quot;three&quot;, &quot;four&quot;))\n    println(numbers)\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h3 id="list-operations.md-update" data-toc="list-operations#list-operations.md-update"  >Update</h3><p id="list-operations.md-6d4e2ae7" >Lists also offer a function to replace an element at a given position - <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-list/set.html" id="list-operations.md-17cb4277"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-894f1872"  >set()</code></a> and its operator form <code class="code " id="list-operations.md-2b1863ac"  >[]</code>. <code class="code " id="list-operations.md-fb93874c"  >set()</code> doesn\'t change the indexes of other elements.</p><div class="code-block" data-lang="kotlin" id="list-operations.md-19b6c140"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(&quot;one&quot;, &quot;five&quot;, &quot;three&quot;)\n    numbers[1] =  &quot;two&quot;\n    println(numbers)\n//sampleEnd\n}\n</div><p id="list-operations.md-2dadd4e7" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/fill.html" id="list-operations.md-353f7e67"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-5dc5ffe1"  >fill()</code></a> simply replaces all the collection elements with the specified value.</p><div class="code-block" data-lang="kotlin" id="list-operations.md-8a9b8b36"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 3, 4)\n    numbers.fill(3)\n    println(numbers)\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h3 id="list-operations.md-remove" data-toc="list-operations#list-operations.md-remove"  >Remove</h3><p id="list-operations.md-e8ca3f5d" >To remove an element at a specific position from a list, use the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-list/remove-at.html" id="list-operations.md-ca250ede"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-4472d04d"  >removeAt()</code></a> function providing the position as an argument. All indices of elements that come after the element being removed will decrease by one.</p><div class="code-block" data-lang="kotlin" id="list-operations.md-143e8271"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(1, 2, 3, 4, 3)    \n    numbers.removeAt(1)\n    println(numbers)\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h3 id="list-operations.md-sort" data-toc="list-operations#list-operations.md-sort"  >Sort</h3><p id="list-operations.md-90e1cfa0" >In <a href="#collection-ordering.md" id="list-operations.md-f7743a8f"   >Collection Ordering</a>, we describe operations that retrieve collection elements in specific orders. For mutable lists, the standard library offers similar extension functions that perform the same ordering operations in place. When you apply such an operation to a list instance, it changes the order of elements in that exact instance.</p><p id="list-operations.md-eea5a3a9" >The in-place sorting functions have similar names to the functions that apply to read-only lists, but without the <code class="code " id="list-operations.md-941a889b"  >ed/d</code> suffix:</p><ul class="list _ul" id="list-operations.md-32a03444"   ><li class="list__item" id="list-operations.md-c851b076" ><p><code class="code " id="list-operations.md-77ba5078"  >sort*</code> instead of <code class="code " id="list-operations.md-897abdd3"  >sorted*</code> in the names of all sorting functions: <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sort.html" id="list-operations.md-38fcf1b4"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-5a145c92"  >sort()</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sort-descending.html" id="list-operations.md-90f9dfd4"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-edbf49d4"  >sortDescending()</code></a>, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/sort-by.html" id="list-operations.md-f46b5e8b"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-fdd74fa2"  >sortBy()</code></a>, and so on.</p></li><li class="list__item" id="list-operations.md-83a453ea" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/shuffle.html" id="list-operations.md-65c31356"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-ce1d9122"  >shuffle()</code></a> instead of <code class="code " id="list-operations.md-89dbdf2f"  >shuffled()</code>.</p></li><li class="list__item" id="list-operations.md-fc2be1a8" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/reverse.html" id="list-operations.md-49db09b4"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-27101269"  >reverse()</code></a> instead of <code class="code " id="list-operations.md-879f41cf"  >reversed()</code>.</p></li></ul><p id="list-operations.md-1a7d91b4" ><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/as-reversed.html" id="list-operations.md-ce4de4ce"   data-external="true" rel="noopener noreferrer" ><code class="code " id="list-operations.md-c79d69fa"  >asReversed()</code></a> called on a mutable list returns another mutable list which is a reversed view of the original list. Changes in that view are reflected in the original list. The following example shows sorting functions for mutable lists:</p><div class="code-block" data-lang="kotlin" id="list-operations.md-bff72ba7"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = mutableListOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n\n    numbers.sort()\n    println(&quot;Sort into ascending: $numbers&quot;)\n    numbers.sortDescending()\n    println(&quot;Sort into descending: $numbers&quot;)\n\n    numbers.sortBy { it.length }\n    println(&quot;Sort into ascending by length: $numbers&quot;)\n    numbers.sortByDescending { it.last() }\n    println(&quot;Sort into descending by the last letter: $numbers&quot;)\n    \n    numbers.sortWith(compareBy&lt;String&gt; { it.length }.thenBy { it })\n    println(&quot;Sort by Comparator: $numbers&quot;)\n\n    numbers.shuffle()\n    println(&quot;Shuffle: $numbers&quot;)\n\n    numbers.reverse()\n    println(&quot;Reverse: $numbers&quot;)\n//sampleEnd\n}\n</div></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="set-operations.md"  >Set-specific operations</h1><p id="set-operations.md-36e3071" >The Kotlin collections package contains extension functions for popular operations on sets: finding intersections, merging, or subtracting collections from each other.</p><p id="set-operations.md-ea0ca4c3" >To merge two collections into one, use the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/union.html" id="set-operations.md-16f04580"   data-external="true" rel="noopener noreferrer" ><code class="code " id="set-operations.md-907e7c9f"  >union()</code></a> function. It can be used in the infix form <code class="code " id="set-operations.md-a96f1dfb"  >a union b</code>. Note that for ordered collections the order of the operands is important: in the resulting collection, the elements of the first operand go before the elements of the second.</p><p id="set-operations.md-75077037" >To find an intersection between two collections (elements present in both of them), use <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/intersect.html" id="set-operations.md-e5c3c0df"   data-external="true" rel="noopener noreferrer" ><code class="code " id="set-operations.md-1aad7f30"  >intersect()</code></a>. To find collection elements not present in another collection, use <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/subtract.html" id="set-operations.md-276f1bfc"   data-external="true" rel="noopener noreferrer" ><code class="code " id="set-operations.md-68b5d76b"  >subtract()</code></a>. Both these functions can be called in the infix form as well, for example, <code class="code " id="set-operations.md-a3c38dbd"  >a intersect b</code>.</p><div class="code-block" data-lang="kotlin" id="set-operations.md-246d4e1d"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbers = setOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;)\n\n    println(numbers union setOf(&quot;four&quot;, &quot;five&quot;))\n    println(setOf(&quot;four&quot;, &quot;five&quot;) union numbers)\n\n    println(numbers intersect setOf(&quot;two&quot;, &quot;one&quot;))\n    println(numbers subtract setOf(&quot;three&quot;, &quot;four&quot;))\n    println(numbers subtract setOf(&quot;four&quot;, &quot;three&quot;)) // same output\n//sampleEnd\n}\n</div><p id="set-operations.md-a17cf038" >Note that set operations are supported by <code class="code " id="set-operations.md-6805a230"  >List</code> as well. However, the result of set operations on lists is still a <code class="code " id="set-operations.md-ce3c0446"  >Set</code>, so all the duplicate elements are removed.</p></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="map-operations.md"  >Map-specific operations</h1><p id="map-operations.md-625ac809" >In <a href="#collections-overview.md-map" id="map-operations.md-7ed188e"   >maps</a>, types of both keys and values are user-defined. Key-based access to map entries enables various map-specific processing capabilities from getting a value by key to separate filtering of keys and values. On this page, we provide descriptions of the map processing functions from the standard library.</p><section class="chapter"  ><h2 id="map-operations.md-retrieve-keys-and-values" data-toc="map-operations#map-operations.md-retrieve-keys-and-values"  >Retrieve keys and values</h2><p id="map-operations.md-e927cd1" >For retrieving a value from a map, you must provide its key as an argument of the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-map/get.html" id="map-operations.md-69bd2f31"   data-external="true" rel="noopener noreferrer" ><code class="code " id="map-operations.md-a6a4165a"  >get()</code></a> function. The shorthand <code class="code " id="map-operations.md-39692e73"  >[key]</code> syntax is also supported. If the given key is not found, it returns <code class="code " id="map-operations.md-64c8cce3"  >null</code>. There is also the function <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/get-value.html" id="map-operations.md-99c8e63e"   data-external="true" rel="noopener noreferrer" ><code class="code " id="map-operations.md-f2013ce8"  >getValue()</code></a> which has slightly different behavior: it throws an exception if the key is not found in the map. Additionally, you have two more options to handle the key absence:</p><ul class="list _ul" id="map-operations.md-e1e7aa9f"   ><li class="list__item" id="map-operations.md-fc82bde3" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/get-or-else.html" id="map-operations.md-f932feef"   data-external="true" rel="noopener noreferrer" ><code class="code " id="map-operations.md-7075273e"  >getOrElse()</code></a> works the same way as for lists: the values for non-existent keys are returned from the given lambda function.</p></li><li class="list__item" id="map-operations.md-7688fe55" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/get-or-default.html" id="map-operations.md-a6c5ef61"   data-external="true" rel="noopener noreferrer" ><code class="code " id="map-operations.md-badd1d96"  >getOrDefault()</code></a> returns the specified default value if the key is not found.</p></li></ul><div class="code-block" data-lang="kotlin" id="map-operations.md-e66df546"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbersMap = mapOf(&quot;one&quot; to 1, &quot;two&quot; to 2, &quot;three&quot; to 3)\n    println(numbersMap.get(&quot;one&quot;))\n    println(numbersMap[&quot;one&quot;])\n    println(numbersMap.getOrDefault(&quot;four&quot;, 10))\n    println(numbersMap[&quot;five&quot;])               // null\n    //numbersMap.getValue(&quot;six&quot;)      // exception!\n//sampleEnd\n}\n</div><p id="map-operations.md-733600cd" >To perform operations on all keys or all values of a map, you can retrieve them from the properties <code class="code " id="map-operations.md-51eccabf"  >keys</code> and <code class="code " id="map-operations.md-26e349e6"  >values</code> accordingly. <code class="code " id="map-operations.md-e47ca68b"  >keys</code> is a set of all map keys and <code class="code " id="map-operations.md-56e48aaa"  >values</code> is a collection of all map values.</p><div class="code-block" data-lang="kotlin" id="map-operations.md-65afa530"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbersMap = mapOf(&quot;one&quot; to 1, &quot;two&quot; to 2, &quot;three&quot; to 3)\n    println(numbersMap.keys)\n    println(numbersMap.values)\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="map-operations.md-filter" data-toc="map-operations#map-operations.md-filter"  >Filter</h2><p id="map-operations.md-3701deb6" >You can <a href="#collection-filtering.md" id="map-operations.md-6f3fc533"   >filter</a> maps with the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter.html" id="map-operations.md-f03f0091"   data-external="true" rel="noopener noreferrer" ><code class="code " id="map-operations.md-51982219"  >filter()</code></a> function as well as other collections. When calling <code class="code " id="map-operations.md-5be8a160"  >filter()</code> on a map, pass to it a predicate with a <code class="code " id="map-operations.md-3f0998f5"  >Pair</code> as an argument. This enables you to use both the key and the value in the filtering predicate.</p><div class="code-block" data-lang="kotlin" id="map-operations.md-3ac0d086"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbersMap = mapOf(&quot;key1&quot; to 1, &quot;key2&quot; to 2, &quot;key3&quot; to 3, &quot;key11&quot; to 11)\n    val filteredMap = numbersMap.filter { (key, value) -&gt; key.endsWith(&quot;1&quot;) &amp;&amp; value &gt; 10}\n    println(filteredMap)\n//sampleEnd\n}\n</div><p id="map-operations.md-7623ecc6" >There are also two specific ways for filtering maps: by keys and by values. For each way, there is a function: <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter-keys.html" id="map-operations.md-375018af"   data-external="true" rel="noopener noreferrer" ><code class="code " id="map-operations.md-7e9e789"  >filterKeys()</code></a> and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/filter-values.html" id="map-operations.md-5f2c6323"   data-external="true" rel="noopener noreferrer" ><code class="code " id="map-operations.md-b97e648e"  >filterValues()</code></a>. Both return a new map of entries which match the given predicate. The predicate for <code class="code " id="map-operations.md-435fc8ef"  >filterKeys()</code> checks only the element keys, the one for <code class="code " id="map-operations.md-ec8d44fe"  >filterValues()</code> checks only values.</p><div class="code-block" data-lang="kotlin" id="map-operations.md-77c16ce2"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbersMap = mapOf(&quot;key1&quot; to 1, &quot;key2&quot; to 2, &quot;key3&quot; to 3, &quot;key11&quot; to 11)\n    val filteredKeysMap = numbersMap.filterKeys { it.endsWith(&quot;1&quot;) }\n    val filteredValuesMap = numbersMap.filterValues { it &lt; 10 }\n\n    println(filteredKeysMap)\n    println(filteredValuesMap)\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h2 id="map-operations.md-plus-and-minus-operators" data-toc="map-operations#map-operations.md-plus-and-minus-operators"  >Plus and minus operators</h2><p id="map-operations.md-aacc182d" >Due to the key access to elements, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/plus.html" id="map-operations.md-33659da4"   data-external="true" rel="noopener noreferrer" ><code class="code " id="map-operations.md-3d441133"  >plus</code></a> (<code class="code " id="map-operations.md-283fee8e"  >+</code>) and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/minus.html" id="map-operations.md-4a4c8d65"   data-external="true" rel="noopener noreferrer" ><code class="code " id="map-operations.md-430fde35"  >minus</code></a> (<code class="code " id="map-operations.md-b4d16592"  >-</code>) operators work for maps differently than for other collections. <code class="code " id="map-operations.md-5f5222c4"  >plus</code> returns a <code class="code " id="map-operations.md-b5db72d9"  >Map</code> that contains elements of its both operands: a <code class="code " id="map-operations.md-36aac657"  >Map</code> on the left and a <code class="code " id="map-operations.md-af6500cd"  >Pair</code> or another <code class="code " id="map-operations.md-2de63381"  >Map</code> on the right. When the right-hand side operand contains entries with keys present in the left-hand side <code class="code " id="map-operations.md-e2722348"  >Map</code>, the result map contains the entries from the right side.</p><div class="code-block" data-lang="kotlin" id="map-operations.md-28b61e2b"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbersMap = mapOf(&quot;one&quot; to 1, &quot;two&quot; to 2, &quot;three&quot; to 3)\n    println(numbersMap + Pair(&quot;four&quot;, 4))\n    println(numbersMap + Pair(&quot;one&quot;, 10))\n    println(numbersMap + mapOf(&quot;five&quot; to 5, &quot;one&quot; to 11))\n//sampleEnd\n}\n</div><p id="map-operations.md-84fcc021" ><code class="code " id="map-operations.md-75b09591"  >minus</code> creates a <code class="code " id="map-operations.md-b14281c6"  >Map</code> from entries of a <code class="code " id="map-operations.md-eb3af358"  >Map</code> on the left except those with keys from the right-hand side operand. So, the right-hand side operand can be either a single key or a collection of keys: list, set, and so on.</p><div class="code-block" data-lang="kotlin" id="map-operations.md-d97f97a3"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbersMap = mapOf(&quot;one&quot; to 1, &quot;two&quot; to 2, &quot;three&quot; to 3)\n    println(numbersMap - &quot;one&quot;)\n    println(numbersMap - listOf(&quot;two&quot;, &quot;four&quot;))\n//sampleEnd\n}\n</div><p id="map-operations.md-9f60c66e" >For details on using <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/plus-assign.html" id="map-operations.md-77eb0b56"   data-external="true" rel="noopener noreferrer" ><code class="code " id="map-operations.md-708afc82"  >plusAssign</code></a> (<code class="code " id="map-operations.md-95045e9d"  >+=</code>) and <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/minus-assign.html" id="map-operations.md-1da794bb"   data-external="true" rel="noopener noreferrer" ><code class="code " id="map-operations.md-d13f6381"  >minusAssign</code></a> (<code class="code " id="map-operations.md-f7998d39"  >-=</code>) operators on mutable maps, see <a href="#map-operations.md-map-write-operations" id="map-operations.md-c7b53076"   >Map write operations</a> below.</p></section><section class="chapter"  ><h2 id="map-operations.md-map-write-operations" data-toc="map-operations#map-operations.md-map-write-operations"  >Map write operations</h2><p id="map-operations.md-2bb7f2c1" ><a href="#collections-overview.md-collection-types" id="map-operations.md-9c230469"   >Mutable</a> maps offer map-specific write operations. These operations let you change the map content using the key-based access to the values.</p><p id="map-operations.md-7729dc92" >There are certain rules that define write operations on maps:</p><ul class="list _ul" id="map-operations.md-6cdbaf77"   ><li class="list__item" id="map-operations.md-d95ceb85" ><p>Values can be updated. In turn, keys never change: once you add an entry, its key is constant.</p></li><li class="list__item" id="map-operations.md-c0be5cc4" ><p>For each key, there is always a single value associated with it. You can add and remove whole entries.</p></li></ul><p id="map-operations.md-b08d7c02" >Below are descriptions of the standard library functions for write operations available on mutable maps.</p><section class="chapter"  ><h3 id="map-operations.md-add-and-update-entries" data-toc="map-operations#map-operations.md-add-and-update-entries"  >Add and update entries</h3><p id="map-operations.md-cb4b777f" >To add a new key-value pair to a mutable map, use <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-map/put.html" id="map-operations.md-7ac1f723"   data-external="true" rel="noopener noreferrer" ><code class="code " id="map-operations.md-b7117801"  >put()</code></a>. When a new entry is put into a <code class="code " id="map-operations.md-71aaa06"  >LinkedHashMap</code> (the default map implementation), it is added so that it comes last when iterating the map. In sorted maps, the positions of new elements are defined by the order of their keys.</p><div class="code-block" data-lang="kotlin" id="map-operations.md-5b4f1b31"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbersMap = mutableMapOf(&quot;one&quot; to 1, &quot;two&quot; to 2)\n    numbersMap.put(&quot;three&quot;, 3)\n    println(numbersMap)\n//sampleEnd\n}\n</div><p id="map-operations.md-8d1b9ea5" >To add multiple entries at a time, use <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/put-all.html" id="map-operations.md-356f365a"   data-external="true" rel="noopener noreferrer" ><code class="code " id="map-operations.md-60ee9dce"  >putAll()</code></a>. Its argument can be a <code class="code " id="map-operations.md-ee202ad5"  >Map</code> or a group of <code class="code " id="map-operations.md-f41039d4"  >Pair</code> s: <code class="code " id="map-operations.md-8ed6cade"  >Iterable</code>, <code class="code " id="map-operations.md-4b2c7824"  >Sequence</code>, or <code class="code " id="map-operations.md-fecaa249"  >Array</code>.</p><div class="code-block" data-lang="kotlin" id="map-operations.md-2c6bf433"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbersMap = mutableMapOf(&quot;one&quot; to 1, &quot;two&quot; to 2, &quot;three&quot; to 3)\n    numbersMap.putAll(setOf(&quot;four&quot; to 4, &quot;five&quot; to 5))\n    println(numbersMap)\n//sampleEnd\n}\n</div><p id="map-operations.md-9402ad2c" >Both <code class="code " id="map-operations.md-e280bee4"  >put()</code> and <code class="code " id="map-operations.md-77cb3703"  >putAll()</code> overwrite the values if the given keys already exist in the map. Thus, you can use them to update values of map entries.</p><div class="code-block" data-lang="kotlin" id="map-operations.md-cc93c89b"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbersMap = mutableMapOf(&quot;one&quot; to 1, &quot;two&quot; to 2)\n    val previousValue = numbersMap.put(&quot;one&quot;, 11)\n    println(&quot;value associated with \'one\', before: $previousValue, after: ${numbersMap[&quot;one&quot;]}&quot;)\n    println(numbersMap)\n//sampleEnd\n}\n</div><p id="map-operations.md-d84166d4" >You can also add new entries to maps using the shorthand operator form. There are two ways:</p><ul class="list _ul" id="map-operations.md-3964191"   ><li class="list__item" id="map-operations.md-eae57156" ><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/plus-assign.html" id="map-operations.md-e8115b2b"   data-external="true" rel="noopener noreferrer" ><code class="code " id="map-operations.md-3ec2983a"  >plusAssign</code></a> (<code class="code " id="map-operations.md-e1760662"  >+=</code>) operator.</p></li><li class="list__item" id="map-operations.md-ad6b95f4" ><p>the <code class="code " id="map-operations.md-73adfe7c"  >[]</code> operator alias for <code class="code " id="map-operations.md-c4b4e7bf"  >set()</code>.</p></li></ul><div class="code-block" data-lang="kotlin" id="map-operations.md-a65074a1"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbersMap = mutableMapOf(&quot;one&quot; to 1, &quot;two&quot; to 2)\n    numbersMap[&quot;three&quot;] = 3     // calls numbersMap.put(&quot;three&quot;, 3)\n    numbersMap += mapOf(&quot;four&quot; to 4, &quot;five&quot; to 5)\n    println(numbersMap)\n//sampleEnd\n}\n</div><p id="map-operations.md-e75d23b3" >When called with the key present in the map, operators overwrite the values of the corresponding entries.</p></section><section class="chapter"  ><h3 id="map-operations.md-remove-entries" data-toc="map-operations#map-operations.md-remove-entries"  >Remove entries</h3><p id="map-operations.md-31c5819" >To remove an entry from a mutable map, use the <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-mutable-map/remove.html" id="map-operations.md-df313f21"   data-external="true" rel="noopener noreferrer" ><code class="code " id="map-operations.md-19fe5035"  >remove()</code></a> function. When calling <code class="code " id="map-operations.md-9ec8e993"  >remove()</code>, you can pass either a key or a whole key-value-pair. If you specify both the key and value, the element with this key will be removed only if its value matches the second argument.</p><div class="code-block" data-lang="kotlin" id="map-operations.md-8533582e"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbersMap = mutableMapOf(&quot;one&quot; to 1, &quot;two&quot; to 2, &quot;three&quot; to 3)\n    numbersMap.remove(&quot;one&quot;)\n    println(numbersMap)\n    numbersMap.remove(&quot;three&quot;, 4)            //doesn\'t remove anything\n    println(numbersMap)\n//sampleEnd\n}\n</div><p id="map-operations.md-cd1fb22" >You can also remove entries from a mutable map by their keys or values. To do this, call <code class="code " id="map-operations.md-975d5a7d"  >remove()</code> on the map\'s keys or values providing the key or the value of an entry. When called on values, <code class="code " id="map-operations.md-842bf8ff"  >remove()</code> removes only the first entry with the given value.</p><div class="code-block" data-lang="kotlin" id="map-operations.md-e4b4787e"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbersMap = mutableMapOf(&quot;one&quot; to 1, &quot;two&quot; to 2, &quot;three&quot; to 3, &quot;threeAgain&quot; to 3)\n    numbersMap.keys.remove(&quot;one&quot;)\n    println(numbersMap)\n    numbersMap.values.remove(3)\n    println(numbersMap)\n//sampleEnd\n}\n</div><p id="map-operations.md-79af167" >The <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/minus-assign.html" id="map-operations.md-e795ac5e"   data-external="true" rel="noopener noreferrer" ><code class="code " id="map-operations.md-56f853"  >minusAssign</code></a> (<code class="code " id="map-operations.md-84c2769a"  >-=</code>) operator is also available for mutable maps.</p><div class="code-block" data-lang="kotlin" id="map-operations.md-2ec170a3"        data-runnable="true" data-min-compiler-version="1.3"  >\nfun main() {\n//sampleStart\n    val numbersMap = mutableMapOf(&quot;one&quot; to 1, &quot;two&quot; to 2, &quot;three&quot; to 3)\n    numbersMap -= &quot;two&quot;\n    println(numbersMap)\n    numbersMap -= &quot;five&quot;             //doesn\'t remove anything\n    println(numbersMap)\n//sampleEnd\n}\n</div></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="scope-functions.md"  >Scope functions</h1><p id="scope-functions.md-3e799dcf" >The Kotlin standard library contains several functions whose sole purpose is to execute a block of code within the context of an object. When you call such a function on an object with a <a href="#lambdas.md" id="scope-functions.md-89e52f4b"   >lambda expression</a> provided, it forms a temporary scope. In this scope, you can access the object without its name. Such functions are called <em id="scope-functions.md-fdb5f712" class=""  >scope functions</em>. There are five of them: <code class="code " id="scope-functions.md-2ad3fb23"  >let</code>, <code class="code " id="scope-functions.md-6826fccf"  >run</code>, <code class="code " id="scope-functions.md-1a521b1"  >with</code>, <code class="code " id="scope-functions.md-f5049e79"  >apply</code>, and <code class="code " id="scope-functions.md-4b96f78f"  >also</code>.</p><p id="scope-functions.md-cd077a79" >Basically, these functions do the same: execute a block of code on an object. What\'s different is how this object becomes available inside the block and what is the result of the whole expression.</p><p id="scope-functions.md-fb8a6151" >Here\'s a typical usage of a scope function:</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-13271de8"        data-runnable="true" data-min-compiler-version="1.3"  >data class Person(var name: String, var age: Int, var city: String) {\n    fun moveTo(newCity: String) { city = newCity }\n    fun incrementAge() { age++ }\n}\n\nfun main() {\n//sampleStart\n    Person(&quot;Alice&quot;, 20, &quot;Amsterdam&quot;).let {\n        println(it)\n        it.moveTo(&quot;London&quot;)\n        it.incrementAge()\n        println(it)\n    }\n//sampleEnd\n}\n</div><p id="scope-functions.md-fc70a19e" >If you write the same without <code class="code " id="scope-functions.md-c1bb3e47"  >let</code>, you\'ll have to introduce a new variable and repeat its name whenever you use it.</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-dccdb315"        data-runnable="true" data-min-compiler-version="1.3"  >data class Person(var name: String, var age: Int, var city: String) {\n    fun moveTo(newCity: String) { city = newCity }\n    fun incrementAge() { age++ }\n}\n\nfun main() {\n//sampleStart\n    val alice = Person(&quot;Alice&quot;, 20, &quot;Amsterdam&quot;)\n    println(alice)\n    alice.moveTo(&quot;London&quot;)\n    alice.incrementAge()\n    println(alice)\n//sampleEnd\n}\n</div><p id="scope-functions.md-5959daf6" >The scope functions do not introduce any new technical capabilities, but they can make your code more concise and readable.</p><p id="scope-functions.md-94fe4e96" >Due to the similar nature of scope functions, choosing the right one for your case can be a bit tricky. The choice mainly depends on your intent and the consistency of use in your project. Below we\'ll provide detailed descriptions of the distinctions between scope functions and the conventions on their usage.</p><section class="chapter"  ><h2 id="scope-functions.md-distinctions" data-toc="scope-functions#scope-functions.md-distinctions"  >Distinctions</h2><p id="scope-functions.md-4d9d5035" >Because the scope functions are all quite similar in nature, it\'s important to understand the differences between them. There are two main differences between each scope function:</p><ul class="list _ul" id="scope-functions.md-f35b45b2"   ><li class="list__item" id="scope-functions.md-55921d9f" ><p>The way to refer to the context object</p></li><li class="list__item" id="scope-functions.md-c4f7999e" ><p>The return value.</p></li></ul><section class="chapter"  ><h3 id="scope-functions.md-context-object-this-or-it" data-toc="scope-functions#scope-functions.md-context-object-this-or-it"  >Context object: this or it</h3><p id="scope-functions.md-c0ccfd4f" >Inside the lambda of a scope function, the context object is available by a short reference instead of its actual name. Each scope function uses one of two ways to access the context object: as a lambda <a href="#lambdas.md-function-literals-with-receiver" id="scope-functions.md-87319ef4"   >receiver</a> (<code class="code " id="scope-functions.md-75c74d73"  >this</code>) or as a lambda argument (<code class="code " id="scope-functions.md-ee7c39a8"  >it</code> ). Both provide the same capabilities, so we\'ll describe the pros and cons of each for different cases and provide recommendations on their use.</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-eb08f160"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n    val str = &quot;Hello&quot;\n    // this\n    str.run {\n        println(&quot;The receiver string length: $length&quot;)\n        //println(&quot;The receiver string length: ${this.length}&quot;) // does the same\n    }\n\n    // it\n    str.let {\n        println(&quot;The receiver string\'s length is ${it.length}&quot;)\n    }\n}\n</div><section class="chapter"  ><h4 id="scope-functions.md-this" data-toc="scope-functions#scope-functions.md-this"  >this</h4><p id="scope-functions.md-f7a0da8c" ><code class="code " id="scope-functions.md-8c0a2057"  >run</code>, <code class="code " id="scope-functions.md-ece3eb36"  >with</code>, and <code class="code " id="scope-functions.md-b1d45574"  >apply</code> refer to the context object as a lambda receiver - by keyword <code class="code " id="scope-functions.md-efd30094"  >this</code>. Hence, in their lambdas, the object is available as it would be in ordinary class functions. In most cases, you can omit <code class="code " id="scope-functions.md-13efc71e"  >this</code> when accessing the members of the receiver object, making the code shorter. On the other hand, if <code class="code " id="scope-functions.md-b96d728c"  >this</code> is omitted, it can be hard to distinguish between the receiver members and external objects or functions. So, having the context object as a receiver (<code class="code " id="scope-functions.md-86dff951"  >this</code>) is recommended for lambdas that mainly operate on the object members: call its functions or assign properties.</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-64b2be4c"        data-runnable="true" data-min-compiler-version="1.3"  >data class Person(var name: String, var age: Int = 0, var city: String = &quot;&quot;)\n\nfun main() {\n//sampleStart\n    val adam = Person(&quot;Adam&quot;).apply { \n        age = 20                       // same as this.age = 20 or adam.age = 20\n        city = &quot;London&quot;\n    }\n    println(adam)\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h4 id="scope-functions.md-it" data-toc="scope-functions#scope-functions.md-it"  >it</h4><p id="scope-functions.md-f53ea349" >In turn, <code class="code " id="scope-functions.md-ed3bf532"  >let</code> and <code class="code " id="scope-functions.md-39e8684a"  >also</code> have the context object as a lambda argument. If the argument name is not specified, the object is accessed by the implicit default name <code class="code " id="scope-functions.md-423b5076"  >it</code>. <code class="code " id="scope-functions.md-2e989c9c"  >it</code> is shorter than <code class="code " id="scope-functions.md-b13061fb"  >this</code> and expressions with <code class="code " id="scope-functions.md-c76acaf6"  >it</code> are usually easier for reading. However, when calling the object functions or properties you don\'t have the object available implicitly like <code class="code " id="scope-functions.md-1b3454f4"  >this</code>. Hence, having the context object as <code class="code " id="scope-functions.md-e1fcbbed"  >it</code> is better when the object is mostly used as an argument in function calls. <code class="code " id="scope-functions.md-15a2d542"  >it</code> is also better if you use multiple variables in the code block.</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-a959b022"        data-runnable="true" data-min-compiler-version="1.3"  >import kotlin.random.Random\n\nfun writeToLog(message: String) {\n    println(&quot;INFO: $message&quot;)\n}\n\nfun main() {\n//sampleStart\n    fun getRandomInt(): Int {\n        return Random.nextInt(100).also {\n            writeToLog(&quot;getRandomInt() generated value $it&quot;)\n        }\n    }\n    \n    val i = getRandomInt()\n//sampleEnd\n}\n</div><p id="scope-functions.md-cba692b0" >Additionally, when you pass the context object as an argument, you can provide a custom name for the context object inside the scope.</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-6a471f3e"        data-runnable="true" data-min-compiler-version="1.3"  >import kotlin.random.Random\n\nfun writeToLog(message: String) {\n    println(&quot;INFO: $message&quot;)\n}\n\nfun main() {\n//sampleStart\n    fun getRandomInt(): Int {\n        return Random.nextInt(100).also { value -&gt;\n            writeToLog(&quot;getRandomInt() generated value $value&quot;)\n        }\n    }\n    \n    val i = getRandomInt()\n//sampleEnd\n}\n</div></section></section><section class="chapter"  ><h3 id="scope-functions.md-return-value" data-toc="scope-functions#scope-functions.md-return-value"  >Return value</h3><p id="scope-functions.md-89977d77" >The scope functions differ by the result they return:</p><ul class="list _ul" id="scope-functions.md-3fa0f108"   ><li class="list__item" id="scope-functions.md-effadbbb" ><p><code class="code " id="scope-functions.md-83b39b0e"  >apply</code> and <code class="code " id="scope-functions.md-8bec3d9"  >also</code> return the context object.</p></li><li class="list__item" id="scope-functions.md-178724c0" ><p><code class="code " id="scope-functions.md-de226db8"  >let</code>, <code class="code " id="scope-functions.md-3cd89ceb"  >run</code>, and <code class="code " id="scope-functions.md-5648bd84"  >with</code> return the lambda result.</p></li></ul><p id="scope-functions.md-96ee56f6" >These two options let you choose the proper function depending on what you do next in your code.</p><section class="chapter"  ><h4 id="scope-functions.md-context-object" data-toc="scope-functions#scope-functions.md-context-object"  >Context object</h4><p id="scope-functions.md-3a3a747b" >The return value of <code class="code " id="scope-functions.md-ced5234c"  >apply</code> and <code class="code " id="scope-functions.md-a49028ae"  >also</code> is the context object itself. Hence, they can be included into call chains as <em id="scope-functions.md-725cf5dc" class=""  >side steps</em>: you can continue chaining function calls on the same object after them.</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-331292ec"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numberList = mutableListOf&lt;Double&gt;()\n    numberList.also { println(&quot;Populating the list&quot;) }\n        .apply {\n            add(2.71)\n            add(3.14)\n            add(1.0)\n        }\n        .also { println(&quot;Sorting the list&quot;) }\n        .sort()\n//sampleEnd\n    println(numberList)\n}\n</div><p id="scope-functions.md-2bc5de9d" >They also can be used in return statements of functions returning the context object.</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-4f217a2d"        data-runnable="true" data-min-compiler-version="1.3"  >import kotlin.random.Random\n\nfun writeToLog(message: String) {\n    println(&quot;INFO: $message&quot;)\n}\n\nfun main() {\n//sampleStart\n    fun getRandomInt(): Int {\n        return Random.nextInt(100).also {\n            writeToLog(&quot;getRandomInt() generated value $it&quot;)\n        }\n    }\n    \n    val i = getRandomInt()\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h4 id="scope-functions.md-lambda-result" data-toc="scope-functions#scope-functions.md-lambda-result"  >Lambda result</h4><p id="scope-functions.md-25d32b62" ><code class="code " id="scope-functions.md-f7189631"  >let</code>, <code class="code " id="scope-functions.md-e742cf9a"  >run</code>, and <code class="code " id="scope-functions.md-81e6bf3c"  >with</code> return the lambda result. So, you can use them when assigning the result to a variable, chaining operations on the result, and so on.</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-a80015a4"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = mutableListOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;)\n    val countEndsWithE = numbers.run { \n        add(&quot;four&quot;)\n        add(&quot;five&quot;)\n        count { it.endsWith(&quot;e&quot;) }\n    }\n    println(&quot;There are $countEndsWithE elements that end with e.&quot;)\n//sampleEnd\n}\n</div><p id="scope-functions.md-75a9b70b" >Additionally, you can ignore the return value and use a scope function to create a temporary scope for variables.</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-86e7f6df"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = mutableListOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;)\n    with(numbers) {\n        val firstItem = first()\n        val lastItem = last()        \n        println(&quot;First item: $firstItem, last item: $lastItem&quot;)\n    }\n//sampleEnd\n}\n</div></section></section></section><section class="chapter"  ><h2 id="scope-functions.md-functions" data-toc="scope-functions#scope-functions.md-functions"  >Functions</h2><p id="scope-functions.md-92dc7bf6" >To help you choose the right scope function for your case, we\'ll describe them in detail and provide usage recommendations. Technically, functions are interchangeable in many cases, so the examples show the conventions that define the common usage style.</p><section class="chapter"  ><h3 id="scope-functions.md-let" data-toc="scope-functions#scope-functions.md-let"  >let</h3><p id="scope-functions.md-8589577d" ><b id="scope-functions.md-b0ad92a4" class=""  >The context object</b> is available as an argument (<code class="code " id="scope-functions.md-15ec0d80"  >it</code> ). <b id="scope-functions.md-8e00e9c0" class=""  >The return value</b> is the lambda result.</p><p id="scope-functions.md-eaa6cb41" ><code class="code " id="scope-functions.md-15709338"  >let</code> can be used to invoke one or more functions on results of call chains. For example, the following code prints the results of two operations on a collection:</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-a9591aba"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = mutableListOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;)\n    val resultList = numbers.map { it.length }.filter { it &gt; 3 }\n    println(resultList)    \n//sampleEnd\n}\n</div><p id="scope-functions.md-10986056" >With <code class="code " id="scope-functions.md-73864207"  >let</code>, you can rewrite it:</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-e172945"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = mutableListOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;)\n    numbers.map { it.length }.filter { it &gt; 3 }.let { \n        println(it)\n        // and more function calls if needed\n    } \n//sampleEnd\n}\n</div><p id="scope-functions.md-9f4c8d2f" >If the code block contains a single function with <code class="code " id="scope-functions.md-f4aa10da"  >it</code> as an argument, you can use the method reference (<code class="code " id="scope-functions.md-aad05d43"  >::</code>) instead of the lambda:</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-342cc52d"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = mutableListOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;)\n    numbers.map { it.length }.filter { it &gt; 3 }.let(::println)\n//sampleEnd\n}\n</div><p id="scope-functions.md-de78a301" ><code class="code " id="scope-functions.md-85466c35"  >let</code> is often used for executing a code block only with non-null values. To perform actions on a non-null object, use the safe call operator <code class="code " id="scope-functions.md-d5a37b5f"  >?.</code> on it and call <code class="code " id="scope-functions.md-9805685"  >let</code> with the actions in its lambda.</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-cb53cea6"        data-runnable="true" data-min-compiler-version="1.3"  >fun processNonNullString(str: String) {}\n\nfun main() {\n//sampleStart\n    val str: String? = &quot;Hello&quot;   \n    //processNonNullString(str)       // compilation error: str can be null\n    val length = str?.let { \n        println(&quot;let() called on $it&quot;)        \n        processNonNullString(it)      // OK: \'it\' is not null inside \'?.let { }\'\n        it.length\n    }\n//sampleEnd\n}\n</div><p id="scope-functions.md-b05d0fd7" >Another case for using <code class="code " id="scope-functions.md-ec7aa706"  >let</code> is introducing local variables with a limited scope for improving code readability. To define a new variable for the context object, provide its name as the lambda argument so that it can be used instead of the default <code class="code " id="scope-functions.md-f81f440b"  >it</code>.</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-eda981cb"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = listOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;)\n    val modifiedFirstItem = numbers.first().let { firstItem -&gt;\n        println(&quot;The first item of the list is \'$firstItem\'&quot;)\n        if (firstItem.length &gt;= 5) firstItem else &quot;!&quot; + firstItem + &quot;!&quot;\n    }.toUpperCase()\n    println(&quot;First item after modifications: \'$modifiedFirstItem\'&quot;)\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h3 id="scope-functions.md-with" data-toc="scope-functions#scope-functions.md-with"  >with</h3><p id="scope-functions.md-5ddc00c7" >A non-extension function: <b id="scope-functions.md-90fdb69f" class=""  >the context object</b> is passed as an argument, but inside the lambda, it\'s available as a receiver (<code class="code " id="scope-functions.md-7df36ed7"  >this</code> ). <b id="scope-functions.md-85b24275" class=""  >The return value</b> is the lambda result.</p><p id="scope-functions.md-431f03fa" >We recommend <code class="code " id="scope-functions.md-63356017"  >with</code> for calling functions on the context object without providing the lambda result. In the code, <code class="code " id="scope-functions.md-6e61b4cf"  >with</code> can be read as “ <em id="scope-functions.md-c0b56e69" class=""  >with this object, do the following.</em>”</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-798ba7e9"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = mutableListOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;)\n    with(numbers) {\n        println(&quot;\'with\' is called with argument $this&quot;)\n        println(&quot;It contains $size elements&quot;)\n    }\n//sampleEnd\n}\n</div><p id="scope-functions.md-7f0644e3" >Another use case for <code class="code " id="scope-functions.md-7829a660"  >with</code> is introducing a helper object whose properties or functions will be used for calculating a value.</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-507950ce"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = mutableListOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;)\n    val firstAndLast = with(numbers) {\n        &quot;The first element is ${first()},&quot; +\n        &quot; the last element is ${last()}&quot;\n    }\n    println(firstAndLast)\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h3 id="scope-functions.md-run" data-toc="scope-functions#scope-functions.md-run"  >run</h3><p id="scope-functions.md-d7ebd35d" ><b id="scope-functions.md-67823a45" class=""  >The context object</b> is available as a receiver (<code class="code " id="scope-functions.md-f49e636a"  >this</code> ). <b id="scope-functions.md-5ec6e10" class=""  >The return value</b> is the lambda result.</p><p id="scope-functions.md-94e1ed8c" ><code class="code " id="scope-functions.md-d8cf51cd"  >run</code> does the same as <code class="code " id="scope-functions.md-2a5bd37b"  >with</code> but invokes as <code class="code " id="scope-functions.md-f0bd2a06"  >let</code>- as an extension function of the context object.</p><p id="scope-functions.md-5aeef369" ><code class="code " id="scope-functions.md-47586622"  >run</code> is useful when your lambda contains both the object initialization and the computation of the return value.</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-d01aad3f"        data-runnable="true" data-min-compiler-version="1.3"  >class MultiportService(var url: String, var port: Int) {\n    fun prepareRequest(): String = &quot;Default request&quot;\n    fun query(request: String): String = &quot;Result for query \'$request\'&quot;\n}\n\nfun main() {\n//sampleStart\n    val service = MultiportService(&quot;https://example.kotlinlang.org&quot;, 80)\n\n    val result = service.run {\n        port = 8080\n        query(prepareRequest() + &quot; to port $port&quot;)\n    }\n    \n    // the same code written with let() function:\n    val letResult = service.let {\n        it.port = 8080\n        it.query(it.prepareRequest() + &quot; to port ${it.port}&quot;)\n    }\n//sampleEnd\n    println(result)\n    println(letResult)\n}\n</div><p id="scope-functions.md-9432c56" >Besides calling <code class="code " id="scope-functions.md-95340e38"  >run</code> on a receiver object, you can use it as a non-extension function. Non-extension <code class="code " id="scope-functions.md-a3f33002"  >run</code> lets you execute a block of several statements where an expression is required.</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-9f790137"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val hexNumberRegex = run {\n        val digits = &quot;0-9&quot;\n        val hexDigits = &quot;A-Fa-f&quot;\n        val sign = &quot;+-&quot;\n        \n        Regex(&quot;[$sign]?[$digits$hexDigits]+&quot;)\n    }\n    \n    for (match in hexNumberRegex.findAll(&quot;+1234 -FFFF not-a-number&quot;)) {\n        println(match.value)\n    }\n//sampleEnd\n}\n</div></section><section class="chapter"  ><h3 id="scope-functions.md-apply" data-toc="scope-functions#scope-functions.md-apply"  >apply</h3><p id="scope-functions.md-d2702718" ><b id="scope-functions.md-c9e7f60" class=""  >The context object</b> is available as a receiver (<code class="code " id="scope-functions.md-fce42786"  >this</code> ). <b id="scope-functions.md-2b43ba9" class=""  >The return value</b> is the object itself.</p><p id="scope-functions.md-d4b3e3b9" >Use <code class="code " id="scope-functions.md-b8c5f584"  >apply</code> for code blocks that don\'t return a value and mainly operate on the members of the receiver object. The common case for <code class="code " id="scope-functions.md-f368b5aa"  >apply</code> is the object configuration. Such calls can be read as “ <em id="scope-functions.md-66acd1d7" class=""  >apply the following assignments to the object.</em>”</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-9b19ba21"        data-runnable="true" data-min-compiler-version="1.3"  >data class Person(var name: String, var age: Int = 0, var city: String = &quot;&quot;)\n\nfun main() {\n//sampleStart\n    val adam = Person(&quot;Adam&quot;).apply {\n        age = 32\n        city = &quot;London&quot;        \n    }\n    println(adam)\n//sampleEnd\n}\n</div><p id="scope-functions.md-bb29ed3" >Having the receiver as the return value, you can easily include <code class="code " id="scope-functions.md-b0f47a0c"  >apply</code> into call chains for more complex processing.</p></section><section class="chapter"  ><h3 id="scope-functions.md-also" data-toc="scope-functions#scope-functions.md-also"  >also</h3><p id="scope-functions.md-fb5b0e73" ><b id="scope-functions.md-a7a3d618" class=""  >The context object</b> is available as an argument (<code class="code " id="scope-functions.md-ad418c9f"  >it</code> ). <b id="scope-functions.md-6d6a8f4" class=""  >The return value</b> is the object itself.</p><p id="scope-functions.md-e35fb151" ><code class="code " id="scope-functions.md-f54aeee5"  >also</code> is good for performing some actions that take the context object as an argument. Use <code class="code " id="scope-functions.md-17333c2c"  >also</code> for actions that need a reference rather to the object than to its properties and functions, or when you don\'t want to shadow <code class="code " id="scope-functions.md-eac8c594"  >this</code> reference from an outer scope.</p><p id="scope-functions.md-26d2565e" >When you see <code class="code " id="scope-functions.md-4b4f5538"  >also</code> in the code, you can read it as “ <em id="scope-functions.md-675958ca" class=""  >and also do the following with the object.</em>”</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-53383c90"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val numbers = mutableListOf(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;)\n    numbers\n        .also { println(&quot;The list elements before adding new one: $it&quot;) }\n        .add(&quot;four&quot;)\n//sampleEnd\n}\n</div></section></section><section class="chapter"  ><h2 id="scope-functions.md-function-selection" data-toc="scope-functions#scope-functions.md-function-selection"  >Function selection</h2><p id="scope-functions.md-474dd23e" >To help you choose the right scope function for your purpose, we provide the table of key differences between them.</p><div class="table-wrapper" ><table class=" wide" id="scope-functions.md-803db4c9"  ><thead><tr class="ijRowHead" id="scope-functions.md-891ad7d0" ><th id="scope-functions.md-38f27b49"    >Function</th><th id="scope-functions.md-f7160b26"    >Object reference</th><th id="scope-functions.md-1330a2bf"    >Return value</th><th id="scope-functions.md-74c21f9e"    >Is extension function</th></tr></thead><tbody ><tr class="" id="scope-functions.md-c87e5b40" ><td id="scope-functions.md-57b069dc"    ><code class="code " id="scope-functions.md-47e49c33"  >let</code></td><td id="scope-functions.md-dfa1c33"    ><code class="code " id="scope-functions.md-36f25fd7"  >it</code></td><td id="scope-functions.md-8f26df4f"    >Lambda result</td><td id="scope-functions.md-fd2faf76"    >Yes</td></tr><tr class="" id="scope-functions.md-9c63cc5d" ><td id="scope-functions.md-8903b33d"    ><code class="code " id="scope-functions.md-426198bd"  >run</code></td><td id="scope-functions.md-334b8916"    ><code class="code " id="scope-functions.md-8995968b"  >this</code></td><td id="scope-functions.md-1899183d"    >Lambda result</td><td id="scope-functions.md-9d34528d"    >Yes</td></tr><tr class="" id="scope-functions.md-7a977364" ><td id="scope-functions.md-4b535f37"    ><code class="code " id="scope-functions.md-fdc8b19f"  >run</code></td><td id="scope-functions.md-8fc015eb"    >-</td><td id="scope-functions.md-2f90678"    >Lambda result</td><td id="scope-functions.md-898d12a0"    >No: called without the context object</td></tr><tr class="" id="scope-functions.md-f5e05bce" ><td id="scope-functions.md-88babb96"    ><code class="code " id="scope-functions.md-9f495477"  >with</code></td><td id="scope-functions.md-704f95bd"    ><code class="code " id="scope-functions.md-78677cba"  >this</code></td><td id="scope-functions.md-662b47f8"    >Lambda result</td><td id="scope-functions.md-bab21617"    >No: takes the context object as an argument.</td></tr><tr class="" id="scope-functions.md-601f526d" ><td id="scope-functions.md-7f936dff"    ><code class="code " id="scope-functions.md-77877476"  >apply</code></td><td id="scope-functions.md-3a129b63"    ><code class="code " id="scope-functions.md-82f2d2f2"  >this</code></td><td id="scope-functions.md-595e546"    >Context object</td><td id="scope-functions.md-3e0ffa09"    >Yes</td></tr><tr class="" id="scope-functions.md-66bc84bb" ><td id="scope-functions.md-547720a0"    ><code class="code " id="scope-functions.md-dcbefeeb"  >also</code></td><td id="scope-functions.md-100e710d"    ><code class="code " id="scope-functions.md-3654881f"  >it</code></td><td id="scope-functions.md-aed9d1"    >Context object</td><td id="scope-functions.md-bbe2cee0"    >Yes</td></tr></tbody ></table ></div><p id="scope-functions.md-dbac3764" >Here is a short guide for choosing scope functions depending on the intended purpose:</p><ul class="list _ul" id="scope-functions.md-7a9f8da0"   ><li class="list__item" id="scope-functions.md-ea70da59" ><p>Executing a lambda on non-null objects: <code class="code " id="scope-functions.md-fda3c6ac"  >let</code></p></li><li class="list__item" id="scope-functions.md-e798331b" ><p>Introducing an expression as a variable in local scope: <code class="code " id="scope-functions.md-a50c9bd0"  >let</code></p></li><li class="list__item" id="scope-functions.md-ef6c258f" ><p>Object configuration: <code class="code " id="scope-functions.md-dea7665"  >apply</code></p></li><li class="list__item" id="scope-functions.md-569557c5" ><p>Object configuration and computing the result: <code class="code " id="scope-functions.md-20882887"  >run</code></p></li><li class="list__item" id="scope-functions.md-419048b4" ><p>Running statements where an expression is required: non-extension <code class="code " id="scope-functions.md-1e0ce436"  >run</code></p></li><li class="list__item" id="scope-functions.md-1415dd76" ><p>Additional effects: <code class="code " id="scope-functions.md-b3ebaf90"  >also</code></p></li><li class="list__item" id="scope-functions.md-de4dbd02" ><p>Grouping function calls on an object: <code class="code " id="scope-functions.md-2f001236"  >with</code></p></li></ul><p id="scope-functions.md-18ce5db0" >The use cases of different functions overlap, so that you can choose the functions based on the specific conventions used in your project or team.</p><p id="scope-functions.md-1b92c552" >Although the scope functions are a way of making the code more concise, avoid overusing them: it can decrease your code readability and lead to errors. Avoid nesting scope functions and be careful when chaining them: it\'s easy to get confused about the current context object and the value of <code class="code " id="scope-functions.md-16b73f2e"  >this</code> or <code class="code " id="scope-functions.md-fa53751f"  >it</code>.</p></section><section class="chapter"  ><h2 id="scope-functions.md-takeif-and-takeunless" data-toc="scope-functions#scope-functions.md-takeif-and-takeunless"  >takeIf and takeUnless</h2><p id="scope-functions.md-a3c642dd" >In addition to scope functions, the standard library contains the functions <code class="code " id="scope-functions.md-aa9574fc"  >takeIf</code> and <code class="code " id="scope-functions.md-d56b762c"  >takeUnless</code>. These functions let you embed checks of the object state in call chains.</p><p id="scope-functions.md-60745ef1" >When called on an object with a predicate provided, <code class="code " id="scope-functions.md-49fd937a"  >takeIf</code> returns this object if it matches the predicate. Otherwise, it returns <code class="code " id="scope-functions.md-6aaa1331"  >null</code>. So, <code class="code " id="scope-functions.md-3d399fc3"  >takeIf</code> is a filtering function for a single object. In turn, <code class="code " id="scope-functions.md-3dc99c54"  >takeUnless</code> returns the object if it doesn\'t match the predicate and <code class="code " id="scope-functions.md-a724f1e3"  >null</code> if it does. The object is available as a lambda argument (<code class="code " id="scope-functions.md-28e6e3f1"  >it</code> ).</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-a56ff773"        data-runnable="true" data-min-compiler-version="1.3"  >import kotlin.random.*\n\nfun main() {\n//sampleStart\n    val number = Random.nextInt(100)\n\n    val evenOrNull = number.takeIf { it % 2 == 0 }\n    val oddOrNull = number.takeUnless { it % 2 == 0 }\n    println(&quot;even: $evenOrNull, odd: $oddOrNull&quot;)\n//sampleEnd\n}\n</div><p id="scope-functions.md-f8b14874" >When chaining other functions after <code class="code " id="scope-functions.md-d646cda8"  >takeIf</code> and <code class="code " id="scope-functions.md-a4a9b263"  >takeUnless</code>, don\'t forget to perform the null check or the safe call (<code class="code " id="scope-functions.md-eb9f3ba7"  >?.</code>) because their return value is nullable.</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-2554c77a"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    val str = &quot;Hello&quot;\n    val caps = str.takeIf { it.isNotEmpty() }?.toUpperCase()\n   //val caps = str.takeIf { it.isNotEmpty() }.toUpperCase() //compilation error\n    println(caps)\n//sampleEnd\n}\n</div><p id="scope-functions.md-ab04374f" ><code class="code " id="scope-functions.md-d9de2e5d"  >takeIf</code> and <code class="code " id="scope-functions.md-f5f24a01"  >takeUnless</code> are especially useful together with scope functions. A good case is chaining them with <code class="code " id="scope-functions.md-66503ec7"  >let</code> for running a code block on objects that match the given predicate. To do this, call <code class="code " id="scope-functions.md-8fd93bab"  >takeIf</code> on the object and then call <code class="code " id="scope-functions.md-dcd4f929"  >let</code> with a safe call (<code class="code " id="scope-functions.md-d233be40"  >?</code> ). For objects that don\'t match the predicate, <code class="code " id="scope-functions.md-c8158832"  >takeIf</code> returns <code class="code " id="scope-functions.md-3b1d51af"  >null</code> and <code class="code " id="scope-functions.md-34c4a7e3"  >let</code> isn\'t invoked.</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-b1b9e0c9"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    fun displaySubstringPosition(input: String, sub: String) {\n        input.indexOf(sub).takeIf { it &gt;= 0 }?.let {\n            println(&quot;The substring $sub is found in $input.&quot;)\n            println(&quot;Its start position is $it.&quot;)\n        }\n    }\n\n    displaySubstringPosition(&quot;010000011&quot;, &quot;11&quot;)\n    displaySubstringPosition(&quot;010000011&quot;, &quot;12&quot;)\n//sampleEnd\n}\n</div><p id="scope-functions.md-9bcf0ee3" >This is how the same function looks without the standard library functions:</p><div class="code-block" data-lang="kotlin" id="scope-functions.md-e04da0b8"        data-runnable="true" data-min-compiler-version="1.3"  >fun main() {\n//sampleStart\n    fun displaySubstringPosition(input: String, sub: String) {\n        val index = input.indexOf(sub)\n        if (index &gt;= 0) {\n            println(&quot;The substring $sub is found in $input.&quot;)\n            println(&quot;Its start position is $index.&quot;)\n        }\n    }\n\n    displaySubstringPosition(&quot;010000011&quot;, &quot;11&quot;)\n    displaySubstringPosition(&quot;010000011&quot;, &quot;12&quot;)\n//sampleEnd\n}\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="opt-in-requirements.md"  >Opt-in requirements</h1><aside data-type="warning" class="prompt" data-title="" id="opt-in-requirements.md-40824aef"><p id="opt-in-requirements.md-a4517c44" >The opt-in requirement annotations <code class="code " id="opt-in-requirements.md-7ced7241"  >@RequiresOptIn</code> and <code class="code " id="opt-in-requirements.md-86c47159"  >@OptIn</code> are <a href="#components-stability.md" id="opt-in-requirements.md-2c191cc3"   >Experimental</a>. They may be dropped or changed at any time. Opt-in is required (see details below). Use them only for evaluation purposes. We appreciate your feedback on it in <a href="https://youtrack.jetbrains.com/issues/KT" id="opt-in-requirements.md-db58c657"   data-external="true" rel="noopener noreferrer" >YouTrack</a>.</p></aside><aside data-type="note" class="prompt" data-title="" id="opt-in-requirements.md-e4c186d" ><p id="opt-in-requirements.md-9fc780e5" ><code class="code " id="opt-in-requirements.md-76e7bde2"  >@RequireOptIn</code> and <code class="code " id="opt-in-requirements.md-6024ccf8"  >@OptIn</code> annotations were introduced in 1.3.70 to replace previously used <code class="code " id="opt-in-requirements.md-fbeed8f9"  >@Experimental</code> and <code class="code " id="opt-in-requirements.md-e373a634"  >@UseExperimental</code>; at the same time, <code class="code " id="opt-in-requirements.md-13197fd8"  >-Xopt-in</code> compiler option replaced <code class="code " id="opt-in-requirements.md-d7086e1a"  >-Xuse-experimental</code>.</p></aside><p id="opt-in-requirements.md-15e117b" >The Kotlin standard library provides a mechanism for requiring and giving explicit consent for using certain elements of APIs. This mechanism lets library developers inform users of their APIs about specific conditions that require opt-in, for example, if an API is in the experimental state and is likely to change in the future.</p><p id="opt-in-requirements.md-14f0899f" >To prevent potential issues, the compiler warns users of such APIs about these conditions and requires them to opt in before using the API.</p><section class="chapter"  ><h2 id="opt-in-requirements.md-opt-in-to-using-api" data-toc="opt-in-requirements#opt-in-requirements.md-opt-in-to-using-api"  >Opt in to using API</h2><p id="opt-in-requirements.md-f6ba853e" >If a library author marks a declaration from a library\'s API as <a href="#opt-in-requirements.md-require-opt-in-for-api" id="opt-in-requirements.md-cb12645b"   >requiring opt-in</a>, you should give an explicit consent for using it in your code. There are several ways to opt in to such APIs, all applicable without technical limitations. You are free to choose the way that you find best for your situation.</p><section class="chapter"  ><h3 id="opt-in-requirements.md-propagating-opt-in" data-toc="opt-in-requirements#opt-in-requirements.md-propagating-opt-in"  >Propagating opt-in</h3><p id="opt-in-requirements.md-eb00adc0" >When you use an API in the code intended for third-party use (a library), you can propagate its opt-in requirement to your API as well. To do this, annotate your declaration with the <a href="#opt-in-requirements.md-create-opt-in-requirement-annotations" id="opt-in-requirements.md-78e27896"   >opt-in requirement annotation</a> of the API used in its body. This enables you to use the API elements marked with this annotation.</p><div class="code-block" data-lang="kotlin" id="opt-in-requirements.md-83059fe7"         >// library code\n@RequiresOptIn(message = &quot;This API is experimental. It may be changed in the future without notice.&quot;)\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nannotation class MyDateTime // Opt-in requirement annotation\n\n@MyDateTime                            \nclass DateProvider // A class requiring opt-in\n</div><div class="code-block" data-lang="kotlin" id="opt-in-requirements.md-856b5174"         >// client code\nfun getYear(): Int {  \n    val dateProvider: DateProvider // Error: DateProvider requires opt-in\n    // ...\n}\n\n@MyDateTime\nfun getDate(): Date {  \n    val dateProvider: DateProvider // OK: the function requires opt-in as well\n    // ...\n}\n\nfun displayDate() {\n    println(getDate()) // error: getDate() requires opt-in\n}\n</div><p id="opt-in-requirements.md-d664b5dc" >As you can see in this example, the annotated function appears to be a part of the <code class="code " id="opt-in-requirements.md-3ac31b19"  >@MyDateTime</code> API. So, such an opt-in propagates the opt-in requirement to the client code; its clients will see the same warning message and be required to consent as well. To use multiple APIs that require opt-in, mark the declaration with all their opt-in requirement annotations.</p></section><section class="chapter"  ><h3 id="opt-in-requirements.md-non-propagating-opt-in" data-toc="opt-in-requirements#opt-in-requirements.md-non-propagating-opt-in"  >Non-propagating opt-in</h3><p id="opt-in-requirements.md-241d4c9" >In modules that don\'t expose their own API, such as applications, you can opt in to using APIs without propagating the opt-in requirement to your code. In this case, mark your declaration with <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-opt-in/" id="opt-in-requirements.md-964287a0"   data-external="true" rel="noopener noreferrer" >@OptIn</a> passing the opt-in requirement annotation as its argument:</p><div class="code-block" data-lang="kotlin" id="opt-in-requirements.md-1616f1f1"         >// library code\n@RequiresOptIn(message = &quot;This API is experimental. It may be changed in the future without notice.&quot;)\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nannotation class MyDateTime // Opt-in requirement annotation\n\n@MyDateTime                            \nclass DateProvider // A class requiring opt-in\n</div><div class="code-block" data-lang="kotlin" id="opt-in-requirements.md-b1474e70"         >//client code\n@OptIn(MyDateTime::class)\nfun getDate(): Date { // Uses DateProvider; doesn\'t propagate the opt-in requirement\n    val dateProvider: DateProvider\n    // ...\n}\n\nfun displayDate() {\n    println(getDate()) // OK: opt-in is not required\n}\n</div><p id="opt-in-requirements.md-251dbc35" >When somebody calls the function <code class="code " id="opt-in-requirements.md-1cee5394"  >getDate()</code>, they won\'t be informed about the opt-in requirements for APIs used in its body.</p><p id="opt-in-requirements.md-b498a4b7" >To use an API that requires opt-in in all functions and classes in a file, add the file-level annotation <code class="code " id="opt-in-requirements.md-4f73bd94"  >@file:OptIn</code> to the top of the file before the package specification and imports.</p><div class="code-block" data-lang="kotlin" id="opt-in-requirements.md-d059d8a1"         >//client code\n@file:OptIn(MyDateTime::class)\n</div></section><section class="chapter"  ><h3 id="opt-in-requirements.md-module-wide-opt-in" data-toc="opt-in-requirements#opt-in-requirements.md-module-wide-opt-in"  >Module-wide opt-in</h3><p id="opt-in-requirements.md-69025c5a" >If you don\'t want to annotate every usage of APIs that require opt-in, you can opt in to them for your whole module. To opt in to using an API in a module, compile it with the argument <code class="code " id="opt-in-requirements.md-5a7d6b72"  >-Xopt-in</code>, specifying the fully qualified name of the opt-in requirement annotation of the API you use: <code class="code " id="opt-in-requirements.md-b735d06f"  >-Xopt-in=org.mylibrary.OptInAnnotation</code>. Compiling with this argument has the same effect as if every declaration in the module had the annotation <code class="code " id="opt-in-requirements.md-2a67c37d"  >@OptIn(OptInAnnotation::class)</code>.</p><p id="opt-in-requirements.md-4f50e70b" >If you build your module with Gradle, you can add arguments like this:</p><div class="tabs" id="opt-in-requirements.md-1fb91687" ><div class="tabs__content" data-gtm="tab" id="opt-in-requirements.md-394e46da"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="opt-in-requirements.md-394e46da"   data-title="Groovy"      >tasks.withType(KotlinCompile).configureEach {\n    kotlinOptions {\n        freeCompilerArgs += &quot;-Xopt-in=org.mylibrary.OptInAnnotation&quot;\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="opt-in-requirements.md-74c57a98"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="opt-in-requirements.md-74c57a98"   data-title="Kotlin"      >tasks.withType&lt;KotlinCompile&gt;().configureEach {\n    kotlinOptions.freeCompilerArgs += &quot;-Xopt-in=org.mylibrary.OptInAnnotation&quot;\n}\n</div></div></div><p id="opt-in-requirements.md-cd82a25e" >If your Gradle module is a multiplatform module, use the <code class="code " id="opt-in-requirements.md-98984f85"  >useExperimentalAnnotation</code> method:</p><div class="tabs" id="opt-in-requirements.md-44078052" ><div class="tabs__content" data-gtm="tab" id="opt-in-requirements.md-25f59fc1"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="opt-in-requirements.md-25f59fc1"   data-title="Groovy"      >sourceSets {\n    all {\n        languageSettings {\n            useExperimentalAnnotation(\'org.mylibrary.OptInAnnotation\')\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="opt-in-requirements.md-5271781"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="opt-in-requirements.md-5271781"   data-title="Kotlin"      >sourceSets {\n    all {\n        languageSettings.useExperimentalAnnotation(&quot;org.mylibrary.OptInAnnotation&quot;)\n    }\n}\n</div></div></div><p id="opt-in-requirements.md-5c8f1b69" >For Maven, it would be:</p><div class="code-block" data-lang="markup" id="opt-in-requirements.md-60dc0aea"         >&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n            &lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;\n            &lt;version&gt;${kotlin.version}&lt;/version&gt;\n            &lt;executions&gt;...&lt;/executions&gt;\n            &lt;configuration&gt;\n                &lt;args&gt;\n                    &lt;arg&gt;-Xopt-in=org.mylibrary.OptInAnnotation&lt;/arg&gt;                    \n                &lt;/args&gt;\n            &lt;/configuration&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n</div><p id="opt-in-requirements.md-eec98eb1" >To opt in to multiple APIs on the module level, add one of the described arguments for each opt-in requirement marker used in your module.</p></section></section><section class="chapter"  ><h2 id="opt-in-requirements.md-require-opt-in-for-api" data-toc="opt-in-requirements#opt-in-requirements.md-require-opt-in-for-api"  >Require opt-in for API</h2><section class="chapter"  ><h3 id="opt-in-requirements.md-create-opt-in-requirement-annotations" data-toc="opt-in-requirements#opt-in-requirements.md-create-opt-in-requirement-annotations"  >Create opt-in requirement annotations</h3><p id="opt-in-requirements.md-f21ad42b" >If you want to require explicit consent to using your module\'s API, create an annotation class to use as an <em id="opt-in-requirements.md-9bf6bd1d" class=""  >opt-in requirement annotation</em>. This class must be annotated with <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-requires-opt-in/" id="opt-in-requirements.md-d982ad83"   data-external="true" rel="noopener noreferrer" >@RequiresOptIn</a>:</p><div class="code-block" data-lang="kotlin" id="opt-in-requirements.md-519c6d28"         >@RequiresOptIn\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nannotation class MyDateTime\n</div><p id="opt-in-requirements.md-f85da1f2" >Opt-in requirement annotations must meet several requirements:</p><ul class="list _ul" id="opt-in-requirements.md-d368bc42"   ><li class="list__item" id="opt-in-requirements.md-1274613b" ><p><code class="code " id="opt-in-requirements.md-1a6c9955"  >BINARY</code> <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/-retention/" id="opt-in-requirements.md-5c445ed9"   data-external="true" rel="noopener noreferrer" >retention</a></p></li><li class="list__item" id="opt-in-requirements.md-c1fd142e" ><p>No <code class="code " id="opt-in-requirements.md-1153ee23"  >EXPRESSION</code> and <code class="code " id="opt-in-requirements.md-3db31a7a"  >FILE</code> among <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/-target/" id="opt-in-requirements.md-c2974b2d"   data-external="true" rel="noopener noreferrer" >targets</a></p></li><li class="list__item" id="opt-in-requirements.md-c78dcf38" ><p>No parameters.</p></li></ul><p id="opt-in-requirements.md-77e61f34" >An opt-in requirement can have one of two severity <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-requires-opt-in/-level/" id="opt-in-requirements.md-2faef7d0"   data-external="true" rel="noopener noreferrer" >levels</a>:</p><ul class="list _ul" id="opt-in-requirements.md-dde6e090"   ><li class="list__item" id="opt-in-requirements.md-89829232" ><p><code class="code " id="opt-in-requirements.md-a3c4c182"  >RequiresOptIn.Level.ERROR</code>. Opt-in is mandatory. Otherwise, the code that uses marked API won\'t compile. Default level.</p></li><li class="list__item" id="opt-in-requirements.md-90d499a7" ><p><code class="code " id="opt-in-requirements.md-b06e8655"  >RequiresOptIn.Level.WARNING</code>. Opt-in is not mandatory, but advisable. Without it, the compiler raises a warning.</p></li></ul><p id="opt-in-requirements.md-c3cadc36" >To set the desired level, specify the <code class="code " id="opt-in-requirements.md-3ee5e2b1"  >level</code> parameter of the <code class="code " id="opt-in-requirements.md-646f98d1"  >@RequiresOptIn</code> annotation.</p><p id="opt-in-requirements.md-177db70f" >Additionally, you can provide a <code class="code " id="opt-in-requirements.md-18d5fea5"  >message</code> to inform API users about special condition of using the API. The compiler will show it to users that use the API without opt-in.</p><div class="code-block" data-lang="kotlin" id="opt-in-requirements.md-b0b402a8"         >@RequiresOptIn(level = RequiresOptIn.Level.WARNING, message = &quot;This API is experimental. It can be incompatibly changed in the future.&quot;)\n@Retention(AnnotationRetention.BINARY)\n@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION)\nannotation class ExperimentalDateTime\n</div><p id="opt-in-requirements.md-de87a040" >If you publish multiple independent features that require opt-in, declare an annotation for each. This makes the use of API safer for your clients: they can use only the features that they explicitly accept. This also lets you remove the opt-in requirements from the features independently.</p></section><section class="chapter"  ><h3 id="opt-in-requirements.md-mark-api-elements" data-toc="opt-in-requirements#opt-in-requirements.md-mark-api-elements"  >Mark API elements</h3><p id="opt-in-requirements.md-53d56b64" >To require an opt-in to using an API element, annotate its declaration with an opt-in requirement annotation:</p><div class="code-block" data-lang="kotlin" id="opt-in-requirements.md-62c4116d"         >@MyDateTime\nclass DateProvider\n\n@MyDateTime\nfun getTime(): Time {}\n</div></section></section><section class="chapter"  ><h2 id="opt-in-requirements.md-opt-in-requirements-for-pre-stable-apis" data-toc="opt-in-requirements#opt-in-requirements.md-opt-in-requirements-for-pre-stable-apis"  >Opt-in requirements for pre-stable APIs</h2><p id="opt-in-requirements.md-3acec31a" >If you use opt-in requirements for features that are not stable yet, carefully handle the API graduation to avoid breaking the client code.</p><p id="opt-in-requirements.md-3c71e2ee" >Once your pre-stable API graduates and is released in a stable state, remove its opt-in requirement annotations from declarations. The clients will be able to use them without restriction. However, you should leave the annotation classes in modules so that the existing client code remains compatible.</p><p id="opt-in-requirements.md-7f62caca" >To let the API users update their modules accordingly (remove the annotations from their code and recompile), mark the annotations as <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-deprecated/" id="opt-in-requirements.md-d20b2c85"   data-external="true" rel="noopener noreferrer" ><code class="code " id="opt-in-requirements.md-3ff44ee"  >@Deprecated</code></a> and provide the explanation in the deprecation message.</p><div class="code-block" data-lang="kotlin" id="opt-in-requirements.md-379dd75f"         >@Deprecated(&quot;This opt-in requirement is not used anymore. Remove its usages from your code.&quot;)\n@RequiresOptIn\nannotation class ExperimentalDateTime\n</div></section><section class="chapter"  ><h2 id="opt-in-requirements.md-experimental-status-of-the-opt-in-requirements" data-toc="opt-in-requirements#opt-in-requirements.md-experimental-status-of-the-opt-in-requirements"  >Experimental status of the opt-in requirements</h2><p id="opt-in-requirements.md-de60e868" >The opt-in requirement mechanism is currently <a href="#components-stability.md" id="opt-in-requirements.md-aaf0de26"   >experimental</a>. This means that in future releases it may be changed in ways that make it incompatible.</p><p id="opt-in-requirements.md-a583fec2" >To make the users of annotations <code class="code " id="opt-in-requirements.md-d9fb6789"  >@OptIn</code> and <code class="code " id="opt-in-requirements.md-833a2ad0"  >@RequiresOptIn</code> aware of their experimental status, the compiler raises warnings when compiling the code with these annotations:</p><p id="opt-in-requirements.md-f2106646" ><code class="code " id="opt-in-requirements.md-d5edf7fc"  >This class can only be used with the compiler argument \'-Xopt-in=kotlin.RequiresOptIn\'</code></p><p id="opt-in-requirements.md-121e487f" >To remove the warnings, add the compiler argument <code class="code " id="opt-in-requirements.md-1d0dfda3"  >-Xopt-in=kotlin.RequiresOptIn</code>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="serialization.md"  >Serialization</h1><p id="serialization.md-fb863450" ><em id="serialization.md-8bae614d" class=""  >Serialization</em> is the process of converting data used by an application to a format that can be transferred over a network or stored in a database or a file. In turn, <em id="serialization.md-f21b9ab3" class=""  >deserialization</em> is the opposite process of reading data from an external source and converting it into a runtime object. Together they are an essential part of most applications that exchange data with third parties.</p><p id="serialization.md-da7537f6" >Some data serialization formats, such as <a href="https://www.json.org/json-en.html" id="serialization.md-68041c78"   data-external="true" rel="noopener noreferrer" >JSON</a> and <a href="https://developers.google.com/protocol-buffers" id="serialization.md-27a40b68"   data-external="true" rel="noopener noreferrer" >protocol buffers</a> are particularly common. Being language-neutral and platform-neutral, they enable data exchange between systems written in any modern language.</p><p id="serialization.md-506d97a6" >In Kotlin, data serialization tools are available in a separate component, <a href="https://github.com/Kotlin/kotlinx.serialization" id="serialization.md-f4a3f506"   data-external="true" rel="noopener noreferrer" >kotlinx.serialization</a>. It consists of two main parts: the Gradle plugin – <code class="code " id="serialization.md-a09a7f9c"  >org.jetbrains.kotlin.plugin.serialization</code> and the runtime libraries.</p><section class="chapter"  ><h2 id="serialization.md-libraries" data-toc="serialization#serialization.md-libraries"  >Libraries</h2><p id="serialization.md-1010a051" ><code class="code " id="serialization.md-7e0247cd"  >kotlinx.serialization</code> provides sets of libraries for all supported platforms – JVM, JavaScript, Native – and for various serialization formats – JSON, CBOR, protocol buffers, and others. You can find the complete list of supported serialization formats <a href="#serialization.md-formats" id="serialization.md-39664af2"   >below</a>.</p><p id="serialization.md-e4778fc0" >All Kotlin serialization libraries belong to the <code class="code " id="serialization.md-eda4771e"  >org.jetbrains.kotlinx:</code> group. Their names start with <code class="code " id="serialization.md-243b1e3c"  >kotlinx-serialization-</code> and have suffixes that reflect the serialization format. Examples:</p><ul class="list _ul" id="serialization.md-d1566963"   ><li class="list__item" id="serialization.md-b534ede3" ><p><code class="code " id="serialization.md-eba363e7"  >org.jetbrains.kotlinx:kotlinx-serialization-json</code> provides JSON serialization for Kotlin projects.</p></li><li class="list__item" id="serialization.md-4bdd5f35" ><p><code class="code " id="serialization.md-f6f4c234"  >org.jetbrains.kotlinx:kotlinx-serialization-cbor</code> provides CBOR serialization.</p></li></ul><p id="serialization.md-c468d7c2" >Platform-specific artifacts are handled automatically; you don\'t need to add them manually. Use the same dependencies in JVM, JS, Native, and multiplatform projects.</p><p id="serialization.md-8eb97dd2" >Note that the <code class="code " id="serialization.md-7aec1790"  >kotlinx.serialization</code> libraries use their own versioning structure, which doesn\'t match Kotlin\'s versioning. Check out the releases on <a href="https://github.com/Kotlin/kotlinx.serialization/releases" id="serialization.md-8ef91432"   data-external="true" rel="noopener noreferrer" >GitHub</a> to find the latest versions.</p></section><section class="chapter"  ><h2 id="serialization.md-formats" data-toc="serialization#serialization.md-formats"  >Formats</h2><p id="serialization.md-2a57fb" ><code class="code " id="serialization.md-9191c53d"  >kotlinx.serialization</code> includes libraries for various serialization formats:</p><ul class="list _ul" id="serialization.md-80e767f5"   ><li class="list__item" id="serialization.md-66378aca" ><p><a href="https://www.json.org/" id="serialization.md-a228a23c"   data-external="true" rel="noopener noreferrer" >JSON</a>: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#json" id="serialization.md-56a96b11"   data-external="true" rel="noopener noreferrer" ><code class="code " id="serialization.md-ee03f969"  >kotlinx-serialization-json</code></a></p></li><li class="list__item" id="serialization.md-97a688" ><p><a href="https://developers.google.com/protocol-buffers" id="serialization.md-611cfcb0"   data-external="true" rel="noopener noreferrer" >Protocol buffers</a>: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#protobuf" id="serialization.md-729c70f2"   data-external="true" rel="noopener noreferrer" ><code class="code " id="serialization.md-3210d88b"  >kotlinx-serialization-protobuf</code></a></p></li><li class="list__item" id="serialization.md-1b3050dd" ><p><a href="https://cbor.io/" id="serialization.md-40357120"   data-external="true" rel="noopener noreferrer" >CBOR</a>: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#cbor" id="serialization.md-fc174325"   data-external="true" rel="noopener noreferrer" ><code class="code " id="serialization.md-befa4fb9"  >kotlinx-serialization-cbor</code></a></p></li><li class="list__item" id="serialization.md-35336e9" ><p><a href="https://en.wikipedia.org/wiki/.properties" id="serialization.md-a1cc8b6c"   data-external="true" rel="noopener noreferrer" >Properties</a>: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#properties" id="serialization.md-101cb6d2"   data-external="true" rel="noopener noreferrer" ><code class="code " id="serialization.md-64e3f62d"  >kotlinx-serialization-properties</code></a></p></li><li class="list__item" id="serialization.md-4208d598" ><p><a href="https://github.com/lightbend/config/blob/master/HOCON.md" id="serialization.md-e6c91fa2"   data-external="true" rel="noopener noreferrer" >HOCON</a>: <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#hocon" id="serialization.md-da40b72c"   data-external="true" rel="noopener noreferrer" ><code class="code " id="serialization.md-d564e16d"  >kotlinx-serialization-hocon</code></a> (only on JVM)</p></li></ul><p id="serialization.md-a137dbb1" >Note that all libraries except JSON serialization (<code class="code " id="serialization.md-31f024f2"  >kotlinx-serialization-core</code>) are <a href="#components-stability.md" id="serialization.md-fc37b4c7"   >Experimental</a>, which means their API can be changed without notice.</p><p id="serialization.md-71d5b2a2" >There are also community-maintained libraries that support more serialization formats, such as <a href="https://yaml.org/" id="serialization.md-1996d2e6"   data-external="true" rel="noopener noreferrer" >YAML</a> or <a href="https://avro.apache.org/" id="serialization.md-8f2017ab"   data-external="true" rel="noopener noreferrer" >Apache Avro</a>. For detailed information about available serialization formats, see the <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md" id="serialization.md-721d24b0"   data-external="true" rel="noopener noreferrer" ><code class="code " id="serialization.md-26c957d7"  >kotlinx.serialization</code> documentation</a>.</p></section><section class="chapter"  ><h2 id="serialization.md-example-json-serialization" data-toc="serialization#serialization.md-example-json-serialization"  >Example: JSON serialization</h2><p id="serialization.md-75f82847" >Let’s take a look at how to serialize Kotlin objects into JSON.</p><p id="serialization.md-b594a3db" >Before starting, you’ll need to configure your build script so that you can use Kotlin serialization tools in your project:</p><ol class="list _decimal" id="serialization.md-833743a3"   ><li class="list__item" id="serialization.md-b6f7ace5" ><p id="serialization.md-3a87446d" >Apply the Kotlin serialization Gradle plugin <code class="code " id="serialization.md-127b1e11"  >org.jetbrains.kotlin.plugin.serialization</code> (or <code class="code " id="serialization.md-b73e1b09"  >kotlin(“plugin.serialization”)</code> in the Kotlin Gradle DSL).</p><div class="tabs" id="serialization.md-8f604438" ><div class="tabs__content" data-gtm="tab" id="serialization.md-5c019370"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="serialization.md-5c019370"   data-title="Groovy"      >plugins {\n    id \'org.jetbrains.kotlin.jvm\' version \'1.4.32\'\n    id \'org.jetbrains.kotlin.plugin.serialization\' version \'1.4.32\'  \n}\n</div></div><div class="tabs__content" data-gtm="tab" id="serialization.md-d930aeee"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="serialization.md-d930aeee"   data-title="Kotlin"      >plugins {\n    kotlin(&quot;jvm&quot;) version &quot;1.4.32&quot;\n    kotlin(&quot;plugin.serialization&quot;) version &quot;1.4.32&quot;\n}\n</div></div></div></li><li class="list__item" id="serialization.md-661c556" ><p id="serialization.md-9e94744" >Add the JSON serialization library dependency: <code class="code " id="serialization.md-2eead5c9"  >org.jetbrains.kotlinx:kotlinx-serialization-json:1.1.0</code></p><div class="tabs" id="serialization.md-31d0f20c" ><div class="tabs__content" data-gtm="tab" id="serialization.md-7ca5763c"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="serialization.md-7ca5763c"   data-title="Groovy"      >dependencies {\n    implementation \'org.jetbrains.kotlinx:kotlinx-serialization-json:1.1.0\'\n} \n</div></div><div class="tabs__content" data-gtm="tab" id="serialization.md-4e03e643"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="serialization.md-4e03e643"   data-title="Kotlin"      >dependencies {\n    implementation(&quot;org.jetbrains.kotlinx:kotlinx-serialization-json:1.1.0&quot;)\n} \n</div></div></div></li></ol><p id="serialization.md-6c84770a" >Now you\'re ready to use the serialization API in your code.</p><p id="serialization.md-8ad95155" >First, make a class serializable by annotating it with <code class="code " id="serialization.md-fd7d554e"  >@Serializable</code>.</p><div class="code-block" data-lang="kotlin" id="serialization.md-824c93b3"         >@Serializable\ndata class Data(val a: Int, val b: String)\n</div><p id="serialization.md-e786a539" >You can now serialize an instance of this class by calling <code class="code " id="serialization.md-480658b1"  >Json.encodeToString()</code>.</p><div class="code-block" data-lang="kotlin" id="serialization.md-6da00bcb"         >Json.encodeToString(Data(42, &quot;str&quot;))\n</div><p id="serialization.md-9485fbb1" >As a result, you get a string containing the state of this object in the JSON format: <code class="code " id="serialization.md-58c941bf"  >{&quot;a&quot;: 42, &quot;b&quot;: &quot;str&quot;}</code></p><p id="serialization.md-1960c518" >You can also serialize object collections, such as lists, in a single call.</p><div class="code-block" data-lang="kotlin" id="serialization.md-5adb9aae"         >val dataList = listOf(Data(42, &quot;str&quot;), Data(12, &quot;test&quot;))\nval jsonList = Json.encodeToString(dataList)\n</div><p id="serialization.md-efa5233e" >To deserialize an object from JSON, use the <code class="code " id="serialization.md-878cd8ef"  >decodeFromString()</code> function:</p><div class="code-block" data-lang="kotlin" id="serialization.md-ca44416"         >val obj = Json.decodeFromString&lt;Data&gt;(&quot;&quot;&quot;{&quot;a&quot;:42, &quot;b&quot;: &quot;str&quot;}&quot;&quot;&quot;)\n</div><p id="serialization.md-5a0b646b" >For more information about serialization in Kotlin, see the <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serialization-guide.md" id="serialization.md-8dfafa33"   data-external="true" rel="noopener noreferrer" >Kotlin Serialization Guide</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="keyword-reference.md"  >Keywords and operators</h1><section class="chapter"  ><h2 id="keyword-reference.md-hard-keywords" data-toc="keyword-reference#keyword-reference.md-hard-keywords"  >Hard keywords</h2><p id="keyword-reference.md-d406a94f" >The following tokens are always interpreted as keywords and cannot be used as identifiers:</p><ul class="list _ul" id="keyword-reference.md-f54538bd"   ><li class="list__item" id="keyword-reference.md-65190979" ><code class="code " id="keyword-reference.md-7eb508b0"  >as</code><ul class="list _ul" id="keyword-reference.md-221d8b79"   ><li class="list__item" id="keyword-reference.md-5b90a6f7" ><p>is used for <a href="#typecasts.md-unsafe-cast-operator" id="keyword-reference.md-db7bd869"   >type casts</a></p></li><li class="list__item" id="keyword-reference.md-73d01131" ><p>specifies an <a href="#packages.md-imports" id="keyword-reference.md-ff0ea6c0"   >alias for an import</a></p></li></ul></li><li class="list__item" id="keyword-reference.md-83b8ee80" ><p><code class="code " id="keyword-reference.md-eaa82c44"  >as?</code> is used for <a href="#typecasts.md-safe-nullable-cast-operator" id="keyword-reference.md-351b2377"   >safe type casts</a></p></li><li class="list__item" id="keyword-reference.md-911e67bf" ><p><code class="code " id="keyword-reference.md-35918885"  >break</code> <a href="#returns.md" id="keyword-reference.md-f142651d"   >terminates the execution of a loop</a></p></li><li class="list__item" id="keyword-reference.md-2d492ed1" ><p><code class="code " id="keyword-reference.md-60e07a46"  >class</code> declares a <a href="#classes.md" id="keyword-reference.md-49e9282b"   >class</a></p></li><li class="list__item" id="keyword-reference.md-b105982d" ><p><code class="code " id="keyword-reference.md-ea4ebae9"  >continue</code> <a href="#returns.md" id="keyword-reference.md-9d444aec"   >proceeds to the next step of the nearest enclosing loop</a></p></li><li class="list__item" id="keyword-reference.md-9f0198f2" ><p><code class="code " id="keyword-reference.md-208eb4e6"  >do</code> begins a <a href="#control-flow.md-while-loops" id="keyword-reference.md-7aa0a94a"   >do/while loop</a> (loop with postcondition)</p></li><li class="list__item" id="keyword-reference.md-eda0443" ><p><code class="code " id="keyword-reference.md-2c5c45d2"  >else</code> defines the branch of an <a href="#control-flow.md-if-expression" id="keyword-reference.md-680c6747"   >if expression</a> which is executed when the condition is false</p></li><li class="list__item" id="keyword-reference.md-86df0b22" ><p><code class="code " id="keyword-reference.md-8a4dab4d"  >false</code> specifies the \'false\' value of the <a href="#basic-types.md-booleans" id="keyword-reference.md-2fa58ea1"   >Boolean type</a></p></li><li class="list__item" id="keyword-reference.md-e05a4b72" ><p><code class="code " id="keyword-reference.md-45310f48"  >for</code> begins a <a href="#control-flow.md-for-loops" id="keyword-reference.md-a130f2f"   >for loop</a></p></li><li class="list__item" id="keyword-reference.md-a6358fb7" ><p><code class="code " id="keyword-reference.md-c563467b"  >fun</code> declares a <a href="#functions.md" id="keyword-reference.md-84634c7f"   >function</a></p></li><li class="list__item" id="keyword-reference.md-fb48024" ><p><code class="code " id="keyword-reference.md-b4e33fd3"  >if</code> begins an <a href="#control-flow.md-if-expression" id="keyword-reference.md-5e101882"   >if expression</a></p></li><li class="list__item" id="keyword-reference.md-629ebfc" ><code class="code " id="keyword-reference.md-2de181b4"  >in</code><ul class="list _ul" id="keyword-reference.md-4510840"   ><li class="list__item" id="keyword-reference.md-92c47c03" ><p>specifies the object being iterated in a <a href="#control-flow.md-for-loops" id="keyword-reference.md-b5fc7825"   >for loop</a></p></li><li class="list__item" id="keyword-reference.md-7479ec24" ><p>is used as an infix operator to check that a value belongs to <a href="#ranges.md" id="keyword-reference.md-30a83b33"   >a range</a>, a collection or another entity that <a href="#operator-overloading.md-in-operator" id="keyword-reference.md-c8be666b"   >defines the \'contains\' method</a></p></li><li class="list__item" id="keyword-reference.md-8519539b" ><p>is used in <a href="#control-flow.md-when-expression" id="keyword-reference.md-6aa53130"   >when expressions</a> for the same purpose</p></li><li class="list__item" id="keyword-reference.md-9b2b0c77" ><p>marks a type parameter as <a href="#generics.md-declaration-site-variance" id="keyword-reference.md-b1d03def"   >contravariant</a></p></li></ul></li><li class="list__item" id="keyword-reference.md-a09b1c7a" ><code class="code " id="keyword-reference.md-c7ccb7f7"  >!in</code><ul class="list _ul" id="keyword-reference.md-785af04b"   ><li class="list__item" id="keyword-reference.md-fe281899" ><p>is used as an operator to check that a value does NOT belong to <a href="#ranges.md" id="keyword-reference.md-a46a7fdf"   >a range</a>, a collection or another entity that <a href="#operator-overloading.md-in-operator" id="keyword-reference.md-de4b8436"   >defines the \'contains\' method</a></p></li><li class="list__item" id="keyword-reference.md-48eb848a" ><p>is used in <a href="#control-flow.md-when-expression" id="keyword-reference.md-3e6358a3"   >when expressions</a> for the same purpose</p></li></ul></li><li class="list__item" id="keyword-reference.md-717b41aa" ><p><code class="code " id="keyword-reference.md-c9149cb8"  >interface</code> declares an <a href="#interfaces.md" id="keyword-reference.md-d498680c"   >interface</a></p></li><li class="list__item" id="keyword-reference.md-184f3a08" ><code class="code " id="keyword-reference.md-7f6b7c84"  >is</code><ul class="list _ul" id="keyword-reference.md-bbb4e50d"   ><li class="list__item" id="keyword-reference.md-ae76a44c" ><p>checks that <a href="#typecasts.md-is-and-is-operators" id="keyword-reference.md-5dac2557"   >a value has a certain type</a></p></li><li class="list__item" id="keyword-reference.md-3d885e23" ><p>is used in <a href="#control-flow.md-when-expression" id="keyword-reference.md-192c5e79"   >when expressions</a> for the same purpose</p></li></ul></li><li class="list__item" id="keyword-reference.md-98c08d4a" ><code class="code " id="keyword-reference.md-d352dbc9"  >!is</code><ul class="list _ul" id="keyword-reference.md-3dabe3cc"   ><li class="list__item" id="keyword-reference.md-2d66042f" ><p>checks that <a href="#typecasts.md-is-and-is-operators" id="keyword-reference.md-44a53bb3"   >a value does NOT have a certain type</a></p></li><li class="list__item" id="keyword-reference.md-1577d096" ><p>is used in <a href="#control-flow.md-when-expression" id="keyword-reference.md-189b5b19"   >when expressions</a> for the same purpose</p></li></ul></li><li class="list__item" id="keyword-reference.md-fdd4b6bf" ><p><code class="code " id="keyword-reference.md-c793053e"  >null</code> is a constant representing an object reference that doesn\'t point to any object</p></li><li class="list__item" id="keyword-reference.md-24ba4383" ><p><code class="code " id="keyword-reference.md-e7c6aafc"  >object</code> declares <a href="#object-declarations.md" id="keyword-reference.md-c32eeacb"   >a class and its instance at the same time</a></p></li><li class="list__item" id="keyword-reference.md-35069758" ><p><code class="code " id="keyword-reference.md-bc71f0bf"  >package</code> specifies the <a href="#packages.md" id="keyword-reference.md-bfc4a903"   >package for the current file</a></p></li><li class="list__item" id="keyword-reference.md-57aa0f01" ><p><code class="code " id="keyword-reference.md-805e9802"  >return</code> <a href="#returns.md" id="keyword-reference.md-a68769ef"   >returns from the nearest enclosing function or anonymous function</a></p></li><li class="list__item" id="keyword-reference.md-39e8fedd" ><code class="code " id="keyword-reference.md-85b1dd44"  >super</code><ul class="list _ul" id="keyword-reference.md-a7cdf0fa"   ><li class="list__item" id="keyword-reference.md-31506c87" ><a href="#inheritance.md-calling-the-superclass-implementation" id="keyword-reference.md-614641c"   >refers to the superclass implementation of a method or property</a></li><li class="list__item" id="keyword-reference.md-6a270b2c" ><a href="#classes.md-inheritance" id="keyword-reference.md-1e852918"   >calls the superclass constructor from a secondary constructor</a></li></ul></li><li class="list__item" id="keyword-reference.md-a9aac95b" ><code class="code " id="keyword-reference.md-e8a8303b"  >this</code><ul class="list _ul" id="keyword-reference.md-7df40db1"   ><li class="list__item" id="keyword-reference.md-acd6ffb" ><p>refers to <a href="#this-expressions.md" id="keyword-reference.md-c25b175"   >the current receiver</a></p></li><li class="list__item" id="keyword-reference.md-ef9288e3" ><a href="#classes.md-constructors" id="keyword-reference.md-bc7de422"   >calls another constructor of the same class from a secondary constructor</a></li></ul></li><li class="list__item" id="keyword-reference.md-ab563fe4" ><p><code class="code " id="keyword-reference.md-dcb27c28"  >throw</code> <a href="#exceptions.md" id="keyword-reference.md-cf8b069"   >throws an exception</a></p></li><li class="list__item" id="keyword-reference.md-5a621e5b" ><p><code class="code " id="keyword-reference.md-afa0b9e1"  >true</code> specifies the \'true\' value of the <a href="#basic-types.md-booleans" id="keyword-reference.md-6a533a65"   >Boolean type</a></p></li><li class="list__item" id="keyword-reference.md-6a59389b" ><p><code class="code " id="keyword-reference.md-a9529236"  >try</code> <a href="#exceptions.md" id="keyword-reference.md-8082202d"   >begins an exception handling block</a></p></li><li class="list__item" id="keyword-reference.md-74ceab4d" ><p><code class="code " id="keyword-reference.md-74581dbc"  >typealias</code> declares a <a href="#type-aliases.md" id="keyword-reference.md-ddf27441"   >type alias</a></p></li><li class="list__item" id="keyword-reference.md-16912d6" ><p><code class="code " id="keyword-reference.md-cad66606"  >typeof</code> reserved for future use</p></li><li class="list__item" id="keyword-reference.md-e2030dcc" ><p><code class="code " id="keyword-reference.md-2a9fc7b1"  >val</code> declares a read-only <a href="#properties.md" id="keyword-reference.md-bfa772a0"   >property</a> or <a href="#basic-syntax.md-variables" id="keyword-reference.md-b0854cd1"   >local variable</a></p></li><li class="list__item" id="keyword-reference.md-627c600c" ><p><code class="code " id="keyword-reference.md-f14f5997"  >var</code> declares a mutable <a href="#properties.md" id="keyword-reference.md-7cbd0e29"   >property</a> or <a href="#basic-syntax.md-variables" id="keyword-reference.md-ade99d5c"   >local variable</a></p></li><li class="list__item" id="keyword-reference.md-7ddf80c0" ><p><code class="code " id="keyword-reference.md-e50bb51"  >when</code> begins a <a href="#control-flow.md-when-expression" id="keyword-reference.md-91bd7d4d"   >when expression</a> (executes one of the given branches)</p></li><li class="list__item" id="keyword-reference.md-5caf3254" ><p><code class="code " id="keyword-reference.md-ea19d536"  >while</code> begins a <a href="#control-flow.md-while-loops" id="keyword-reference.md-8132f042"   >while loop</a> (loop with precondition)</p></li></ul></section><section class="chapter"  ><h2 id="keyword-reference.md-soft-keywords" data-toc="keyword-reference#keyword-reference.md-soft-keywords"  >Soft keywords</h2><p id="keyword-reference.md-ddcb48fd" >The following tokens act as keywords in the context when they are applicable and can be used as identifiers in other contexts:</p><ul class="list _ul" id="keyword-reference.md-355efcd6"   ><li class="list__item" id="keyword-reference.md-86adcecb" ><code class="code " id="keyword-reference.md-5033ca3e"  >by</code><ul class="list _ul" id="keyword-reference.md-b69f5c07"   ><li class="list__item" id="keyword-reference.md-759c2c5" ><a href="#delegation.md" id="keyword-reference.md-f75cec28"   >delegates the implementation of an interface to another object</a></li><li class="list__item" id="keyword-reference.md-bd986787" ><a href="#delegated-properties.md" id="keyword-reference.md-62928d9c"   >delegates the implementation of accessors for a property to another object</a></li></ul></li><li class="list__item" id="keyword-reference.md-d05ef45e" ><p><code class="code " id="keyword-reference.md-3a03d7d3"  >catch</code> begins a block that <a href="#exceptions.md" id="keyword-reference.md-e7001dd9"   >handles a specific exception type</a></p></li><li class="list__item" id="keyword-reference.md-146b40f3" ><p><code class="code " id="keyword-reference.md-fe59bd32"  >constructor</code> declares a <a href="#classes.md-constructors" id="keyword-reference.md-51292989"   >primary or secondary constructor</a></p></li><li class="list__item" id="keyword-reference.md-df5de0af" ><p><code class="code " id="keyword-reference.md-a8a098a3"  >delegate</code> is used as an <a href="#annotations.md-annotation-use-site-targets" id="keyword-reference.md-86da4eb8"   >annotation use-site target</a></p></li><li class="list__item" id="keyword-reference.md-44156cfa" ><p><code class="code " id="keyword-reference.md-3838272b"  >dynamic</code> references a <a href="#dynamic-type.md" id="keyword-reference.md-52963c1d"   >dynamic type</a> in Kotlin/JS code</p></li><li class="list__item" id="keyword-reference.md-9c0e4db1" ><p><code class="code " id="keyword-reference.md-addc46ad"  >field</code> is used as an <a href="#annotations.md-annotation-use-site-targets" id="keyword-reference.md-d9e27926"   >annotation use-site target</a></p></li><li class="list__item" id="keyword-reference.md-c84d6134" ><p><code class="code " id="keyword-reference.md-935e7755"  >file</code> is used as an <a href="#annotations.md-annotation-use-site-targets" id="keyword-reference.md-f4d88320"   >annotation use-site target</a></p></li><li class="list__item" id="keyword-reference.md-461a3989" ><p><code class="code " id="keyword-reference.md-da5e69de"  >finally</code> begins a block that <a href="#exceptions.md" id="keyword-reference.md-4724e5ce"   >is always executed when a try block exits</a></p></li><li class="list__item" id="keyword-reference.md-59b77432" ><code class="code " id="keyword-reference.md-5f541da"  >get</code><ul class="list _ul" id="keyword-reference.md-66c81a3b"   ><li class="list__item" id="keyword-reference.md-e71ea7e9" ><p>declares the <a href="#properties.md-getters-and-setters" id="keyword-reference.md-b81240c5"   >getter of a property</a></p></li><li class="list__item" id="keyword-reference.md-be62319" ><p>is used as an <a href="#annotations.md-annotation-use-site-targets" id="keyword-reference.md-826daad7"   >annotation use-site target</a></p></li></ul></li><li class="list__item" id="keyword-reference.md-b632a00a" ><p><code class="code " id="keyword-reference.md-215a0a9f"  >import</code> <a href="#packages.md" id="keyword-reference.md-7a831fcd"   >imports a declaration from another package into the current file</a></p></li><li class="list__item" id="keyword-reference.md-c2ed3b2b" ><p><code class="code " id="keyword-reference.md-2f52de61"  >init</code> begins an <a href="#classes.md-constructors" id="keyword-reference.md-47c60e91"   >initializer block</a></p></li><li class="list__item" id="keyword-reference.md-f5fa3359" ><p><code class="code " id="keyword-reference.md-c50c6869"  >param</code> is used as an <a href="#annotations.md-annotation-use-site-targets" id="keyword-reference.md-c5dcea5b"   >annotation use-site target</a></p></li><li class="list__item" id="keyword-reference.md-384122da" ><p><code class="code " id="keyword-reference.md-69edba93"  >property</code> is used as an <a href="#annotations.md-annotation-use-site-targets" id="keyword-reference.md-6b910c79"   >annotation use-site target</a></p></li><li class="list__item" id="keyword-reference.md-f330af5a" ><p><code class="code " id="keyword-reference.md-a4637cc"  >receiver</code> is used as an <a href="#annotations.md-annotation-use-site-targets" id="keyword-reference.md-d51a9196"   >annotation use-site target</a></p></li><li class="list__item" id="keyword-reference.md-2b38693e" ><code class="code " id="keyword-reference.md-7a7d00a7"  >set</code><ul class="list _ul" id="keyword-reference.md-b971beb0"   ><li class="list__item" id="keyword-reference.md-20e1bad7" ><p>declares the <a href="#properties.md-getters-and-setters" id="keyword-reference.md-dadf441d"   >setter of a property</a></p></li><li class="list__item" id="keyword-reference.md-e83be8a7" ><p>is used as an <a href="#annotations.md-annotation-use-site-targets" id="keyword-reference.md-38881ae6"   >annotation use-site target</a></p></li></ul></li><li class="list__item" id="keyword-reference.md-89dce376" ><p><code class="code " id="keyword-reference.md-7f11b5be"  >setparam</code> is used as an <a href="#annotations.md-annotation-use-site-targets" id="keyword-reference.md-f3c8374c"   >annotation use-site target</a></p></li><li class="list__item" id="keyword-reference.md-470f8150" ><p><code class="code " id="keyword-reference.md-794658d6"  >where</code> specifies <a href="#generics.md-upper-bounds" id="keyword-reference.md-fe61b214"   >constraints for a generic type parameter</a></p></li></ul></section><section class="chapter"  ><h2 id="keyword-reference.md-modifier-keywords" data-toc="keyword-reference#keyword-reference.md-modifier-keywords"  >Modifier keywords</h2><p id="keyword-reference.md-903b9b2a" >The following tokens act as keywords in modifier lists of declarations and can be used as identifiers in other contexts:</p><ul class="list _ul" id="keyword-reference.md-9ebc7a41"   ><li class="list__item" id="keyword-reference.md-e21903ce" ><p><code class="code " id="keyword-reference.md-9b9de9f1"  >actual</code> denotes a platform-specific implementation in <a href="#multiplatform.md" id="keyword-reference.md-8a72436f"   >multiplatform projects</a></p></li><li class="list__item" id="keyword-reference.md-744f8c9b" ><p><code class="code " id="keyword-reference.md-a047159b"  >abstract</code> marks a class or member as <a href="#classes.md-abstract-classes" id="keyword-reference.md-63e1f7d0"   >abstract</a></p></li><li class="list__item" id="keyword-reference.md-8d203ae2" ><p><code class="code " id="keyword-reference.md-537ffce0"  >annotation</code> declares an <a href="#annotations.md" id="keyword-reference.md-7e4b688c"   >annotation class</a></p></li><li class="list__item" id="keyword-reference.md-ea77fb22" ><p><code class="code " id="keyword-reference.md-b249874d"  >companion</code> declares a <a href="#object-declarations.md-companion-objects" id="keyword-reference.md-d9af6746"   >companion object</a></p></li><li class="list__item" id="keyword-reference.md-2da54058" ><p><code class="code " id="keyword-reference.md-c00a71a7"  >const</code> marks a property as a <a href="#properties.md-compile-time-constants" id="keyword-reference.md-5681a3e0"   >compile-time constant</a></p></li><li class="list__item" id="keyword-reference.md-a88a6e06" ><p><code class="code " id="keyword-reference.md-8f897f4d"  >crossinline</code> forbids <a href="#inline-functions.md-non-local-returns" id="keyword-reference.md-134fa953"   >non-local returns in a lambda passed to an inline function</a></p></li><li class="list__item" id="keyword-reference.md-8043d6b0" ><p><code class="code " id="keyword-reference.md-12900e77"  >data</code> instructs the compiler to <a href="#data-classes.md" id="keyword-reference.md-8a24343c"   >generate canonical members for a class</a></p></li><li class="list__item" id="keyword-reference.md-d86c6931" ><p><code class="code " id="keyword-reference.md-b2e1f1ca"  >enum</code> declares an <a href="#enum-classes.md" id="keyword-reference.md-c2a1ce8f"   >enumeration</a></p></li><li class="list__item" id="keyword-reference.md-579093b4" ><p><code class="code " id="keyword-reference.md-65dc484"  >expect</code> marks a declaration as <a href="#multiplatform.md" id="keyword-reference.md-575918b"   >platform-specific</a>, expecting an implementation in platform modules.</p></li><li class="list__item" id="keyword-reference.md-8c2abea9" ><p><code class="code " id="keyword-reference.md-cabad073"  >external</code> marks a declaration as implemented not in Kotlin (accessible through <a href="#java-interop.md-using-jni-with-kotlin" id="keyword-reference.md-f68a7c2f"   >JNI</a> or in <a href="#js-interop.md-external-modifier" id="keyword-reference.md-f1766c2f"   >JavaScript</a>)</p></li><li class="list__item" id="keyword-reference.md-210e5387" ><p><code class="code " id="keyword-reference.md-d1a28719"  >final</code> forbids <a href="#inheritance.md-overriding-methods" id="keyword-reference.md-e9be9256"   >overriding a member</a></p></li><li class="list__item" id="keyword-reference.md-4bad86a7" ><p><code class="code " id="keyword-reference.md-1e1c5c9b"  >infix</code> allows calling a function in <a href="#functions.md-infix-notation" id="keyword-reference.md-f0abb11f"   >infix notation</a></p></li><li class="list__item" id="keyword-reference.md-d4d9f444" ><p><code class="code " id="keyword-reference.md-ad6662ae"  >inline</code> tells the compiler to <a href="#inline-functions.md" id="keyword-reference.md-d6d79a82"   >inline the function and the lambdas passed to it at the call site</a></p></li><li class="list__item" id="keyword-reference.md-ab175306" ><p><code class="code " id="keyword-reference.md-f8a55e8e"  >inner</code> allows referring to the outer class instance from a <a href="#nested-classes.md" id="keyword-reference.md-e83c7a1d"   >nested class</a></p></li><li class="list__item" id="keyword-reference.md-ca30b9d0" ><p><code class="code " id="keyword-reference.md-589c59d3"  >internal</code> marks a declaration as <a href="#visibility-modifiers.md" id="keyword-reference.md-e9cedf79"   >visible in the current module</a></p></li><li class="list__item" id="keyword-reference.md-35f49b7e" ><p><code class="code " id="keyword-reference.md-fbafb612"  >lateinit</code> allows initializing a <a href="#properties.md-late-initialized-properties-and-variables" id="keyword-reference.md-aac5bba"   >non-null property outside of a constructor</a></p></li><li class="list__item" id="keyword-reference.md-b2419b98" ><p><code class="code " id="keyword-reference.md-c4b6fbe0"  >noinline</code> turns off <a href="#inline-functions.md-noinline" id="keyword-reference.md-1ba1e910"   >inlining of a lambda passed to an inline function</a></p></li><li class="list__item" id="keyword-reference.md-14773018" ><p><code class="code " id="keyword-reference.md-a222b8b9"  >open</code> allows <a href="#classes.md-inheritance" id="keyword-reference.md-2ff811e9"   >subclassing a class or overriding a member</a></p></li><li class="list__item" id="keyword-reference.md-85834a52" ><p><code class="code " id="keyword-reference.md-f27b92a6"  >operator</code> marks a function as <a href="#operator-overloading.md" id="keyword-reference.md-66f79302"   >overloading an operator or implementing a convention</a></p></li><li class="list__item" id="keyword-reference.md-e4ab8e31" ><p><code class="code " id="keyword-reference.md-7a3da2e5"  >out</code> marks a type parameter as <a href="#generics.md-declaration-site-variance" id="keyword-reference.md-90a245eb"   >covariant</a></p></li><li class="list__item" id="keyword-reference.md-a117a056" ><p><code class="code " id="keyword-reference.md-6d3e04cd"  >override</code> marks a member as an <a href="#inheritance.md-overriding-methods" id="keyword-reference.md-7440b95e"   >override of a superclass member</a></p></li><li class="list__item" id="keyword-reference.md-dbc468f2" ><p><code class="code " id="keyword-reference.md-a4cea5fc"  >private</code> marks a declaration as <a href="#visibility-modifiers.md" id="keyword-reference.md-14871c29"   >visible in the current class or file</a></p></li><li class="list__item" id="keyword-reference.md-2222ba1f" ><p><code class="code " id="keyword-reference.md-ac54f43d"  >protected</code> marks a declaration as <a href="#visibility-modifiers.md" id="keyword-reference.md-73ba2482"   >visible in the current class and its subclasses</a></p></li><li class="list__item" id="keyword-reference.md-2faf551a" ><p><code class="code " id="keyword-reference.md-19a85fd8"  >public</code> marks a declaration as <a href="#visibility-modifiers.md" id="keyword-reference.md-26f091f9"   >visible anywhere</a></p></li><li class="list__item" id="keyword-reference.md-7e371ddf" ><p><code class="code " id="keyword-reference.md-fb21c032"  >reified</code> marks a type parameter of an inline function as <a href="#inline-functions.md-reified-type-parameters" id="keyword-reference.md-1508a050"   >accessible at runtime</a></p></li><li class="list__item" id="keyword-reference.md-dc164572" ><p><code class="code " id="keyword-reference.md-26399d7"  >sealed</code> declares a <a href="#sealed-classes.md" id="keyword-reference.md-2f533456"   >sealed class</a> (a class with restricted subclassing)</p></li><li class="list__item" id="keyword-reference.md-ef37e165" ><p><code class="code " id="keyword-reference.md-1d7e95c8"  >suspend</code> marks a function or lambda as suspending (usable as a <a href="#coroutines-overview.md" id="keyword-reference.md-28898ca3"   >coroutine</a>)</p></li><li class="list__item" id="keyword-reference.md-fcadda8e" ><p><code class="code " id="keyword-reference.md-4642fa51"  >tailrec</code> marks a function as <a href="#functions.md-tail-recursive-functions" id="keyword-reference.md-4ae2fe3"   >tail-recursive</a> (allowing the compiler to replace recursion with iteration)</p></li><li class="list__item" id="keyword-reference.md-71ff03d0" ><p><code class="code " id="keyword-reference.md-c389231c"  >vararg</code> allows <a href="#functions.md-variable-number-of-arguments-varargs" id="keyword-reference.md-dc82852e"   >passing a variable number of arguments for a parameter</a></p></li></ul></section><section class="chapter"  ><h2 id="keyword-reference.md-special-identifiers" data-toc="keyword-reference#keyword-reference.md-special-identifiers"  >Special identifiers</h2><p id="keyword-reference.md-c430fd76" >The following identifiers are defined by the compiler in specific contexts and can be used as regular identifiers in other contexts:</p><ul class="list _ul" id="keyword-reference.md-3723b48e"   ><li class="list__item" id="keyword-reference.md-8ebc33a3" ><p><code class="code " id="keyword-reference.md-f9e1bd67"  >field</code> is used inside a property accessor to refer to the <a href="#properties.md-backing-fields" id="keyword-reference.md-bb0377cf"   >backing field of the property</a></p></li><li class="list__item" id="keyword-reference.md-76f344bb" ><p><code class="code " id="keyword-reference.md-7c13a05c"  >it</code> is used inside a lambda to <a href="#lambdas.md-it-implicit-name-of-a-single-parameter" id="keyword-reference.md-14d28d4d"   >refer to its parameter implicitly</a></p></li></ul></section><section class="chapter"  ><h2 id="keyword-reference.md-operators-and-special-symbols" data-toc="keyword-reference#keyword-reference.md-operators-and-special-symbols"  >Operators and special symbols</h2><p id="keyword-reference.md-a4194005" >Kotlin supports the following operators and special symbols:</p><ul class="list _ul" id="keyword-reference.md-5a6a284c"   ><li class="list__item" id="keyword-reference.md-81143f98" ><code class="code " id="keyword-reference.md-888a260"  >+</code>, <code class="code " id="keyword-reference.md-837a9481"  >-</code>, <code class="code " id="keyword-reference.md-603734ec"  >*</code>, <code class="code " id="keyword-reference.md-c482075d"  >/</code>, <code class="code " id="keyword-reference.md-b41a886f"  >%</code>- mathematical operators <ul class="list _ul" id="keyword-reference.md-521549e"   ><li class="list__item" id="keyword-reference.md-80cf9113" ><p><code class="code " id="keyword-reference.md-77d1e40d"  >*</code> is also used to <a href="#functions.md-variable-number-of-arguments-varargs" id="keyword-reference.md-50e01cac"   >pass an array to a vararg parameter</a></p></li></ul></li><li class="list__item" id="keyword-reference.md-20264d8b" ><code class="code " id="keyword-reference.md-5d5421a"  >=</code><ul class="list _ul" id="keyword-reference.md-300261f4"   ><li class="list__item" id="keyword-reference.md-2c7d1f0f" ><p>assignment operator</p></li><li class="list__item" id="keyword-reference.md-aa1b85de" ><p>is used to specify <a href="#functions.md-default-arguments" id="keyword-reference.md-dfab324a"   >default values for parameters</a></p></li></ul></li><li class="list__item" id="keyword-reference.md-fc35954f" ><p><code class="code " id="keyword-reference.md-49bff0c7"  >+=</code>, <code class="code " id="keyword-reference.md-8fed32a1"  >-=</code>, <code class="code " id="keyword-reference.md-f9949e7b"  >*=</code>, <code class="code " id="keyword-reference.md-79932023"  >/=</code>, <code class="code " id="keyword-reference.md-208a8782"  >%=</code>- <a href="#operator-overloading.md-augmented-assignments" id="keyword-reference.md-11506344"   >augmented assignment operators</a></p></li><li class="list__item" id="keyword-reference.md-134184fd" ><p><code class="code " id="keyword-reference.md-91e44149"  >++</code>, <code class="code " id="keyword-reference.md-3a40d0eb"  >--</code>- <a href="#operator-overloading.md-increments-and-decrements" id="keyword-reference.md-bedbf8d5"   >increment and decrement operators</a></p></li><li class="list__item" id="keyword-reference.md-5b789ebb" ><p><code class="code " id="keyword-reference.md-f0f940cd"  >&amp;&amp;</code>, <code class="code " id="keyword-reference.md-2bb4a74"  >||</code>, <code class="code " id="keyword-reference.md-465d5c6d"  >!</code>- logical \'and\', \'or\', \'not\' operators (for bitwise operations, use corresponding <a href="#basic-types.md-operations" id="keyword-reference.md-5705469d"   >infix functions</a>)</p></li><li class="list__item" id="keyword-reference.md-1e08cd79" ><p><code class="code " id="keyword-reference.md-e064d155"  >==</code>, <code class="code " id="keyword-reference.md-bc1da8ed"  >!=</code>- <a href="#operator-overloading.md-equality-and-inequality-operators" id="keyword-reference.md-c091f32e"   >equality operators</a> (translated to calls of <code class="code " id="keyword-reference.md-702f1fac"  >equals()</code> for non-primitive types)</p></li><li class="list__item" id="keyword-reference.md-7b16eed3" ><p><code class="code " id="keyword-reference.md-f9e33bea"  >===</code>, <code class="code " id="keyword-reference.md-9d7e267f"  >!==</code>- <a href="#equality.md-referential-equality" id="keyword-reference.md-13bf56f"   >referential equality operators</a></p></li><li class="list__item" id="keyword-reference.md-e8b824c5" ><p><code class="code " id="keyword-reference.md-d8c6e1e5"  >&lt;</code>, <code class="code " id="keyword-reference.md-3b48f84a"  >&gt;</code>, <code class="code " id="keyword-reference.md-dd5bbbc9"  >&lt;=</code>, <code class="code " id="keyword-reference.md-e4d3fe53"  >&gt;=</code>- <a href="#operator-overloading.md-comparison-operators" id="keyword-reference.md-e8b311bf"   >comparison operators</a> (translated to calls of <code class="code " id="keyword-reference.md-7179e59"  >compareTo()</code> for non-primitive types)</p></li><li class="list__item" id="keyword-reference.md-1a197952" ><p><code class="code " id="keyword-reference.md-ed9ce901"  >[</code>, <code class="code " id="keyword-reference.md-fad6eb6b"  >]</code>- <a href="#operator-overloading.md-indexed-access-operator" id="keyword-reference.md-b7719728"   >indexed access operator</a> (translated to calls of <code class="code " id="keyword-reference.md-30fc4e05"  >get</code> and <code class="code " id="keyword-reference.md-94419eb"  >set</code>)</p></li><li class="list__item" id="keyword-reference.md-72bdede5" ><p><code class="code " id="keyword-reference.md-75c25ac9"  >!!</code> <a href="#null-safety.md-the-operator" id="keyword-reference.md-fadc9c5a"   >asserts that an expression is non-null</a></p></li><li class="list__item" id="keyword-reference.md-82940352" ><p><code class="code " id="keyword-reference.md-27589862"  >?.</code> performs a <a href="#null-safety.md-safe-calls" id="keyword-reference.md-23cab607"   >safe call</a> (calls a method or accesses a property if the receiver is non-null)</p></li><li class="list__item" id="keyword-reference.md-563a2f94" ><p><code class="code " id="keyword-reference.md-4f7e1e56"  >?:</code> takes the right-hand value if the left-hand value is null (the <a href="#null-safety.md-elvis-operator" id="keyword-reference.md-69516ac8"   >elvis operator</a>)</p></li><li class="list__item" id="keyword-reference.md-6f2a33ce" ><p><code class="code " id="keyword-reference.md-cd9df357"  >::</code> creates a <a href="#reflection.md-function-references" id="keyword-reference.md-48150d05"   >member reference</a> or a <a href="#reflection.md-class-references" id="keyword-reference.md-f9ccf95f"   >class reference</a></p></li><li class="list__item" id="keyword-reference.md-b4cb38ca" ><p><code class="code " id="keyword-reference.md-40a7107d"  >..</code> creates a <a href="#ranges.md" id="keyword-reference.md-54785893"   >range</a></p></li><li class="list__item" id="keyword-reference.md-c36b07c9" ><p><code class="code " id="keyword-reference.md-3582b54d"  >:</code> separates a name from a type in declarations</p></li><li class="list__item" id="keyword-reference.md-7c0c8329" ><p><code class="code " id="keyword-reference.md-44c74feb"  >?</code> marks a type as <a href="#null-safety.md-nullable-types-and-non-null-types" id="keyword-reference.md-9a49df2f"   >nullable</a></p></li><li class="list__item" id="keyword-reference.md-66de9175" ><code class="code " id="keyword-reference.md-ffd97e1b"  >-&gt;</code><ul class="list _ul" id="keyword-reference.md-e384ca66"   ><li class="list__item" id="keyword-reference.md-362c53bd" ><p>separates the parameters and body of a <a href="#lambdas.md-lambda-expression-syntax" id="keyword-reference.md-3d2c378d"   >lambda expression</a></p></li><li class="list__item" id="keyword-reference.md-b0bc2f45" ><p>separates the parameters and return type declaration in a <a href="#lambdas.md-function-types" id="keyword-reference.md-c92dd2d9"   >function type</a></p></li><li class="list__item" id="keyword-reference.md-c6f62d4f" ><p>separates the condition and body of a <a href="#control-flow.md-when-expression" id="keyword-reference.md-c872e0b3"   >when expression</a> branch</p></li></ul></li><li class="list__item" id="keyword-reference.md-6ea3b99f" ><code class="code " id="keyword-reference.md-93617ed5"  >@</code><ul class="list _ul" id="keyword-reference.md-a6b9e76c"   ><li class="list__item" id="keyword-reference.md-ebb387bb" ><p>introduces an <a href="#annotations.md-usage" id="keyword-reference.md-31637837"   >annotation</a></p></li><li class="list__item" id="keyword-reference.md-f3187629" ><p>introduces or references a <a href="#returns.md-break-and-continue-labels" id="keyword-reference.md-b0cdfc72"   >loop label</a></p></li><li class="list__item" id="keyword-reference.md-fe7aa653" ><p>introduces or references a <a href="#returns.md-return-at-labels" id="keyword-reference.md-58dede8b"   >lambda label</a></p></li><li class="list__item" id="keyword-reference.md-e04eeeab" ><p>references a <a href="#this-expressions.md-qualified-this" id="keyword-reference.md-a0f3013"   >\'this\' expression from an outer scope</a></p></li><li class="list__item" id="keyword-reference.md-daee2067" ><p>references an <a href="#inheritance.md-calling-the-superclass-implementation" id="keyword-reference.md-e2a28a1a"   >outer superclass</a></p></li></ul></li><li class="list__item" id="keyword-reference.md-7e6c2037" ><p><code class="code " id="keyword-reference.md-bed88cff"  >;</code> separates multiple statements on the same line</p></li><li class="list__item" id="keyword-reference.md-e84401c6" ><p><code class="code " id="keyword-reference.md-98045938"  >$</code> references a variable or expression in a <a href="#basic-types.md-string-templates" id="keyword-reference.md-77de74f8"   >string template</a></p></li><li class="list__item" id="keyword-reference.md-8e9109e2" ><code class="code " id="keyword-reference.md-b134f205"  >_</code><ul class="list _ul" id="keyword-reference.md-7f2d9b22"   ><li class="list__item" id="keyword-reference.md-f113f9e6" ><p>substitutes an unused parameter in a <a href="#lambdas.md-underscore-for-unused-variables" id="keyword-reference.md-c63a0991"   >lambda expression</a></p></li><li class="list__item" id="keyword-reference.md-41c782a3" ><p>substitutes an unused parameter in a <a href="#destructuring-declarations.md-underscore-for-unused-variables" id="keyword-reference.md-b40fad51"   >destructuring declaration</a></p></li></ul></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="gradle.md"  >Gradle</h1><p id="gradle.md-2e1d53b" >In order to build a Kotlin project with Gradle, you should <a href="#gradle.md-plugin-and-versions" id="gradle.md-ad958957"   >apply the Kotlin Gradle plugin to your project</a> and <a href="#gradle.md-configuring-dependencies" id="gradle.md-13b7c992"   >configure dependencies</a>.</p><section class="chapter"  ><h2 id="gradle.md-plugin-and-versions" data-toc="gradle#gradle.md-plugin-and-versions"  >Plugin and versions</h2><p id="gradle.md-21b49009" >Apply the Kotlin Gradle plugin by using <a href="https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block" id="gradle.md-8f6ad38e"   data-external="true" rel="noopener noreferrer" >the Gradle plugins DSL</a>.</p><p id="gradle.md-f4be9e02" >The Kotlin Gradle plugin 1.4.32 works with Gradle 5.4 and later. The <code class="code " id="gradle.md-da692a7f"  >kotlin-multiplatform</code> plugin requires Gradle 6.0 or later.</p><div class="tabs" id="gradle.md-a82b514d" ><div class="tabs__content" data-gtm="tab" id="gradle.md-fdffbb6e"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="gradle.md-fdffbb6e"   data-title="Groovy"      >plugins {\n    id \'org.jetbrains.kotlin.&lt;...&gt;\' version \'1.4.32\'\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="gradle.md-ad749a12"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="gradle.md-ad749a12"   data-title="Kotlin"      >plugins {\n    kotlin(&quot;&lt;...&gt;&quot;) version &quot;1.4.32&quot;\n}\n</div></div></div><p id="gradle.md-c4c436df" >The placeholder <code class="code " id="gradle.md-582dbb19"  >&lt;...&gt;</code> should be replaced with one of the plugin names that can be found in further sections.</p></section><section class="chapter"  ><h2 id="gradle.md-targeting-multiple-platforms" data-toc="gradle#gradle.md-targeting-multiple-platforms"  >Targeting multiple platforms</h2><p id="gradle.md-d83003b1" >Projects targeting <a href="#mpp-supported-platforms.md" id="gradle.md-e8cb1975"   >multiple platforms</a>, called <a href="#mpp-intro.md" id="gradle.md-a5d08924"   >multiplatform projects</a>, require the <code class="code " id="gradle.md-b628c56"  >kotlin-multiplatform</code> plugin. <a href="#mpp-discover-project.md-multiplatform-plugin" id="gradle.md-8a6cc786"   >Learn more about the plugin</a>.</p><aside data-type="note" class="prompt" data-title="" id="gradle.md-476e1a13" ><p id="gradle.md-c0f45b82" >The <code class="code " id="gradle.md-7062f25c"  >kotlin-multiplatform</code> plugin works with Gradle 6.0 or later.</p></aside><div class="tabs" id="gradle.md-f9c683e0" ><div class="tabs__content" data-gtm="tab" id="gradle.md-a8222cc6"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="gradle.md-a8222cc6"   data-title="Groovy"      >plugins {\n    id \'org.jetbrains.kotlin.multiplatform\' version \'1.4.32\'\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="gradle.md-bcc30739"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="gradle.md-bcc30739"   data-title="Kotlin"      >plugins {\n    kotlin(&quot;multiplatform&quot;) version &quot;1.4.32&quot;\n}\n</div></div></div></section><section class="chapter"  ><h2 id="gradle.md-targeting-the-jvm" data-toc="gradle#gradle.md-targeting-the-jvm"  >Targeting the JVM</h2><p id="gradle.md-23228313" >To target the JVM, apply the Kotlin JVM plugin.</p><div class="tabs" id="gradle.md-4092752f" ><div class="tabs__content" data-gtm="tab" id="gradle.md-1720432f"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="gradle.md-1720432f"   data-title="Groovy"      >plugins {\n    id &quot;org.jetbrains.kotlin.jvm&quot; version &quot;1.4.32&quot;\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="gradle.md-5ba136a6"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="gradle.md-5ba136a6"   data-title="Kotlin"      >plugins {\n    kotlin(&quot;jvm&quot;) version &quot;1.4.32&quot;\n}\n</div></div></div><p id="gradle.md-eb353019" >The <code class="code " id="gradle.md-61a53c1a"  >version</code> should be literal in this block, and it cannot be applied from another build script.</p><p id="gradle.md-82280f1f" >Alternatively, you can use the older <code class="code " id="gradle.md-ea1dadba"  >apply plugin</code> approach:</p><div class="code-block" data-lang="groovy" id="gradle.md-f1f78b57"         >apply plugin: \'kotlin\'\n</div><p id="gradle.md-77739706" >It\'s not recommended that you apply Kotlin plugins with <code class="code " id="gradle.md-10cd84f7"  >apply</code> in Gradle Kotlin DSL – <a href="#gradle.md-using-gradle-kotlin-dsl" id="gradle.md-2b323bf1"   >see why</a>.</p><section class="chapter"  ><h3 id="gradle.md-kotlin-and-java-sources" data-toc="gradle#gradle.md-kotlin-and-java-sources"  >Kotlin and Java sources</h3><p id="gradle.md-1f0bfeab" >Kotlin sources can be stored with Java sources in the same folder, or placed to different folders. The default convention is using different folders:</p><div class="code-block" data-lang="groovy" id="gradle.md-2ea1d9b5"         >project\n    - src\n        - main (root)\n            - kotlin\n            - java\n</div><p id="gradle.md-262b1ef5" >The corresponding <code class="code " id="gradle.md-edf3ee2d"  >sourceSets</code> property should be updated if not using the default convention:</p><div class="tabs" id="gradle.md-fadd4d46" ><div class="tabs__content" data-gtm="tab" id="gradle.md-7c1a3748"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="gradle.md-7c1a3748"   data-title="Groovy"      >sourceSets {\n    main.kotlin.srcDirs += \'src/main/myKotlin\'\n    main.java.srcDirs += \'src/main/myJava\'\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="gradle.md-33f87df"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="gradle.md-33f87df"   data-title="Kotlin"      >sourceSets.main {\n    java.srcDirs(&quot;src/main/myJava&quot;, &quot;src/main/myKotlin&quot;)\n}\n</div></div></div></section></section><section class="chapter"  ><h2 id="gradle.md-targeting-javascript" data-toc="gradle#gradle.md-targeting-javascript"  >Targeting JavaScript</h2><p id="gradle.md-fe81c43c" >When targeting only JavaScript, use the <code class="code " id="gradle.md-f0c97531"  >kotlin-js</code> plugin. <a href="#js-project-setup.md" id="gradle.md-4f6e5f42"   >Learn more</a></p><div class="tabs" id="gradle.md-ad86bd3a" ><div class="tabs__content" data-gtm="tab" id="gradle.md-c426027e"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="gradle.md-c426027e"   data-title="Groovy"      >plugins {\n    id \'org.jetbrains.kotlin.js\' version \'1.4.32\'\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="gradle.md-83df5932"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="gradle.md-83df5932"   data-title="Kotlin"      >plugins {\n    kotlin(&quot;js&quot;) version &quot;1.4.32&quot;\n}\n</div></div></div><section class="chapter"  ><h3 id="gradle.md-kotlin-and-java-sources-for-javascript" data-toc="gradle#gradle.md-kotlin-and-java-sources-for-javascript"  >Kotlin and Java sources for JavaScript</h3><p id="gradle.md-a37c64dd" >This plugin only works for Kotlin files so it is recommended that you keep Kotlin and Java files separately (in case the project contains Java files). If you don\'t store them separately , specify the source folder in the <code class="code " id="gradle.md-1534a1d4"  >sourceSets</code> block:</p><div class="tabs" id="gradle.md-1f72e15" ><div class="tabs__content" data-gtm="tab" id="gradle.md-6527e8ae"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="gradle.md-6527e8ae"   data-title="Groovy"      >kotlin {\n    sourceSets {\n        main.kotlin.srcDirs += \'src/main/myKotlin\'\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="gradle.md-5ebe4b83"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="gradle.md-5ebe4b83"   data-title="Kotlin"      >kotlin {\n    sourceSets[&quot;main&quot;].apply {    \n        kotlin.srcDir(&quot;src/main/myKotlin&quot;) \n    }\n}\n</div></div></div></section></section><section class="chapter"  ><h2 id="gradle.md-targeting-android" data-toc="gradle#gradle.md-targeting-android"  >Targeting Android</h2><p id="gradle.md-cb96e011" >It\'s recommended that you use Android Studio for creating Android applications. <a href="https://developer.android.com/studio/releases/gradle-plugin" id="gradle.md-938d30a1"   data-external="true" rel="noopener noreferrer" >Learn how to use Android Gradle plugin</a>.</p></section><section class="chapter"  ><h2 id="gradle.md-configuring-dependencies" data-toc="gradle#gradle.md-configuring-dependencies"  >Configuring dependencies</h2><p id="gradle.md-973a772" >To add a dependency on a library, set the dependency of the required <a href="#gradle.md-dependency-types" id="gradle.md-3605b287"   >type</a> (for example, <code class="code " id="gradle.md-d9858505"  >implementation</code>) in the <code class="code " id="gradle.md-134a4282"  >dependencies</code> block of the source sets DSL.</p><div class="tabs" id="gradle.md-94218e6e" ><div class="tabs__content" data-gtm="tab" id="gradle.md-a92ac394"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="gradle.md-a92ac394"   data-title="Groovy"      >kotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation \'com.example:my-library:1.0\'\n            }\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="gradle.md-17fa4947"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="gradle.md-17fa4947"   data-title="Kotlin"      >kotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation(&quot;com.example:my-library:1.0&quot;)\n            }\n        }\n    }\n}\n</div></div></div><p id="gradle.md-8be7ee41" >Alternatively, you can <a href="#gradle.md-set-dependencies-at-the-top-level" id="gradle.md-c89449ce"   >set dependencies at the top level</a>.</p><section class="chapter"  ><h3 id="gradle.md-dependency-types" data-toc="gradle#gradle.md-dependency-types"  >Dependency types</h3><p id="gradle.md-77fc6534" >Choose the dependency type based on your requirements.</p><div class="table-wrapper" ><table class=" wide" id="gradle.md-d31425f1"  ><thead><tr class="ijRowHead" id="gradle.md-ce73184b" ><th id="gradle.md-55a5bebf"    >Type</th><th id="gradle.md-39af5209"    >Description</th><th id="gradle.md-d52a8aaa"    >When to use</th></tr></thead><tbody ><tr class="" id="gradle.md-f56911ca" ><td id="gradle.md-eda4b61b"    ><code class="code " id="gradle.md-4a0e19f3"  >api</code></td><td id="gradle.md-4ed051f1"    >Used both during compilation and at runtime and is exported to library consumers.</td><td id="gradle.md-3b250c46"    >If any type from a dependency is used in the public API of the current module, use an <code class="code " id="gradle.md-eab41e69"  >api</code> dependency.</td></tr><tr class="" id="gradle.md-a48b4205" ><td id="gradle.md-3ebe140e"    ><code class="code " id="gradle.md-bd1fd6cd"  >implementation</code></td><td id="gradle.md-187cbb66"    >Used during compilation and at runtime for the current module, but is not exposed for compilation of other modules depending on the one with the `implementation` dependency.</td><td id="gradle.md-9093bb56"    ><p id="gradle.md-3b9d0571" >Use for dependencies needed for the internal logic of a module.</p><p id="gradle.md-7218cd7b" >If a module is an endpoint application which is not published, use <code class="code " id="gradle.md-8ae8fa3c"  >implementation</code> dependencies instead of <code class="code " id="gradle.md-881ef52b"  >api</code> dependencies.</p></td></tr><tr class="" id="gradle.md-db080a" ><td id="gradle.md-7962b242"    ><code class="code " id="gradle.md-394d54f2"  >compileOnly</code></td><td id="gradle.md-d82b6d54"    >Used for compilation of the current module and is not available at runtime nor during compilation of other modules.</td><td id="gradle.md-819dfdd8"    >Use for APIs which have a third-party implementation available at runtime.</td></tr><tr class="" id="gradle.md-411ecded" ><td id="gradle.md-4ceef926"    ><code class="code " id="gradle.md-cfc962d6"  >runtimeOnly</code></td><td id="gradle.md-740130c0"    >Available at runtime but is not visible during compilation of any module.</td><td id="gradle.md-8a1a9d61"    ></td></tr></tbody ></table ></div></section><section class="chapter"  ><h3 id="gradle.md-dependency-on-the-standard-library" data-toc="gradle#gradle.md-dependency-on-the-standard-library"  >Dependency on the standard library</h3><p id="gradle.md-a2c1a5fa" >A dependency on a standard library (<code class="code " id="gradle.md-c84b8eca"  >stdlib</code>) in each source set is added automatically. The version of the standard library is the same as the version of the Kotlin Gradle plugin.</p><p id="gradle.md-be20e39f" >For platform-specific source sets, the corresponding platform-specific variant of the library is used, while a common standard library is added to the rest. The Kotlin Gradle plugin will select the appropriate JVM standard library depending on the <code class="code " id="gradle.md-50848f26"  >kotlinOptions.jvmTarget</code> <a href="#gradle.md-compiler-options" id="gradle.md-7050f54c"   >compiler option</a> of your Gradle build script.</p><p id="gradle.md-88500784" >If you declare a standard library dependency explicitly (for example, if you need a different version), the Kotlin Gradle plugin won’t override it or add a second standard library.</p><p id="gradle.md-3a2560a2" >If you do not need a standard library at all, you can add the opt-out flag to the <code class="code " id="gradle.md-40f09525"  >gradle.properties</code>:</p><div class="code-block" data-lang="kotlin" id="gradle.md-8a588429"         >kotlin.stdlib.default.dependency=false\n</div></section><section class="chapter"  ><h3 id="gradle.md-set-dependencies-on-test-libraries" data-toc="gradle#gradle.md-set-dependencies-on-test-libraries"  >Set dependencies on test libraries</h3><p id="gradle.md-e9d1b1f6" >The <a href="https://kotlinlang.org/api/latest/kotlin.test/" id="gradle.md-57c018d4"   data-external="true" rel="noopener noreferrer" ><code class="code " id="gradle.md-596d8eb3"  >kotlin.test</code> API</a> is available for testing different Kotlin projects.</p><p id="gradle.md-6bd1ae82" >Add the corresponding dependencies on test libraries:</p><ul class="list _ul" id="gradle.md-5394e556"   ><li class="list__item" id="gradle.md-7da2a8f8" ><p>For <code class="code " id="gradle.md-a2f8cecd"  >commonTest</code>, add the <code class="code " id="gradle.md-b574d220"  >kotlin-test-common</code> and <code class="code " id="gradle.md-764824ff"  >kotlin-test-annotations-common</code> dependencies.</p></li><li class="list__item" id="gradle.md-da0d798" ><p>For JVM targets, use <code class="code " id="gradle.md-10ad42a5"  >kotlin-test-junit</code> or <code class="code " id="gradle.md-8b174cd5"  >kotlin-test-testng</code> for the corresponding asserter implementation and annotations mapping.</p></li><li class="list__item" id="gradle.md-efdc1494" ><p>For Kotlin/JS targets, add <code class="code " id="gradle.md-3fabe05d"  >kotlin-test-js</code> as a test dependency.</p></li></ul><p id="gradle.md-cbdffc5d" >Kotlin/Native targets do not require additional test dependencies, and the <code class="code " id="gradle.md-852ea9f3"  >kotlin.test</code> API implementations are built-in.</p><div class="tabs" id="gradle.md-7a240a6b" ><div class="tabs__content" data-gtm="tab" id="gradle.md-ebe6a0a1"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="gradle.md-ebe6a0a1"   data-title="Groovy"      >kotlin{\n    sourceSets {\n        commonTest {\n            dependencies {\n                implementation kotlin(\'test-common\')\n                implementation kotlin(\'test-annotations-common\')\n            }\n        }\n        jvmTest {\n            dependencies {\n                implementation kotlin(\'test-junit\')\n            }\n        }\n        jsTest {\n            dependencies {\n                implementation kotlin(\'test-js\')\n            }\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="gradle.md-cf342611"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="gradle.md-cf342611"   data-title="Kotlin"      >kotlin{\n    sourceSets {\n        val commonTest by getting {\n            dependencies {\n                implementation(kotlin(&quot;test-common&quot;))\n                implementation(kotlin(&quot;test-annotations-common&quot;))\n            }\n        }\n        val jvmTest by getting {\n            dependencies {\n                implementation(kotlin(&quot;test-junit&quot;))\n            }\n        }\n        val jsTest by getting {\n            dependencies {\n                implementation(kotlin(&quot;test-js&quot;))\n            }\n        }\n    }\n}\n</div></div></div><aside data-type="note" class="prompt" data-title="" id="gradle.md-2454b302" ><p id="gradle.md-3f02e427" >You can use shorthand for a dependency on a Kotlin module, for example, kotlin(&quot;test&quot;) for &quot;org.jetbrains.kotlin:kotlin-test&quot;.</p></aside></section><section class="chapter"  ><h3 id="gradle.md-set-a-dependency-on-a-kotlinx-library" data-toc="gradle#gradle.md-set-a-dependency-on-a-kotlinx-library"  >Set a dependency on a kotlinx library</h3><p id="gradle.md-e7f77942" >If you use a kotlinx library and need a platform-specific dependency, you can use platform-specific variants of libraries with suffixes such as <code class="code " id="gradle.md-3acca11b"  >-jvm</code> or <code class="code " id="gradle.md-a2f57ac"  >-js</code>, for example, <code class="code " id="gradle.md-da7e01a6"  >kotlinx-coroutines-core-jvm</code>. You can also use the library base artifact name instead – <code class="code " id="gradle.md-f8b5f9b9"  >kotlinx-coroutines-core</code>.</p><div class="tabs" id="gradle.md-5161d591" ><div class="tabs__content" data-gtm="tab" id="gradle.md-19daa0fc"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="gradle.md-19daa0fc"   data-title="Groovy"      >kotlin {\n    sourceSets {\n        jvmMain {\n            dependencies {\n                implementation \'org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.4.2\'\n            }\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="gradle.md-a44a8a1e"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="gradle.md-a44a8a1e"   data-title="Kotlin"      >kotlin {\n    sourceSets {\n        val jvmMain by getting {\n            dependencies {\n                implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.4.2&quot;)\n            }\n        }\n    }\n}\n</div></div></div><p id="gradle.md-49fa86a" >If you use a multiplatform library and need to depend on the shared code, set the dependency only once in the shared source set. Use the library base artifact name, such as <code class="code " id="gradle.md-65667612"  >kotlinx-coroutines-core</code> or <code class="code " id="gradle.md-e92223c7"  >ktor-client-core</code>.</p><div class="tabs" id="gradle.md-9d075f82" ><div class="tabs__content" data-gtm="tab" id="gradle.md-3e607c3d"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="gradle.md-3e607c3d"   data-title="Groovy"      >kotlin {\n    sourceSets {\n        commonMain {\n            dependencies {\n                implementation \'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2\'\n            }\n        }\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="gradle.md-fece3bc2"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="gradle.md-fece3bc2"   data-title="Kotlin"      >kotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2&quot;)\n            }\n        }\n    }\n}\n</div></div></div></section><section class="chapter"  ><h3 id="gradle.md-set-dependencies-at-the-top-level" data-toc="gradle#gradle.md-set-dependencies-at-the-top-level"  >Set dependencies at the top level</h3><p id="gradle.md-2ebaa66a" >Alternatively, you can specify the dependencies at the top level with the configuration names following the pattern <code class="code " id="gradle.md-1986429"  >&lt;sourceSetName&gt;&lt;DependencyType&gt;</code>. This is helpful for some Gradle built-in dependencies, like <code class="code " id="gradle.md-4e70db6c"  >gradleApi()</code>, <code class="code " id="gradle.md-49b5de92"  >localGroovy()</code>, or <code class="code " id="gradle.md-9f83edb5"  >gradleTestKit()</code>, which are not available in the source sets dependency DSL.</p><div class="tabs" id="gradle.md-273df6b1" ><div class="tabs__content" data-gtm="tab" id="gradle.md-1094339e"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="gradle.md-1094339e"   data-title="Groovy"      >dependencies {\n    commonMainImplementation \'com.example:my-library:1.0\'\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="gradle.md-c5bcdc4"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="gradle.md-c5bcdc4"   data-title="Kotlin"      >dependencies {\n    &quot;commonMainImplementation&quot;(&quot;com.example:my-library:1.0&quot;)\n}\n</div></div></div></section></section><section class="chapter"  ><h2 id="gradle.md-annotation-processing" data-toc="gradle#gradle.md-annotation-processing"  >Annotation processing</h2><p id="gradle.md-1dff557" >Kotlin supports annotation processing via the Kotlin annotation processing tool <a href="#kapt.md" id="gradle.md-b0e5e526"   ><code class="code " id="gradle.md-174dc821"  >kapt</code></a>.</p></section><section class="chapter"  ><h2 id="gradle.md-incremental-compilation" data-toc="gradle#gradle.md-incremental-compilation"  >Incremental compilation</h2><p id="gradle.md-776149cd" >The Kotlin Gradle plugin supports incremental compilation. Incremental compilation tracks changes of source files between builds so only files affected by these changes would be compiled.</p><p id="gradle.md-18df8204" >Incremental compilation is supported for Kotlin/JVM and Kotlin/JS projects and is enabled by default.</p><p id="gradle.md-54a3aa32" >There are several ways to switch off incremental compilation:</p> <code class="code " id="gradle.md-595966a2"  >* `kotlin.incremental=false` for Kotlin/JVM * `kotlin.incremental.js=false` for Kotlin/JS projects</code><ul class="list _ul" id="gradle.md-e1991234"   ><li class="list__item" id="gradle.md-93207f35" ><p id="gradle.md-5bcd6cae" >As the command line parameter, use <code class="code " id="gradle.md-27db9659"  >-Pkotlin.incremental=false</code> or <code class="code " id="gradle.md-820704d"  >-Pkotlin.incremental.js=false</code>.</p><p id="gradle.md-8ba84be4" >Note that in this case the parameter should be added to each subsequent build, and any build with disabled incremental compilation invalidates incremental caches.</p></li></ul><p id="gradle.md-15d79a89" >Note that the first build isn\'t incremental in any case.</p></section><section class="chapter"  ><h2 id="gradle.md-gradle-build-cache-support" data-toc="gradle#gradle.md-gradle-build-cache-support"  >Gradle build cache support</h2><p id="gradle.md-19894f31" >The Kotlin plugin supports <a href="https://docs.gradle.org/current/userguide/build_cache.html" id="gradle.md-72a4d7bd"   data-external="true" rel="noopener noreferrer" >Gradle build cache</a> that stores the build outputs for reuse in future builds.</p><p id="gradle.md-e31041c1" >To disable the caching for all Kotlin tasks, set the system property flag <code class="code " id="gradle.md-1e71a3bf"  >kotlin.caching.enabled</code> to <code class="code " id="gradle.md-8c19647e"  >false</code> (run the build with the argument <code class="code " id="gradle.md-1c261683"  >-Dkotlin.caching.enabled=false</code> ).</p><p id="gradle.md-1a5fa76a" >If you use <a href="#kapt.md" id="gradle.md-186f75bc"   >kapt</a>, note that the kapt annotation processing tasks are not cached by default. However, you can <a href="#kapt.md-gradle-build-cache-support" id="gradle.md-13a53a8e"   >enable caching for them manually</a>.</p></section><section class="chapter"  ><h2 id="gradle.md-gradle-configuration-cache-support" data-toc="gradle#gradle.md-gradle-configuration-cache-support"  >Gradle configuration cache support</h2><aside data-type="note" class="prompt" data-title="" id="gradle.md-f17a21cf" ><p id="gradle.md-45e53451" >The configuration cache is available in Gradle 6.5 and later as an experimental feature. You can check the <a href="https://gradle.org/releases/" id="gradle.md-56611026"   data-external="true" rel="noopener noreferrer" >Gradle releases page</a> to see whether it has been promoted to stable.</p></aside><p id="gradle.md-d8aa6019" >The Kotlin plugin supports <a href="https://docs.gradle.org/current/userguide/configuration_cache.html" id="gradle.md-2315d956"   data-external="true" rel="noopener noreferrer" >Gradle configuration cache</a>, which speeds up the build process by reusing the results of the configuration phase.</p><p id="gradle.md-9f2c8d11" >See the <a href="https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:usage" id="gradle.md-b6ebaff8"   data-external="true" rel="noopener noreferrer" >Gradle documentation</a> to learn how to enable the configuration cache. Once you enable the configuration cache feature, the Kotlin Gradle plugin will start using it.</p></section><section class="chapter"  ><h2 id="gradle.md-compiler-options" data-toc="gradle#gradle.md-compiler-options"  >Compiler options</h2><p id="gradle.md-1fa19efb" >To specify additional compilation options, use the <code class="code " id="gradle.md-6c6430df"  >kotlinOptions</code> property of a Kotlin compilation task.</p><p id="gradle.md-4f34c346" >When targeting the JVM, the tasks are called <code class="code " id="gradle.md-8630a06b"  >compileKotlin</code> for production code and <code class="code " id="gradle.md-ba21b6d9"  >compileTestKotlin</code> for test code. The tasks for custom source sets are called accordingly to the <code class="code " id="gradle.md-f07a3d9e"  >compile&lt;Name&gt;Kotlin</code> pattern.</p><p id="gradle.md-c8253733" >The names of the tasks in Android Projects contain the <a href="https://developer.android.com/studio/build/build-variants.html" id="gradle.md-1775e21e"   data-external="true" rel="noopener noreferrer" >build variant</a> names and follow the pattern <code class="code " id="gradle.md-9fc53913"  >compile&lt;BuildVariant&gt;Kotlin</code>, for example, <code class="code " id="gradle.md-1e46f23c"  >compileDebugKotlin</code>, <code class="code " id="gradle.md-5ce89147"  >compileReleaseUnitTestKotlin</code>.</p><p id="gradle.md-a38b7ceb" >When targeting JavaScript, the tasks are called <code class="code " id="gradle.md-833bee86"  >compileKotlinJs</code> and <code class="code " id="gradle.md-c2724ed3"  >compileTestKotlinJs</code> respectively, and <code class="code " id="gradle.md-a610963"  >compile&lt;Name&gt;KotlinJs</code> for custom source sets.</p><p id="gradle.md-f59277a4" >To configure a single task, use its name. Examples:</p><div class="tabs" id="gradle.md-86490090" ><div class="tabs__content" data-gtm="tab" id="gradle.md-354023cc"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="gradle.md-354023cc"   data-title="Groovy"      >compileKotlin {\n    kotlinOptions.suppressWarnings = true\n}\n\n//or\n\ncompileKotlin {\n    kotlinOptions {\n        suppressWarnings = true\n    }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="gradle.md-67b158f7"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="gradle.md-67b158f7"   data-title="Kotlin"      >import org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n// ...\n\nval compileKotlin: KotlinCompile by tasks\n\ncompileKotlin.kotlinOptions.suppressWarnings = true\n</div></div></div><p id="gradle.md-6ca1a144" >Note that with Gradle Kotlin DSL, you should get the task from the project\'s <code class="code " id="gradle.md-2bde8b6c"  >tasks</code> first.</p><p id="gradle.md-1c30c5c" >Use the types <code class="code " id="gradle.md-e665ea0"  >Kotlin2JsCompile</code> and <code class="code " id="gradle.md-c7358b56"  >KotlinCompileCommon</code> for the JS and Common targets, accordingly.</p><p id="gradle.md-af5655f2" >It is also possible to configure all Kotlin compilation tasks in the project:</p><div class="tabs" id="gradle.md-f0bcdb54" ><div class="tabs__content" data-gtm="tab" id="gradle.md-88dd38d9"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="gradle.md-88dd38d9"   data-title="Groovy"      >tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {\n    kotlinOptions { /*...*/ }\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="gradle.md-283c8cf9"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="gradle.md-283c8cf9"   data-title="Kotlin"      >tasks.withType&lt;org.jetbrains.kotlin.gradle.tasks.KotlinCompile&gt;().configureEach {\n    kotlinOptions { /*...*/ }\n}\n</div></div></div><p id="gradle.md-d5cda4cc" >The complete list of options for the Gradle tasks is the following:</p><section class="chapter"  ><h3 id="gradle.md-attributes-common-for-jvm-js-and-js-dce" data-toc="gradle#gradle.md-attributes-common-for-jvm-js-and-js-dce"  >Attributes common for JVM, JS, and JS DCE</h3><div class="table-wrapper" ><table class=" wide" id="gradle.md-ce7277d"  ><thead><tr class="ijRowHead" id="gradle.md-3683ccc" ><th id="gradle.md-7eb65085"    >Name</th><th id="gradle.md-37fc687"    >Description</th><th id="gradle.md-d0c603b8"    >Possible values</th><th id="gradle.md-c4587086"    >Default value</th></tr></thead><tbody ><tr class="" id="gradle.md-c53f25e3" ><td id="gradle.md-12a655ea"    ><code class="code " id="gradle.md-4f34808e"  >allWarningsAsErrors</code></td><td id="gradle.md-bf8a1e46"    >Report an error if there are any warnings</td><td id="gradle.md-b3b88153"    ></td><td id="gradle.md-469e2ce"    >false</td></tr><tr class="" id="gradle.md-e9de0c3c" ><td id="gradle.md-3e474467"    ><code class="code " id="gradle.md-6f4276d0"  >suppressWarnings</code></td><td id="gradle.md-8336db0c"    >Generate no warnings</td><td id="gradle.md-fad01dc2"    ></td><td id="gradle.md-e3e2ee56"    >false</td></tr><tr class="" id="gradle.md-18225d52" ><td id="gradle.md-206aa03e"    ><code class="code " id="gradle.md-375694e9"  >verbose</code></td><td id="gradle.md-bf81ae41"    >Enable verbose logging output</td><td id="gradle.md-c3665874"    ></td><td id="gradle.md-a7ce7a95"    >false</td></tr><tr class="" id="gradle.md-64ef9687" ><td id="gradle.md-76837e0f"    ><code class="code " id="gradle.md-a3055857"  >freeCompilerArgs</code></td><td id="gradle.md-934e64e9"    >A list of additional compiler arguments</td><td id="gradle.md-53ea6901"    ></td><td id="gradle.md-75f63b8f"    >[]</td></tr></tbody ></table ></div></section><section class="chapter"  ><h3 id="gradle.md-attributes-common-for-jvm-and-js" data-toc="gradle#gradle.md-attributes-common-for-jvm-and-js"  >Attributes common for JVM and JS</h3><div class="table-wrapper" ><table class=" wide" id="gradle.md-8724b3c5"  ><thead><tr class="ijRowHead" id="gradle.md-ef480611" ><th id="gradle.md-ba791512"    >Name</th><th id="gradle.md-3c3733f3"    >Description</th><th id="gradle.md-821ac099"    >Possible values</th><th id="gradle.md-b8bf6b74"    >Default value</th></tr></thead><tbody ><tr class="" id="gradle.md-934cec9" ><td id="gradle.md-135d727f"    ><code class="code " id="gradle.md-70580e5d"  >apiVersion</code></td><td id="gradle.md-8d8c58e0"    >Allow using declarations only from the specified version of bundled libraries</td><td id="gradle.md-93916ad8"    >&quot;1.2&quot; (DEPRECATED), &quot;1.3&quot;, &quot;1.4&quot;, &quot;1.5&quot; (EXPERIMENTAL)</td><td id="gradle.md-186dc67c"    ></td></tr><tr class="" id="gradle.md-dbd72733" ><td id="gradle.md-746c4199"    ><code class="code " id="gradle.md-dbbc640a"  >languageVersion</code></td><td id="gradle.md-75f4b473"    >Provide source compatibility with the specified version of Kotlin</td><td id="gradle.md-b24cfaf9"    >&quot;1.2&quot; (DEPRECATED), &quot;1.3&quot;, &quot;1.4&quot;, &quot;1.5&quot; (EXPERIMENTAL)</td><td id="gradle.md-ed123eb5"    ></td></tr></tbody ></table ></div></section><section class="chapter"  ><h3 id="gradle.md-attributes-specific-for-jvm" data-toc="gradle#gradle.md-attributes-specific-for-jvm"  >Attributes specific for JVM</h3><div class="table-wrapper" ><table class=" wide" id="gradle.md-ae283515"  ><thead><tr class="ijRowHead" id="gradle.md-9b1c697" ><th id="gradle.md-7c5258a8"    >Name</th><th id="gradle.md-500f96a6"    >Description</th><th id="gradle.md-35cd0a92"    >Possible values</th><th id="gradle.md-b7c2f082"    >Default value</th></tr></thead><tbody ><tr class="" id="gradle.md-c46119fc" ><td id="gradle.md-9104aa18"    ><code class="code " id="gradle.md-cb341148"  >javaParameters</code></td><td id="gradle.md-d975fa24"    >Generate metadata for Java 1.8 reflection on method parameters</td><td id="gradle.md-9d05e559"    ></td><td id="gradle.md-8c3359fd"    >false</td></tr><tr class="" id="gradle.md-f5f2e4b0" ><td id="gradle.md-1dd125f7"    ><code class="code " id="gradle.md-5051a9ed"  >jdkHome</code></td><td id="gradle.md-58893ae5"    >Include a custom JDK from the specified location into the classpath instead of the default JAVA_HOME</td><td id="gradle.md-ae90e1b5"    ></td><td id="gradle.md-e5438677"    ></td></tr><tr class="" id="gradle.md-35a43a11" ><td id="gradle.md-61c92992"    ><code class="code " id="gradle.md-2e2861ba"  >jvmTarget</code></td><td id="gradle.md-6400b6d1"    >Target version of the generated JVM bytecode</td><td id="gradle.md-189ba7f4"    >&quot;1.6&quot;, &quot;1.8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;11&quot;, &quot;12&quot;, &quot;13&quot;, &quot;14&quot;, &quot;15&quot;</td><td id="gradle.md-e8e114cb"    >&quot;1.6&quot;</td></tr><tr class="" id="gradle.md-8db221e1" ><td id="gradle.md-5e92eada"    ><code class="code " id="gradle.md-a8a487a"  >noJdk</code></td><td id="gradle.md-9bf21070"    >Don\'t automatically include the Java runtime into the classpath</td><td id="gradle.md-b1095a8a"    ></td><td id="gradle.md-d698a42"    >false</td></tr><tr class="" id="gradle.md-918f8061" ><td id="gradle.md-415e05ce"    ><code class="code " id="gradle.md-cd9b4b1a"  >noReflect</code></td><td id="gradle.md-fdd9cb09"    >Don\'t automatically include Kotlin reflection into the classpath</td><td id="gradle.md-fb8dbfa5"    ></td><td id="gradle.md-828f9534"    >true</td></tr><tr class="" id="gradle.md-a29d3dfd" ><td id="gradle.md-b469ff31"    ><code class="code " id="gradle.md-d9fa4f26"  >noStdlib</code></td><td id="gradle.md-2165fcc6"    >Don\'t automatically include the Kotlin/JVM stdlib and Kotlin reflection into the classpath</td><td id="gradle.md-ccd048ed"    ></td><td id="gradle.md-6c9789b4"    >true</td></tr><tr class="" id="gradle.md-ec29d487" ><td id="gradle.md-c7781890"    ><code class="code " id="gradle.md-a28a4d73"  >useIR</code></td><td id="gradle.md-d0d2aeb8"    >Use the IR backend</td><td id="gradle.md-ba86b058"    ></td><td id="gradle.md-f5fecfde"    >false</td></tr></tbody ></table ></div></section><section class="chapter"  ><h3 id="gradle.md-attributes-specific-for-js" data-toc="gradle#gradle.md-attributes-specific-for-js"  >Attributes specific for JS</h3><div class="table-wrapper" ><table class=" wide" id="gradle.md-9a2ffdae"  ><thead><tr class="ijRowHead" id="gradle.md-996ab300" ><th id="gradle.md-fc4c9a76"    >Name</th><th id="gradle.md-c96883ca"    >Description</th><th id="gradle.md-4dc3e952"    >Possible values</th><th id="gradle.md-dd7fea6"    >Default value</th></tr></thead><tbody ><tr class="" id="gradle.md-553720b1" ><td id="gradle.md-799c5315"    ><code class="code " id="gradle.md-e5ead6f3"  >friendModulesDisabled</code></td><td id="gradle.md-c0793707"    >Disable internal declaration export</td><td id="gradle.md-af46ebb0"    ></td><td id="gradle.md-90d473a"    >false</td></tr><tr class="" id="gradle.md-c605ed83" ><td id="gradle.md-14b383fd"    ><code class="code " id="gradle.md-389bee11"  >main</code></td><td id="gradle.md-e2abec0"    >Define whether the <code class="code " id="gradle.md-2e077219"  >main</code> function should be called upon execution</td><td id="gradle.md-31b57453"    >&quot;call&quot;, &quot;noCall&quot;</td><td id="gradle.md-ca0e1d4"    >&quot;call&quot;</td></tr><tr class="" id="gradle.md-1dbca8cf" ><td id="gradle.md-a5af1df3"    ><code class="code " id="gradle.md-a41f3575"  >metaInfo</code></td><td id="gradle.md-9ca6b7f9"    >Generate .meta.js and .kjsm files with metadata. Use to create a library</td><td id="gradle.md-1e8f6606"    ></td><td id="gradle.md-242750be"    >true</td></tr><tr class="" id="gradle.md-c5ca1267" ><td id="gradle.md-bcd4de66"    ><code class="code " id="gradle.md-d0bc628b"  >moduleKind</code></td><td id="gradle.md-46cca314"    >The kind of JS module generated by the compiler</td><td id="gradle.md-e8146df8"    >&quot;umd&quot;, &quot;commonjs&quot;, &quot;amd&quot;, &quot;plain&quot;</td><td id="gradle.md-a93d800e"    >&quot;umd&quot;</td></tr><tr class="" id="gradle.md-8219bd63" ><td id="gradle.md-8e7d9d45"    ><code class="code " id="gradle.md-81b6ac36"  >noStdlib</code></td><td id="gradle.md-a2332350"    >Don\'t automatically include the default Kotlin/JS stdlib into compilation dependencies</td><td id="gradle.md-472c9102"    ></td><td id="gradle.md-8c689659"    >true</td></tr><tr class="" id="gradle.md-4878bf24" ><td id="gradle.md-c8ef4a9c"    ><code class="code " id="gradle.md-f19eb125"  >outputFile</code></td><td id="gradle.md-7229ff55"    >Destination *.js file for the compilation result</td><td id="gradle.md-20674aaa"    ></td><td id="gradle.md-746ffb5c"    >&quot;&lt;buildDir&gt;/js/packages/&lt;project.name&gt;/kotlin/&lt;project.name&gt;.js&quot;</td></tr><tr class="" id="gradle.md-4bf1f1e0" ><td id="gradle.md-6d6d9ebd"    ><code class="code " id="gradle.md-50a293cc"  >sourceMap</code></td><td id="gradle.md-346c4f10"    >Generate source map</td><td id="gradle.md-1b384bf2"    ></td><td id="gradle.md-2969805a"    >true</td></tr><tr class="" id="gradle.md-18d0af1e" ><td id="gradle.md-739e72bb"    ><code class="code " id="gradle.md-dc397260"  >sourceMapEmbedSources</code></td><td id="gradle.md-58b19d3d"    >Embed source files into source map</td><td id="gradle.md-e4dfa277"    >&quot;never&quot;, &quot;always&quot;, &quot;inlining&quot;</td><td id="gradle.md-15a3b87d"    ></td></tr><tr class="" id="gradle.md-c6e3ad40" ><td id="gradle.md-244f8003"    ><code class="code " id="gradle.md-3e5b6de4"  >sourceMapPrefix</code></td><td id="gradle.md-5d999f81"    >Add the specified prefix to paths in the source map</td><td id="gradle.md-126f0dd5"    ></td><td id="gradle.md-29f96959"    ></td></tr><tr class="" id="gradle.md-b6672fe0" ><td id="gradle.md-dba8f618"    ><code class="code " id="gradle.md-cb774fdc"  >target</code></td><td id="gradle.md-76f8b8c2"    >Generate JS files for specific ECMA version</td><td id="gradle.md-48a7d8c1"    >&quot;v5&quot;</td><td id="gradle.md-6f1e7a26"    >&quot;v5&quot;</td></tr><tr class="" id="gradle.md-6cc1fc25" ><td id="gradle.md-d0079d97"    ><code class="code " id="gradle.md-c9622174"  >typedArrays</code></td><td id="gradle.md-9ac29bbc"    >Translate primitive arrays to JS typed arrays</td><td id="gradle.md-48aba064"    ></td><td id="gradle.md-46a544f"    >true</td></tr></tbody ></table ></div></section></section><section class="chapter"  ><h2 id="gradle.md-generating-documentation" data-toc="gradle#gradle.md-generating-documentation"  >Generating documentation</h2><p id="gradle.md-4df9ed1b" >To generate documentation for Kotlin projects, use <a href="https://github.com/Kotlin/dokka" id="gradle.md-66f4b96c"   data-external="true" rel="noopener noreferrer" >Dokka</a>; please refer to the <a href="https://github.com/Kotlin/dokka/blob/master/README.md#using-the-gradle-plugin" id="gradle.md-60184606"   data-external="true" rel="noopener noreferrer" >Dokka README</a> for configuration instructions. Dokka supports mixed-language projects and can generate output in multiple formats, including standard JavaDoc.</p></section><section class="chapter"  ><h2 id="gradle.md-osgi" data-toc="gradle#gradle.md-osgi"  >OSGi</h2><p id="gradle.md-a7786728" >For OSGi support see the <a href="#kotlin-osgi.md" id="gradle.md-35903048"   >Kotlin OSGi page</a>.</p></section><section class="chapter"  ><h2 id="gradle.md-using-gradle-kotlin-dsl" data-toc="gradle#gradle.md-using-gradle-kotlin-dsl"  >Using Gradle Kotlin DSL</h2><p id="gradle.md-34cbc851" >When using <a href="https://github.com/gradle/kotlin-dsl" id="gradle.md-f4087400"   data-external="true" rel="noopener noreferrer" >Gradle Kotlin DSL</a>, apply the Kotlin plugins using the <code class="code " id="gradle.md-ebf2dfd7"  >plugins { ... }</code> block. If you apply them with <code class="code " id="gradle.md-9e44d267"  >apply { plugin(...) }</code> instead, you may encounter unresolved references to the extensions generated by Gradle Kotlin DSL. To resolve that, you can comment out the erroneous usages, run the Gradle task <code class="code " id="gradle.md-b82fe3cd"  >kotlinDslAccessorsSnapshot</code>, then uncomment the usages back and rerun the build or reimport the project into the IDE.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="maven.md"  >Maven</h1><section class="chapter"  ><h2 id="maven.md-plugin-and-versions" data-toc="maven#maven.md-plugin-and-versions"  >Plugin and versions</h2><p id="maven.md-cc48f98d" >The <em id="maven.md-98f1026" class=""  >kotlin-maven-plugin</em> compiles Kotlin sources and modules. Currently, only Maven v3 is supported.</p><p id="maven.md-5f3a02b7" >Define the version of Kotlin you want to use via a <em id="maven.md-82b2dc12" class=""  >kotlin.version</em> property:</p><div class="code-block" data-lang="markup" id="maven.md-29aa0e65"         >&lt;properties&gt;\n    &lt;kotlin.version&gt;1.4.32&lt;/kotlin.version&gt;\n&lt;/properties&gt;\n</div></section><section class="chapter"  ><h2 id="maven.md-dependencies" data-toc="maven#maven.md-dependencies"  >Dependencies</h2><p id="maven.md-230b3fb6" >Kotlin has an extensive standard library that can be used in your applications. To use the standard library in your project, add the following dependency in the pom file:</p><div class="code-block" data-lang="markup" id="maven.md-2651f449"         >&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n        &lt;artifactId&gt;kotlin-stdlib&lt;/artifactId&gt;\n        &lt;version&gt;${kotlin.version}&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</div><p id="maven.md-992dd10" >If you\'re targeting JDK 7 or JDK 8, you can use extended versions of the Kotlin standard library. They contain additional extension functions for APIs added in new JDK versions. Instead of <code class="code " id="maven.md-f8e189e2"  >kotlin-stdlib</code>, use <code class="code " id="maven.md-855326ce"  >kotlin-stdlib-jdk7</code> or <code class="code " id="maven.md-eaecb2a2"  >kotlin-stdlib-jdk8</code>, depending on your JDK version.</p><aside data-type="note" class="prompt" data-title="" id="maven.md-28654006" ><p id="maven.md-3067095f" >For Kotlin versions older that 1.2, use <code class="code " id="maven.md-a41958bb"  >kotlin-stdlib-jre7</code> and <code class="code " id="maven.md-ed056ddd"  >kotlin-stdlib-jre8</code>.</p></aside><p id="maven.md-e2d77eb1" >If your project uses <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.full/index.html" id="maven.md-8047204"   data-external="true" rel="noopener noreferrer" >Kotlin reflection</a> or testing facilities, you need to add the corresponding dependencies as well. The artifact IDs are <code class="code " id="maven.md-fc0f69d5"  >kotlin-reflect</code> for the reflection library, and <code class="code " id="maven.md-147b985d"  >kotlin-test</code> and <code class="code " id="maven.md-eee80456"  >kotlin-test-junit</code> for the testing libraries.</p></section><section class="chapter"  ><h2 id="maven.md-compile-kotlin-only-source-code" data-toc="maven#maven.md-compile-kotlin-only-source-code"  >Compile Kotlin-only source code</h2><p id="maven.md-346eead0" >To compile source code, specify the source directories in the <code class="code " id="maven.md-f985a80c"  >&lt;build&gt;</code> tag:</p><div class="code-block" data-lang="markup" id="maven.md-3dc4e607"         >&lt;build&gt;\n    &lt;sourceDirectory&gt;${project.basedir}/src/main/kotlin&lt;/sourceDirectory&gt;\n    &lt;testSourceDirectory&gt;${project.basedir}/src/test/kotlin&lt;/testSourceDirectory&gt;\n&lt;/build&gt;\n</div><p id="maven.md-bdceaf48" >The Kotlin Maven Plugin needs to be referenced to compile the sources:</p><div class="code-block" data-lang="markup" id="maven.md-52d24e46"         >&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n            &lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;\n            &lt;version&gt;${kotlin.version}&lt;/version&gt;\n\n            &lt;executions&gt;\n                &lt;execution&gt;\n                    &lt;id&gt;compile&lt;/id&gt;\n                    &lt;goals&gt;\n                        &lt;goal&gt;compile&lt;/goal&gt;\n                    &lt;/goals&gt;\n                &lt;/execution&gt;\n\n                &lt;execution&gt;\n                    &lt;id&gt;test-compile&lt;/id&gt;\n                    &lt;goals&gt;\n                        &lt;goal&gt;test-compile&lt;/goal&gt;\n                    &lt;/goals&gt;\n                &lt;/execution&gt;\n            &lt;/executions&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n</div></section><section class="chapter"  ><h2 id="maven.md-compile-kotlin-and-java-sources" data-toc="maven#maven.md-compile-kotlin-and-java-sources"  >Compile Kotlin and Java sources</h2><p id="maven.md-e17b5439" >To compile projects that include Kotlin and Java source code, invoke the Kotlin compiler before the Java compiler. In maven terms that means that <code class="code " id="maven.md-d7fcf497"  >kotlin-maven-plugin</code> should be run before <code class="code " id="maven.md-9417137e"  >maven-compiler-plugin</code> using the following method, making sure that the <code class="code " id="maven.md-59b27b1"  >kotlin</code> plugin comes before the <code class="code " id="maven.md-94aa0c6d"  >maven-compiler-plugin</code> in your <code class="code " id="maven.md-7a7f1348"  >pom.xml</code> file:</p><div class="code-block" data-lang="markup" id="maven.md-30853679"         >&lt;build&gt;\n    &lt;plugins&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n            &lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;\n            &lt;version&gt;${kotlin.version}&lt;/version&gt;\n            &lt;executions&gt;\n                &lt;execution&gt;\n                    &lt;id&gt;compile&lt;/id&gt;\n                    &lt;goals&gt;\n                        &lt;goal&gt;compile&lt;/goal&gt;\n                    &lt;/goals&gt;\n                    &lt;configuration&gt;\n                        &lt;sourceDirs&gt;\n                            &lt;sourceDir&gt;${project.basedir}/src/main/kotlin&lt;/sourceDir&gt;\n                            &lt;sourceDir&gt;${project.basedir}/src/main/java&lt;/sourceDir&gt;\n                        &lt;/sourceDirs&gt;\n                    &lt;/configuration&gt;\n                &lt;/execution&gt;\n                &lt;execution&gt;\n                    &lt;id&gt;test-compile&lt;/id&gt;\n                    &lt;goals&gt; &lt;goal&gt;test-compile&lt;/goal&gt; &lt;/goals&gt;\n                    &lt;configuration&gt;\n                        &lt;sourceDirs&gt;\n                            &lt;sourceDir&gt;${project.basedir}/src/test/kotlin&lt;/sourceDir&gt;\n                            &lt;sourceDir&gt;${project.basedir}/src/test/java&lt;/sourceDir&gt;\n                        &lt;/sourceDirs&gt;\n                    &lt;/configuration&gt;\n                &lt;/execution&gt;\n            &lt;/executions&gt;\n        &lt;/plugin&gt;\n        &lt;plugin&gt;\n            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n            &lt;version&gt;3.5.1&lt;/version&gt;\n            &lt;executions&gt;\n                &lt;!-- Replacing default-compile as it is treated specially by maven --&gt;\n                &lt;execution&gt;\n                    &lt;id&gt;default-compile&lt;/id&gt;\n                    &lt;phase&gt;none&lt;/phase&gt;\n                &lt;/execution&gt;\n                &lt;!-- Replacing default-testCompile as it is treated specially by maven --&gt;\n                &lt;execution&gt;\n                    &lt;id&gt;default-testCompile&lt;/id&gt;\n                    &lt;phase&gt;none&lt;/phase&gt;\n                &lt;/execution&gt;\n                &lt;execution&gt;\n                    &lt;id&gt;java-compile&lt;/id&gt;\n                    &lt;phase&gt;compile&lt;/phase&gt;\n                    &lt;goals&gt;\n                        &lt;goal&gt;compile&lt;/goal&gt;\n                    &lt;/goals&gt;\n                &lt;/execution&gt;\n                &lt;execution&gt;\n                    &lt;id&gt;java-test-compile&lt;/id&gt;\n                    &lt;phase&gt;test-compile&lt;/phase&gt;\n                    &lt;goals&gt;\n                        &lt;goal&gt;testCompile&lt;/goal&gt;\n                    &lt;/goals&gt;\n                &lt;/execution&gt;\n            &lt;/executions&gt;\n        &lt;/plugin&gt;\n    &lt;/plugins&gt;\n&lt;/build&gt;\n</div></section><section class="chapter"  ><h2 id="maven.md-incremental-compilation" data-toc="maven#maven.md-incremental-compilation"  >Incremental compilation</h2><p id="maven.md-bddab232" >To make your builds faster, you can enable incremental compilation for Maven by defining the <code class="code " id="maven.md-a1fea880"  >kotlin.compiler.incremental</code> property:</p><div class="code-block" data-lang="markup" id="maven.md-3586e361"         >&lt;properties&gt;\n    &lt;kotlin.compiler.incremental&gt;true&lt;/kotlin.compiler.incremental&gt;\n&lt;/properties&gt;\n</div><p id="maven.md-da30296f" >Alternatively, run your build with the <code class="code " id="maven.md-684d0418"  >-Dkotlin.compiler.incremental=true</code> option.</p></section><section class="chapter"  ><h2 id="maven.md-annotation-processing" data-toc="maven#maven.md-annotation-processing"  >Annotation processing</h2><p id="maven.md-27f54668" >See the description of <a href="#kapt.md" id="maven.md-7c7437d5"   >Kotlin annotation processing tool</a> (<code class="code " id="maven.md-9ee702be"  >kapt</code> ).</p></section><section class="chapter"  ><h2 id="maven.md-jar-file" data-toc="maven#maven.md-jar-file"  >Jar file</h2><p id="maven.md-4281ffb1" >To create a small Jar file containing just the code from your module, include the following under <code class="code " id="maven.md-e78b2e1a"  >build-&gt;plugins</code> in your Maven pom.xml file, where <code class="code " id="maven.md-aa636639"  >main.class</code> is defined as a property and points to the main Kotlin or Java class:</p><div class="code-block" data-lang="markup" id="maven.md-c7e32c2d"         >&lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n    &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;\n    &lt;version&gt;2.6&lt;/version&gt;\n    &lt;configuration&gt;\n        &lt;archive&gt;\n            &lt;manifest&gt;\n                &lt;addClasspath&gt;true&lt;/addClasspath&gt;\n                &lt;mainClass&gt;${main.class}&lt;/mainClass&gt;\n            &lt;/manifest&gt;\n        &lt;/archive&gt;\n    &lt;/configuration&gt;\n&lt;/plugin&gt;\n</div></section><section class="chapter"  ><h2 id="maven.md-self-contained-jar-file" data-toc="maven#maven.md-self-contained-jar-file"  >Self-contained Jar file</h2><p id="maven.md-bbb349ef" >To create a self-contained Jar file containing the code from your module along with dependencies, include the following under <code class="code " id="maven.md-5a24d329"  >build-&gt;plugins</code> in your Maven pom.xml file, where <code class="code " id="maven.md-e2940af5"  >main.class</code> is defined as a property and points to the main Kotlin or Java class:</p><div class="code-block" data-lang="markup" id="maven.md-ffe8ec7b"         >&lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n    &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;\n    &lt;version&gt;2.6&lt;/version&gt;\n    &lt;executions&gt;\n        &lt;execution&gt;\n            &lt;id&gt;make-assembly&lt;/id&gt;\n            &lt;phase&gt;package&lt;/phase&gt;\n            &lt;goals&gt; &lt;goal&gt;single&lt;/goal&gt; &lt;/goals&gt;\n            &lt;configuration&gt;\n                &lt;archive&gt;\n                    &lt;manifest&gt;\n                        &lt;mainClass&gt;${main.class}&lt;/mainClass&gt;\n                    &lt;/manifest&gt;\n                &lt;/archive&gt;\n                &lt;descriptorRefs&gt;\n                    &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;\n                &lt;/descriptorRefs&gt;\n            &lt;/configuration&gt;\n        &lt;/execution&gt;\n    &lt;/executions&gt;\n&lt;/plugin&gt;\n</div><p id="maven.md-f801ac04" >This self-contained jar file can be passed directly to a JRE to run your application:</p><div class="code-block" data-lang="bash" id="maven.md-19681ea6"         >java -jar target/mymodule-0.0.1-SNAPSHOT-jar-with-dependencies.jar\n</div></section><section class="chapter"  ><h2 id="maven.md-specifying-compiler-options" data-toc="maven#maven.md-specifying-compiler-options"  >Specifying compiler options</h2><p id="maven.md-cf31e8cf" >Additional options and arguments for the compiler can be specified as tags under the <code class="code " id="maven.md-7dc47e37"  >&lt;configuration&gt;</code> element of the Maven plugin node:</p><div class="code-block" data-lang="markup" id="maven.md-c04860a8"         >&lt;plugin&gt;\n    &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n    &lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;\n    &lt;version&gt;${kotlin.version}&lt;/version&gt;\n    &lt;executions&gt;...&lt;/executions&gt;\n    &lt;configuration&gt;\n        &lt;nowarn&gt;true&lt;/nowarn&gt;  &lt;!-- Disable warnings --&gt;\n        &lt;args&gt;\n            &lt;arg&gt;-Xjsr305=strict&lt;/arg&gt; &lt;!-- Enable strict mode for JSR-305 annotations --&gt;\n            ...\n        &lt;/args&gt;\n    &lt;/configuration&gt;\n&lt;/plugin&gt;\n</div><p id="maven.md-c8f4075a" >Many of the options can also be configured through properties:</p><div class="code-block" data-lang="markup" id="maven.md-21f7dc6d"         >&lt;project ...&gt;\n    &lt;properties&gt;\n        &lt;kotlin.compiler.languageVersion&gt;1.0&lt;/kotlin.compiler.languageVersion&gt;\n    &lt;/properties&gt;\n&lt;/project&gt;\n</div><p id="maven.md-66464601" >The following attributes are supported:</p><section class="chapter"  ><h3 id="maven.md-attributes-common-for-jvm-and-js" data-toc="maven#maven.md-attributes-common-for-jvm-and-js"  >Attributes common for JVM and JS</h3><div class="table-wrapper" ><table class=" wide" id="maven.md-6b2e365c"  ><thead><tr class="ijRowHead" id="maven.md-d53cf715" ><th id="maven.md-576c245"    >Name</th><th id="maven.md-5f95cb1e"    >Property name</th><th id="maven.md-afde10b7"    >Description</th><th id="maven.md-b3c87fc3"    >Possible values</th><th id="maven.md-a1a8cfd7"    >Default value</th></tr></thead><tbody ><tr class="" id="maven.md-c90fa2d2" ><td id="maven.md-99db8f01"    ><code class="code " id="maven.md-161358e9"  >nowarn</code></td><td id="maven.md-599e155"    ></td><td id="maven.md-1b3c44bb"    >Generate no warnings</td><td id="maven.md-58511744"    >true, false</td><td id="maven.md-a1990609"    >false</td></tr><tr class="" id="maven.md-4729c7e0" ><td id="maven.md-bd312d85"    ><code class="code " id="maven.md-6e8243f7"  >languageVersion</code></td><td id="maven.md-462deaf4"    >kotlin.compiler.languageVersion</td><td id="maven.md-9f12f047"    >Provide source compatibility with the specified version of Kotlin</td><td id="maven.md-9852fd47"    >&quot;1.2&quot; (DEPRECATED), &quot;1.3&quot;, &quot;1.4&quot;, &quot;1.5&quot; (EXPERIMENTAL)</td></tr><tr class="" id="maven.md-fea9394b" ><td id="maven.md-7a56188f"    ><code class="code " id="maven.md-d287aa74"  >apiVersion</code></td><td id="maven.md-d56f1be8"    >kotlin.compiler.apiVersion</td><td id="maven.md-9bc37bc5"    >Allow using declarations only from the specified version of bundled libraries</td><td id="maven.md-c0b5a1d9"    >&quot;1.2&quot; (DEPRECATED), &quot;1.3&quot;, &quot;1.4&quot;, &quot;1.5&quot; (EXPERIMENTAL)</td></tr><tr class="" id="maven.md-c817f429" ><td id="maven.md-aca0bfbe"    ><code class="code " id="maven.md-e93d1c0c"  >sourceDirs</code></td><td id="maven.md-acc2bd2c"    ></td><td id="maven.md-341cbaec"    >The directories containing the source files to compile</td><td id="maven.md-912d3a77"    ></td><td id="maven.md-cf024c04"    >The project source roots</td></tr><tr class="" id="maven.md-a0a235c2" ><td id="maven.md-9b40c940"    ><code class="code " id="maven.md-eddb03c"  >compilerPlugins</code></td><td id="maven.md-606cb11a"    ></td><td id="maven.md-159af17a"    >Enabled compiler plugins</td><td id="maven.md-3e8ed315"    ></td><td id="maven.md-fe1a9d13"    >[]</td></tr><tr class="" id="maven.md-760307e1" ><td id="maven.md-64158edc"    ><code class="code " id="maven.md-eef5580"  >pluginOptions</code></td><td id="maven.md-996fcc84"    ></td><td id="maven.md-ea56ecde"    >Options for compiler plugins</td><td id="maven.md-ebe95f5a"    ></td><td id="maven.md-ad783dae"    >[]</td></tr><tr class="" id="maven.md-b065a77f" ><td id="maven.md-2b5de9f"    ><code class="code " id="maven.md-f20841d8"  >args</code></td><td id="maven.md-1d9b8b16"    ></td><td id="maven.md-b06fc7c"    >Additional compiler arguments</td><td id="maven.md-ba1fcd12"    ></td><td id="maven.md-9af216e"    >[]</td></tr></tbody ></table ></div></section><section class="chapter"  ><h3 id="maven.md-attributes-specific-for-jvm" data-toc="maven#maven.md-attributes-specific-for-jvm"  >Attributes specific for JVM</h3><div class="table-wrapper" ><table class=" wide" id="maven.md-f56160ee"  ><thead><tr class="ijRowHead" id="maven.md-cd38a5e3" ><th id="maven.md-e946ca13"    >Name</th><th id="maven.md-f5591c6c"    >Property name</th><th id="maven.md-9ad3adf"    >Description</th><th id="maven.md-ab7ab2af"    >Possible values</th><th id="maven.md-f680af46"    >Default value</th></tr></thead><tbody ><tr class="" id="maven.md-630f979e" ><td id="maven.md-485538fb"    ><code class="code " id="maven.md-5200f54d"  >jvmTarget</code></td><td id="maven.md-3dcccd26"    ><code class="code " id="maven.md-1091c1d0"  >kotlin.compiler.jvmTarget</code></td><td id="maven.md-52cdb6ee"    >Target version of the generated JVM bytecode</td><td id="maven.md-e58b1cc9"    >&quot;1.6&quot;, &quot;1.8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;11&quot;, &quot;12&quot;, &quot;13&quot;, &quot;14&quot;, &quot;15&quot;</td><td id="maven.md-789cf75e"    >&quot;1.6&quot;</td></tr><tr class="" id="maven.md-d2724b94" ><td id="maven.md-999aa273"    ><code class="code " id="maven.md-d142bc2c"  >jdkHome</code></td><td id="maven.md-68328257"    ><code class="code " id="maven.md-c5f25742"  >kotlin.compiler.jdkHome</code></td><td id="maven.md-5db450a"    >Include a custom JDK from the specified location into the classpath instead of the default JAVA_HOME</td><td id="maven.md-9867e41f"    ></td><td id="maven.md-9550611"    ></td></tr></tbody ></table ></div></section><section class="chapter"  ><h3 id="maven.md-attributes-specific-for-js" data-toc="maven#maven.md-attributes-specific-for-js"  >Attributes specific for JS</h3><div class="table-wrapper" ><table class=" wide" id="maven.md-fc4ce53f"  ><thead><tr class="ijRowHead" id="maven.md-725c74e7" ><th id="maven.md-73fb32d3"    >Name</th><th id="maven.md-de31fa36"    >Property name</th><th id="maven.md-f964082"    >Description</th><th id="maven.md-4be8612d"    >Possible values</th><th id="maven.md-9e1e7e24"    >Default value</th></tr></thead><tbody ><tr class="" id="maven.md-f0917f6c" ><td id="maven.md-f1872f54"    ><code class="code " id="maven.md-184a6d5b"  >outputFile</code></td><td id="maven.md-2cd37bfc"    ></td><td id="maven.md-347de9ea"    >Destination *.js file for the compilation result</td><td id="maven.md-8bc3ec56"    ></td><td id="maven.md-7ff0d006"    ></td></tr><tr class="" id="maven.md-c6520cf5" ><td id="maven.md-df40e14e"    ><code class="code " id="maven.md-63ab2bc8"  >metaInfo</code></td><td id="maven.md-de7ce8c8"    ></td><td id="maven.md-b0a60d42"    >Generate .meta.js and .kjsm files with metadata. Use to create a library</td><td id="maven.md-217229ac"    >true, false</td><td id="maven.md-d1b9b107"    >true</td></tr><tr class="" id="maven.md-9e2e8178" ><td id="maven.md-4edecfcf"    ><code class="code " id="maven.md-da0169ea"  >sourceMap</code></td><td id="maven.md-b2533857"    ></td><td id="maven.md-78256e9b"    >Generate source map</td><td id="maven.md-f618a7a5"    >true, false</td><td id="maven.md-3ce5834a"    >false</td></tr><tr class="" id="maven.md-fb89b8e3" ><td id="maven.md-93384319"    ><code class="code " id="maven.md-b64b2393"  >sourceMapEmbedSources</code></td><td id="maven.md-cfb14e47"    ></td><td id="maven.md-d5884301"    >Embed source files into source map</td><td id="maven.md-cbd60b33"    >&quot;never&quot;, &quot;always&quot;, &quot;inlining&quot;</td><td id="maven.md-b44ce00a"    >&quot;inlining&quot;</td></tr><tr class="" id="maven.md-61f6d0a5" ><td id="maven.md-b1d6feb9"    ><code class="code " id="maven.md-cc5442b4"  >sourceMapPrefix</code></td><td id="maven.md-9e281348"    ></td><td id="maven.md-f45f40c3"    >Add the specified prefix to paths in the source map</td><td id="maven.md-2d020e87"    ></td><td id="maven.md-15697a66"    ></td></tr><tr class="" id="maven.md-96e937b9" ><td id="maven.md-98ef6a33"    ><code class="code " id="maven.md-e855a60"  >moduleKind</code></td><td id="maven.md-6da860c7"    ></td><td id="maven.md-55c37899"    >The kind of JS module generated by the compiler</td><td id="maven.md-ce55478c"    >&quot;umd&quot;, &quot;commonjs&quot;, &quot;amd&quot;, &quot;plain&quot;</td><td id="maven.md-887b86f2"    >&quot;umd&quot;</td></tr></tbody ></table ></div></section></section><section class="chapter"  ><h2 id="maven.md-generating-documentation" data-toc="maven#maven.md-generating-documentation"  >Generating documentation</h2><p id="maven.md-1b83362f" >The standard JavaDoc generation plugin (<code class="code " id="maven.md-1bd621fc"  >maven-javadoc-plugin</code>) does not support Kotlin code. To generate documentation for Kotlin projects, use <a href="https://github.com/Kotlin/dokka" id="maven.md-a3fcc4dd"   data-external="true" rel="noopener noreferrer" >Dokka</a>; please refer to the <a href="https://github.com/Kotlin/dokka/blob/master/README.md#using-the-maven-plugin" id="maven.md-5894e57e"   data-external="true" rel="noopener noreferrer" >Dokka README</a> for configuration instructions. Dokka supports mixed-language projects and can generate output in multiple formats, including standard JavaDoc.</p></section><section class="chapter"  ><h2 id="maven.md-osgi" data-toc="maven#maven.md-osgi"  >OSGi</h2><p id="maven.md-6c642b8" >For OSGi support see the <a href="#kotlin-osgi.md" id="maven.md-7bae9d30"   >Kotlin OSGi page</a>.</p></section><section class="chapter"  ><h2 id="maven.md-examples" data-toc="maven#maven.md-examples"  >Examples</h2><p id="maven.md-6841bfda" >An example Maven project can be <a href="https://github.com/JetBrains/kotlin-examples/archive/master/maven.zip" id="maven.md-be325306"   data-external="true" rel="noopener noreferrer" >downloaded from the GitHub repository</a></p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="ant.md"  >Ant</h1><section class="chapter"  ><h2 id="ant.md-getting-the-ant-tasks" data-toc="ant#ant.md-getting-the-ant-tasks"  >Getting the Ant tasks</h2><p id="ant.md-312937d9" >Kotlin provides three tasks for Ant:</p><ul class="list _ul" id="ant.md-e0e480c9"   ><li class="list__item" id="ant.md-8fcdac53" ><p><code class="code " id="ant.md-2037e326"  >kotlinc</code>: Kotlin compiler targeting the JVM</p></li><li class="list__item" id="ant.md-518d260d" ><p><code class="code " id="ant.md-df75dc33"  >kotlin2js</code>: Kotlin compiler targeting JavaScript</p></li><li class="list__item" id="ant.md-9e7f6b08" ><p><code class="code " id="ant.md-bf8423a2"  >withKotlin</code>: Task to compile Kotlin files when using the standard <em id="ant.md-4c6ebe86" class=""  >javac</em> Ant task</p></li></ul><p id="ant.md-14e8ff20" >These tasks are defined in the <em id="ant.md-acb196d6" class=""  >kotlin-ant.jar</em> library which is located in the <code class="code " id="ant.md-b7d4c6e9"  >lib</code> folder in the <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.4.32" id="ant.md-807384e8"   data-external="true" rel="noopener noreferrer" >Kotlin Compiler</a> archive. Ant version 1.8.2+ is required.</p></section><section class="chapter"  ><h2 id="ant.md-targeting-jvm-with-kotlin-only-source" data-toc="ant#ant.md-targeting-jvm-with-kotlin-only-source"  >Targeting JVM with Kotlin-only source</h2><p id="ant.md-b339a657" >When the project consists of exclusively Kotlin source code, the easiest way to compile the project is to use the <code class="code " id="ant.md-9bbf67e6"  >kotlinc</code> task:</p><div class="code-block" data-lang="markup" id="ant.md-58b448cc"         >&lt;project name=&quot;Ant Task Test&quot; default=&quot;build&quot;&gt;\n    &lt;typedef resource=&quot;org/jetbrains/kotlin/ant/antlib.xml&quot; classpath=&quot;${kotlin.lib}/kotlin-ant.jar&quot;/&gt;\n\n    &lt;target name=&quot;build&quot;&gt;\n        &lt;kotlinc src=&quot;hello.kt&quot; output=&quot;hello.jar&quot;/&gt;\n    &lt;/target&gt;\n&lt;/project&gt;\n</div><p id="ant.md-5ee79921" >where <code class="code " id="ant.md-6c8c923a"  >${kotlin.lib}</code> points to the folder where the Kotlin standalone compiler was unzipped.</p></section><section class="chapter"  ><h2 id="ant.md-targeting-jvm-with-kotlin-only-source-and-multiple-roots" data-toc="ant#ant.md-targeting-jvm-with-kotlin-only-source-and-multiple-roots"  >Targeting JVM with Kotlin-only source and multiple roots</h2><p id="ant.md-22582aef" >If a project consists of multiple source roots, use <code class="code " id="ant.md-670a3ac"  >src</code> as elements to define paths:</p><div class="code-block" data-lang="markup" id="ant.md-ea090beb"         >&lt;project name=&quot;Ant Task Test&quot; default=&quot;build&quot;&gt;\n    &lt;typedef resource=&quot;org/jetbrains/kotlin/ant/antlib.xml&quot; classpath=&quot;${kotlin.lib}/kotlin-ant.jar&quot;/&gt;\n\n    &lt;target name=&quot;build&quot;&gt;\n        &lt;kotlinc output=&quot;hello.jar&quot;&gt;\n            &lt;src path=&quot;root1&quot;/&gt;\n            &lt;src path=&quot;root2&quot;/&gt;\n        &lt;/kotlinc&gt;\n    &lt;/target&gt;\n&lt;/project&gt;\n</div></section><section class="chapter"  ><h2 id="ant.md-targeting-jvm-with-kotlin-and-java-source" data-toc="ant#ant.md-targeting-jvm-with-kotlin-and-java-source"  >Targeting JVM with Kotlin and Java source</h2><p id="ant.md-3b416d79" >If a project consists of both Kotlin and Java source code, while it is possible to use <code class="code " id="ant.md-1f6fafd3"  >kotlinc</code>, to avoid repetition of task parameters, it is recommended to use <code class="code " id="ant.md-2d591845"  >withKotlin</code> task:</p><div class="code-block" data-lang="markup" id="ant.md-fb03483"         >&lt;project name=&quot;Ant Task Test&quot; default=&quot;build&quot;&gt;\n    &lt;typedef resource=&quot;org/jetbrains/kotlin/ant/antlib.xml&quot; classpath=&quot;${kotlin.lib}/kotlin-ant.jar&quot;/&gt;\n\n    &lt;target name=&quot;build&quot;&gt;\n        &lt;delete dir=&quot;classes&quot; failonerror=&quot;false&quot;/&gt;\n        &lt;mkdir dir=&quot;classes&quot;/&gt;\n        &lt;javac destdir=&quot;classes&quot; includeAntRuntime=&quot;false&quot; srcdir=&quot;src&quot;&gt;\n            &lt;withKotlin/&gt;\n        &lt;/javac&gt;\n        &lt;jar destfile=&quot;hello.jar&quot;&gt;\n            &lt;fileset dir=&quot;classes&quot;/&gt;\n        &lt;/jar&gt;\n    &lt;/target&gt;\n&lt;/project&gt;\n</div><p id="ant.md-6ff8d186" >You can also specify the name of the module being compiled as the <code class="code " id="ant.md-cbed33d3"  >moduleName</code> attribute:</p><div class="code-block" data-lang="markup" id="ant.md-f5bdcc15"         >&lt;withKotlin moduleName=&quot;myModule&quot;/&gt;\n</div></section><section class="chapter"  ><h2 id="ant.md-targeting-javascript-with-single-source-folder" data-toc="ant#ant.md-targeting-javascript-with-single-source-folder"  >Targeting JavaScript with single source folder</h2><p><div class="code-block" data-lang="markup" id="ant.md-20c196ed"         >&lt;project name=&quot;Ant Task Test&quot; default=&quot;build&quot;&gt;\n    &lt;typedef resource=&quot;org/jetbrains/kotlin/ant/antlib.xml&quot; classpath=&quot;${kotlin.lib}/kotlin-ant.jar&quot;/&gt;\n\n    &lt;target name=&quot;build&quot;&gt;\n        &lt;kotlin2js src=&quot;root1&quot; output=&quot;out.js&quot;/&gt;\n    &lt;/target&gt;\n&lt;/project&gt;\n</div></p></section><section class="chapter"  ><h2 id="ant.md-targeting-javascript-with-prefix-postfix-and-sourcemap-options" data-toc="ant#ant.md-targeting-javascript-with-prefix-postfix-and-sourcemap-options"  >Targeting JavaScript with Prefix, PostFix and sourcemap options</h2><p><div class="code-block" data-lang="markup" id="ant.md-5cbfc3d2"         >&lt;project name=&quot;Ant Task Test&quot; default=&quot;build&quot;&gt;\n    &lt;taskdef resource=&quot;org/jetbrains/kotlin/ant/antlib.xml&quot; classpath=&quot;${kotlin.lib}/kotlin-ant.jar&quot;/&gt;\n\n    &lt;target name=&quot;build&quot;&gt;\n        &lt;kotlin2js src=&quot;root1&quot; output=&quot;out.js&quot; outputPrefix=&quot;prefix&quot; outputPostfix=&quot;postfix&quot; sourcemap=&quot;true&quot;/&gt;\n    &lt;/target&gt;\n&lt;/project&gt;\n</div></p></section><section class="chapter"  ><h2 id="ant.md-targeting-javascript-with-single-source-folder-and-metainfo-option" data-toc="ant#ant.md-targeting-javascript-with-single-source-folder-and-metainfo-option"  >Targeting JavaScript with single source folder and metaInfo option</h2><p id="ant.md-b911c12d" >The <code class="code " id="ant.md-56b770f0"  >metaInfo</code> option is useful, if you want to distribute the result of translation as a Kotlin/JavaScript library. If <code class="code " id="ant.md-7b72557e"  >metaInfo</code> was set to <code class="code " id="ant.md-3c74f51"  >true</code>, then during compilation additional JS file with binary metadata will be created. This file should be distributed together with the result of translation:</p><div class="code-block" data-lang="markup" id="ant.md-47e39bdb"         >&lt;project name=&quot;Ant Task Test&quot; default=&quot;build&quot;&gt;\n    &lt;typedef resource=&quot;org/jetbrains/kotlin/ant/antlib.xml&quot; classpath=&quot;${kotlin.lib}/kotlin-ant.jar&quot;/&gt;\n\n    &lt;target name=&quot;build&quot;&gt;\n        &lt;!-- out.meta.js will be created, which contains binary metadata --&gt;\n        &lt;kotlin2js src=&quot;root1&quot; output=&quot;out.js&quot; metaInfo=&quot;true&quot;/&gt;\n    &lt;/target&gt;\n&lt;/project&gt;\n</div></section><section class="chapter"  ><h2 id="ant.md-references" data-toc="ant#ant.md-references"  >References</h2><p id="ant.md-5033a522" >Complete list of elements and attributes are listed below:</p><section class="chapter"  ><h3 id="ant.md-attributes-common-for-kotlinc-and-kotlin2js" data-toc="ant#ant.md-attributes-common-for-kotlinc-and-kotlin2js"  >Attributes common for kotlinc and kotlin2js</h3><div class="table-wrapper" ><table class=" wide" id="ant.md-6d17a6b6"  ><thead><tr class="ijRowHead" id="ant.md-b5d6d6a2" ><th id="ant.md-d55b6dd5"    >Name</th><th id="ant.md-b2a8b350"    >Description</th><th id="ant.md-c7ff4e4a"    >Required</th><th id="ant.md-f77143a3"    >Default Value</th></tr></thead><tbody ><tr class="" id="ant.md-93544b68" ><td id="ant.md-b31efa65"    ><code class="code " id="ant.md-ac30303f"  >src</code></td><td id="ant.md-2142a7"    >Kotlin source file or directory to compile</td><td id="ant.md-f32f9882"    >Yes</td><td id="ant.md-3a7da411"    ></td></tr><tr class="" id="ant.md-219089bf" ><td id="ant.md-7e2b960"    ><code class="code " id="ant.md-4d23917a"  >nowarn</code></td><td id="ant.md-916c46fc"    >Suppresses all compilation warnings</td><td id="ant.md-fc8a03e4"    >No</td><td id="ant.md-a7ae75da"    >false</td></tr><tr class="" id="ant.md-b03d1048" ><td id="ant.md-11b976f5"    ><code class="code " id="ant.md-ef2d3b69"  >noStdlib</code></td><td id="ant.md-4376ae28"    >Does not include the Kotlin standard library into the classpath</td><td id="ant.md-c0bf3d5a"    >No</td><td id="ant.md-a9678737"    >false</td></tr><tr class="" id="ant.md-dad98fa3" ><td id="ant.md-f3795640"    ><code class="code " id="ant.md-ef8cf9a8"  >failOnError</code></td><td id="ant.md-4a4cacee"    >Fails the build if errors are detected during the compilation</td><td id="ant.md-801e6cb1"    >No</td><td id="ant.md-4fc77023"    >true</td></tr></tbody ></table ></div></section><section class="chapter"  ><h3 id="ant.md-kotlinc-attributes" data-toc="ant#ant.md-kotlinc-attributes"  >kotlinc attributes</h3><div class="table-wrapper" ><table class=" wide" id="ant.md-cdf65606"  ><thead><tr class="ijRowHead" id="ant.md-b3445f9" ><th id="ant.md-b42a84f2"    >Name</th><th id="ant.md-ad2eba40"    >Description</th><th id="ant.md-6c15abb8"    >Required</th><th id="ant.md-fa0747f0"    >Default Value</th></tr></thead><tbody ><tr class="" id="ant.md-ff70adb7" ><td id="ant.md-55a5601a"    ><code class="code " id="ant.md-2e8d2a4b"  >output</code></td><td id="ant.md-25e1b67"    >Destination directory or .jar file name</td><td id="ant.md-ef715339"    >Yes</td><td id="ant.md-d62d9128"    ></td></tr><tr class="" id="ant.md-442eeea2" ><td id="ant.md-a93e6774"    ><code class="code " id="ant.md-a112b7cd"  >classpath</code></td><td id="ant.md-8b2121fb"    >Compilation class path</td><td id="ant.md-1a26f74e"    >No</td><td id="ant.md-49eb916e"    ></td></tr><tr class="" id="ant.md-b8e17255" ><td id="ant.md-70339ba6"    ><code class="code " id="ant.md-aedf8a23"  >classpathref</code></td><td id="ant.md-90d8f4f7"    >Compilation class path reference</td><td id="ant.md-7635dff9"    >No</td><td id="ant.md-d57b5d59"    ></td></tr><tr class="" id="ant.md-164ddf07" ><td id="ant.md-539183d"    ><code class="code " id="ant.md-14d27d17"  >includeRuntime</code></td><td id="ant.md-ccb8b44f"    >If <code class="code " id="ant.md-9ede240d"  >output</code> is a .jar file, whether Kotlin runtime library is included in the jar</td><td id="ant.md-e795607c"    >No</td><td id="ant.md-c15a5977"    >true</td></tr><tr class="" id="ant.md-e41c0dea" ><td id="ant.md-da132ec1"    ><code class="code " id="ant.md-a88e0ac6"  >moduleName</code></td><td id="ant.md-ef3e1bc3"    >Name of the module being compiled</td><td id="ant.md-743aa81b"    >No</td><td id="ant.md-f85f6ec5"    >The name of the target (if specified) or the project</td></tr></tbody ></table ></div></section><section class="chapter"  ><h3 id="ant.md-kotlin2js-attributes" data-toc="ant#ant.md-kotlin2js-attributes"  >kotlin2js attributes</h3><div class="table-wrapper" ><table class=" wide" id="ant.md-e69a6d06"  ><thead><tr class="ijRowHead" id="ant.md-85b14835" ><th id="ant.md-67f36407"    >Name</th><th id="ant.md-e201f59c"    >Description</th><th id="ant.md-a89dc342"    >Required</th></tr></thead><tbody ><tr class="" id="ant.md-b420be92" ><td id="ant.md-dcfb9ee7"    ><code class="code " id="ant.md-c80ba7c5"  >output</code></td><td id="ant.md-5da50d1f"    >Destination file</td><td id="ant.md-18bea356"    >Yes</td></tr><tr class="" id="ant.md-54e6352f" ><td id="ant.md-6e5deb0b"    ><code class="code " id="ant.md-bc66bfaa"  >libraries</code></td><td id="ant.md-7c472830"    >Paths to Kotlin libraries</td><td id="ant.md-d6f513f2"    >No</td></tr><tr class="" id="ant.md-9ab5661b" ><td id="ant.md-a7654f55"    ><code class="code " id="ant.md-b064e7b0"  >outputPrefix</code></td><td id="ant.md-6d27fc84"    >Prefix to use for generated JavaScript files</td><td id="ant.md-2ae8a557"    >No</td></tr><tr class="" id="ant.md-b921d63e" ><td id="ant.md-152c83e"    ><code class="code " id="ant.md-c9015e60"  >outputSuffix</code></td><td id="ant.md-aeabb8e9"    >Suffix to use for generated JavaScript files</td><td id="ant.md-8edc5ab7"    >No</td></tr><tr class="" id="ant.md-42c49a4e" ><td id="ant.md-b0a46b4c"    ><code class="code " id="ant.md-aca72019"  >sourcemap</code></td><td id="ant.md-94337a02"    >Whether sourcemap file should be generated</td><td id="ant.md-5afee5d1"    >No</td></tr><tr class="" id="ant.md-997dc9ba" ><td id="ant.md-38c195e3"    ><code class="code " id="ant.md-3ecd7b5c"  >metaInfo</code></td><td id="ant.md-90999aee"    >Whether metadata file with binary descriptors should be generated</td><td id="ant.md-acda8971"    >No</td></tr><tr class="" id="ant.md-476192c4" ><td id="ant.md-e3510f3c"    ><code class="code " id="ant.md-fef099f1"  >main</code></td><td id="ant.md-62e73e6c"    >Should compiler generated code call the main function</td><td id="ant.md-606497d4"    >No</td></tr></tbody ></table ></div></section><section class="chapter"  ><h3 id="ant.md-passing-raw-compiler-arguments" data-toc="ant#ant.md-passing-raw-compiler-arguments"  >Passing raw compiler arguments</h3><p id="ant.md-a4943edc" >To pass custom raw compiler arguments, you can use <code class="code " id="ant.md-de004683"  >&lt;compilerarg&gt;</code> elements with either <code class="code " id="ant.md-13cb6602"  >value</code> or <code class="code " id="ant.md-79d79719"  >line</code> attributes. This can be done within the <code class="code " id="ant.md-474c4ff8"  >&lt;kotlinc&gt;</code>, <code class="code " id="ant.md-9b9b9a1b"  >&lt;kotlin2js&gt;</code>, and <code class="code " id="ant.md-e3337a46"  >&lt;withKotlin&gt;</code> task elements, as follows:</p><div class="code-block" data-lang="markup" id="ant.md-e75d0d19"         >&lt;kotlinc src=&quot;${test.data}/hello.kt&quot; output=&quot;${temp}/hello.jar&quot;&gt;\n    &lt;compilerarg value=&quot;-Xno-inline&quot;/&gt;\n    &lt;compilerarg line=&quot;-Xno-call-assertions -Xno-param-assertions&quot;/&gt;\n    &lt;compilerarg value=&quot;-Xno-optimize&quot;/&gt;\n&lt;/kotlinc&gt;\n</div><p id="ant.md-c7f1a0d5" >The full list of arguments that can be used is shown when you run <code class="code " id="ant.md-b0cc69b4"  >kotlinc -help</code>.</p></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="run-code-snippets.md"  >Run code snippets – tutorial</h1><p id="run-code-snippets.md-aa2d4dbf" >There may be times when you need to quickly write and execute code outside of a project or application. This may be useful, for example, when learning Kotlin or evaluating expressions. Let\'s have a look at three handy ways we can use to run Kotlin code quickly:</p><ul class="list _ul" id="run-code-snippets.md-680e2b33"   ><li class="list__item" id="run-code-snippets.md-6729121" ><p><a href="#run-code-snippets.md-scratches-and-worksheets" id="run-code-snippets.md-cf00be76"   >Scratches</a> let us write and run code in a temporary file outside of our project in the IDE.</p></li><li class="list__item" id="run-code-snippets.md-ab397dc9" ><p><a href="#run-code-snippets.md-scratches-and-worksheets" id="run-code-snippets.md-ddcf33f4"   >Worksheets</a> are like scratches, but they reside within projects.</p></li><li class="list__item" id="run-code-snippets.md-7c443837" ><p><a href="#run-code-snippets.md-repl" id="run-code-snippets.md-2173d1c4"   >REPL</a> (<em id="run-code-snippets.md-ef36aca6" class=""  >Read-Eval-Print-Loop</em>) runs code in an interactive console.</p></li></ul><section class="chapter"  ><h2 id="run-code-snippets.md-scratches-and-worksheets" data-toc="run-code-snippets#run-code-snippets.md-scratches-and-worksheets"  >Scratches and worksheets</h2><p id="run-code-snippets.md-9307a259" >The Kotlin plugin for IntelliJ IDEA supports <a href="https://www.jetbrains.com/help/idea/scratches.html" id="run-code-snippets.md-4e6693fa"   data-external="true" rel="noopener noreferrer" >scratches</a> and <em id="run-code-snippets.md-9a0fd708" class=""  >worksheets.</em></p><p id="run-code-snippets.md-c94e4b3e" ><em id="run-code-snippets.md-dc67ae61" class=""  >Scratches</em> let you create code drafts in the same IDE window with your project and run them on the fly. Scratches are not tied to projects; you can access and run all your scratches from any IntelliJ IDEA window on your OS.</p><p id="run-code-snippets.md-5c214b49" >To create a Kotlin scratch, click <b id="run-code-snippets.md-eb01bb29" class=""  >File | New | Scratch file</b> and select the <b id="run-code-snippets.md-936b609f" class=""  >Kotlin</b> type.</p><p id="run-code-snippets.md-6fc1b51d" >In turn, <em id="run-code-snippets.md-5f4800ff" class=""  >worksheets</em> are project files: they are stored in project directories and tied to the project modules. Worksheets are useful for writing code parts that don\'t actually make a software unit but should still be stored together in a project. For example, you can use worksheets for education or demo materials.</p><p id="run-code-snippets.md-2b871b6f" >To create a Kotlin worksheet in a project directory, right-click the directory in the project tree and select <b id="run-code-snippets.md-48902640" class=""  >New | Kotlin Worksheet</b>.</p><p id="run-code-snippets.md-253690cc" >In scratches and worksheets, you can write any valid Kotlin code. Syntax highlighting, auto-completion, and the other IntelliJ IDEA code editing features are all supported too. Note that there\'s no need for declaring the <code class="code " id="run-code-snippets.md-6498a6b6"  >main</code> function: all the code you write is executed as if it would be in the body of <code class="code " id="run-code-snippets.md-efaf2a72"  >main</code>.</p><p id="run-code-snippets.md-83952806" >Once you have finished writing your code in a scratch or a worksheet, click <b id="run-code-snippets.md-92d3cf7c" class=""  >Run</b>. The execution results will appear in the lines opposite your code.</p><p id="run-code-snippets.md-dc2fc639" ><figure title="Run scratch"><img alt="Run scratch" title="Run scratch" id="run-code-snippets.md-72de57b0" src="images/scratch-run.png"  class="" width="700" height="269" /></figure></p><section class="chapter"  ><h3 id="run-code-snippets.md-interactive-mode" data-toc="run-code-snippets#run-code-snippets.md-interactive-mode"  >Interactive mode</h3><p id="run-code-snippets.md-8e884b7c" >IntelliJ IDEA can run the code from scratches and worksheets automatically. To get the execution results when you stop typing, switch on the <b id="run-code-snippets.md-f5d079de" class=""  >Interactive mode</b>.</p><p id="run-code-snippets.md-8a36c084" ><figure title="Scratch interactive mode"><img alt="Scratch interactive mode" title="Scratch interactive mode" id="run-code-snippets.md-54e29fb0" src="images/scratch-interactive.png"  class="" width="700" height="185" /></figure></p></section><section class="chapter"  ><h3 id="run-code-snippets.md-using-modules" data-toc="run-code-snippets#run-code-snippets.md-using-modules"  >Using modules</h3><p id="run-code-snippets.md-dacf84a0" >We can use classes or functions from a Kotlin project, in our scratches and worksheets.</p><p id="run-code-snippets.md-f49eb0bf" >Worksheets automatically get access to classes and functions from the module where they reside.</p><p id="run-code-snippets.md-958bce2b" >To use classes or functions from a project in a scratch, import them into the scratch file as usual with the <code class="code " id="run-code-snippets.md-66a37c04"  >import</code> statement. Then write your code and run it with the appropriate module selected in <b id="run-code-snippets.md-c7de0840" class=""  >Use classpath of module</b> list.</p><p id="run-code-snippets.md-7d61312e" >Both scratches and worksheets use the compiled versions of connected modules. So, if you modify a module\'s source files, the changes will propagate to scratches and worksheets when you rebuild the module. To rebuild the module automatically before each run of a scratch or a worksheet, select <b id="run-code-snippets.md-573edee6" class=""  >Make before Run</b>.</p><p id="run-code-snippets.md-eae8d8fc" ><figure title="Scratch select module"><img alt="Scratch select module" title="Scratch select module" id="run-code-snippets.md-2e05d2c0" src="images/scratch-select-module.png"  class="" width="700" height="202" /></figure></p></section><section class="chapter"  ><h3 id="run-code-snippets.md-running-as-repl" data-toc="run-code-snippets#run-code-snippets.md-running-as-repl"  >Running as REPL</h3><p id="run-code-snippets.md-e492b17c" >To evaluate each particular expression in a scratch or a worksheet, run it with <b id="run-code-snippets.md-91a61a56" class=""  >Use REPL</b> selected. The code will be executed the same way as in <a href="#run-code-snippets.md-repl" id="run-code-snippets.md-5a70f245"   >REPL</a>: the code lines will run sequentially, providing results of each call. You can later refer to the results by the names <code class="code " id="run-code-snippets.md-30098caa"  >res*</code> shown in the corresponding lines.</p><p id="run-code-snippets.md-79a24767" ><figure title="Scratch REPL"><img alt="Scratch REPL" title="Scratch REPL" id="run-code-snippets.md-ab115624" src="images/scratch-repl.png"  class="" width="700" height="189" /></figure></p></section></section><section class="chapter"  ><h2 id="run-code-snippets.md-repl" data-toc="run-code-snippets#run-code-snippets.md-repl"  >REPL</h2><p id="run-code-snippets.md-21c2d43f" ><em id="run-code-snippets.md-9617ada6" class=""  >REPL</em> (<em id="run-code-snippets.md-87515654" class=""  >Read-Eval-Print-Loop</em>) is a tool for running Kotlin code interactively. REPL lets you evaluate expressions and code chunks without creating projects or even functions if you don\'t need them.</p><p id="run-code-snippets.md-dcc376bf" >To run REPL in IntelliJ IDEA, open <b id="run-code-snippets.md-b1249cc9" class=""  >Tools | Kotlin | Kotlin REPL</b>.</p><p id="run-code-snippets.md-fd83b9e6" >To run REPL in the OS command line, open <code class="code " id="run-code-snippets.md-3c309d03"  >/bin/kotlinc-jvm</code> from the directory of standalone Kotlin compiler.</p><p id="run-code-snippets.md-7c580c6f" >The REPL command line interface will open. You can enter any valid Kotlin code and see the result. The results are printed as variables with auto-generated names like <code class="code " id="run-code-snippets.md-998f23f"  >res*</code>. You can later use such variables in the code you run in REPL.</p><p id="run-code-snippets.md-5f9944aa" ><figure title="Run REPL"><img alt="Run REPL" title="Run REPL" id="run-code-snippets.md-e6dc035c" src="images/repl-run.png"  class="" width="700" height="250" /></figure></p><p id="run-code-snippets.md-b71464b8" >REPL supports multiline input as well. The result of the multiline input is the value of its last expression.</p><p id="run-code-snippets.md-dcf88210" ><figure title="REPL multi-line run"><img alt="REPL multi-line run" title="REPL multi-line run" id="run-code-snippets.md-5cdccd52" src="images/repl-multi-line.png"  class="" width="700" height="274" /></figure></p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="code-style-migration-guide.md"  >Migrate to Kotlin code style</h1><section class="chapter"  ><h2 id="code-style-migration-guide.md-kotlin-coding-conventions-and-intellij-idea-formatter" data-toc="code-style-migration-guide#code-style-migration-guide.md-kotlin-coding-conventions-and-intellij-idea-formatter"  >Kotlin coding conventions and IntelliJ IDEA formatter</h2><p id="code-style-migration-guide.md-1b7d633" ><a href="#coding-conventions.md" id="code-style-migration-guide.md-b1746ff3"   >Kotlin coding conventions</a> affect several aspects of writing idiomatic Kotlin, and a set of formatting recommendations aimed at improving Kotlin code readability is among them.</p><p id="code-style-migration-guide.md-c0e77e11" >Unfortunately, the code formatter built into IntelliJ IDEA had to work long before this document was released and now has a default setup that produces different formatting from what is now recommended.</p><p id="code-style-migration-guide.md-7e7a8a9b" >It may seem a logical next step to remove this obscurity by switching the defaults in IntelliJ IDEA and make formatting consistent with the Kotlin coding conventions. But this would mean that all the existing Kotlin projects will have a new code style enabled the moment the Kotlin plugin is installed. Not really the expected result for plugin update, right?</p><p id="code-style-migration-guide.md-bcc2e4f6" >That\'s why we have the following migration plan instead:</p><ul class="list _ul" id="code-style-migration-guide.md-5882213c"   ><li class="list__item" id="code-style-migration-guide.md-32e6cae4" ><p>Enable the official code style formatting by default starting from Kotlin 1.3 and only for new projects (old formatting can be enabled manually)</p></li><li class="list__item" id="code-style-migration-guide.md-1cf1e1ac" ><p>Authors of existing projects may choose to migrate to the Kotlin coding conventions</p></li><li class="list__item" id="code-style-migration-guide.md-93d754de" ><p>Authors of existing projects may choose to explicitly declare using the old code style in a project (this way the project won\'t be affected by switching to the defaults in the future)</p></li><li class="list__item" id="code-style-migration-guide.md-ebd8fc35" ><p>Switch to the default formatting and make it consistent with Kotlin coding conventions in Kotlin 1.4</p></li></ul></section><section class="chapter"  ><h2 id="code-style-migration-guide.md-differences-between-kotlin-coding-conventions-and-intellij-idea-default-code-style" data-toc="code-style-migration-guide#code-style-migration-guide.md-differences-between-kotlin-coding-conventions-and-intellij-idea-default-code-style"  >Differences between "Kotlin coding conventions" and "IntelliJ IDEA default code style"</h2><p id="code-style-migration-guide.md-7fdb9cf6" >The most notable change is in the continuation indentation policy. There\'s a nice idea to use the double indent for showing that a multi-line expression hasn\'t ended on the previous line. This is a very simple and general rule, but several Kotlin constructions look a bit awkward when they are formatted this way. In Kotlin coding conventions, it\'s recommended to use a single indent in cases where the long continuation indent has been forced before.</p><p id="code-style-migration-guide.md-2cdc9b5e" ><figure title="Code formatting"><img alt="Code formatting" title="Code formatting" id="code-style-migration-guide.md-f1899ce4" src="images/code-formatting-diff.png"  class="" width="700" height="192" /></figure></p><p id="code-style-migration-guide.md-53372e95" >In practice, quite a bit of code is affected, so this can be considered a major code style update.</p></section><section class="chapter"  ><h2 id="code-style-migration-guide.md-migration-to-a-new-code-style-discussion" data-toc="code-style-migration-guide#code-style-migration-guide.md-migration-to-a-new-code-style-discussion"  >Migration to a new code style discussion</h2><p id="code-style-migration-guide.md-e1538377" >A new code style adoption might be a very natural process if it starts with a new project, when there\'s no code formatted in the old way. That is why starting from version 1.3, the Kotlin IntelliJ Plugin creates new projects with formatting from the <a href="#coding-conventions.md" id="code-style-migration-guide.md-f6d25cb2"   >Coding conventions</a> document which is enabled by default.</p><p id="code-style-migration-guide.md-c2ca30e2" >Changing formatting in an existing project is a far more demanding task, and should probably be started with discussing all the caveats with the team.</p><p id="code-style-migration-guide.md-891ae124" >The main disadvantage of changing the code style in an existing project is that the blame/annotate VCS feature will point to irrelevant commits more often. While each VCS has some kind of way to deal with this problem (<a href="https://www.jetbrains.com/help/idea/investigate-changes.html" id="code-style-migration-guide.md-50cd0364"   data-external="true" rel="noopener noreferrer" >&quot;Annotate Previous Revision&quot;</a> can be used in IntelliJ IDEA), it\'s important to decide if a new style is worth all the effort. The practice of separating reformatting commits from meaningful changes can help a lot with later investigations.</p><p id="code-style-migration-guide.md-3a4516fb" >Also migrating can be harder for larger teams because committing a lot of files in several subsystems may produce merging conflicts in personal branches. And while each conflict resolution is usually trivial, it\'s still wise to know if there are large feature branches currently in work.</p><p id="code-style-migration-guide.md-7f872f3e" >In general, for small projects, we recommend converting all the files at once.</p><p id="code-style-migration-guide.md-1017be88" >For medium and large projects the decision may be tough. If you are not ready to update many files right away you may decide to migrate module by module, or continue with gradual migration for modified files only.</p></section><section class="chapter"  ><h2 id="code-style-migration-guide.md-migration-to-a-new-code-style" data-toc="code-style-migration-guide#code-style-migration-guide.md-migration-to-a-new-code-style"  >Migration to a new code style</h2><p id="code-style-migration-guide.md-7d97fe8a" >Switching to the Kotlin Coding Conventions code style can be done in <b id="code-style-migration-guide.md-849bf0eb" class=""  >Settings | Editor | Code Style | Kotlin</b> dialog. Switch scheme to <b id="code-style-migration-guide.md-760d053" class=""  >Project</b> and activate <b id="code-style-migration-guide.md-73eb81a8" class=""  >Set from... | Predefined Style | Kotlin Style Guide</b>.</p><p id="code-style-migration-guide.md-b6d38b09" >In order to share those changes for all project developers <code class="code " id="code-style-migration-guide.md-d5efa069"  >.idea/codeStyle</code> folder have to be committed to VCS.</p><p id="code-style-migration-guide.md-fe5b86c9" >If an external build system is used for configuring the project, and it\'s been decided not to share <code class="code " id="code-style-migration-guide.md-61d4a0a6"  >.idea/codeStyle</code> folder, Kotlin coding conventions can be forced with an additional property:</p><section class="chapter"  ><h3 id="code-style-migration-guide.md-in-gradle" data-toc="code-style-migration-guide#code-style-migration-guide.md-in-gradle"  >In Gradle</h3><p id="code-style-migration-guide.md-9ec65c4" >Add <code class="code " id="code-style-migration-guide.md-ae9a63ea"  >kotlin.code.style=official</code> property to the <code class="code " id="code-style-migration-guide.md-36b9c8c4"  >gradle.properties</code> file at the project root and commit the file to VCS.</p></section><section class="chapter"  ><h3 id="code-style-migration-guide.md-in-maven" data-toc="code-style-migration-guide#code-style-migration-guide.md-in-maven"  >In Maven</h3><p id="code-style-migration-guide.md-61f97329" >Add <code class="code " id="code-style-migration-guide.md-75e43c4"  >kotlin.code.style official</code> property to root <code class="code " id="code-style-migration-guide.md-fe29a85e"  >pom.xml</code> project file.</p> <code class="code " id="code-style-migration-guide.md-da64bd46"  >&lt;properties&gt; &lt;kotlin.code.style&gt;official&lt;/kotlin.code.style&gt; &lt;/properties&gt;</code><aside data-type="warning" class="prompt" data-title="" id="code-style-migration-guide.md-6b4aa62d"><p id="code-style-migration-guide.md-b6cd9222" >Having the <b id="code-style-migration-guide.md-36a96afb" class=""  >kotlin.code.style</b> option set may modify the code style scheme during a project import and may change the code style settings.</p></aside><p id="code-style-migration-guide.md-4ffd7074" >After updating your code style settings, activate <b id="code-style-migration-guide.md-8944c5f3" class=""  >Reformat Code</b> in the project view on the desired scope.</p><p id="code-style-migration-guide.md-a0e14266" ><figure title="Reformat code"><img alt="Reformat code" title="Reformat code" id="code-style-migration-guide.md-7c484243" src="images/reformat-code.png"  class="" width="500" height="380" /></figure></p><p id="code-style-migration-guide.md-e7ce8558" >For a gradual migration, it\'s possible to enable the <b id="code-style-migration-guide.md-a44f3b47" class=""  >File is not formatted according to project settings</b> inspection. It will highlight the places that should be reformatted. After enabling the <b id="code-style-migration-guide.md-d4d1a2bf" class=""  >Apply only to modified files</b> option, inspection will show formatting problems only in modified files. Such files are probably going to be committed soon anyway.</p></section></section><section class="chapter"  ><h2 id="code-style-migration-guide.md-store-old-code-style-in-project" data-toc="code-style-migration-guide#code-style-migration-guide.md-store-old-code-style-in-project"  >Store old code style in project</h2><p id="code-style-migration-guide.md-c235c02a" >It\'s always possible to explicitly set the IntelliJ IDEA code style as the correct code style for the project. To do so, switch to the <b id="code-style-migration-guide.md-485c6768" class=""  >Project</b> scheme in <b id="code-style-migration-guide.md-bccf7dc" class=""  >Settings | Editor | Code Style | Kotlin</b> and select <b id="code-style-migration-guide.md-1e3add1a" class=""  >Kotlin obsolete IntelliJ IDEA codestyle</b> in the <b id="code-style-migration-guide.md-c4160df8" class=""  >Use defaults from:</b> on the <b id="code-style-migration-guide.md-31b8e083" class=""  >Load</b> tab.</p><p id="code-style-migration-guide.md-dd7bf13f" >In order to share the changes across the project developers <code class="code " id="code-style-migration-guide.md-5a66c4b5"  >.idea/codeStyle</code> folder, it has to be committed to VCS. Alternatively, <b id="code-style-migration-guide.md-86bfd1a7" class=""  >kotlin.code.style</b> = <b id="code-style-migration-guide.md-eff5402" class=""  >obsolete</b> can be used for projects configured with Gradle or Maven.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="eclipse.md"  >Eclipse IDE</h1><p id="eclipse.md-a309bd7a" ><a href="https://www.eclipse.org/downloads/" id="eclipse.md-9f07f2e4"   data-external="true" rel="noopener noreferrer" >Eclipse IDE</a> is a widely known IDE that offers various packages for development in different languages and for different platforms. You can use is for writing Kotlin code. On this page, you will learn how to get started with Kotlin in Eclipse IDE.</p><section class="chapter"  ><h2 id="eclipse.md-set-up-the-environment" data-toc="eclipse#eclipse.md-set-up-the-environment"  >Set up the environment</h2><p id="eclipse.md-2bc4c83b" >First of all, you need the Eclipse IDE installed on your system. You can download its latest version from <a href="https://www.eclipse.org/downloads/" id="eclipse.md-b87fb81e"   data-external="true" rel="noopener noreferrer" >download page</a>. The <b id="eclipse.md-58c9b2d2" class=""  >Eclipse IDE for Java Developers</b> bundle is recommended.</p><p id="eclipse.md-998c29d9" >To add the Kotlin support to your Eclipse IDE, install the <b id="eclipse.md-d2d830c7" class=""  >Kotlin Plugin for Eclipse</b>. We recommend installing the Kotlin plugin from <a href="http://marketplace.eclipse.org/content/kotlin-plugin-eclipse" id="eclipse.md-9458942"   data-external="true" rel="noopener noreferrer" >Eclipse Marketplace</a>. Open the <b id="eclipse.md-3344a7f8" class=""  >Help | Eclipse Marketplace...</b> menu and search for <b id="eclipse.md-12cf4124" class=""  >Kotlin Plugin for Eclipse</b>:</p><p id="eclipse.md-e329c423" ><figure title="Eclipse Marketplace"><img alt="Eclipse Marketplace" title="Eclipse Marketplace" id="eclipse.md-7a37a2f2" src="images/marketplace.png"  class="" width="500" height="517" /></figure></p><p id="eclipse.md-35ccf0e2" >Once the plugin is installed and Eclipse is restarted, make sure the plugin is installed correctly: open the <b id="eclipse.md-7185658e" class=""  >Kotlin perspective</b> in the menu <b id="eclipse.md-8c5fcd0b" class=""  >Window | Open Perspective | Other...</b></p><p id="eclipse.md-d8e3aa45" ><figure title="Kotlin Perspective"><img alt="Kotlin Perspective" title="Kotlin Perspective" id="eclipse.md-2078b750" src="images/open-perspective.png"  class="" width="500" height="580" /></figure></p></section><section class="chapter"  ><h2 id="eclipse.md-create-a-new-project" data-toc="eclipse#eclipse.md-create-a-new-project"  >Create a new project</h2><p id="eclipse.md-17cccce7" >Now you are ready to create a new Kotlin project.</p><p id="eclipse.md-ec21457c" >First, select <b id="eclipse.md-9777dbd" class=""  >File | New | Kotlin Project</b>.</p><p id="eclipse.md-df228bd1" ><figure title="New Kotlin project"><img alt="New Kotlin project" title="New Kotlin project" id="eclipse.md-2cfecbc" src="images/project-name.png"  class="" width="700" height="503" /></figure></p><p id="eclipse.md-48cdce0c" >An empty Kotlin/JVM project will be created.</p><p id="eclipse.md-57cc7142" >For Eclipse IDE, the project is also a Java project but configured with Kotlin nature, meaning it has the Kotlin Builder and reference to the Kotlin Runtime Library. Great thing about this solution is that you can add both Kotlin and Java code to the same project.</p><p id="eclipse.md-9238fa5e" >The project structure looks like this:</p><p id="eclipse.md-47b8b4ee" ><figure title="Empty Kotlin project"><img alt="Empty Kotlin project" title="Empty Kotlin project" id="eclipse.md-29eea4c8" src="images/empty-project.png"  class="" width="700" height="263" /></figure></p><p id="eclipse.md-86910f4" >Now, create a new Kotlin file in the the source directory.</p><p id="eclipse.md-39bcefa8" ><figure title="New file from context menu"><img alt="New file from context menu" title="New file from context menu" id="eclipse.md-b0781cf4" src="images/new-file.png"  class="" width="700" height="337" /></figure></p><p id="eclipse.md-4d94080e" >You can enter the name without the <code class="code " id="eclipse.md-87028af6"  >.kt</code> extension. Eclipse will add it automatically.</p><p id="eclipse.md-b5402f5b" ><figure title="New Kotlin file wizard"><img alt="New Kotlin file wizard" title="New Kotlin file wizard" id="eclipse.md-916a2493" src="images/file-name.png"  class="" width="700" height="503" /></figure></p><p id="eclipse.md-5585d99f" >Once you have a source file, add the <code class="code " id="eclipse.md-1c04b55f"  >main</code> function - the entry point to a Kotlin application. You can simply type <code class="code " id="eclipse.md-a366b721"  >main</code> and invoke code completion by hitting <code class="code " id="eclipse.md-220f2e06"  >Ctrl + Space</code>.</p><p id="eclipse.md-e591178a" ><figure title="main() template"><img alt="main() template" title="main() template" id="eclipse.md-79237a48" src="images/main.png"  class="" width="500" height="201" /></figure></p><p id="eclipse.md-5dbc7679" >Finally, add a simple line of Kotlin code to print a message:</p><p id="eclipse.md-5a2a030f" ><figure title="Hello World example"><img alt="Hello World example" title="Hello World example" id="eclipse.md-4fee4f71" src="images/hello-world.png"  class="" width="500" height="177" /></figure></p></section><section class="chapter"  ><h2 id="eclipse.md-run-the-application" data-toc="eclipse#eclipse.md-run-the-application"  >Run the application</h2><p id="eclipse.md-599a41da" >To run the application, right-click somewhere in the main file and select <b id="eclipse.md-606f8564" class=""  >Run As | Kotlin Application</b>.</p><p id="eclipse.md-4a805d24" ><figure title="Run Kotlin application"><img alt="Run Kotlin application" title="Run Kotlin application" id="eclipse.md-574a4488" src="images/run-as.png"  class="" width="700" height="540" /></figure></p><p id="eclipse.md-358a46c1" >If everything went well, you\'ll see the result in the <b id="eclipse.md-f4cfdd88" class=""  >Console</b> window.</p><p id="eclipse.md-1ef6ab0d" ><figure title="Program output view"><img alt="Program output view" title="Program output view" id="eclipse.md-56708132" src="images/output.png"  class="" width="700" height="418" /></figure></p><p id="eclipse.md-b3eb7ab9" >Congratulations! You now have your Kotlin application running in Eclipse IDE.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="command-line.md"  >Kotlin command-line compiler</h1><p id="command-line.md-abced4ce" >Every release ships with a standalone version of the compiler. You can download the latest version (<code class="code " id="command-line.md-a186edf8"  >kotlin-compiler-1.4.32.zip</code>) from <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.4.32" id="command-line.md-7f8d72d8"   data-external="true" rel="noopener noreferrer" >GitHub Releases</a>.</p><section class="chapter"  ><h2 id="command-line.md-install-the-compiler" data-toc="command-line#command-line.md-install-the-compiler"  >Install the compiler</h2><section class="chapter"  ><h3 id="command-line.md-manual-install" data-toc="command-line#command-line.md-manual-install"  >Manual install</h3><p id="command-line.md-1c9ce0de" >Unzip the standalone compiler into a directory and optionally add the <code class="code " id="command-line.md-ecaf7f89"  >bin</code> directory to the system path. The <code class="code " id="command-line.md-e43a4085"  >bin</code> directory contains the scripts needed to compile and run Kotlin on Windows, OS X and Linux.</p></section><section class="chapter"  ><h3 id="command-line.md-sdkman" data-toc="command-line#command-line.md-sdkman"  >SDKMAN!</h3><p id="command-line.md-a068c128" >An easier way to install Kotlin on UNIX-based systems such as OS X, Linux, Cygwin, FreeBSD, and Solaris is <a href="http://sdkman.io" id="command-line.md-b5c24cc9"   data-external="true" rel="noopener noreferrer" >SDKMAN!</a>. It also works in Bash and ZSH shells.</p><p id="command-line.md-97c37b31" >To install SDKMAN!, run the following command in a terminal and follow any instructions:</p><div class="code-block" data-lang="bash" id="command-line.md-5e0a62a2"         >$ curl -s https://get.sdkman.io | bash\n</div><p id="command-line.md-410721e0" >Next, open a new terminal and install Kotlin with:</p><div class="code-block" data-lang="bash" id="command-line.md-df843e07"         >$ sdk install kotlin\n</div></section><section class="chapter"  ><h3 id="command-line.md-homebrew" data-toc="command-line#command-line.md-homebrew"  >Homebrew</h3><p id="command-line.md-176edcd3" >Alternatively, on OS X you can install the compiler via <a href="http://brew.sh/" id="command-line.md-1e1c0ce4"   data-external="true" rel="noopener noreferrer" >Homebrew</a>.</p><div class="code-block" data-lang="bash" id="command-line.md-f0efc75f"         >$ brew update\n$ brew install kotlin\n</div></section><section class="chapter"  ><h3 id="command-line.md-snap-package" data-toc="command-line#command-line.md-snap-package"  >Snap package</h3><p id="command-line.md-daa7ce19" >If you use <a href="https://snapcraft.io/" id="command-line.md-9d78a6bd"   data-external="true" rel="noopener noreferrer" >Snap</a> on Ubuntu 16.04 or later, you can install the compiler from the command line:</p><div class="code-block" data-lang="bash" id="command-line.md-d5473a29"         >$ sudo snap install --classic kotlin\n</div></section></section><section class="chapter"  ><h2 id="command-line.md-create-and-run-an-application" data-toc="command-line#command-line.md-create-and-run-an-application"  >Create and run an application</h2><ol class="list _decimal" id="command-line.md-f4a6ceff"   ><li class="list__item" id="command-line.md-a37d4691" ><p id="command-line.md-642d0f84" >Create a simple application in Kotlin that displays <code class="code " id="command-line.md-bbe8b391"  >&quot;Hello, World!&quot;</code>. In your favorite editor, create a new file called <code class="code " id="command-line.md-d4e6328e"  >hello.kt</code> with the following lines:</p><div class="code-block" data-lang="kotlin" id="command-line.md-25ce0564"         >fun main() {\n    println(&quot;Hello, World!&quot;)\n}\n</div></li><li class="list__item" id="command-line.md-e1e231d4" ><p id="command-line.md-3db9a3ef" >Compile the application using the Kotlin compiler:</p><div class="code-block" data-lang="bash" id="command-line.md-68177910"         >$ kotlinc hello.kt -include-runtime -d hello.jar\n</div><p id="command-line.md-a687c19e" >The <code class="code " id="command-line.md-ff3661e3"  >-d</code> option indicates the output path for generated class files, which may be either a directory or a <em id="command-line.md-18cf7373" class=""  >.jar</em> file. The <code class="code " id="command-line.md-4c7e6f75"  >-include-runtime</code> option makes the resulting <em id="command-line.md-14c30ea" class=""  >.jar</em> file self-contained and runnable by including the Kotlin runtime library in it.</p><p id="command-line.md-8023ea5b" >To see all available options, run</p><div class="code-block" data-lang="bash" id="command-line.md-68de8e2"         >$ kotlinc -help\n</div></li><li class="list__item" id="command-line.md-5b0fd46c" ><p id="command-line.md-d84f0e33" >Run the application.</p><div class="code-block" data-lang="bash" id="command-line.md-177d5878"         >$ java -jar hello.jar\n</div></li></ol></section><section class="chapter"  ><h2 id="command-line.md-compile-a-library" data-toc="command-line#command-line.md-compile-a-library"  >Compile a library</h2><p id="command-line.md-6ec90f92" >If you\'re developing a library to be used by other Kotlin applications, you can build the <em id="command-line.md-ee69559f" class=""  >.jar</em> file without including the Kotlin runtime into it.</p><div class="code-block" data-lang="bash" id="command-line.md-74c7382a"         >$ kotlinc hello.kt -d hello.jar\n</div><p id="command-line.md-a5a7b725" >Since binaries compiled this way depend on the Kotlin runtime you should make sure the latter is present in the classpath whenever your compiled library is used.</p><p id="command-line.md-f69de7c4" >You can also use the <code class="code " id="command-line.md-aa57ff3"  >kotlin</code> script to run binaries produced by the Kotlin compiler:</p><div class="code-block" data-lang="bash" id="command-line.md-f4c8acfd"         >$ kotlin -classpath hello.jar HelloKt\n</div><p id="command-line.md-bf51d7a0" ><code class="code " id="command-line.md-4caf2834"  >HelloKt</code> is the main class name that the Kotlin compiler generates for the file named <code class="code " id="command-line.md-b061a912"  >hello.kt</code>.</p></section><section class="chapter"  ><h2 id="command-line.md-run-the-repl" data-toc="command-line#command-line.md-run-the-repl"  >Run the REPL</h2><p id="command-line.md-c1e2fdd2" >You can run the compiler without parameters to have an interactive shell. In this shell, you can type any valid Kotlin code and see the results.</p><p id="command-line.md-ba703751" ><figure title="Shell"><img alt="Shell" title="Shell" id="command-line.md-78985fb5" src="images/kotlin-shell.png"  class="" width="500" height="144" /></figure></p></section><section class="chapter"  ><h2 id="command-line.md-run-scripts" data-toc="command-line#command-line.md-run-scripts"  >Run scripts</h2><p id="command-line.md-640fb63a" >Kotlin can also be used as a scripting language. A script is a Kotlin source file (<code class="code " id="command-line.md-847f5863"  >.kts</code>) with top-level executable code.</p><div class="code-block" data-lang="kotlin" id="command-line.md-b5c92463"         >import java.io.File\n\n// Get the passed in path, i.e. &quot;-d some/path&quot; or use the current path.\nval path = if (args.contains(&quot;-d&quot;)) args[1 + args.indexOf(&quot;-d&quot;)]\n           else &quot;.&quot;\n\nval folders = File(path).listFiles { file -&gt; file.isDirectory() }\nfolders?.forEach { folder -&gt; println(folder) }\n</div><p id="command-line.md-36c81916" >To run a script, we just pass the <code class="code " id="command-line.md-cbe701f8"  >-script</code> option to the compiler with the corresponding script file.</p><div class="code-block" data-lang="bash" id="command-line.md-ae25ae4e"         >$ kotlinc -script list_folders.kts -- -d &lt;path_to_folder_to_inspect&gt;\n</div><p id="command-line.md-5896165c" >Since 1.3.0, Kotlin has an experimental support for scripts customization, such as adding external properties, providing static or dynamic dependencies, and so on. Customizations are defined by so-called <em id="command-line.md-9639454f" class=""  >Script definitions</em>- annotated kotlin classes with appropriate support code. The script filename extension is used to select appropriate definition.</p><p id="command-line.md-5872cffe" >Properly prepared script definitions are detected and applied automatically when the appropriate jars are included in the compilation classpath. Alternatively, you can specify definitions manually using <code class="code " id="command-line.md-457c1da"  >-script-templates</code> option to the compiler:</p><div class="code-block" data-lang="bash" id="command-line.md-5344c9fa"         >$ kotlinc -script-templates org.example.CustomScriptDefinition -script custom.script1.kts\n</div><p id="command-line.md-b5dd1f1e" >For additional details, please consult the <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/scripting-support.md" id="command-line.md-a4ec972c"   data-external="true" rel="noopener noreferrer" >KEEP-75</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="compiler-reference.md"  >Kotlin compiler options</h1><p id="compiler-reference.md-9bc5c3fa" >Each release of Kotlin includes compilers for the supported targets: JVM, JavaScript, and native binaries for <a href="#native-overview.md-target-platforms" id="compiler-reference.md-68209188"   >supported platforms</a>.</p><p id="compiler-reference.md-aff89608" >These compilers are used by the IDE when you click the <b id="compiler-reference.md-772f38a" class=""  >Compile</b> or <b id="compiler-reference.md-1cd77000" class=""  >Run</b> button for your Kotlin project.</p><p id="compiler-reference.md-6e290de1" >You can also run Kotlin compilers manually from the command line as described in the <a href="#command-line.md" id="compiler-reference.md-4b8cc441"   >Working with command-line compiler</a> tutorial.</p><section class="chapter"  ><h2 id="compiler-reference.md-compiler-options" data-toc="compiler-reference#compiler-reference.md-compiler-options"  >Compiler options</h2><p id="compiler-reference.md-122b189c" >Kotlin compilers have a number of options for tailoring the compiling process. Compiler options for different targets are listed on this page together with a description of each one.</p><p id="compiler-reference.md-6c4acdc4" >There are several ways to set the compiler options and their values (<em id="compiler-reference.md-f6cb0743" class=""  >compiler arguments</em> ):</p><ul class="list _ul" id="compiler-reference.md-29d0803b"   ><li class="list__item" id="compiler-reference.md-1e54f09e" ><p>In IntelliJ IDEA, write in the compiler arguments in the <b id="compiler-reference.md-38d1bae3" class=""  >Additional command-line parameters</b> text box in <b id="compiler-reference.md-966fa476" class=""  >Settings | Build, Execution, Deployment | Compilers | Kotlin Compiler</b></p></li><li class="list__item" id="compiler-reference.md-e7cfa892" ><p>If you\'re using Gradle, specify the compiler arguments in the <code class="code " id="compiler-reference.md-b5488448"  >kotlinOptions</code> property of the Kotlin compilation task. For details, see <a href="#gradle.md-compiler-options" id="compiler-reference.md-bdcbc64"   >Gradle</a>.</p></li><li class="list__item" id="compiler-reference.md-7b3883a8" ><p>If you\'re using Maven, specify the compiler arguments in the <code class="code " id="compiler-reference.md-2c460805"  >&lt;configuration&gt;</code> element of the Maven plugin node. For details, see <a href="#maven.md-specifying-compiler-options" id="compiler-reference.md-2e030515"   >Maven</a>.</p></li><li class="list__item" id="compiler-reference.md-48ca74bb" ><p>If you run a command-line compiler, add the compiler arguments directly to the utility call or write them into an <a href="#compiler-reference.md-argfile" id="compiler-reference.md-80c780d1"   >argfile</a>.</p></li></ul><p id="compiler-reference.md-f95ab553" >For example:</p><div class="code-block" data-lang="bash" id="compiler-reference.md-76b344cd"         >$ kotlinc hello.kt -include-runtime -d hello.jar\n</div><aside data-type="note" class="prompt" data-title="" id="compiler-reference.md-4112c857" ><p id="compiler-reference.md-befe0bc" >On Windows, when you pass compiler arguments that contain delimiter characters (whitespace, <code class="code " id="compiler-reference.md-286fa343"  >=</code>, <code class="code " id="compiler-reference.md-8eed6ab5"  >;</code>, <code class="code " id="compiler-reference.md-7eb54f93"  >,</code> ), surround these arguments with double quotes (<code class="code " id="compiler-reference.md-10f3ecbe"  >&quot;</code> ).</p> <code class="code " id="compiler-reference.md-2e3ff499"  >$ kotlinc.bat hello.kt -include-runtime -d &quot;My Folder\\hello.jar&quot;</code></aside></section><section class="chapter"  ><h2 id="compiler-reference.md-common-options" data-toc="compiler-reference#compiler-reference.md-common-options"  >Common options</h2><p id="compiler-reference.md-fd74e6dc" >The following options are common for all Kotlin compilers.</p><section class="chapter"  ><h3 id="compiler-reference.md-version" data-toc="compiler-reference#compiler-reference.md-version"  >-version</h3><p id="compiler-reference.md-2651b00c" >Display the compiler version.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-nowarn" data-toc="compiler-reference#compiler-reference.md-nowarn"  >-nowarn</h3><p id="compiler-reference.md-8369a55f" >Suppress the compiler from displaying warnings during compilation.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-werror" data-toc="compiler-reference#compiler-reference.md-werror"  >-Werror</h3><p id="compiler-reference.md-4018451c" >Turn any warnings into a compilation error.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-verbose" data-toc="compiler-reference#compiler-reference.md-verbose"  >-verbose</h3><p id="compiler-reference.md-ef573bbd" >Enable verbose logging output which includes details of the compilation process.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-script" data-toc="compiler-reference#compiler-reference.md-script"  >-script</h3><p id="compiler-reference.md-b4efb830" >Evaluate a Kotlin script file. When called with this option, the compiler executes the first Kotlin script (<code class="code " id="compiler-reference.md-9c64c2e2"  >*.kts</code>) file among the given arguments.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-help-h" data-toc="compiler-reference#compiler-reference.md-help-h"  >-help (-h)</h3><p id="compiler-reference.md-c0802055" >Display usage information and exit. Only standard options are shown. To show advanced options, use <code class="code " id="compiler-reference.md-62d250c2"  >-X</code>.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-x" data-toc="compiler-reference#compiler-reference.md-x"  >-X</h3><p id="compiler-reference.md-2a6f574a" >Display information about the advanced options and exit. These options are currently unstable: their names and behavior may be changed without notice.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-kotlin-home-path" data-toc="compiler-reference#compiler-reference.md-kotlin-home-path"  >-kotlin-home path</h3><p id="compiler-reference.md-f913a0be" >Specify a custom path to the Kotlin compiler used for the discovery of runtime libraries.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-p-plugin-pluginid-optionname-value" data-toc="compiler-reference#compiler-reference.md-p-plugin-pluginid-optionname-value"  >-P plugin:pluginId:optionName=value</h3><p id="compiler-reference.md-9e1c92fc" >Pass an option to a Kotlin compiler plugin. Available plugins and their options are listed in the <b id="compiler-reference.md-ad4cff05" class=""  >Tools &gt; Compiler plugins</b> section of the documentation.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-language-version-version" data-toc="compiler-reference#compiler-reference.md-language-version-version"  >-language-version version</h3><p id="compiler-reference.md-756d2d7d" >Provide source compatibility with the specified version of Kotlin.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-api-version-version" data-toc="compiler-reference#compiler-reference.md-api-version-version"  >-api-version version</h3><p id="compiler-reference.md-526db37d" >Allow using declarations only from the specified version of Kotlin bundled libraries.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-progressive" data-toc="compiler-reference#compiler-reference.md-progressive"  >-progressive</h3><p id="compiler-reference.md-e2d63698" >Enable the <a href="#whatsnew13.md-progressive-mode" id="compiler-reference.md-d5beec38"   >progressive mode</a> for the compiler.</p><p id="compiler-reference.md-5b95026e" >In the progressive mode, deprecations and bug fixes for unstable code take effect immediately, instead of going through a graceful migration cycle. Code written in the progressive mode is backwards compatible; however, code written in a non-progressive mode may cause compilation errors in the progressive mode.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-argfile" data-toc="compiler-reference#compiler-reference.md-argfile"  >@argfile</h3><p id="compiler-reference.md-72167ac2" >Read the compiler options from the given file. Such a file can contain compiler options with values and paths to the source files. Options and paths should be separated by whitespaces. For example:</p> <code class="code " id="compiler-reference.md-626fdaca"  >-include-runtime -d hello.jar hello.kt</code><p id="compiler-reference.md-c5575cbf" >To pass values that contain whitespaces, surround them with single (<b id="compiler-reference.md-b207d506" class=""  >\'</b>) or double (<b id="compiler-reference.md-68ac4fc0" class=""  >&quot;</b>) quotes. If a value contains quotation marks in it, escape them with a backslash (<b id="compiler-reference.md-9280a4b5" class=""  >\\</b> ).</p> <code class="code " id="compiler-reference.md-9d60693a"  >-include-runtime -d \'My folder\'</code><p id="compiler-reference.md-cdaca376" >You can also pass multiple argument files, for example, to separate compiler options from source files.</p><div class="code-block" data-lang="bash" id="compiler-reference.md-cf9126f0"         >$ kotlinc @compiler.options @classes\n</div><p id="compiler-reference.md-94e64099" >If the files reside in locations different from the current directory, use relative paths.</p><div class="code-block" data-lang="bash" id="compiler-reference.md-bda77962"         >$ kotlinc @options/compiler.options hello.kt\n</div></section></section><section class="chapter"  ><h2 id="compiler-reference.md-kotlin-jvm-compiler-options" data-toc="compiler-reference#compiler-reference.md-kotlin-jvm-compiler-options"  >Kotlin/JVM compiler options</h2><p id="compiler-reference.md-ca230b0b" >The Kotlin compiler for JVM compiles Kotlin source files into Java class files. The command-line tools for Kotlin to JVM compilation are <code class="code " id="compiler-reference.md-2f772f7b"  >kotlinc</code> and <code class="code " id="compiler-reference.md-9e1138fe"  >kotlinc-jvm</code>. You can also use them for executing Kotlin script files.</p><p id="compiler-reference.md-2180fc62" >In addition to the <a href="#compiler-reference.md-common-options" id="compiler-reference.md-df609c1"   >common options</a>, Kotlin/JVM compiler has the options listed below.</p><section class="chapter"  ><h3 id="compiler-reference.md-classpath-path-cp-path" data-toc="compiler-reference#compiler-reference.md-classpath-path-cp-path"  >-classpath path (-cp path)</h3><p id="compiler-reference.md-9f721818" >Search for class files in the specified paths. Separate elements of the classpath with system path separators (<b id="compiler-reference.md-8fa042e3" class=""  >;</b> on Windows, <b id="compiler-reference.md-1f96c703" class=""  >:</b> on macOS/Linux). The classpath can contain file and directory paths, ZIP, or JAR files.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-d-path" data-toc="compiler-reference#compiler-reference.md-d-path"  >-d path</h3><p id="compiler-reference.md-72be4c9f" >Place the generated class files into the specified location. The location can be a directory, a ZIP, or a JAR file.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-include-runtime" data-toc="compiler-reference#compiler-reference.md-include-runtime"  >-include-runtime</h3><p id="compiler-reference.md-f9e374bb" >Include the Kotlin runtime into the resulting JAR file. Makes the resulting archive runnable on any Java-enabled environment.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-jdk-home-path" data-toc="compiler-reference#compiler-reference.md-jdk-home-path"  >-jdk-home path</h3><p id="compiler-reference.md-a07f384f" >Use a custom JDK home directory to include into the classpath if it differs from the default <code class="code " id="compiler-reference.md-67d96df9"  >JAVA_HOME</code>.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-jvm-target-version" data-toc="compiler-reference#compiler-reference.md-jvm-target-version"  >-jvm-target version</h3><p id="compiler-reference.md-8d170734" >Specify the target version of the generated JVM bytecode. Possible values are <code class="code " id="compiler-reference.md-1e2825b9"  >1.6</code>, <code class="code " id="compiler-reference.md-566ccc39"  >1.8</code>, <code class="code " id="compiler-reference.md-ddeabd6b"  >9</code>, <code class="code " id="compiler-reference.md-553cbb5"  >10</code>, <code class="code " id="compiler-reference.md-91030068"  >11</code>, <code class="code " id="compiler-reference.md-a2137a38"  >12</code>, <code class="code " id="compiler-reference.md-b6e9056c"  >13</code>, <code class="code " id="compiler-reference.md-ba5ea96b"  >14</code> and <code class="code " id="compiler-reference.md-25af1a16"  >15</code>. The default value is <code class="code " id="compiler-reference.md-4611ea82"  >1.6</code>.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-java-parameters" data-toc="compiler-reference#compiler-reference.md-java-parameters"  >-java-parameters</h3><p id="compiler-reference.md-483c8fc9" >Generate metadata for Java 1.8 reflection on method parameters.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-module-name-name-jvm" data-toc="compiler-reference#compiler-reference.md-module-name-name-jvm"  >-module-name name (JVM)</h3><p id="compiler-reference.md-9b1e3fda" >Set a custom name for the generated <code class="code " id="compiler-reference.md-20b8465e"  >.kotlin_module</code> file.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-no-jdk" data-toc="compiler-reference#compiler-reference.md-no-jdk"  >-no-jdk</h3><p id="compiler-reference.md-7c1833b2" >Don\'t automatically include the Java runtime into the classpath.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-no-reflect" data-toc="compiler-reference#compiler-reference.md-no-reflect"  >-no-reflect</h3><p id="compiler-reference.md-36d2b881" >Don\'t automatically include the Kotlin reflection (<code class="code " id="compiler-reference.md-fd876025"  >kotlin-reflect.jar</code>) into the classpath.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-no-stdlib-jvm" data-toc="compiler-reference#compiler-reference.md-no-stdlib-jvm"  >-no-stdlib (JVM)</h3><p id="compiler-reference.md-a1aca6bd" >Don\'t automatically include the Kotlin/JVM stdlib (<code class="code " id="compiler-reference.md-30f0f4cc"  >kotlin-stdlib.jar</code>) and Kotlin reflection (<code class="code " id="compiler-reference.md-a80d9975"  >kotlin-reflect.jar</code>) into the classpath.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-script-templates-classnames" data-toc="compiler-reference#compiler-reference.md-script-templates-classnames"  >-script-templates classnames[,]</h3><p id="compiler-reference.md-2adce0b0" >Script definition template classes. Use fully qualified class names and separate them with commas (<b id="compiler-reference.md-59f1f64" class=""  >,</b> ).</p></section></section><section class="chapter"  ><h2 id="compiler-reference.md-kotlin-js-compiler-options" data-toc="compiler-reference#compiler-reference.md-kotlin-js-compiler-options"  >Kotlin/JS compiler options</h2><p id="compiler-reference.md-eebf391d" >The Kotlin compiler for JS compiles Kotlin source files into JavaScript code. The command-line tool for Kotlin to JS compilation is <code class="code " id="compiler-reference.md-b6738b7d"  >kotlinc-js</code>.</p><p id="compiler-reference.md-60c9b821" >In addition to the <a href="#compiler-reference.md-common-options" id="compiler-reference.md-a1563d5b"   >common options</a>, Kotlin/JS compiler has the options listed below.</p><section class="chapter"  ><h3 id="compiler-reference.md-libraries-path" data-toc="compiler-reference#compiler-reference.md-libraries-path"  >-libraries path</h3><p id="compiler-reference.md-fba68707" >Paths to Kotlin libraries with <code class="code " id="compiler-reference.md-7b9bc54f"  >.meta.js</code> and <code class="code " id="compiler-reference.md-666ceaa6"  >.kjsm</code> files, separated by the system path separator.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-main-call-nocall" data-toc="compiler-reference#compiler-reference.md-main-call-nocall"  >-main {call|noCall}</h3><p id="compiler-reference.md-cfaa8df8" >Define whether the <code class="code " id="compiler-reference.md-3122bfe"  >main</code> function should be called upon execution.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-meta-info" data-toc="compiler-reference#compiler-reference.md-meta-info"  >-meta-info</h3><p id="compiler-reference.md-4cac9995" >Generate <code class="code " id="compiler-reference.md-1660d51b"  >.meta.js</code> and <code class="code " id="compiler-reference.md-905f718e"  >.kjsm</code> files with metadata. Use this option when creating a JS library.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-module-kind-umd-commonjs-amd-plain" data-toc="compiler-reference#compiler-reference.md-module-kind-umd-commonjs-amd-plain"  >-module-kind {umd|commonjs|amd|plain}</h3><p id="compiler-reference.md-6f007e18" >The kind of JS module generated by the compiler:</p><ul class="list _ul" id="compiler-reference.md-a41e2602"   ><li class="list__item" id="compiler-reference.md-b1dd80a7" ><p><code class="code " id="compiler-reference.md-8ae2cb92"  >umd</code>- a <a href="https://github.com/umdjs/umd" id="compiler-reference.md-8a31062c"   data-external="true" rel="noopener noreferrer" >Universal Module Definition</a> module</p></li><li class="list__item" id="compiler-reference.md-798cee2" ><p><code class="code " id="compiler-reference.md-6437e553"  >commonjs</code>- a <a href="http://www.commonjs.org/" id="compiler-reference.md-afd054a2"   data-external="true" rel="noopener noreferrer" >CommonJS</a> module</p></li><li class="list__item" id="compiler-reference.md-bf175245" ><p><code class="code " id="compiler-reference.md-529cee1f"  >amd</code>- an <a href="https://en.wikipedia.org/wiki/Asynchronous_module_definition" id="compiler-reference.md-7b273ce7"   data-external="true" rel="noopener noreferrer" >Asynchronous Module Definition</a> module</p></li><li class="list__item" id="compiler-reference.md-6f677db5" ><p><code class="code " id="compiler-reference.md-3e1d6aca"  >plain</code>- a plain JS module</p></li></ul><p id="compiler-reference.md-6b3d0b8e" >To learn more about the different kinds of JS module and the distinctions between them, see <a href="https://www.davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/" id="compiler-reference.md-6e1a76b1"   data-external="true" rel="noopener noreferrer" >this</a> article.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-no-stdlib-js" data-toc="compiler-reference#compiler-reference.md-no-stdlib-js"  >-no-stdlib (JS)</h3><p id="compiler-reference.md-4f9fd293" >Don\'t automatically include the default Kotlin/JS stdlib into the compilation dependencies.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-output-filepath" data-toc="compiler-reference#compiler-reference.md-output-filepath"  >-output filepath</h3><p id="compiler-reference.md-8fb5f5de" >Set the destination file for the compilation result. The value must be a path to a <code class="code " id="compiler-reference.md-17d2c685"  >.js</code> file including its name.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-output-postfix-filepath" data-toc="compiler-reference#compiler-reference.md-output-postfix-filepath"  >-output-postfix filepath</h3><p id="compiler-reference.md-128aa384" >Add the content of the specified file to the end of the output file.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-output-prefix-filepath" data-toc="compiler-reference#compiler-reference.md-output-prefix-filepath"  >-output-prefix filepath</h3><p id="compiler-reference.md-4bfc8f88" >Add the content of the specified file to the beginning of the output file.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-source-map" data-toc="compiler-reference#compiler-reference.md-source-map"  >-source-map</h3><p id="compiler-reference.md-93e2ad09" >Generate the source map.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-source-map-base-dirs-path" data-toc="compiler-reference#compiler-reference.md-source-map-base-dirs-path"  >-source-map-base-dirs path</h3><p id="compiler-reference.md-442044b0" >Use the specified paths as base directories. Base directories are used for calculating relative paths in the source map.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-source-map-embed-sources-always-never-inlining" data-toc="compiler-reference#compiler-reference.md-source-map-embed-sources-always-never-inlining"  >-source-map-embed-sources {always|never|inlining}</h3><p id="compiler-reference.md-18399e03" >Embed source files into the source map.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-source-map-prefix" data-toc="compiler-reference#compiler-reference.md-source-map-prefix"  >-source-map-prefix</h3><p id="compiler-reference.md-1e175e54" >Add the specified prefix to paths in the source map.</p></section></section><section class="chapter"  ><h2 id="compiler-reference.md-kotlin-native-compiler-options" data-toc="compiler-reference#compiler-reference.md-kotlin-native-compiler-options"  >Kotlin/Native compiler options</h2><p id="compiler-reference.md-abcb5308" >Kotlin/Native compiler compiles Kotlin source files into native binaries for the <a href="#native-overview.md-target-platforms" id="compiler-reference.md-d3fa0917"   >supported platforms</a>. The command-line tool for Kotlin/Native compilation is <code class="code " id="compiler-reference.md-99193a24"  >kotlinc-native</code>.</p><p id="compiler-reference.md-2be0f812" >In addition to the <a href="#compiler-reference.md-common-options" id="compiler-reference.md-117c731f"   >common options</a>, Kotlin/Native compiler has the options listed below.</p><section class="chapter"  ><h3 id="compiler-reference.md-enable-assertions-ea" data-toc="compiler-reference#compiler-reference.md-enable-assertions-ea"  >-enable-assertions (-ea)</h3><p id="compiler-reference.md-70e56e65" >Enable runtime assertions in the generated code.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-g" data-toc="compiler-reference#compiler-reference.md-g"  >-g</h3><p id="compiler-reference.md-d2c14840" >Enable emitting debug information.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-generate-test-runner-tr" data-toc="compiler-reference#compiler-reference.md-generate-test-runner-tr"  >-generate-test-runner (-tr)</h3><p id="compiler-reference.md-daabdeb4" >Produce an application for running unit tests from the project.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-generate-worker-test-runner-trw" data-toc="compiler-reference#compiler-reference.md-generate-worker-test-runner-trw"  >-generate-worker-test-runner (-trw)</h3><p id="compiler-reference.md-efa54edd" >Produce an application for running unit tests in a <a href="#native-concurrency.md-workers" id="compiler-reference.md-41395c47"   >worker thread</a>.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-generate-no-exit-test-runner-trn" data-toc="compiler-reference#compiler-reference.md-generate-no-exit-test-runner-trn"  >-generate-no-exit-test-runner (-trn)</h3><p id="compiler-reference.md-d09e3288" >Produce an application for running unit tests without an explicit process exit.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-include-binary-path-ib-path" data-toc="compiler-reference#compiler-reference.md-include-binary-path-ib-path"  >-include-binary path (-ib path)</h3><p id="compiler-reference.md-eb936483" >Pack external binary within the generated klib file.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-library-path-l-path" data-toc="compiler-reference#compiler-reference.md-library-path-l-path"  >-library path (-l path)</h3><p id="compiler-reference.md-6298f15c" >Link with the library. To learn about using libraries in Kotlin/native projects, see <a href="#native-libraries.md" id="compiler-reference.md-2f379c5b"   >Kotlin/Native libraries</a>.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-library-version-version-lv-version" data-toc="compiler-reference#compiler-reference.md-library-version-version-lv-version"  >-library-version version (-lv version)</h3><p id="compiler-reference.md-87f64068" >Set the library version.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-list-targets" data-toc="compiler-reference#compiler-reference.md-list-targets"  >-list-targets</h3><p id="compiler-reference.md-55c2c3da" >List the available hardware targets.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-manifest-path" data-toc="compiler-reference#compiler-reference.md-manifest-path"  >-manifest path</h3><p id="compiler-reference.md-a0d7f016" >Provide a manifest addend file.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-module-name-name-native" data-toc="compiler-reference#compiler-reference.md-module-name-name-native"  >-module-name name (Native)</h3><p id="compiler-reference.md-1d9a5cc6" >Specify a name for the compilation module. This option can also be used to specify a name prefix for the declarations exported to Objective-C: <a href="#native-faq.md-how-do-i-specify-a-custom-objective-c-prefix-name-for-my-kotlin-framework" id="compiler-reference.md-df0707ae"   >How do I specify a custom Objective-C prefix/name for my Kotlin framework?</a></p></section><section class="chapter"  ><h3 id="compiler-reference.md-native-library-path-nl-path" data-toc="compiler-reference#compiler-reference.md-native-library-path-nl-path"  >-native-library path (-nl path)</h3><p id="compiler-reference.md-8f8ff03c" >Include the native bitcode library.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-no-default-libs" data-toc="compiler-reference#compiler-reference.md-no-default-libs"  >-no-default-libs</h3><p id="compiler-reference.md-f3044766" >Disable linking user code with the <a href="#native-platform-libs.md" id="compiler-reference.md-37fd12ac"   >default platform libraries</a> distributed with the compiler.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-nomain" data-toc="compiler-reference#compiler-reference.md-nomain"  >-nomain</h3><p id="compiler-reference.md-bade12a1" >Assume the <code class="code " id="compiler-reference.md-7b4cab6"  >main</code> entry point to be provided by external libraries.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-nopack" data-toc="compiler-reference#compiler-reference.md-nopack"  >-nopack</h3><p id="compiler-reference.md-e7700049" >Don\'t pack the library into a klib file.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-linker-option" data-toc="compiler-reference#compiler-reference.md-linker-option"  >-linker-option</h3><p id="compiler-reference.md-d837269e" >Pass an argument to the linker during binary building. This can be used for linking against some native library.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-linker-options-args" data-toc="compiler-reference#compiler-reference.md-linker-options-args"  >-linker-options args</h3><p id="compiler-reference.md-b0d48568" >Pass multiple arguments to the linker during binary building. Separate arguments with whitespaces.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-nostdlib" data-toc="compiler-reference#compiler-reference.md-nostdlib"  >-nostdlib</h3><p id="compiler-reference.md-fdbc657a" >Don\'t link with stdlib.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-opt" data-toc="compiler-reference#compiler-reference.md-opt"  >-opt</h3><p id="compiler-reference.md-47c9ee68" >Enable compilation optimizations.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-output-name-o-name" data-toc="compiler-reference#compiler-reference.md-output-name-o-name"  >-output name (-o name)</h3><p id="compiler-reference.md-f7507450" >Set the name for the output file.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-entry-name-e-name" data-toc="compiler-reference#compiler-reference.md-entry-name-e-name"  >-entry name (-e name)</h3><p id="compiler-reference.md-9b5535ab" >Specify the qualified entry point name.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-produce-output-p-output" data-toc="compiler-reference#compiler-reference.md-produce-output-p-output"  >-produce output (-p output)</h3><p id="compiler-reference.md-d6c86cae" >Specify output file kind:</p><ul class="list _ul" id="compiler-reference.md-8c9ca55"   ><li class="list__item" id="compiler-reference.md-811918f" ><code class="code " id="compiler-reference.md-49fa187a"  >program</code></li><li class="list__item" id="compiler-reference.md-9103c881" ><code class="code " id="compiler-reference.md-320d2c15"  >static</code></li><li class="list__item" id="compiler-reference.md-a2dd1071" ><code class="code " id="compiler-reference.md-fe782a6e"  >dynamic</code></li><li class="list__item" id="compiler-reference.md-1fd4cc80" ><code class="code " id="compiler-reference.md-af6b29de"  >framework</code></li><li class="list__item" id="compiler-reference.md-1b9e30cd" ><code class="code " id="compiler-reference.md-e59f360d"  >library</code></li><li class="list__item" id="compiler-reference.md-59328826" ><code class="code " id="compiler-reference.md-a51c9f21"  >bitcode</code></li></ul></section><section class="chapter"  ><h3 id="compiler-reference.md-repo-path-r-path" data-toc="compiler-reference#compiler-reference.md-repo-path-r-path"  >-repo path (-r path)</h3><p id="compiler-reference.md-766cb4ed" >Library search path. For more information, see <a href="#native-libraries.md-library-search-sequence" id="compiler-reference.md-a0251c72"   >Library search sequence</a>.</p></section><section class="chapter"  ><h3 id="compiler-reference.md-target-target" data-toc="compiler-reference#compiler-reference.md-target-target"  >-target target</h3><p id="compiler-reference.md-6a60cb9" >Set hardware target. To see the list of available targets, use the <a href="#compiler-reference.md-list-targets" id="compiler-reference.md-9735fc9"   ><code class="code " id="compiler-reference.md-ad4ccd82"  >-list-targets</code></a> option.</p></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="all-open-plugin.md"  >All-open compiler plugin</h1><p id="all-open-plugin.md-e672f3a0" >Kotlin has classes and their members <code class="code " id="all-open-plugin.md-97ab63c5"  >final</code> by default, which makes it inconvenient to use frameworks and libraries such as Spring AOP that require classes to be <code class="code " id="all-open-plugin.md-6a3f28b1"  >open</code>. The <em id="all-open-plugin.md-6543d1ec" class=""  >all-open</em> compiler plugin adapts Kotlin to the requirements of those frameworks and makes classes annotated with a specific annotation and their members open without the explicit <code class="code " id="all-open-plugin.md-2a0e3aa0"  >open</code> keyword.</p><p id="all-open-plugin.md-26d32463" >For instance, when you use Spring, you don\'t need all the classes to be open, but only classes annotated with specific annotations like <code class="code " id="all-open-plugin.md-8bed0268"  >@Configuration</code> or <code class="code " id="all-open-plugin.md-98ae1c77"  >@Service</code>. <em id="all-open-plugin.md-1ee2f26e" class=""  >All-open</em> allows to specify such annotations.</p><p id="all-open-plugin.md-ad37e539" >We provide <em id="all-open-plugin.md-b7261dff" class=""  >all-open</em> plugin support both for Gradle and Maven with the complete IDE integration.</p><aside data-type="note" class="prompt" data-title="" id="all-open-plugin.md-77f0481a" ><p id="all-open-plugin.md-1cc92479" >For Spring, you can use the <code class="code " id="all-open-plugin.md-804a842d"  >kotlin-spring</code> compiler plugin (<a href="#all-open-plugin.md-spring-support" id="all-open-plugin.md-bb9bc53"   >see below</a> ).</p></aside><section class="chapter"  ><h2 id="all-open-plugin.md-gradle" data-toc="all-open-plugin#all-open-plugin.md-gradle"  >Gradle</h2><p id="all-open-plugin.md-e271402e" >Add the plugin artifact to the build script dependencies and apply the plugin:</p><div class="code-block" data-lang="groovy" id="all-open-plugin.md-962c406a"         >buildscript {\n    dependencies {\n        classpath &quot;org.jetbrains.kotlin:kotlin-allopen:$kotlin_version&quot;\n    }\n}\n\napply plugin: &quot;kotlin-allopen&quot;\n</div><p id="all-open-plugin.md-e1acfabe" >As an alternative, you can enable it using the <code class="code " id="all-open-plugin.md-41badbc5"  >plugins</code> block:</p><div class="code-block" data-lang="groovy" id="all-open-plugin.md-f4bfa829"         >plugins {\n  id &quot;org.jetbrains.kotlin.plugin.allopen&quot; version &quot;1.4.32&quot;\n}\n</div><p id="all-open-plugin.md-bc3dd815" >Then specify the list of annotations that will make classes open:</p><div class="code-block" data-lang="groovy" id="all-open-plugin.md-b52f3cb6"         >allOpen {\n    annotation(&quot;com.my.Annotation&quot;)\n    // annotations(&quot;com.another.Annotation&quot;, &quot;com.third.Annotation&quot;)\n}\n</div><p id="all-open-plugin.md-2e7abdb1" >If the class (or any of its superclasses) is annotated with <code class="code " id="all-open-plugin.md-846d50d7"  >com.my.Annotation</code>, the class itself and all its members will become open.</p><p id="all-open-plugin.md-10ae04eb" >It also works with meta-annotations:</p><div class="code-block" data-lang="kotlin" id="all-open-plugin.md-e79e9333"         >@com.my.Annotation\nannotation class MyFrameworkAnnotation\n\n@MyFrameworkAnnotation\nclass MyClass // will be all-open\n</div><p id="all-open-plugin.md-f3277639" ><code class="code " id="all-open-plugin.md-c9e11267"  >MyFrameworkAnnotation</code> is annotated with the all-open meta-annotation <code class="code " id="all-open-plugin.md-2525f63e"  >com.my.Annotation</code>, so it becomes an all-open annotation as well.</p></section><section class="chapter"  ><h2 id="all-open-plugin.md-maven" data-toc="all-open-plugin#all-open-plugin.md-maven"  >Maven</h2><p id="all-open-plugin.md-aed825cd" >Here\'s how to use all-open with Maven:</p><div class="code-block" data-lang="markup" id="all-open-plugin.md-a999e18c"         >&lt;plugin&gt;\n    &lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;\n    &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n    &lt;version&gt;${kotlin.version}&lt;/version&gt;\n\n    &lt;configuration&gt;\n        &lt;compilerPlugins&gt;\n            &lt;!-- Or &quot;spring&quot; for the Spring support --&gt;\n            &lt;plugin&gt;all-open&lt;/plugin&gt;\n        &lt;/compilerPlugins&gt;\n\n        &lt;pluginOptions&gt;\n            &lt;!-- Each annotation is placed on its own line --&gt;\n            &lt;option&gt;all-open:annotation=com.my.Annotation&lt;/option&gt;\n            &lt;option&gt;all-open:annotation=com.their.AnotherAnnotation&lt;/option&gt;\n        &lt;/pluginOptions&gt;\n    &lt;/configuration&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n            &lt;artifactId&gt;kotlin-maven-allopen&lt;/artifactId&gt;\n            &lt;version&gt;${kotlin.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/plugin&gt;\n</div><p id="all-open-plugin.md-590c79fe" >Please refer to the <a href="#all-open-plugin.md-gradle" id="all-open-plugin.md-6080f6c4"   >Gradle</a> section for the detailed information about how all-open annotations work.</p></section><section class="chapter"  ><h2 id="all-open-plugin.md-spring-support" data-toc="all-open-plugin#all-open-plugin.md-spring-support"  >Spring support</h2><p id="all-open-plugin.md-a399d20b" >If you use Spring, you can enable the <em id="all-open-plugin.md-61b5b149" class=""  >kotlin-spring</em> compiler plugin instead of specifying Spring annotations manually. The kotlin-spring is a wrapper on top of all-open, and it behaves exactly the same way.</p><p id="all-open-plugin.md-4577d9d9" >As with all-open, add the plugin to the build script dependencies:</p><div class="code-block" data-lang="groovy" id="all-open-plugin.md-63f394ca"         >buildscript {\n    dependencies {\n        classpath &quot;org.jetbrains.kotlin:kotlin-allopen:$kotlin_version&quot;\n    }\n}\n\napply plugin: &quot;kotlin-spring&quot; // instead of &quot;kotlin-allopen&quot;\n</div><p id="all-open-plugin.md-43673e27" >Or using the Gradle plugins DSL:</p><div class="code-block" data-lang="groovy" id="all-open-plugin.md-ef24cbb4"         >plugins {\n  id &quot;org.jetbrains.kotlin.plugin.spring&quot; version &quot;1.4.32&quot;\n}\n</div><p id="all-open-plugin.md-71dc1b2e" >In Maven, the <code class="code " id="all-open-plugin.md-d019924a"  >spring</code> plugin is provided by the <code class="code " id="all-open-plugin.md-d92bb485"  >kotlin-maven-allopen</code> plugin dependency, so to enable it:</p><div class="code-block" data-lang="markup" id="all-open-plugin.md-bfc2ab28"         >&lt;compilerPlugins&gt;\n    &lt;plugin&gt;spring&lt;/plugin&gt;\n&lt;/compilerPlugins&gt;\n\n&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n        &lt;artifactId&gt;kotlin-maven-allopen&lt;/artifactId&gt;\n        &lt;version&gt;${kotlin.version}&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</div><p id="all-open-plugin.md-1296addb" >The plugin specifies the following annotations:</p><ul class="list _ul" id="all-open-plugin.md-d27da126"   ><li class="list__item" id="all-open-plugin.md-822e183f" ><a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html" id="all-open-plugin.md-939866f6"   data-external="true" rel="noopener noreferrer" ><code class="code " id="all-open-plugin.md-b202ae9f"  >@Component</code></a></li><li class="list__item" id="all-open-plugin.md-ef82eec7" ><a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html" id="all-open-plugin.md-fdbfb7bc"   data-external="true" rel="noopener noreferrer" ><code class="code " id="all-open-plugin.md-f135c0b5"  >@Async</code></a></li><li class="list__item" id="all-open-plugin.md-a0721b8" ><a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Transactional.html" id="all-open-plugin.md-674bd64e"   data-external="true" rel="noopener noreferrer" ><code class="code " id="all-open-plugin.md-92e8e94f"  >@Transactional</code></a></li><li class="list__item" id="all-open-plugin.md-be265045" ><a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/cache/annotation/Cacheable.html" id="all-open-plugin.md-a0447f8f"   data-external="true" rel="noopener noreferrer" ><code class="code " id="all-open-plugin.md-f0cf3f5f"  >@Cacheable</code></a></li><li class="list__item" id="all-open-plugin.md-1110ae64" ><a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/SpringBootTest.html" id="all-open-plugin.md-ae0365c8"   data-external="true" rel="noopener noreferrer" ><code class="code " id="all-open-plugin.md-f181fe2f"  >@SpringBootTest</code></a></li></ul><p id="all-open-plugin.md-748fb49d" >Thanks to meta-annotations support, classes annotated with <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html" id="all-open-plugin.md-90cbcbd3"   data-external="true" rel="noopener noreferrer" ><code class="code " id="all-open-plugin.md-cbde0ebc"  >@Configuration</code></a>, <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Controller.html" id="all-open-plugin.md-ea374e71"   data-external="true" rel="noopener noreferrer" ><code class="code " id="all-open-plugin.md-a720e052"  >@Controller</code></a>, <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html" id="all-open-plugin.md-38d2aae6"   data-external="true" rel="noopener noreferrer" ><code class="code " id="all-open-plugin.md-7e7e3db5"  >@RestController</code></a>, <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/stereotype/Service.html" id="all-open-plugin.md-2f064a7c"   data-external="true" rel="noopener noreferrer" ><code class="code " id="all-open-plugin.md-55d6664b"  >@Service</code></a> or <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Repository.html" id="all-open-plugin.md-d510024e"   data-external="true" rel="noopener noreferrer" ><code class="code " id="all-open-plugin.md-6ed14fcd"  >@Repository</code></a> are automatically opened since these annotations are meta-annotated with <a href="http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html" id="all-open-plugin.md-be5c6e5e"   data-external="true" rel="noopener noreferrer" ><code class="code " id="all-open-plugin.md-8b996926"  >@Component</code></a>.</p><p id="all-open-plugin.md-9db47602" >Of course, you can use both <code class="code " id="all-open-plugin.md-f108548f"  >kotlin-allopen</code> and <code class="code " id="all-open-plugin.md-e96e4468"  >kotlin-spring</code> in the same project.</p><p id="all-open-plugin.md-65b99744" >Note that if you use the project template generated by the <a href="http://start.spring.io/#!language=kotlin" id="all-open-plugin.md-c6fbe33e"   data-external="true" rel="noopener noreferrer" >start.spring.io</a> service, the <code class="code " id="all-open-plugin.md-4f2c040d"  >kotlin-spring</code> plugin will be enabled by default.</p></section><section class="chapter"  ><h2 id="all-open-plugin.md-command-line-compiler" data-toc="all-open-plugin#all-open-plugin.md-command-line-compiler"  >Command-line compiler</h2><p id="all-open-plugin.md-fa7fc9ed" >All-open compiler plugin JAR is available in the binary distribution of the Kotlin compiler. You can attach the plugin by providing the path to its JAR file using the <code class="code " id="all-open-plugin.md-9395788d"  >Xplugin</code> kotlinc option:</p><div class="code-block" data-lang="bash" id="all-open-plugin.md-e2c4738f"         >-Xplugin=$KOTLIN_HOME/lib/allopen-compiler-plugin.jar\n</div><p id="all-open-plugin.md-5f9bf7e0" >You can specify all-open annotations directly, using the <code class="code " id="all-open-plugin.md-c73767d1"  >annotation</code> plugin option, or enable the &quot;preset&quot;. The only preset available now for all-open is <code class="code " id="all-open-plugin.md-686a3aa3"  >spring</code>.</p><div class="code-block" data-lang="bash" id="all-open-plugin.md-8960e055"         ># The plugin option format is: &quot;-P plugin:&lt;plugin id&gt;:&lt;key&gt;=&lt;value&gt;&quot;. \n# Options can be repeated.\n\n-P plugin:org.jetbrains.kotlin.allopen:annotation=com.my.Annotation\n-P plugin:org.jetbrains.kotlin.allopen:preset=spring\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="no-arg-plugin.md"  >No-arg compiler plugin</h1><p id="no-arg-plugin.md-c7602da4" >The <em id="no-arg-plugin.md-d0fd8f6e" class=""  >no-arg</em> compiler plugin generates an additional zero-argument constructor for classes with a specific annotation.</p><p id="no-arg-plugin.md-3413c20e" >The generated constructor is synthetic so it can’t be directly called from Java or Kotlin, but it can be called using reflection.</p><p id="no-arg-plugin.md-b4fdd6c7" >This allows the Java Persistence API (JPA) to instantiate a class although it doesn\'t have the zero-parameter constructor from Kotlin or Java point of view (see the description of <code class="code " id="no-arg-plugin.md-cc38cdab"  >kotlin-jpa</code> plugin <a href="#no-arg-plugin.md-jpa-support" id="no-arg-plugin.md-25eea344"   >below</a>.</p><section class="chapter"  ><h2 id="no-arg-plugin.md-gradle" data-toc="no-arg-plugin#no-arg-plugin.md-gradle"  >Gradle</h2><p id="no-arg-plugin.md-ee7976b" >Add the plugin and specify the list of annotations that must lead to generating a no-arg constructor for the annotated classes.</p><div class="code-block" data-lang="groovy" id="no-arg-plugin.md-ab96fc5e"         >buildscript {\n    dependencies {\n        classpath &quot;org.jetbrains.kotlin:kotlin-noarg:$kotlin_version&quot;\n    }\n}\n\napply plugin: &quot;kotlin-noarg&quot;\n</div><p id="no-arg-plugin.md-f238d616" >Or using the Gradle plugins DSL:</p><div class="code-block" data-lang="groovy" id="no-arg-plugin.md-fe1e1da0"         >plugins {\n  id &quot;org.jetbrains.kotlin.plugin.noarg&quot; version &quot;1.4.32&quot;\n}\n</div><p id="no-arg-plugin.md-e3f4e881" >Then specify the list of no-arg annotations:</p><div class="code-block" data-lang="groovy" id="no-arg-plugin.md-3746d370"         >noArg {\n    annotation(&quot;com.my.Annotation&quot;)\n}\n</div><p id="no-arg-plugin.md-fb1049e7" >Enable <code class="code " id="no-arg-plugin.md-474befec"  >invokeInitializers</code> option if you want the plugin to run the initialization logic from the synthetic constructor. By default, it is disabled.</p><div class="code-block" data-lang="groovy" id="no-arg-plugin.md-c8644ac0"         >noArg {\n    invokeInitializers = true\n}\n</div></section><section class="chapter"  ><h2 id="no-arg-plugin.md-maven" data-toc="no-arg-plugin#no-arg-plugin.md-maven"  >Maven</h2><p><div class="code-block" data-lang="markup" id="no-arg-plugin.md-7d8e7cd6"         >&lt;plugin&gt;\n    &lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;\n    &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n    &lt;version&gt;${kotlin.version}&lt;/version&gt;\n\n    &lt;configuration&gt;\n        &lt;compilerPlugins&gt;\n            &lt;!-- Or &quot;jpa&quot; for JPA support --&gt;\n            &lt;plugin&gt;no-arg&lt;/plugin&gt;\n        &lt;/compilerPlugins&gt;\n\n        &lt;pluginOptions&gt;\n            &lt;option&gt;no-arg:annotation=com.my.Annotation&lt;/option&gt;\n            &lt;!-- Call instance initializers in the synthetic constructor --&gt;\n            &lt;!-- &lt;option&gt;no-arg:invokeInitializers=true&lt;/option&gt; --&gt;\n        &lt;/pluginOptions&gt;\n    &lt;/configuration&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n            &lt;artifactId&gt;kotlin-maven-noarg&lt;/artifactId&gt;\n            &lt;version&gt;${kotlin.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/plugin&gt;\n</div></p></section><section class="chapter"  ><h2 id="no-arg-plugin.md-jpa-support" data-toc="no-arg-plugin#no-arg-plugin.md-jpa-support"  >JPA support</h2><p id="no-arg-plugin.md-ed3c6fa7" >As with the <code class="code " id="no-arg-plugin.md-1402f662"  >kotlin-spring</code> plugin wrapped on top of <code class="code " id="no-arg-plugin.md-1144517e"  >all-open</code>, <code class="code " id="no-arg-plugin.md-16b2c96d"  >kotlin-jpa</code> is wrapped on top of <code class="code " id="no-arg-plugin.md-431a7558"  >no-arg</code>. The plugin specifies <a href="http://docs.oracle.com/javaee/7/api/javax/persistence/Entity.html" id="no-arg-plugin.md-47d2dd71"   data-external="true" rel="noopener noreferrer" ><code class="code " id="no-arg-plugin.md-8770297"  >@Entity</code></a>, <a href="http://docs.oracle.com/javaee/7/api/javax/persistence/Embeddable.html" id="no-arg-plugin.md-67ff3e09"   data-external="true" rel="noopener noreferrer" ><code class="code " id="no-arg-plugin.md-6af718ac"  >@Embeddable</code></a>, and <a href="https://docs.oracle.com/javaee/7/api/javax/persistence/MappedSuperclass.html" id="no-arg-plugin.md-afb167bb"   data-external="true" rel="noopener noreferrer" ><code class="code " id="no-arg-plugin.md-9765e8b9"  >@MappedSuperclass</code></a> <em id="no-arg-plugin.md-5866e5e0" class=""  >no-arg</em> annotations automatically.</p><p id="no-arg-plugin.md-e3edbe80" >That\'s how you add the plugin in Gradle:</p><div class="code-block" data-lang="groovy" id="no-arg-plugin.md-c94e5cec"         >buildscript {\n    dependencies {\n        classpath &quot;org.jetbrains.kotlin:kotlin-noarg:$kotlin_version&quot;\n    }\n}\n\napply plugin: &quot;kotlin-jpa&quot;\n</div><p id="no-arg-plugin.md-db60dd81" >Or using the Gradle plugins DSL:</p><div class="code-block" data-lang="groovy" id="no-arg-plugin.md-652dcf05"         >plugins {\n  id &quot;org.jetbrains.kotlin.plugin.jpa&quot; version &quot;1.4.32&quot;\n}\n</div><p id="no-arg-plugin.md-c4d7da52" >In Maven, enable the <code class="code " id="no-arg-plugin.md-f7166475"  >jpa</code> plugin:</p><div class="code-block" data-lang="markup" id="no-arg-plugin.md-81ff171f"         >&lt;compilerPlugins&gt;\n    &lt;plugin&gt;jpa&lt;/plugin&gt;\n&lt;/compilerPlugins&gt;\n</div></section><section class="chapter"  ><h2 id="no-arg-plugin.md-command-line-compiler" data-toc="no-arg-plugin#no-arg-plugin.md-command-line-compiler"  >Command-line compiler</h2><p id="no-arg-plugin.md-609a54ff" >Add the plugin JAR file to the compiler plugin classpath and specify annotations or presets:</p><div class="code-block" data-lang="bash" id="no-arg-plugin.md-7fa83f28"         >-Xplugin=$KOTLIN_HOME/lib/noarg-compiler-plugin.jar\n-P plugin:org.jetbrains.kotlin.noarg:annotation=com.my.Annotation\n-P plugin:org.jetbrains.kotlin.noarg:preset=jpa\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="sam-with-receiver-plugin.md"  >SAM-with-receiver compiler plugin</h1><p id="sam-with-receiver-plugin.md-4e938ada" >The <em id="sam-with-receiver-plugin.md-749cfded" class=""  >sam-with-receiver</em> compiler plugin makes the first parameter of the annotated Java &quot;single abstract method&quot; (SAM) interface method a receiver in Kotlin. This conversion only works when the SAM interface is passed as a Kotlin lambda, both for SAM adapters and SAM constructors (see the <a href="#java-interop.md-sam-conversions" id="sam-with-receiver-plugin.md-40f29847"   >documentation</a> for more details).</p><p id="sam-with-receiver-plugin.md-eaab52cf" >Here is an example:</p><div class="code-block" data-lang="java" id="sam-with-receiver-plugin.md-46e325ce"         >public @interface SamWithReceiver {}\n\n@SamWithReceiver\npublic interface TaskRunner {\n    void run(Task task);\n}\n</div><div class="code-block" data-lang="kotlin" id="sam-with-receiver-plugin.md-76f832a0"         >fun test(context: TaskContext) {\n    val runner = TaskRunner {\n        // Here \'this\' is an instance of \'Task\'\n\n        println(&quot;$name is started&quot;)\n        context.executeTask(this)\n        println(&quot;$name is finished&quot;)\n    }\n}\n</div><section class="chapter"  ><h2 id="sam-with-receiver-plugin.md-gradle" data-toc="sam-with-receiver-plugin#sam-with-receiver-plugin.md-gradle"  >Gradle</h2><p id="sam-with-receiver-plugin.md-f15b6d1b" >The usage is the same to <a href="#all-open-plugin.md" id="sam-with-receiver-plugin.md-fbaefe71"   >all-open</a> and <a href="#no-arg-plugin.md" id="sam-with-receiver-plugin.md-4f9cc8f6"   >no-arg</a>, except the fact that sam-with-receiver does not have any built-in presets, and you need to specify your own list of special-treated annotations.</p><div class="code-block" data-lang="groovy" id="sam-with-receiver-plugin.md-ffbf2b9c"         >buildscript {\n    dependencies {\n        classpath &quot;org.jetbrains.kotlin:kotlin-sam-with-receiver:$kotlin_version&quot;\n    }\n}\n\napply plugin: &quot;kotlin-sam-with-receiver&quot;\n</div><p id="sam-with-receiver-plugin.md-16f9e993" >Then specify the list of SAM-with-receiver annotations:</p><div class="code-block" data-lang="groovy" id="sam-with-receiver-plugin.md-22105ca3"         >samWithReceiver {\n    annotation(&quot;com.my.SamWithReceiver&quot;)\n}\n</div></section><section class="chapter"  ><h2 id="sam-with-receiver-plugin.md-maven" data-toc="sam-with-receiver-plugin#sam-with-receiver-plugin.md-maven"  >Maven</h2><p><div class="code-block" data-lang="markup" id="sam-with-receiver-plugin.md-d3e4e1a0"         >&lt;plugin&gt;\n    &lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;\n    &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n    &lt;version&gt;${kotlin.version}&lt;/version&gt;\n\n    &lt;configuration&gt;\n        &lt;compilerPlugins&gt;\n            &lt;plugin&gt;sam-with-receiver&lt;/plugin&gt;\n        &lt;/compilerPlugins&gt;\n\n        &lt;pluginOptions&gt;\n            &lt;option&gt;\n                sam-with-receiver:annotation=com.my.SamWithReceiver\n            &lt;/option&gt;\n        &lt;/pluginOptions&gt;\n    &lt;/configuration&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n            &lt;artifactId&gt;kotlin-maven-sam-with-receiver&lt;/artifactId&gt;\n            &lt;version&gt;${kotlin.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/plugin&gt;\n</div></p></section><section class="chapter"  ><h2 id="sam-with-receiver-plugin.md-command-line-compiler" data-toc="sam-with-receiver-plugin#sam-with-receiver-plugin.md-command-line-compiler"  >Command-line compiler</h2><p id="sam-with-receiver-plugin.md-927f1c1b" >Add the plugin JAR file to the compiler plugin classpath and specify the list of sam-with-receiver annotations:</p><div class="code-block" data-lang="bash" id="sam-with-receiver-plugin.md-1dc290f1"         >-Xplugin=$KOTLIN_HOME/lib/sam-with-receiver-compiler-plugin.jar\n-P plugin:org.jetbrains.kotlin.samWithReceiver:annotation=com.my.SamWithReceiver\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="kapt.md"  >Using kapt</h1><p id="kapt.md-84c54523" >Annotation processors (see <a href="https://jcp.org/en/jsr/detail?id=269" id="kapt.md-abf4e930"   data-external="true" rel="noopener noreferrer" >JSR 269</a>) are supported in Kotlin with the <em id="kapt.md-ce9de602" class=""  >kapt</em> compiler plugin.</p><p id="kapt.md-664eee09" >In a nutshell, you can use libraries such as <a href="https://google.github.io/dagger/" id="kapt.md-878308f3"   data-external="true" rel="noopener noreferrer" >Dagger</a> or <a href="https://developer.android.com/topic/libraries/data-binding/index.html" id="kapt.md-799b726f"   data-external="true" rel="noopener noreferrer" >Data Binding</a> in your Kotlin projects.</p><p id="kapt.md-d8f918ba" >Please read below about how to apply the <em id="kapt.md-3db1c085" class=""  >kapt</em> plugin to your Gradle/Maven build.</p><section class="chapter"  ><h2 id="kapt.md-using-in-gradle" data-toc="kapt#kapt.md-using-in-gradle"  >Using in Gradle</h2><p id="kapt.md-6504af" >Apply the <code class="code " id="kapt.md-9168560f"  >kotlin-kapt</code> Gradle plugin:</p><div class="tabs" id="kapt.md-55c94a9c" ><div class="tabs__content" data-gtm="tab" id="kapt.md-89d0760f"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="kapt.md-89d0760f"   data-title="Groovy"      >plugins {\n    id &quot;org.jetbrains.kotlin.kapt&quot; version &quot;1.4.32&quot;\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="kapt.md-f03d73c9"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="kapt.md-f03d73c9"   data-title="Kotlin"      >plugins {\n    kotlin(&quot;kapt&quot;) version &quot;1.4.32&quot;\n}\n</div></div></div><p id="kapt.md-4ca5541d" >Alternatively, you can use the <code class="code " id="kapt.md-92d2d720"  >apply plugin</code> syntax:</p><div class="code-block" data-lang="groovy" id="kapt.md-f9e33b11"         >apply plugin: \'kotlin-kapt\'\n</div><p id="kapt.md-5158df24" >Then add the respective dependencies using the <code class="code " id="kapt.md-f9886b5d"  >kapt</code> configuration in your <code class="code " id="kapt.md-bd39308f"  >dependencies</code> block:</p><div class="tabs" id="kapt.md-8ec16229" ><div class="tabs__content" data-gtm="tab" id="kapt.md-fe68614"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="kapt.md-fe68614"   data-title="Groovy"      >dependencies {\n    kapt \'groupId:artifactId:version\'\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="kapt.md-fdd47d47"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="kapt.md-fdd47d47"   data-title="Kotlin"      >dependencies {\n    kapt(&quot;groupId:artifactId:version&quot;)\n}\n</div></div></div><p id="kapt.md-ab357381" >If you previously used the <a href="https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html#annotationProcessor_config" id="kapt.md-a8ccd569"   data-external="true" rel="noopener noreferrer" >Android support</a> for annotation processors, replace usages of the <code class="code " id="kapt.md-c04e39e3"  >annotationProcessor</code> configuration with <code class="code " id="kapt.md-6e7f0010"  >kapt</code>. If your project contains Java classes, <code class="code " id="kapt.md-e9c3977f"  >kapt</code> will also take care of them.</p><p id="kapt.md-d863ec0b" >If you use annotation processors for your <code class="code " id="kapt.md-b777a123"  >androidTest</code> or <code class="code " id="kapt.md-16252638"  >test</code> sources, the respective <code class="code " id="kapt.md-4afb0a7a"  >kapt</code> configurations are named <code class="code " id="kapt.md-393927e6"  >kaptAndroidTest</code> and <code class="code " id="kapt.md-48cc767d"  >kaptTest</code>. Note that <code class="code " id="kapt.md-5b46759b"  >kaptAndroidTest</code> and <code class="code " id="kapt.md-e23d82e7"  >kaptTest</code> extends <code class="code " id="kapt.md-45ffc6e4"  >kapt</code>, so you can just provide the <code class="code " id="kapt.md-baff7d61"  >kapt</code> dependency and it will be available both for production sources and tests.</p></section><section class="chapter"  ><h2 id="kapt.md-annotation-processor-arguments" data-toc="kapt#kapt.md-annotation-processor-arguments"  >Annotation processor arguments</h2><p id="kapt.md-2e7d55ef" >Use <code class="code " id="kapt.md-f90847e2"  >arguments {}</code> block to pass arguments to annotation processors:</p><div class="code-block" data-lang="groovy" id="kapt.md-2981468c"         >kapt {\n    arguments {\n        arg(&quot;key&quot;, &quot;value&quot;)\n    }\n}\n</div></section><section class="chapter"  ><h2 id="kapt.md-gradle-build-cache-support" data-toc="kapt#kapt.md-gradle-build-cache-support"  >Gradle build cache support</h2><p id="kapt.md-7b1ae4f5" >The kapt annotation processing tasks are <a href="https://guides.gradle.org/using-build-cache/" id="kapt.md-d8856bd4"   data-external="true" rel="noopener noreferrer" >cached in Gradle</a> by default. However, annotation processors run arbitrary code that may not necessarily transform the task inputs into the outputs, might access and modify the files that are not tracked by Gradle etc. If the annotation processors used in the build cannot be properly cached, it is possible to disable caching for kapt entirely by adding the following lines to the build script, in order to avoid false-positive cache hits for the kapt tasks:</p><div class="code-block" data-lang="groovy" id="kapt.md-e658fd76"         >kapt {\n    useBuildCache = false\n}\n</div></section><section class="chapter"  ><h2 id="kapt.md-running-kapt-tasks-in-parallel-since-1-2-60" data-toc="kapt#kapt.md-running-kapt-tasks-in-parallel-since-1-2-60"  >Running kapt tasks in parallel (since 1.2.60)</h2><p id="kapt.md-608eb063" >To improve the speed of builds that use kapt, you can enable the <a href="https://guides.gradle.org/using-the-worker-api/" id="kapt.md-c1ce53b4"   data-external="true" rel="noopener noreferrer" >Gradle worker API</a> for kapt tasks. Using the worker API lets Gradle run independent annotation processing tasks from a single project in parallel, which in some cases significantly decreases the execution time. However, running kapt with Gradle worker API enabled can result in increased memory consumption due to parallel execution.</p><p id="kapt.md-bb56e557" >To use the Gradle worker API for parallel execution of kapt tasks, add this line to your <code class="code " id="kapt.md-42f91de5"  >gradle.properties</code> file:</p> <code class="code " id="kapt.md-a81db0ca"  >kapt.use.worker.api=true</code></section><section class="chapter"  ><h2 id="kapt.md-compile-avoidance-for-kapt-since-1-3-20" data-toc="kapt#kapt.md-compile-avoidance-for-kapt-since-1-3-20"  >Compile avoidance for kapt (since 1.3.20)</h2><p id="kapt.md-50180033" >To improve the times of incremental builds with kapt, it can use the Gradle <a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_compile_avoidance" id="kapt.md-9e85eacd"   data-external="true" rel="noopener noreferrer" >compile avoidance</a>. With compile avoidance enabled, Gradle can skip annotation processing when rebuilding a project. Particularly, annotation processing is skipped when:</p><ul class="list _ul" id="kapt.md-a7ecfcaf"   ><li class="list__item" id="kapt.md-65b9c9fb" ><p>The project\'s source files are unchanged.</p></li><li class="list__item" id="kapt.md-9cdea923" ><p>The changes in dependencies are <a href="https://en.wikipedia.org/wiki/Application_binary_interface" id="kapt.md-1d990fbc"   data-external="true" rel="noopener noreferrer" >ABI</a> compatible. For example, the only changes are in method bodies.</p></li></ul><p id="kapt.md-43a6ec86" >However, compile avoidance can\'t be used for annotation processors discovered in the compile classpath since <em id="kapt.md-50ffa667" class=""  >any changes</em> in them require running the annotation processing tasks.</p><p id="kapt.md-1ccef554" >To run kapt with compile avoidance:</p><ul class="list _ul" id="kapt.md-a2c7b672"   ><li class="list__item" id="kapt.md-840582e8" ><p>Add the annotation processor dependencies to the <code class="code " id="kapt.md-70b45a98"  >kapt*</code> configurations manually as described <a href="#kapt.md-using-in-gradle" id="kapt.md-4bd66cef"   >above</a>.</p></li><li class="list__item" id="kapt.md-ac406bb2" ><p>Turn off the discovery of annotation processors in the compile classpath by adding this line to your <code class="code " id="kapt.md-ed3a10ca"  >gradle.properties</code> file:</p></li></ul> <code class="code " id="kapt.md-5ee67b40"  >kapt.include.compile.classpath=false</code></section><section class="chapter"  ><h2 id="kapt.md-incremental-annotation-processing" data-toc="kapt#kapt.md-incremental-annotation-processing"  >Incremental annotation processing</h2><p id="kapt.md-da485c17" >Kapt supports incremental annotation processing that is enabled by default. Currently, annotation processing can be incremental only if all annotation processors being used are incremental.</p><p id="kapt.md-d0c0daf1" >To disable incremental annotation processing, add this line to your <code class="code " id="kapt.md-b023bd53"  >gradle.properties</code> file:</p> <code class="code " id="kapt.md-8b1e9165"  >kapt.incremental.apt=false</code><p id="kapt.md-cfb2dc64" >Note that incremental annotation processing requires <a href="#gradle.md-incremental-compilation" id="kapt.md-dac1bbcd"   >incremental compilation</a> to be enabled as well.</p></section><section class="chapter"  ><h2 id="kapt.md-java-compiler-options" data-toc="kapt#kapt.md-java-compiler-options"  >Java compiler options</h2><p id="kapt.md-100f1ce0" >Kapt uses Java compiler to run annotation processors. <br/> Here is how you can pass arbitrary options to javac:</p><div class="code-block" data-lang="groovy" id="kapt.md-4a7b444a"         >kapt {\n    javacOptions {\n        // Increase the max count of errors from annotation processors.\n        // Default is 100.\n        option(&quot;-Xmaxerrs&quot;, 500)\n    }\n}\n</div></section><section class="chapter"  ><h2 id="kapt.md-non-existent-type-correction" data-toc="kapt#kapt.md-non-existent-type-correction"  >Non-existent type correction</h2><p id="kapt.md-779ed636" >Some annotation processors (such as <code class="code " id="kapt.md-3891f8e"  >AutoFactory</code>) rely on precise types in declaration signatures. By default, Kapt replaces every unknown type (including types for the generated classes) to <code class="code " id="kapt.md-a7e9c1f9"  >NonExistentClass</code>, but you can change this behavior. Add the additional flag to the <code class="code " id="kapt.md-8f492420"  >build.gradle</code> file to enable error type inferring in stubs:</p><div class="code-block" data-lang="groovy" id="kapt.md-fa32342f"         >kapt {\n    correctErrorTypes = true\n}\n</div></section><section class="chapter"  ><h2 id="kapt.md-using-in-maven" data-toc="kapt#kapt.md-using-in-maven"  >Using in Maven</h2><p id="kapt.md-3e68b09c" >Add an execution of the <code class="code " id="kapt.md-98fccba9"  >kapt</code> goal from kotlin-maven-plugin before <code class="code " id="kapt.md-72926729"  >compile</code>:</p><div class="code-block" data-lang="markup" id="kapt.md-f5d4bed9"         >&lt;execution&gt;\n    &lt;id&gt;kapt&lt;/id&gt;\n    &lt;goals&gt;\n        &lt;goal&gt;kapt&lt;/goal&gt;\n    &lt;/goals&gt;\n    &lt;configuration&gt;\n        &lt;sourceDirs&gt;\n            &lt;sourceDir&gt;src/main/kotlin&lt;/sourceDir&gt;\n            &lt;sourceDir&gt;src/main/java&lt;/sourceDir&gt;\n        &lt;/sourceDirs&gt;\n        &lt;annotationProcessorPaths&gt;\n            &lt;!-- Specify your annotation processors here. --&gt;\n            &lt;annotationProcessorPath&gt;\n                &lt;groupId&gt;com.google.dagger&lt;/groupId&gt;\n                &lt;artifactId&gt;dagger-compiler&lt;/artifactId&gt;\n                &lt;version&gt;2.9&lt;/version&gt;\n            &lt;/annotationProcessorPath&gt;\n        &lt;/annotationProcessorPaths&gt;\n    &lt;/configuration&gt;\n&lt;/execution&gt;\n</div><p id="kapt.md-763b9e3b" >You can find a complete sample project showing the use of Kotlin, Maven and Dagger in the <a href="https://github.com/JetBrains/kotlin-examples/tree/master/maven/dagger-maven-example" id="kapt.md-a129624f"   data-external="true" rel="noopener noreferrer" >Kotlin examples repository</a>.</p><p id="kapt.md-794cc8a2" >Please note that kapt is still not supported for IntelliJ IDEA’s own build system. Launch the build from the “Maven Projects” toolbar whenever you want to re-run the annotation processing.</p></section><section class="chapter"  ><h2 id="kapt.md-using-in-cli" data-toc="kapt#kapt.md-using-in-cli"  >Using in CLI</h2><p id="kapt.md-858b4f46" >Kapt compiler plugin is available in the binary distribution of the Kotlin compiler.</p><p id="kapt.md-93cb77aa" >You can attach the plugin by providing the path to its JAR file using the <code class="code " id="kapt.md-6eee43a1"  >Xplugin</code> kotlinc option:</p><div class="code-block" data-lang="bash" id="kapt.md-5c512668"         >-Xplugin=$KOTLIN_HOME/lib/kotlin-annotation-processing.jar\n</div><p id="kapt.md-75ff1e08" >Here is a list of the available options:</p><ul class="list _ul" id="kapt.md-3fe905aa"   ><li class="list__item" id="kapt.md-5092a854" ><p><code class="code " id="kapt.md-97c45735"  >sources</code> (<em id="kapt.md-b12ba746" class=""  >required</em> ): An output path for the generated files.</p></li><li class="list__item" id="kapt.md-bda055ac" ><p><code class="code " id="kapt.md-c9de5fb4"  >classes</code> (<em id="kapt.md-99e367bf" class=""  >required</em> ): An output path for the generated class files and resources.</p></li><li class="list__item" id="kapt.md-ac0b8b37" ><p><code class="code " id="kapt.md-4ce4a237"  >stubs</code> (<em id="kapt.md-9fc1b1e0" class=""  >required</em> ): An output path for the stub files. In other words, some temporary directory.</p></li><li class="list__item" id="kapt.md-a075235e" ><p><code class="code " id="kapt.md-8ac73c6e"  >incrementalData</code>: An output path for the binary stubs.</p></li><li class="list__item" id="kapt.md-3ca26800" ><p><code class="code " id="kapt.md-d56e0ef9"  >apclasspath</code> (<em id="kapt.md-42093e88" class=""  >repeatable</em> ): A path to the annotation processor JAR. Pass as many <code class="code " id="kapt.md-64c483ec"  >apclasspath</code> options as many JARs you have.</p></li><li class="list__item" id="kapt.md-e186b605" ><p><code class="code " id="kapt.md-b336658e"  >apoptions</code>: A base64-encoded list of the annotation processor options. See <a href="#kapt.md-ap-javac-options-encoding" id="kapt.md-52c5020"   >AP/javac options encoding</a> for more information.</p></li><li class="list__item" id="kapt.md-e96e5468" ><p><code class="code " id="kapt.md-6b47e839"  >javacArguments</code>: A base64-encoded list of the options passed to javac. See <a href="#kapt.md-ap-javac-options-encoding" id="kapt.md-4144f342"   >AP/javac options encoding</a> for more information.</p></li><li class="list__item" id="kapt.md-8874ff52" ><p><code class="code " id="kapt.md-5c6dc597"  >processors</code>: A comma-specified list of annotation processor qualified class names. If specified, kapt does not try to find annotation processors in <code class="code " id="kapt.md-1557bb74"  >apclasspath</code>.</p></li><li class="list__item" id="kapt.md-fe4afbac" ><p><code class="code " id="kapt.md-7bd5baa3"  >verbose</code>: Enable verbose output.</p></li><li class="list__item" id="kapt.md-4660ffad" ><code class="code " id="kapt.md-520e2caa"  >aptMode</code> (<em id="kapt.md-a13a897e" class=""  >required</em>) <ul class="list _ul" id="kapt.md-456a4c43"   ><li class="list__item" id="kapt.md-e916db22" ><p><code class="code " id="kapt.md-1a46975f"  >stubs</code> – only generate stubs needed for annotation processing;</p></li><li class="list__item" id="kapt.md-d3789de8" ><p><code class="code " id="kapt.md-c799dfa5"  >apt</code> – only run annotation processing;</p></li><li class="list__item" id="kapt.md-a97e38b9" ><p><code class="code " id="kapt.md-ad0bc75a"  >stubsAndApt</code> – generate stubs and run annotation processing.</p></li></ul></li><li class="list__item" id="kapt.md-cef8723e" ><p><code class="code " id="kapt.md-eadb4c51"  >correctErrorTypes</code>: See <a href="#kapt.md-using-in-gradle" id="kapt.md-e6e455bd"   >below</a>. Disabled by default.</p></li></ul><p id="kapt.md-58723865" >The plugin option format is: <code class="code " id="kapt.md-db86f198"  >-P plugin:&lt;plugin id&gt;:&lt;key&gt;=&lt;value&gt;</code>. Options can be repeated.</p><p id="kapt.md-278e2204" >An example:</p><div class="code-block" data-lang="bash" id="kapt.md-e0efe5a3"         >-P plugin:org.jetbrains.kotlin.kapt3:sources=build/kapt/sources\n-P plugin:org.jetbrains.kotlin.kapt3:classes=build/kapt/classes\n-P plugin:org.jetbrains.kotlin.kapt3:stubs=build/kapt/stubs\n\n-P plugin:org.jetbrains.kotlin.kapt3:apclasspath=lib/ap.jar\n-P plugin:org.jetbrains.kotlin.kapt3:apclasspath=lib/anotherAp.jar\n\n-P plugin:org.jetbrains.kotlin.kapt3:correctErrorTypes=true\n</div></section><section class="chapter"  ><h2 id="kapt.md-generating-kotlin-sources" data-toc="kapt#kapt.md-generating-kotlin-sources"  >Generating Kotlin sources</h2><p id="kapt.md-729da938" >Kapt can generate Kotlin sources. Just write the generated Kotlin source files to the directory specified by <code class="code " id="kapt.md-7f96afd7"  >processingEnv.options[&quot;kapt.kotlin.generated&quot;]</code>, and these files will be compiled together with the main sources.</p><p id="kapt.md-3241b08b" >You can find the complete sample in the <a href="https://github.com/JetBrains/kotlin-examples/tree/master/gradle/kotlin-code-generation" id="kapt.md-3f2b9f8"   data-external="true" rel="noopener noreferrer" >kotlin-examples</a> Github repository.</p><p id="kapt.md-e61304a0" >Note that Kapt does not support multiple rounds for the generated Kotlin files.</p></section><section class="chapter"  ><h2 id="kapt.md-ap-javac-options-encoding" data-toc="kapt#kapt.md-ap-javac-options-encoding"  >AP/Javac options encoding</h2><p id="kapt.md-2923b288" ><code class="code " id="kapt.md-7f0da08d"  >apoptions</code> and <code class="code " id="kapt.md-f830c883"  >javacArguments</code> CLI options accept an encoded map of options. <br/> Here is how you can encode options by yourself:</p><div class="code-block" data-lang="kotlin" id="kapt.md-86a7b51a"         >fun encodeList(options: Map&lt;String, String&gt;): String {\n    val os = ByteArrayOutputStream()\n    val oos = ObjectOutputStream(os)\n\n    oos.writeInt(options.size)\n    for ((key, value) in options.entries) {\n        oos.writeUTF(key)\n        oos.writeUTF(value)\n    }\n\n    oos.flush()\n    return Base64.getEncoder().encodeToString(os.toByteArray())\n}\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="kotlin-and-ci.md"  >Kotlin and continuous integration with TeamCity</h1><p id="kotlin-and-ci.md-e45e8efe" >On this page, you\'ll learn how to set up <a href="https://www.jetbrains.com/teamcity/" id="kotlin-and-ci.md-dee77743"   data-external="true" rel="noopener noreferrer" >TeamCity</a> to build your Kotlin project. For more information and basics of TeamCity please check the <a href="https://www.jetbrains.com/teamcity/documentation/" id="kotlin-and-ci.md-213c98c7"   data-external="true" rel="noopener noreferrer" >Documentation page</a> which contains information about installation, basic configuration, etc.</p><p id="kotlin-and-ci.md-fb296489" >Kotlin works with different build tools, so if you\'re using a standard tool such as Ant, Maven or Gradle, the process for setting up a Kotlin project is no different to any other language or library that integrates with these tools. Where there are some minor requirements and differences is when using the internal build system of IntelliJ IDEA, which is also supported on TeamCity.</p><section class="chapter"  ><h2 id="kotlin-and-ci.md-gradle-maven-and-ant" data-toc="kotlin-and-ci#kotlin-and-ci.md-gradle-maven-and-ant"  >Gradle, Maven, and Ant</h2><p id="kotlin-and-ci.md-87692fc7" >If using Ant, Maven or Gradle, the setup process is straightforward. All that is needed is to define the Build Step. For example, if using Gradle, simply define the required parameters such as the Step Name and Gradle tasks that need executing for the Runner Type.</p><p id="kotlin-and-ci.md-29356cea" ><figure title="Gradle Build Step"><img alt="Gradle Build Step" title="Gradle Build Step" id="kotlin-and-ci.md-fd5cf1c8" src="images/teamcity-gradle.png"  class="" width="700" height="354" /></figure></p><p id="kotlin-and-ci.md-eaf21ace" >Since all the dependencies required for Kotlin are defined in the Gradle file, nothing else needs to be configured specifically for Kotlin to run correctly.</p><p id="kotlin-and-ci.md-f6f09e5c" >If using Ant or Maven, the same configuration applies. The only difference being that the Runner Type would be Ant or Maven respectively.</p></section><section class="chapter"  ><h2 id="kotlin-and-ci.md-intellij-idea-build-system" data-toc="kotlin-and-ci#kotlin-and-ci.md-intellij-idea-build-system"  >IntelliJ IDEA Build System</h2><p id="kotlin-and-ci.md-2273e213" >If using IntelliJ IDEA build system with TeamCity, make sure that the version of Kotlin being used by IntelliJ IDEA is the same as the one that TeamCity runs. You may need to download the specific version of the Kotlin plugin and install it on TeamCity.</p><p id="kotlin-and-ci.md-13bc8a2f" >Fortunately, there is a meta-runner already available that takes care of most of the manual work. If not familiar with the concept of TeamCity meta-runners, check the <a href="https://www.jetbrains.com/help/teamcity/working-with-meta-runner.html" id="kotlin-and-ci.md-1b1be2c8"   data-external="true" rel="noopener noreferrer" >documentation</a>. They are very easy and powerful way to introduce custom Runners without the need to write plugins.</p><section class="chapter"  ><h3 id="kotlin-and-ci.md-download-and-install-the-meta-runner" data-toc="kotlin-and-ci#kotlin-and-ci.md-download-and-install-the-meta-runner"  >Download and install the meta-runner</h3><p id="kotlin-and-ci.md-13ed90c8" >The meta-runner for Kotlin is available on <a href="https://github.com/jonnyzzz/Kotlin.TeamCity" id="kotlin-and-ci.md-206a0932"   data-external="true" rel="noopener noreferrer" >GitHub</a>. Download that meta-runner and import it from the TeamCity user interface</p><p id="kotlin-and-ci.md-94831f64" ><figure title="Meta-runner"><img alt="Meta-runner" title="Meta-runner" id="kotlin-and-ci.md-ad68d15b" src="images/teamcity-metarunner.png"  class="" width="700" height="315" /></figure></p></section><section class="chapter"  ><h3 id="kotlin-and-ci.md-setup-kotlin-compiler-fetching-step" data-toc="kotlin-and-ci#kotlin-and-ci.md-setup-kotlin-compiler-fetching-step"  >Setup Kotlin compiler fetching step</h3><p id="kotlin-and-ci.md-eb30ddfa" >Basically this step is limited to defining the Step Name and the version of Kotlin you need. Tags can be used.</p><p id="kotlin-and-ci.md-f10df102" ><figure title="Setup Kotlin Compiler"><img alt="Setup Kotlin Compiler" title="Setup Kotlin Compiler" id="kotlin-and-ci.md-158aa772" src="images/teamcity-setupkotlin.png"  class="" width="700" height="277" /></figure></p><p id="kotlin-and-ci.md-b1ea7594" >The runner will set the value for the property system.path.macro.KOTLIN.BUNDLED to the correct one based on the path settings from the IntelliJ IDEA project. However, this value needs to be defined in TeamCity (and can be set to any value). Therefore, you need to define it as a system variable.</p></section><section class="chapter"  ><h3 id="kotlin-and-ci.md-setup-kotlin-compilation-step" data-toc="kotlin-and-ci#kotlin-and-ci.md-setup-kotlin-compilation-step"  >Setup Kotlin compilation step</h3><p id="kotlin-and-ci.md-ffd6573b" >The final step is to define the actual compilation of the project, which uses the standard IntelliJ IDEA Runner Type.</p><p id="kotlin-and-ci.md-95cd115" ><figure title="IntelliJ IDEA Runner"><img alt="IntelliJ IDEA Runner" title="IntelliJ IDEA Runner" id="kotlin-and-ci.md-31544b30" src="images/teamcity-idearunner.png"  class="" width="700" height="265" /></figure></p><p id="kotlin-and-ci.md-6e469c29" >With that, our project should now build and produce the corresponding artifacts.</p></section></section><section class="chapter"  ><h2 id="kotlin-and-ci.md-other-ci-servers" data-toc="kotlin-and-ci#kotlin-and-ci.md-other-ci-servers"  >Other CI servers</h2><p id="kotlin-and-ci.md-6450090e" >If using a continuous integration tool different to TeamCity, as long as it supports any of the build tools, or calling command line tools, compiling Kotlin and automating things as part of a CI process should be possible.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="kotlin-doc.md"  >Document Kotlin code: KDoc and Dokka</h1><p id="kotlin-doc.md-ac5985e1" >The language used to document Kotlin code (the equivalent of Java\'s JavaDoc) is called <b id="kotlin-doc.md-1c090a7f" class=""  >KDoc</b>. In its essence, KDoc combines JavaDoc\'s syntax for block tags (extended to support Kotlin\'s specific constructs) and Markdown for inline markup.</p><section class="chapter"  ><h2 id="kotlin-doc.md-generate-the-documentation" data-toc="kotlin-doc#kotlin-doc.md-generate-the-documentation"  >Generate the documentation</h2><p id="kotlin-doc.md-55e7d447" >Kotlin\'s documentation generation tool is called <a href="https://github.com/Kotlin/dokka" id="kotlin-doc.md-cf34f530"   data-external="true" rel="noopener noreferrer" >Dokka</a>. See the <a href="https://github.com/Kotlin/dokka/blob/master/README.md" id="kotlin-doc.md-4217026a"   data-external="true" rel="noopener noreferrer" >Dokka README</a> for usage instructions.</p><p id="kotlin-doc.md-6a1137de" >Dokka has plugins for Gradle, Maven, and Ant, so you can integrate documentation generation into your build process.</p></section><section class="chapter"  ><h2 id="kotlin-doc.md-kdoc-syntax" data-toc="kotlin-doc#kotlin-doc.md-kdoc-syntax"  >KDoc syntax</h2><p id="kotlin-doc.md-7f88c4f0" >Just like with JavaDoc, KDoc comments start with <code class="code " id="kotlin-doc.md-6887c5c5"  >/**</code> and end with <code class="code " id="kotlin-doc.md-b783fc3f"  >*/</code>. Every line of the comment may begin with an asterisk, which is not considered part of the contents of the comment.</p><p id="kotlin-doc.md-81faa595" >By convention, the first paragraph of the documentation text (the block of text until the first blank line) is the summary description of the element, and the following text is the detailed description.</p><p id="kotlin-doc.md-dc1adb31" >Every block tag begins on a new line and starts with the <code class="code " id="kotlin-doc.md-6952dd07"  >@</code> character.</p><p id="kotlin-doc.md-28552fa0" >Here\'s an example of a class documented using KDoc:</p><div class="code-block" data-lang="kotlin" id="kotlin-doc.md-3937e33c"         >/**\n * A group of *members*.\n *\n * This class has no useful logic; it\'s just a documentation example.\n *\n * @param T the type of a member in this group.\n * @property name the name of this group.\n * @constructor Creates an empty group.\n */\nclass Group&lt;T&gt;(val name: String) {\n    /**\n     * Adds a [member] to this group.\n     * @return the new size of the group.\n     */\n    fun add(member: T): Int { ... }\n}\n</div><section class="chapter"  ><h3 id="kotlin-doc.md-block-tags" data-toc="kotlin-doc#kotlin-doc.md-block-tags"  >Block tags</h3><p id="kotlin-doc.md-ac537e7d" >KDoc currently supports the following block tags:</p></section><section class="chapter"  ><h3 id="kotlin-doc.md-param-name" data-toc="kotlin-doc#kotlin-doc.md-param-name"  >@param name</h3><p id="kotlin-doc.md-8d3eb8b2" >Documents a value parameter of a function or a type parameter of a class, property or function. To better separate the parameter name from the description, if you prefer, you can enclose the name of the parameter in brackets. The following two syntaxes are therefore equivalent:</p> <code class="code " id="kotlin-doc.md-f9e93307"  >@param name description. @param[name] description.</code></section><section class="chapter"  ><h3 id="kotlin-doc.md-return" data-toc="kotlin-doc#kotlin-doc.md-return"  >@return</h3><p id="kotlin-doc.md-fee36eae" >Documents the return value of a function.</p></section><section class="chapter"  ><h3 id="kotlin-doc.md-constructor" data-toc="kotlin-doc#kotlin-doc.md-constructor"  >@constructor</h3><p id="kotlin-doc.md-43941541" >Documents the primary constructor of a class.</p></section><section class="chapter"  ><h3 id="kotlin-doc.md-receiver" data-toc="kotlin-doc#kotlin-doc.md-receiver"  >@receiver</h3><p id="kotlin-doc.md-88bbac05" >Documents the receiver of an extension function.</p></section><section class="chapter"  ><h3 id="kotlin-doc.md-property-name" data-toc="kotlin-doc#kotlin-doc.md-property-name"  >@property name</h3><p id="kotlin-doc.md-945c21c0" >Documents the property of a class which has the specified name. This tag can be used for documenting properties declared in the primary constructor, where putting a doc comment directly before the property definition would be awkward.</p></section><section class="chapter"  ><h3 id="kotlin-doc.md-throws-class-exception-class" data-toc="kotlin-doc#kotlin-doc.md-throws-class-exception-class"  >@throws class, @exception class</h3><p id="kotlin-doc.md-5771192c" >Documents an exception which can be thrown by a method. Since Kotlin does not have checked exceptions, there is also no expectation that all possible exceptions are documented, but you can still use this tag when it provides useful information for users of the class.</p></section><section class="chapter"  ><h3 id="kotlin-doc.md-sample-identifier" data-toc="kotlin-doc#kotlin-doc.md-sample-identifier"  >@sample identifier</h3><p id="kotlin-doc.md-62782252" >Embeds the body of the function with the specified qualified name into the documentation for the current element, in order to show an example of how the element could be used.</p></section><section class="chapter"  ><h3 id="kotlin-doc.md-see-identifier" data-toc="kotlin-doc#kotlin-doc.md-see-identifier"  >@see identifier</h3><p id="kotlin-doc.md-55a7f989" >Adds a link to the specified class or method to the <b id="kotlin-doc.md-ae32e7d9" class=""  >See also</b> block of the documentation.</p></section><section class="chapter"  ><h3 id="kotlin-doc.md-author" data-toc="kotlin-doc#kotlin-doc.md-author"  >@author</h3><p id="kotlin-doc.md-d62b1f97" >Specifies the author of the element being documented.</p></section><section class="chapter"  ><h3 id="kotlin-doc.md-since" data-toc="kotlin-doc#kotlin-doc.md-since"  >@since</h3><p id="kotlin-doc.md-3b2e6593" >Specifies the version of the software in which the element being documented was introduced.</p></section><section class="chapter"  ><h3 id="kotlin-doc.md-suppress" data-toc="kotlin-doc#kotlin-doc.md-suppress"  >@suppress</h3><p id="kotlin-doc.md-a2c86425" >Excludes the element from the generated documentation. Can be used for elements which are not part of the official API of a module but still have to be visible externally.</p><aside data-type="note" class="prompt" data-title="" id="kotlin-doc.md-4356adb8" ><p id="kotlin-doc.md-cb92067f" >KDoc does not support the <code class="code " id="kotlin-doc.md-725d59a"  >@deprecated</code> tag. Instead, please use the <code class="code " id="kotlin-doc.md-aa7c8474"  >@Deprecated</code> annotation.</p></aside></section></section><section class="chapter"  ><h2 id="kotlin-doc.md-inline-markup" data-toc="kotlin-doc#kotlin-doc.md-inline-markup"  >Inline markup</h2><p id="kotlin-doc.md-9a48ee95" >For inline markup, KDoc uses the regular <a href="http://daringfireball.net/projects/markdown/syntax" id="kotlin-doc.md-d181d7b6"   data-external="true" rel="noopener noreferrer" >Markdown</a> syntax, extended to support a shorthand syntax for linking to other elements in the code.</p><section class="chapter"  ><h3 id="kotlin-doc.md-links-to-elements" data-toc="kotlin-doc#kotlin-doc.md-links-to-elements"  >Links to elements</h3><p id="kotlin-doc.md-9a78e4aa" >To link to another element (class, method, property, or parameter), simply put its name in square brackets:</p> <code class="code " id="kotlin-doc.md-750eb44b"  >Use the method [foo] for this purpose.</code><p id="kotlin-doc.md-40efea95" >If you want to specify a custom label for the link, use the Markdown reference-style syntax:</p> <code class="code " id="kotlin-doc.md-8effe56e"  >Use [this method][foo] for this purpose.</code><p id="kotlin-doc.md-34fe8b06" >You can also use qualified names in the links. Note that, unlike JavaDoc, qualified names always use the dot character to separate the components, even before a method name:</p> <code class="code " id="kotlin-doc.md-25c5c9c2"  >Use [kotlin.reflect.KClass.properties] to enumerate the properties of the class.</code><p id="kotlin-doc.md-5d5b093f" >Names in links are resolved using the same rules as if the name was used inside the element being documented. In particular, this means that if you have imported a name into the current file, you don\'t need to fully qualify it when you use it in a KDoc comment.</p><p id="kotlin-doc.md-3cf58137" >Note that KDoc does not have any syntax for resolving overloaded members in links. Since the Kotlin documentation generation tool puts the documentation for all overloads of a function on the same page, identifying a specific overloaded function is not required for the link to work.</p></section></section><section class="chapter"  ><h2 id="kotlin-doc.md-module-and-package-documentation" data-toc="kotlin-doc#kotlin-doc.md-module-and-package-documentation"  >Module and package documentation</h2><p id="kotlin-doc.md-686ad32b" >Documentation for a module as a whole, as well as packages in that module, is provided as a separate Markdown file, and the paths to that file is passed to Dokka using the <code class="code " id="kotlin-doc.md-28dcb7db"  >-include</code> command line parameter or the corresponding parameters in Ant, Maven and Gradle plugins.</p><p id="kotlin-doc.md-e53e3b21" >Inside the file, the documentation for the module as a whole and for individual packages is introduced by the corresponding first-level headings. The text of the heading must be &quot;Module <code class="code " id="kotlin-doc.md-5dfde976"  >&lt;module name&gt;</code>&quot; for the module, and &quot;Package <code class="code " id="kotlin-doc.md-1ff3e17"  >&lt;package qualified name&gt;</code>&quot; for a package.</p><p id="kotlin-doc.md-491f3eec" >Here\'s an example content of the file:</p><div class="code-block" data-lang="plaintext" id="kotlin-doc.md-e0062e77"         ># Module kotlin-demo\n\nThe module shows the Dokka syntax usage.\n\n# Package org.jetbrains.kotlin.demo\n\nContains assorted useful stuff.\n\n## Level 2 heading\n\nText after this heading is also part of documentation for `org.jetbrains.kotlin.demo`\n\n# Package org.jetbrains.kotlin.demo2\n\nUseful stuff in another package.\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="kotlin-osgi.md"  >Kotlin and OSGi</h1><p id="kotlin-osgi.md-3b4b5168" >To enable Kotlin <a href="https://www.osgi.org/" id="kotlin-osgi.md-11f77845"   data-external="true" rel="noopener noreferrer" >OSGi</a> support in your Kotlin project, include <code class="code " id="kotlin-osgi.md-7ae7a69"  >kotlin-osgi-bundle</code> instead of the regular Kotlin libraries. It is recommended to remove <code class="code " id="kotlin-osgi.md-c8f9f730"  >kotlin-runtime</code>, <code class="code " id="kotlin-osgi.md-7bfda000"  >kotlin-stdlib</code> and <code class="code " id="kotlin-osgi.md-c478cee3"  >kotlin-reflect</code> dependencies as <code class="code " id="kotlin-osgi.md-f07d7379"  >kotlin-osgi-bundle</code> already contains all of them. You also should pay attention in case when external Kotlin libraries are included. Most regular Kotlin dependencies are not OSGi-ready, so you shouldn\'t use them and should remove them from your project.</p><section class="chapter"  ><h2 id="kotlin-osgi.md-maven" data-toc="kotlin-osgi#kotlin-osgi.md-maven"  >Maven</h2><p id="kotlin-osgi.md-44264f34" >To include the Kotlin OSGi bundle to a Maven project:</p><div class="code-block" data-lang="markup" id="kotlin-osgi.md-520cdd28"         >&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n        &lt;artifactId&gt;kotlin-osgi-bundle&lt;/artifactId&gt;\n        &lt;version&gt;${kotlin.version}&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</div><p id="kotlin-osgi.md-f158f1ee" >To exclude the standard library from external libraries (notice that &quot;star exclusion&quot; works in Maven 3 only):</p><div class="code-block" data-lang="markup" id="kotlin-osgi.md-32ed178d"         >&lt;dependency&gt;\n    &lt;groupId&gt;some.group.id&lt;/groupId&gt;\n    &lt;artifactId&gt;some.library&lt;/artifactId&gt;\n    &lt;version&gt;some.library.version&lt;/version&gt;\n\n    &lt;exclusions&gt;\n        &lt;exclusion&gt;\n            &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n            &lt;artifactId&gt;*&lt;/artifactId&gt;\n        &lt;/exclusion&gt;\n    &lt;/exclusions&gt;\n&lt;/dependency&gt;\n</div></section><section class="chapter"  ><h2 id="kotlin-osgi.md-gradle" data-toc="kotlin-osgi#kotlin-osgi.md-gradle"  >Gradle</h2><p id="kotlin-osgi.md-6275913c" >To include <code class="code " id="kotlin-osgi.md-e29b83ee"  >kotlin-osgi-bundle</code> to a Gradle project:</p><div class="code-block" data-lang="groovy" id="kotlin-osgi.md-2f1059a2"         >compile &quot;org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlinVersion&quot;\n</div><p id="kotlin-osgi.md-1f5bced4" >To exclude default Kotlin libraries that comes as transitive dependencies you can use the following approach:</p><div class="code-block" data-lang="groovy" id="kotlin-osgi.md-8610a956"         >dependencies {\n compile (\n   [group: \'some.group.id\', name: \'some.library\', version: \'someversion\'],\n   .....) {\n  exclude group: \'org.jetbrains.kotlin\'\n}\n</div></section><section class="chapter"  ><h2 id="kotlin-osgi.md-faq" data-toc="kotlin-osgi#kotlin-osgi.md-faq"  >FAQ</h2><section class="chapter"  ><h3 id="kotlin-osgi.md-why-not-just-add-required-manifest-options-to-all-kotlin-libraries" data-toc="kotlin-osgi#kotlin-osgi.md-why-not-just-add-required-manifest-options-to-all-kotlin-libraries"  >Why not just add required manifest options to all Kotlin libraries</h3><p id="kotlin-osgi.md-cd9ac93f" >Even though it is the most preferred way to provide OSGi support, unfortunately it couldn\'t be done for now due to so called <a href="http://wiki.osgi.org/wiki/Split_Packages" id="kotlin-osgi.md-591a259a"   data-external="true" rel="noopener noreferrer" >&quot;package split&quot; issue</a> that couldn\'t be easily eliminated and such a big change is not planned for now. There is <code class="code " id="kotlin-osgi.md-a56a8b45"  >Require-Bundle</code> feature but it is not the best option too and not recommended to use. So it was decided to make a separate artifact for OSGi.</p></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="learning-materials-overview.md"  >Learning materials overview</h1><p id="learning-materials-overview.md-a2000448" >You can use the following materials and resources for learning Kotlin:</p><ul class="list _ul" id="learning-materials-overview.md-fd90ea76"   ><li class="list__item" id="learning-materials-overview.md-d06e0f2a" ><p><a href="#basic-syntax.md" id="learning-materials-overview.md-e43ff0f8"   >Basic syntax</a> – get a quick overview of the Kotlin syntax.</p></li><li class="list__item" id="learning-materials-overview.md-8d6d4b9d" ><p><a href="#idioms.md" id="learning-materials-overview.md-be14a2cf"   >Idioms</a> – learn how to write idiomatic Kotlin code for popular cases.</p></li><li class="list__item" id="learning-materials-overview.md-bdc46fe7" ><p><a href="#koans.md" id="learning-materials-overview.md-13ed54c6"   >Kotlin Koans</a> – complete exercises to learn the Kotlin syntax. Each exercise is created as a failing unit test and your job is to make it pass.</p></li><li class="list__item" id="learning-materials-overview.md-e8521e2" ><p><a href="https://play.kotlinlang.org/byExample/overview" id="learning-materials-overview.md-344d644"   data-external="true" rel="noopener noreferrer" >Kotlin by example</a> – review a set of small and simple annotated examples for the Kotlin syntax.</p></li><li class="list__item" id="learning-materials-overview.md-53a49088" ><p><a href="#books.md" id="learning-materials-overview.md-148c2e86"   >Kotlin books</a> – find books we’ve reviewed and recommend for learning Kotlin.</p></li><li class="list__item" id="learning-materials-overview.md-6a6e554" ><p><a href="https://play.kotlinlang.org/hands-on/overview" id="learning-materials-overview.md-209dba9b"   data-external="true" rel="noopener noreferrer" >Kotlin hands-on tutorials</a> – complete long-form tutorials to fully grasp a technology. These tutorials guide you through a self-contained project related to a specific topic.</p></li></ul></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="koans.md"  >Kotlin Koans</h1><p id="koans.md-f9f30b6" >Kotlin Koans are a series of exercises to get you familiar with the Kotlin Syntax. Each exercise is created as a failing unit test and your job is to make it pass. You can work with Kotlin Koans in one of following two ways:</p><ol class="list _decimal" id="koans.md-2da3a38e"   ><li class="list__item" id="koans.md-1be0f6b1" ><p id="koans.md-a39cdd6" >You can play with <a href="https://play.kotlinlang.org/koans" id="koans.md-7cb1bff9"   data-external="true" rel="noopener noreferrer" >Koans online</a>.</p></li><li class="list__item" id="koans.md-7a0eb2e7" ><p id="koans.md-30bffe1b" >You can solve the tasks right inside IntelliJ IDEA or Android Studio by <a href="https://www.jetbrains.com/help/education/install-edutools-plugin.html" id="koans.md-19138162"   data-external="true" rel="noopener noreferrer" >installing the EduTools plugin</a> and <a href="https://www.jetbrains.com/help/education/learner-start-guide.html?section=Kotlin%20Koans" id="koans.md-7a167e12"   data-external="true" rel="noopener noreferrer" >choosing Kotlin Koans course</a>.</p></li></ol><p id="koans.md-a4ff9125" >Whatever way you choose to solve koans, you can see the solution for each task: in the online version click on &quot;Show answer&quot;, inside EduTools plugin choose &quot;Peek solution&quot;. We recommend checking the solution after you implement the task to compare your solution with the proposed one. Make sure you don\'t cheat!</p></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="books.md"  >Kotlin books</h1><p id="books.md-2d0a0803" >More and more authors write books for learning Kotlin in different languages. We are very thankful to all of them and appreciate all their efforts in helping us increase a number of professional Kotlin developers.</p><p id="books.md-6d2abbf7" >Here are just a few books we\'ve reviewed and recommend you for learning Kotlin. You can find more books on <a href="https://kotlin.link/" id="books.md-e27918d7"   data-external="true" rel="noopener noreferrer" >our community website</a>.</p><div class="table-wrapper" ><table class=" no_header wide" id="books.md-48936a81"  ><tbody ><tr class="" id="books.md-1daa035e" ><td id="books.md-1584f94a"    ><figure title="Atomic Kotlin"><img alt="Atomic Kotlin" title="Atomic Kotlin" id="books.md-3d6f6a07" src="images/atomic-kotlin.png"  class="" width="250" height="316" /></figure></td><td id="books.md-993f895"    ><p id="books.md-d5a91c9e" ><a href="https://www.atomickotlin.com/atomickotlin/" id="books.md-6854e2d0"   data-external="true" rel="noopener noreferrer" >Atomic Kotlin</a> is for both beginning and experienced programmers!</p><p id="books.md-859915a9" >From Bruce Eckel, author of the multi-award-winning Thinking in C++ and Thinking in Java, and Svetlana Isakova, Kotlin Developer Advocate at JetBrains, comes a book that breaks the language concepts into small, easy-to-digest “atoms”, along with a free course consisting of exercises supported by hints and solutions directly inside IntelliJ IDEA!</p></td></tr><tr class="" id="books.md-39de63dd" ><td id="books.md-eb0cbd8f"    ><figure title="Head First Kotlin"><img alt="Head First Kotlin" title="Head First Kotlin" id="books.md-45b199fe" src="images/head-first-kotlin.jpeg"  class="" width="250" height="289" /></figure></td><td id="books.md-6cb273a2"    ><p id="books.md-a56cf477" ><a href="https://www.oreilly.com/library/view/head-first-kotlin/9781491996683/" id="books.md-e62584b0"   data-external="true" rel="noopener noreferrer" >Head First Kotlin</a> is a complete introduction to coding in Kotlin. This hands-on book helps you learn the Kotlin language with a unique method that goes beyond syntax and how-to manuals and teaches you how to think like a great Kotlin developer.</p><p id="books.md-293fd2c8" >You’ll learn everything from language fundamentals to collections, generics, lambdas, and higher-order functions. Along the way, you’ll get to play with both object-oriented and functional programming.</p><p id="books.md-f0a39445" >If you want to really understand Kotlin, this is the book for you.</p></td></tr><tr class="" id="books.md-29058b8a" ><td id="books.md-49f696c4"    ><figure title="Kotlin in Action"><img alt="Kotlin in Action" title="Kotlin in Action" id="books.md-148bbd61" src="images/kotlin-in-action.png"  class="" width="250" height="313" /></figure></td><td id="books.md-f242d154"    ><p id="books.md-370f6ee6" ><a href="https://manning.com/books/kotlin-in-action" id="books.md-6e9ee0d5"   data-external="true" rel="noopener noreferrer" >Kotlin in Action</a> teaches you to use the Kotlin language for production-quality applications. Written for experienced Java developers, this example-rich book goes further than most language books, covering interesting topics like building DSLs with natural language syntax.</p><p id="books.md-63daee75" >The book is written by Dmitry Jemerov and Svetlana Isakova, developers on the Kotlin team.</p><p id="books.md-32c6ff59" >Chapter 6, covering the Kotlin type system, and chapter 11, covering DSLs, are available as a free preview on the <a href="https://www.manning.com/books/kotlin-in-action#downloads" id="books.md-61816b8d"   data-external="true" rel="noopener noreferrer" >publisher web site</a>.</p></td></tr><tr class="" id="books.md-601d522d" ><td id="books.md-361485d4"    ><figure title="Kotlin Programming: The Big Nerd Ranch Guide"><img alt="Kotlin Programming: The Big Nerd Ranch Guide" title="Kotlin Programming: The Big Nerd Ranch Guide" id="books.md-3dad9421" src="images/big-nerd-ranch-guide.jpg"  class="" width="250" height="348" /></figure></td><td id="books.md-efd45aee"    ><p id="books.md-afb9ff31" ><a href="https://www.amazon.com/Kotlin-Programming-Nerd-Ranch-Guide/dp/0135161630" id="books.md-2e475319"   data-external="true" rel="noopener noreferrer" >Kotlin Programming: The Big Nerd Ranch Guide</a></p><p id="books.md-a711360c" >In this book you will learn to work effectively with the Kotlin language through carefully considered examples designed to teach you Kotlin’s elegant style and features.</p><p id="books.md-663bb4bd" >Starting from first principles, you will work your way to advanced usage of Kotlin, empowering you to create programs that are more reliable with less code.</p></td></tr><tr class="" id="books.md-e2d5c340" ><td id="books.md-edb6fb92"    ><figure title="Programming Kotlin"><img alt="Programming Kotlin" title="Programming Kotlin" id="books.md-b0f0620" src="images/programming-kotlin.png"  class="" width="250" height="300" /></figure></td><td id="books.md-eb402bd5"    ><p id="books.md-4a88585b" ><a href="https://pragprog.com/book/vskotlin/programming-kotlin" id="books.md-de247c8b"   data-external="true" rel="noopener noreferrer" >Programming Kotlin</a> is written by Venkat Subramaniam.</p><p id="books.md-9da190d8" >Programmers don’t just use Kotlin, they love it. Even Google has adopted it as a first-class language for Android development.</p><p id="books.md-d6eae2ae" >With Kotlin, you can intermix imperative, functional, and object-oriented styles of programming and benefit from the approach that’s most suitable for the problem at hand.</p><p id="books.md-7e82921" >Learn to use the many features of this highly concise, fluent, elegant, and expressive statically typed language with easy-to-understand examples.</p><p id="books.md-49a404a2" >Learn to write maintainable, high-performing JVM and Android applications, create DSLs, program asynchronously, and much more.</p></td></tr><tr class="" id="books.md-46cab3fd" ><td id="books.md-45caeebf"    ><figure title="The Joy of Kotlin"><img alt="The Joy of Kotlin" title="The Joy of Kotlin" id="books.md-86c71e41" src="images/joy-of-kotlin.png"  class="" width="250" height="314" /></figure></td><td id="books.md-2c74196a"    ><p id="books.md-a81eb0d1" ><a href="https://www.manning.com/books/the-joy-of-kotlin" id="books.md-fe2930e5"   data-external="true" rel="noopener noreferrer" >The Joy of Kotlin</a> teaches you the right way to code in Kotlin.</p><p id="books.md-616fe753" >In this insight-rich book, you\'ll master the Kotlin language while exploring coding techniques that will make you a better developer no matter what language you use. Kotlin natively supports a functional style of programming, so seasoned author Pierre-Yves Saumont begins by reviewing the FP principles of immutability, referential transparency, and the separation between functions and effects.</p><p id="books.md-180dbf13" >Then, you\'ll move deeper into using Kotlin in the real world, as you learn to handle errors and data properly, encapsulate shared state mutations, and work with laziness.</p><p id="books.md-d6ab6128" >This book will change the way you code — and give you back some of the joy you had when you first started.</p></td></tr></tbody ></table ></div></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="edu-tools-learner.md"  >Learning Kotlin with EduTools plugin</h1><p id="edu-tools-learner.md-f0dca05c" >With the <a href="https://plugins.jetbrains.com/plugin/10081-edutools" id="edu-tools-learner.md-8629d733"   data-external="true" rel="noopener noreferrer" >EduTools plugin</a>, available both in <a href="https://developer.android.com/studio" id="edu-tools-learner.md-a75fb808"   data-external="true" rel="noopener noreferrer" >Android Studio</a> and <a href="https://www.jetbrains.com/idea/" id="edu-tools-learner.md-2c6e172c"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA</a>, you can learn Kotlin through code practicing tasks.</p><p id="edu-tools-learner.md-e2959bf9" >Take a look at the <a href="https://www.jetbrains.com/help/education/learner-start-guide.html?section=Kotlin%20Koans" id="edu-tools-learner.md-ef9c93fb"   data-external="true" rel="noopener noreferrer" >Learner Start Guide</a>, which will get you started with the Kotlin Koans course inside IntelliJ IDEA. Solve interactive coding challenges and get instant feedback right inside the IDE.</p><p id="edu-tools-learner.md-31513d44" >If you want to use the EduTools plugin for teaching, read <a href="#edu-tools-educator.md" id="edu-tools-learner.md-fa048edb"   >Teaching Kotlin with EduTools plugin</a>.</p></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="edu-tools-educator.md"  >Teaching Kotlin with EduTools plugin</h1><p id="edu-tools-educator.md-e03611ed" >With the <a href="https://plugins.jetbrains.com/plugin/10081-edutools" id="edu-tools-educator.md-ad561859"   data-external="true" rel="noopener noreferrer" >EduTools plugin</a>, available both in <a href="https://developer.android.com/studio" id="edu-tools-educator.md-197ed564"   data-external="true" rel="noopener noreferrer" >Android Studio</a> and <a href="https://www.jetbrains.com/idea/" id="edu-tools-educator.md-2f38d6c0"   data-external="true" rel="noopener noreferrer" >IntelliJ IDEA</a>, you can teach Kotlin through code practicing tasks. Take a look at the <a href="https://www.jetbrains.com/help/education/educator-start-guide.html?section=Kotlin" id="edu-tools-educator.md-8ed3697c"   data-external="true" rel="noopener noreferrer" >Educator Start Guide</a> to learn how to create a simple Kotlin course that includes a set of programming tasks and integrated tests.</p><p id="edu-tools-educator.md-aebfefcc" >If you want to use the EduTools plugin to learn Kotlin, read <a href="#edu-tools-learner.md" id="edu-tools-educator.md-6d77ecb0"   >Learning Kotlin with EduTools plugin</a>.</p></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="faq.md"  >FAQ</h1><section class="chapter"  ><h2 id="faq.md-what-is-kotlin" data-toc="faq#faq.md-what-is-kotlin"  >What is Kotlin?</h2><p id="faq.md-69519eb4" >Kotlin is an open-source statically typed programming language that targets the JVM, Android, JavaScript and Native. It’s developed by <a href="https://www.jetbrains.com" id="faq.md-100f6025"   data-external="true" rel="noopener noreferrer" >JetBrains</a>. The project started in 2010 and was open source from very early on. The first official 1.0 release was in February 2016.</p></section><section class="chapter"  ><h2 id="faq.md-what-is-the-current-version-of-kotlin" data-toc="faq#faq.md-what-is-the-current-version-of-kotlin"  >What is the current version of Kotlin?</h2><p id="faq.md-cb075bae" >The currently released version is 1.4.32, published on March 22, 2021.</p></section><section class="chapter"  ><h2 id="faq.md-is-kotlin-free" data-toc="faq#faq.md-is-kotlin-free"  >Is Kotlin free?</h2><p id="faq.md-931c4804" >Yes. Kotlin is free, has been free and will remain free. It is developed under the Apache 2.0 license and the source code is available <a href="https://github.com/jetbrains/kotlin" id="faq.md-fe47183a"   data-external="true" rel="noopener noreferrer" >on GitHub</a>.</p></section><section class="chapter"  ><h2 id="faq.md-is-kotlin-an-object-oriented-language-or-a-functional-one" data-toc="faq#faq.md-is-kotlin-an-object-oriented-language-or-a-functional-one"  >Is Kotlin an object-oriented language or a functional one?</h2><p id="faq.md-57bb577b" >Kotlin has both object-oriented and functional constructs. You can use it in both OO and FP styles, or mix elements of the two. With first-class support for features such as higher-order functions, function types and lambdas, Kotlin is a great choice if you’re doing or exploring functional programming.</p></section><section class="chapter"  ><h2 id="faq.md-what-advantages-does-kotlin-give-me-over-the-java-programming-language" data-toc="faq#faq.md-what-advantages-does-kotlin-give-me-over-the-java-programming-language"  >What advantages does Kotlin give me over the Java programming language?</h2><p id="faq.md-9addfede" >Kotlin is more concise. Rough estimates indicate approximately a 40% cut in the number of lines of code. It’s also more type-safe, e.g. support for non-nullable types makes applications less prone to NPE’s. Other features including smart casting, higher-order functions, extension functions and lambdas with receivers provide the ability to write expressive code as well as facilitating creation of DSL.</p></section><section class="chapter"  ><h2 id="faq.md-is-kotlin-compatible-with-the-java-programming-language" data-toc="faq#faq.md-is-kotlin-compatible-with-the-java-programming-language"  >Is Kotlin compatible with the Java programming language?</h2><p id="faq.md-96e5beae" >Yes. Kotlin is 100% interoperable with the Java programming language and major emphasis has been placed on making sure that your existing codebase can interact properly with Kotlin. You can easily call Kotlin code from Java and Java code from Kotlin. This makes adoption much easier and lower-risk. There’s also an automated Java-to-Kotlin converter built into the IDE that simplifies migration of existing code.</p></section><section class="chapter"  ><h2 id="faq.md-what-can-i-use-kotlin-for" data-toc="faq#faq.md-what-can-i-use-kotlin-for"  >What can I use Kotlin for?</h2><p id="faq.md-194afba4" >Kotlin can be used for any kind of development, be it server-side, client-side web and Android. With Kotlin/Native currently in the works, support for other platforms such as embedded systems, macOS and iOS is coming. People are using Kotlin for mobile and server-side applications, client-side with JavaScript or JavaFX, and data science, just to name a few possibilities.</p></section><section class="chapter"  ><h2 id="faq.md-can-i-use-kotlin-for-android-development" data-toc="faq#faq.md-can-i-use-kotlin-for-android-development"  >Can I use Kotlin for Android development?</h2><p id="faq.md-a2f8ff98" >Yes. Kotlin is supported as a first-class language on Android. There are hundreds of applications already using Kotlin for Android, such as Basecamp, Pinterest and more. For more information check out <a href="#android-overview.md" id="faq.md-45b2820d"   >the resource on Android development</a>.</p></section><section class="chapter"  ><h2 id="faq.md-can-i-use-kotlin-for-server-side-development" data-toc="faq#faq.md-can-i-use-kotlin-for-server-side-development"  >Can I use Kotlin for server-side development?</h2><p id="faq.md-6f728a11" >Yes. Kotlin is 100% compatible with the JVM and as such you can use any existing frameworks such as Spring Boot, vert.x or JSF. In addition there are specific frameworks written in Kotlin such as <a href="https://github.com/kotlin/ktor" id="faq.md-6d8a78cd"   data-external="true" rel="noopener noreferrer" >Ktor</a>. For more information check out <a href="#server-overview.md" id="faq.md-659e9422"   >the resource on server-side development</a>.</p></section><section class="chapter"  ><h2 id="faq.md-can-i-use-kotlin-for-web-development" data-toc="faq#faq.md-can-i-use-kotlin-for-web-development"  >Can I use Kotlin for web development?</h2><p id="faq.md-1c333254" >Yes. In addition to using for backend web, you can also use Kotlin/JS for client-side web. Kotlin can use definitions from <a href="https://definitelytyped.org" id="faq.md-9843ac02"   data-external="true" rel="noopener noreferrer" >DefinitelyTyped</a> to get static typing for common JavaScript libraries, and it is compatible with existing module systems such as AMD and CommonJS. For more information check out <a href="#js-overview.md" id="faq.md-47b6298f"   >the resource on client-side development</a>.</p></section><section class="chapter"  ><h2 id="faq.md-can-i-use-kotlin-for-desktop-development" data-toc="faq#faq.md-can-i-use-kotlin-for-desktop-development"  >Can I use Kotlin for desktop development?</h2><p id="faq.md-a08e0549" >Yes. You can use any Java UI framework such as JavaFx, Swing or other. In addition there are Kotlin specific frameworks such as <a href="https://github.com/edvin/tornadofx" id="faq.md-8218a49a"   data-external="true" rel="noopener noreferrer" >TornadoFX</a>.</p></section><section class="chapter"  ><h2 id="faq.md-can-i-use-kotlin-for-native-development" data-toc="faq#faq.md-can-i-use-kotlin-for-native-development"  >Can I use Kotlin for native development?</h2><p id="faq.md-8cbc750d" >Yes. Kotlin/Native is available as a part of Kotlin project. It compiles Kotlin to native code that can run without a VM. It is still in beta, but you can already try it on popular desktop and mobile platforms and even some IoT devices. For more information, check out the <a href="#native-overview.md" id="faq.md-247136e3"   >Kotlin/Native documentation</a>.</p></section><section class="chapter"  ><h2 id="faq.md-what-ides-support-kotlin" data-toc="faq#faq.md-what-ides-support-kotlin"  >What IDEs support Kotlin?</h2><p id="faq.md-ba3aa273" >Kotlin is supported by all major Java IDEs including <a href="#jvm-get-started.md" id="faq.md-9330921b"   >IntelliJ IDEA</a>, <a href="https://developer.android.com/kotlin/get-started" id="faq.md-2cc40d75"   data-external="true" rel="noopener noreferrer" >Android Studio</a>, <a href="#eclipse.md" id="faq.md-fffec00"   >Eclipse</a>, and <a href="http://plugins.netbeans.org/plugin/68590/kotlin" id="faq.md-2f8a5b80"   data-external="true" rel="noopener noreferrer" >NetBeans</a>. In addition, a <a href="#command-line.md" id="faq.md-b714b5a9"   >command line compiler</a> is available and provides straightforward support for compiling and running applications.</p></section><section class="chapter"  ><h2 id="faq.md-what-build-tools-support-kotlin" data-toc="faq#faq.md-what-build-tools-support-kotlin"  >What build tools support Kotlin?</h2><p id="faq.md-91818200" >On the JVM side, the main build tools include <a href="#gradle.md" id="faq.md-cba75620"   >Gradle</a>, <a href="#maven.md" id="faq.md-c511bd17"   >Maven</a>, <a href="#maven.md" id="faq.md-5476da9c"   >Ant</a>, and <a href="https://beust.com/kobalt/home/index.html" id="faq.md-e89ab9bf"   data-external="true" rel="noopener noreferrer" >Kobalt</a>. There are also some build tools available that target client-side JavaScript.</p></section><section class="chapter"  ><h2 id="faq.md-what-does-kotlin-compile-down-to" data-toc="faq#faq.md-what-does-kotlin-compile-down-to"  >What does Kotlin compile down to?</h2><p id="faq.md-3cf39ecb" >When targeting the JVM, Kotlin produces Java compatible bytecode.</p><p id="faq.md-99635606" >When targeting JavaScript, Kotlin transpiles to ES5.1 and generates code which is compatible with module systems including AMD and CommonJS.</p><p id="faq.md-8437f45e" >When targeting native, Kotlin will produce platform-specific code (via LLVM).</p></section><section class="chapter"  ><h2 id="faq.md-which-versions-of-jvm-does-kotlin-target" data-toc="faq#faq.md-which-versions-of-jvm-does-kotlin-target"  >Which versions of JVM does Kotlin target?</h2><p id="faq.md-55cfcfa9" >Kotlin lets you choose the version of JVM for execution. By default, the Kotlin/JVM compiler produces Java 6 compatible bytecode. If you want to make use of optimizations available in newer versions of Java, you can explicitly specify the target Java version from 8 to 15. Note that in this case the resulting bytecode might not run on lower versions.</p></section><section class="chapter"  ><h2 id="faq.md-is-kotlin-hard" data-toc="faq#faq.md-is-kotlin-hard"  >Is Kotlin hard?</h2><p id="faq.md-6fac90c2" >Kotlin is inspired by existing languages such as Java, C#, JavaScript, Scala and Groovy. We\'ve tried to ensure that Kotlin is easy to learn, so that people can easily jump on board, reading and writing Kotlin in a matter of days. Learning idiomatic Kotlin and using some more of its advanced features can take a little longer, but overall it is not a complicated language.</p></section><section class="chapter"  ><h2 id="faq.md-what-companies-are-using-kotlin" data-toc="faq#faq.md-what-companies-are-using-kotlin"  >What companies are using Kotlin?</h2><p id="faq.md-61fdc20c" >There are too many companies using Kotlin to list, but some more visible companies that have publicly declared usage of Kotlin, be this via blog posts, GitHub repositories or talks include <a href="https://medium.com/square-corner-blog/square-open-source-loves-kotlin-c57c21710a17" id="faq.md-127cd69a"   data-external="true" rel="noopener noreferrer" >Square</a>, <a href="https://www.youtube.com/watch?v=mDpnc45WwlI" id="faq.md-d4ad25f7"   data-external="true" rel="noopener noreferrer" >Pinterest</a>, <a href="https://m.signalvnoise.com/how-we-made-basecamp-3s-android-app-100-kotlin-35e4e1c0ef12" id="faq.md-d6c53332"   data-external="true" rel="noopener noreferrer" >Basecamp</a>, and <a href="https://docs.corda.net/releases/release-M9.2/further-notes-on-kotlin.html" id="faq.md-6bbbc4cc"   data-external="true" rel="noopener noreferrer" >Corda</a>.</p></section><section class="chapter"  ><h2 id="faq.md-who-develops-kotlin" data-toc="faq#faq.md-who-develops-kotlin"  >Who develops Kotlin?</h2><p id="faq.md-a8443b8a" >Kotlin is primarily developed by a team of engineers at JetBrains (current team size is 100+). The lead language designer is <a href="https://twitter.com/relizarov" id="faq.md-325e4fe"   data-external="true" rel="noopener noreferrer" >Roman Elizarov</a>. In addition to the core team, there are also over 250 external contributors on GitHub.</p></section><section class="chapter"  ><h2 id="faq.md-where-can-i-learn-more-about-kotlin" data-toc="faq#faq.md-where-can-i-learn-more-about-kotlin"  >Where can I learn more about Kotlin?</h2><p id="faq.md-e999dc35" >The best place to start is <a href="https://kotlinlang.org" id="faq.md-d73ecf45"   data-external="true" rel="noopener noreferrer" >this website</a>. From there you can download the compiler, <a href="https://play.kotlinlang.org" id="faq.md-ed143395"   data-external="true" rel="noopener noreferrer" >try it online</a> as well as get access to resources.</p></section><section class="chapter"  ><h2 id="faq.md-are-there-any-books-on-kotlin" data-toc="faq#faq.md-are-there-any-books-on-kotlin"  >Are there any books on Kotlin?</h2><p id="faq.md-72f9764b" >There are a number of books available for Kotlin. Some of them we have reviewed and can recommend to start with. They are listed on the <a href="#books.md" id="faq.md-96870f55"   >Books</a> page. For more books, see the community-maintained list at <a href="https://kotlin.link/" id="faq.md-c265d516"   data-external="true" rel="noopener noreferrer" >kotlin.link</a>.</p></section><section class="chapter"  ><h2 id="faq.md-are-there-any-online-courses-available-for-kotlin" data-toc="faq#faq.md-are-there-any-online-courses-available-for-kotlin"  >Are there any online courses available for Kotlin?</h2><p id="faq.md-83e64c76" >There are a few courses available for Kotlin, including a <a href="https://www.pluralsight.com/courses/kotlin-getting-started" id="faq.md-fd2d8c10"   data-external="true" rel="noopener noreferrer" >Pluralsight Kotlin Course</a> by Kevin Jones, an <a href="https://shop.oreilly.com/product/0636920052982.do" id="faq.md-6874aeb1"   data-external="true" rel="noopener noreferrer" >O’Reilly Course</a> by Hadi Hariri and an <a href="http://petersommerhoff.com/dev/kotlin/kotlin-beginner-tutorial/" id="faq.md-f14729e4"   data-external="true" rel="noopener noreferrer" >Udemy Kotlin Course</a> by Peter Sommerhoff.</p><p id="faq.md-7587b66b" >There are also many recordings of <a href="https://kotlinlang.org/community/talks.html" id="faq.md-d989f945"   data-external="true" rel="noopener noreferrer" >Kotlin talks</a> available on YouTube and Vimeo.</p></section><section class="chapter"  ><h2 id="faq.md-does-kotlin-have-a-community" data-toc="faq#faq.md-does-kotlin-have-a-community"  >Does Kotlin have a community?</h2><p id="faq.md-9f23010a" >Yes. Kotlin has a very vibrant community. Kotlin developers hang out on the <a href="https://discuss.kotlinlang.org" id="faq.md-7e5f92dd"   data-external="true" rel="noopener noreferrer" >Kotlin forums</a>, <a href="https://stackoverflow.com/questions/tagged/kotlin" id="faq.md-d7dac196"   data-external="true" rel="noopener noreferrer" >StackOverflow</a> and more actively on the <a href="https://slack.kotlinlang.org" id="faq.md-9fe12e40"   data-external="true" rel="noopener noreferrer" >Kotlin Slack</a> (with close to 30000 members as of April 2020).</p></section><section class="chapter"  ><h2 id="faq.md-are-there-kotlin-events" data-toc="faq#faq.md-are-there-kotlin-events"  >Are there Kotlin events?</h2><p id="faq.md-12c1f90c" >Yes. There are many User Groups and Meetups now focused exclusively around Kotlin. You can find <a href="https://kotlinlang.org/user-groups/user-group-list.html" id="faq.md-e164da7"   data-external="true" rel="noopener noreferrer" >a list on the web site</a>. In addition, there are community-organized <a href="https://kotlinlang.org/community/events.html" id="faq.md-8db1b400"   data-external="true" rel="noopener noreferrer" >Kotlin Nights</a> events around the world.</p></section><section class="chapter"  ><h2 id="faq.md-is-there-a-kotlin-conference" data-toc="faq#faq.md-is-there-a-kotlin-conference"  >Is there a Kotlin conference?</h2><p id="faq.md-84c2221f" >Yes. The official annual <a href="https://kotlinconf.com/" id="faq.md-3a1f6d37"   data-external="true" rel="noopener noreferrer" >KotlinConf</a> is hosted by JetBrains. It took place in San-Francisco in <a href="https://kotlinconf.com/2017/" id="faq.md-55594fdd"   data-external="true" rel="noopener noreferrer" >2017</a>, Amsterdam in <a href="https://kotlinconf.com/2018/" id="faq.md-edef3176"   data-external="true" rel="noopener noreferrer" >2018</a>, and Copenhagen in <a href="https://kotlinconf.com/2019/" id="faq.md-237b212d"   data-external="true" rel="noopener noreferrer" >2019</a>. Kotlin is also being covered in different conferences worldwide. You can find a list of <a href="https://kotlinlang.org/community/talks.html?time=upcoming" id="faq.md-f1db886e"   data-external="true" rel="noopener noreferrer" >upcoming talks on the web site</a>.</p></section><section class="chapter"  ><h2 id="faq.md-is-kotlin-on-social-media" data-toc="faq#faq.md-is-kotlin-on-social-media"  >Is Kotlin on social media?</h2><p id="faq.md-bf58ebd7" >Yes. The most active Kotlin account is <a href="https://twitter.com/kotlin" id="faq.md-712b7f95"   data-external="true" rel="noopener noreferrer" >on Twitter</a>.</p></section><section class="chapter"  ><h2 id="faq.md-any-other-online-kotlin-resources" data-toc="faq#faq.md-any-other-online-kotlin-resources"  >Any other online Kotlin resources?</h2><p id="faq.md-d37eaee4" >The web site has a bunch of <a href="https://kotlinlang.org/community/" id="faq.md-f31ad2af"   data-external="true" rel="noopener noreferrer" >online resources</a>, including <a href="https://kotlin.link" id="faq.md-70cd9a4e"   data-external="true" rel="noopener noreferrer" >Kotlin Digests</a> by community members, a <a href="http://www.kotlinweekly.net" id="faq.md-ab714e42"   data-external="true" rel="noopener noreferrer" >newsletter</a>, a <a href="https://talkingkotlin.com" id="faq.md-a5de1698"   data-external="true" rel="noopener noreferrer" >podcast</a> and more.</p></section><section class="chapter"  ><h2 id="faq.md-where-can-i-get-an-hd-kotlin-logo" data-toc="faq#faq.md-where-can-i-get-an-hd-kotlin-logo"  >Where can I get an HD Kotlin logo?</h2><p id="faq.md-5a954974" >Logos can be downloaded <a href="https://resources.jetbrains.com/storage/products/kotlin/docs/kotlin_logos.zip" id="faq.md-66bb2ff5"   data-external="true" rel="noopener noreferrer" >here</a>. When using the logos, please follow simple rules in the <code class="code " id="faq.md-97cb1396"  >guidelines.pdf</code> inside the archive and <a href="#guidelines.md" id="faq.md-3f2a0c6c"   >Kotlin brand usage guidelines</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="eap.md"  >Participate in the Kotlin Early Access Preview</h1><p id="eap.md-2b715659" >You can participate in the Kotlin Early Access Preview (EAP) to try out the latest Kotlin features before they are released.</p><p id="eap.md-29a0a6eb" >We ship a few Milestone (<em id="eap.md-37a185e9" class=""  >M</em>) builds before every feature (<em id="eap.md-98035747" class=""  >1.x</em>) and incremental (<em id="eap.md-3a828b20" class=""  >1.x.y</em>) release.</p><p id="eap.md-9d274d2f" >We’ll be very thankful if you find and report bugs to our issue tracker <a href="https://kotl.in/issue" id="eap.md-71e35afa"   data-external="true" rel="noopener noreferrer" >YouTrack</a>. It is very likely that we’ll be able to fix them before the final release, which means you won’t need to wait until the next Kotlin release for your issues to be addressed.</p><p id="eap.md-b1328e59" >By participating in the Early Access Preview and reporting bugs, you contribute to Kotlin and help us make it better for everyone in <a href="https://kotlinlang.org/community/" id="eap.md-d23c6892"   data-external="true" rel="noopener noreferrer" >the growing Kotlin community</a>. We appreciate your help a lot!</p><p id="eap.md-3ddef2f8" >If you have any questions and want to participate in discussions, you are welcome to join the <em id="eap.md-e0bbe4b" class=""  >#eap</em> channel in <a href="https://app.slack.com/client/T09229ZC6/C0KLZSCHF" id="eap.md-38e1b99"   data-external="true" rel="noopener noreferrer" >Kotlin Slack</a>. In this channel, you can also get notifications about new EAP builds.</p><p id="eap.md-ea82979e" ><b id="eap.md-408fd20d" class=""  ><a href="#install-eap-plugin.md" id="eap.md-441fbca1"   >Install the Kotlin EAP Plugin for IDEA or Android Studio</a></b></p><aside data-type="note" class="prompt" data-title="" id="eap.md-187d735" ><p id="eap.md-91a4fe51" >By participating in the EAP, you expressly acknowledge that the EAP version may not be reliable, may not work as intended, and may contain errors.</p><p id="eap.md-270333fb" >Please note that we don’t provide any guarantees of compatibility between EAP and final versions of the same release.</p></aside><p id="eap.md-bb83068d" >If you have already installed the EAP version and want to work on projects that were created previously, check <a href="#configure-build-for-eap.md" id="eap.md-c401a94a"   >our instructions on how to configure your build to support this version</a>.</p><section class="chapter"  ><h2 id="eap.md-build-details" data-toc="eap#eap.md-build-details"  >Build details</h2><div class="table-wrapper" ><table class=" wide" id="eap.md-6a1269ab"  ><thead><tr class="ijRowHead" id="eap.md-898bd4b4" ><th id="eap.md-896728d5"    >Build info</th><th id="eap.md-13a1b617"    >Build highlights</th><th id="eap.md-d20fd6a"    >Recommended kotlinx library versions</th></tr></thead><tbody ><tr class="" id="eap.md-ff3cb388" ><td id="eap.md-677bf20d"    ><b id="eap.md-e8125ee8" class=""  >1.5.0-M2</b><p id="eap.md-4ed4162" >Released: <b id="eap.md-abb5c2e0" class=""  >March 29, 2021</b></p><p id="eap.md-187f0d46" ><a href="https://github.com/JetBrains/kotlin/releases/tag/v1.5.0-M2" id="eap.md-46ade23d"   data-external="true" rel="noopener noreferrer" >Release on GitHub</a></p></td><td id="eap.md-d98e1d9c"    ><ul class="list _ul" id="eap.md-a3e53fde"   ><li class="list__item" id="eap.md-819cf19e" ><p><a href="#fun-interfaces.md" id="eap.md-bd543ab8"   >SAM adapters</a> via <code class="code " id="eap.md-ff2f09"  >invokedynamic</code> by default</p></li><li class="list__item" id="eap.md-3174bb81" ><p>New standard library functions: <code class="code " id="eap.md-19cddfa3"  >String.toBooleanStrict()</code>, <code class="code " id="eap.md-b2d94dfe"  >firstNotNullOf()</code> on collections, <code class="code " id="eap.md-da7f4e9"  >floorDiv()</code> and <code class="code " id="eap.md-3fdf5606"  >mod()</code> math functions</p></li><li class="list__item" id="eap.md-cdd902e4" ><p>New assertion function in <code class="code " id="eap.md-98f530bb"  >kotlin-test</code>: <code class="code " id="eap.md-fa745e7e"  >assertContentEquals()</code></p></li></ul><p id="eap.md-8c25cc8a" >For more details, please refer to <a href="https://blog.jetbrains.com/kotlin/2021/03/kotlin-1-5-0-m2-released/" id="eap.md-df6f98c5"   data-external="true" rel="noopener noreferrer" >this blog post</a> and the <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.5.0-M2" id="eap.md-f32626e9"   data-external="true" rel="noopener noreferrer" >changelog</a>.</p></td><td id="eap.md-5bfc0003"    ><ul class="list _ul" id="eap.md-35033cf4"   ><li class="list__item" id="eap.md-1d33093" ><p><a href="https://github.com/Kotlin/kotlinx.serialization" id="eap.md-517be452"   data-external="true" rel="noopener noreferrer" >kotlinx.serialization</a> version: <a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.1.0" id="eap.md-8a4fc411"   data-external="true" rel="noopener noreferrer" >1.1.0</a></p></li><li class="list__item" id="eap.md-421758d8" ><p><a href="https://github.com/Kotlin/kotlinx.coroutines" id="eap.md-d7b7d153"   data-external="true" rel="noopener noreferrer" >kotlinx.coroutines</a> version: <a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.4.3" id="eap.md-556c59ff"   data-external="true" rel="noopener noreferrer" >1.4.3</a></p></li><li class="list__item" id="eap.md-a9404def" ><p><a href="https://github.com/Kotlin/kotlinx.atomicfu" id="eap.md-1da657e1"   data-external="true" rel="noopener noreferrer" >kotlinx.atomicfu</a> version: <a href="https://github.com/Kotlin/kotlinx.atomicfu/releases/tag/0.15.2" id="eap.md-c6590cf"   data-external="true" rel="noopener noreferrer" >0.15.2</a></p></li><li class="list__item" id="eap.md-30857dda" ><p><a href="https://ktor.io/" id="eap.md-51517cd1"   data-external="true" rel="noopener noreferrer" >ktor</a> version: <a href="https://github.com/ktorio/ktor/releases/tag/1.5.2" id="eap.md-1c311966"   data-external="true" rel="noopener noreferrer" >1.5.2</a></p></li><li class="list__item" id="eap.md-dd17f552" ><p><a href="https://github.com/Kotlin/kotlinx.html" id="eap.md-36ed4953"   data-external="true" rel="noopener noreferrer" >kotlinx.html</a> version: <a href="https://github.com/Kotlin/kotlinx.html/releases/tag/0.7.2" id="eap.md-7e4432a3"   data-external="true" rel="noopener noreferrer" >0.7.2</a></p></li><li class="list__item" id="eap.md-463a0a1f" ><p><a href="https://github.com/Kotlin/kotlinx-nodejs" id="eap.md-6162c8bf"   data-external="true" rel="noopener noreferrer" >kotlinx-nodejs</a> version: <a href="https://bintray.com/kotlin/kotlinx/kotlinx.nodejs/0.0.7" id="eap.md-50ff66c6"   data-external="true" rel="noopener noreferrer" >0.0.7</a></p></li></ul><p id="eap.md-9776d6aa" >The versions of libraries from <code class="code " id="eap.md-41669e94"  >kotlin-wrappers</code> (such as <code class="code " id="eap.md-f5aa09fc"  >kotlin-react</code>) can be found in the <a href="https://github.com/JetBrains/kotlin-wrappers" id="eap.md-fb4e3b0f"   data-external="true" rel="noopener noreferrer" >corresponding repository</a>.</p></td></tr><tr class="" id="eap.md-569d5acf" ><td id="eap.md-2c5478bc"    ><b id="eap.md-402ed78f" class=""  >1.5.0-M1</b><p id="eap.md-389fb5a5" >Released: <b id="eap.md-eb0c55f8" class=""  >March 3, 2021</b></p><p id="eap.md-7fd8e214" ><a href="https://github.com/JetBrains/kotlin/releases/tag/v1.5.0-M1" id="eap.md-9b50496"   data-external="true" rel="noopener noreferrer" >Release on GitHub</a></p></td><td id="eap.md-1d46ddb9"    ><ul class="list _ul" id="eap.md-87192e67"   ><li class="list__item" id="eap.md-9007392c" ><p>Inline value classes, sealed interfaces, and JVM records</p></li><li class="list__item" id="eap.md-31f1ae5d" ><p>JVM IR backend by default</p></li></ul><p id="eap.md-f2a099eb" >For more details, please refer to the <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.5.0-M1" id="eap.md-a62d79d2"   data-external="true" rel="noopener noreferrer" >changelog</a>.</p></td><td id="eap.md-2311cf4a"    ><ul class="list _ul" id="eap.md-c733d428"   ><li class="list__item" id="eap.md-984e90ec" ><p><a href="https://github.com/Kotlin/kotlinx.serialization" id="eap.md-a7dbfb34"   data-external="true" rel="noopener noreferrer" >kotlinx.serialization</a> version: <a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.1.0" id="eap.md-b36abb1f"   data-external="true" rel="noopener noreferrer" >1.1.0</a></p></li><li class="list__item" id="eap.md-aaacf064" ><p><a href="https://github.com/Kotlin/kotlinx.coroutines" id="eap.md-12e729e1"   data-external="true" rel="noopener noreferrer" >kotlinx.coroutines</a> version: <a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.4.2" id="eap.md-329a1d87"   data-external="true" rel="noopener noreferrer" >1.4.2</a></p></li><li class="list__item" id="eap.md-f0a33e15" ><p><a href="https://github.com/Kotlin/kotlinx.atomicfu" id="eap.md-f84095db"   data-external="true" rel="noopener noreferrer" >kotlinx.atomicfu</a> version: <a href="https://github.com/Kotlin/kotlinx.atomicfu/releases/tag/0.15.1" id="eap.md-17059932"   data-external="true" rel="noopener noreferrer" >0.15.1</a></p></li><li class="list__item" id="eap.md-d24e973f" ><p><a href="https://ktor.io/" id="eap.md-96a9bd64"   data-external="true" rel="noopener noreferrer" >ktor</a> version: <a href="https://github.com/ktorio/ktor/releases/tag/1.5.2" id="eap.md-56001138"   data-external="true" rel="noopener noreferrer" >1.5.2</a></p></li><li class="list__item" id="eap.md-c9060246" ><p><a href="https://github.com/Kotlin/kotlinx.html" id="eap.md-691427d4"   data-external="true" rel="noopener noreferrer" >kotlinx.html</a> version: <a href="https://github.com/Kotlin/kotlinx.html/releases/tag/0.7.2" id="eap.md-cde2f6e7"   data-external="true" rel="noopener noreferrer" >0.7.2</a></p></li><li class="list__item" id="eap.md-ae1fb692" ><p><a href="https://github.com/Kotlin/kotlinx-nodejs" id="eap.md-ed67d9ac"   data-external="true" rel="noopener noreferrer" >kotlinx-nodejs</a> version: <a href="https://bintray.com/kotlin/kotlinx/kotlinx.nodejs/0.0.7" id="eap.md-257cadf7"   data-external="true" rel="noopener noreferrer" >0.0.7</a></p></li></ul><p id="eap.md-82e87eb6" >The versions of libraries from <code class="code " id="eap.md-bc3475ea"  >kotlin-wrappers</code> (such as <code class="code " id="eap.md-da2765eb"  >kotlin-react</code>) can be found in the <a href="https://github.com/JetBrains/kotlin-wrappers" id="eap.md-fe848002"   data-external="true" rel="noopener noreferrer" >corresponding repository</a>.</p></td></tr></tbody ></table ></div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="install-eap-plugin.md"  >Install the EAP Plugin for IntelliJ IDEA or Android Studio</h1><p id="install-eap-plugin.md-cd74e95c" >You can follow these instructions to install <a href="#eap.md-build-details" id="install-eap-plugin.md-5121b60f"   >the preview version of the Kotlin Plugin for IntelliJ IDEA or Android Studio</a>.</p><ol class="list _decimal" id="install-eap-plugin.md-3f7e16a9"   ><li class="list__item" id="install-eap-plugin.md-d7cc3a76" ><p id="install-eap-plugin.md-57800031" >Select <b id="install-eap-plugin.md-1c1b983b" class=""  >Tools</b> | <b id="install-eap-plugin.md-bb881360" class=""  >Kotlin</b> | <b id="install-eap-plugin.md-91d2f34" class=""  >Configure Kotlin Plugin Updates</b>.</p><p id="install-eap-plugin.md-9d42a09e" ><figure title="Select Kotlin Plugin Updates"><img alt="Select Kotlin Plugin Updates" title="Select Kotlin Plugin Updates" id="install-eap-plugin.md-1fac98d3" src="images/idea-kotlin-plugin-updates.png"  class="" width="1216" height="1232" /></figure></p></li><li class="list__item" id="install-eap-plugin.md-5d7d2fe1" ><p id="install-eap-plugin.md-9f7ab214" >In the <b id="install-eap-plugin.md-5b0238c" class=""  >Update channel</b> list, select the <b id="install-eap-plugin.md-fd3a8cdd" class=""  >Early Access Preview <em id="install-eap-plugin.md-b4553940" class=""  >X</em></b> channel, where <em id="install-eap-plugin.md-29caa94f" class=""  >X</em> is the latest version of Kotlin.</p><p id="install-eap-plugin.md-1a95d332" ><figure title="Select the EAP update channel"><img alt="Select the EAP update channel" title="Select the EAP update channel" id="install-eap-plugin.md-c96679eb" src="images/idea-kotlin-update-channel.png"  class="" width="1216" height="350" /></figure></p></li><li class="list__item" id="install-eap-plugin.md-a3d050b" ><p id="install-eap-plugin.md-964076bd" >Click <b id="install-eap-plugin.md-c204e5c0" class=""  >Check again</b>. The latest EAP build version appears. <figure title="Install the EAP build"><img alt="Install the EAP build" title="Install the EAP build" id="install-eap-plugin.md-2bc3b93e" src="images/idea-latest-kotlin-eap.png"  class="" width="1216" height="380" /></figure></p></li><li class="list__item" id="install-eap-plugin.md-57a83394" ><p id="install-eap-plugin.md-e9547ef8" >Click <b id="install-eap-plugin.md-39b16bfc" class=""  >Install</b>.</p></li></ol><p id="install-eap-plugin.md-ebc852a" >If you want to work on existing projects that were created before installing the EAP version, you need to <a href="#configure-build-for-eap.md" id="install-eap-plugin.md-67595bd0"   >configure your build for EAP</a>.</p></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="configure-build-for-eap.md"  >Configure your build for EAP</h1><p id="configure-build-for-eap.md-32157e77" >If you create new projects using the EAP version of Kotlin, you don’t need to perform any additional steps. The <a href="#install-eap-plugin.md" id="configure-build-for-eap.md-345bf3f"   >Kotlin Plugin</a> will do everything for you!</p><p id="configure-build-for-eap.md-e2578029" >You only need to configure your build manually for existing projects — projects that were created before installing the EAP version.</p><p id="configure-build-for-eap.md-e8dc7484" >To configure your build to use the EAP version of Kotlin, you need to:</p><ul class="list _ul" id="configure-build-for-eap.md-be7ed1b5"   ><li class="list__item" id="configure-build-for-eap.md-8639d5ea" ><p>Specify the EAP version of Kotlin. Available EAP versions are listed <a href="#eap.md-build-details" id="configure-build-for-eap.md-44e79a06"   >here</a>.</p></li><li class="list__item" id="configure-build-for-eap.md-672f4e47" ><p>Change the versions of dependencies to EAP ones. The EAP version of Kotlin may not work with the libraries of the previously released version.</p></li></ul><p id="configure-build-for-eap.md-aff06a5" >The following procedures describe how to configure your build in Gradle and Maven:</p><ul class="list _ul" id="configure-build-for-eap.md-1ce70aac"   ><li class="list__item" id="configure-build-for-eap.md-33383031" ><a href="#configure-build-for-eap.md-configure-in-gradle" id="configure-build-for-eap.md-c7a8b75a"   >Configure in Gradle</a></li><li class="list__item" id="configure-build-for-eap.md-b09b6d8c" ><a href="#configure-build-for-eap.md-configure-in-maven" id="configure-build-for-eap.md-7e9aa36"   >Configure in Maven</a></li></ul><section class="chapter"  ><h2 id="configure-build-for-eap.md-configure-in-gradle" data-toc="configure-build-for-eap#configure-build-for-eap.md-configure-in-gradle"  >Configure in Gradle</h2><p id="configure-build-for-eap.md-645d6599" >This section describes how you can:</p><ul class="list _ul" id="configure-build-for-eap.md-dfd6a833"   ><li class="list__item" id="configure-build-for-eap.md-fd111b3b" ><a href="#configure-build-for-eap.md-adjust-the-kotlin-version" id="configure-build-for-eap.md-7b7e2906"   >Adjust the Kotlin version</a></li><li class="list__item" id="configure-build-for-eap.md-3e3aabb2" ><a href="#configure-build-for-eap.md-adjust-versions-in-dependencies" id="configure-build-for-eap.md-1c34040"   >Adjust versions in dependencies</a></li></ul><section class="chapter"  ><h3 id="configure-build-for-eap.md-adjust-the-kotlin-version" data-toc="configure-build-for-eap#configure-build-for-eap.md-adjust-the-kotlin-version"  >Adjust the Kotlin version</h3><p id="configure-build-for-eap.md-e002597" >In the <code class="code " id="configure-build-for-eap.md-2c69e251"  >plugins</code> block within <code class="code " id="configure-build-for-eap.md-1029f29"  >build.gradle(.kts)</code>, change the <code class="code " id="configure-build-for-eap.md-fb07280d"  >KOTLIN-EAP-VERSION</code> to the actual EAP version, such as <code class="code " id="configure-build-for-eap.md-11574fc9"  >1.5.0-M2</code>. Available EAP versions are listed <a href="#eap.md-build-details" id="configure-build-for-eap.md-1f7993d8"   >here</a>.</p><p id="configure-build-for-eap.md-4c7f4a3" >Alternatively, you can specify the EAP version in the <code class="code " id="configure-build-for-eap.md-1ccce040"  >pluginManagement</code> block in <code class="code " id="configure-build-for-eap.md-536813b"  >settings.gradle(.kts)</code> – see <a href="https://docs.gradle.org/current/userguide/plugins.html#sec:plugin_version_management" id="configure-build-for-eap.md-f9d8108a"   data-external="true" rel="noopener noreferrer" >Gradle documentation</a> for details.</p><p id="configure-build-for-eap.md-47523636" >Here is an example for the Multiplatform project.</p><div class="tabs" id="configure-build-for-eap.md-5d33a3ce" ><div class="tabs__content" data-gtm="tab" id="configure-build-for-eap.md-568db5db"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="configure-build-for-eap.md-568db5db"   data-title="Groovy"      >plugins {\n   id \'java\'\n   id \'org.jetbrains.kotlin.multiplatform\' version \'KOTLIN-EAP-VERSION\'\n}\n\nrepositories {\n   mavenCentral()\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="configure-build-for-eap.md-3a0f9f8d"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="configure-build-for-eap.md-3a0f9f8d"   data-title="Kotlin"      >plugins {\n   java\n   kotlin(&quot;multiplatform&quot;) version &quot;KOTLIN-EAP-VERSION&quot;\n}\n\nrepositories {\n   mavenCentral()\n}\n</div></div></div></section><section class="chapter"  ><h3 id="configure-build-for-eap.md-adjust-versions-in-dependencies" data-toc="configure-build-for-eap#configure-build-for-eap.md-adjust-versions-in-dependencies"  >Adjust versions in dependencies</h3><p id="configure-build-for-eap.md-bd868d1e" >If you use kotlinx libraries in your project, your versions of the libraries may not be compatible with the EAP version of Kotlin.</p><p id="configure-build-for-eap.md-88a3b4e3" >To resolve this issue, you need to specify the version of a compatible library in dependencies. For a list of compatible libraries, see <a href="#eap.md-build-details" id="configure-build-for-eap.md-3d62b932"   >EAP build details</a>.</p><aside data-type="note" class="prompt" data-title="" id="configure-build-for-eap.md-f63e9bca" ><p id="configure-build-for-eap.md-1cd044f4" >In most cases we create libraries only for the first EAP version of a specific release and these libraries work with the subsequent EAP versions for this release.</p><p id="configure-build-for-eap.md-f51ef206" >If there are incompatible changes in next EAP versions, we release a new version of the library.</p></aside><p id="configure-build-for-eap.md-314efeb4" >Here is an example.</p><p id="configure-build-for-eap.md-cb7807af" >For the <b id="configure-build-for-eap.md-bcb1ce1f" class=""  >kotlinx.coroutines</b> library, add the version number – <code class="code " id="configure-build-for-eap.md-b023197a"  >1.4.2</code> – that is compatible with <code class="code " id="configure-build-for-eap.md-93922b59"  >1.5.0-M2</code>.</p><div class="tabs" id="configure-build-for-eap.md-1bb3192f" ><div class="tabs__content" data-gtm="tab" id="configure-build-for-eap.md-b93ef38a"  data-title="Groovy" ><div class="code-block" data-lang="groovy" id="configure-build-for-eap.md-b93ef38a"   data-title="Groovy"      >dependencies {\n    implementation &quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2&quot;\n}\n</div></div><div class="tabs__content" data-gtm="tab" id="configure-build-for-eap.md-92e25ee7"  data-title="Kotlin" ><div class="code-block" data-lang="kotlin" id="configure-build-for-eap.md-92e25ee7"   data-title="Kotlin"      >dependencies {\n    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2&quot;)\n}\n</div></div></div></section></section><section class="chapter"  ><h2 id="configure-build-for-eap.md-configure-in-maven" data-toc="configure-build-for-eap#configure-build-for-eap.md-configure-in-maven"  >Configure in Maven</h2><p id="configure-build-for-eap.md-bb9c83a2" >In the sample Maven project definition, replace <code class="code " id="configure-build-for-eap.md-4ccb246c"  >KOTLIN-EAP-VERSION</code> with the actual version, such as <code class="code " id="configure-build-for-eap.md-fc59020d"  >1.5.0-M2</code>. Available EAP versions are listed <a href="#eap.md-build-details" id="configure-build-for-eap.md-7e183797"   >here</a>.</p><div class="code-block" data-lang="markup" id="configure-build-for-eap.md-b0a1ce38"         >&lt;project ...&gt;\n    &lt;properties&gt;\n        &lt;kotlin.version&gt;KOTLIN-EAP-VERSION&lt;/kotlin.version&gt;\n    &lt;/properties&gt;\n\n    &lt;repositories&gt;\n        &lt;repository&gt;\n           &lt;id&gt;mavenCentral&lt;/id&gt;\n           &lt;url&gt;https://repo1.maven.org/maven2/&lt;/url&gt;\n        &lt;/repository&gt;\n    &lt;/repositories&gt;\n\n    &lt;pluginRepositories&gt;\n       &lt;pluginRepository&gt;\n          &lt;id&gt;mavenCentral&lt;/id&gt;\n          &lt;url&gt;https://repo1.maven.org/maven2/&lt;/url&gt;\n       &lt;/pluginRepository&gt;\n    &lt;/pluginRepositories&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n            &lt;artifactId&gt;kotlin-stdlib&lt;/artifactId&gt;\n            &lt;version&gt;${kotlin.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;\n                &lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;\n                &lt;version&gt;${kotlin.version}&lt;/version&gt;\n                ...\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/project&gt;\n</div></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="contribute.md"  >Contribution</h1><p id="contribute.md-69d41039" >Kotlin is an open-source project under the <a href="https://github.com/JetBrains/kotlin/blob/master/license/LICENSE.txt" id="contribute.md-21f134b6"   data-external="true" rel="noopener noreferrer" >Apache 2.0 License</a>. The source code, tooling, documentation, and even this web site are maintained on <a href="https://github.com/jetbrains/kotlin" id="contribute.md-cefed890"   data-external="true" rel="noopener noreferrer" >GitHub</a>. While Kotlin is mostly developed by JetBrains, there are hundreds of external contributors to the Kotlin project and we are always on the lookout for more people to help us.</p><section class="chapter"  ><h2 id="contribute.md-participate-in-early-access-preview" data-toc="contribute#contribute.md-participate-in-early-access-preview"  >Participate in Early Access Preview</h2><p id="contribute.md-66abd606" >You can help us improve Kotlin by <a href="#eap.md" id="contribute.md-8dbd373a"   >participating in Kotlin Early Access Preview (EAP)</a> and providing us with your valuable feedback.</p><p id="contribute.md-ed312cc7" >For every release, Kotlin ships a few preview builds where you can try out the latest features before they go to production. You can report any bugs you find to our issue tracker <a href="https://kotl.in/issue" id="contribute.md-b32b7a2"   data-external="true" rel="noopener noreferrer" >YouTrack</a> and we will try to fix them before a final release. This way, you can get bug fixes earlier than the standard Kotlin release cycle.</p></section><section class="chapter"  ><h2 id="contribute.md-contribute-to-the-compiler-standard-library-and-tooling" data-toc="contribute#contribute.md-contribute-to-the-compiler-standard-library-and-tooling"  >Contribute to the compiler, standard library, and tooling</h2><p id="contribute.md-c9d44513" >If you want to contribute to the Kotlin compiler, standard library, or tooling, go to <a href="https://github.com/jetbrains/kotlin" id="contribute.md-b2b0785a"   data-external="true" rel="noopener noreferrer" >GitHub</a>, check out the latest Kotlin version, and follow <a href="https://github.com/JetBrains/kotlin/blob/master/docs/contributing.md" id="contribute.md-ae8a8c52"   data-external="true" rel="noopener noreferrer" >the instructions on how to contribute</a>.</p><p id="contribute.md-c56e926" >You can help us by completing <a href="https://youtrack.jetbrains.com/issues/KT?q=tag:%20%7BUp%20For%20Grabs%7D%20and%20State:%20Open" id="contribute.md-e5327ec9"   data-external="true" rel="noopener noreferrer" >open tasks</a>. Please keep an open line of communication with us because we may have questions and comments on your changes. Otherwise, we won\'t be able to incorporate your contributions.</p></section><section class="chapter"  ><h2 id="contribute.md-contribute-to-other-libraries-and-create-your-own" data-toc="contribute#contribute.md-contribute-to-other-libraries-and-create-your-own"  >Contribute to other libraries and create your own</h2><p id="contribute.md-5171d3b5" >Besides the standard library that provides core capabilities, Kotlin has a number of additional (kotlinx) libraries that extend its functionality. Each kotlinx library is developed in a separate repository, has its own versioning and release cycle.</p><p id="contribute.md-1ded5020" >If you want to contribute to a kotlinx library, follow the contribution process described for each library, such as <a href="https://github.com/Kotlin/kotlinx.coroutines" id="contribute.md-5850306d"   data-external="true" rel="noopener noreferrer" >kotlinx.coroutines</a>, <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/CONTRIBUTING.md" id="contribute.md-b15ac33c"   data-external="true" rel="noopener noreferrer" >kotlinx.serialization</a>, and <a href="https://github.com/ktorio/ktor/blob/master/CONTRIBUTING.md" id="contribute.md-29f5daea"   data-external="true" rel="noopener noreferrer" >ktor</a>.</p><p id="contribute.md-97ad01c5" >If you have a library that could be useful to other Kotlin developers, let us know via <a href="mailto:feedback@kotlinlang.org" id="contribute.md-a6295db9"   data-external="true" >feedback@kotlinlang.org</a>.</p></section><section class="chapter"  ><h2 id="contribute.md-contribute-to-the-documentation" data-toc="contribute#contribute.md-contribute-to-the-documentation"  >Contribute to the documentation</h2><p id="contribute.md-c90dddbe" >If you\'ve found an issue in the Kotlin documentation, feel free to check out <a href="https://github.com/JetBrains/kotlin-web-site/tree/master/pages/docs" id="contribute.md-c3d16e92"   data-external="true" rel="noopener noreferrer" >the documentation source code on GitHub</a> and send us a pull request. Follow <a href="https://docs.google.com/document/d/1mUuxK4xwzs3jtDGoJ5_zwYLaSEl13g_SuhODdFuh2Dc/edit?usp=sharing" id="contribute.md-230e4ff0"   data-external="true" rel="noopener noreferrer" >these guidelines on style and formatting</a>.</p><p id="contribute.md-962ba6c3" >Please keep an open line of communication with us because we may have questions and comments on your changes. Otherwise, we won\'t be able to incorporate your contributions.</p></section><section class="chapter"  ><h2 id="contribute.md-create-tutorials-or-videos" data-toc="contribute#contribute.md-create-tutorials-or-videos"  >Create tutorials or videos</h2><p id="contribute.md-904d042d" >If you\'ve created tutorials or videos for Kotlin, please share them with us via <a href="mailto:feedback@kotlinlang.org" id="contribute.md-96d00e5c"   data-external="true" >feedback@kotlinlang.org</a>.</p></section><section class="chapter"  ><h2 id="contribute.md-translate-documentation-to-other-languages" data-toc="contribute#contribute.md-translate-documentation-to-other-languages"  >Translate documentation to other languages</h2><p id="contribute.md-d83a9e43" >You are welcome to translate the Kotlin documentation into your own language and publish the translation on your website. However, we won\'t be able to host your translation in the main repository and publish it on <a href="https://kotlinlang.org/" id="contribute.md-87ca8ea3"   data-external="true" rel="noopener noreferrer" >kotlinlang.org</a>.</p><p id="contribute.md-487efa73" >This site is the official documentation for the language, and we ensure that all the information here is correct and up to date. Unfortunately, we won\'t be able to review documentation in other languages.</p></section><section class="chapter"  ><h2 id="contribute.md-hold-events-and-presentations" data-toc="contribute#contribute.md-hold-events-and-presentations"  >Hold events and presentations</h2><p id="contribute.md-9abd9f7b" >If you\'ve given or just plan to give presentations or hold events on Kotlin, please fill out <a href="https://surveys.jetbrains.com/s3/Submit-a-Kotlin-Talk" id="contribute.md-99b551f9"   data-external="true" rel="noopener noreferrer" >the form</a>. We\'ll feature them on <a href="http://kotlinlang.org/docs/events.html" id="contribute.md-d6f71311"   data-external="true" rel="noopener noreferrer" >the event list</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="kotlin-evolution.md"  >Kotlin Evolution</h1><section class="chapter"  ><h2 id="kotlin-evolution.md-principles-of-pragmatic-evolution" data-toc="kotlin-evolution#kotlin-evolution.md-principles-of-pragmatic-evolution"  >Principles of Pragmatic Evolution</h2><aside data-type="tip" class="prompt" data-title="" id="kotlin-evolution.md-2f6fc19f" ><p id="kotlin-evolution.md-41c19570" ><em id="kotlin-evolution.md-ec54eb75" class=""  >Language design is cast in stone,</em></p><p id="kotlin-evolution.md-cd908fc3" ><em id="kotlin-evolution.md-ae53a19" class=""  >but this stone is reasonably soft,</em></p><p id="kotlin-evolution.md-44b38fe9" ><em id="kotlin-evolution.md-2b36496" class=""  >and with some effort we can reshape it later.</em></p><p id="kotlin-evolution.md-10a244a1" ><em id="kotlin-evolution.md-af6f128" class=""  >Kotlin Design Team</em></p></aside><p id="kotlin-evolution.md-337662aa" >Kotlin is designed to be a pragmatic tool for programmers. When it comes to language evolution, its pragmatic nature is captured by the following principles:</p><ul class="list _ul" id="kotlin-evolution.md-cd5d11f4"   ><li class="list__item" id="kotlin-evolution.md-52771af7" ><p>Keep the language modern over the years.</p></li><li class="list__item" id="kotlin-evolution.md-de58c64d" ><p>Stay in the constant feedback loop with the users.</p></li><li class="list__item" id="kotlin-evolution.md-1deed863" ><p>Make updating to new versions comfortable for the users.</p></li></ul><p id="kotlin-evolution.md-4684db32" >As this is key to understanding how Kotlin is moving forward, let\'s expand on these principles.</p><p id="kotlin-evolution.md-75e850db" ><b id="kotlin-evolution.md-e5f24104" class=""  >Keeping the Language Modern</b>. We acknowledge that systems accumulate legacy over time. What had once been cutting-edge technology can be hopelessly outdated today. We have to evolve the language to keep it relevant to the needs of the users and up-to-date with their expectations. This includes not only adding new features, but also phasing out old ones that are no longer recommended for production use and have altogether become legacy.</p><p id="kotlin-evolution.md-a5802b99" ><b id="kotlin-evolution.md-623070f0" class=""  >Comfortable Updates</b>. Incompatible changes, such as removing things from a language, may lead to painful migration from one version to the next if carried out without proper care. We will always announce such changes well in advance, mark things as deprecated and provide automated migration tools <em id="kotlin-evolution.md-447f063" class=""  >before the change happens</em>. By the time the language is changed we want most of the code in the world to be already updated and thus have no issues migrating to the new version.</p><p id="kotlin-evolution.md-af7bd19b" ><b id="kotlin-evolution.md-abed06cf" class=""  >Feedback Loop</b>. Going through deprecation cycles requires significant effort, so we want to minimize the number of incompatible changes we\'ll be making in the future. Apart from using our best judgement, we believe that trying things out in real life is the best way to validate a design. Before casting things in stone we want them battle-tested. This is why we use every opportunity to make early versions of our designs available in production versions of the language, but in one of the <em id="kotlin-evolution.md-c5504961" class=""  >pre-stable</em> statuses: <a href="#components-stability.md" id="kotlin-evolution.md-f127d03f"   >Experimental, Alpha, or Beta</a>. Such features are not stable, they can be changed at any time, and the users that opt into using them do so explicitly to indicate that they are ready to deal with the future migration issues. These users provide invaluable feedback that we gather to iterate on the design and make it rock-solid.</p></section><section class="chapter"  ><h2 id="kotlin-evolution.md-incompatible-changes" data-toc="kotlin-evolution#kotlin-evolution.md-incompatible-changes"  >Incompatible changes</h2><p id="kotlin-evolution.md-9dd6a0cc" >If, upon updating from one version to another, some code that used to work doesn\'t work any more, it is an <em id="kotlin-evolution.md-a1756406" class=""  >incompatible change</em> in the language (sometimes referred to as &quot;breaking change&quot;). There can be debates as to what &quot;doesn\'t work any more&quot; means precisely in some cases, but it definitely includes the following:</p><ul class="list _ul" id="kotlin-evolution.md-d1c5c631"   ><li class="list__item" id="kotlin-evolution.md-bfba21b4" ><p>Code that compiled and ran fine is now rejected with an error (at compile or link time). This includes removing language constructs and adding new restrictions.</p></li><li class="list__item" id="kotlin-evolution.md-904b5b61" ><p>Code that executed normally is now throwing an exception.</p></li></ul><p id="kotlin-evolution.md-c0f8845b" >The less obvious cases that belong to the &quot;grey area&quot; include handling corner cases differently, throwing an exception of a different type than before, changing behavior observable only through reflection, changes in undocumented/undefined behavior, renaming binary artifacts, etc. Sometimes such changes are very important and affect migration experience dramatically, sometimes they are insignificant.</p><p id="kotlin-evolution.md-e0d93abd" >Some examples of what definitely isn\'t an incompatible change include</p><ul class="list _ul" id="kotlin-evolution.md-9b7a8185"   ><li class="list__item" id="kotlin-evolution.md-54d5d9c" ><p>Adding new warnings.</p></li><li class="list__item" id="kotlin-evolution.md-ba194bef" ><p>Enabling new language constructs or relaxing limitations for existing ones.</p></li><li class="list__item" id="kotlin-evolution.md-3f87e03e" ><p>Changing private/internal APIs and other implementation details.</p></li></ul><p id="kotlin-evolution.md-23b38d54" >The principles of Keeping the Language Modern and Comfortable Updates suggest that incompatible changes are sometimes necessary, but they should be introduced carefully. Our goal is to make the users aware of upcoming changes well in advance to let them migrate their code comfortably.</p><p id="kotlin-evolution.md-c0dfbf4b" >Ideally, every incompatible change should be announced through a compile-time warning reported in the problematic code (usually referred to as a <em id="kotlin-evolution.md-e655b85d" class=""  >deprecation warning</em>) and accompanied with automated migration aids. So, the ideal migration workflow goes as follows:</p><ul class="list _ul" id="kotlin-evolution.md-2db4dd43"   ><li class="list__item" id="kotlin-evolution.md-55dc757d" >Update to version A (where the change is announced) <ul class="list _ul" id="kotlin-evolution.md-e15762c7"   ><li class="list__item" id="kotlin-evolution.md-1a474f8a" ><p>See warnings about the upcoming change</p></li><li class="list__item" id="kotlin-evolution.md-b776f8e5" ><p>Migrate the code with the help of the tooling</p></li></ul></li><li class="list__item" id="kotlin-evolution.md-855e20cb" >Update to version B (where the change happens) <ul class="list _ul" id="kotlin-evolution.md-cf145bc6"   ><li class="list__item" id="kotlin-evolution.md-7eb9b87c" ><p>See no issues at all</p></li></ul></li></ul><p id="kotlin-evolution.md-b19f41ee" >In practice some changes can\'t be accurately detected at compile time, so no warnings can be reported, but at least the users will be notified through Release notes of version A that a change is coming in version B.</p><section class="chapter"  ><h3 id="kotlin-evolution.md-dealing-with-compiler-bugs" data-toc="kotlin-evolution#kotlin-evolution.md-dealing-with-compiler-bugs"  >Dealing with compiler bugs</h3><p id="kotlin-evolution.md-9c6a6005" >Compilers are complicated software and despite the best effort of their developers they have bugs. The bugs that cause the compiler itself to fail or report spurious errors or generate obviously failing code, though annoying and often embarrassing, are easy to fix, because the fixes do not constitute incompatible changes. Other bugs may cause the compiler to generate incorrect code that does not fail: e.g. by missing some errors in the source or simply generating wrong instructions. Fixes of such bugs are technically incompatible changes (some code used to compile fine, but now it won\'t any more), but we are inclined to fixing them as soon as possible to prevent the bad code patterns from spreading across user code. In our opinion, this serves the principle of Comfortable Updates, because fewer users have a chance of encountering the issue. Of course, this applies only to bugs that are found soon after appearing in a released version.</p></section></section><section class="chapter"  ><h2 id="kotlin-evolution.md-decision-making" data-toc="kotlin-evolution#kotlin-evolution.md-decision-making"  >Decision making</h2><p id="kotlin-evolution.md-f84a3806" ><a href="https://jetbrains.com" id="kotlin-evolution.md-a011a0d9"   data-external="true" rel="noopener noreferrer" >JetBrains</a>, the original creator of Kotlin, is driving its progress with the help of the community and in accord with the <a href="#kotlin-foundation.md" id="kotlin-evolution.md-bd26b19d"   >Kotlin Foundation</a>.</p><p id="kotlin-evolution.md-2fa3b074" >All changes to the Kotlin Programming Language are overseen by the <a href="#kotlin-foundation.md" id="kotlin-evolution.md-d5498ed0"   >Lead Language Designer</a> (currently Roman Elizarov). The Lead Designer has the final say in all matters related to language evolution. Additionally, incompatible changes to fully stable components have to be approved to by the <a href="#kotlin-foundation.md" id="kotlin-evolution.md-dd389eca"   >Language Committee</a> designated under the <a href="#kotlin-foundation.md" id="kotlin-evolution.md-c6bd4691"   >Kotlin Foundation</a> (currently comprised of Jeffrey van Gogh, William R. Cook and Roman Elizarov).</p><p id="kotlin-evolution.md-fa47a779" >The Language Committee makes final decisions on what incompatible changes will be made and what exact measures should be taken to make user updates comfortable. In doing so, it relies on a set of guidelines available <a href="#language-committee-guidelines.md" id="kotlin-evolution.md-3f8aff96"   >here</a>.</p></section><section class="chapter"  ><h2 id="kotlin-evolution.md-feature-releases-and-incremental-releases" data-toc="kotlin-evolution#kotlin-evolution.md-feature-releases-and-incremental-releases"  >Feature releases and incremental releases</h2><p id="kotlin-evolution.md-2546cf34" >Stable releases with versions 1.2, 1.3, etc. are usually considered to be <em id="kotlin-evolution.md-3b9abd6f" class=""  >feature releases</em> bringing major changes in the language. Normally, we publish <em id="kotlin-evolution.md-e7abcc04" class=""  >incremental releases</em>, numbered 1.2.20, 1.2.30, etc, in between feature releases.</p><p id="kotlin-evolution.md-86120412" >Incremental releases bring updates in the tooling (often including features), performance improvements and bug fixes. We try to keep such versions compatible with each other, so changes to the compiler are mostly optimizations and warning additions/removals. Pre-stable features may, of course, be added, removed or changed at any time.</p><p id="kotlin-evolution.md-677bee77" >Feature releases often add new features and may remove or change previously deprecated ones. Feature graduation from pre-stable to stable also happens in feature releases.</p><section class="chapter"  ><h3 id="kotlin-evolution.md-eap-builds" data-toc="kotlin-evolution#kotlin-evolution.md-eap-builds"  >EAP builds</h3><p id="kotlin-evolution.md-2f5908ef" >Before releasing stable versions, we usually publish a number of preview builds dubbed EAP (for &quot;Early Access Preview&quot;) that let us iterate faster and gather feedback from the community. EAPs of feature releases usually produce binaries that will be later rejected by the stable compiler to make sure that possible bugs in the binary format survive no longer than the preview period. Final Release Candidates normally do not bear this limitation.</p></section><section class="chapter"  ><h3 id="kotlin-evolution.md-pre-stable-features" data-toc="kotlin-evolution#kotlin-evolution.md-pre-stable-features"  >Pre-stable features</h3><p id="kotlin-evolution.md-1b2248f8" >According to the Feedback Loop principle described above, we iterate on our designs in the open and release versions of the language where some features have one of the <em id="kotlin-evolution.md-6fe2e403" class=""  >pre-stable</em> statuses and <em id="kotlin-evolution.md-e7a4944c" class=""  >are supposed to change</em>. Such features can be added, changed or removed at any point and without warning. We do our best to ensure that pre-stable features can\'t be used accidentally by an unsuspecting user. Such features usually require some sort of an explicit opt-in either in the code or in the project configuration.</p><p id="kotlin-evolution.md-46278eb3" >Pre-stable features usually graduate to the stable status after some iterations.</p></section><section class="chapter"  ><h3 id="kotlin-evolution.md-status-of-different-components" data-toc="kotlin-evolution#kotlin-evolution.md-status-of-different-components"  >Status of different components</h3><p id="kotlin-evolution.md-e602d2af" >To check the stability status of different components of Kotlin (Kotlin/JVM, JS, Native, various libraries, etc), please consult <a href="#components-stability.md" id="kotlin-evolution.md-920f59cd"   >this link</a>.</p></section></section><section class="chapter"  ><h2 id="kotlin-evolution.md-libraries" data-toc="kotlin-evolution#kotlin-evolution.md-libraries"  >Libraries</h2><p id="kotlin-evolution.md-56885f25" >A language is nothing without its ecosystem, so we pay extra attention to enabling smooth library evolution.</p><p id="kotlin-evolution.md-f425c4a8" >Ideally, a new version of a library can be used as a &quot;drop-in replacement&quot; for an older version. This means that upgrading a binary dependency should not break anything, even if the application is not recompiled (this is possible under dynamic linking).</p><p id="kotlin-evolution.md-ed534c7f" >On the one hand, to achieve this, the compiler has to provide certain ABI stability guarantees under the constraints of separate compilation. This is why every change in the language is examined from the point of view of binary compatibility.</p><p id="kotlin-evolution.md-77cebdb1" >On the other hand, a lot depends on the library authors being careful about which changes are safe to make. Thus it\'s very important that library authors understand how source changes affect compatibility and follow certain best practices to keep both APIs and ABIs of their libraries stable. Here are some assumptions that we make when considering language changes from the library evolution standpoint:</p><ul class="list _ul" id="kotlin-evolution.md-529617db"   ><li class="list__item" id="kotlin-evolution.md-9e43e648" ><p>Library code should always specify return types of public/protected functions and properties explicitly thus never relying on type inference for public API. Subtle changes in type inference may cause return types to change inadvertently, leading to binary compatibility issues.</p></li><li class="list__item" id="kotlin-evolution.md-81e99f52" ><p>Overloaded functions and properties provided by the same library should do essentially the same thing. Changes in type inference may result in more precise static types to be known at call sites causing changes in overload resolution.</p></li></ul><p id="kotlin-evolution.md-59b7457a" >Library authors can use the @Deprecated and <a href="#opt-in-requirements.md" id="kotlin-evolution.md-51ca732c"   >@RequiresOptIn</a> annotations to control the evolution of their API surface. Note that @Deprecated(level=HIDDEN) can be used to preserve binary compatibility even for declarations removed from the API.</p><p id="kotlin-evolution.md-6fe05a02" >Also, by convention, packages named &quot;internal&quot; are not considered public API. All API residing in packages named &quot;experimental&quot; is considered pre-stable and can change at any moment.</p><p id="kotlin-evolution.md-fa57099c" >We evolve the Kotlin Standard Library (kotlin-stdlib) for stable platforms according to the principles stated above. Changes to the contracts for its API undergo the same procedures as changes in the language itself.</p></section><section class="chapter"  ><h2 id="kotlin-evolution.md-compiler-keys" data-toc="kotlin-evolution#kotlin-evolution.md-compiler-keys"  >Compiler keys</h2><p id="kotlin-evolution.md-7e233a90" >Command line keys accepted by the compiler are also a kind of public API, and they are subject to the same considerations. Supported flags (those that don\'t have the &quot;-X&quot; or &quot;-XX&quot; prefix) can be added only in feature releases and should be properly deprecated before removing them. The &quot;-X&quot; and &quot;-XX&quot; flags are experimental and can be added and removed at any time.</p></section><section class="chapter"  ><h2 id="kotlin-evolution.md-compatibility-tools" data-toc="kotlin-evolution#kotlin-evolution.md-compatibility-tools"  >Compatibility tools</h2><p id="kotlin-evolution.md-8d0e2ec8" >As legacy features get removed and bugs fixed, the source language changes, and old code that has not been properly migrated may not compile any more. The normal deprecation cycle allows a comfortable period of time for migration, and even when it\'s over and the change ships in a stable version, there\'s still a way to compile unmigrated code.</p><section class="chapter"  ><h3 id="kotlin-evolution.md-compatibility-flags" data-toc="kotlin-evolution#kotlin-evolution.md-compatibility-flags"  >Compatibility flags</h3><p id="kotlin-evolution.md-1ac809b5" >We provide the -language-version and -api-version flags that make a new version emulate the behaviour of an old one, for compatibility purposes. Normally, at least one previous version is supported. This effectively leaves a time span of two full feature release cycles for migration (which usually amounts to about two years). Using an older kotlin-stdlib or kotlin-reflect with a newer compiler without specifying compatibility flags is not recommended, and the compiler will report a <a href="#compatibility-modes.md" id="kotlin-evolution.md-5a4c9f2d"   >warning</a> when this happens.</p><p id="kotlin-evolution.md-68232f2d" >Actively maintained code bases can benefit from getting bug fixes ASAP, without waiting for a full deprecation cycle to complete. Currently such project can enable the -progressive flag and get such fixes enabled even in incremental releases.</p><p id="kotlin-evolution.md-5deb7c8a" >All flags are available on the command line as well as <a href="#gradle.md-compiler-options" id="kotlin-evolution.md-71bb7ba2"   >Gradle</a> and <a href="#maven.md-specifying-compiler-options" id="kotlin-evolution.md-b854fb85"   >Maven</a>.</p></section><section class="chapter"  ><h3 id="kotlin-evolution.md-evolving-the-binary-format" data-toc="kotlin-evolution#kotlin-evolution.md-evolving-the-binary-format"  >Evolving the binary format</h3><p id="kotlin-evolution.md-ba287b04" >Unlike sources that can be fixed by hand in the worst case, binaries are a lot harder to migrate, and this makes backwards compatibility very important in the case of binaries. Incompatible changes to binaries can make updates very uncomfortable and thus should be introduced with even more care than those in the source language syntax.</p><p id="kotlin-evolution.md-33dba4f1" >For fully stable versions of the compiler the default binary compatibility protocol is the following:</p><ul class="list _ul" id="kotlin-evolution.md-c6919f0b"   ><li class="list__item" id="kotlin-evolution.md-3c97d031" ><p>All binaries are backwards compatible, i.e. a newer compiler can read older binaries (e.g. 1.3 understands 1.0 through 1.2),</p></li><li class="list__item" id="kotlin-evolution.md-f41ce6ad" ><p>Older compilers reject binaries that rely on new features (e.g. a 1.0 compiler rejects binaries that use coroutines).</p></li><li class="list__item" id="kotlin-evolution.md-9b9e913f" ><p>Preferably (but we can\'t guarantee it), the binary format is mostly forwards compatible with the next feature release, but not later ones (in the cases when new features are not used, e.g. 1.3 can understand most binaries from 1.4, but not 1.5).</p></li></ul><p id="kotlin-evolution.md-2fa82ace" >This protocol is designed for comfortable updates as no project can be blocked from updating its dependencies even if it\'s using a slightly outdated compiler.</p><p id="kotlin-evolution.md-d6b1cfb1" >Please note that not all target platforms have reached this level of stability (but Kotlin/JVM has).</p></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="components-stability.md"  >Stability of Kotlin components</h1><p id="components-stability.md-c9c746b4" >The Kotlin language and toolset are divided into many components such as the compilers for the JVM, JS and Native targets, the Standard Library, various accompanying tools and so on. Many of these components were officially released as <b id="components-stability.md-ab661076" class=""  >Stable</b> which means that they are evolved in the backward-compatible way following the <a href="#kotlin-evolution.md" id="components-stability.md-2fd0f26c"   >principles</a> of <em id="components-stability.md-71f8e5d7" class=""  >Comfortable Updates</em> and <em id="components-stability.md-e791e904" class=""  >Keeping the Language Modern</em>. Among such stable components are, for example, the Kotlin compiler for the JVM, the Standard Library, and Coroutines.</p><p id="components-stability.md-a121a51f" >Following the <em id="components-stability.md-701412e3" class=""  >Feedback Loop</em> principle we release many things early for the community to try out, so a number of components are not yet released as <b id="components-stability.md-b59d469f" class=""  >Stable</b>. Some of them are very early stage, some are more mature. We mark them as <b id="components-stability.md-86a4f9ee" class=""  >Experimental</b>, <b id="components-stability.md-604a2b47" class=""  >Alpha</b> or <b id="components-stability.md-5b39cb06" class=""  >Beta</b> depending on how quickly each component is evolving and how much risk the users are taking when adopting it.</p><section class="chapter"  ><h2 id="components-stability.md-stability-levels-explained" data-toc="components-stability#components-stability.md-stability-levels-explained"  >Stability levels explained</h2><p id="components-stability.md-ed06768c" >Here\'s a quick guide to these stability levels and their meaning:</p><p id="components-stability.md-e7aeea6c" ><b id="components-stability.md-43749300" class=""  >Experimental</b> means &quot;try it only in toy projects&quot;:</p><ul class="list _ul" id="components-stability.md-c821b1c8"   ><li class="list__item" id="components-stability.md-329be5e4" ><p>We are just trying out an idea and want some users to play with it and give feedback. If it doesn\'t work out, we may drop it any minute.</p></li></ul><p id="components-stability.md-40b3ba15" ><b id="components-stability.md-a094a640" class=""  >Alpha</b> means &quot;use at your own risk, expect migration issues&quot;:</p><ul class="list _ul" id="components-stability.md-93769f82"   ><li class="list__item" id="components-stability.md-61975fa3" ><p>We decided to productize this idea, but it hasn\'t reached the final shape yet.</p></li></ul><p id="components-stability.md-652a1c2d" ><b id="components-stability.md-2e24df15" class=""  >Beta</b> means &quot;you can use it, we\'ll do our best to minimize migration issues for you&quot;:</p><ul class="list _ul" id="components-stability.md-84bfcf4f"   ><li class="list__item" id="components-stability.md-634b020d" ><p>It’s almost done, user feedback is especially important now.</p></li><li class="list__item" id="components-stability.md-65956f84" ><p>Still, it\'s not 100% finished, so changes are possible (including ones based on your own feedback).</p></li><li class="list__item" id="components-stability.md-6bd3c289" ><p>Watch for deprecation warnings in advance for the best update experience.</p></li></ul><p id="components-stability.md-48383959" >We collectively refer to <em id="components-stability.md-dbf48b1" class=""  >Experimental</em>, <em id="components-stability.md-783cc904" class=""  >Alpha</em> and <em id="components-stability.md-69dc5320" class=""  >Beta</em> as <b id="components-stability.md-3dea99cf" class=""  >pre-stable</b> levels.</p><p id="components-stability.md-42ead722" ><a name="" ></a> <b id="components-stability.md-9aae1dd6" class=""  >Stable</b> means &quot;use it even in most conservative scenarios&quot;:</p><ul class="list _ul" id="components-stability.md-2ffd7184"   ><li class="list__item" id="components-stability.md-6a3288cd" ><p>It’s done. We will be evolving it according to our strict <a href="#language-committee-guidelines.md" id="components-stability.md-aac1040b"   >backward compatibility rules</a>.</p></li></ul><p id="components-stability.md-edb42542" >Please note that stability levels do not say anything about how soon a component will be released as Stable. Similarly, they do not indicate how much a component will be changed before release. They only say how fast a component is changing and how much risk of update issues users are running.</p></section><section class="chapter"  ><h2 id="components-stability.md-stability-of-subcomponents" data-toc="components-stability#components-stability.md-stability-of-subcomponents"  >Stability of subcomponents</h2><p id="components-stability.md-a0bcef30" >A stable component may have an experimental subcomponent, for example:</p><ul class="list _ul" id="components-stability.md-c35fb64b"   ><li class="list__item" id="components-stability.md-7ebbc278" ><p>a stable compiler may have an experimental feature;</p></li><li class="list__item" id="components-stability.md-9253f535" ><p>a stable API may include experimental classes or functions;</p></li><li class="list__item" id="components-stability.md-2d1f298e" ><p>a stable command-line tool may have experimental options.</p></li></ul><p id="components-stability.md-958168a2" >We make sure to document precisely which subcomponents are not stable. We also do our best to warn users where possible and ask to opt in explicitly to avoid accidental usages of features that have not been released as stable.</p></section><section class="chapter"  ><h2 id="components-stability.md-current-stability-of-kotlin-components" data-toc="components-stability#components-stability.md-current-stability-of-kotlin-components"  >Current stability of Kotlin components</h2><div class="table-wrapper" ><table class=" wide" id="components-stability.md-9893acdd"  ><thead><tr class="ijRowHead" id="components-stability.md-b883db86" ><th id="components-stability.md-292d512e"    ><b id="components-stability.md-4bbc21a0" class=""  >Component</b></th><th id="components-stability.md-1ab67303"    ><b id="components-stability.md-63d4d8fa" class=""  >Status</b></th><th id="components-stability.md-86af1629"    ><b id="components-stability.md-82ac3dc0" class=""  >Status since version</b></th><th id="components-stability.md-d9c96bfe"    ><b id="components-stability.md-6b609e9d" class=""  >Comment</b></th></tr></thead><tbody ><tr class="" id="components-stability.md-97e88d28" ><td id="components-stability.md-109a5915"    >Kotlin/JVM</td><td id="components-stability.md-8392be56"    >Stable</td><td id="components-stability.md-439bef5e"    >1.0</td><td id="components-stability.md-3e2b438e"    ></td></tr><tr class="" id="components-stability.md-d2f14ad1" ><td id="components-stability.md-3376d9fb"    >kotlin-stdlib (JVM)</td><td id="components-stability.md-9986966d"    >Stable</td><td id="components-stability.md-ea20039d"    >1.0</td><td id="components-stability.md-8b8ccf03"    ></td></tr><tr class="" id="components-stability.md-333ab54a" ><td id="components-stability.md-7c36c301"    >Coroutines</td><td id="components-stability.md-113efee3"    >Stable</td><td id="components-stability.md-95f7d1f8"    >1.3</td><td id="components-stability.md-5675bea3"    ></td></tr><tr class="" id="components-stability.md-b7d7dc55" ><td id="components-stability.md-ca7babf3"    >kotlin-reflect (JVM)</td><td id="components-stability.md-7fb98dde"    >Beta</td><td id="components-stability.md-a738d337"    >1.0</td><td id="components-stability.md-bdf411f2"    ></td></tr><tr class="" id="components-stability.md-c3e44b58" ><td id="components-stability.md-17a45ea9"    >Kotlin/JS (Classic back-end)</td><td id="components-stability.md-cb2d4f26"    >Stable</td><td id="components-stability.md-c6902c34"    >1.3</td><td id="components-stability.md-a8047c6"    ></td></tr><tr class="" id="components-stability.md-19e37039" ><td id="components-stability.md-510c8ac8"    >Kotlin/JVM (IR-based)</td><td id="components-stability.md-88156106"    >Alpha</td><td id="components-stability.md-8ab7e593"    >1.4</td><td id="components-stability.md-5ab2aabc"    ></td></tr><tr class="" id="components-stability.md-c381594a" ><td id="components-stability.md-e17d30ef"    >Kotlin/JS (IR-based)</td><td id="components-stability.md-2542f565"    >Alpha</td><td id="components-stability.md-fa7e8151"    >1.4</td><td id="components-stability.md-258a5c7d"    ></td></tr><tr class="" id="components-stability.md-46ef9052" ><td id="components-stability.md-a437e2b"    >Kotlin/Native Runtime</td><td id="components-stability.md-69df86ed"    >Beta</td><td id="components-stability.md-a68d41ea"    >1.3</td><td id="components-stability.md-5d43e0f1"    ></td></tr><tr class="" id="components-stability.md-4d0c9250" ><td id="components-stability.md-9cbfed82"    >KLib binaries</td><td id="components-stability.md-86b83d29"    >Alpha</td><td id="components-stability.md-68d97fb2"    >1.4</td><td id="components-stability.md-4e64c42e"    ></td></tr><tr class="" id="components-stability.md-f037535d" ><td id="components-stability.md-80505372"    >KDoc syntax</td><td id="components-stability.md-8044eaa6"    >Stable</td><td id="components-stability.md-6416edc0"    >1.0</td><td id="components-stability.md-c88b82cf"    ></td></tr><tr class="" id="components-stability.md-9d604c74" ><td id="components-stability.md-8f9ac346"    >dokka</td><td id="components-stability.md-b29b3f9c"    >Alpha</td><td id="components-stability.md-828b080f"    >0.1</td><td id="components-stability.md-44255c65"    ></td></tr><tr class="" id="components-stability.md-65f230ff" ><td id="components-stability.md-5bcdcb1f"    >Kotlin Scripts (*.kts)</td><td id="components-stability.md-d760c15e"    >Beta</td><td id="components-stability.md-e4d3db5a"    >1.2</td><td id="components-stability.md-484c67ef"    ></td></tr><tr class="" id="components-stability.md-4346fbe9" ><td id="components-stability.md-824dcd6c"    >Kotlin Scripting APIs and custom hosts</td><td id="components-stability.md-121f9dd7"    >Alpha</td><td id="components-stability.md-e3a757f1"    >1.2</td><td id="components-stability.md-b93db48b"    ></td></tr><tr class="" id="components-stability.md-b6a97bfa" ><td id="components-stability.md-c098c2aa"    >Compiler Plugin API</td><td id="components-stability.md-3fddc7d7"    >Experimental</td><td id="components-stability.md-5722027f"    >1.0</td><td id="components-stability.md-885d24c0"    ></td></tr><tr class="" id="components-stability.md-d8a709f4" ><td id="components-stability.md-565760f5"    >Serialization Compiler Plugin</td><td id="components-stability.md-689a9d58"    >Stable</td><td id="components-stability.md-bc0c0890"    >1.4</td><td id="components-stability.md-70fb0987"    ></td></tr><tr class="" id="components-stability.md-beaf6ee6" ><td id="components-stability.md-ff7ea539"    >Serialization Core Library</td><td id="components-stability.md-d475a0ba"    >Stable</td><td id="components-stability.md-bcedd277"    >1.0.0</td><td id="components-stability.md-18a1578a"    >Versioned separately from the language</td></tr><tr class="" id="components-stability.md-9d08548b" ><td id="components-stability.md-92a300b2"    >Multiplatform Projects</td><td id="components-stability.md-a0bcdbeb"    >Alpha</td><td id="components-stability.md-51f60f4d"    >1.3</td><td id="components-stability.md-751498ea"    ></td></tr><tr class="" id="components-stability.md-54562df0" ><td id="components-stability.md-ae194733"    >expect/actual language feature</td><td id="components-stability.md-11e0daf"    >Beta</td><td id="components-stability.md-350ec75f"    >1.2</td><td id="components-stability.md-c23c9217"    ></td></tr><tr class="" id="components-stability.md-135ed11f" ><td id="components-stability.md-edd785ff"    >Inline classes</td><td id="components-stability.md-d666dfd4"    >Alpha</td><td id="components-stability.md-73d3eb59"    >1.3</td><td id="components-stability.md-6838048e"    ></td></tr><tr class="" id="components-stability.md-b0f8e869" ><td id="components-stability.md-ff6413c4"    >Unsigned arithmetics</td><td id="components-stability.md-94035f19"    >Beta</td><td id="components-stability.md-b0ba8245"    >1.3</td><td id="components-stability.md-7f73ef33"    ></td></tr><tr class="" id="components-stability.md-640c8431" ><td id="components-stability.md-d6092d1"    >Contracts in stdlib</td><td id="components-stability.md-f55f7201"    >Stable</td><td id="components-stability.md-ab25bc43"    >1.3</td><td id="components-stability.md-46f66adb"    ></td></tr><tr class="" id="components-stability.md-6232ef35" ><td id="components-stability.md-47e970ce"    >User-defined contracts</td><td id="components-stability.md-da4ccae4"    >Experimental</td><td id="components-stability.md-e66622ae"    >1.3</td><td id="components-stability.md-80c57198"    ></td></tr><tr class="" id="components-stability.md-6c8a9099" ><td id="components-stability.md-24c5b9c9"    ><b id="components-stability.md-405fc37b" class=""  >All other experimental components, by default</b></td><td id="components-stability.md-b2b9af8f"    >Experimental</td><td id="components-stability.md-e8b23d04"    >N/A</td><td id="components-stability.md-28bc3151"    ></td></tr></tbody ></table ></div><p id="components-stability.md-2f1eff69" ><em id="components-stability.md-f8a44eb" class=""  >The pre-1.4 version of this page is available <a href="#components-stability-pre-1.4.md" id="components-stability.md-2c14f0d3"   >here</a>.</em></p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="components-stability-pre-1.4.md"  >Stability of Kotlin components (pre 1.4)</h1><p id="components-stability-pre-1.4.md-e94964e3" >There can be different modes of stability depending of how quickly a component is evolving: <a name="" ></a></p><ul class="list _ul" id="components-stability-pre-1.4.md-822b329e"   ><li class="list__item" id="components-stability-pre-1.4.md-ebad6cd1" ><p id="components-stability-pre-1.4.md-47141979" ><b id="components-stability-pre-1.4.md-3f8d6a0c" class=""  >Moving fast (MF)</b>: no compatibility should be expected between even <a href="#kotlin-evolution.md-feature-releases-and-incremental-releases" id="components-stability-pre-1.4.md-4e2d5caf"   >incremental releases</a>, any functionality can be added, removed or changed without warning.</p></li><li class="list__item" id="components-stability-pre-1.4.md-99a1dd7" ><p id="components-stability-pre-1.4.md-d6ea836b" ><b id="components-stability-pre-1.4.md-9ff62c81" class=""  >Additions in Incremental Releases (AIR)</b>: things can be added in an incremental release, removals and changes of behavior should be avoided and announced in a previous incremental release if necessary.</p></li><li class="list__item" id="components-stability-pre-1.4.md-57229236" ><p id="components-stability-pre-1.4.md-8b6e177d" ><b id="components-stability-pre-1.4.md-7b728bfc" class=""  >Stable Incremental Releases (SIR)</b>: incremental releases are fully compatible, only optimizations and bug fixes happen. Any changes can be made in a <a href="#kotlin-evolution.md-feature-releases-and-incremental-releases" id="components-stability-pre-1.4.md-4114ae0a"   >feature release</a>.</p></li></ul><p id="components-stability-pre-1.4.md-37d3a3e3" ><a name="" ></a></p><ul class="list _ul" id="components-stability-pre-1.4.md-a5de6f5f"   ><li class="list__item" id="components-stability-pre-1.4.md-f9ae2ea8" ><p><b id="components-stability-pre-1.4.md-26e5ec56" class=""  >Fully Stable (FS)</b>: incremental releases are fully compatible, only optimizations and bug fixes happen. Feature releases are backwards compatible.</p></li></ul><p id="components-stability-pre-1.4.md-730b12d0" >Source and binary compatibility may have different modes for the same component, e.g. the source language can reach full stability before the binary format stabilizes, or vice versa.</p><p id="components-stability-pre-1.4.md-e2ca47aa" >The provisions of the <a href="#kotlin-evolution.md" id="components-stability-pre-1.4.md-fda6bb86"   >Kotlin evolution policy</a> fully apply only to components that have reached Full Stability (FS). From that point on incompatible changes have to be approved by the Language Committee.</p><div class="table-wrapper" ><table class=" wide" id="components-stability-pre-1.4.md-494e0602"  ><thead><tr class="ijRowHead" id="components-stability-pre-1.4.md-de3f9476" ><th id="components-stability-pre-1.4.md-e73dbb21"    ><b id="components-stability-pre-1.4.md-94a51036" class=""  >Component</b></th><th id="components-stability-pre-1.4.md-2c9fe4b5"    ><b id="components-stability-pre-1.4.md-b8d900b6" class=""  >Status Entered at version</b></th><th id="components-stability-pre-1.4.md-600da3b0"    ><b id="components-stability-pre-1.4.md-67b3aaeb" class=""  >Mode for Sources</b></th><th id="components-stability-pre-1.4.md-37a223a8"    ><b id="components-stability-pre-1.4.md-50b7cdf9" class=""  >Mode for Binaries</b></th></tr></thead><tbody ><tr class="" id="components-stability-pre-1.4.md-3f058572" ><td id="components-stability-pre-1.4.md-db821ca2"    >Kotlin/JVM</td><td id="components-stability-pre-1.4.md-f27502"    >1.0</td><td id="components-stability-pre-1.4.md-8772947a"    >FS</td><td id="components-stability-pre-1.4.md-619d1d66"    >FS</td></tr><tr class="" id="components-stability-pre-1.4.md-4fe9bce9" ><td id="components-stability-pre-1.4.md-bb9891f4"    >kotlin-stdlib (JVM)</td><td id="components-stability-pre-1.4.md-5b4a3133"    >1.0</td><td id="components-stability-pre-1.4.md-ebd3e17f"    >FS</td><td id="components-stability-pre-1.4.md-6ef776c1"    >FS</td></tr><tr class="" id="components-stability-pre-1.4.md-6e21fb89" ><td id="components-stability-pre-1.4.md-87c5ac2b"    >KDoc syntax</td><td id="components-stability-pre-1.4.md-bae5d1ba"    >1.0</td><td id="components-stability-pre-1.4.md-bae5db6d"    >FS</td><td id="components-stability-pre-1.4.md-b86dff28"    >N/A</td></tr><tr class="" id="components-stability-pre-1.4.md-58e75d31" ><td id="components-stability-pre-1.4.md-10aa898"    >Coroutines</td><td id="components-stability-pre-1.4.md-be462546"    >1.3</td><td id="components-stability-pre-1.4.md-ccd95541"    >FS</td><td id="components-stability-pre-1.4.md-6b33f11e"    >FS</td></tr><tr class="" id="components-stability-pre-1.4.md-a7e19d01" ><td id="components-stability-pre-1.4.md-2ad171de"    >kotlin-reflect (JVM)</td><td id="components-stability-pre-1.4.md-f3aedf37"    >1.0</td><td id="components-stability-pre-1.4.md-b8ab5a63"    >SIR</td><td id="components-stability-pre-1.4.md-d19301e8"    >SIR</td></tr><tr class="" id="components-stability-pre-1.4.md-af8413be" ><td id="components-stability-pre-1.4.md-21533cb1"    >Kotlin/JS</td><td id="components-stability-pre-1.4.md-d05f6f09"    >1.1</td><td id="components-stability-pre-1.4.md-5fdb2308"    >AIR</td><td id="components-stability-pre-1.4.md-4d264817"    >MF</td></tr><tr class="" id="components-stability-pre-1.4.md-454e7dd5" ><td id="components-stability-pre-1.4.md-7845ace0"    >Kotlin/Native</td><td id="components-stability-pre-1.4.md-273d5b0a"    >1.3</td><td id="components-stability-pre-1.4.md-38606ad7"    >AIR</td><td id="components-stability-pre-1.4.md-3dc47766"    >MF</td></tr><tr class="" id="components-stability-pre-1.4.md-ccd3bf51" ><td id="components-stability-pre-1.4.md-fdc6c694"    >Kotlin Scripts (*.kts)</td><td id="components-stability-pre-1.4.md-84bd1253"    >1.2</td><td id="components-stability-pre-1.4.md-c05e0dce"    >AIR</td><td id="components-stability-pre-1.4.md-17b185c5"    >MF</td></tr><tr class="" id="components-stability-pre-1.4.md-e1155797" ><td id="components-stability-pre-1.4.md-4e402fd9"    >dokka</td><td id="components-stability-pre-1.4.md-313169f5"    >0.1</td><td id="components-stability-pre-1.4.md-68670f67"    >MF</td><td id="components-stability-pre-1.4.md-f49d0db5"    >N/A</td></tr><tr class="" id="components-stability-pre-1.4.md-8db51f18" ><td id="components-stability-pre-1.4.md-9a7e865e"    >Kotlin Scripting APIs</td><td id="components-stability-pre-1.4.md-88793971"    >1.2</td><td id="components-stability-pre-1.4.md-b5ea6ff6"    >MF</td><td id="components-stability-pre-1.4.md-8d7401d6"    >MF</td></tr><tr class="" id="components-stability-pre-1.4.md-c60820c4" ><td id="components-stability-pre-1.4.md-51c1cd78"    >Compiler Plugin API</td><td id="components-stability-pre-1.4.md-985ca6e"    >1.0</td><td id="components-stability-pre-1.4.md-b9bc7454"    >MF</td><td id="components-stability-pre-1.4.md-4c6185be"    >MF</td></tr><tr class="" id="components-stability-pre-1.4.md-2562effb" ><td id="components-stability-pre-1.4.md-4a58386c"    >Serialization</td><td id="components-stability-pre-1.4.md-20ac0fa5"    >1.3</td><td id="components-stability-pre-1.4.md-6cfa43c1"    >MF</td><td id="components-stability-pre-1.4.md-9fc4000b"    >MF</td></tr><tr class="" id="components-stability-pre-1.4.md-1423912e" ><td id="components-stability-pre-1.4.md-44a4d4ed"    >Multiplatform Projects</td><td id="components-stability-pre-1.4.md-985dd71f"    >1.2</td><td id="components-stability-pre-1.4.md-72ef0006"    >MF</td><td id="components-stability-pre-1.4.md-d598b9bb"    >MF</td></tr><tr class="" id="components-stability-pre-1.4.md-34b9a668" ><td id="components-stability-pre-1.4.md-c287d9e3"    >Inline classes</td><td id="components-stability-pre-1.4.md-9c076ba2"    >1.3</td><td id="components-stability-pre-1.4.md-df6fbbda"    >MF</td><td id="components-stability-pre-1.4.md-c319eba"    >MF</td></tr><tr class="" id="components-stability-pre-1.4.md-e76a62b2" ><td id="components-stability-pre-1.4.md-b0369e6d"    >Unsigned arithmetics</td><td id="components-stability-pre-1.4.md-d3a15968"    >1.3</td><td id="components-stability-pre-1.4.md-5895f386"    >MF</td><td id="components-stability-pre-1.4.md-862df3bc"    >MF</td></tr><tr class="" id="components-stability-pre-1.4.md-50eb651" ><td id="components-stability-pre-1.4.md-fed7d29"    ><b id="components-stability-pre-1.4.md-cb4d4a12" class=""  >All other experimental features, by default</b></td><td id="components-stability-pre-1.4.md-7f166bcb"    >N/A</td><td id="components-stability-pre-1.4.md-55e8154c"    ><b id="components-stability-pre-1.4.md-fc627b2" class=""  >MF</b></td><td id="components-stability-pre-1.4.md-44502bdc"    ><b id="components-stability-pre-1.4.md-63ec9b03" class=""  >MF</b></td></tr></tbody ></table ></div></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="compatibility-guide-14.md"  >Compatibility guide for Kotlin 1.4</h1><p id="compatibility-guide-14.md-fca622cf" ><a href="#kotlin-evolution.md" id="compatibility-guide-14.md-cfa91747"   >Keeping the Language Modern and Comfortable Updates</a> are among the fundamental principles in Kotlin Language Design. The former says that constructs which obstruct language evolution should be removed, and the latter says that this removal should be well-communicated beforehand to make code migration as smooth as possible.</p><p id="compatibility-guide-14.md-a7d910e6" >While most of the language changes were already announced through other channels, like update changelogs or compiler warnings, this document summarizes them all, providing a complete reference for migration from Kotlin 1.3 to Kotlin 1.4.</p><section class="chapter"  ><h2 id="compatibility-guide-14.md-basic-terms" data-toc="compatibility-guide-14#compatibility-guide-14.md-basic-terms"  >Basic terms</h2><p id="compatibility-guide-14.md-9d1468d0" >In this document we introduce several kinds of compatibility:</p><ul class="list _ul" id="compatibility-guide-14.md-f8ac9e21"   ><li class="list__item" id="compatibility-guide-14.md-532b1810" ><p><em id="compatibility-guide-14.md-c2f10085" class=""  >source</em>: source-incompatible change stops code that used to compile fine (without errors or warnings) from compiling anymore</p></li><li class="list__item" id="compatibility-guide-14.md-d98842c0" ><p><em id="compatibility-guide-14.md-feb9c078" class=""  >binary</em>: two binary artifacts are said to be binary-compatible if interchanging them doesn\'t lead to loading or linkage errors</p></li><li class="list__item" id="compatibility-guide-14.md-24b7acbf" ><p><em id="compatibility-guide-14.md-32730e4e" class=""  >behavioral</em>: a change is said to be behavioral-incompatible if the same program demonstrates different behavior before and after applying the change</p></li></ul><p id="compatibility-guide-14.md-c3c25b71" >Remember that those definitions are given only for pure Kotlin. Compatibility of Kotlin code from the other languages perspective (for example, from Java) is out of the scope of this document.</p></section><section class="chapter"  ><h2 id="compatibility-guide-14.md-language-and-stdlib" data-toc="compatibility-guide-14#compatibility-guide-14.md-language-and-stdlib"  >Language and stdlib</h2><section class="chapter"  ><h3 id="compatibility-guide-14.md-unexpected-behavior-with-in-infix-operator-and-concurrenthashmap" data-toc="compatibility-guide-14#compatibility-guide-14.md-unexpected-behavior-with-in-infix-operator-and-concurrenthashmap"  >Unexpected behavior with in infix operator and ConcurrentHashMap</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-cbc082e" ><p id="compatibility-guide-14.md-1066e814" ><b id="compatibility-guide-14.md-b143cdaf" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-18053" id="compatibility-guide-14.md-ce5588dc"   data-external="true" rel="noopener noreferrer" >KT-18053</a></p><p id="compatibility-guide-14.md-33568c27" ><b id="compatibility-guide-14.md-dfdc701" class=""  >Component</b>: Core language</p><p id="compatibility-guide-14.md-83f4008f" ><b id="compatibility-guide-14.md-93b6815d" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-78f1062" ><b id="compatibility-guide-14.md-3afc975b" class=""  >Short summary</b>: Kotlin 1.4 will outlaw auto operator <code class="code " id="compatibility-guide-14.md-7d72d871"  >contains</code> coming from the implementors of <code class="code " id="compatibility-guide-14.md-871a4e09"  >java.util.Map</code> written in Java</p><p id="compatibility-guide-14.md-90d60b26" ><b id="compatibility-guide-14.md-ccde7492" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-3e672478"   ><li class="list__item" id="compatibility-guide-14.md-5ca324cb" ><p>&lt; 1.4: introduce warning for problematic operators at call-site</p></li><li class="list__item" id="compatibility-guide-14.md-7fa15720" ><p>&gt;= 1.4: raise this warning to an error, <code class="code " id="compatibility-guide-14.md-637430b6"  >-XXLanguage:-ProhibitConcurrentHashMapContains</code> can be used to temporarily revert to pre-1.4 behavior</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-prohibit-access-to-protected-members-inside-public-inline-members" data-toc="compatibility-guide-14#compatibility-guide-14.md-prohibit-access-to-protected-members-inside-public-inline-members"  >Prohibit access to protected members inside public inline members</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-c791d5d0" ><p id="compatibility-guide-14.md-16553c26" ><b id="compatibility-guide-14.md-d02b0c77" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-21178" id="compatibility-guide-14.md-419eb9f4"   data-external="true" rel="noopener noreferrer" >KT-21178</a></p><p id="compatibility-guide-14.md-260fd0de" ><b id="compatibility-guide-14.md-72019656" class=""  >Component</b>: Core language</p><p id="compatibility-guide-14.md-71c571d" ><b id="compatibility-guide-14.md-c0bd460" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-714b1db8" ><b id="compatibility-guide-14.md-fd6fdab5" class=""  >Short summary</b>: Kotlin 1.4 will prohibit access to protected members from public inline members.</p><p id="compatibility-guide-14.md-80dede68" ><b id="compatibility-guide-14.md-865e2bf4" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-68ea2bd7"   ><li class="list__item" id="compatibility-guide-14.md-ce01e160" ><p>&lt; 1.4: introduce warning at call-site for problematic cases</p></li><li class="list__item" id="compatibility-guide-14.md-84e491e0" ><p>1.4: raise this warning to an error, <code class="code " id="compatibility-guide-14.md-f63602d8"  >-XXLanguage:-ProhibitProtectedCallFromInline</code> can be used to temporarily revert to pre-1.4 behavior</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-contracts-on-calls-with-implicit-receivers" data-toc="compatibility-guide-14#compatibility-guide-14.md-contracts-on-calls-with-implicit-receivers"  >Contracts on calls with implicit receivers</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-ac31d0b" ><p id="compatibility-guide-14.md-9f91d51a" ><b id="compatibility-guide-14.md-f2deef5a" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-28672" id="compatibility-guide-14.md-7f1fffe3"   data-external="true" rel="noopener noreferrer" >KT-28672</a></p><p id="compatibility-guide-14.md-1ec44bae" ><b id="compatibility-guide-14.md-1ef60f70" class=""  >Component</b>: Core Language</p><p id="compatibility-guide-14.md-9ddc1645" ><b id="compatibility-guide-14.md-b6c3e161" class=""  >Incompatible change type</b>: behavioral</p><p id="compatibility-guide-14.md-822801c" ><b id="compatibility-guide-14.md-5da4131c" class=""  >Short summary</b>: smart casts from contracts will be available on calls with implicit receivers in 1.4</p><p id="compatibility-guide-14.md-81d13c43" ><b id="compatibility-guide-14.md-a6051816" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-eb308962"   ><li class="list__item" id="compatibility-guide-14.md-7f9e48ae" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-887f56fb" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-76638e83"  >-XXLanguage:-ContractsOnCallsWithImplicitReceiver</code> can be used to temporarily revert to pre-1.4 behavior</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-inconsistent-behavior-of-floating-point-number-comparisons" data-toc="compatibility-guide-14#compatibility-guide-14.md-inconsistent-behavior-of-floating-point-number-comparisons"  >Inconsistent behavior of floating-point number comparisons</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-1d4b2d34" ><p id="compatibility-guide-14.md-296e6168" ><b id="compatibility-guide-14.md-34180f2d" class=""  >Issues</b>: <a href="https://youtrack.jetbrains.com/issue/KT-22723" id="compatibility-guide-14.md-bb0b2067"   data-external="true" rel="noopener noreferrer" >KT-22723</a></p><p id="compatibility-guide-14.md-cb7fa324" ><b id="compatibility-guide-14.md-b3a8846a" class=""  >Component</b>: Core language</p><p id="compatibility-guide-14.md-3dd65106" ><b id="compatibility-guide-14.md-eee48688" class=""  >Incompatible change type</b>: behavioral</p><p id="compatibility-guide-14.md-2c420f11" ><b id="compatibility-guide-14.md-c291aa0e" class=""  >Short summary</b>: since Kotlin 1.4, Kotlin compiler will use IEEE 754 standard to compare floating-point numbers</p><p id="compatibility-guide-14.md-961f0db5" ><b id="compatibility-guide-14.md-bce2bab2" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-7becaedd"   ><li class="list__item" id="compatibility-guide-14.md-4545c995" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-9ff4023d" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-91f417ff"  >-XXLanguage:-ProperIeee754Comparisons</code> can be used to temporarily revert to pre-1.4 behavior</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-no-smart-cast-on-the-last-expression-in-a-generic-lambda" data-toc="compatibility-guide-14#compatibility-guide-14.md-no-smart-cast-on-the-last-expression-in-a-generic-lambda"  >No smart cast on the last expression in a generic lambda</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-7a17af62" ><p id="compatibility-guide-14.md-a660bd02" ><b id="compatibility-guide-14.md-73cb978c" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-15020" id="compatibility-guide-14.md-f0aebb59"   data-external="true" rel="noopener noreferrer" >KT-15020</a></p><p id="compatibility-guide-14.md-5a64dca5" ><b id="compatibility-guide-14.md-daf6ff46" class=""  >Component</b>: Core Language</p><p id="compatibility-guide-14.md-3b7e2fcd" ><b id="compatibility-guide-14.md-ea43e83d" class=""  >Incompatible change type</b>: behavioral</p><p id="compatibility-guide-14.md-cd59a14c" ><b id="compatibility-guide-14.md-19d9a89c" class=""  >Short summary</b>: smart casts for last expressions in lambdas will be correctly applied since 1.4</p><p id="compatibility-guide-14.md-b32a74f9" ><b id="compatibility-guide-14.md-e6be75c1" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-5095094d"   ><li class="list__item" id="compatibility-guide-14.md-1ef34d36" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-bef77cb4" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-b44c87d7"  >-XXLanguage:-NewInference</code> can be used to temporarily revert to pre-1.4 behavior. Note that this flag will also disable several new language features.</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-do-not-depend-on-the-order-of-lambda-arguments-to-coerce-result-to-unit" data-toc="compatibility-guide-14#compatibility-guide-14.md-do-not-depend-on-the-order-of-lambda-arguments-to-coerce-result-to-unit"  >Do not depend on the order of lambda arguments to coerce result to Unit</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-b056bbe8" ><p id="compatibility-guide-14.md-9b41a219" ><b id="compatibility-guide-14.md-1cb4d556" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-36045" id="compatibility-guide-14.md-5a9518d3"   data-external="true" rel="noopener noreferrer" >KT-36045</a></p><p id="compatibility-guide-14.md-1a2720d6" ><b id="compatibility-guide-14.md-9bca0c44" class=""  >Component</b>: Core language</p><p id="compatibility-guide-14.md-1fc5d047" ><b id="compatibility-guide-14.md-e01e172a" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-50c024c2" ><b id="compatibility-guide-14.md-77257e17" class=""  >Short summary</b>: since Kotlin 1.4, lambda arguments will be resolved independently without implicit coercion to <code class="code " id="compatibility-guide-14.md-4ec69d8f"  >Unit</code></p><p id="compatibility-guide-14.md-84d01b7c" ><b id="compatibility-guide-14.md-2f5950f8" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-42246f3"   ><li class="list__item" id="compatibility-guide-14.md-aa2f0cac" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-a9f0fad3" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-5d712a5c"  >-XXLanguage:-NewInference</code> can be used to temporarily revert to pre-1.4 behavior. Note that this flag will also disable several new language features.</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-wrong-common-supertype-between-raw-and-integer-literal-type-leads-to-unsound-code" data-toc="compatibility-guide-14#compatibility-guide-14.md-wrong-common-supertype-between-raw-and-integer-literal-type-leads-to-unsound-code"  >Wrong common supertype between raw and integer literal type leads to unsound code</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-32c0b91d" ><p id="compatibility-guide-14.md-732006a6" ><b id="compatibility-guide-14.md-f5beb92d" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-35681" id="compatibility-guide-14.md-b7590b9c"   data-external="true" rel="noopener noreferrer" >KT-35681</a></p><p id="compatibility-guide-14.md-75b9c9e7" ><b id="compatibility-guide-14.md-e6c61561" class=""  >Components</b>: Core language</p><p id="compatibility-guide-14.md-3b68a037" ><b id="compatibility-guide-14.md-d267eea9" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-fc0d1011" ><b id="compatibility-guide-14.md-8e8c8c31" class=""  >Short summary</b>: since Kotlin 1.4, common supertype between raw <code class="code " id="compatibility-guide-14.md-57bc7e5b"  >Comparable</code> type and integer literal type will be more specific</p><p id="compatibility-guide-14.md-290bd962" ><b id="compatibility-guide-14.md-6a05c46c" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-550225b3"   ><li class="list__item" id="compatibility-guide-14.md-d3ba51fc" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-da38e192" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-55fca8c0"  >-XXLanguage:-NewInference</code> can be used to temporarily revert to pre-1.4 behavior. Note that this flag will also disable several new language features.</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-type-safety-problem-because-several-equal-type-variables-are-instantiated-with-a-different-types" data-toc="compatibility-guide-14#compatibility-guide-14.md-type-safety-problem-because-several-equal-type-variables-are-instantiated-with-a-different-types"  >Type safety problem because several equal type variables are instantiated with a different types</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-6c092ada" ><p id="compatibility-guide-14.md-88a0e500" ><b id="compatibility-guide-14.md-ac2ffc1c" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-35679" id="compatibility-guide-14.md-3116f8ef"   data-external="true" rel="noopener noreferrer" >KT-35679</a></p><p id="compatibility-guide-14.md-77fa7748" ><b id="compatibility-guide-14.md-492a1c8e" class=""  >Component</b>: Core language</p><p id="compatibility-guide-14.md-cb870b74" ><b id="compatibility-guide-14.md-c5a0ca59" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-3603eede" ><b id="compatibility-guide-14.md-51d60118" class=""  >Short summary</b>: since Kotlin 1.4, Kotlin compiler will prohibit instantiating equal type variables with different types</p><p id="compatibility-guide-14.md-dffee151" ><b id="compatibility-guide-14.md-5a37d82" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-97803896"   ><li class="list__item" id="compatibility-guide-14.md-d28fc29b" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-d04b27a0" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-5b3f25f2"  >-XXLanguage:-NewInference</code> can be used to temporarily revert to pre-1.4 behavior. Note that this flag will also disable several new language features.</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-type-safety-problem-because-of-incorrect-subtyping-for-intersection-types" data-toc="compatibility-guide-14#compatibility-guide-14.md-type-safety-problem-because-of-incorrect-subtyping-for-intersection-types"  >Type safety problem because of incorrect subtyping for intersection types</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-c98ed28f" ><p id="compatibility-guide-14.md-a6e83d25" ><b id="compatibility-guide-14.md-67bb64bb" class=""  >Issues</b>: <a href="https://youtrack.jetbrains.com/issue/KT-22474" id="compatibility-guide-14.md-3580c5c"   data-external="true" rel="noopener noreferrer" >KT-22474</a></p><p id="compatibility-guide-14.md-e510d369" ><b id="compatibility-guide-14.md-6bd5c197" class=""  >Component</b>: Core language</p><p id="compatibility-guide-14.md-f3f38eda" ><b id="compatibility-guide-14.md-9097af02" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-b09fecd2" ><b id="compatibility-guide-14.md-baa126ac" class=""  >Short summary</b>: in Kotlin 1.4, subtyping for intersection types will be refined to work more correctly</p><p id="compatibility-guide-14.md-80d5e2c9" ><b id="compatibility-guide-14.md-8ad2e457" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-695a8361"   ><li class="list__item" id="compatibility-guide-14.md-d4a46639" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-2ca6f1db" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-1bdd03e5"  >-XXLanguage:-NewInference</code> can be used to temporarily revert to pre-1.4 behavior. Note that this flag will also disable several new language features.</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-no-type-mismatch-with-an-empty-when-expression-inside-lambda" data-toc="compatibility-guide-14#compatibility-guide-14.md-no-type-mismatch-with-an-empty-when-expression-inside-lambda"  >No type mismatch with an empty when expression inside lambda</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-79b8efa2" ><p id="compatibility-guide-14.md-6aff4ab6" ><b id="compatibility-guide-14.md-f1901b1e" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-17995" id="compatibility-guide-14.md-e8ea3971"   data-external="true" rel="noopener noreferrer" >KT-17995</a></p><p id="compatibility-guide-14.md-3c4d3c71" ><b id="compatibility-guide-14.md-1caaf0fc" class=""  >Component</b>: Core language</p><p id="compatibility-guide-14.md-7333e3cf" ><b id="compatibility-guide-14.md-521665c" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-d48ff68b" ><b id="compatibility-guide-14.md-7c9d2250" class=""  >Short summary</b>: since Kotlin 1.4, there will be a type mismatch for empty <code class="code " id="compatibility-guide-14.md-d24ae310"  >when</code> expression if it\'s used as the last expression in a lambda</p><p id="compatibility-guide-14.md-6920354b" ><b id="compatibility-guide-14.md-ef1e161" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-ed38ca9f"   ><li class="list__item" id="compatibility-guide-14.md-247734d8" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-823a440a" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-7493a52f"  >-XXLanguage:-NewInference</code> can be used to temporarily revert to pre-1.4 behavior. Note that this flag will also disable several new language features.</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-return-type-any-inferred-for-lambda-with-early-return-with-integer-literal-in-one-of-possible-return-values" data-toc="compatibility-guide-14#compatibility-guide-14.md-return-type-any-inferred-for-lambda-with-early-return-with-integer-literal-in-one-of-possible-return-values"  >Return type Any inferred for lambda with early return with integer literal in one of possible return values</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-de590f0b" ><p id="compatibility-guide-14.md-ee7a82a" ><b id="compatibility-guide-14.md-556687ad" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-20226" id="compatibility-guide-14.md-fb81ca4d"   data-external="true" rel="noopener noreferrer" >KT-20226</a></p><p id="compatibility-guide-14.md-4418c8a6" ><b id="compatibility-guide-14.md-b6431c89" class=""  >Component</b>: Core language</p><p id="compatibility-guide-14.md-db5c4ef8" ><b id="compatibility-guide-14.md-3b6495c5" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-b650677c" ><b id="compatibility-guide-14.md-e7c2aa" class=""  >Short summary</b>: since Kotlin 1.4, integer type returning from a lambda will be more specific for cases when there is early return</p><p id="compatibility-guide-14.md-c7938700" ><b id="compatibility-guide-14.md-e5789b25" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-1fe081d6"   ><li class="list__item" id="compatibility-guide-14.md-4111346b" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-e0f22611" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-969e1795"  >-XXLanguage:-NewInference</code> can be used to temporarily revert to pre-1.4 behavior. Note that this flag will also disable several new language features.</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-proper-capturing-of-star-projections-with-recursive-types" data-toc="compatibility-guide-14#compatibility-guide-14.md-proper-capturing-of-star-projections-with-recursive-types"  >Proper capturing of star projections with recursive types</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-497f93bd" ><p id="compatibility-guide-14.md-2e339804" ><b id="compatibility-guide-14.md-9b2ae0d2" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-33012" id="compatibility-guide-14.md-709a6a2b"   data-external="true" rel="noopener noreferrer" >KT-33012</a></p><p id="compatibility-guide-14.md-b225b2bd" ><b id="compatibility-guide-14.md-7f09427b" class=""  >Component</b>: Core language</p><p id="compatibility-guide-14.md-496f8da7" ><b id="compatibility-guide-14.md-4d883d7d" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-e79939ea" ><b id="compatibility-guide-14.md-bb38d5d" class=""  >Short summary</b>: since Kotlin 1.4, more candidates will become applicable because capturing for recursive types will work more correctly</p><p id="compatibility-guide-14.md-405bda56" ><b id="compatibility-guide-14.md-bb283677" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-84bb228"   ><li class="list__item" id="compatibility-guide-14.md-a826d3aa" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-a42337ec" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-348d3c6f"  >-XXLanguage:-NewInference</code> can be used to temporarily revert to pre-1.4 behavior. Note that this flag will also disable several new language features.</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-common-supertype-calculation-with-non-proper-type-and-flexible-one-leads-to-incorrect-results" data-toc="compatibility-guide-14#compatibility-guide-14.md-common-supertype-calculation-with-non-proper-type-and-flexible-one-leads-to-incorrect-results"  >Common supertype calculation with non-proper type and flexible one leads to incorrect results</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-e4e67aa6" ><p id="compatibility-guide-14.md-9e24ca10" ><b id="compatibility-guide-14.md-ab5720e1" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-37054" id="compatibility-guide-14.md-94bcae76"   data-external="true" rel="noopener noreferrer" >KT-37054</a></p><p id="compatibility-guide-14.md-bfdaf5aa" ><b id="compatibility-guide-14.md-287a65c" class=""  >Component</b>: Core language</p><p id="compatibility-guide-14.md-6c491d7a" ><b id="compatibility-guide-14.md-5d8c19f1" class=""  >Incompatible change type</b>: behavioral</p><p id="compatibility-guide-14.md-54423d93" ><b id="compatibility-guide-14.md-f6d3ca2d" class=""  >Short summary</b>: since Kotlin 1.4, common supertype between flexible types will be more specific protecting from runtime errors</p><p id="compatibility-guide-14.md-1d5e2a6e" ><b id="compatibility-guide-14.md-e08b4667" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-4794a61c"   ><li class="list__item" id="compatibility-guide-14.md-152ce4ea" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-2ddf65cc" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-6562aa9b"  >-XXLanguage:-NewInference</code> can be used to temporarily revert to pre-1.4 behavior. Note that this flag will also disable several new language features.</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-type-safety-problem-because-of-lack-of-captured-conversion-against-nullable-type-argument" data-toc="compatibility-guide-14#compatibility-guide-14.md-type-safety-problem-because-of-lack-of-captured-conversion-against-nullable-type-argument"  >Type safety problem because of lack of captured conversion against nullable type argument</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-a3818ddd" ><p id="compatibility-guide-14.md-d526c0f5" ><b id="compatibility-guide-14.md-f2e261b" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-35487" id="compatibility-guide-14.md-2efb9edd"   data-external="true" rel="noopener noreferrer" >KT-35487</a></p><p id="compatibility-guide-14.md-62b44417" ><b id="compatibility-guide-14.md-2ab93020" class=""  >Component</b>: Core language</p><p id="compatibility-guide-14.md-9bffdfc2" ><b id="compatibility-guide-14.md-7048e09c" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-74db06b0" ><b id="compatibility-guide-14.md-2921cb5f" class=""  >Short summary</b>: since Kotlin 1.4, subtyping between captured and nullable types will be more correct protecting from runtime errors</p><p id="compatibility-guide-14.md-16a87caa" ><b id="compatibility-guide-14.md-5fdb3b40" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-20115c7c"   ><li class="list__item" id="compatibility-guide-14.md-38f579bf" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-eec00a21" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-3fd76a36"  >-XXLanguage:-NewInference</code> can be used to temporarily revert to pre-1.4 behavior. Note that this flag will also disable several new language features.</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-preserve-intersection-type-for-covariant-types-after-unchecked-cast" data-toc="compatibility-guide-14#compatibility-guide-14.md-preserve-intersection-type-for-covariant-types-after-unchecked-cast"  >Preserve intersection type for covariant types after unchecked cast</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-101f4fbd" ><p id="compatibility-guide-14.md-ce4ef297" ><b id="compatibility-guide-14.md-3bdae101" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-37280" id="compatibility-guide-14.md-4b9f884c"   data-external="true" rel="noopener noreferrer" >KT-37280</a></p><p id="compatibility-guide-14.md-3b134ced" ><b id="compatibility-guide-14.md-5126aefc" class=""  >Component</b>: Core language</p><p id="compatibility-guide-14.md-dcd9ac11" ><b id="compatibility-guide-14.md-8ed3a03e" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-8ed4a9ba" ><b id="compatibility-guide-14.md-99b3fe79" class=""  >Short summary</b>: since Kotlin 1.4, uchecked casts of covariant types produce the intersection type for smart casts, not the type of the unchecked cast.</p><p id="compatibility-guide-14.md-d3c8f0aa" ><b id="compatibility-guide-14.md-772328f" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-e8a91851"   ><li class="list__item" id="compatibility-guide-14.md-747e32ff" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-b9dfd9d" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-881ac49d"  >-XXLanguage:-NewInference</code> can be used to temporarily revert to pre-1.4 behavior. Note that this flag will also disable several new language features.</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-type-variable-leaks-from-builder-inference-because-of-using-this-expression" data-toc="compatibility-guide-14#compatibility-guide-14.md-type-variable-leaks-from-builder-inference-because-of-using-this-expression"  >Type variable leaks from builder inference because of using this expression</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-76878adf" ><p id="compatibility-guide-14.md-c0c0181a" ><b id="compatibility-guide-14.md-a1996454" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-32126" id="compatibility-guide-14.md-5501ccef"   data-external="true" rel="noopener noreferrer" >KT-32126</a></p><p id="compatibility-guide-14.md-66b74b54" ><b id="compatibility-guide-14.md-72f2965" class=""  >Component</b>: Core language</p><p id="compatibility-guide-14.md-ddf56036" ><b id="compatibility-guide-14.md-bf4690d1" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-cce24b69" ><b id="compatibility-guide-14.md-b25b3c40" class=""  >Short summary</b>: since Kotlin 1.4, using <code class="code " id="compatibility-guide-14.md-b108d050"  >this</code> inside builder functions like <code class="code " id="compatibility-guide-14.md-3450c723"  >sequence {}</code> is prohibited if there are no other proper constraints</p><p id="compatibility-guide-14.md-40adf0e4" ><b id="compatibility-guide-14.md-23f290bf" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-216da731"   ><li class="list__item" id="compatibility-guide-14.md-8ae5146c" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-d15de21a" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-b6817de5"  >-XXLanguage:-NewInference</code> can be used to temporarily revert to pre-1.4 behavior. Note that this flag will also disable several new language features.</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-wrong-overload-resolution-for-contravariant-types-with-nullable-type-arguments" data-toc="compatibility-guide-14#compatibility-guide-14.md-wrong-overload-resolution-for-contravariant-types-with-nullable-type-arguments"  >Wrong overload resolution for contravariant types with nullable type arguments</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-1743f514" ><p id="compatibility-guide-14.md-5afcb435" ><b id="compatibility-guide-14.md-203896b5" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-31670" id="compatibility-guide-14.md-c1042d11"   data-external="true" rel="noopener noreferrer" >KT-31670</a></p><p id="compatibility-guide-14.md-3698f044" ><b id="compatibility-guide-14.md-15de394" class=""  >Component</b>: Core language</p><p id="compatibility-guide-14.md-709db0b7" ><b id="compatibility-guide-14.md-c1418b8" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-898b9fbc" ><b id="compatibility-guide-14.md-89b7e106" class=""  >Short summary</b>: since Kotlin 1.4, if two overloads of a function that takes contravariant type arguments differ only by the nullability of the type (such as <code class="code " id="compatibility-guide-14.md-2d3a61be"  >In&lt;T&gt;</code> and <code class="code " id="compatibility-guide-14.md-eee24254"  >In&lt;T?&gt;</code> ), the nullable type is considered more specific.</p><p id="compatibility-guide-14.md-f83f0c0d" ><b id="compatibility-guide-14.md-22de9582" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-35c86089"   ><li class="list__item" id="compatibility-guide-14.md-c7ca539b" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-83441a84" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-55ef3aca"  >-XXLanguage:-NewInference</code> can be used to temporarily revert to pre-1.4 behavior. Note that this flag will also disable several new language features.</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-builder-inference-with-non-nested-recursive-constraints" data-toc="compatibility-guide-14#compatibility-guide-14.md-builder-inference-with-non-nested-recursive-constraints"  >Builder inference with non-nested recursive constraints</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-748832ba" ><p id="compatibility-guide-14.md-785a1ef4" ><b id="compatibility-guide-14.md-d323768b" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-34975" id="compatibility-guide-14.md-ebe89303"   data-external="true" rel="noopener noreferrer" >KT-34975</a></p><p id="compatibility-guide-14.md-f66fcedd" ><b id="compatibility-guide-14.md-6a6c3326" class=""  >Component</b>: Core language</p><p id="compatibility-guide-14.md-87522d4f" ><b id="compatibility-guide-14.md-2d68588" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-8912daa8" ><b id="compatibility-guide-14.md-d2ab7652" class=""  >Short summary</b>: since Kotlin 1.4, builder functions such as <code class="code " id="compatibility-guide-14.md-3661dfa3"  >sequence {}</code> with type that depends on a recursive constraint inside the passed lambda cause a compiler error.</p><p id="compatibility-guide-14.md-255a34fa" ><b id="compatibility-guide-14.md-b5da0984" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-ffc0fc23"   ><li class="list__item" id="compatibility-guide-14.md-e2e7ae23" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-7254e29b" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-97735f4c"  >-XXLanguage:-NewInference</code> can be used to temporarily revert to pre-1.4 behavior. Note that this flag will also disable several new language features.</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-eager-type-variable-fixation-leads-to-a-contradictory-constraint-system" data-toc="compatibility-guide-14#compatibility-guide-14.md-eager-type-variable-fixation-leads-to-a-contradictory-constraint-system"  >Eager type variable fixation leads to a contradictory constraint system</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-9bcc8b43" ><p id="compatibility-guide-14.md-c2a3439c" ><b id="compatibility-guide-14.md-c80d32dc" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-25175" id="compatibility-guide-14.md-44bd5b53"   data-external="true" rel="noopener noreferrer" >KT-25175</a></p><p id="compatibility-guide-14.md-9adb8610" ><b id="compatibility-guide-14.md-3a21a1ab" class=""  >Component</b>: Core language</p><p id="compatibility-guide-14.md-b8ba733" ><b id="compatibility-guide-14.md-700b4fab" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-dc192a8f" ><b id="compatibility-guide-14.md-64ad93a3" class=""  >Short summary</b>: since Kotlin 1.4, the type inference in certain cases works less eagerly allowing to find the constraint system that is not contradictory.</p><p id="compatibility-guide-14.md-b3646132" ><b id="compatibility-guide-14.md-f2c168a4" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-2fae5da0"   ><li class="list__item" id="compatibility-guide-14.md-1119ebb4" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-b1f182d5" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-a02b2893"  >-XXLanguage:-NewInference</code> can be used to temporarily revert to pre-1.4 behavior. Note that this flag will also disable several new language features.</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-prohibit-tailrec-modifier-on-open-functions" data-toc="compatibility-guide-14#compatibility-guide-14.md-prohibit-tailrec-modifier-on-open-functions"  >Prohibit tailrec modifier on open functions</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-dff67573" ><p id="compatibility-guide-14.md-d60fee48" ><b id="compatibility-guide-14.md-4762c01b" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-18541" id="compatibility-guide-14.md-3f575bd4"   data-external="true" rel="noopener noreferrer" >KT-18541</a></p><p id="compatibility-guide-14.md-1d11b73a" ><b id="compatibility-guide-14.md-764e8fb0" class=""  >Component</b>: Core language</p><p id="compatibility-guide-14.md-8d3bf5d7" ><b id="compatibility-guide-14.md-8ef0c911" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-c5357c1f" ><b id="compatibility-guide-14.md-d4ed67ff" class=""  >Short summary</b>: since Kotlin 1.4, functions can\'t have <code class="code " id="compatibility-guide-14.md-2c25d9c7"  >open</code> and <code class="code " id="compatibility-guide-14.md-d7bb21c3"  >tailrec</code> modifiers at the same time.</p><p id="compatibility-guide-14.md-35a53178" ><b id="compatibility-guide-14.md-ed808136" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-6f9117e5"   ><li class="list__item" id="compatibility-guide-14.md-b6cff6f8" ><p>&lt; 1.4: report a warning on functions that have <code class="code " id="compatibility-guide-14.md-c73ea839"  >open</code> and <code class="code " id="compatibility-guide-14.md-c22863a1"  >tailrec</code> modifiers together (error in the progressive mode).</p></li><li class="list__item" id="compatibility-guide-14.md-31dd70fd" ><p>&gt;= 1.4: raise this warning to an error.</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-the-instance-field-of-a-companion-object-more-visible-than-the-companion-object-class-itself" data-toc="compatibility-guide-14#compatibility-guide-14.md-the-instance-field-of-a-companion-object-more-visible-than-the-companion-object-class-itself"  >The INSTANCE field of a companion object more visible than the companion object class itself</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-582fb657" ><p id="compatibility-guide-14.md-b93767aa" ><b id="compatibility-guide-14.md-bc6c047f" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-11567" id="compatibility-guide-14.md-1cbbae7f"   data-external="true" rel="noopener noreferrer" >KT-11567</a></p><p id="compatibility-guide-14.md-80f6f361" ><b id="compatibility-guide-14.md-ec4ff759" class=""  >Component</b>: Kotlin/JVM</p><p id="compatibility-guide-14.md-3b707ae8" ><b id="compatibility-guide-14.md-bd9a7f96" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-36c880f9" ><b id="compatibility-guide-14.md-7b9d5451" class=""  >Short summary</b>: since Kotlin 1.4, if a companion object is private, then its field <code class="code " id="compatibility-guide-14.md-c4fc9eeb"  >INSTANCE</code> will be also private</p><p id="compatibility-guide-14.md-925b9378" ><b id="compatibility-guide-14.md-fc011f25" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-f558058b"   ><li class="list__item" id="compatibility-guide-14.md-b4f4f6f6" ><p>&lt; 1.4: the compiler generates object <code class="code " id="compatibility-guide-14.md-a88f84ff"  >INSTANCE</code> with a deprecated flag</p></li><li class="list__item" id="compatibility-guide-14.md-f651c116" ><p>&gt;= 1.4: companion object <code class="code " id="compatibility-guide-14.md-692383a4"  >INSTANCE</code> field has proper visibility</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-outer-finally-block-inserted-before-return-is-not-excluded-from-thecatch-interval-of-the-inner-try-block-without-finally" data-toc="compatibility-guide-14#compatibility-guide-14.md-outer-finally-block-inserted-before-return-is-not-excluded-from-thecatch-interval-of-the-inner-try-block-without-finally"  >Outer finally block inserted before return is not excluded from thecatch interval of the inner try block without finally</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-2ade977a" ><p id="compatibility-guide-14.md-b64c6b79" ><b id="compatibility-guide-14.md-a3a9af65" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-31923" id="compatibility-guide-14.md-5937e7d0"   data-external="true" rel="noopener noreferrer" >KT-31923</a></p><p id="compatibility-guide-14.md-cbdd8cf" ><b id="compatibility-guide-14.md-d09c24bb" class=""  >Component</b>: Kotlin/JVM</p><p id="compatibility-guide-14.md-402a0a9f" ><b id="compatibility-guide-14.md-b403160e" class=""  >Incompatible change type</b>: behavioral</p><p id="compatibility-guide-14.md-1c900754" ><b id="compatibility-guide-14.md-7dbcac7c" class=""  >Short summary</b>: since Kotlin 1.4, the catch interval will be computed properly for nested <code class="code " id="compatibility-guide-14.md-b3707203"  >try/catch</code> blocks</p><p id="compatibility-guide-14.md-a375d69d" ><b id="compatibility-guide-14.md-8fed71da" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-da3e14df"   ><li class="list__item" id="compatibility-guide-14.md-cc1ed289" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-398492ad" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-3a537a42"  >-XXLanguage:-ProperFinally</code> can be used to temporarily revert to pre-1.4 behavior</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-use-the-boxed-version-of-an-inline-class-in-return-type-position-for-covariant-and-generic-specialized-overrides" data-toc="compatibility-guide-14#compatibility-guide-14.md-use-the-boxed-version-of-an-inline-class-in-return-type-position-for-covariant-and-generic-specialized-overrides"  >Use the boxed version of an inline class in return type position for covariant and generic-specialized overrides</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-b4aef451" ><p id="compatibility-guide-14.md-a62a226" ><b id="compatibility-guide-14.md-c5aaa85a" class=""  >Issues</b>: <a href="https://youtrack.jetbrains.com/issue/KT-30419" id="compatibility-guide-14.md-f06c8c64"   data-external="true" rel="noopener noreferrer" >KT-30419</a></p><p id="compatibility-guide-14.md-cd415c95" ><b id="compatibility-guide-14.md-d9e0b4e" class=""  >Component</b>: Kotlin/JVM</p><p id="compatibility-guide-14.md-18ba89d5" ><b id="compatibility-guide-14.md-3fa61f32" class=""  >Incompatible change type</b>: behavioral</p><p id="compatibility-guide-14.md-adfaf1c" ><b id="compatibility-guide-14.md-7a79ccba" class=""  >Short summary</b>: since Kotlin 1.4, functions using covariant and generic-specialized overrides will return boxed values of inline classes</p><p id="compatibility-guide-14.md-ca341be3" ><b id="compatibility-guide-14.md-37c3241c" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-46c9e299"   ><li class="list__item" id="compatibility-guide-14.md-75ced16b" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-7fe078b" ><p>&gt;= 1.4: behavior changed</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-do-not-declare-checked-exceptions-in-jvm-bytecode-when-using-delegation-to-kotlin-interfaces" data-toc="compatibility-guide-14#compatibility-guide-14.md-do-not-declare-checked-exceptions-in-jvm-bytecode-when-using-delegation-to-kotlin-interfaces"  >Do not declare checked exceptions in JVM bytecode when using delegation to Kotlin interfaces</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-c61b88b6" ><p id="compatibility-guide-14.md-f0490dd5" ><b id="compatibility-guide-14.md-7a42c4ed" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-35834" id="compatibility-guide-14.md-ddf5f30b"   data-external="true" rel="noopener noreferrer" >KT-35834</a></p><p id="compatibility-guide-14.md-da1fae98" ><b id="compatibility-guide-14.md-f4904bbf" class=""  >Component</b>: Kotlin/JVM</p><p id="compatibility-guide-14.md-ba6327e0" ><b id="compatibility-guide-14.md-b196d60b" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-32c0fd86" ><b id="compatibility-guide-14.md-18bf4cc6" class=""  >Short summary</b>: Kotlin 1.4 will not generate checked exceptions during interface delegation to Kotlin interfaces</p><p id="compatibility-guide-14.md-93bea8b4" ><b id="compatibility-guide-14.md-d633dd15" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-aacef3cf"   ><li class="list__item" id="compatibility-guide-14.md-ee6c296b" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-f934c4b3" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-43399043"  >-XXLanguage:-DoNotGenerateThrowsForDelegatedKotlinMembers</code> can be used to temporarily revert to pre-1.4 behavior</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-changed-behavior-of-signature-polymorphic-calls-to-methods-with-a-single-vararg-parameter-to-avoid-wrapping-the-argument-into-another-array" data-toc="compatibility-guide-14#compatibility-guide-14.md-changed-behavior-of-signature-polymorphic-calls-to-methods-with-a-single-vararg-parameter-to-avoid-wrapping-the-argument-into-another-array"  >Changed behavior of signature-polymorphic calls to methods with a single vararg parameter to avoid wrapping the argument into another array</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-216a58f9" ><p id="compatibility-guide-14.md-335f4a11" ><b id="compatibility-guide-14.md-97aff544" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-35469" id="compatibility-guide-14.md-2ece3139"   data-external="true" rel="noopener noreferrer" >KT-35469</a></p><p id="compatibility-guide-14.md-99a6769e" ><b id="compatibility-guide-14.md-4c857817" class=""  >Component</b>: Kotlin/JVM</p><p id="compatibility-guide-14.md-c0feed6d" ><b id="compatibility-guide-14.md-67458455" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-eb8a7b90" ><b id="compatibility-guide-14.md-7fc96c28" class=""  >Short summary</b>: Kotlin 1.4 will not wrap the argument into another array on a signature-polymorphic call</p><p id="compatibility-guide-14.md-90c5ab99" ><b id="compatibility-guide-14.md-fc6b7925" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-cf236d43"   ><li class="list__item" id="compatibility-guide-14.md-9c76dd1" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-ffc7639b" ><p>&gt;= 1.4: behavior changed</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-incorrect-generic-signature-in-annotations-when-kclass-is-used-as-a-generic-parameter" data-toc="compatibility-guide-14#compatibility-guide-14.md-incorrect-generic-signature-in-annotations-when-kclass-is-used-as-a-generic-parameter"  >Incorrect generic signature in annotations when KClass is used as a generic parameter</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-11ec6619" ><p id="compatibility-guide-14.md-3a794b6c" ><b id="compatibility-guide-14.md-7062d853" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-35207" id="compatibility-guide-14.md-ae5684f2"   data-external="true" rel="noopener noreferrer" >KT-35207</a></p><p id="compatibility-guide-14.md-7558cb79" ><b id="compatibility-guide-14.md-f34049e5" class=""  >Component</b>: Kotlin/JVM</p><p id="compatibility-guide-14.md-db6e98ba" ><b id="compatibility-guide-14.md-97c8614e" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-e7add198" ><b id="compatibility-guide-14.md-ef4944d3" class=""  >Short summary</b>: Kotlin 1.4 will fix incorrect type mapping in annotations when KClass is used as a generic parameter</p><p id="compatibility-guide-14.md-7616f92d" ><b id="compatibility-guide-14.md-e29e3752" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-832af64a"   ><li class="list__item" id="compatibility-guide-14.md-2942d30a" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-27cc4d88" ><p>&gt;= 1.4: behavior changed</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-forbid-spread-operator-in-signature-polymorphic-calls" data-toc="compatibility-guide-14#compatibility-guide-14.md-forbid-spread-operator-in-signature-polymorphic-calls"  >Forbid spread operator in signature-polymorphic calls</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-e3eda59c" ><p id="compatibility-guide-14.md-85d09d92" ><b id="compatibility-guide-14.md-c8e9aaf" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-35226" id="compatibility-guide-14.md-67535527"   data-external="true" rel="noopener noreferrer" >KT-35226</a></p><p id="compatibility-guide-14.md-bcaeca01" ><b id="compatibility-guide-14.md-466a79a0" class=""  >Component</b>: Kotlin/JVM</p><p id="compatibility-guide-14.md-9104cc1e" ><b id="compatibility-guide-14.md-af996604" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-c536911c" ><b id="compatibility-guide-14.md-a0c3fdf9" class=""  >Short summary</b>: Kotlin 1.4 will prohibit the use of spread operator (*) on signature-polymorphic calls</p><p id="compatibility-guide-14.md-b8b9e70e" ><b id="compatibility-guide-14.md-b137b504" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-1a87fa0a"   ><li class="list__item" id="compatibility-guide-14.md-94d451f7" ><p>&lt; 1.4: report a warning on the use of a spread operator in signature-polymorphic calls</p></li><li class="list__item" id="compatibility-guide-14.md-ec792df3" ><p>&gt;= 1.5: raise this warning to an error, <code class="code " id="compatibility-guide-14.md-ce724f8d"  >-XXLanguage:-ProhibitSpreadOnSignaturePolymorphicCall</code> can be used to temporarily revert to pre-1.4 behavior</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-change-initialization-order-of-default-values-for-tail-recursive-optimized-functions" data-toc="compatibility-guide-14#compatibility-guide-14.md-change-initialization-order-of-default-values-for-tail-recursive-optimized-functions"  >Change initialization order of default values for tail-recursive optimized functions</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-ea8f526e" ><p id="compatibility-guide-14.md-bf927674" ><b id="compatibility-guide-14.md-e1e86ba3" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-31540" id="compatibility-guide-14.md-a7349a5b"   data-external="true" rel="noopener noreferrer" >KT-31540</a></p><p id="compatibility-guide-14.md-ac06aebb" ><b id="compatibility-guide-14.md-41f992c2" class=""  >Component</b>: Kotlin/JVM</p><p id="compatibility-guide-14.md-5e6fef3c" ><b id="compatibility-guide-14.md-70566994" class=""  >Incompatible change type</b>: behavioral</p><p id="compatibility-guide-14.md-e4f322b1" ><b id="compatibility-guide-14.md-56d09cdd" class=""  >Short summary</b>: Since Kotlin 1.4, the initialization order for tail-recursive functions will be the same as for regular functions</p><p id="compatibility-guide-14.md-864be243" ><b id="compatibility-guide-14.md-d2920619" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-e39e7e27"   ><li class="list__item" id="compatibility-guide-14.md-7147d0e3" ><p>&lt; 1.4: report a warning at declaration-site for problematic functions</p></li><li class="list__item" id="compatibility-guide-14.md-15da5d10" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-fb44b41e"  >-XXLanguage:-ProperComputationOrderOfTailrecDefaultParameters</code> can be used to temporarily revert to pre-1.4 behavior</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-do-not-generate-constantvalue-attribute-for-non-const-vals" data-toc="compatibility-guide-14#compatibility-guide-14.md-do-not-generate-constantvalue-attribute-for-non-const-vals"  >Do not generate ConstantValue attribute for non-const vals</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-41e9920b" ><p id="compatibility-guide-14.md-28b1abc3" ><b id="compatibility-guide-14.md-268bdd6a" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-16615" id="compatibility-guide-14.md-18988efc"   data-external="true" rel="noopener noreferrer" >KT-16615</a></p><p id="compatibility-guide-14.md-de0f41a7" ><b id="compatibility-guide-14.md-47c45d35" class=""  >Component</b>: Kotlin/JVM</p><p id="compatibility-guide-14.md-1f12036d" ><b id="compatibility-guide-14.md-754fce45" class=""  >Incompatible change type</b>: behavioral</p><p id="compatibility-guide-14.md-56b0e425" ><b id="compatibility-guide-14.md-1b2be4e9" class=""  >Short summary</b>: Since Kotlin 1.4, the compiler will not generate the <code class="code " id="compatibility-guide-14.md-71c2b8b4"  >ConstantValue</code> attribute for non- <code class="code " id="compatibility-guide-14.md-eb56c819"  >const</code> <code class="code " id="compatibility-guide-14.md-fe88ba55"  >val</code> s</p><p id="compatibility-guide-14.md-13044f03" ><b id="compatibility-guide-14.md-82e425b3" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-20c344b7"   ><li class="list__item" id="compatibility-guide-14.md-9ea77cac" ><p>&lt; 1.4: report a warning through an IntelliJ IDEA inspection</p></li><li class="list__item" id="compatibility-guide-14.md-2856c3c5" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-ccf81964"  >-XXLanguage:-NoConstantValueAttributeForNonConstVals</code> can be used to temporarily revert to pre-1.4 behavior</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-generated-overloads-for-jvmoverloads-on-open-methods-should-be-final" data-toc="compatibility-guide-14#compatibility-guide-14.md-generated-overloads-for-jvmoverloads-on-open-methods-should-be-final"  >Generated overloads for @JvmOverloads on open methods should be final</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-7e3cf756" ><p id="compatibility-guide-14.md-78ee458f" ><b id="compatibility-guide-14.md-622b5e8d" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-33240" id="compatibility-guide-14.md-5163c725"   data-external="true" rel="noopener noreferrer" >KT-33240</a></p><p id="compatibility-guide-14.md-a1343035" ><b id="compatibility-guide-14.md-8fc65bd1" class=""  >Components</b>: Kotlin/JVM</p><p id="compatibility-guide-14.md-a86d0002" ><b id="compatibility-guide-14.md-f23afee0" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-25091bf1" ><b id="compatibility-guide-14.md-c82ca17a" class=""  >Short summary</b>: overloads for functions with <code class="code " id="compatibility-guide-14.md-9cfb8f8a"  >@JvmOverloads</code> will be generated as <code class="code " id="compatibility-guide-14.md-34c4436c"  >final</code></p><p id="compatibility-guide-14.md-7d972415" ><b id="compatibility-guide-14.md-903eaaca" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-f81c5ffe"   ><li class="list__item" id="compatibility-guide-14.md-85bd6332" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-98bd44f7" ><p>&gt;= 1.4: behavior changed, <code class="code " id="compatibility-guide-14.md-1ad3c17d"  >-XXLanguage:-GenerateJvmOverloadsAsFinal</code> can be used to temporarily revert to pre-1.4 behavior</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-lambdas-returning-kotlin-result-now-return-boxed-value-instead-of-unboxed" data-toc="compatibility-guide-14#compatibility-guide-14.md-lambdas-returning-kotlin-result-now-return-boxed-value-instead-of-unboxed"  >Lambdas returning kotlin.Result now return boxed value instead of unboxed</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-5c3faba1" ><p id="compatibility-guide-14.md-aebe7713" ><b id="compatibility-guide-14.md-7cb56cc1" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-39198" id="compatibility-guide-14.md-488c584f"   data-external="true" rel="noopener noreferrer" >KT-39198</a></p><p id="compatibility-guide-14.md-690d5b4d" ><b id="compatibility-guide-14.md-29936b89" class=""  >Component</b>: Kotlin/JVM</p><p id="compatibility-guide-14.md-db9a37cd" ><b id="compatibility-guide-14.md-1466b2c2" class=""  >Incompatible change type</b>: behavioral</p><p id="compatibility-guide-14.md-261a8cee" ><b id="compatibility-guide-14.md-3142780c" class=""  >Short summary</b>: since Kotlin 1.4, lambdas returning values of <code class="code " id="compatibility-guide-14.md-ea9b9e36"  >kotlin.Result</code> type will return boxed value instead of unboxed</p><p id="compatibility-guide-14.md-e58fc51d" ><b id="compatibility-guide-14.md-7dcc8d34" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-4af828b6"   ><li class="list__item" id="compatibility-guide-14.md-da5866ab" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-de1390b8" ><p>&gt;= 1.4: behavior changed</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-unify-exceptions-from-null-checks" data-toc="compatibility-guide-14#compatibility-guide-14.md-unify-exceptions-from-null-checks"  >Unify exceptions from null checks</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-38053884" ><p id="compatibility-guide-14.md-d977de29" ><b id="compatibility-guide-14.md-4edb7286" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-22275" id="compatibility-guide-14.md-fe808077"   data-external="true" rel="noopener noreferrer" >KT-22275</a></p><p id="compatibility-guide-14.md-ad7ff72f" ><b id="compatibility-guide-14.md-9e39e7b0" class=""  >Component</b>: Kotlin/JVM</p><p id="compatibility-guide-14.md-b619371d" ><b id="compatibility-guide-14.md-65c58993" class=""  >Incompatible change type</b>: behavior</p><p id="compatibility-guide-14.md-b785c8e5" ><b id="compatibility-guide-14.md-b24e9ba4" class=""  >Short summary</b>: Starting from Kotlin 1.4, all runtime null checks will throw a <code class="code " id="compatibility-guide-14.md-7cbaf856"  >java.lang.NullPointerException</code></p><p id="compatibility-guide-14.md-bacb14a0" ><b id="compatibility-guide-14.md-4f12136b" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-b01210"   ><li class="list__item" id="compatibility-guide-14.md-d7ca9880" ><p>&lt; 1.4: runtime null checks throw different exceptions, such as <code class="code " id="compatibility-guide-14.md-d6c2f2ca"  >KotlinNullPointerException</code>, <code class="code " id="compatibility-guide-14.md-f9e9288c"  >IllegalStateException</code>, <code class="code " id="compatibility-guide-14.md-a226597"  >IllegalArgumentException</code>, and <code class="code " id="compatibility-guide-14.md-2fab1161"  >TypeCastException</code></p></li><li class="list__item" id="compatibility-guide-14.md-842be362" ><p>&gt;= 1.4: all runtime null checks throw a <code class="code " id="compatibility-guide-14.md-d6bcb74c"  >java.lang.NullPointerException</code>. <code class="code " id="compatibility-guide-14.md-425c9e95"  >-Xno-unified-null-checks</code> can be used to temporarily revert to pre-1.4 behavior</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-comparing-floating-point-values-in-array-list-operations-contains-indexof-lastindexof-ieee-754-or-total-order" data-toc="compatibility-guide-14#compatibility-guide-14.md-comparing-floating-point-values-in-array-list-operations-contains-indexof-lastindexof-ieee-754-or-total-order"  >Comparing floating-point values in array/list operations contains, indexOf, lastIndexOf: IEEE 754 or total order</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-8af6ea8b" ><p id="compatibility-guide-14.md-cb496d99" ><b id="compatibility-guide-14.md-92899c63" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-28753" id="compatibility-guide-14.md-9532ac85"   data-external="true" rel="noopener noreferrer" >KT-28753</a></p><p id="compatibility-guide-14.md-979f40f3" ><b id="compatibility-guide-14.md-999128a" class=""  >Component</b>: kotlin-stdlib (JVM)</p><p id="compatibility-guide-14.md-441dc5e9" ><b id="compatibility-guide-14.md-2b1b11a2" class=""  >Incompatible change type</b>: behavioral</p><p id="compatibility-guide-14.md-e33b33c3" ><b id="compatibility-guide-14.md-72da1b7d" class=""  >Short summary</b>: the <code class="code " id="compatibility-guide-14.md-7e6c1e4d"  >List</code> implementation returned from <code class="code " id="compatibility-guide-14.md-ccf124d0"  >Double/FloatArray.asList()</code> will implement <code class="code " id="compatibility-guide-14.md-5220ca6e"  >contains</code>, <code class="code " id="compatibility-guide-14.md-97cd8869"  >indexOf</code>, and <code class="code " id="compatibility-guide-14.md-7a3fb28b"  >lastIndexOf</code>, so that they use total order equality</p><p id="compatibility-guide-14.md-e97f0dbb" ><b id="compatibility-guide-14.md-1cdda805" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-ed27e2ba"   ><li class="list__item" id="compatibility-guide-14.md-133e879d" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-3a68df40" ><p>&gt;= 1.4: behavior changed</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-gradually-change-the-return-type-of-collection-min-and-max-functions-to-non-nullable" data-toc="compatibility-guide-14#compatibility-guide-14.md-gradually-change-the-return-type-of-collection-min-and-max-functions-to-non-nullable"  >Gradually change the return type of collection min and max functions to non-nullable</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-4e371fc9" ><p id="compatibility-guide-14.md-d486f855" ><b id="compatibility-guide-14.md-3e3fd332" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-38854" id="compatibility-guide-14.md-fbc4740c"   data-external="true" rel="noopener noreferrer" >KT-38854</a></p><p id="compatibility-guide-14.md-7e3e7f00" ><b id="compatibility-guide-14.md-65d9c2d8" class=""  >Component</b>: kotlin-stdlib (JVM)</p><p id="compatibility-guide-14.md-4f008b9d" ><b id="compatibility-guide-14.md-203ff182" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-27fa00c" ><b id="compatibility-guide-14.md-b9c8ff26" class=""  >Short summary</b>: return type of collection <code class="code " id="compatibility-guide-14.md-c47c8310"  >min</code> and <code class="code " id="compatibility-guide-14.md-8d7314e2"  >max</code> functions will be changed to non-nullable in 1.6</p><p id="compatibility-guide-14.md-fd1d1ab8" ><b id="compatibility-guide-14.md-11933922" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-c4e18209"   ><li class="list__item" id="compatibility-guide-14.md-4715aea6" ><p>1.4: introduce <code class="code " id="compatibility-guide-14.md-2e0ea5d5"  >...OrNull</code> functions as synonyms and deprecate the affected API (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-46b74fb9" ><p>1.5.x: raise the deprecation level of the affected API to error</p></li><li class="list__item" id="compatibility-guide-14.md-775150b" ><p>&gt;=1.6: reintroduce the affected API but with non-nullable return type</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-deprecate-appendln-in-favor-of-appendline" data-toc="compatibility-guide-14#compatibility-guide-14.md-deprecate-appendln-in-favor-of-appendline"  >Deprecate appendln in favor of appendLine</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-3697f02f" ><p id="compatibility-guide-14.md-8feb7e05" ><b id="compatibility-guide-14.md-8f4b526" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-38754" id="compatibility-guide-14.md-ab1d0191"   data-external="true" rel="noopener noreferrer" >KT-38754</a></p><p id="compatibility-guide-14.md-853f6fa1" ><b id="compatibility-guide-14.md-15f3e5d6" class=""  >Component</b>: kotlin-stdlib (JVM)</p><p id="compatibility-guide-14.md-bbd8ef71" ><b id="compatibility-guide-14.md-9ec5963f" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-3b6060a" ><b id="compatibility-guide-14.md-20aa1312" class=""  >Short summary</b>: <code class="code " id="compatibility-guide-14.md-22861d37"  >StringBuilder.appendln()</code> will be deprecated in favor of <code class="code " id="compatibility-guide-14.md-7ce04a5a"  >StringBuilder.appendLine()</code></p><p id="compatibility-guide-14.md-f925ebc9" ><b id="compatibility-guide-14.md-d27c1d54" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-60d682b1"   ><li class="list__item" id="compatibility-guide-14.md-6fe8607a" ><p>1.4: introduce <code class="code " id="compatibility-guide-14.md-afd0b72d"  >appendLine</code> function as a replacement for <code class="code " id="compatibility-guide-14.md-8c05c1de"  >appendln</code> and deprecate <code class="code " id="compatibility-guide-14.md-58bd62ee"  >appendln</code></p></li><li class="list__item" id="compatibility-guide-14.md-3a82807e" ><p>&gt;=1.5: raise the deprecation level to error</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-deprecate-conversions-of-floating-point-types-to-short-and-byte" data-toc="compatibility-guide-14#compatibility-guide-14.md-deprecate-conversions-of-floating-point-types-to-short-and-byte"  >Deprecate conversions of floating-point types to Short and Byte</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-d3c5215c" ><p id="compatibility-guide-14.md-c88a10aa" ><b id="compatibility-guide-14.md-c205a963" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-30360" id="compatibility-guide-14.md-5da77cbf"   data-external="true" rel="noopener noreferrer" >KT-30360</a></p><p id="compatibility-guide-14.md-431b575" ><b id="compatibility-guide-14.md-f4b256be" class=""  >Component</b>: kotlin-stdlib (JVM)</p><p id="compatibility-guide-14.md-fd9327a5" ><b id="compatibility-guide-14.md-9199b687" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-ff10cdf9" ><b id="compatibility-guide-14.md-dca0d9c4" class=""  >Short summary</b>: since Kotlin 1.4, conversions of floating-point types to <code class="code " id="compatibility-guide-14.md-c536b74"  >Short</code> and <code class="code " id="compatibility-guide-14.md-e67d5c4"  >Byte</code> will be deprecated</p><p id="compatibility-guide-14.md-63cc8466" ><b id="compatibility-guide-14.md-f83b38d9" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-f95770fb"   ><li class="list__item" id="compatibility-guide-14.md-1db6c7f8" ><p>1.4: deprecate <code class="code " id="compatibility-guide-14.md-e23f7724"  >Double.toShort()/toByte()</code> and <code class="code " id="compatibility-guide-14.md-467986a4"  >Float.toShort()/toByte()</code> and propose replacement</p></li><li class="list__item" id="compatibility-guide-14.md-ae5fb555" ><p>&gt;=1.5: raise the deprecation level to error</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-fail-fast-in-regex-findall-on-an-invalid-startindex" data-toc="compatibility-guide-14#compatibility-guide-14.md-fail-fast-in-regex-findall-on-an-invalid-startindex"  >Fail fast in Regex.findAll on an invalid startIndex</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-fcb83a73" ><p id="compatibility-guide-14.md-a26189a5" ><b id="compatibility-guide-14.md-ffc470ab" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-28356" id="compatibility-guide-14.md-96b86d53"   data-external="true" rel="noopener noreferrer" >KT-28356</a></p><p id="compatibility-guide-14.md-81d203c4" ><b id="compatibility-guide-14.md-43e02c7" class=""  >Component</b>: kotlin-stdlib</p><p id="compatibility-guide-14.md-2d3e07e1" ><b id="compatibility-guide-14.md-addbe47c" class=""  >Incompatible change type</b>: behavioral</p><p id="compatibility-guide-14.md-48ce306c" ><b id="compatibility-guide-14.md-69c2ad7c" class=""  >Short summary</b>: since Kotlin 1.4, <code class="code " id="compatibility-guide-14.md-fc75fe82"  >findAll</code> will be improved to check that <code class="code " id="compatibility-guide-14.md-ea2d4854"  >startIndex</code> is in the range of the valid position indices of the input char sequence at the moment of entering <code class="code " id="compatibility-guide-14.md-51b2a6d5"  >findAll</code>, and throw <code class="code " id="compatibility-guide-14.md-52cddfac"  >IndexOutOfBoundsException</code> if it\'s not</p><p id="compatibility-guide-14.md-5dc36f23" ><b id="compatibility-guide-14.md-307e63e1" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-2cda9682"   ><li class="list__item" id="compatibility-guide-14.md-99db8b59" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-5c8b8104" ><p>&gt;= 1.4: behavior changed</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-remove-deprecated-kotlin-coroutines-experimental" data-toc="compatibility-guide-14#compatibility-guide-14.md-remove-deprecated-kotlin-coroutines-experimental"  >Remove deprecated kotlin.coroutines.experimental</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-b7370f6a" ><p id="compatibility-guide-14.md-a1db2686" ><b id="compatibility-guide-14.md-630fbe04" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-36083" id="compatibility-guide-14.md-7d5d7da8"   data-external="true" rel="noopener noreferrer" >KT-36083</a></p><p id="compatibility-guide-14.md-901d5881" ><b id="compatibility-guide-14.md-8960173a" class=""  >Component</b>: kotlin-stdlib</p><p id="compatibility-guide-14.md-425f324f" ><b id="compatibility-guide-14.md-eb422ba7" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-d229a644" ><b id="compatibility-guide-14.md-9bc44b2a" class=""  >Short summary</b>: since Kotlin 1.4, the deprecated <code class="code " id="compatibility-guide-14.md-167cd7e3"  >kotlin.coroutines.experimental</code> API is removed from stdlib</p><p id="compatibility-guide-14.md-152582c2" ><b id="compatibility-guide-14.md-f1c25ddf" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-b9f56b4f"   ><li class="list__item" id="compatibility-guide-14.md-f3d7593" ><p>&lt; 1.4: <code class="code " id="compatibility-guide-14.md-9b1f0d38"  >kotlin.coroutines.experimental</code> is deprecated with the <code class="code " id="compatibility-guide-14.md-616ecb54"  >ERROR</code> level</p></li><li class="list__item" id="compatibility-guide-14.md-a3711a83" ><p>&gt;= 1.4: <code class="code " id="compatibility-guide-14.md-ad90c9c1"  >kotlin.coroutines.experimental</code> is removed from stdlib. On the JVM, a separate compatibility artifact is provided (see details in the issue).</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-remove-deprecated-mod-operator" data-toc="compatibility-guide-14#compatibility-guide-14.md-remove-deprecated-mod-operator"  >Remove deprecated mod operator</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-b2ce8a57" ><p id="compatibility-guide-14.md-bfc9527e" ><b id="compatibility-guide-14.md-c61d6c31" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-26654" id="compatibility-guide-14.md-4341cd00"   data-external="true" rel="noopener noreferrer" >KT-26654</a></p><p id="compatibility-guide-14.md-ef47a655" ><b id="compatibility-guide-14.md-d752c52" class=""  >Component</b>: kotlin-stdlib</p><p id="compatibility-guide-14.md-72a5924b" ><b id="compatibility-guide-14.md-77a5fafa" class=""  >Incompatible change type</b>: source</p><p id="compatibility-guide-14.md-2560db60" ><b id="compatibility-guide-14.md-975c3468" class=""  >Short summary</b>: since Kotlin 1.4, <code class="code " id="compatibility-guide-14.md-d1ef681"  >mod</code> operator on numeric types is removed from stdlib</p><p id="compatibility-guide-14.md-a67dc594" ><b id="compatibility-guide-14.md-d5e6cff3" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-22bd8ab9"   ><li class="list__item" id="compatibility-guide-14.md-d4a32af" ><p>&lt; 1.4: <code class="code " id="compatibility-guide-14.md-fdc6964f"  >mod</code> is deprecated with the <code class="code " id="compatibility-guide-14.md-8d76c66a"  >ERROR</code> level</p></li><li class="list__item" id="compatibility-guide-14.md-31de0daa" ><p>&gt;= 1.4: <code class="code " id="compatibility-guide-14.md-bf069c96"  >mod</code> is removed from stdlib</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-hide-throwable-addsuppressed-member-and-prefer-extension-instead" data-toc="compatibility-guide-14#compatibility-guide-14.md-hide-throwable-addsuppressed-member-and-prefer-extension-instead"  >Hide Throwable.addSuppressed member and prefer extension instead</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-206101f1" ><p id="compatibility-guide-14.md-4ad7f1d8" ><b id="compatibility-guide-14.md-e5b7f049" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-38777" id="compatibility-guide-14.md-99c658ce"   data-external="true" rel="noopener noreferrer" >KT-38777</a></p><p id="compatibility-guide-14.md-bc741263" ><b id="compatibility-guide-14.md-91d4c418" class=""  >Component</b>: kotlin-stdlib</p><p id="compatibility-guide-14.md-9316f0d5" ><b id="compatibility-guide-14.md-d03c28fb" class=""  >Incompatible change type</b>: behavioral</p><p id="compatibility-guide-14.md-fa0cadd" ><b id="compatibility-guide-14.md-7128921" class=""  >Short summary</b>: <code class="code " id="compatibility-guide-14.md-dc62f383"  >Throwable.addSuppressed()</code> extension function is now preferred over the <code class="code " id="compatibility-guide-14.md-f75b693e"  >Throwable.addSuppressed()</code> member function</p><p id="compatibility-guide-14.md-3ea74a3f" ><b id="compatibility-guide-14.md-8a76e39e" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-4d33057f"   ><li class="list__item" id="compatibility-guide-14.md-9855f0ee" ><p>&lt; 1.4: old behavior (see details in the issue)</p></li><li class="list__item" id="compatibility-guide-14.md-d4512fc2" ><p>&gt;= 1.4: behavior changed</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-capitalize-should-convert-digraphs-to-title-case" data-toc="compatibility-guide-14#compatibility-guide-14.md-capitalize-should-convert-digraphs-to-title-case"  >capitalize should convert digraphs to title case</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-d68ffebe" ><p id="compatibility-guide-14.md-9ddf0c30" ><b id="compatibility-guide-14.md-63caca88" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-38817" id="compatibility-guide-14.md-b28b25cf"   data-external="true" rel="noopener noreferrer" >KT-38817</a></p><p id="compatibility-guide-14.md-dd6d8948" ><b id="compatibility-guide-14.md-fbe6a4c0" class=""  >Component</b>: kotlin-stdlib</p><p id="compatibility-guide-14.md-f813f6e3" ><b id="compatibility-guide-14.md-6ad1b72e" class=""  >Incompatible change type</b>: behavioral</p><p id="compatibility-guide-14.md-eba5cdf1" ><b id="compatibility-guide-14.md-cc67f7db" class=""  >Short summary</b>: <code class="code " id="compatibility-guide-14.md-a0d0afa7"  >String.capitalize()</code> function now capitalizes digraphs from the <a href="https://en.wikipedia.org/wiki/Gaj%27s_Latin_alphabet" id="compatibility-guide-14.md-deb3d263"   data-external="true" rel="noopener noreferrer" >Serbo-Croatian Gaj\'s Latin alphabet</a> in the title case (<code class="code " id="compatibility-guide-14.md-1a237cf1"  >ǅ</code> instead of <code class="code " id="compatibility-guide-14.md-304985b6"  >Ǆ</code>)</p><p id="compatibility-guide-14.md-b5acdd00" ><b id="compatibility-guide-14.md-686f9f54" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-ac0dfad3"   ><li class="list__item" id="compatibility-guide-14.md-3a662e52" ><p>&lt; 1.4: digraphs are capitalized in the upper case (<code class="code " id="compatibility-guide-14.md-d13db28d"  >Ǆ</code>)</p></li><li class="list__item" id="compatibility-guide-14.md-b4d48b2f" ><p>&gt;= 1.4: digraphs are capitalized in the title case (<code class="code " id="compatibility-guide-14.md-98e7488c"  >ǅ</code>)</p></li></ul></aside></section></section><section class="chapter"  ><h2 id="compatibility-guide-14.md-tools" data-toc="compatibility-guide-14#compatibility-guide-14.md-tools"  >Tools</h2><section class="chapter"  ><h3 id="compatibility-guide-14.md-compiler-arguments-with-delimiter-characters-must-be-passed-in-double-quotes-on-windows" data-toc="compatibility-guide-14#compatibility-guide-14.md-compiler-arguments-with-delimiter-characters-must-be-passed-in-double-quotes-on-windows"  >Compiler arguments with delimiter characters must be passed in double quotes on Windows</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-e73afa01" ><p id="compatibility-guide-14.md-b9d6a79e" ><b id="compatibility-guide-14.md-24dfae8a" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-30211" id="compatibility-guide-14.md-117d8cf"   data-external="true" rel="noopener noreferrer" >KT-30211</a></p><p id="compatibility-guide-14.md-df8a6629" ><b id="compatibility-guide-14.md-b4b93e9f" class=""  >Component</b>: CLI</p><p id="compatibility-guide-14.md-9d35f1cb" ><b id="compatibility-guide-14.md-85d1e69f" class=""  >Incompatible change type</b>: behavioral</p><p id="compatibility-guide-14.md-4c613a47" ><b id="compatibility-guide-14.md-fb354fce" class=""  >Short summary</b>: on Windows, <code class="code " id="compatibility-guide-14.md-5df193c9"  >kotlinc.bat</code> arguments that contain delimiter characters (whitespace, <code class="code " id="compatibility-guide-14.md-29bb2125"  >=</code>, <code class="code " id="compatibility-guide-14.md-2f252936"  >;</code>, <code class="code " id="compatibility-guide-14.md-76cb34"  >,</code>) now require double quotes (<code class="code " id="compatibility-guide-14.md-fc6ef6b3"  >&quot;</code>)</p><p id="compatibility-guide-14.md-4764c0c3" ><b id="compatibility-guide-14.md-fc15c2b1" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-311925d1"   ><li class="list__item" id="compatibility-guide-14.md-2d1ed730" ><p>&lt; 1.4: all compiler arguments are passed without quotes</p></li><li class="list__item" id="compatibility-guide-14.md-6a875968" ><p>&gt;= 1.4: compiler arguments that contain delimiter characters (whitespace, <code class="code " id="compatibility-guide-14.md-952c7916"  >=</code>, <code class="code " id="compatibility-guide-14.md-5267e619"  >;</code>, <code class="code " id="compatibility-guide-14.md-632251c8"  >,</code>) require double quotes (<code class="code " id="compatibility-guide-14.md-2278fe26"  >&quot;</code>)</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-14.md-kapt-names-of-synthetic-annotations-methods-for-properties-have-changed" data-toc="compatibility-guide-14#compatibility-guide-14.md-kapt-names-of-synthetic-annotations-methods-for-properties-have-changed"  >KAPT: Names of synthetic $annotations() methods for properties have changed</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-14.md-2ed0bf6c" ><p id="compatibility-guide-14.md-d9b7039f" ><b id="compatibility-guide-14.md-b8d75a81" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-36926" id="compatibility-guide-14.md-bca98a01"   data-external="true" rel="noopener noreferrer" >KT-36926</a></p><p id="compatibility-guide-14.md-5ba183a7" ><b id="compatibility-guide-14.md-a3b50e10" class=""  >Component</b>: KAPT</p><p id="compatibility-guide-14.md-4dc28acd" ><b id="compatibility-guide-14.md-d65a2208" class=""  >Incompatible change type</b>: behavioral</p><p id="compatibility-guide-14.md-38e5892a" ><b id="compatibility-guide-14.md-bb444f62" class=""  >Short summary</b>: names of synthetic <code class="code " id="compatibility-guide-14.md-a5ad69a3"  >$annotations()</code> methods generated by KAPT for properties have changed in 1.4</p><p id="compatibility-guide-14.md-ca8244aa" ><b id="compatibility-guide-14.md-fe48678c" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-14.md-2e875d4c"   ><li class="list__item" id="compatibility-guide-14.md-589e91eb" ><p>&lt; 1.4: names of synthetic <code class="code " id="compatibility-guide-14.md-ad25fa41"  >$annotations()</code> methods for properties follow the template <code class="code " id="compatibility-guide-14.md-91a2319e"  >&lt;propertyName&gt;@annotations()</code></p></li><li class="list__item" id="compatibility-guide-14.md-caa0cdf8" ><p>&gt;= 1.4: names of synthetic <code class="code " id="compatibility-guide-14.md-edc35b1e"  >$annotations()</code> methods for properties include the <code class="code " id="compatibility-guide-14.md-1d85faf3"  >get</code> prefix: <code class="code " id="compatibility-guide-14.md-fee408ad"  >get&lt;PropertyName&gt;@annotations()</code></p></li></ul></aside></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="compatibility-guide-13.md"  >Compatibility guide for Kotlin 1.3</h1><p id="compatibility-guide-13.md-deaeff4e" ><a href="#kotlin-evolution.md" id="compatibility-guide-13.md-5fd4dcfa"   >Keeping the Language Modern and Comfortable Updates</a> are among the fundamental principles in Kotlin Language Design. The former says that constructs which obstruct language evolution should be removed, and the latter says that this removal should be well-communicated beforehand to make code migration as smooth as possible.</p><p id="compatibility-guide-13.md-5012ae42" >While most of the language changes were already announced through other channels, like update changelogs or compiler warnings, this document summarizes them all, providing a complete reference for migration from Kotlin 1.2 to Kotlin 1.3.</p><section class="chapter"  ><h2 id="compatibility-guide-13.md-basic-terms" data-toc="compatibility-guide-13#compatibility-guide-13.md-basic-terms"  >Basic terms</h2><p id="compatibility-guide-13.md-c6a18b14" >In this document we introduce several kinds of compatibility:</p><ul class="list _ul" id="compatibility-guide-13.md-3df4076f"   ><li class="list__item" id="compatibility-guide-13.md-25cbddba" ><p><em id="compatibility-guide-13.md-25242003" class=""  >Source</em>: source-incompatible change stops code that used to compile fine (without errors or warnings) from compiling anymore</p></li><li class="list__item" id="compatibility-guide-13.md-4d784574" ><p><em id="compatibility-guide-13.md-6f1cc0a2" class=""  >Binary</em>: two binary artifacts are said to be binary-compatible if interchanging them doesn\'t lead to loading or linkage errors</p></li><li class="list__item" id="compatibility-guide-13.md-5e61a4c0" ><p><em id="compatibility-guide-13.md-a067f4b4" class=""  >Behavioral</em>: a change is said to be behavioral-incompatible if one and the same program demonstrates different behavior before and after applying the change</p></li></ul><p id="compatibility-guide-13.md-df512d34" >Remember that those definitions are given only for pure Kotlin. Compatibility of Kotlin code from the other languages perspective (e.g. from Java) is out of the scope of this document.</p></section><section class="chapter"  ><h2 id="compatibility-guide-13.md-incompatible-changes" data-toc="compatibility-guide-13#compatibility-guide-13.md-incompatible-changes"  >Incompatible changes</h2><section class="chapter"  ><h3 id="compatibility-guide-13.md-evaluation-order-of-constructor-arguments-regarding-lt-clinit-gt-call" data-toc="compatibility-guide-13#compatibility-guide-13.md-evaluation-order-of-constructor-arguments-regarding-lt-clinit-gt-call"  >Evaluation order of constructor arguments regarding <clinit> call</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-61e292ac" ><p id="compatibility-guide-13.md-a82b5805" ><b id="compatibility-guide-13.md-ee453aef" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-19532" id="compatibility-guide-13.md-c73bd96"   data-external="true" rel="noopener noreferrer" >KT-19532</a></p><p id="compatibility-guide-13.md-2105ef9c" ><b id="compatibility-guide-13.md-33b52780" class=""  >Component</b>: Kotlin/JVM</p><p id="compatibility-guide-13.md-ed9db6c8" ><b id="compatibility-guide-13.md-8bd25790" class=""  >Incompatible change type</b>: behavioral</p><p id="compatibility-guide-13.md-cacb14fc" ><b id="compatibility-guide-13.md-33193dc5" class=""  >Short summary</b>: evaluation order with respect to class initialization is changed in 1.3</p><p id="compatibility-guide-13.md-5de17674" ><b id="compatibility-guide-13.md-e7b93217" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-49e3bc6d"   ><li class="list__item" id="compatibility-guide-13.md-307e692f" ><p>&lt;1.3: old behavior (see details in the Issue)</p></li><li class="list__item" id="compatibility-guide-13.md-e8396918" ><p>&gt;= 1.3: behavior changed, <code class="code " id="compatibility-guide-13.md-459ffff6"  >-Xnormalize-constructor-calls=disable</code> can be used to temporarily revert to pre-1.3 behavior. Support for this flag is going to be removed in the next major release.</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-missing-getter-targeted-annotations-on-annotation-constructor-parameters" data-toc="compatibility-guide-13#compatibility-guide-13.md-missing-getter-targeted-annotations-on-annotation-constructor-parameters"  >Missing getter-targeted annotations on annotation constructor parameters</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-bae0fbee" ><p id="compatibility-guide-13.md-a0726027" ><b id="compatibility-guide-13.md-bf196d" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-25287" id="compatibility-guide-13.md-fe9c304d"   data-external="true" rel="noopener noreferrer" >KT-25287</a></p><p id="compatibility-guide-13.md-548f6493" ><b id="compatibility-guide-13.md-faa88bc9" class=""  >Component</b>: Kotlin/JVM</p><p id="compatibility-guide-13.md-e0f84d8f" ><b id="compatibility-guide-13.md-870c73db" class=""  >Incompatible change type</b>: behavioral</p><p id="compatibility-guide-13.md-f869d877" ><b id="compatibility-guide-13.md-3c0858c6" class=""  >Short summary</b>: getter-target annotations on annotations constructor parameters will be properly written to classfiles in 1.3</p><p id="compatibility-guide-13.md-ecc5014" ><b id="compatibility-guide-13.md-fb20d27f" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-998f4bf2"   ><li class="list__item" id="compatibility-guide-13.md-bcd5328b" ><p>&lt;1.3: getter-target annotations on annotation constructor parameters are not applied</p></li><li class="list__item" id="compatibility-guide-13.md-345c365f" ><p>&gt;=1.3: getter-target annotations on annotation constructor parameters are properly applied and written to the generated code</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-missing-errors-in-class-constructor-s-get-annotations" data-toc="compatibility-guide-13#compatibility-guide-13.md-missing-errors-in-class-constructor-s-get-annotations"  >Missing errors in class constructor’s @get: annotations</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-29014fb" ><p id="compatibility-guide-13.md-a6b6e607" ><b id="compatibility-guide-13.md-25b88ca2" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-19628" id="compatibility-guide-13.md-d9e8b836"   data-external="true" rel="noopener noreferrer" >KT-19628</a></p><p id="compatibility-guide-13.md-8b9386fb" ><b id="compatibility-guide-13.md-2b613420" class=""  >Component</b>: Core language</p><p id="compatibility-guide-13.md-88189e58" ><b id="compatibility-guide-13.md-e2856c92" class=""  >Incompatible change type</b>: Source</p><p id="compatibility-guide-13.md-d74e5555" ><b id="compatibility-guide-13.md-d53c64fc" class=""  >Short summary</b>: errors in getter-target annotations will be reported properly in 1.3</p><p id="compatibility-guide-13.md-a7acb4a0" ><b id="compatibility-guide-13.md-58027fb6" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-78560c92"   ><li class="list__item" id="compatibility-guide-13.md-f9cbee8" ><p>&lt;1.2: compilation errors in getter-target annotations were not reported, causing incorrect code to be compiled fine.</p></li><li class="list__item" id="compatibility-guide-13.md-f6ea3e37" ><p>1.2.x: errors reported only by tooling, the compiler still compiles such code without any warnings</p></li><li class="list__item" id="compatibility-guide-13.md-47733683" ><p>&gt;=1.3: errors reported by the compiler too, causing erroneous code to be rejected</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-nullability-assertions-on-access-to-java-types-annotated-with-notnull" data-toc="compatibility-guide-13#compatibility-guide-13.md-nullability-assertions-on-access-to-java-types-annotated-with-notnull"  >Nullability assertions on access to Java types annotated with @NotNull</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-fb65fbad" ><p id="compatibility-guide-13.md-749c52c" ><b id="compatibility-guide-13.md-a3f3f608" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-20830" id="compatibility-guide-13.md-ef48d309"   data-external="true" rel="noopener noreferrer" >KT-20830</a></p><p id="compatibility-guide-13.md-c29f7f1a" ><b id="compatibility-guide-13.md-67f3c0c8" class=""  >Component</b>: Kotlin/JVM</p><p id="compatibility-guide-13.md-fa66cfd1" ><b id="compatibility-guide-13.md-df5eae61" class=""  >Incompatible change type</b>: Behavioral</p><p id="compatibility-guide-13.md-31557809" ><b id="compatibility-guide-13.md-b9aca060" class=""  >Short summary</b>: nullability assertions for Java-types annotated with not-null annotations will be generated more aggressively, causing code which passes <code class="code " id="compatibility-guide-13.md-d5f68b05"  >null</code> here to fail faster.</p><p id="compatibility-guide-13.md-93cd9bb9" ><b id="compatibility-guide-13.md-318173eb" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-5afa6373"   ><li class="list__item" id="compatibility-guide-13.md-94860ff4" ><p>&lt;1.3: the compiler could miss such assertions when type inference was involved, allowing potential <code class="code " id="compatibility-guide-13.md-8229e8af"  >null</code> propagation during compilation against binaries (see Issue for details).</p></li><li class="list__item" id="compatibility-guide-13.md-b0e54835" ><p>&gt;=1.3: the compiler generates missed assertions. This can case code which was (erroneously) passing <code class="code " id="compatibility-guide-13.md-8ac884d3"  >null</code> s here fail faster. <br/> <code class="code " id="compatibility-guide-13.md-17308ee3"  >-XXLanguage:-StrictJavaNullabilityAssertions</code> can be used to temporarily return to the pre-1.3 behavior. Support for this flag will be removed in the next major release.</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-unsound-smartcasts-on-enum-members" data-toc="compatibility-guide-13#compatibility-guide-13.md-unsound-smartcasts-on-enum-members"  >Unsound smartcasts on enum members</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-4ac42663" ><p id="compatibility-guide-13.md-dfe11851" ><b id="compatibility-guide-13.md-3425fb12" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-20772" id="compatibility-guide-13.md-261d6ac7"   data-external="true" rel="noopener noreferrer" >KT-20772</a></p><p id="compatibility-guide-13.md-884a6c3f" ><b id="compatibility-guide-13.md-f0ed8fb7" class=""  >Component</b>: Core language</p><p id="compatibility-guide-13.md-878be3e6" ><b id="compatibility-guide-13.md-442d8bb8" class=""  >Incompatible change type</b>: Source</p><p id="compatibility-guide-13.md-156bb462" ><b id="compatibility-guide-13.md-b8a5afa" class=""  >Short summary</b>: a smartcast on a member of one enum entry will be correctly applied to only this enum entry</p><p id="compatibility-guide-13.md-620d9dc2" ><b id="compatibility-guide-13.md-476df152" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-de72eafb"   ><li class="list__item" id="compatibility-guide-13.md-59f7d7b0" ><p>&lt;1.3: a smartcast on a member of one enum entry could lead to an unsound smartcast on the same member of other enum entries.</p></li><li class="list__item" id="compatibility-guide-13.md-da995115" ><p>&gt;=1.3: smartcast will be properly applied only to the member of one enum entry. <br/> <code class="code " id="compatibility-guide-13.md-2bf86ace"  >-XXLanguage:-SoundSmartcastForEnumEntries</code> will temporarily return old behavior. Support for this flag will be removed in the next major release.</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-val-backing-field-reassignment-in-getter" data-toc="compatibility-guide-13#compatibility-guide-13.md-val-backing-field-reassignment-in-getter"  >val backing field reassignment in getter</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-20a643bf" ><p id="compatibility-guide-13.md-7049753e" ><b id="compatibility-guide-13.md-874486d1" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-16681" id="compatibility-guide-13.md-abae667f"   data-external="true" rel="noopener noreferrer" >KT-16681</a></p><p id="compatibility-guide-13.md-2681a757" ><b id="compatibility-guide-13.md-ebd8a573" class=""  >Components</b>: Core language</p><p id="compatibility-guide-13.md-3e0f5892" ><b id="compatibility-guide-13.md-94b42211" class=""  >Incompatible change type</b>: Source</p><p id="compatibility-guide-13.md-6fbdea21" ><b id="compatibility-guide-13.md-e7835fe4" class=""  >Short summary</b>: reassignment of the backing field of <code class="code " id="compatibility-guide-13.md-f242ea18"  >val</code> -property in its getter is now prohibited</p><p id="compatibility-guide-13.md-3224c0a8" ><b id="compatibility-guide-13.md-323287b8" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-3124131f"   ><li class="list__item" id="compatibility-guide-13.md-e3306bdc" ><p>&lt;1.2: Kotlin compiler allowed to modify backing field of <code class="code " id="compatibility-guide-13.md-8e9eaa96"  >val</code> in its getter. Not only it violates Kotlin semantic, but also generates ill-behaved JVM bytecode which reassigns <code class="code " id="compatibility-guide-13.md-7589757"  >final</code> field.</p></li><li class="list__item" id="compatibility-guide-13.md-80381db6" ><p>1.2.X: deprecation warning is reported on code which reassigns backing field of <code class="code " id="compatibility-guide-13.md-a3be44cd"  >val</code></p></li><li class="list__item" id="compatibility-guide-13.md-7bcccf94" ><p>&gt;=1.3: deprecation warnings are elevated to errors</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-array-capturing-before-the-for-loop-where-it-is-iterated" data-toc="compatibility-guide-13#compatibility-guide-13.md-array-capturing-before-the-for-loop-where-it-is-iterated"  >Array capturing before the for-loop where it is iterated</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-81f51ad4" ><p id="compatibility-guide-13.md-9342a41e" ><b id="compatibility-guide-13.md-4fd7fc62" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-21354" id="compatibility-guide-13.md-1cb494f"   data-external="true" rel="noopener noreferrer" >KT-21354</a></p><p id="compatibility-guide-13.md-4fa4c8cd" ><b id="compatibility-guide-13.md-8fec60da" class=""  >Component</b>: Kotlin/JVM</p><p id="compatibility-guide-13.md-282a31ed" ><b id="compatibility-guide-13.md-67d52226" class=""  >Incompatible change type</b>: Source</p><p id="compatibility-guide-13.md-401dc620" ><b id="compatibility-guide-13.md-b58dd2d7" class=""  >Short summary</b>: if an expression in for-loop range is a local variable updated in a loop body, this change affects loop execution. This is inconsistent with iterating over other containers, such as ranges, character sequences, and collections.</p><p id="compatibility-guide-13.md-38d63537" ><b id="compatibility-guide-13.md-8a414432" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-f04f02a0"   ><li class="list__item" id="compatibility-guide-13.md-f4c36e1a" ><p>&lt;1.2: described code patterns are compiled fine, but updates to local variable affect loop execution</p></li><li class="list__item" id="compatibility-guide-13.md-166e1448" ><p>1.2.X: deprecation warning reported if a range expression in a for-loop is an array-typed local variable which is assigned in a loop body</p></li><li class="list__item" id="compatibility-guide-13.md-5db0d486" ><p>1.3: change behavior in such cases to be consistent with other containers</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-nested-classifiers-in-enum-entries" data-toc="compatibility-guide-13#compatibility-guide-13.md-nested-classifiers-in-enum-entries"  >Nested classifiers in enum entries</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-65cc2d04" ><p id="compatibility-guide-13.md-9681b298" ><b id="compatibility-guide-13.md-e0433285" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-16310" id="compatibility-guide-13.md-24b17eb7"   data-external="true" rel="noopener noreferrer" >KT-16310</a></p><p id="compatibility-guide-13.md-ca707222" ><b id="compatibility-guide-13.md-b4194d64" class=""  >Component</b>: Core language</p><p id="compatibility-guide-13.md-d51ebd00" ><b id="compatibility-guide-13.md-903a749e" class=""  >Incompatible change type</b>: Source</p><p id="compatibility-guide-13.md-50117b5e" ><b id="compatibility-guide-13.md-25f9a80f" class=""  >Short summary</b>: since Kotlin 1.3, nested classifiers (classes, object, interfaces, annotation classes, enum classes) in enum entries are prohibited</p><p id="compatibility-guide-13.md-b11c900b" ><b id="compatibility-guide-13.md-5c93265c" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-63bf605c"   ><li class="list__item" id="compatibility-guide-13.md-b3028a4b" ><p>&lt;1.2: nested classifiers in enum entries are compiled fine, but may fail with exception at runtime</p></li><li class="list__item" id="compatibility-guide-13.md-65d6620e" ><p>1.2.X: deprecation warnings reported on the nested classifiers</p></li><li class="list__item" id="compatibility-guide-13.md-d79ef69e" ><p>&gt;=1.3: deprecation warnings elevated to errors</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-data-class-overriding-copy" data-toc="compatibility-guide-13#compatibility-guide-13.md-data-class-overriding-copy"  >Data class overriding copy</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-6a57ffc" ><p id="compatibility-guide-13.md-841bb1d1" ><b id="compatibility-guide-13.md-4296479a" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-19618" id="compatibility-guide-13.md-7b796f21"   data-external="true" rel="noopener noreferrer" >KT-19618</a></p><p id="compatibility-guide-13.md-db6b7487" ><b id="compatibility-guide-13.md-29d38484" class=""  >Components</b>: Core language</p><p id="compatibility-guide-13.md-5e24e4bd" ><b id="compatibility-guide-13.md-8d02b978" class=""  >Incompatible change type</b>: Source</p><p id="compatibility-guide-13.md-29349725" ><b id="compatibility-guide-13.md-3a3440d6" class=""  >Short summary</b>: since Kotlin 1.3, data classes are prohibited to override <code class="code " id="compatibility-guide-13.md-a838df97"  >copy()</code></p><p id="compatibility-guide-13.md-a1b4600c" ><b id="compatibility-guide-13.md-644fc692" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-b611506a"   ><li class="list__item" id="compatibility-guide-13.md-ead2682d" ><p>&lt;1.2: data classes overriding <code class="code " id="compatibility-guide-13.md-7f129b64"  >copy()</code> are compiled fine but may fail at runtime/expose strange behavior</p></li><li class="list__item" id="compatibility-guide-13.md-4f906511" ><p>1.2.X: deprecation warnings reported on data classes overriding <code class="code " id="compatibility-guide-13.md-e504a0fb"  >copy()</code></p></li><li class="list__item" id="compatibility-guide-13.md-bd26e97d" ><p>&gt;=1.3: deprecation warnings elevated to errors</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-inner-classes-inheriting-throwable-that-capture-generic-parameters-from-the-outer-class" data-toc="compatibility-guide-13#compatibility-guide-13.md-inner-classes-inheriting-throwable-that-capture-generic-parameters-from-the-outer-class"  >Inner classes inheriting Throwable that capture generic parameters from the outer class</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-e08eafa7" ><p id="compatibility-guide-13.md-4b64c1a0" ><b id="compatibility-guide-13.md-386e277b" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-17981" id="compatibility-guide-13.md-d76e37d1"   data-external="true" rel="noopener noreferrer" >KT-17981</a></p><p id="compatibility-guide-13.md-af31e5e" ><b id="compatibility-guide-13.md-284d606c" class=""  >Component</b>: Core language</p><p id="compatibility-guide-13.md-7645f17f" ><b id="compatibility-guide-13.md-ca23d058" class=""  >Incompatible change type</b>: Source</p><p id="compatibility-guide-13.md-66bab07d" ><b id="compatibility-guide-13.md-c49bd687" class=""  >Short summary</b>: since Kotlin 1.3, inner classes are not allowed to inherit <code class="code " id="compatibility-guide-13.md-feb368d9"  >Throwable</code></p><p id="compatibility-guide-13.md-1963fdf2" ><b id="compatibility-guide-13.md-a13f9ca3" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-c8972cd7"   ><li class="list__item" id="compatibility-guide-13.md-6962ad86" ><p>&lt;1.2: inner classes inheriting <code class="code " id="compatibility-guide-13.md-7f35f74a"  >Throwable</code> are compiled fine. If such inner classes happen to capture generic parameters, it could lead to strange code patterns which fail at runtime.</p></li><li class="list__item" id="compatibility-guide-13.md-8fc04da0" ><p>1.2.X: deprecation warnings reported on inner classes inheriting <code class="code " id="compatibility-guide-13.md-138efe51"  >Throwable</code></p></li><li class="list__item" id="compatibility-guide-13.md-13bb29ca" ><p>&gt;=1.3: deprecation warnings elevated to errors</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-visibility-rules-regarding-complex-class-hierarchies-with-companion-objects" data-toc="compatibility-guide-13#compatibility-guide-13.md-visibility-rules-regarding-complex-class-hierarchies-with-companion-objects"  >Visibility rules regarding complex class hierarchies with companion objects</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-4b114a29" ><p id="compatibility-guide-13.md-830b8d38" ><b id="compatibility-guide-13.md-6f45c567" class=""  >Issues</b>: <a href="https://youtrack.jetbrains.com/issue/KT-21515" id="compatibility-guide-13.md-5a8c499"   data-external="true" rel="noopener noreferrer" >KT-21515</a>, <a href="https://youtrack.jetbrains.com/issue/KT-25333" id="compatibility-guide-13.md-bafe2809"   data-external="true" rel="noopener noreferrer" >KT-25333</a></p><p id="compatibility-guide-13.md-2f7e1726" ><b id="compatibility-guide-13.md-28ae0cbe" class=""  >Component</b>: Core language</p><p id="compatibility-guide-13.md-f1db5639" ><b id="compatibility-guide-13.md-d89567e9" class=""  >Incompatible change type</b>: Source</p><p id="compatibility-guide-13.md-4f17d863" ><b id="compatibility-guide-13.md-747d7724" class=""  >Short summary</b>: since Kotlin 1.3, rules of visibility by short names are stricter for complex class hierarchies involving companion objects and nested classifiers.</p><p id="compatibility-guide-13.md-e764324" ><b id="compatibility-guide-13.md-31e515f" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-c30f5ea7"   ><li class="list__item" id="compatibility-guide-13.md-76d3d2c1" ><p>&lt;1.2: old visibility rules (see Issue for details)</p></li><li class="list__item" id="compatibility-guide-13.md-3e646132" ><p>1.2.X: deprecation warnings reported on short names which are not going to be accessible anymore. Tooling suggests automated migration by adding full name.</p></li><li class="list__item" id="compatibility-guide-13.md-5d5584f3" ><p>&gt;=1.3: deprecation warnings elevated to errors. Offending code should add full qualifiers or explicit imports</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-non-constant-vararg-annotation-parameters" data-toc="compatibility-guide-13#compatibility-guide-13.md-non-constant-vararg-annotation-parameters"  >Non-constant vararg annotation parameters</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-bae3c30" ><p id="compatibility-guide-13.md-3e63ab8b" ><b id="compatibility-guide-13.md-10228af7" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-23153" id="compatibility-guide-13.md-e24995a9"   data-external="true" rel="noopener noreferrer" >KT-23153</a></p><p id="compatibility-guide-13.md-48a963c1" ><b id="compatibility-guide-13.md-986d10ff" class=""  >Component</b>: Core language</p><p id="compatibility-guide-13.md-a7158569" ><b id="compatibility-guide-13.md-d66f27df" class=""  >Incompatible change type</b>: Source</p><p id="compatibility-guide-13.md-b5d4c0ed" ><b id="compatibility-guide-13.md-dab2830d" class=""  >Short summary</b>: since Kotlin 1.3, setting non-constant values as vararg annotation parameters is prohibited</p><p id="compatibility-guide-13.md-cea61bc6" ><b id="compatibility-guide-13.md-99d7a959" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-60419094"   ><li class="list__item" id="compatibility-guide-13.md-569b3a53" ><p>&lt;1.2: the compiler allows to pass non-constant value for vararg annotation parameter, but actually drops that value during bytecode generation, leading to non-obvious behavior</p></li><li class="list__item" id="compatibility-guide-13.md-74a895b4" ><p>1.2.X: deprecation warnings reported on such code patterns</p></li><li class="list__item" id="compatibility-guide-13.md-db92f69a" ><p>&gt;=1.3: deprecation warnings elevated to errors</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-local-annotation-classes" data-toc="compatibility-guide-13#compatibility-guide-13.md-local-annotation-classes"  >Local annotation classes</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-2cb3dae" ><p id="compatibility-guide-13.md-4c353f8e" ><b id="compatibility-guide-13.md-3942eba9" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-23277" id="compatibility-guide-13.md-b5f58175"   data-external="true" rel="noopener noreferrer" >KT-23277</a></p><p id="compatibility-guide-13.md-ff0ec647" ><b id="compatibility-guide-13.md-c7fd064d" class=""  >Component</b>: Core language</p><p id="compatibility-guide-13.md-e7d75d8d" ><b id="compatibility-guide-13.md-501cce2" class=""  >Incompatible change type</b>: Source</p><p id="compatibility-guide-13.md-ed04ecca" ><b id="compatibility-guide-13.md-b2777ee7" class=""  >Short summary</b>: since Kotlin 1.3 local annotation classes are not supported</p><p id="compatibility-guide-13.md-acaf4f9c" ><b id="compatibility-guide-13.md-1ccd5215" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-7037b981"   ><li class="list__item" id="compatibility-guide-13.md-8806d3ae" ><p>&lt;1.2: the compiler compiled local annotation classes fine</p></li><li class="list__item" id="compatibility-guide-13.md-7c9191" ><p>1.2.X: deprecation warnings reported on local annotation classes</p></li><li class="list__item" id="compatibility-guide-13.md-2a622cc" ><p>&gt;=1.3: deprecation warnings elevated to errors</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-smartcasts-on-local-delegated-properties" data-toc="compatibility-guide-13#compatibility-guide-13.md-smartcasts-on-local-delegated-properties"  >Smartcasts on local delegated properties</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-da10105c" ><p id="compatibility-guide-13.md-31314564" ><b id="compatibility-guide-13.md-3b857400" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-22517" id="compatibility-guide-13.md-223fdce8"   data-external="true" rel="noopener noreferrer" >KT-22517</a></p><p id="compatibility-guide-13.md-95405ef0" ><b id="compatibility-guide-13.md-7b14daed" class=""  >Component</b>: Core language</p><p id="compatibility-guide-13.md-e0b25003" ><b id="compatibility-guide-13.md-ad83c33f" class=""  >Incompatible change type</b>: Source</p><p id="compatibility-guide-13.md-a31da6c2" ><b id="compatibility-guide-13.md-e439d846" class=""  >Short summary</b>: since Kotlin 1.3 smartcasts on local delegated properties are not allowed</p><p id="compatibility-guide-13.md-2af96518" ><b id="compatibility-guide-13.md-3090fb0" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-590867c6"   ><li class="list__item" id="compatibility-guide-13.md-2ea130b5" ><p>&lt;1.2: the compiler allowed to smartcast local delegated property, which could lead to unsound smartcast in case of ill-behaved delegates</p></li><li class="list__item" id="compatibility-guide-13.md-98103149" ><p>1.2.X: smartcasts on local delegated properries are reported as deprecated (the compiler issues warnings)</p></li><li class="list__item" id="compatibility-guide-13.md-89f7d276" ><p>&gt;=1.3: deprecation warnings elevated to errors</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-mod-operator-convention" data-toc="compatibility-guide-13#compatibility-guide-13.md-mod-operator-convention"  >mod operator convention</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-8e1b2f22" ><p id="compatibility-guide-13.md-3c0b6841" ><b id="compatibility-guide-13.md-d017a78d" class=""  >Issues</b>: <a href="https://youtrack.jetbrains.com/issue/KT-24197" id="compatibility-guide-13.md-eb69f2c1"   data-external="true" rel="noopener noreferrer" >KT-24197</a></p><p id="compatibility-guide-13.md-106cce37" ><b id="compatibility-guide-13.md-a8479865" class=""  >Component</b>: Core language</p><p id="compatibility-guide-13.md-c56ae86e" ><b id="compatibility-guide-13.md-c6832482" class=""  >Incompatible change type</b>: Source</p><p id="compatibility-guide-13.md-51907de0" ><b id="compatibility-guide-13.md-d6218c00" class=""  >Short summary</b>: since Kotlin 1.3 declaration of <code class="code " id="compatibility-guide-13.md-800e60eb"  >mod</code> operator is prohibited, as well as calls which resolve to such declarations</p><p id="compatibility-guide-13.md-56b1e786" ><b id="compatibility-guide-13.md-13de71fc" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-6181268e"   ><li class="list__item" id="compatibility-guide-13.md-27b7739f" ><p>1.1.X, 1.2.X: report warnings on declarations of <code class="code " id="compatibility-guide-13.md-c018e3c6"  >operator mod</code>, as well as on calls which resolve to it</p></li><li class="list__item" id="compatibility-guide-13.md-91b3a129" ><p>1.3.X: elevate warnings to error, but still allow to resolve to <code class="code " id="compatibility-guide-13.md-43bc8a9d"  >operator mod</code> declarations</p></li><li class="list__item" id="compatibility-guide-13.md-54431022" ><p>1.4.X: do not resolve calls to <code class="code " id="compatibility-guide-13.md-264136fc"  >operator mod</code> anymore</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-passing-single-element-to-vararg-in-named-form" data-toc="compatibility-guide-13#compatibility-guide-13.md-passing-single-element-to-vararg-in-named-form"  >Passing single element to vararg in named form</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-357fc4d3" ><p id="compatibility-guide-13.md-4141b379" ><b id="compatibility-guide-13.md-e8f3dcae" class=""  >Issues</b>: <a href="https://youtrack.jetbrains.com/issue/KT-20588" id="compatibility-guide-13.md-7a2b8779"   data-external="true" rel="noopener noreferrer" >KT-20588</a>, <a href="https://youtrack.jetbrains.com/issue/KT-20589" id="compatibility-guide-13.md-e164d56c"   data-external="true" rel="noopener noreferrer" >KT-20589</a>. See also <a href="https://youtrack.jetbrains.com/issue/KT-20171" id="compatibility-guide-13.md-38d37629"   data-external="true" rel="noopener noreferrer" >KT-20171</a></p><p id="compatibility-guide-13.md-1936d605" ><b id="compatibility-guide-13.md-47def035" class=""  >Component</b>: Core language</p><p id="compatibility-guide-13.md-d79b86fc" ><b id="compatibility-guide-13.md-9fe11d9f" class=""  >Incompatible change type</b>: Source</p><p id="compatibility-guide-13.md-28378992" ><b id="compatibility-guide-13.md-45f21a28" class=""  >Short summary</b>: in Kotlin 1.3, assigning single element to vararg is deprecated and should be replaced with consecutive spread and array construction.</p><p id="compatibility-guide-13.md-360489dc" ><b id="compatibility-guide-13.md-4c3f162a" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-dd7b4dce"   ><li class="list__item" id="compatibility-guide-13.md-247c16d7" ><p>&lt;1.2: assigning one value element to vararg in named form compiles fine and is treated as assigning <em id="compatibility-guide-13.md-4f8693bd" class=""  >single</em> element to array, causing non-obvious behavior when assigning array to vararg</p></li><li class="list__item" id="compatibility-guide-13.md-c4fa5c2e" ><p>1.2.X: deprecation warnings are reported on such assignments, users are suggested to switch to consecutive spread and array construction.</p></li><li class="list__item" id="compatibility-guide-13.md-a4d1ce5" ><p>1.3.X: warnings are elevated to errors</p></li><li class="list__item" id="compatibility-guide-13.md-99fd031" ><p>&gt;= 1.4: change semantic of assigning single element to vararg, making assignment of array equivalent to the assignment of a spread of an array</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-retention-of-annotations-with-target-expression" data-toc="compatibility-guide-13#compatibility-guide-13.md-retention-of-annotations-with-target-expression"  >Retention of annotations with target EXPRESSION</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-e95574ef" ><p id="compatibility-guide-13.md-c967a217" ><b id="compatibility-guide-13.md-3c39f598" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-13762" id="compatibility-guide-13.md-59be219b"   data-external="true" rel="noopener noreferrer" >KT-13762</a></p><p id="compatibility-guide-13.md-f13ebde0" ><b id="compatibility-guide-13.md-da2a618b" class=""  >Component</b>: Core language</p><p id="compatibility-guide-13.md-6277e665" ><b id="compatibility-guide-13.md-3587ee48" class=""  >Incompatible change type</b>: Source</p><p id="compatibility-guide-13.md-d8dcb8e2" ><b id="compatibility-guide-13.md-12ff4bde" class=""  >Short summary</b>: since Kotlin 1.3, only <code class="code " id="compatibility-guide-13.md-ad1026e4"  >SOURCE</code> retention is allowed for annotations with target <code class="code " id="compatibility-guide-13.md-71eac8ce"  >EXPRESSION</code></p><p id="compatibility-guide-13.md-9858bc30" ><b id="compatibility-guide-13.md-d8cdca" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-d746e373"   ><li class="list__item" id="compatibility-guide-13.md-7a67fff6" ><p>&lt;1.2: annotations with target <code class="code " id="compatibility-guide-13.md-ee721832"  >EXPRESSION</code> and retention other than <code class="code " id="compatibility-guide-13.md-bd939a5f"  >SOURCE</code> are allowed, but silently ignored at use-sites</p></li><li class="list__item" id="compatibility-guide-13.md-d9419f15" ><p>1.2.X: deprecation warnings are reported on declarations of such annotations</p></li><li class="list__item" id="compatibility-guide-13.md-670f24d3" ><p>&gt;=1.3: warnings are elevated to errors</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-annotations-with-target-parameter-shouldn-t-be-applicable-to-parameter-s-type" data-toc="compatibility-guide-13#compatibility-guide-13.md-annotations-with-target-parameter-shouldn-t-be-applicable-to-parameter-s-type"  >Annotations with target PARAMETER shouldn\'t be applicable to parameter\'s type</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-c30f25ff" ><p id="compatibility-guide-13.md-14747138" ><b id="compatibility-guide-13.md-41974f97" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-9580" id="compatibility-guide-13.md-c1525e15"   data-external="true" rel="noopener noreferrer" >KT-9580</a></p><p id="compatibility-guide-13.md-61f23a24" ><b id="compatibility-guide-13.md-d7ff93ef" class=""  >Component</b>: Core language</p><p id="compatibility-guide-13.md-348397f4" ><b id="compatibility-guide-13.md-bf7c1c9e" class=""  >Incompatible change type</b>: Source</p><p id="compatibility-guide-13.md-5c847fa3" ><b id="compatibility-guide-13.md-a5cd9ed2" class=""  >Short summary</b>: since Kotlin 1.3, error about wrong annotation target will be properly reported when annotation with target <code class="code " id="compatibility-guide-13.md-e628c4fa"  >PARAMETER</code> is applied to parameter\'s type</p><p id="compatibility-guide-13.md-baf30555" ><b id="compatibility-guide-13.md-5044ff3e" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-cf08b8d6"   ><li class="list__item" id="compatibility-guide-13.md-dde2702c" ><p>&lt;1.2: aforementioned code patterns are compiled fine; annotations are silently ignored and not present in the bytecode</p></li><li class="list__item" id="compatibility-guide-13.md-faf2243a" ><p>1.2.X: deprecation warnings are reported on such usages</p></li><li class="list__item" id="compatibility-guide-13.md-238a56f4" ><p>&gt;=1.3: warnings are elevated to errors</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-array-copyofrange-throws-an-exception-when-indices-are-out-of-bounds-instead-of-enlarging-the-returned-array" data-toc="compatibility-guide-13#compatibility-guide-13.md-array-copyofrange-throws-an-exception-when-indices-are-out-of-bounds-instead-of-enlarging-the-returned-array"  >Array.copyOfRange throws an exception when indices are out of bounds instead of enlarging the returned array</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-e7784ecb" ><p id="compatibility-guide-13.md-1464ecea" ><b id="compatibility-guide-13.md-9928bcbb" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-19489" id="compatibility-guide-13.md-d829e5cc"   data-external="true" rel="noopener noreferrer" >KT-19489</a></p><p id="compatibility-guide-13.md-f8b0cdd1" ><b id="compatibility-guide-13.md-1b83e3cf" class=""  >Component</b>: kotlin-stdlib (JVM)</p><p id="compatibility-guide-13.md-d9164b45" ><b id="compatibility-guide-13.md-337f6fd0" class=""  >Incompatible change type</b>: Behavioral</p><p id="compatibility-guide-13.md-9660110a" ><b id="compatibility-guide-13.md-a73cc05a" class=""  >Short summary</b>: since Kotlin 1.3, ensure that the <code class="code " id="compatibility-guide-13.md-2b2c8c1d"  >toIndex</code> argument of <code class="code " id="compatibility-guide-13.md-c97c7e5c"  >Array.copyOfRange</code>, which represents the exclusive end of the range being copied, is not greater than the array size and throw <code class="code " id="compatibility-guide-13.md-1b067690"  >IllegalArgumentException</code> if it is.</p><p id="compatibility-guide-13.md-9a47d4cf" ><b id="compatibility-guide-13.md-bb0a9b6f" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-95170098"   ><li class="list__item" id="compatibility-guide-13.md-64f7cfa9" ><p>&lt;1.3: in case <code class="code " id="compatibility-guide-13.md-df3d585f"  >toIndex</code> in the invocation of <code class="code " id="compatibility-guide-13.md-a1c182a7"  >Array.copyOfRange</code> is greater than the array size, the missing elements in range fill be filled with <code class="code " id="compatibility-guide-13.md-17e2f042"  >null</code> s, violating soundness of the Kotlin type system.</p></li><li class="list__item" id="compatibility-guide-13.md-317ea039" ><p>&gt;=1.3: check that <code class="code " id="compatibility-guide-13.md-f889a386"  >toIndex</code> is in the array bounds, and throw exception if it isn\'t</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-progressions-of-ints-and-longs-with-a-step-of-int-min-value-and-long-min-value-are-outlawed-and-won-t-be-allowed-to-be-instantiated" data-toc="compatibility-guide-13#compatibility-guide-13.md-progressions-of-ints-and-longs-with-a-step-of-int-min-value-and-long-min-value-are-outlawed-and-won-t-be-allowed-to-be-instantiated"  >Progressions of ints and longs with a step of Int.MIN_VALUE and Long.MIN_VALUE are outlawed and won’t be allowed to be instantiated</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-343c6ff" ><p id="compatibility-guide-13.md-e51afeb0" ><b id="compatibility-guide-13.md-12af6177" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-17176" id="compatibility-guide-13.md-f3e4eb4"   data-external="true" rel="noopener noreferrer" >KT-17176</a></p><p id="compatibility-guide-13.md-b626cd58" ><b id="compatibility-guide-13.md-ae188e15" class=""  >Component</b>: kotlin-stdlib (JVM)</p><p id="compatibility-guide-13.md-4b20bbe3" ><b id="compatibility-guide-13.md-984172f" class=""  >Incompatible change type</b>: Behavioral</p><p id="compatibility-guide-13.md-dff6274d" ><b id="compatibility-guide-13.md-f7b7b02" class=""  >Short summary</b>: since Kotlin 1.3, prohibit step value for integer progressions being the minimum negative value of its integer type (<code class="code " id="compatibility-guide-13.md-2498ec77"  >Long</code> or <code class="code " id="compatibility-guide-13.md-9f4bae37"  >Int</code> ), so that calling <code class="code " id="compatibility-guide-13.md-cbc61d85"  >IntProgression.fromClosedRange(0, 1, step = Int.MIN_VALUE)</code> will throw <code class="code " id="compatibility-guide-13.md-f3467a30"  >IllegalArgumentException</code></p><p id="compatibility-guide-13.md-9b0fc91c" ><b id="compatibility-guide-13.md-ad19d66a" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-5db40b49"   ><li class="list__item" id="compatibility-guide-13.md-d53d0e7c" ><p>&lt;1.3: it was possible to create an <code class="code " id="compatibility-guide-13.md-2768185f"  >IntProgression</code> with <code class="code " id="compatibility-guide-13.md-fbad7369"  >Int.MIN_VALUE</code> step, which yields two values <code class="code " id="compatibility-guide-13.md-e9d85f56"  >[0, -2147483648]</code>, which is non-obvious behavior</p></li><li class="list__item" id="compatibility-guide-13.md-501c5b32" ><p>&gt;=1.3: throw <code class="code " id="compatibility-guide-13.md-bc3a3064"  >IllegalArgumentException</code> if the step is the minimum negative value of its integer type</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-check-for-index-overflow-in-operations-on-very-long-sequences" data-toc="compatibility-guide-13#compatibility-guide-13.md-check-for-index-overflow-in-operations-on-very-long-sequences"  >Check for index overflow in operations on very long sequences</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-e046fbc" ><p id="compatibility-guide-13.md-f91755f3" ><b id="compatibility-guide-13.md-5418568d" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-16097" id="compatibility-guide-13.md-7e35111a"   data-external="true" rel="noopener noreferrer" >KT-16097</a></p><p id="compatibility-guide-13.md-202e9cf2" ><b id="compatibility-guide-13.md-177ac044" class=""  >Component</b>: kotlin-stdlib (JVM)</p><p id="compatibility-guide-13.md-459b207e" ><b id="compatibility-guide-13.md-b83a6db0" class=""  >Incompatible change type</b>: Behavioral</p><p id="compatibility-guide-13.md-96abf20c" ><b id="compatibility-guide-13.md-27906ce0" class=""  >Short summary</b>: since Kotlin 1.3, make sure <code class="code " id="compatibility-guide-13.md-edc81ac"  >index</code>, <code class="code " id="compatibility-guide-13.md-4ad5947"  >count</code> and similar methods do not overflow for long sequences. See the Issue for the full list of affected methods.</p><p id="compatibility-guide-13.md-9205cc1b" ><b id="compatibility-guide-13.md-b9ee05a2" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-33c3d6bc"   ><li class="list__item" id="compatibility-guide-13.md-98b28ae8" ><p>&lt;1.3: calling such methods on very long sequences could produce negative results due to integer overflow</p></li><li class="list__item" id="compatibility-guide-13.md-f3291528" ><p>&gt;=1.3: detect overflow in such methods and throw exception immediately</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-unify-split-by-an-empty-match-regex-result-across-the-platforms" data-toc="compatibility-guide-13#compatibility-guide-13.md-unify-split-by-an-empty-match-regex-result-across-the-platforms"  >Unify split by an empty match regex result across the platforms</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-78b476bc" ><p id="compatibility-guide-13.md-5e6ebd1" ><b id="compatibility-guide-13.md-369c6cb7" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-21049" id="compatibility-guide-13.md-c5017553"   data-external="true" rel="noopener noreferrer" >KT-21049</a></p><p id="compatibility-guide-13.md-11fa3311" ><b id="compatibility-guide-13.md-c29c8c56" class=""  >Component</b>: kotlin-stdlib (JVM)</p><p id="compatibility-guide-13.md-29ac6a69" ><b id="compatibility-guide-13.md-533f23e" class=""  >Incompatible change type</b>: Behavioral</p><p id="compatibility-guide-13.md-2a4e9c2" ><b id="compatibility-guide-13.md-4741cafa" class=""  >Short summary</b>: since Kotlin 1.3, unify behavior of <code class="code " id="compatibility-guide-13.md-21f632f2"  >split</code> method by empty match regex across all platforms</p><p id="compatibility-guide-13.md-1ad9a0ab" ><b id="compatibility-guide-13.md-dab08109" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-fc3d45fc"   ><li class="list__item" id="compatibility-guide-13.md-1ac8e183" ><p>&lt;1.3: behavior of described calls is different when comparing JS, JRE 6, JRE 7 versus JRE 8+</p></li><li class="list__item" id="compatibility-guide-13.md-c5014c63" ><p>&gt;=1.3: unify behavior across the platforms</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-discontinued-deprecated-artifacts-in-the-compiler-distribution" data-toc="compatibility-guide-13#compatibility-guide-13.md-discontinued-deprecated-artifacts-in-the-compiler-distribution"  >Discontinued deprecated artifacts in the compiler distribution</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-c56a6a46" ><p id="compatibility-guide-13.md-fe3beba8" ><b id="compatibility-guide-13.md-23cd41b3" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-23799" id="compatibility-guide-13.md-e5c93a59"   data-external="true" rel="noopener noreferrer" >KT-23799</a></p><p id="compatibility-guide-13.md-5905a357" ><b id="compatibility-guide-13.md-8ad70320" class=""  >Component</b>: other</p><p id="compatibility-guide-13.md-dc47a2fb" ><b id="compatibility-guide-13.md-a850690f" class=""  >Incompatible change type</b>: Binary</p><p id="compatibility-guide-13.md-925cf92c" ><b id="compatibility-guide-13.md-728b7d5f" class=""  >Short summary</b>: Kotlin 1.3 discontinues the following deprecated binary artifacts:</p><ul class="list _ul" id="compatibility-guide-13.md-53deef68"   ><li class="list__item" id="compatibility-guide-13.md-19d0f339" ><p><code class="code " id="compatibility-guide-13.md-e0fe5f99"  >kotlin-runtime</code>: use <code class="code " id="compatibility-guide-13.md-39e6d27b"  >kotlin-stdlib</code> instead</p></li><li class="list__item" id="compatibility-guide-13.md-6c31f98b" ><p><code class="code " id="compatibility-guide-13.md-4f2b789f"  >kotlin-stdlib-jre7/8</code>: use <code class="code " id="compatibility-guide-13.md-cdf3726e"  >kotlin-stdlib-jdk7/8</code> instead</p></li><li class="list__item" id="compatibility-guide-13.md-974def2a" ><p><code class="code " id="compatibility-guide-13.md-8d9f35b3"  >kotlin-jslib</code> in the compiler distribution: use <code class="code " id="compatibility-guide-13.md-a245b147"  >kotlin-stdlib-js</code> instead</p></li></ul><p id="compatibility-guide-13.md-f26873c4" ><b id="compatibility-guide-13.md-ce06f686" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-c732525e"   ><li class="list__item" id="compatibility-guide-13.md-e41c8ed2" ><p>1.2.X: the artifacts were marked as deprecated, the compiler reported warning on usage of those artifacts</p></li><li class="list__item" id="compatibility-guide-13.md-13945b99" ><p>&gt;=1.3: the artifacts are discontinued</p></li></ul></aside></section><section class="chapter"  ><h3 id="compatibility-guide-13.md-annotations-in-stdlib" data-toc="compatibility-guide-13#compatibility-guide-13.md-annotations-in-stdlib"  >Annotations in stdlib</h3><aside data-type="tip" class="prompt" data-title="" id="compatibility-guide-13.md-c276dc14" ><p id="compatibility-guide-13.md-38ee63eb" ><b id="compatibility-guide-13.md-a38c9026" class=""  >Issue</b>: <a href="https://youtrack.jetbrains.com/issue/KT-21784" id="compatibility-guide-13.md-9459cc9f"   data-external="true" rel="noopener noreferrer" >KT-21784</a></p><p id="compatibility-guide-13.md-83101a02" ><b id="compatibility-guide-13.md-d7e29794" class=""  >Component</b>: kotlin-stdlib (JVM)</p><p id="compatibility-guide-13.md-d3d92b4d" ><b id="compatibility-guide-13.md-5c420250" class=""  >Incompatible change type</b>: Binary</p><p id="compatibility-guide-13.md-e58007af" ><b id="compatibility-guide-13.md-4fe2a19c" class=""  >Short summary</b>: Kotlin 1.3 removes annotations from the package <code class="code " id="compatibility-guide-13.md-4b26719c"  >org.jetbrains.annotations</code> from stdlib and moves them to the separate artifacts shipped with the compiler: <code class="code " id="compatibility-guide-13.md-83f00c45"  >annotations-13.0.jar</code> and <code class="code " id="compatibility-guide-13.md-47c9471"  >mutability-annotations-compat.jar</code></p><p id="compatibility-guide-13.md-8e9b5ac4" ><b id="compatibility-guide-13.md-3ea65217" class=""  >Deprecation cycle</b>:</p><ul class="list _ul" id="compatibility-guide-13.md-ca3beac8"   ><li class="list__item" id="compatibility-guide-13.md-286c6a91" ><p>&lt;1.3: annotations were shipped with the stdlib artifact</p></li><li class="list__item" id="compatibility-guide-13.md-a24f4103" ><p>&gt;=1.3: annotations ship in separate artifacts</p></li></ul></aside></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="compatibility-modes.md"  >Compatibility modes</h1><p id="compatibility-modes.md-2f9b31d9" >When a big team is migrating onto a new version, it may appear in a &quot;inconsistent state&quot; at some point, when some developers have already updated, and others haven\'t. To prevent the former from writing and committing code that others may not be able to compile, we provide the following command line switches (also available in the IDE and <a href="#gradle.md-compiler-options" id="compatibility-modes.md-84a7ff4b"   >Gradle</a>/ <a href="#maven.md-specifying-compiler-options" id="compatibility-modes.md-36ff8296"   >Maven</a> ):</p><ul class="list _ul" id="compatibility-modes.md-e01378f0"   ><li class="list__item" id="compatibility-modes.md-2bda626b" ><p><code class="code " id="compatibility-modes.md-326d1e14"  >-language-version X.Y</code>- compatibility mode for Kotlin language version X.Y, reports errors for all language features that came out later.</p></li><li class="list__item" id="compatibility-modes.md-d77488e4" ><p><code class="code " id="compatibility-modes.md-200a60a7"  >-api-version X.Y</code>- compatibility mode for Kotlin API version X.Y, reports errors for all code using newer APIs from the Kotlin Standard Library (including the code generated by the compiler).</p></li></ul><p id="compatibility-modes.md-a18bb353" ><em id="compatibility-modes.md-bc21030e" class=""  >Below, we use OV for &quot;Older Version&quot;, and NV for &quot;Newer Version&quot;.</em></p><section class="chapter"  ><h2 id="compatibility-modes.md-binary-compatibility-warnings" data-toc="compatibility-modes#compatibility-modes.md-binary-compatibility-warnings"  >Binary compatibility warnings</h2><p id="compatibility-modes.md-a5ca9cee" >If you use the NV Kotlin compiler and have the OV standard library or the OV reflection library in the classpath, it can be a sign that the project is misconfigured. To prevent unexpected problems during compilation or at runtime, we suggest either updating the dependencies to NV, or specifying the API version / language version arguments explicitly. Otherwise, the compiler detects that something can go wrong and reports a warning.</p><p id="compatibility-modes.md-85e1cf69" >For example, if OV = 1.0 and NV = 1.1, you can observe one of the following warnings:</p><ul class="list _ul" id="compatibility-modes.md-1411d227"   ><li class="list__item" id="compatibility-modes.md-803fbe9a" ><code class="code " id="compatibility-modes.md-430dcf75"  >Runtime JAR files in the classpath have the version 1.0, which is older than the API version 1.1. Consider using the runtime of version 1.1, or pass \'-api-version 1.0\' explicitly to restrict the available APIs to the runtime of version 1.0.</code><p id="compatibility-modes.md-cbf7341d" >This means that you\'re using the Kotlin compiler 1.1 against the standard or reflection library of version 1.0. This can be handled in different ways:</p><ul class="list _ul" id="compatibility-modes.md-a4ef8e4b"   ><li class="list__item" id="compatibility-modes.md-18704ed3" ><p>If you intend to use the APIs from the 1.1 Standard Library, or language features that depend on those APIs, you should upgrade the dependency to the version 1.1.</p></li><li class="list__item" id="compatibility-modes.md-2f3e192" ><p>If you want to keep your code compatible with the 1.0 standard library, you can pass <code class="code " id="compatibility-modes.md-c2a3f51a"  >-api-version 1.0</code>.</p></li><li class="list__item" id="compatibility-modes.md-b8f7aa08" ><p>If you\'ve just upgraded to Kotlin 1.1 but can not use new language features yet (e.g. because some of your teammates may not have upgraded), you can pass <code class="code " id="compatibility-modes.md-88835709"  >-language-version 1.0</code>, which will restrict all APIs and language features to 1.0.</p></li></ul></li><li class="list__item" id="compatibility-modes.md-a03295a3" ><code class="code " id="compatibility-modes.md-570867af"  >Runtime JAR files in the classpath should have the same version. These files were found in the classpath: kotlin-reflect.jar (version 1.0) kotlin-stdlib.jar (version 1.1) Consider providing an explicit dependency on kotlin-reflect 1.1 to prevent strange errors Some runtime JAR files in the classpath have an incompatible version. Consider removing them from the classpath</code><p id="compatibility-modes.md-61d269b5" >This means that you have a dependency on libraries of different versions, for example the 1.1 standard library and the 1.0 reflection library. To prevent subtle errors at runtime, we recommend you to use the same version of all Kotlin libraries. In this case, consider adding an explicit dependency on the 1.1 reflection library.</p></li><li class="list__item" id="compatibility-modes.md-b3d07c91" ><code class="code " id="compatibility-modes.md-dd7d6272"  >Some JAR files in the classpath have the Kotlin Runtime library bundled into them. This may cause difficult to debug problems if there\'s a different version of the Kotlin Runtime library in the classpath. Consider removing these libraries from the classpath</code><p id="compatibility-modes.md-7b3e2de3" >This means that there\'s a library in the classpath which does not depend on the Kotlin standard library as a Gradle/Maven dependency, but is distributed in the same artifact with it (i.e. has it <em id="compatibility-modes.md-1052f17f" class=""  >bundled</em> ). Such a library may cause issues because standard build tools do not consider it an instance of the Kotlin standard library, thus it\'s not subject to the dependency version resolution mechanisms, and you can end up with several versions of the same library in the classpath. Consider contacting the authors of such a library and suggesting to use the Gradle/Maven dependency instead.</p></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="kotlin-foundation.md"  >Kotlin Foundation</h1><p id="kotlin-foundation.md-8385527f" >The Kotlin Foundation was created by JetBrains and Google with the mission to protect, promote and advance the development of the Kotlin programming language. The Foundation secures Kotlin\'s development and distribution as Free Software, meaning that it is able to be freely copied, modified and redistributed, including modifications to the official versions.</p><section class="chapter"  ><h2 id="kotlin-foundation.md-scope" data-toc="kotlin-foundation#kotlin-foundation.md-scope"  >Scope</h2><p id="kotlin-foundation.md-f48c9f9b" >The main functions of the Kotlin Foundation are:</p><ul class="list _ul" id="kotlin-foundation.md-99dd1c5e"   ><li class="list__item" id="kotlin-foundation.md-d4fcf68c" ><p>Holding the trademarks associated with the project</p></li><li class="list__item" id="kotlin-foundation.md-22575441" ><p>Appointing the Lead Language Designer</p></li><li class="list__item" id="kotlin-foundation.md-4179b101" ><p>Controlling incompatible changes to the language</p></li></ul><p id="kotlin-foundation.md-c58db17c" ><b id="kotlin-foundation.md-cfff5bfa" class=""  >Development</b>. The code for the project is developed openly on GitHub primarily by the team employed at JetBrains, with contributions from Google and others. The Foundation has no developers on its payroll. The respective contributors hold the copyright for the code they author. The code is distributed under the <a href="https://github.com/JetBrains/kotlin/tree/master/license" id="kotlin-foundation.md-7cca766c"   data-external="true" rel="noopener noreferrer" >Apache License, Version 2.0</a>.</p><p id="kotlin-foundation.md-9edc392b" ><b id="kotlin-foundation.md-afc2a4fc" class=""  >Trademarks</b>. The Kotlin trademark and associated marks, logos and domain names belong to the Kotlin Foundation. The Foundation permits the usage of the trademarks according to <a href="#guidelines.md" id="kotlin-foundation.md-757ca7c2"   >the Kotlin Brand Usage Guidelines</a>. All usages not permitted automatically, require explicit written permission from the Foundation.</p><p id="kotlin-foundation.md-ae8d5108" ><a name="" ></a> <b id="kotlin-foundation.md-98cd94b7" class=""  >Lead Language Designer</b> is in charge of all decisions regarding the development of the project and evolution of the language. The Foundation appoints the Lead Language Designer, but does not directly make decisions about the course of the project.</p><p id="kotlin-foundation.md-54c816c6" ><a name="" ></a> <b id="kotlin-foundation.md-17285aab" class=""  >Incompatible changes</b>. A special Language Committee appointed by the Foundation reviews the changes proposed by the Lead Language Designer and has the power to reject <a href="#kotlin-evolution.md-incompatible-changes" id="kotlin-foundation.md-9db1549e"   >incompatible changes</a> or require certain deprecation procedures to be carried out. The Language Committee has no power over compatible changes such as adding new features to the language. Compatible changes are made at the sole discretion of the Lead Language Designer. The Committee maintains a set of <a href="#language-committee-guidelines.md" id="kotlin-foundation.md-3e71f3f"   >guidelines</a> that are being consulted when making decisions. Meeting minutes of the Language Committee are available <a href="https://docs.google.com/document/d/1ReH84Cw_ZhGOUM_MdMQbLjzB0edXIeaFuBUF5molsuI/preview" id="kotlin-foundation.md-2c54ab4"   data-external="true" rel="noopener noreferrer" >online</a>.</p></section><section class="chapter"  ><h2 id="kotlin-foundation.md-structure" data-toc="kotlin-foundation#kotlin-foundation.md-structure"  >Structure</h2><p id="kotlin-foundation.md-bf432cd5" >The Kotlin Foundation is a nonprofit nonstock corporation registered in the state of Delaware, USA. The Foundation is governed by the Board of Directors that makes all decisions by voting. The Board appoints the Lead Language Designer and the members of the Language Committee.</p><p id="kotlin-foundation.md-fe3ae515" >The President and the Secretary are elected by the Board of Directors as well. The President acts as the chief officer of the Foundation and supervises its affairs and operations. The Secretary keeps record of all meetings of the Board and its committees, and keeps track of membership and notices to the members, directors and third parties.</p></section><section class="chapter"  ><h2 id="kotlin-foundation.md-current-personnel" data-toc="kotlin-foundation#kotlin-foundation.md-current-personnel"  >Current personnel</h2><p id="kotlin-foundation.md-d586475" >President: Maxim Shafirov (JetBrains)</p><p id="kotlin-foundation.md-453c32ec" >Secretary: David Winer (Google)</p><p id="kotlin-foundation.md-b80ed745" >Board of Directors:</p><ul class="list _ul" id="kotlin-foundation.md-62365fbb"   ><li class="list__item" id="kotlin-foundation.md-48bb6233" ><p>Maxim Shafirov (JetBrains)</p></li><li class="list__item" id="kotlin-foundation.md-e1d1c61" ><p>Roman Elizarov (JetBrains)</p></li><li class="list__item" id="kotlin-foundation.md-6039c84d" ><p>William R. Cook (University of Texas at Austin)</p></li><li class="list__item" id="kotlin-foundation.md-94cc1e2a" ><p>Grace Kloba (Google)</p></li><li class="list__item" id="kotlin-foundation.md-77f5523b" ><p>Anwar Ghuloum (Google)</p></li></ul><p id="kotlin-foundation.md-4006f65" >Lead Language Designer: Roman Elizarov (JetBrains)</p><p id="kotlin-foundation.md-912eda5f" >Language Committee:</p><ul class="list _ul" id="kotlin-foundation.md-7d6e9d25"   ><li class="list__item" id="kotlin-foundation.md-d7de5895" ><p>Roman Elizarov (JetBrains)</p></li><li class="list__item" id="kotlin-foundation.md-d44d3e7e" ><p>William R. Cook (University of Texas at Austin)</p></li><li class="list__item" id="kotlin-foundation.md-cd55f7d5" ><p>Jeffrey van Gogh (Google)</p></li></ul></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="language-committee-guidelines.md"  >Language Committee guidelines</h1><p id="language-committee-guidelines.md-ffc81fc2" >The Kotlin Language Committee has to approve every <a href="#kotlin-evolution.md-incompatible-changes" id="language-committee-guidelines.md-dd7a4470"   >incompatible change</a> before it lands in a stable version. The committee determines whether the change is appropriate and motivated enough to be introduced and what deprecation procedures have to be carried out to ensure comfortable migration for end users.</p><p id="language-committee-guidelines.md-9e1903d" >These guidelines describe the process the Committee follows and the criteria used for decision making. We realize that these criteria can not be fully formalized and treat them as general guidelines, not a mechanical set of rules.</p><section class="chapter"  ><h2 id="language-committee-guidelines.md-review-process" data-toc="language-committee-guidelines#language-committee-guidelines.md-review-process"  >Review process</h2><p id="language-committee-guidelines.md-98064d00" >Incompatible changes are submitted to the Language Committee by the <a href="#kotlin-foundation.md" id="language-committee-guidelines.md-1f0bf444"   >Lead Language Designer</a>. The Committee evaluates the implications of such changes, considering the following:</p><ul class="list _ul" id="language-committee-guidelines.md-78b790d2"   ><li class="list__item" id="language-committee-guidelines.md-ce41025" ><p>Substance: what is going to be changed</p></li><li class="list__item" id="language-committee-guidelines.md-2eedbce2" ><p>Impact: who will be affected by the change and in what ways</p></li><li class="list__item" id="language-committee-guidelines.md-11189c5d" ><p>Motivation: why the change is needed</p></li><li class="list__item" id="language-committee-guidelines.md-f62db0ff" ><p>Detectability: can problematic code be automatically detected</p></li><li class="list__item" id="language-committee-guidelines.md-521feb38" ><p>Migration: to what extent can the code be migrated automatically</p></li></ul><section class="chapter"  ><h3 id="language-committee-guidelines.md-estimating-impact" data-toc="language-committee-guidelines#language-committee-guidelines.md-estimating-impact"  >Estimating impact</h3><p id="language-committee-guidelines.md-b58299af" >When in doubt, we inspect large bodies of code available to us and test the implementations in EAP builds to collect information about the expected impact of a change.</p></section><section class="chapter"  ><h3 id="language-committee-guidelines.md-proposals" data-toc="language-committee-guidelines#language-committee-guidelines.md-proposals"  >Proposals</h3><p id="language-committee-guidelines.md-753509e9" >A proposal is usually written by a developer responsible for the change or the relevant subsystems. See the <a href="#submitting-incompatible-changes.md" id="language-committee-guidelines.md-606e7311"   >Guide to submitting incompatible changes</a>.</p><p id="language-committee-guidelines.md-fe953ee2" >When an issue has all the necessary details, it can be scheduled for review by the Language Committee. Approved proposals are to be implemented by the development team and shipped in the appropriate stable release.</p></section></section><section class="chapter"  ><h2 id="language-committee-guidelines.md-scope" data-toc="language-committee-guidelines#language-committee-guidelines.md-scope"  >Scope</h2><p id="language-committee-guidelines.md-cfd2a757" >Only features and components published as <a href="#components-stability.md-stability-levels-explained" id="language-committee-guidelines.md-e9a10d30"   >Stable</a> are in the scope of Language Committee. Besides, the Language Committee\'s scope is limited to the following:</p><ul class="list _ul" id="language-committee-guidelines.md-73f995b4"   ><li class="list__item" id="language-committee-guidelines.md-be656608" ><p>Language: syntax, static checks, execution semantics of language constructs</p></li><li class="list__item" id="language-committee-guidelines.md-5c40c92b" ><p>The interop subsystem of the language: how foreign declarations are seen from Kotlin, and how Kotlin declarations are seen from other languages</p></li><li class="list__item" id="language-committee-guidelines.md-15fa87a6" ><p>Compatibility of binary artifacts produced by kotlinc with one another and with other binaries (e.g. Java binaries)</p></li><li class="list__item" id="language-committee-guidelines.md-bd8ff3fc" ><p>Standard library: API and contracts of the declarations in kotlin-stdlib (and its extensions such as for <code class="code " id="language-committee-guidelines.md-3d8165d4"  >kotlin-stdlib-jdk7</code>)</p></li><li class="list__item" id="language-committee-guidelines.md-96969557" ><p>CLI parameters of the compiler except for the <code class="code " id="language-committee-guidelines.md-4499883b"  >-X/-XX</code> keys</p></li><li class="list__item" id="language-committee-guidelines.md-8309006b" ><p>KDoc syntax</p></li></ul><p id="language-committee-guidelines.md-5d2f3bd2" >For example, the following matters are out of scope for the Language Committee:</p><ul class="list _ul" id="language-committee-guidelines.md-db39b5bf"   ><li class="list__item" id="language-committee-guidelines.md-391e9454" ><p>Pre-stable language features &amp; APIs</p></li><li class="list__item" id="language-committee-guidelines.md-ff8cdd95" ><p>Build tools and plugins for them (e.g. Gradle support)</p></li><li class="list__item" id="language-committee-guidelines.md-2a4c1093" ><p>IDE and static analysis tools (other than the compiler)</p></li><li class="list__item" id="language-committee-guidelines.md-e3570f46" ><p>Java2Kotlin converter and other source code manipulation tools</p></li><li class="list__item" id="language-committee-guidelines.md-841b22" ><p>APIs and contracts of libraries other than the standard library</p></li><li class="list__item" id="language-committee-guidelines.md-11ab91a6" ><p>API of the compiler</p></li><li class="list__item" id="language-committee-guidelines.md-33cfb118" ><p>Scripting support and Compiler REPL</p></li><li class="list__item" id="language-committee-guidelines.md-d5b893bd" ><p>Internal packages of the standard library</p></li></ul><p id="language-committee-guidelines.md-f002ae59" >Also, see <a href="#language-committee-guidelines.md-appendix-a-examples-of-non-issues" id="language-committee-guidelines.md-5d7ff14d"   >Appendix A</a> for examples of changes that are not considered to be compatibility issues.</p></section><section class="chapter"  ><h2 id="language-committee-guidelines.md-migration-aids-and-deprecation" data-toc="language-committee-guidelines#language-committee-guidelines.md-migration-aids-and-deprecation"  >Migration aids and deprecation</h2><p id="language-committee-guidelines.md-b9ced2c6" >Normally, incompatible changes to stable features only land in feature releases. We announce the changes in a previous release (it may be an incremental update to the previous feature release, but should allow enough time for users to migrate their code).</p><p id="language-committee-guidelines.md-cc617872" >The announcement is best done through compiler warnings, or in some cases IDE inspections and/or other tools. If places in the code that should be changed in advance to prevent compatibility issues in the future can be detected automatically, we announce the change and publish detection tools.</p><p id="language-committee-guidelines.md-72e648e8" >If the necessary changes to user code can be automated, we publish a migration tool along with the announcement. Preferably, the IDE should suggest running the migration when it encounters deprecated constructs in the code.</p><p id="language-committee-guidelines.md-f99864c4" >When automatic detection and/or migration is not practically possible, we publish instructions on how user code should be adjusted.</p><section class="chapter"  ><h3 id="language-committee-guidelines.md-insignificant-changes" data-toc="language-committee-guidelines#language-committee-guidelines.md-insignificant-changes"  >Insignificant changes</h3><p id="language-committee-guidelines.md-c3fb5a27" >Some types of changes can be made without a deprecation cycle:</p><ul class="list _ul" id="language-committee-guidelines.md-848ade38"   ><li class="list__item" id="language-committee-guidelines.md-7be84e9d" ><p>Small fixes that virtually no users will encounter can normally be made right away (but still require committee review)</p></li><li class="list__item" id="language-committee-guidelines.md-4b259480" ><p>Bugs causing compiler errors in good code can be fixed right away</p></li><li class="list__item" id="language-committee-guidelines.md-98c0c4e0" ><p>Bugs causing bad code to compile, but always fail at runtime can be fixed right away</p></li></ul></section><section class="chapter"  ><h3 id="language-committee-guidelines.md-incompatible-changes-to-the-language" data-toc="language-committee-guidelines#language-committee-guidelines.md-incompatible-changes-to-the-language"  >Incompatible changes to the language</h3><p id="language-committee-guidelines.md-1b824823" >The typical deprecation cycle for an incompatible language change:</p><ul class="list _ul" id="language-committee-guidelines.md-2c1dc4c2"   ><li class="list__item" id="language-committee-guidelines.md-6d5cb063" >The change planned for version B is announced in release notes to a previous version A <ul class="list _ul" id="language-committee-guidelines.md-b7cd625d"   ><li class="list__item" id="language-committee-guidelines.md-84e56ad3" ><p>The compiler reports deprecation warnings (messages provide some guidance to possible replacements)</p></li><li class="list__item" id="language-committee-guidelines.md-8efa28c9" ><p>Automated migration tools are available in the IDE</p></li><li class="list__item" id="language-committee-guidelines.md-32a85841" ><p>For eligible changes, the <code class="code " id="language-committee-guidelines.md-a94ca8be"  >-progressive</code> flag enables the change before version B (e.g. in version A or an incremental update to it)</p></li></ul></li><li class="list__item" id="language-committee-guidelines.md-6a859a4c" >Version B ships with the change enabled (e.g. warnings turn into errors) <ul class="list _ul" id="language-committee-guidelines.md-5dedac0a"   ><li class="list__item" id="language-committee-guidelines.md-24f5b6ea" ><p>Migrations aids are kept available in the IDE</p></li><li class="list__item" id="language-committee-guidelines.md-4dfbafcb" ><p>Backward compatibility flags in the compiler (<code class="code " id="language-committee-guidelines.md-10fb0f25"  >-language-version</code> and <code class="code " id="language-committee-guidelines.md-f6ec6ac5"  >-api-version</code>) support the behaviour of version A</p></li></ul></li><li class="list__item" id="language-committee-guidelines.md-31cb58da" ><p>Future versions can remove migration aids and compatibility flags, but a version capable of automated migration should be kept available for a reasonable amount of time</p></li></ul></section><section class="chapter"  ><h3 id="language-committee-guidelines.md-incompatible-changes-to-the-libraries" data-toc="language-committee-guidelines#language-committee-guidelines.md-incompatible-changes-to-the-libraries"  >Incompatible changes to the libraries</h3><p id="language-committee-guidelines.md-a9181a4b" >The typical deprecation cycle for libraries:</p><ul class="list _ul" id="language-committee-guidelines.md-e96fb746"   ><li class="list__item" id="language-committee-guidelines.md-1409679a" >The change planned for version B is announced in release notes to a previous version A <ul class="list _ul" id="language-committee-guidelines.md-7c20749a"   ><li class="list__item" id="language-committee-guidelines.md-1843c095" ><p>Relevant declarations are marked as <code class="code " id="language-committee-guidelines.md-813fcef2"  >@Deprecated(level = WARNING)</code></p></li><li class="list__item" id="language-committee-guidelines.md-a4014a3e" ><p>Migration is automated through ReplaceWith or sometimes custom tooling</p></li><li class="list__item" id="language-committee-guidelines.md-1cb5d565" ><p>In some cases an optional support dependency that exposes the same API is published</p></li></ul></li><li class="list__item" id="language-committee-guidelines.md-a35ff067" ><p>Version B marks the declarations as <code class="code " id="language-committee-guidelines.md-2d1c8607"  >@Deprecated(level = ERROR)</code></p></li><li class="list__item" id="language-committee-guidelines.md-1b25d56b" >Version C can mark the declarations as <code class="code " id="language-committee-guidelines.md-77404c0f"  >@Deprecated(level = HIDDEN)</code><ul class="list _ul" id="language-committee-guidelines.md-2b3c55f6"   ><li class="list__item" id="language-committee-guidelines.md-455d3584" ><p>Note: for inline functions, complete removal is sometimes possible at this point</p></li></ul></li></ul></section></section><section class="chapter"  ><h2 id="language-committee-guidelines.md-changes-to-these-guidelines" data-toc="language-committee-guidelines#language-committee-guidelines.md-changes-to-these-guidelines"  >Changes to these guidelines</h2><p id="language-committee-guidelines.md-a8ba074b" >Changes to these guidelines need to be approved by the Kotlin Language Committee.</p><p id="language-committee-guidelines.md-1138424b" >Any proposed change needs to be published in advance providing a reasonable time to allow for comments on the change by the Kotlin Community.</p></section><section class="chapter"  ><h2 id="language-committee-guidelines.md-appendix-a-examples-of-non-issues" data-toc="language-committee-guidelines#language-committee-guidelines.md-appendix-a-examples-of-non-issues"  >Appendix A. Examples of non-issues</h2><p id="language-committee-guidelines.md-ad33fee4" >The following cases are not considered to be compatibility issues and thus are out of scope for the Language Committee.</p><section class="chapter"  ><h3 id="language-committee-guidelines.md-changes-related-to-binaries-and-translation" data-toc="language-committee-guidelines#language-committee-guidelines.md-changes-related-to-binaries-and-translation"  >Changes related to binaries and translation</h3><ul class="list _ul" id="language-committee-guidelines.md-e5b64818"   ><li class="list__item" id="language-committee-guidelines.md-54eca22" ><p>A binary compiled against kotlin-stdlib fails to link or run because kotlin-stdlib is absent or outdated (older version than used during compilation).</p></li><li class="list__item" id="language-committee-guidelines.md-c722e245" ><p>Adding generic parameters to existing declarations does not change the ABI on the JVM (due to erasure).</p></li><li class="list__item" id="language-committee-guidelines.md-d8efe94c" ><p>Changes to signatures of functions marked <code class="code " id="language-committee-guidelines.md-acc01dea"  >@InlineOnly</code> are not changing the ABI on the JVM.</p></li><li class="list__item" id="language-committee-guidelines.md-99d48b4a" ><p>Adding supertypes to existing library classes/interfaces.</p></li></ul></section><section class="chapter"  ><h3 id="language-committee-guidelines.md-source-language-changes" data-toc="language-committee-guidelines#language-committee-guidelines.md-source-language-changes"  >Source language changes</h3><ul class="list _ul" id="language-committee-guidelines.md-880b42b9"   ><li class="list__item" id="language-committee-guidelines.md-9c224229" ><p>Code compilable with a newer version fails to compile with an older version (e.g. due to usages of new language features).</p></li><li class="list__item" id="language-committee-guidelines.md-5066e2e9" ><p>The code breaks only if the user alters the build configuration or compiler settings explicitly (i.e. in addition to advancing the compiler version).</p></li></ul></section><section class="chapter"  ><h3 id="language-committee-guidelines.md-library-changes" data-toc="language-committee-guidelines#language-committee-guidelines.md-library-changes"  >Library changes</h3><ul class="list _ul" id="language-committee-guidelines.md-bbe1f0f2"   ><li class="list__item" id="language-committee-guidelines.md-e1d5bded" ><p>Relaxing a contract on existing APIs.</p></li><li class="list__item" id="language-committee-guidelines.md-487f413" ><p>Clarification for unspecified behaviors.</p></li><li class="list__item" id="language-committee-guidelines.md-3d290e76" ><p>Changes in <code class="code " id="language-committee-guidelines.md-429cf42e"  >hashCode()</code> are not breaking changes.</p></li><li class="list__item" id="language-committee-guidelines.md-9689c3" ><p>Changes in <code class="code " id="language-committee-guidelines.md-fbd464b1"  >toString()</code> on other than <code class="code " id="language-committee-guidelines.md-b0a3197c"  >Boolean</code>, <code class="code " id="language-committee-guidelines.md-723451db"  >Numeric</code>, and <code class="code " id="language-committee-guidelines.md-7ef7eebb"  >String</code> types are not breaking changes.</p></li><li class="list__item" id="language-committee-guidelines.md-1cd12e1f" ><p>Issues connected with loading of two different versions of the same library at runtime or link time.</p></li></ul></section><section class="chapter"  ><h3 id="language-committee-guidelines.md-changes-affecting-performance" data-toc="language-committee-guidelines#language-committee-guidelines.md-changes-affecting-performance"  >Changes affecting performance</h3><p id="language-committee-guidelines.md-acb143e6" >We recognize that runtime performance and bytecode size are important metrics, and will make reasonable effort to keep them in a good shape, but we don\'t consider every slowdown (e.g. in edge cases or in very cold code) and every extra byte in the classfile a breaking change.</p></section></section><section class="chapter"  ><h2 id="language-committee-guidelines.md-appendix-b-assumptions-for-pragmatic-language-evolution" data-toc="language-committee-guidelines#language-committee-guidelines.md-appendix-b-assumptions-for-pragmatic-language-evolution"  >Appendix B. Assumptions for pragmatic language evolution</h2><p id="language-committee-guidelines.md-e2ae82ce" >We make decisions on language changes under the assumption that most user code is designed with the following considerations in mind. We do not optimize for smooth migration that disregards these considerations.</p><section class="chapter"  ><h3 id="language-committee-guidelines.md-availability-of-the-standard-library" data-toc="language-committee-guidelines#language-committee-guidelines.md-availability-of-the-standard-library"  >Availability of the standard library</h3><p id="language-committee-guidelines.md-7796d504" >All Kotlin code should be linked and run against the Standard Library of at least the same version as specified by the <code class="code " id="language-committee-guidelines.md-c4acc87"  >-api-version</code> upon compilation.</p></section><section class="chapter"  ><h3 id="language-committee-guidelines.md-type-inference-and-overload-resolution-algorithms" data-toc="language-committee-guidelines#language-committee-guidelines.md-type-inference-and-overload-resolution-algorithms"  >Type inference and overload resolution algorithms</h3><p id="language-committee-guidelines.md-cff389f1" >Improvements in type inference algorithms may result in more precise static types known for some expressions, this may cause changes in overload resolution and even in signatures of declarations that don\'t specify return types explicitly.</p><p id="language-committee-guidelines.md-80e3bd50" ><b id="language-committee-guidelines.md-e96a6387" class=""  >Overloads of the same function should be intended to do the same thing</b>. Language improvements may cause a different overload to be selected in a new language version.</p><p id="language-committee-guidelines.md-2a4253de" ><b id="language-committee-guidelines.md-e4aee877" class=""  >Declarations sensitive to API/ABI stability (e.g. public APIs) should specify return types explicitly</b>. Language improvements may cause a different type to be inferred for a given body expression. Also, some innocuous-looking changes in the source code, done by the user, may cause similar effects.</p></section><section class="chapter"  ><h3 id="language-committee-guidelines.md-non-public-api" data-toc="language-committee-guidelines#language-committee-guidelines.md-non-public-api"  >Non-public API</h3><p id="language-committee-guidelines.md-b1402500" ><b id="language-committee-guidelines.md-6e54b0f7" class=""  >Internal declarations have no separate compilation guarantees</b>. While sometimes accessible from other languages (e.g. Java), declarations marked <b id="language-committee-guidelines.md-ecd10990" class=""  >internal</b> in Kotlin should not be called from outside the module they are declared in.</p><p id="language-committee-guidelines.md-1c33842" ><b id="language-committee-guidelines.md-81869517" class=""  >Private and synthetic declarations should not be relied upon</b>. On some platforms, reflection has access to declarations marked private and synthetic. We do not provide any compatibility guarantees for code that relies on such access.</p></section><section class="chapter"  ><h3 id="language-committee-guidelines.md-impedance-mismatches-across-language-boundaries" data-toc="language-committee-guidelines#language-committee-guidelines.md-impedance-mismatches-across-language-boundaries"  >Impedance mismatches across language boundaries</h3><p id="language-committee-guidelines.md-7d61bbc4" >A Kotlin API exposed to another language may yield values that work in that language differently from Kotlin. For example, Kotlin\'s unsigned integers will look signed for Java clients, and the programmer that works with the same API in the Java code will be surprised by getting different result. While an undesirable situation, this is sometimes inevitable, and should not be considered a breaking change (it does not fall under the intuitive definition of one anyway).</p></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="submitting-incompatible-changes.md"  >Guide to submitting incompatible changes</h1><p id="submitting-incompatible-changes.md-d026883c" >A proposal is usually written by a developer responsible for the change or the relevant subsystems. It has to be described in the <a href="https://youtrack.jetbrains.com/issues/KT?q=%23for-language-committee%20%23Unresolved%20tag:%20-language-committee-approved" id="submitting-incompatible-changes.md-e0bab752"   data-external="true" rel="noopener noreferrer" >issue tracker</a> and marked with the &quot;for-language-committee&quot; tag. To provide all the necessary details, issue in the tracker should follow the template below.</p><section class="chapter"  ><h2 id="submitting-incompatible-changes.md-issue-template" data-toc="submitting-incompatible-changes#submitting-incompatible-changes.md-issue-template"  >Issue template</h2><p id="submitting-incompatible-changes.md-12a3cf5a" >The issue should follow this template:</p><div class="code-block" data-lang="plaintext" id="submitting-incompatible-changes.md-c1074ea4"         ># Classification\n\nType of change: &lt;see guide below&gt;\nMotivation types: &lt;see guide below&gt;\nImpact types: &lt;see guide below&gt;\nDetection and Migration modes: &lt;see guide below&gt;\n\n# Background\n&gt; Optional section. Describe the background of the issue and possibly some motivation\n# Existing behaviour\n&gt; 1. (Minimal) code example\n&gt; 2. What\'s wrong with it\n&gt; 3. Detailed explanation of why and how this happens\n&gt; 4. Any known reasoning behind such behavior\n&gt; 5. Affected versions: when did the problem appear first? \n\n# Proposed changes\n&gt; 1. Proposed changes\n&gt; 2. How it fixes the issue?\n\n# Impact\n&gt; Examples of negative effects: changes of behavior, previously compiled code forbidden, etc.\n&gt; If possible: \n&gt; * number of impacted users\n&gt; * how common this pattern is\n&gt; * if we believe it\'s a rare case, why\n&gt; * is automated migration possible\n\n# Migration plan\n&gt; Provide a detailed step-by-step migration plan\n&gt; Can the proposed changes be implemented immediately in the progressive mode?\n</div></section><section class="chapter"  ><h2 id="submitting-incompatible-changes.md-classification" data-toc="submitting-incompatible-changes#submitting-incompatible-changes.md-classification"  >Classification</h2><p id="submitting-incompatible-changes.md-aac0d2d" >The <b id="submitting-incompatible-changes.md-8f6a66da" class=""  >Classification</b> section needs to classify the change, without describing its essence. The classification is used by the Committee to quickly assess the severity of the issue. Here are the common categories to be used.</p><p id="submitting-incompatible-changes.md-f5aced33" >This section can be used as a checklist of things that need to be evaluated/thought of.</p><section class="chapter"  ><h3 id="submitting-incompatible-changes.md-type-of-change" data-toc="submitting-incompatible-changes#submitting-incompatible-changes.md-type-of-change"  >Type of change</h3><p id="submitting-incompatible-changes.md-cda9a1e7" >Specify one or more of the following:</p><ul class="list _ul" id="submitting-incompatible-changes.md-ecdfad03"   ><li class="list__item" id="submitting-incompatible-changes.md-6b727899" ><p>New errors are introduced</p></li><li class="list__item" id="submitting-incompatible-changes.md-534daafb" ><p>Some valid language constructs change their meaning</p></li><li class="list__item" id="submitting-incompatible-changes.md-592abc02" >Change in the standard library <ul class="list _ul" id="submitting-incompatible-changes.md-663c4f37"   ><li class="list__item" id="submitting-incompatible-changes.md-52605005" >API removal <ul class="list _ul" id="submitting-incompatible-changes.md-d7b3b206"   ><li class="list__item" id="submitting-incompatible-changes.md-bd557b7d" ><p>Affecting ABI</p></li><li class="list__item" id="submitting-incompatible-changes.md-6d07061e" ><p>Not affecting ABI</p></li></ul></li><li class="list__item" id="submitting-incompatible-changes.md-6a28525c" ><p>API moved to different artifact</p></li><li class="list__item" id="submitting-incompatible-changes.md-7002e4fa" >API type signature change <ul class="list _ul" id="submitting-incompatible-changes.md-23be6411"   ><li class="list__item" id="submitting-incompatible-changes.md-752444c" ><p>Affecting ABI</p></li><li class="list__item" id="submitting-incompatible-changes.md-e43b45df" ><p>Not affecting ABI</p></li></ul></li><li class="list__item" id="submitting-incompatible-changes.md-b2c9970f" ><p>Contract refinement</p></li><li class="list__item" id="submitting-incompatible-changes.md-7862bd0d" ><p>Other contract changes</p></li></ul></li><li class="list__item" id="submitting-incompatible-changes.md-3dadf3f6" >Change in compilation strategy <ul class="list _ul" id="submitting-incompatible-changes.md-5b3df31a"   ><li class="list__item" id="submitting-incompatible-changes.md-f7706452" ><p>Change in ABI</p></li><li class="list__item" id="submitting-incompatible-changes.md-b803ce56" ><p>Change in the behavior of generated code</p></li></ul></li><li class="list__item" id="submitting-incompatible-changes.md-288209a4" ><p>Change in interoperability layer(s)</p></li></ul></section><section class="chapter"  ><h3 id="submitting-incompatible-changes.md-motivation-types" data-toc="submitting-incompatible-changes#submitting-incompatible-changes.md-motivation-types"  >Motivation types</h3><p id="submitting-incompatible-changes.md-3857538d" >Specify one or more of the following:</p><ul class="list _ul" id="submitting-incompatible-changes.md-ed9b6573"   ><li class="list__item" id="submitting-incompatible-changes.md-588a69ae" ><p>User code fails with exception(s)</p></li><li class="list__item" id="submitting-incompatible-changes.md-52730e24" ><p>Compiler/Tooling fails with exception(s)</p></li><li class="list__item" id="submitting-incompatible-changes.md-b0e0868e" ><p>The implementation does not abide by a published spec or documentation</p></li><li class="list__item" id="submitting-incompatible-changes.md-314a4cdd" ><p>Type safety guarantees are not met (including fail-fast behavior for non-null types)</p></li><li class="list__item" id="submitting-incompatible-changes.md-5b434438" ><p>Separate/incremental compilation guarantees are not met</p></li><li class="list__item" id="submitting-incompatible-changes.md-b230d3c1" ><p>API stability guarantees are not met</p></li><li class="list__item" id="submitting-incompatible-changes.md-fe24b06d" ><p>ABI stability guarantees are not met</p></li><li class="list__item" id="submitting-incompatible-changes.md-5734c107" ><p>Implementation changes are required for implementation design/architectural reasons</p></li><li class="list__item" id="submitting-incompatible-changes.md-a6c8e43b" >Problematic/meaningless usage patterns need to be discouraged/blocked (e.g. counterintuitive behaviors) <ul class="list _ul" id="submitting-incompatible-changes.md-475ecab5"   ><li class="list__item" id="submitting-incompatible-changes.md-5b1d27d9" ><p>Code is error-prone</p></li><li class="list__item" id="submitting-incompatible-changes.md-96e18809" ><p>Code can\'t be compiled correctly</p></li></ul></li><li class="list__item" id="submitting-incompatible-changes.md-c8782726" ><p>Some prospective language changes are blocked</p></li><li class="list__item" id="submitting-incompatible-changes.md-2d48a8db" ><p>Inconsistency in the design (things are done differently in different contexts)</p></li><li class="list__item" id="submitting-incompatible-changes.md-fbf89581" ><p>Redundant/outdated mechanism</p></li></ul></section><section class="chapter"  ><h3 id="submitting-incompatible-changes.md-impact-types" data-toc="submitting-incompatible-changes#submitting-incompatible-changes.md-impact-types"  >Impact types</h3><ul class="list _ul" id="submitting-incompatible-changes.md-f8cc5872"   ><li class="list__item" id="submitting-incompatible-changes.md-ef98a3d3" ><b id="submitting-incompatible-changes.md-620d58a8" class=""  >Compilation</b>. Some code that used to compile won\'t compile any more <ul class="list _ul" id="submitting-incompatible-changes.md-4f01e9fe"   ><li class="list__item" id="submitting-incompatible-changes.md-dfd76358" ><p>Such code always caused the compiler to fail with exception</p></li><li class="list__item" id="submitting-incompatible-changes.md-17326d0f" ><p>Such code always threw an exception immediately upon execution or could not link</p></li><li class="list__item" id="submitting-incompatible-changes.md-6d15635c" ><p>Such code inevitably caused exceptions to be thrown somewhere down the line after it was executed</p></li><li class="list__item" id="submitting-incompatible-changes.md-40664def" >There were cases when such code worked with no exceptions <ul class="list _ul" id="submitting-incompatible-changes.md-5382ebaf"   ><li class="list__item" id="submitting-incompatible-changes.md-eb1ef85a" ><p>There was a warning reported on all such code</p></li><li class="list__item" id="submitting-incompatible-changes.md-cb494a74" ><p>Some such code could compile without any warnings</p></li></ul></li></ul></li><li class="list__item" id="submitting-incompatible-changes.md-30a77065" ><b id="submitting-incompatible-changes.md-9d367ede" class=""  >Binaries</b>. Some binary metadata will change after recompilation <ul class="list _ul" id="submitting-incompatible-changes.md-97b2cea"   ><li class="list__item" id="submitting-incompatible-changes.md-95cf8462" >Internal (and maybe private) signatures <ul class="list _ul" id="submitting-incompatible-changes.md-b279d781"   ><li class="list__item" id="submitting-incompatible-changes.md-6b8ca28f" ><p>None of them could have been called from other languages</p></li><li class="list__item" id="submitting-incompatible-changes.md-1f7cdef6" ><p>Some of them may have been callable from other languages (Java/JS/C/Swift/...)</p></li></ul></li><li class="list__item" id="submitting-incompatible-changes.md-3061107f" ><p>Public and/or protected signatures may change</p></li></ul></li><li class="list__item" id="submitting-incompatible-changes.md-bea5175c" ><b id="submitting-incompatible-changes.md-ac4b0bc6" class=""  >Behavior</b> changes <ul class="list _ul" id="submitting-incompatible-changes.md-d80e3b30"   ><li class="list__item" id="submitting-incompatible-changes.md-19bed640" >Exceptions <ul class="list _ul" id="submitting-incompatible-changes.md-c5761326"   ><li class="list__item" id="submitting-incompatible-changes.md-e5beb335" >Some exceptions may change their type or place, but all code that ran without exceptions keeps doing so <ul class="list _ul" id="submitting-incompatible-changes.md-37b5e692"   ><li class="list__item" id="submitting-incompatible-changes.md-dac143a8" ><p>Some exceptions can be thrown earlier than before</p></li><li class="list__item" id="submitting-incompatible-changes.md-2bb1ac91" ><p>Some exceptions can be thrown later than before</p></li><li class="list__item" id="submitting-incompatible-changes.md-dbd45acd" >Some exceptions change their type, but not the point of execution at which they are thrown <ul class="list _ul" id="submitting-incompatible-changes.md-6c7ad65d"   ><li class="list__item" id="submitting-incompatible-changes.md-da1edefd" ><p>The new type is a subtype of the old one</p></li><li class="list__item" id="submitting-incompatible-changes.md-46f8856f" ><p>The new type is not a subtype of the old one</p></li></ul></li></ul></li><li class="list__item" id="submitting-incompatible-changes.md-61bb5898" ><p>Some code that compiled and ran without exceptions will throw exceptions in the new version</p></li></ul></li><li class="list__item" id="submitting-incompatible-changes.md-25df245e" >The behavior in question belongs under a previously released specification, contract or official documentation <ul class="list _ul" id="submitting-incompatible-changes.md-d39dbfbe"   ><li class="list__item" id="submitting-incompatible-changes.md-a972b799" ><p>By the contract, the old behavior is incorrect (thus a fix is needed)</p></li><li class="list__item" id="submitting-incompatible-changes.md-1769bac5" >The contract doesn\'t specify this behavior <ul class="list _ul" id="submitting-incompatible-changes.md-98fd6373"   ><li class="list__item" id="submitting-incompatible-changes.md-542f22d3" ><p>The new behaviour needs to be specified</p></li><li class="list__item" id="submitting-incompatible-changes.md-78a4a713" ><p>The new behavior will remain unspecified</p></li></ul></li><li class="list__item" id="submitting-incompatible-changes.md-88361904" ><p>The new behavior contradicts the contract (i.e. the contract has to be changed)</p></li></ul></li></ul></li><li class="list__item" id="submitting-incompatible-changes.md-8b88384d" ><b id="submitting-incompatible-changes.md-d8b38e06" class=""  >Performance and code size</b><ul class="list _ul" id="submitting-incompatible-changes.md-5bc526d"   ><li class="list__item" id="submitting-incompatible-changes.md-4e2ca714" ><p>Some code may run slower (including &quot;small&quot; changes like extra checks and indirections)</p></li><li class="list__item" id="submitting-incompatible-changes.md-46243a76" ><p>Some code may make more allocations or otherwise consume more memory</p></li><li class="list__item" id="submitting-incompatible-changes.md-a61936b1" >Code size may increase <ul class="list _ul" id="submitting-incompatible-changes.md-e8b8c56b"   ><li class="list__item" id="submitting-incompatible-changes.md-fa0a5c99" ><p>The increase in code size is constant regardless of the source</p></li><li class="list__item" id="submitting-incompatible-changes.md-8f906195" ><p>The increase in code size is proportional to some parameters of the source</p></li></ul></li></ul></li></ul></section><section class="chapter"  ><h3 id="submitting-incompatible-changes.md-detection-and-migration-modes" data-toc="submitting-incompatible-changes#submitting-incompatible-changes.md-detection-and-migration-modes"  >Detection and migration modes</h3><ul class="list _ul" id="submitting-incompatible-changes.md-be6d9fb9"   ><li class="list__item" id="submitting-incompatible-changes.md-61c391e8" ><p>All code locations affected by this change can be accurately detected statically</p></li><li class="list__item" id="submitting-incompatible-changes.md-13224632" ><p>Some, but not all code locations affected by this change can be accurately detected statically</p></li><li class="list__item" id="submitting-incompatible-changes.md-be9182f0" ><p>No code locations affected by this change can be accurately detected statically</p></li><li class="list__item" id="submitting-incompatible-changes.md-4296a2ba" ><p>Migration can be fully automated</p></li><li class="list__item" id="submitting-incompatible-changes.md-c72e72f6" ><p>Some automated migration is possible</p></li><li class="list__item" id="submitting-incompatible-changes.md-6a1e53cb" ><p>Migration can\'t be automated</p></li></ul></section></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="guidelines.md"  >Kotlin brand usage guidelines</h1><p id="guidelines.md-65dd682f" >One of the goals of The Kotlin Foundation is to protect the use of the Kotlin word and to make sure it is not misused. The following guidelines provide guidance on how to reference the Kotlin word trademark (“Trademark”) in an approved manner while ensuring the Trademark remains subject to protection under applicable laws around the world, and continues to serve as a source indicator for the Kotlin programming language and related offerings.</p><p id="guidelines.md-f5cbfac3" >Any use of the Trademark other than those described in these Guidelines must be approved in advance. Please contact the Kotlin Foundation to request an express trademark license if you desire to use the Kotlin trademark, or a derivative of the Kotlin trademark, in a manner not permitted under these Guidelines. To submit a usage request, please <a href="https://surveys.jetbrains.com/s3/request-for-permission-of-kotlin-trademark-usage" id="guidelines.md-dab9521b"   data-external="true" rel="noopener noreferrer" >contact us</a>, clearly describing the intended usage and duration.</p><section class="chapter"  ><h2 id="guidelines.md-general-goals" data-toc="guidelines#guidelines.md-general-goals"  >General goals</h2><p id="guidelines.md-eb3ce9cd" >We want the word Kotlin to refer to the Kotlin Programming Language, and we want to avoid it being used to refer to any other programming language, or used in any way that may imply that the language is not free nor open source.</p></section><section class="chapter"  ><h2 id="guidelines.md-permitted-uses" data-toc="guidelines#guidelines.md-permitted-uses"  >Permitted uses</h2><p id="guidelines.md-c97d2ee7" >Given the open nature of Kotlin, you may use the Trademark to refer to the Kotlin programming language. Examples of these references include the following:</p><ul class="list _ul" id="guidelines.md-5bb31587"   ><li class="list__item" id="guidelines.md-3cd9a333" ><p>Identify that your software is written in the Kotlin programming language</p></li><li class="list__item" id="guidelines.md-5af65883" ><p>Is compatible with the Kotlin programming language</p></li><li class="list__item" id="guidelines.md-b9057e4a" ><p>Targets the Kotlin programming language</p></li><li class="list__item" id="guidelines.md-a6ce382f" ><p>Is for use with the Kotlin programming language</p></li><li class="list__item" id="guidelines.md-396c206f" ><p>Contains the Kotlin programming language.</p></li><li class="list__item" id="guidelines.md-5d8094c4" ><p>Aims to promote or teach the Kotlin programming language</p></li></ul><p id="guidelines.md-cda09168" >The use must be referential and describe the relationship of your products or services to the Kotlin programming language.</p></section><section class="chapter"  ><h2 id="guidelines.md-unpermitted-uses" data-toc="guidelines#guidelines.md-unpermitted-uses"  >Unpermitted uses</h2><p id="guidelines.md-92a22ee0" >The Trademark may never be used in a manner that would cause confusion as to JetBrains, Google, or the Kotlin Foundation’s sponsorship, affiliation, or endorsement, including as part of a company name, product name, domain name, or business trading name. Other than as allowed herein, the Kotlin word mark should not be combined with other trademarks, terms, or source identifiers.</p><p id="guidelines.md-6e767444" >Under no circumstances can you claim any trademark rights in the Kotlin name or attempt to register a name or source identifier that incorporates the Kotlin trademark or logo, or anything confusingly thereto, as a trademark, domain name, business name or other source identifier.</p></section><section class="chapter"  ><h2 id="guidelines.md-usage-guidelines" data-toc="guidelines#guidelines.md-usage-guidelines"  >Usage guidelines</h2><p id="guidelines.md-9465de01" >Please follow these guidelines when referencing the Trademark:</p><ul class="list _ul" id="guidelines.md-85631a22"   ><li class="list__item" id="guidelines.md-c74887d7" ><p>The first or most prominent mention of the Kotlin trademark should be immediately followed by the TM symbol. For example &quot;Kotlin™ ...&quot; This requirement is waived in all contexts where such marks are not normally included, such as non-marketing emails, online discussions, and academic papers. We encourage the use of the TM symbol whenever possible, but recognize that many non-commercial and informal uses will omit it.</p></li><li class="list__item" id="guidelines.md-b14c2de0" ><p>Where identifying that a product or service is built on the Kotlin programming language or runs the Kotlin programming language, use the product’s own name followed by “in Kotlin™”, “for Kotlin™”, “compatible with Kotlin™”, “running Kotlin™” etc. Do not incorporate Kotlin into the product name.</p></li><li class="list__item" id="guidelines.md-c18bf864" ><p>User groups, communities and/or meet-ups should follow the naming convention &quot; Kotlin User Group&quot; where represents the location and optionally other wordings. These entities should also prominently disclaim any affiliation with or endorsement by The Kotlin Foundation.</p></li><li class="list__item" id="guidelines.md-3cffe906" ><p>Do not display the word Kotlin using any different stylization, color, or font from the surrounding text.</p></li><li class="list__item" id="guidelines.md-23e49bb8" ><p>Don’t use the trademark as verb (“Kotlin your code”), or create derivatives of it such as “Kotlinize”, etc.</p></li><li class="list__item" id="guidelines.md-b2e8b52a" ><p>Do not use Kotlin in possessive form (i.e. Kotlin’s).</p></li><li class="list__item" id="guidelines.md-8451af03" ><p>Do not use alternative spellings (e.g., “Ktln”).</p></li><li class="list__item" id="guidelines.md-76b362da" ><p>In certain usage context, and at the discretion of the Trademark Subcommittee of The Kotlin Foundation, you may need to add a disclaimer on your site, publication, book, product, etc. where it clearly indicates that the product and/or service provided is not associated with The Kotlin Foundation.</p></li></ul></section><section class="chapter"  ><h2 id="guidelines.md-example-usages" data-toc="guidelines#guidelines.md-example-usages"  >Example usages</h2><p id="guidelines.md-867dcd05" ><b id="guidelines.md-f7b0b252" class=""  >User groups and Kotlin meetups</b> A valid name for a user group could be “San Diego Kotlin User Group” If you’re a user group or Kotlin meetup, please use the <a href="http://kotlinlang.org/user-groups/branding.html" id="guidelines.md-98cb9f75"   data-external="true" rel="noopener noreferrer" >User Group assets provided</a>.</p><p id="guidelines.md-b5f2be33" ><b id="guidelines.md-6ada992d" class=""  >Events</b> If you’re organising a conference or educational event, you can use the word Kotlin to refer to the technology that the event covers. However, Kotlin cannot be contained in the brand name for your conference or educational event (such as KotlinConf or Kotlin Conference). Instead, you should use your own brand name, but indicate that it is a conference for “Kotlin Language Users.” Your conference or educational event title also should not cause any confusion or suggest any affiliation with or sponsorship by the Kotlin Foundation. Example of appropriate usages could be “XYZ Conference for Kotlin” with XYZ being your own brand name.</p><p id="guidelines.md-e725920d" ><b id="guidelines.md-404d7955" class=""  >Other commercial or non-commercial names</b> Whether you’re referring to a product, company or service, you shouldn’t incorporate Kotlin as your brand name, i.e. your company cannot be called “Kotlin Consulting” or “Kotlin IDE”. It can however indicate that you provide consulting for the Kotlin programming language as part of the description. For example, XYZ Consulting, which focuses on the Kotlin programming language.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="foundation-faq.md"  >Kotlin Foundation FAQ</h1><section class="chapter"  ><h2 id="foundation-faq.md-how-can-i-contribute-or-provide-feedback-to-kotlin" data-toc="foundation-faq#foundation-faq.md-how-can-i-contribute-or-provide-feedback-to-kotlin"  >How can I contribute or provide feedback to Kotlin?</h2><p id="foundation-faq.md-5ba9868b" >Kotlin is an open source project, and there are many ways you can contribute:</p><ul class="list _ul" id="foundation-faq.md-493431de"   ><li class="list__item" id="foundation-faq.md-803f02b9" ><p><b id="foundation-faq.md-8249fbdb" class=""  >Language features.</b> Please use the <a href="https://github.com/Kotlin/KEEP" id="foundation-faq.md-35db8fc1"   data-external="true" rel="noopener noreferrer" >Kotlin Evolution and Enhancement process (KEEP)</a> if you\'d like to make a proposal for the Kotlin programming language.</p></li><li class="list__item" id="foundation-faq.md-ebefddbb" ><p><b id="foundation-faq.md-5d869753" class=""  >Code contributions.</b> Please refer to <a href="https://github.com/jetbrains/kotlin#contributing" id="foundation-faq.md-6cd5b8fa"   data-external="true" rel="noopener noreferrer" >Contributions section</a> at the Kotlin GitHub repository.</p></li><li class="list__item" id="foundation-faq.md-57d4ed5" ><p><b id="foundation-faq.md-89472379" class=""  >Filing issues or suggestions.</b> Please use the <a href="https://youtrack.jetbrains.com/issues/KT" id="foundation-faq.md-707f08ba"   data-external="true" rel="noopener noreferrer" >Kotlin Issue Tracker</a> to file issues or suggestions.</p></li></ul></section><section class="chapter"  ><h2 id="foundation-faq.md-how-can-i-get-more-involved-with-the-kotlin-community" data-toc="foundation-faq#foundation-faq.md-how-can-i-get-more-involved-with-the-kotlin-community"  >How can I get more involved with the Kotlin community?</h2><p id="foundation-faq.md-fcc14be8" >There are many online and in-person Kotlin communities. Please visit the <a href="http://kotlinlang.org/community/" id="foundation-faq.md-e865100a"   data-external="true" rel="noopener noreferrer" >Kotlin community page</a> to see a list of user groups, Kotlin nights and other ways that you can get involved!</p></section><section class="chapter"  ><h2 id="foundation-faq.md-how-is-the-kotlin-foundation-governed" data-toc="foundation-faq#foundation-faq.md-how-is-the-kotlin-foundation-governed"  >How is the Kotlin Foundation governed?</h2><p id="foundation-faq.md-192f09a2" >The Foundation is governed by the Board of Directors, who then appoint a president, Lead Language Designer and members of the Language Committee. JetBrains and Google each delegate two directors to the board. The independent member is elected by the rest of the board.</p></section><section class="chapter"  ><h2 id="foundation-faq.md-do-jetbrains-and-google-contribute-financially-to-the-foundation" data-toc="foundation-faq#foundation-faq.md-do-jetbrains-and-google-contribute-financially-to-the-foundation"  >Do JetBrains and Google contribute financially to the foundation?</h2><p id="foundation-faq.md-b2a56d5" >Yes, to cover the operational and administrative expenses.</p></section><section class="chapter"  ><h2 id="foundation-faq.md-does-the-foundation-generate-any-revenue" data-toc="foundation-faq#foundation-faq.md-does-the-foundation-generate-any-revenue"  >Does the foundation generate any revenue?</h2><p id="foundation-faq.md-3959258d" >No, Kotlin Foundation is a non-profit entity whose operational costs are covered by JetBrains and Google.</p></section><section class="chapter"  ><h2 id="foundation-faq.md-can-i-license-the-kotlin-trademark" data-toc="foundation-faq#foundation-faq.md-can-i-license-the-kotlin-trademark"  >Can I license the Kotlin trademark?</h2><p id="foundation-faq.md-f1f83847" >Yes. You are free to use the Kotlin trademark in accordance with our <a href="#guidelines.md" id="foundation-faq.md-22090542"   >Kotlin brand usage guidelines</a>. Any use of the Trademark other than those described in the Guidelines must be approved in advance. If you need a specific license, please <a href="https://surveys.jetbrains.com/s3/request-for-permission-of-kotlin-trademark-usage" id="foundation-faq.md-25a47358"   data-external="true" rel="noopener noreferrer" >refer to the request form</a></p></section><section class="chapter"  ><h2 id="foundation-faq.md-how-can-a-company-or-an-individual-join-the-foundation" data-toc="foundation-faq#foundation-faq.md-how-can-a-company-or-an-individual-join-the-foundation"  >How can a company or an individual join the foundation?</h2><p id="foundation-faq.md-816c336b" >We are discussing possible ways for companies and individuals to participate, and will provide updates here in the future.</p></section><section class="chapter"  ><h2 id="foundation-faq.md-what-resources-should-i-follow-to-stay-up-to-date-on-kotlin" data-toc="foundation-faq#foundation-faq.md-what-resources-should-i-follow-to-stay-up-to-date-on-kotlin"  >What resources should I follow to stay up-to-date on Kotlin?</h2><p id="foundation-faq.md-b898f42d" >The best way to stay up-to-date on Kotlin is to visit the official <a href="https://kotlinlang.org" id="foundation-faq.md-890282e6"   data-external="true" rel="noopener noreferrer" >Kotlin website</a>, and follow the official <a href="https://blog.jetbrains.com/kotlin/" id="foundation-faq.md-267d0d31"   data-external="true" rel="noopener noreferrer" >Kotlin blog</a>.</p></section></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="security.md"  >Security</h1><p id="security.md-5bd9ab69" >We do our best to make sure our products are free of security vulnerabilities. To reduce the risk of introducing a vulnerability, you can follow these best practices:</p><ul class="list _ul" id="security.md-889ade85"   ><li class="list__item" id="security.md-69e84697" ><p id="security.md-5f4fd866" >Always use the latest Kotlin release. For security purposes, we sign our releases published on <a href="https://search.maven.org/search?q=g:org.jetbrains.kotlin" id="security.md-9022bdef"   data-external="true" rel="noopener noreferrer" >Maven Central</a> with these PGP keys:</p><ul class="list _ul" id="security.md-6fe8788b"   ><li class="list__item" id="security.md-5cebc915" ><p>Key ID: <b id="security.md-e2206024" class=""  >kt-a@jetbrains.com</b></p></li><li class="list__item" id="security.md-c5c82159" ><p>Fingerprint: <b id="security.md-cc8da8c0" class=""  >2FBA 29D0 8D2E 25EE 84C1 32C3 0729 A0AF F899 9A87</b></p></li><li class="list__item" id="security.md-20f427b3" ><p>Key size: <b id="security.md-2c95f2f" class=""  >RSA 3072</b></p></li></ul></li><li class="list__item" id="security.md-9d535ffa" ><p id="security.md-ab6b7628" >Use the latest versions of your application’s dependencies. If you need to use a specific version of a dependency, periodically check if any new security vulnerabilities have been discovered. You can follow <a href="https://help.github.com/en/github/managing-security-vulnerabilities/managing-vulnerabilities-in-your-projects-dependencies" id="security.md-11245ae1"   data-external="true" rel="noopener noreferrer" >the guidelines from GitHub</a> or browse known vulnerabilities in the <a href="https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=kotlin" id="security.md-976306f"   data-external="true" rel="noopener noreferrer" >CVE base</a>.</p></li></ul><p id="security.md-9e16b9ef" >We are very eager and grateful to hear about any security issues you find. To report vulnerabilities that you discover in Kotlin, please post a message directly to our <a href="https://youtrack.jetbrains.com/newIssue?project=KT&c=Type%20Security%20Problem" id="security.md-4b2f650f"   data-external="true" rel="noopener noreferrer" >issue tracker</a> or send us an <a href="mailto:security@jetbrains.org" id="security.md-c374bdec"   data-external="true" >email</a>.</p><p id="security.md-8ca51366" >For more information on how our responsible disclosure process works, please check the <a href="https://www.jetbrains.com/legal/terms/coordinated-disclosure.html" id="security.md-2ddefdf6"   data-external="true" rel="noopener noreferrer" >JetBrains Coordinated Disclosure Policy</a>.</p></article><div id="disqus_thread"></div></div></section><section class="panel__content"><div class="container"><article class="article" data-shortcut-switcher="inactive"><h1 id="kotlin-pdf.md"  >Kotlin documentation as PDF</h1><p id="kotlin-pdf.md-426792aa" >Here you can download a PDF version of Kotlin documentation that includes everything except tutorials and API reference.</p><aside data-type="note" class="prompt" data-title="" id="kotlin-pdf.md-c03a7022" ><p id="kotlin-pdf.md-64d9d31c" >Kotlin documentation is constantly being updated. The Kotlin PDF includes Kotlin 1.4.30 documentation updates but doesn\'t include later changes. <br/> We recommend using the latest version of Kotlin documentation available <a href="#home.md" id="kotlin-pdf.md-3b313799"   >online</a>.</p></aside><p id="kotlin-pdf.md-b9651d26" ><b id="kotlin-pdf.md-4b9f51db" class=""  ><a href="https://kotlinlang.org/docs/kotlin-reference.pdf" id="kotlin-pdf.md-3971f4b5"   data-external="true" rel="noopener noreferrer" >Download Kotlin 1.4.30 documentation (PDF)</a></b></p><p id="kotlin-pdf.md-29d3596e" ><b id="kotlin-pdf.md-fc37b53" class=""  ><a href="#home.md" id="kotlin-pdf.md-dbbc536b"   >View the latest Kotlin documentation (online)</a></b></p></article><div id="disqus_thread"></div></div></section>'}});
//# sourceMappingURL=pdf.js.map